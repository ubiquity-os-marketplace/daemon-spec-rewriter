require('./sourcemap-register.js');/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 733:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(857));
const utils_1 = __nccwpck_require__(7201);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return (0, utils_1.toCommandValue)(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return (0, utils_1.toCommandValue)(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 641:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.platform = exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = exports.markdownSummary = exports.summary = exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(733);
const file_command_1 = __nccwpck_require__(5552);
const utils_1 = __nccwpck_require__(7201);
const os = __importStar(__nccwpck_require__(857));
const path = __importStar(__nccwpck_require__(6928));
const oidc_utils_1 = __nccwpck_require__(4967);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode || (exports.ExitCode = ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = (0, utils_1.toCommandValue)(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        return (0, file_command_1.issueFileCommand)('ENV', (0, file_command_1.prepareKeyValueMessage)(name, val));
    }
    (0, command_1.issueCommand)('set-env', { name }, convertedVal);
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    (0, command_1.issueCommand)('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        (0, file_command_1.issueFileCommand)('PATH', inputPath);
    }
    else {
        (0, command_1.issueCommand)('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    if (options && options.trimWhitespace === false) {
        return inputs;
    }
    return inputs.map(input => input.trim());
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    const filePath = process.env['GITHUB_OUTPUT'] || '';
    if (filePath) {
        return (0, file_command_1.issueFileCommand)('OUTPUT', (0, file_command_1.prepareKeyValueMessage)(name, value));
    }
    process.stdout.write(os.EOL);
    (0, command_1.issueCommand)('set-output', { name }, (0, utils_1.toCommandValue)(value));
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    (0, command_1.issue)('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    (0, command_1.issueCommand)('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    (0, command_1.issueCommand)('error', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    (0, command_1.issueCommand)('warning', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    (0, command_1.issueCommand)('notice', (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    (0, command_1.issue)('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    (0, command_1.issue)('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    const filePath = process.env['GITHUB_STATE'] || '';
    if (filePath) {
        return (0, file_command_1.issueFileCommand)('STATE', (0, file_command_1.prepareKeyValueMessage)(name, value));
    }
    (0, command_1.issueCommand)('save-state', { name }, (0, utils_1.toCommandValue)(value));
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(2704);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(2704);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(4077);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
/**
 * Platform utilities exports
 */
exports.platform = __importStar(__nccwpck_require__(9701));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 5552:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const crypto = __importStar(__nccwpck_require__(6982));
const fs = __importStar(__nccwpck_require__(9896));
const os = __importStar(__nccwpck_require__(857));
const utils_1 = __nccwpck_require__(7201);
function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${(0, utils_1.toCommandValue)(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${crypto.randomUUID()}`;
    const convertedValue = (0, utils_1.toCommandValue)(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
}
exports.prepareKeyValueMessage = prepareKeyValueMessage;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 4967:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(4437);
const auth_1 = __nccwpck_require__(331);
const core_1 = __nccwpck_require__(641);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                (0, core_1.debug)(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                (0, core_1.setSecret)(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 4077:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(6928));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 9701:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDetails = exports.isLinux = exports.isMacOS = exports.isWindows = exports.arch = exports.platform = void 0;
const os_1 = __importDefault(__nccwpck_require__(857));
const exec = __importStar(__nccwpck_require__(633));
const getWindowsInfo = () => __awaiter(void 0, void 0, void 0, function* () {
    const { stdout: version } = yield exec.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Version"', undefined, {
        silent: true
    });
    const { stdout: name } = yield exec.getExecOutput('powershell -command "(Get-CimInstance -ClassName Win32_OperatingSystem).Caption"', undefined, {
        silent: true
    });
    return {
        name: name.trim(),
        version: version.trim()
    };
});
const getMacOsInfo = () => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    const { stdout } = yield exec.getExecOutput('sw_vers', undefined, {
        silent: true
    });
    const version = (_b = (_a = stdout.match(/ProductVersion:\s*(.+)/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : '';
    const name = (_d = (_c = stdout.match(/ProductName:\s*(.+)/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : '';
    return {
        name,
        version
    };
});
const getLinuxInfo = () => __awaiter(void 0, void 0, void 0, function* () {
    const { stdout } = yield exec.getExecOutput('lsb_release', ['-i', '-r', '-s'], {
        silent: true
    });
    const [name, version] = stdout.trim().split('\n');
    return {
        name,
        version
    };
});
exports.platform = os_1.default.platform();
exports.arch = os_1.default.arch();
exports.isWindows = exports.platform === 'win32';
exports.isMacOS = exports.platform === 'darwin';
exports.isLinux = exports.platform === 'linux';
function getDetails() {
    return __awaiter(this, void 0, void 0, function* () {
        return Object.assign(Object.assign({}, (yield (exports.isWindows
            ? getWindowsInfo()
            : exports.isMacOS
                ? getMacOsInfo()
                : getLinuxInfo()))), { platform: exports.platform,
            arch: exports.arch,
            isWindows: exports.isWindows,
            isMacOS: exports.isMacOS,
            isLinux: exports.isLinux });
    });
}
exports.getDetails = getDetails;
//# sourceMappingURL=platform.js.map

/***/ }),

/***/ 2704:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(857);
const fs_1 = __nccwpck_require__(9896);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 7201:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 633:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getExecOutput = exports.exec = void 0;
const string_decoder_1 = __nccwpck_require__(3193);
const tr = __importStar(__nccwpck_require__(6960));
/**
 * Exec a command.
 * Output will be streamed to the live console.
 * Returns promise with return code
 *
 * @param     commandLine        command to execute (can include additional args). Must be correctly escaped.
 * @param     args               optional arguments for tool. Escaping is handled by the lib.
 * @param     options            optional exec options.  See ExecOptions
 * @returns   Promise<number>    exit code
 */
function exec(commandLine, args, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const commandArgs = tr.argStringToArray(commandLine);
        if (commandArgs.length === 0) {
            throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
        }
        // Path to tool to execute should be first arg
        const toolPath = commandArgs[0];
        args = commandArgs.slice(1).concat(args || []);
        const runner = new tr.ToolRunner(toolPath, args, options);
        return runner.exec();
    });
}
exports.exec = exec;
/**
 * Exec a command and get the output.
 * Output will be streamed to the live console.
 * Returns promise with the exit code and collected stdout and stderr
 *
 * @param     commandLine           command to execute (can include additional args). Must be correctly escaped.
 * @param     args                  optional arguments for tool. Escaping is handled by the lib.
 * @param     options               optional exec options.  See ExecOptions
 * @returns   Promise<ExecOutput>   exit code, stdout, and stderr
 */
function getExecOutput(commandLine, args, options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        let stdout = '';
        let stderr = '';
        //Using string decoder covers the case where a mult-byte character is split
        const stdoutDecoder = new string_decoder_1.StringDecoder('utf8');
        const stderrDecoder = new string_decoder_1.StringDecoder('utf8');
        const originalStdoutListener = (_a = options === null || options === void 0 ? void 0 : options.listeners) === null || _a === void 0 ? void 0 : _a.stdout;
        const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;
        const stdErrListener = (data) => {
            stderr += stderrDecoder.write(data);
            if (originalStdErrListener) {
                originalStdErrListener(data);
            }
        };
        const stdOutListener = (data) => {
            stdout += stdoutDecoder.write(data);
            if (originalStdoutListener) {
                originalStdoutListener(data);
            }
        };
        const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), { stdout: stdOutListener, stderr: stdErrListener });
        const exitCode = yield exec(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
        //flush any remaining characters
        stdout += stdoutDecoder.end();
        stderr += stderrDecoder.end();
        return {
            exitCode,
            stdout,
            stderr
        };
    });
}
exports.getExecOutput = getExecOutput;
//# sourceMappingURL=exec.js.map

/***/ }),

/***/ 6960:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.argStringToArray = exports.ToolRunner = void 0;
const os = __importStar(__nccwpck_require__(857));
const events = __importStar(__nccwpck_require__(4434));
const child = __importStar(__nccwpck_require__(5317));
const path = __importStar(__nccwpck_require__(6928));
const io = __importStar(__nccwpck_require__(1907));
const ioUtil = __importStar(__nccwpck_require__(6236));
const timers_1 = __nccwpck_require__(3557);
/* eslint-disable @typescript-eslint/unbound-method */
const IS_WINDOWS = process.platform === 'win32';
/*
 * Class for running command line tools. Handles quoting and arg parsing in a platform agnostic way.
 */
class ToolRunner extends events.EventEmitter {
    constructor(toolPath, args, options) {
        super();
        if (!toolPath) {
            throw new Error("Parameter 'toolPath' cannot be null or empty.");
        }
        this.toolPath = toolPath;
        this.args = args || [];
        this.options = options || {};
    }
    _debug(message) {
        if (this.options.listeners && this.options.listeners.debug) {
            this.options.listeners.debug(message);
        }
    }
    _getCommandString(options, noPrefix) {
        const toolPath = this._getSpawnFileName();
        const args = this._getSpawnArgs(options);
        let cmd = noPrefix ? '' : '[command]'; // omit prefix when piped to a second tool
        if (IS_WINDOWS) {
            // Windows + cmd file
            if (this._isCmdFile()) {
                cmd += toolPath;
                for (const a of args) {
                    cmd += ` ${a}`;
                }
            }
            // Windows + verbatim
            else if (options.windowsVerbatimArguments) {
                cmd += `"${toolPath}"`;
                for (const a of args) {
                    cmd += ` ${a}`;
                }
            }
            // Windows (regular)
            else {
                cmd += this._windowsQuoteCmdArg(toolPath);
                for (const a of args) {
                    cmd += ` ${this._windowsQuoteCmdArg(a)}`;
                }
            }
        }
        else {
            // OSX/Linux - this can likely be improved with some form of quoting.
            // creating processes on Unix is fundamentally different than Windows.
            // on Unix, execvp() takes an arg array.
            cmd += toolPath;
            for (const a of args) {
                cmd += ` ${a}`;
            }
        }
        return cmd;
    }
    _processLineBuffer(data, strBuffer, onLine) {
        try {
            let s = strBuffer + data.toString();
            let n = s.indexOf(os.EOL);
            while (n > -1) {
                const line = s.substring(0, n);
                onLine(line);
                // the rest of the string ...
                s = s.substring(n + os.EOL.length);
                n = s.indexOf(os.EOL);
            }
            return s;
        }
        catch (err) {
            // streaming lines to console is best effort.  Don't fail a build.
            this._debug(`error processing line. Failed with error ${err}`);
            return '';
        }
    }
    _getSpawnFileName() {
        if (IS_WINDOWS) {
            if (this._isCmdFile()) {
                return process.env['COMSPEC'] || 'cmd.exe';
            }
        }
        return this.toolPath;
    }
    _getSpawnArgs(options) {
        if (IS_WINDOWS) {
            if (this._isCmdFile()) {
                let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
                for (const a of this.args) {
                    argline += ' ';
                    argline += options.windowsVerbatimArguments
                        ? a
                        : this._windowsQuoteCmdArg(a);
                }
                argline += '"';
                return [argline];
            }
        }
        return this.args;
    }
    _endsWith(str, end) {
        return str.endsWith(end);
    }
    _isCmdFile() {
        const upperToolPath = this.toolPath.toUpperCase();
        return (this._endsWith(upperToolPath, '.CMD') ||
            this._endsWith(upperToolPath, '.BAT'));
    }
    _windowsQuoteCmdArg(arg) {
        // for .exe, apply the normal quoting rules that libuv applies
        if (!this._isCmdFile()) {
            return this._uvQuoteCmdArg(arg);
        }
        // otherwise apply quoting rules specific to the cmd.exe command line parser.
        // the libuv rules are generic and are not designed specifically for cmd.exe
        // command line parser.
        //
        // for a detailed description of the cmd.exe command line parser, refer to
        // http://stackoverflow.com/questions/4094699/how-does-the-windows-command-interpreter-cmd-exe-parse-scripts/7970912#7970912
        // need quotes for empty arg
        if (!arg) {
            return '""';
        }
        // determine whether the arg needs to be quoted
        const cmdSpecialChars = [
            ' ',
            '\t',
            '&',
            '(',
            ')',
            '[',
            ']',
            '{',
            '}',
            '^',
            '=',
            ';',
            '!',
            "'",
            '+',
            ',',
            '`',
            '~',
            '|',
            '<',
            '>',
            '"'
        ];
        let needsQuotes = false;
        for (const char of arg) {
            if (cmdSpecialChars.some(x => x === char)) {
                needsQuotes = true;
                break;
            }
        }
        // short-circuit if quotes not needed
        if (!needsQuotes) {
            return arg;
        }
        // the following quoting rules are very similar to the rules that by libuv applies.
        //
        // 1) wrap the string in quotes
        //
        // 2) double-up quotes - i.e. " => ""
        //
        //    this is different from the libuv quoting rules. libuv replaces " with \", which unfortunately
        //    doesn't work well with a cmd.exe command line.
        //
        //    note, replacing " with "" also works well if the arg is passed to a downstream .NET console app.
        //    for example, the command line:
        //          foo.exe "myarg:""my val"""
        //    is parsed by a .NET console app into an arg array:
        //          [ "myarg:\"my val\"" ]
        //    which is the same end result when applying libuv quoting rules. although the actual
        //    command line from libuv quoting rules would look like:
        //          foo.exe "myarg:\"my val\""
        //
        // 3) double-up slashes that precede a quote,
        //    e.g.  hello \world    => "hello \world"
        //          hello\"world    => "hello\\""world"
        //          hello\\"world   => "hello\\\\""world"
        //          hello world\    => "hello world\\"
        //
        //    technically this is not required for a cmd.exe command line, or the batch argument parser.
        //    the reasons for including this as a .cmd quoting rule are:
        //
        //    a) this is optimized for the scenario where the argument is passed from the .cmd file to an
        //       external program. many programs (e.g. .NET console apps) rely on the slash-doubling rule.
        //
        //    b) it's what we've been doing previously (by deferring to node default behavior) and we
        //       haven't heard any complaints about that aspect.
        //
        // note, a weakness of the quoting rules chosen here, is that % is not escaped. in fact, % cannot be
        // escaped when used on the command line directly - even though within a .cmd file % can be escaped
        // by using %%.
        //
        // the saving grace is, on the command line, %var% is left as-is if var is not defined. this contrasts
        // the line parsing rules within a .cmd file, where if var is not defined it is replaced with nothing.
        //
        // one option that was explored was replacing % with ^% - i.e. %var% => ^%var^%. this hack would
        // often work, since it is unlikely that var^ would exist, and the ^ character is removed when the
        // variable is used. the problem, however, is that ^ is not removed when %* is used to pass the args
        // to an external program.
        //
        // an unexplored potential solution for the % escaping problem, is to create a wrapper .cmd file.
        // % can be escaped within a .cmd file.
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
            // walk the string in reverse
            reverse += arg[i - 1];
            if (quoteHit && arg[i - 1] === '\\') {
                reverse += '\\'; // double the slash
            }
            else if (arg[i - 1] === '"') {
                quoteHit = true;
                reverse += '"'; // double the quote
            }
            else {
                quoteHit = false;
            }
        }
        reverse += '"';
        return reverse
            .split('')
            .reverse()
            .join('');
    }
    _uvQuoteCmdArg(arg) {
        // Tool runner wraps child_process.spawn() and needs to apply the same quoting as
        // Node in certain cases where the undocumented spawn option windowsVerbatimArguments
        // is used.
        //
        // Since this function is a port of quote_cmd_arg from Node 4.x (technically, lib UV,
        // see https://github.com/nodejs/node/blob/v4.x/deps/uv/src/win/process.c for details),
        // pasting copyright notice from Node within this function:
        //
        //      Copyright Joyent, Inc. and other Node contributors. All rights reserved.
        //
        //      Permission is hereby granted, free of charge, to any person obtaining a copy
        //      of this software and associated documentation files (the "Software"), to
        //      deal in the Software without restriction, including without limitation the
        //      rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
        //      sell copies of the Software, and to permit persons to whom the Software is
        //      furnished to do so, subject to the following conditions:
        //
        //      The above copyright notice and this permission notice shall be included in
        //      all copies or substantial portions of the Software.
        //
        //      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        //      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        //      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        //      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        //      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
        //      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
        //      IN THE SOFTWARE.
        if (!arg) {
            // Need double quotation for empty argument
            return '""';
        }
        if (!arg.includes(' ') && !arg.includes('\t') && !arg.includes('"')) {
            // No quotation needed
            return arg;
        }
        if (!arg.includes('"') && !arg.includes('\\')) {
            // No embedded double quotes or backslashes, so I can just wrap
            // quote marks around the whole thing.
            return `"${arg}"`;
        }
        // Expected input/output:
        //   input : hello"world
        //   output: "hello\"world"
        //   input : hello""world
        //   output: "hello\"\"world"
        //   input : hello\world
        //   output: hello\world
        //   input : hello\\world
        //   output: hello\\world
        //   input : hello\"world
        //   output: "hello\\\"world"
        //   input : hello\\"world
        //   output: "hello\\\\\"world"
        //   input : hello world\
        //   output: "hello world\\" - note the comment in libuv actually reads "hello world\"
        //                             but it appears the comment is wrong, it should be "hello world\\"
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
            // walk the string in reverse
            reverse += arg[i - 1];
            if (quoteHit && arg[i - 1] === '\\') {
                reverse += '\\';
            }
            else if (arg[i - 1] === '"') {
                quoteHit = true;
                reverse += '\\';
            }
            else {
                quoteHit = false;
            }
        }
        reverse += '"';
        return reverse
            .split('')
            .reverse()
            .join('');
    }
    _cloneExecOptions(options) {
        options = options || {};
        const result = {
            cwd: options.cwd || process.cwd(),
            env: options.env || process.env,
            silent: options.silent || false,
            windowsVerbatimArguments: options.windowsVerbatimArguments || false,
            failOnStdErr: options.failOnStdErr || false,
            ignoreReturnCode: options.ignoreReturnCode || false,
            delay: options.delay || 10000
        };
        result.outStream = options.outStream || process.stdout;
        result.errStream = options.errStream || process.stderr;
        return result;
    }
    _getSpawnOptions(options, toolPath) {
        options = options || {};
        const result = {};
        result.cwd = options.cwd;
        result.env = options.env;
        result['windowsVerbatimArguments'] =
            options.windowsVerbatimArguments || this._isCmdFile();
        if (options.windowsVerbatimArguments) {
            result.argv0 = `"${toolPath}"`;
        }
        return result;
    }
    /**
     * Exec a tool.
     * Output will be streamed to the live console.
     * Returns promise with return code
     *
     * @param     tool     path to tool to exec
     * @param     options  optional exec options.  See ExecOptions
     * @returns   number
     */
    exec() {
        return __awaiter(this, void 0, void 0, function* () {
            // root the tool path if it is unrooted and contains relative pathing
            if (!ioUtil.isRooted(this.toolPath) &&
                (this.toolPath.includes('/') ||
                    (IS_WINDOWS && this.toolPath.includes('\\')))) {
                // prefer options.cwd if it is specified, however options.cwd may also need to be rooted
                this.toolPath = path.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
            }
            // if the tool is only a file name, then resolve it from the PATH
            // otherwise verify it exists (add extension on Windows if necessary)
            this.toolPath = yield io.which(this.toolPath, true);
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this._debug(`exec tool: ${this.toolPath}`);
                this._debug('arguments:');
                for (const arg of this.args) {
                    this._debug(`   ${arg}`);
                }
                const optionsNonNull = this._cloneExecOptions(this.options);
                if (!optionsNonNull.silent && optionsNonNull.outStream) {
                    optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);
                }
                const state = new ExecState(optionsNonNull, this.toolPath);
                state.on('debug', (message) => {
                    this._debug(message);
                });
                if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) {
                    return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
                }
                const fileName = this._getSpawnFileName();
                const cp = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
                let stdbuffer = '';
                if (cp.stdout) {
                    cp.stdout.on('data', (data) => {
                        if (this.options.listeners && this.options.listeners.stdout) {
                            this.options.listeners.stdout(data);
                        }
                        if (!optionsNonNull.silent && optionsNonNull.outStream) {
                            optionsNonNull.outStream.write(data);
                        }
                        stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
                            if (this.options.listeners && this.options.listeners.stdline) {
                                this.options.listeners.stdline(line);
                            }
                        });
                    });
                }
                let errbuffer = '';
                if (cp.stderr) {
                    cp.stderr.on('data', (data) => {
                        state.processStderr = true;
                        if (this.options.listeners && this.options.listeners.stderr) {
                            this.options.listeners.stderr(data);
                        }
                        if (!optionsNonNull.silent &&
                            optionsNonNull.errStream &&
                            optionsNonNull.outStream) {
                            const s = optionsNonNull.failOnStdErr
                                ? optionsNonNull.errStream
                                : optionsNonNull.outStream;
                            s.write(data);
                        }
                        errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
                            if (this.options.listeners && this.options.listeners.errline) {
                                this.options.listeners.errline(line);
                            }
                        });
                    });
                }
                cp.on('error', (err) => {
                    state.processError = err.message;
                    state.processExited = true;
                    state.processClosed = true;
                    state.CheckComplete();
                });
                cp.on('exit', (code) => {
                    state.processExitCode = code;
                    state.processExited = true;
                    this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
                    state.CheckComplete();
                });
                cp.on('close', (code) => {
                    state.processExitCode = code;
                    state.processExited = true;
                    state.processClosed = true;
                    this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
                    state.CheckComplete();
                });
                state.on('done', (error, exitCode) => {
                    if (stdbuffer.length > 0) {
                        this.emit('stdline', stdbuffer);
                    }
                    if (errbuffer.length > 0) {
                        this.emit('errline', errbuffer);
                    }
                    cp.removeAllListeners();
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(exitCode);
                    }
                });
                if (this.options.input) {
                    if (!cp.stdin) {
                        throw new Error('child process missing stdin');
                    }
                    cp.stdin.end(this.options.input);
                }
            }));
        });
    }
}
exports.ToolRunner = ToolRunner;
/**
 * Convert an arg string to an array of args. Handles escaping
 *
 * @param    argString   string of arguments
 * @returns  string[]    array of arguments
 */
function argStringToArray(argString) {
    const args = [];
    let inQuotes = false;
    let escaped = false;
    let arg = '';
    function append(c) {
        // we only escape double quotes.
        if (escaped && c !== '"') {
            arg += '\\';
        }
        arg += c;
        escaped = false;
    }
    for (let i = 0; i < argString.length; i++) {
        const c = argString.charAt(i);
        if (c === '"') {
            if (!escaped) {
                inQuotes = !inQuotes;
            }
            else {
                append(c);
            }
            continue;
        }
        if (c === '\\' && escaped) {
            append(c);
            continue;
        }
        if (c === '\\' && inQuotes) {
            escaped = true;
            continue;
        }
        if (c === ' ' && !inQuotes) {
            if (arg.length > 0) {
                args.push(arg);
                arg = '';
            }
            continue;
        }
        append(c);
    }
    if (arg.length > 0) {
        args.push(arg.trim());
    }
    return args;
}
exports.argStringToArray = argStringToArray;
class ExecState extends events.EventEmitter {
    constructor(options, toolPath) {
        super();
        this.processClosed = false; // tracks whether the process has exited and stdio is closed
        this.processError = '';
        this.processExitCode = 0;
        this.processExited = false; // tracks whether the process has exited
        this.processStderr = false; // tracks whether stderr was written to
        this.delay = 10000; // 10 seconds
        this.done = false;
        this.timeout = null;
        if (!toolPath) {
            throw new Error('toolPath must not be empty');
        }
        this.options = options;
        this.toolPath = toolPath;
        if (options.delay) {
            this.delay = options.delay;
        }
    }
    CheckComplete() {
        if (this.done) {
            return;
        }
        if (this.processClosed) {
            this._setResult();
        }
        else if (this.processExited) {
            this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);
        }
    }
    _debug(message) {
        this.emit('debug', message);
    }
    _setResult() {
        // determine whether there is an error
        let error;
        if (this.processExited) {
            if (this.processError) {
                error = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
            }
            else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {
                error = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
            }
            else if (this.processStderr && this.options.failOnStdErr) {
                error = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
            }
        }
        // clear the timeout
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
        }
        this.done = true;
        this.emit('done', error, this.processExitCode);
    }
    static HandleTimeout(state) {
        if (state.done) {
            return;
        }
        if (!state.processClosed && state.processExited) {
            const message = `The STDIO streams did not close within ${state.delay /
                1000} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
            state._debug(message);
        }
        state._setResult();
    }
}
//# sourceMappingURL=toolrunner.js.map

/***/ }),

/***/ 6539:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Context = void 0;
const fs_1 = __nccwpck_require__(9896);
const os_1 = __nccwpck_require__(857);
class Context {
    /**
     * Hydrate the context from the environment
     */
    constructor() {
        var _a, _b, _c;
        this.payload = {};
        if (process.env.GITHUB_EVENT_PATH) {
            if ((0, fs_1.existsSync)(process.env.GITHUB_EVENT_PATH)) {
                this.payload = JSON.parse((0, fs_1.readFileSync)(process.env.GITHUB_EVENT_PATH, { encoding: 'utf8' }));
            }
            else {
                const path = process.env.GITHUB_EVENT_PATH;
                process.stdout.write(`GITHUB_EVENT_PATH ${path} does not exist${os_1.EOL}`);
            }
        }
        this.eventName = process.env.GITHUB_EVENT_NAME;
        this.sha = process.env.GITHUB_SHA;
        this.ref = process.env.GITHUB_REF;
        this.workflow = process.env.GITHUB_WORKFLOW;
        this.action = process.env.GITHUB_ACTION;
        this.actor = process.env.GITHUB_ACTOR;
        this.job = process.env.GITHUB_JOB;
        this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
        this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
        this.apiUrl = (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0 ? _a : `https://api.github.com`;
        this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;
        this.graphqlUrl =
            (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;
    }
    get issue() {
        const payload = this.payload;
        return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });
    }
    get repo() {
        if (process.env.GITHUB_REPOSITORY) {
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            return { owner, repo };
        }
        if (this.payload.repository) {
            return {
                owner: this.payload.repository.owner.login,
                repo: this.payload.repository.name
            };
        }
        throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
    }
}
exports.Context = Context;
//# sourceMappingURL=context.js.map

/***/ }),

/***/ 1685:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getOctokit = exports.context = void 0;
const Context = __importStar(__nccwpck_require__(6539));
const utils_1 = __nccwpck_require__(5553);
exports.context = new Context.Context();
/**
 * Returns a hydrated octokit ready to use for GitHub Actions
 *
 * @param     token    the repo PAT or GITHUB_TOKEN
 * @param     options  other options to set
 */
function getOctokit(token, options, ...additionalPlugins) {
    const GitHubWithPlugins = utils_1.GitHub.plugin(...additionalPlugins);
    return new GitHubWithPlugins((0, utils_1.getOctokitOptions)(token, options));
}
exports.getOctokit = getOctokit;
//# sourceMappingURL=github.js.map

/***/ }),

/***/ 7857:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getApiBaseUrl = exports.getProxyFetch = exports.getProxyAgentDispatcher = exports.getProxyAgent = exports.getAuthString = void 0;
const httpClient = __importStar(__nccwpck_require__(4437));
const undici_1 = __nccwpck_require__(1861);
function getAuthString(token, options) {
    if (!token && !options.auth) {
        throw new Error('Parameter token or opts.auth is required');
    }
    else if (token && options.auth) {
        throw new Error('Parameters token and opts.auth may not both be specified');
    }
    return typeof options.auth === 'string' ? options.auth : `token ${token}`;
}
exports.getAuthString = getAuthString;
function getProxyAgent(destinationUrl) {
    const hc = new httpClient.HttpClient();
    return hc.getAgent(destinationUrl);
}
exports.getProxyAgent = getProxyAgent;
function getProxyAgentDispatcher(destinationUrl) {
    const hc = new httpClient.HttpClient();
    return hc.getAgentDispatcher(destinationUrl);
}
exports.getProxyAgentDispatcher = getProxyAgentDispatcher;
function getProxyFetch(destinationUrl) {
    const httpDispatcher = getProxyAgentDispatcher(destinationUrl);
    const proxyFetch = (url, opts) => __awaiter(this, void 0, void 0, function* () {
        return (0, undici_1.fetch)(url, Object.assign(Object.assign({}, opts), { dispatcher: httpDispatcher }));
    });
    return proxyFetch;
}
exports.getProxyFetch = getProxyFetch;
function getApiBaseUrl() {
    return process.env['GITHUB_API_URL'] || 'https://api.github.com';
}
exports.getApiBaseUrl = getApiBaseUrl;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 5553:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getOctokitOptions = exports.GitHub = exports.defaults = exports.context = void 0;
const Context = __importStar(__nccwpck_require__(6539));
const Utils = __importStar(__nccwpck_require__(7857));
// octokit + plugins
const core_1 = __nccwpck_require__(9214);
const plugin_rest_endpoint_methods_1 = __nccwpck_require__(5779);
const plugin_paginate_rest_1 = __nccwpck_require__(6446);
exports.context = new Context.Context();
const baseUrl = Utils.getApiBaseUrl();
exports.defaults = {
    baseUrl,
    request: {
        agent: Utils.getProxyAgent(baseUrl),
        fetch: Utils.getProxyFetch(baseUrl)
    }
};
exports.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(exports.defaults);
/**
 * Convience function to correctly format Octokit Options to pass into the constructor.
 *
 * @param     token    the repo PAT or GITHUB_TOKEN
 * @param     options  other options to set
 */
function getOctokitOptions(token, options) {
    const opts = Object.assign({}, options || {}); // Shallow clone - don't mutate the object provided by the caller
    // Auth
    const auth = Utils.getAuthString(token, opts);
    if (auth) {
        opts.auth = auth;
    }
    return opts;
}
exports.getOctokitOptions = getOctokitOptions;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 6446:
/***/ ((module) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  composePaginateRest: () => composePaginateRest,
  isPaginatingEndpoint: () => isPaginatingEndpoint,
  paginateRest: () => paginateRest,
  paginatingEndpoints: () => paginatingEndpoints
});
module.exports = __toCommonJS(dist_src_exports);

// pkg/dist-src/version.js
var VERSION = "9.2.2";

// pkg/dist-src/normalize-paginated-list-response.js
function normalizePaginatedListResponse(response) {
  if (!response.data) {
    return {
      ...response,
      data: []
    };
  }
  const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
  if (!responseNeedsNormalization)
    return response;
  const incompleteResults = response.data.incomplete_results;
  const repositorySelection = response.data.repository_selection;
  const totalCount = response.data.total_count;
  delete response.data.incomplete_results;
  delete response.data.repository_selection;
  delete response.data.total_count;
  const namespaceKey = Object.keys(response.data)[0];
  const data = response.data[namespaceKey];
  response.data = data;
  if (typeof incompleteResults !== "undefined") {
    response.data.incomplete_results = incompleteResults;
  }
  if (typeof repositorySelection !== "undefined") {
    response.data.repository_selection = repositorySelection;
  }
  response.data.total_count = totalCount;
  return response;
}

// pkg/dist-src/iterator.js
function iterator(octokit, route, parameters) {
  const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
  const requestMethod = typeof route === "function" ? route : octokit.request;
  const method = options.method;
  const headers = options.headers;
  let url = options.url;
  return {
    [Symbol.asyncIterator]: () => ({
      async next() {
        if (!url)
          return { done: true };
        try {
          const response = await requestMethod({ method, url, headers });
          const normalizedResponse = normalizePaginatedListResponse(response);
          url = ((normalizedResponse.headers.link || "").match(
            /<([^<>]+)>;\s*rel="next"/
          ) || [])[1];
          return { value: normalizedResponse };
        } catch (error) {
          if (error.status !== 409)
            throw error;
          url = "";
          return {
            value: {
              status: 200,
              headers: {},
              data: []
            }
          };
        }
      }
    })
  };
}

// pkg/dist-src/paginate.js
function paginate(octokit, route, parameters, mapFn) {
  if (typeof parameters === "function") {
    mapFn = parameters;
    parameters = void 0;
  }
  return gather(
    octokit,
    [],
    iterator(octokit, route, parameters)[Symbol.asyncIterator](),
    mapFn
  );
}
function gather(octokit, results, iterator2, mapFn) {
  return iterator2.next().then((result) => {
    if (result.done) {
      return results;
    }
    let earlyExit = false;
    function done() {
      earlyExit = true;
    }
    results = results.concat(
      mapFn ? mapFn(result.value, done) : result.value.data
    );
    if (earlyExit) {
      return results;
    }
    return gather(octokit, results, iterator2, mapFn);
  });
}

// pkg/dist-src/compose-paginate.js
var composePaginateRest = Object.assign(paginate, {
  iterator
});

// pkg/dist-src/generated/paginating-endpoints.js
var paginatingEndpoints = [
  "GET /advisories",
  "GET /app/hook/deliveries",
  "GET /app/installation-requests",
  "GET /app/installations",
  "GET /assignments/{assignment_id}/accepted_assignments",
  "GET /classrooms",
  "GET /classrooms/{classroom_id}/assignments",
  "GET /enterprises/{enterprise}/dependabot/alerts",
  "GET /enterprises/{enterprise}/secret-scanning/alerts",
  "GET /events",
  "GET /gists",
  "GET /gists/public",
  "GET /gists/starred",
  "GET /gists/{gist_id}/comments",
  "GET /gists/{gist_id}/commits",
  "GET /gists/{gist_id}/forks",
  "GET /installation/repositories",
  "GET /issues",
  "GET /licenses",
  "GET /marketplace_listing/plans",
  "GET /marketplace_listing/plans/{plan_id}/accounts",
  "GET /marketplace_listing/stubbed/plans",
  "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
  "GET /networks/{owner}/{repo}/events",
  "GET /notifications",
  "GET /organizations",
  "GET /orgs/{org}/actions/cache/usage-by-repository",
  "GET /orgs/{org}/actions/permissions/repositories",
  "GET /orgs/{org}/actions/runners",
  "GET /orgs/{org}/actions/secrets",
  "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/actions/variables",
  "GET /orgs/{org}/actions/variables/{name}/repositories",
  "GET /orgs/{org}/blocks",
  "GET /orgs/{org}/code-scanning/alerts",
  "GET /orgs/{org}/codespaces",
  "GET /orgs/{org}/codespaces/secrets",
  "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/copilot/billing/seats",
  "GET /orgs/{org}/dependabot/alerts",
  "GET /orgs/{org}/dependabot/secrets",
  "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/events",
  "GET /orgs/{org}/failed_invitations",
  "GET /orgs/{org}/hooks",
  "GET /orgs/{org}/hooks/{hook_id}/deliveries",
  "GET /orgs/{org}/installations",
  "GET /orgs/{org}/invitations",
  "GET /orgs/{org}/invitations/{invitation_id}/teams",
  "GET /orgs/{org}/issues",
  "GET /orgs/{org}/members",
  "GET /orgs/{org}/members/{username}/codespaces",
  "GET /orgs/{org}/migrations",
  "GET /orgs/{org}/migrations/{migration_id}/repositories",
  "GET /orgs/{org}/organization-roles/{role_id}/teams",
  "GET /orgs/{org}/organization-roles/{role_id}/users",
  "GET /orgs/{org}/outside_collaborators",
  "GET /orgs/{org}/packages",
  "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
  "GET /orgs/{org}/personal-access-token-requests",
  "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
  "GET /orgs/{org}/personal-access-tokens",
  "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
  "GET /orgs/{org}/projects",
  "GET /orgs/{org}/properties/values",
  "GET /orgs/{org}/public_members",
  "GET /orgs/{org}/repos",
  "GET /orgs/{org}/rulesets",
  "GET /orgs/{org}/rulesets/rule-suites",
  "GET /orgs/{org}/secret-scanning/alerts",
  "GET /orgs/{org}/security-advisories",
  "GET /orgs/{org}/teams",
  "GET /orgs/{org}/teams/{team_slug}/discussions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/invitations",
  "GET /orgs/{org}/teams/{team_slug}/members",
  "GET /orgs/{org}/teams/{team_slug}/projects",
  "GET /orgs/{org}/teams/{team_slug}/repos",
  "GET /orgs/{org}/teams/{team_slug}/teams",
  "GET /projects/columns/{column_id}/cards",
  "GET /projects/{project_id}/collaborators",
  "GET /projects/{project_id}/columns",
  "GET /repos/{owner}/{repo}/actions/artifacts",
  "GET /repos/{owner}/{repo}/actions/caches",
  "GET /repos/{owner}/{repo}/actions/organization-secrets",
  "GET /repos/{owner}/{repo}/actions/organization-variables",
  "GET /repos/{owner}/{repo}/actions/runners",
  "GET /repos/{owner}/{repo}/actions/runs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
  "GET /repos/{owner}/{repo}/actions/secrets",
  "GET /repos/{owner}/{repo}/actions/variables",
  "GET /repos/{owner}/{repo}/actions/workflows",
  "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
  "GET /repos/{owner}/{repo}/activity",
  "GET /repos/{owner}/{repo}/assignees",
  "GET /repos/{owner}/{repo}/branches",
  "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
  "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
  "GET /repos/{owner}/{repo}/code-scanning/alerts",
  "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
  "GET /repos/{owner}/{repo}/code-scanning/analyses",
  "GET /repos/{owner}/{repo}/codespaces",
  "GET /repos/{owner}/{repo}/codespaces/devcontainers",
  "GET /repos/{owner}/{repo}/codespaces/secrets",
  "GET /repos/{owner}/{repo}/collaborators",
  "GET /repos/{owner}/{repo}/comments",
  "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/commits",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
  "GET /repos/{owner}/{repo}/commits/{ref}/status",
  "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
  "GET /repos/{owner}/{repo}/contributors",
  "GET /repos/{owner}/{repo}/dependabot/alerts",
  "GET /repos/{owner}/{repo}/dependabot/secrets",
  "GET /repos/{owner}/{repo}/deployments",
  "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
  "GET /repos/{owner}/{repo}/environments",
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
  "GET /repos/{owner}/{repo}/events",
  "GET /repos/{owner}/{repo}/forks",
  "GET /repos/{owner}/{repo}/hooks",
  "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
  "GET /repos/{owner}/{repo}/invitations",
  "GET /repos/{owner}/{repo}/issues",
  "GET /repos/{owner}/{repo}/issues/comments",
  "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/issues/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
  "GET /repos/{owner}/{repo}/keys",
  "GET /repos/{owner}/{repo}/labels",
  "GET /repos/{owner}/{repo}/milestones",
  "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
  "GET /repos/{owner}/{repo}/notifications",
  "GET /repos/{owner}/{repo}/pages/builds",
  "GET /repos/{owner}/{repo}/projects",
  "GET /repos/{owner}/{repo}/pulls",
  "GET /repos/{owner}/{repo}/pulls/comments",
  "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
  "GET /repos/{owner}/{repo}/releases",
  "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
  "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
  "GET /repos/{owner}/{repo}/rules/branches/{branch}",
  "GET /repos/{owner}/{repo}/rulesets",
  "GET /repos/{owner}/{repo}/rulesets/rule-suites",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
  "GET /repos/{owner}/{repo}/security-advisories",
  "GET /repos/{owner}/{repo}/stargazers",
  "GET /repos/{owner}/{repo}/subscribers",
  "GET /repos/{owner}/{repo}/tags",
  "GET /repos/{owner}/{repo}/teams",
  "GET /repos/{owner}/{repo}/topics",
  "GET /repositories",
  "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
  "GET /repositories/{repository_id}/environments/{environment_name}/variables",
  "GET /search/code",
  "GET /search/commits",
  "GET /search/issues",
  "GET /search/labels",
  "GET /search/repositories",
  "GET /search/topics",
  "GET /search/users",
  "GET /teams/{team_id}/discussions",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
  "GET /teams/{team_id}/invitations",
  "GET /teams/{team_id}/members",
  "GET /teams/{team_id}/projects",
  "GET /teams/{team_id}/repos",
  "GET /teams/{team_id}/teams",
  "GET /user/blocks",
  "GET /user/codespaces",
  "GET /user/codespaces/secrets",
  "GET /user/emails",
  "GET /user/followers",
  "GET /user/following",
  "GET /user/gpg_keys",
  "GET /user/installations",
  "GET /user/installations/{installation_id}/repositories",
  "GET /user/issues",
  "GET /user/keys",
  "GET /user/marketplace_purchases",
  "GET /user/marketplace_purchases/stubbed",
  "GET /user/memberships/orgs",
  "GET /user/migrations",
  "GET /user/migrations/{migration_id}/repositories",
  "GET /user/orgs",
  "GET /user/packages",
  "GET /user/packages/{package_type}/{package_name}/versions",
  "GET /user/public_emails",
  "GET /user/repos",
  "GET /user/repository_invitations",
  "GET /user/social_accounts",
  "GET /user/ssh_signing_keys",
  "GET /user/starred",
  "GET /user/subscriptions",
  "GET /user/teams",
  "GET /users",
  "GET /users/{username}/events",
  "GET /users/{username}/events/orgs/{org}",
  "GET /users/{username}/events/public",
  "GET /users/{username}/followers",
  "GET /users/{username}/following",
  "GET /users/{username}/gists",
  "GET /users/{username}/gpg_keys",
  "GET /users/{username}/keys",
  "GET /users/{username}/orgs",
  "GET /users/{username}/packages",
  "GET /users/{username}/projects",
  "GET /users/{username}/received_events",
  "GET /users/{username}/received_events/public",
  "GET /users/{username}/repos",
  "GET /users/{username}/social_accounts",
  "GET /users/{username}/ssh_signing_keys",
  "GET /users/{username}/starred",
  "GET /users/{username}/subscriptions"
];

// pkg/dist-src/paginating-endpoints.js
function isPaginatingEndpoint(arg) {
  if (typeof arg === "string") {
    return paginatingEndpoints.includes(arg);
  } else {
    return false;
  }
}

// pkg/dist-src/index.js
function paginateRest(octokit) {
  return {
    paginate: Object.assign(paginate.bind(null, octokit), {
      iterator: iterator.bind(null, octokit)
    })
  };
}
paginateRest.VERSION = VERSION;
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 5779:
/***/ ((module) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  legacyRestEndpointMethods: () => legacyRestEndpointMethods,
  restEndpointMethods: () => restEndpointMethods
});
module.exports = __toCommonJS(dist_src_exports);

// pkg/dist-src/version.js
var VERSION = "10.4.1";

// pkg/dist-src/generated/endpoints.js
var Endpoints = {
  actions: {
    addCustomLabelsToSelfHostedRunnerForOrg: [
      "POST /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    addCustomLabelsToSelfHostedRunnerForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    addSelectedRepoToOrgVariable: [
      "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    ],
    approveWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"
    ],
    cancelWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
    ],
    createEnvironmentVariable: [
      "POST /repositories/{repository_id}/environments/{environment_name}/variables"
    ],
    createOrUpdateEnvironmentSecret: [
      "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    createOrgVariable: ["POST /orgs/{org}/actions/variables"],
    createRegistrationTokenForOrg: [
      "POST /orgs/{org}/actions/runners/registration-token"
    ],
    createRegistrationTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/registration-token"
    ],
    createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
    createRemoveTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/remove-token"
    ],
    createRepoVariable: ["POST /repos/{owner}/{repo}/actions/variables"],
    createWorkflowDispatch: [
      "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
    ],
    deleteActionsCacheById: [
      "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"
    ],
    deleteActionsCacheByKey: [
      "DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"
    ],
    deleteArtifact: [
      "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
    ],
    deleteEnvironmentSecret: [
      "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    deleteEnvironmentVariable: [
      "DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
    deleteOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    deleteRepoVariable: [
      "DELETE /repos/{owner}/{repo}/actions/variables/{name}"
    ],
    deleteSelfHostedRunnerFromOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}"
    ],
    deleteSelfHostedRunnerFromRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
    deleteWorkflowRunLogs: [
      "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    disableSelectedRepositoryGithubActionsOrganization: [
      "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    disableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
    ],
    downloadArtifact: [
      "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
    ],
    downloadJobLogsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
    ],
    downloadWorkflowRunAttemptLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
    ],
    downloadWorkflowRunLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    enableSelectedRepositoryGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    enableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
    ],
    forceCancelWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"
    ],
    generateRunnerJitconfigForOrg: [
      "POST /orgs/{org}/actions/runners/generate-jitconfig"
    ],
    generateRunnerJitconfigForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"
    ],
    getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
    getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
    getActionsCacheUsageByRepoForOrg: [
      "GET /orgs/{org}/actions/cache/usage-by-repository"
    ],
    getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
    getAllowedActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/selected-actions"
    ],
    getAllowedActionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
    getCustomOidcSubClaimForRepo: [
      "GET /repos/{owner}/{repo}/actions/oidc/customization/sub"
    ],
    getEnvironmentPublicKey: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
    ],
    getEnvironmentSecret: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
    ],
    getEnvironmentVariable: [
      "GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
    ],
    getGithubActionsDefaultWorkflowPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions/workflow"
    ],
    getGithubActionsDefaultWorkflowPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    getGithubActionsPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions"
    ],
    getGithubActionsPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions"
    ],
    getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
    getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
    getOrgVariable: ["GET /orgs/{org}/actions/variables/{name}"],
    getPendingDeploymentsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    getRepoPermissions: [
      "GET /repos/{owner}/{repo}/actions/permissions",
      {},
      { renamed: ["actions", "getGithubActionsPermissionsRepository"] }
    ],
    getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
    getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
    getRepoVariable: ["GET /repos/{owner}/{repo}/actions/variables/{name}"],
    getReviewsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
    ],
    getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
    getSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
    getWorkflowAccessToRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/access"
    ],
    getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
    getWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
    ],
    getWorkflowRunUsage: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"
    ],
    getWorkflowUsage: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
    ],
    listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
    listEnvironmentSecrets: [
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets"
    ],
    listEnvironmentVariables: [
      "GET /repositories/{repository_id}/environments/{environment_name}/variables"
    ],
    listJobsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
    ],
    listJobsForWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
    ],
    listLabelsForSelfHostedRunnerForOrg: [
      "GET /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    listLabelsForSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
    listOrgVariables: ["GET /orgs/{org}/actions/variables"],
    listRepoOrganizationSecrets: [
      "GET /repos/{owner}/{repo}/actions/organization-secrets"
    ],
    listRepoOrganizationVariables: [
      "GET /repos/{owner}/{repo}/actions/organization-variables"
    ],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
    listRepoVariables: ["GET /repos/{owner}/{repo}/actions/variables"],
    listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
    listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
    listRunnerApplicationsForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/downloads"
    ],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    listSelectedReposForOrgVariable: [
      "GET /orgs/{org}/actions/variables/{name}/repositories"
    ],
    listSelectedRepositoriesEnabledGithubActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/repositories"
    ],
    listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
    listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
    listWorkflowRunArtifacts: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
    ],
    listWorkflowRuns: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
    ],
    listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
    reRunJobForWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
    ],
    reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
    reRunWorkflowFailedJobs: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    removeCustomLabelFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeCustomLabelFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    removeSelectedRepoFromOrgVariable: [
      "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    ],
    reviewCustomGatesForRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"
    ],
    reviewPendingDeploymentsForRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    setAllowedActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/selected-actions"
    ],
    setAllowedActionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    setCustomLabelsForSelfHostedRunnerForOrg: [
      "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    setCustomLabelsForSelfHostedRunnerForRepo: [
      "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    setCustomOidcSubClaimForRepo: [
      "PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"
    ],
    setGithubActionsDefaultWorkflowPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/workflow"
    ],
    setGithubActionsDefaultWorkflowPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    setGithubActionsPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions"
    ],
    setGithubActionsPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    setSelectedReposForOrgVariable: [
      "PUT /orgs/{org}/actions/variables/{name}/repositories"
    ],
    setSelectedRepositoriesEnabledGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories"
    ],
    setWorkflowAccessToRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/access"
    ],
    updateEnvironmentVariable: [
      "PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
    ],
    updateOrgVariable: ["PATCH /orgs/{org}/actions/variables/{name}"],
    updateRepoVariable: [
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}"
    ]
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
    deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
    deleteThreadSubscription: [
      "DELETE /notifications/threads/{thread_id}/subscription"
    ],
    getFeeds: ["GET /feeds"],
    getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
    getThread: ["GET /notifications/threads/{thread_id}"],
    getThreadSubscriptionForAuthenticatedUser: [
      "GET /notifications/threads/{thread_id}/subscription"
    ],
    listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
    listNotificationsForAuthenticatedUser: ["GET /notifications"],
    listOrgEventsForAuthenticatedUser: [
      "GET /users/{username}/events/orgs/{org}"
    ],
    listPublicEvents: ["GET /events"],
    listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
    listPublicEventsForUser: ["GET /users/{username}/events/public"],
    listPublicOrgEvents: ["GET /orgs/{org}/events"],
    listReceivedEventsForUser: ["GET /users/{username}/received_events"],
    listReceivedPublicEventsForUser: [
      "GET /users/{username}/received_events/public"
    ],
    listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
    listRepoNotificationsForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/notifications"
    ],
    listReposStarredByAuthenticatedUser: ["GET /user/starred"],
    listReposStarredByUser: ["GET /users/{username}/starred"],
    listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
    listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
    listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
    listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
    markNotificationsAsRead: ["PUT /notifications"],
    markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
    markThreadAsDone: ["DELETE /notifications/threads/{thread_id}"],
    markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
    setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
    setThreadSubscription: [
      "PUT /notifications/threads/{thread_id}/subscription"
    ],
    starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
    unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
  },
  apps: {
    addRepoToInstallation: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
    ],
    addRepoToInstallationForAuthenticatedUser: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    checkToken: ["POST /applications/{client_id}/token"],
    createFromManifest: ["POST /app-manifests/{code}/conversions"],
    createInstallationAccessToken: [
      "POST /app/installations/{installation_id}/access_tokens"
    ],
    deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
    deleteInstallation: ["DELETE /app/installations/{installation_id}"],
    deleteToken: ["DELETE /applications/{client_id}/token"],
    getAuthenticated: ["GET /app"],
    getBySlug: ["GET /apps/{app_slug}"],
    getInstallation: ["GET /app/installations/{installation_id}"],
    getOrgInstallation: ["GET /orgs/{org}/installation"],
    getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
    getSubscriptionPlanForAccount: [
      "GET /marketplace_listing/accounts/{account_id}"
    ],
    getSubscriptionPlanForAccountStubbed: [
      "GET /marketplace_listing/stubbed/accounts/{account_id}"
    ],
    getUserInstallation: ["GET /users/{username}/installation"],
    getWebhookConfigForApp: ["GET /app/hook/config"],
    getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
    listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
    listAccountsForPlanStubbed: [
      "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"
    ],
    listInstallationReposForAuthenticatedUser: [
      "GET /user/installations/{installation_id}/repositories"
    ],
    listInstallationRequestsForAuthenticatedApp: [
      "GET /app/installation-requests"
    ],
    listInstallations: ["GET /app/installations"],
    listInstallationsForAuthenticatedUser: ["GET /user/installations"],
    listPlans: ["GET /marketplace_listing/plans"],
    listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
    listReposAccessibleToInstallation: ["GET /installation/repositories"],
    listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
    listSubscriptionsForAuthenticatedUserStubbed: [
      "GET /user/marketplace_purchases/stubbed"
    ],
    listWebhookDeliveries: ["GET /app/hook/deliveries"],
    redeliverWebhookDelivery: [
      "POST /app/hook/deliveries/{delivery_id}/attempts"
    ],
    removeRepoFromInstallation: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
    ],
    removeRepoFromInstallationForAuthenticatedUser: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    resetToken: ["PATCH /applications/{client_id}/token"],
    revokeInstallationAccessToken: ["DELETE /installation/token"],
    scopeToken: ["POST /applications/{client_id}/token/scoped"],
    suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
    unsuspendInstallation: [
      "DELETE /app/installations/{installation_id}/suspended"
    ],
    updateWebhookConfigForApp: ["PATCH /app/hook/config"]
  },
  billing: {
    getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
    getGithubActionsBillingUser: [
      "GET /users/{username}/settings/billing/actions"
    ],
    getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
    getGithubPackagesBillingUser: [
      "GET /users/{username}/settings/billing/packages"
    ],
    getSharedStorageBillingOrg: [
      "GET /orgs/{org}/settings/billing/shared-storage"
    ],
    getSharedStorageBillingUser: [
      "GET /users/{username}/settings/billing/shared-storage"
    ]
  },
  checks: {
    create: ["POST /repos/{owner}/{repo}/check-runs"],
    createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
    get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
    getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
    listAnnotations: [
      "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
    ],
    listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
    listForSuite: [
      "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
    ],
    listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
    rerequestRun: [
      "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"
    ],
    rerequestSuite: [
      "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
    ],
    setSuitesPreferences: [
      "PATCH /repos/{owner}/{repo}/check-suites/preferences"
    ],
    update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
  },
  codeScanning: {
    deleteAnalysis: [
      "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
    ],
    getAlert: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
      {},
      { renamedParameters: { alert_id: "alert_number" } }
    ],
    getAnalysis: [
      "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
    ],
    getCodeqlDatabase: [
      "GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"
    ],
    getDefaultSetup: ["GET /repos/{owner}/{repo}/code-scanning/default-setup"],
    getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
    listAlertInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
    listAlertsInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      {},
      { renamed: ["codeScanning", "listAlertInstances"] }
    ],
    listCodeqlDatabases: [
      "GET /repos/{owner}/{repo}/code-scanning/codeql/databases"
    ],
    listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
    ],
    updateDefaultSetup: [
      "PATCH /repos/{owner}/{repo}/code-scanning/default-setup"
    ],
    uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
  },
  codesOfConduct: {
    getAllCodesOfConduct: ["GET /codes_of_conduct"],
    getConductCode: ["GET /codes_of_conduct/{key}"]
  },
  codespaces: {
    addRepositoryForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    checkPermissionsForDevcontainer: [
      "GET /repos/{owner}/{repo}/codespaces/permissions_check"
    ],
    codespaceMachinesForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/machines"
    ],
    createForAuthenticatedUser: ["POST /user/codespaces"],
    createOrUpdateOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}"
    ],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    createOrUpdateSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}"
    ],
    createWithPrForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
    ],
    createWithRepoForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/codespaces"
    ],
    deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
    deleteFromOrganization: [
      "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    deleteSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}"
    ],
    exportForAuthenticatedUser: [
      "POST /user/codespaces/{codespace_name}/exports"
    ],
    getCodespacesForUserInOrg: [
      "GET /orgs/{org}/members/{username}/codespaces"
    ],
    getExportDetailsForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/exports/{export_id}"
    ],
    getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
    getOrgPublicKey: ["GET /orgs/{org}/codespaces/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}"],
    getPublicKeyForAuthenticatedUser: [
      "GET /user/codespaces/secrets/public-key"
    ],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    getSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}"
    ],
    listDevcontainersInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/devcontainers"
    ],
    listForAuthenticatedUser: ["GET /user/codespaces"],
    listInOrganization: [
      "GET /orgs/{org}/codespaces",
      {},
      { renamedParameters: { org_id: "org" } }
    ],
    listInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces"
    ],
    listOrgSecrets: ["GET /orgs/{org}/codespaces/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
    listRepositoriesForSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}/repositories"
    ],
    listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
    ],
    preFlightWithRepoForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/new"
    ],
    publishForAuthenticatedUser: [
      "POST /user/codespaces/{codespace_name}/publish"
    ],
    removeRepositoryForSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    repoMachinesForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/machines"
    ],
    setRepositoriesForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
    ],
    startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
    stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
    stopInOrganization: [
      "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"
    ],
    updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
  },
  copilot: {
    addCopilotSeatsForTeams: [
      "POST /orgs/{org}/copilot/billing/selected_teams"
    ],
    addCopilotSeatsForUsers: [
      "POST /orgs/{org}/copilot/billing/selected_users"
    ],
    cancelCopilotSeatAssignmentForTeams: [
      "DELETE /orgs/{org}/copilot/billing/selected_teams"
    ],
    cancelCopilotSeatAssignmentForUsers: [
      "DELETE /orgs/{org}/copilot/billing/selected_users"
    ],
    getCopilotOrganizationDetails: ["GET /orgs/{org}/copilot/billing"],
    getCopilotSeatDetailsForUser: [
      "GET /orgs/{org}/members/{username}/copilot"
    ],
    listCopilotSeats: ["GET /orgs/{org}/copilot/billing/seats"]
  },
  dependabot: {
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    createOrUpdateOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}"
    ],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    getAlert: ["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],
    getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    listAlertsForEnterprise: [
      "GET /enterprises/{enterprise}/dependabot/alerts"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/dependabot/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/dependabot/alerts"],
    listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"
    ]
  },
  dependencyGraph: {
    createRepositorySnapshot: [
      "POST /repos/{owner}/{repo}/dependency-graph/snapshots"
    ],
    diffRange: [
      "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
    ],
    exportSbom: ["GET /repos/{owner}/{repo}/dependency-graph/sbom"]
  },
  emojis: { get: ["GET /emojis"] },
  gists: {
    checkIsStarred: ["GET /gists/{gist_id}/star"],
    create: ["POST /gists"],
    createComment: ["POST /gists/{gist_id}/comments"],
    delete: ["DELETE /gists/{gist_id}"],
    deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
    fork: ["POST /gists/{gist_id}/forks"],
    get: ["GET /gists/{gist_id}"],
    getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
    getRevision: ["GET /gists/{gist_id}/{sha}"],
    list: ["GET /gists"],
    listComments: ["GET /gists/{gist_id}/comments"],
    listCommits: ["GET /gists/{gist_id}/commits"],
    listForUser: ["GET /users/{username}/gists"],
    listForks: ["GET /gists/{gist_id}/forks"],
    listPublic: ["GET /gists/public"],
    listStarred: ["GET /gists/starred"],
    star: ["PUT /gists/{gist_id}/star"],
    unstar: ["DELETE /gists/{gist_id}/star"],
    update: ["PATCH /gists/{gist_id}"],
    updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
  },
  git: {
    createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
    createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
    createRef: ["POST /repos/{owner}/{repo}/git/refs"],
    createTag: ["POST /repos/{owner}/{repo}/git/tags"],
    createTree: ["POST /repos/{owner}/{repo}/git/trees"],
    deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
    getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
    getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
    getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
    getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
    getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
    listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
    updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
  },
  gitignore: {
    getAllTemplates: ["GET /gitignore/templates"],
    getTemplate: ["GET /gitignore/templates/{name}"]
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
    getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
    getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
    getRestrictionsForYourPublicRepos: [
      "GET /user/interaction-limits",
      {},
      { renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
    ],
    removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
    removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
    removeRestrictionsForRepo: [
      "DELETE /repos/{owner}/{repo}/interaction-limits"
    ],
    removeRestrictionsForYourPublicRepos: [
      "DELETE /user/interaction-limits",
      {},
      { renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
    ],
    setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
    setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
    setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
    setRestrictionsForYourPublicRepos: [
      "PUT /user/interaction-limits",
      {},
      { renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
    ]
  },
  issues: {
    addAssignees: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
    checkUserCanBeAssignedToIssue: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"
    ],
    create: ["POST /repos/{owner}/{repo}/issues"],
    createComment: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/comments"
    ],
    createLabel: ["POST /repos/{owner}/{repo}/labels"],
    createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
    deleteComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"
    ],
    deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
    deleteMilestone: [
      "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"
    ],
    get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
    getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
    getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
    getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
    list: ["GET /issues"],
    listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
    listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
    listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
    listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
    listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
    listEventsForTimeline: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"
    ],
    listForAuthenticatedUser: ["GET /user/issues"],
    listForOrg: ["GET /orgs/{org}/issues"],
    listForRepo: ["GET /repos/{owner}/{repo}/issues"],
    listLabelsForMilestone: [
      "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
    ],
    listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
    listLabelsOnIssue: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
    lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    removeAllLabels: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    removeAssignees: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    removeLabel: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
    ],
    setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
    updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
    updateMilestone: [
      "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"
    ]
  },
  licenses: {
    get: ["GET /licenses/{license}"],
    getAllCommonlyUsed: ["GET /licenses"],
    getForRepo: ["GET /repos/{owner}/{repo}/license"]
  },
  markdown: {
    render: ["POST /markdown"],
    renderRaw: [
      "POST /markdown/raw",
      { headers: { "content-type": "text/plain; charset=utf-8" } }
    ]
  },
  meta: {
    get: ["GET /meta"],
    getAllVersions: ["GET /versions"],
    getOctocat: ["GET /octocat"],
    getZen: ["GET /zen"],
    root: ["GET /"]
  },
  migrations: {
    cancelImport: [
      "DELETE /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import"
      }
    ],
    deleteArchiveForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/archive"
    ],
    deleteArchiveForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/archive"
    ],
    downloadArchiveForOrg: [
      "GET /orgs/{org}/migrations/{migration_id}/archive"
    ],
    getArchiveForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/archive"
    ],
    getCommitAuthors: [
      "GET /repos/{owner}/{repo}/import/authors",
      {},
      {
        deprecated: "octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors"
      }
    ],
    getImportStatus: [
      "GET /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status"
      }
    ],
    getLargeFiles: [
      "GET /repos/{owner}/{repo}/import/large_files",
      {},
      {
        deprecated: "octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files"
      }
    ],
    getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
    getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
    listForAuthenticatedUser: ["GET /user/migrations"],
    listForOrg: ["GET /orgs/{org}/migrations"],
    listReposForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/repositories"
    ],
    listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
    listReposForUser: [
      "GET /user/migrations/{migration_id}/repositories",
      {},
      { renamed: ["migrations", "listReposForAuthenticatedUser"] }
    ],
    mapCommitAuthor: [
      "PATCH /repos/{owner}/{repo}/import/authors/{author_id}",
      {},
      {
        deprecated: "octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author"
      }
    ],
    setLfsPreference: [
      "PATCH /repos/{owner}/{repo}/import/lfs",
      {},
      {
        deprecated: "octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference"
      }
    ],
    startForAuthenticatedUser: ["POST /user/migrations"],
    startForOrg: ["POST /orgs/{org}/migrations"],
    startImport: [
      "PUT /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import"
      }
    ],
    unlockRepoForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
    ],
    unlockRepoForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
    ],
    updateImport: [
      "PATCH /repos/{owner}/{repo}/import",
      {},
      {
        deprecated: "octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import"
      }
    ]
  },
  oidc: {
    getOidcCustomSubTemplateForOrg: [
      "GET /orgs/{org}/actions/oidc/customization/sub"
    ],
    updateOidcCustomSubTemplateForOrg: [
      "PUT /orgs/{org}/actions/oidc/customization/sub"
    ]
  },
  orgs: {
    addSecurityManagerTeam: [
      "PUT /orgs/{org}/security-managers/teams/{team_slug}"
    ],
    assignTeamToOrgRole: [
      "PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"
    ],
    assignUserToOrgRole: [
      "PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"
    ],
    blockUser: ["PUT /orgs/{org}/blocks/{username}"],
    cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
    checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
    checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
    checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
    convertMemberToOutsideCollaborator: [
      "PUT /orgs/{org}/outside_collaborators/{username}"
    ],
    createCustomOrganizationRole: ["POST /orgs/{org}/organization-roles"],
    createInvitation: ["POST /orgs/{org}/invitations"],
    createOrUpdateCustomProperties: ["PATCH /orgs/{org}/properties/schema"],
    createOrUpdateCustomPropertiesValuesForRepos: [
      "PATCH /orgs/{org}/properties/values"
    ],
    createOrUpdateCustomProperty: [
      "PUT /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    createWebhook: ["POST /orgs/{org}/hooks"],
    delete: ["DELETE /orgs/{org}"],
    deleteCustomOrganizationRole: [
      "DELETE /orgs/{org}/organization-roles/{role_id}"
    ],
    deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
    enableOrDisableSecurityProductOnAllOrgRepos: [
      "POST /orgs/{org}/{security_product}/{enablement}"
    ],
    get: ["GET /orgs/{org}"],
    getAllCustomProperties: ["GET /orgs/{org}/properties/schema"],
    getCustomProperty: [
      "GET /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
    getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
    getOrgRole: ["GET /orgs/{org}/organization-roles/{role_id}"],
    getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
    getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
    getWebhookDelivery: [
      "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    list: ["GET /organizations"],
    listAppInstallations: ["GET /orgs/{org}/installations"],
    listBlockedUsers: ["GET /orgs/{org}/blocks"],
    listCustomPropertiesValuesForRepos: ["GET /orgs/{org}/properties/values"],
    listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
    listForAuthenticatedUser: ["GET /user/orgs"],
    listForUser: ["GET /users/{username}/orgs"],
    listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
    listMembers: ["GET /orgs/{org}/members"],
    listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
    listOrgRoleTeams: ["GET /orgs/{org}/organization-roles/{role_id}/teams"],
    listOrgRoleUsers: ["GET /orgs/{org}/organization-roles/{role_id}/users"],
    listOrgRoles: ["GET /orgs/{org}/organization-roles"],
    listOrganizationFineGrainedPermissions: [
      "GET /orgs/{org}/organization-fine-grained-permissions"
    ],
    listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
    listPatGrantRepositories: [
      "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"
    ],
    listPatGrantRequestRepositories: [
      "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"
    ],
    listPatGrantRequests: ["GET /orgs/{org}/personal-access-token-requests"],
    listPatGrants: ["GET /orgs/{org}/personal-access-tokens"],
    listPendingInvitations: ["GET /orgs/{org}/invitations"],
    listPublicMembers: ["GET /orgs/{org}/public_members"],
    listSecurityManagerTeams: ["GET /orgs/{org}/security-managers"],
    listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
    listWebhooks: ["GET /orgs/{org}/hooks"],
    patchCustomOrganizationRole: [
      "PATCH /orgs/{org}/organization-roles/{role_id}"
    ],
    pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeCustomProperty: [
      "DELETE /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    removeMember: ["DELETE /orgs/{org}/members/{username}"],
    removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
    removeOutsideCollaborator: [
      "DELETE /orgs/{org}/outside_collaborators/{username}"
    ],
    removePublicMembershipForAuthenticatedUser: [
      "DELETE /orgs/{org}/public_members/{username}"
    ],
    removeSecurityManagerTeam: [
      "DELETE /orgs/{org}/security-managers/teams/{team_slug}"
    ],
    reviewPatGrantRequest: [
      "POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"
    ],
    reviewPatGrantRequestsInBulk: [
      "POST /orgs/{org}/personal-access-token-requests"
    ],
    revokeAllOrgRolesTeam: [
      "DELETE /orgs/{org}/organization-roles/teams/{team_slug}"
    ],
    revokeAllOrgRolesUser: [
      "DELETE /orgs/{org}/organization-roles/users/{username}"
    ],
    revokeOrgRoleTeam: [
      "DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"
    ],
    revokeOrgRoleUser: [
      "DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"
    ],
    setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
    setPublicMembershipForAuthenticatedUser: [
      "PUT /orgs/{org}/public_members/{username}"
    ],
    unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
    update: ["PATCH /orgs/{org}"],
    updateMembershipForAuthenticatedUser: [
      "PATCH /user/memberships/orgs/{org}"
    ],
    updatePatAccess: ["POST /orgs/{org}/personal-access-tokens/{pat_id}"],
    updatePatAccesses: ["POST /orgs/{org}/personal-access-tokens"],
    updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
    updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
  },
  packages: {
    deletePackageForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}"
    ],
    deletePackageForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    deletePackageForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}"
    ],
    deletePackageVersionForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getAllPackageVersionsForAPackageOwnedByAnOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
      {},
      { renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
    ],
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions",
      {},
      {
        renamed: [
          "packages",
          "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"
        ]
      }
    ],
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions"
    ],
    getPackageForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}"
    ],
    getPackageForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    getPackageForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}"
    ],
    getPackageVersionForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    listDockerMigrationConflictingPackagesForAuthenticatedUser: [
      "GET /user/docker/conflicts"
    ],
    listDockerMigrationConflictingPackagesForOrganization: [
      "GET /orgs/{org}/docker/conflicts"
    ],
    listDockerMigrationConflictingPackagesForUser: [
      "GET /users/{username}/docker/conflicts"
    ],
    listPackagesForAuthenticatedUser: ["GET /user/packages"],
    listPackagesForOrganization: ["GET /orgs/{org}/packages"],
    listPackagesForUser: ["GET /users/{username}/packages"],
    restorePackageForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageVersionForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ]
  },
  projects: {
    addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
    createCard: ["POST /projects/columns/{column_id}/cards"],
    createColumn: ["POST /projects/{project_id}/columns"],
    createForAuthenticatedUser: ["POST /user/projects"],
    createForOrg: ["POST /orgs/{org}/projects"],
    createForRepo: ["POST /repos/{owner}/{repo}/projects"],
    delete: ["DELETE /projects/{project_id}"],
    deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
    deleteColumn: ["DELETE /projects/columns/{column_id}"],
    get: ["GET /projects/{project_id}"],
    getCard: ["GET /projects/columns/cards/{card_id}"],
    getColumn: ["GET /projects/columns/{column_id}"],
    getPermissionForUser: [
      "GET /projects/{project_id}/collaborators/{username}/permission"
    ],
    listCards: ["GET /projects/columns/{column_id}/cards"],
    listCollaborators: ["GET /projects/{project_id}/collaborators"],
    listColumns: ["GET /projects/{project_id}/columns"],
    listForOrg: ["GET /orgs/{org}/projects"],
    listForRepo: ["GET /repos/{owner}/{repo}/projects"],
    listForUser: ["GET /users/{username}/projects"],
    moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
    moveColumn: ["POST /projects/columns/{column_id}/moves"],
    removeCollaborator: [
      "DELETE /projects/{project_id}/collaborators/{username}"
    ],
    update: ["PATCH /projects/{project_id}"],
    updateCard: ["PATCH /projects/columns/cards/{card_id}"],
    updateColumn: ["PATCH /projects/columns/{column_id}"]
  },
  pulls: {
    checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    create: ["POST /repos/{owner}/{repo}/pulls"],
    createReplyForReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
    ],
    createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    createReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    deletePendingReview: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    deleteReviewComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ],
    dismissReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
    ],
    get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
    getReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
    list: ["GET /repos/{owner}/{repo}/pulls"],
    listCommentsForReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
    listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
    listRequestedReviewers: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    listReviewComments: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
    listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    removeRequestedReviewers: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    requestReviewers: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    submitReview: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
    ],
    update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
    updateBranch: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
    ],
    updateReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    updateReviewComment: [
      "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ]
  },
  rateLimit: { get: ["GET /rate_limit"] },
  reactions: {
    createForCommitComment: [
      "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    createForIssue: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"
    ],
    createForIssueComment: [
      "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    createForPullRequestReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    createForRelease: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    createForTeamDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    createForTeamDiscussionInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ],
    deleteForCommitComment: [
      "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForIssue: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
    ],
    deleteForIssueComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForPullRequestComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForRelease: [
      "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussion: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussionComment: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
    ],
    listForCommitComment: [
      "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
    listForIssueComment: [
      "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    listForPullRequestReviewComment: [
      "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    listForRelease: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    listForTeamDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    listForTeamDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ]
  },
  repos: {
    acceptInvitation: [
      "PATCH /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
    ],
    acceptInvitationForAuthenticatedUser: [
      "PATCH /user/repository_invitations/{invitation_id}"
    ],
    addAppAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
    addStatusCheckContexts: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    addTeamAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    addUserAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    cancelPagesDeployment: [
      "POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"
    ],
    checkAutomatedSecurityFixes: [
      "GET /repos/{owner}/{repo}/automated-security-fixes"
    ],
    checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
    checkVulnerabilityAlerts: [
      "GET /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
    compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
    compareCommitsWithBasehead: [
      "GET /repos/{owner}/{repo}/compare/{basehead}"
    ],
    createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
    createCommitComment: [
      "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    createCommitSignatureProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
    createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
    createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
    createDeploymentBranchPolicy: [
      "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
    ],
    createDeploymentProtectionRule: [
      "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
    ],
    createDeploymentStatus: [
      "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
    createForAuthenticatedUser: ["POST /user/repos"],
    createFork: ["POST /repos/{owner}/{repo}/forks"],
    createInOrg: ["POST /orgs/{org}/repos"],
    createOrUpdateCustomPropertiesValues: [
      "PATCH /repos/{owner}/{repo}/properties/values"
    ],
    createOrUpdateEnvironment: [
      "PUT /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
    createOrgRuleset: ["POST /orgs/{org}/rulesets"],
    createPagesDeployment: ["POST /repos/{owner}/{repo}/pages/deployments"],
    createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
    createRelease: ["POST /repos/{owner}/{repo}/releases"],
    createRepoRuleset: ["POST /repos/{owner}/{repo}/rulesets"],
    createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
    createUsingTemplate: [
      "POST /repos/{template_owner}/{template_repo}/generate"
    ],
    createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
    declineInvitation: [
      "DELETE /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
    ],
    declineInvitationForAuthenticatedUser: [
      "DELETE /user/repository_invitations/{invitation_id}"
    ],
    delete: ["DELETE /repos/{owner}/{repo}"],
    deleteAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    deleteAdminBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    deleteAnEnvironment: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    deleteBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
    deleteCommitSignatureProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
    deleteDeployment: [
      "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"
    ],
    deleteDeploymentBranchPolicy: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
    deleteInvitation: [
      "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    deleteOrgRuleset: ["DELETE /orgs/{org}/rulesets/{ruleset_id}"],
    deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
    deletePullRequestReviewProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
    deleteReleaseAsset: [
      "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    deleteRepoRuleset: ["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    deleteTagProtection: [
      "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"
    ],
    deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
    disableAutomatedSecurityFixes: [
      "DELETE /repos/{owner}/{repo}/automated-security-fixes"
    ],
    disableDeploymentProtectionRule: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
    ],
    disablePrivateVulnerabilityReporting: [
      "DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"
    ],
    disableVulnerabilityAlerts: [
      "DELETE /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    downloadArchive: [
      "GET /repos/{owner}/{repo}/zipball/{ref}",
      {},
      { renamed: ["repos", "downloadZipballArchive"] }
    ],
    downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
    downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
    enableAutomatedSecurityFixes: [
      "PUT /repos/{owner}/{repo}/automated-security-fixes"
    ],
    enablePrivateVulnerabilityReporting: [
      "PUT /repos/{owner}/{repo}/private-vulnerability-reporting"
    ],
    enableVulnerabilityAlerts: [
      "PUT /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    generateReleaseNotes: [
      "POST /repos/{owner}/{repo}/releases/generate-notes"
    ],
    get: ["GET /repos/{owner}/{repo}"],
    getAccessRestrictions: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    getAdminBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    getAllDeploymentProtectionRules: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
    ],
    getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
    getAllStatusCheckContexts: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
    ],
    getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
    getAppsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
    ],
    getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
    getBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    getBranchRules: ["GET /repos/{owner}/{repo}/rules/branches/{branch}"],
    getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
    getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
    getCollaboratorPermissionLevel: [
      "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
    ],
    getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
    getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
    getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
    getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
    getCommitSignatureProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
    getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
    getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
    getCustomDeploymentProtectionRule: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
    ],
    getCustomPropertiesValues: ["GET /repos/{owner}/{repo}/properties/values"],
    getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
    getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
    getDeploymentBranchPolicy: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    getDeploymentStatus: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
    ],
    getEnvironment: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
    getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
    getOrgRuleSuite: ["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],
    getOrgRuleSuites: ["GET /orgs/{org}/rulesets/rule-suites"],
    getOrgRuleset: ["GET /orgs/{org}/rulesets/{ruleset_id}"],
    getOrgRulesets: ["GET /orgs/{org}/rulesets"],
    getPages: ["GET /repos/{owner}/{repo}/pages"],
    getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
    getPagesDeployment: [
      "GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"
    ],
    getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
    getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
    getPullRequestReviewProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
    getReadme: ["GET /repos/{owner}/{repo}/readme"],
    getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
    getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
    getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
    getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
    getRepoRuleSuite: [
      "GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"
    ],
    getRepoRuleSuites: ["GET /repos/{owner}/{repo}/rulesets/rule-suites"],
    getRepoRuleset: ["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    getRepoRulesets: ["GET /repos/{owner}/{repo}/rulesets"],
    getStatusChecksProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    getTeamsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
    ],
    getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
    getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
    getUsersWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
    ],
    getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
    getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
    getWebhookConfigForRepo: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    getWebhookDelivery: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    listActivities: ["GET /repos/{owner}/{repo}/activity"],
    listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
    listBranches: ["GET /repos/{owner}/{repo}/branches"],
    listBranchesForHeadCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
    ],
    listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
    listCommentsForCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
    listCommitStatusesForRef: [
      "GET /repos/{owner}/{repo}/commits/{ref}/statuses"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/commits"],
    listContributors: ["GET /repos/{owner}/{repo}/contributors"],
    listCustomDeploymentRuleIntegrations: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"
    ],
    listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
    listDeploymentBranchPolicies: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
    ],
    listDeploymentStatuses: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
    listForAuthenticatedUser: ["GET /user/repos"],
    listForOrg: ["GET /orgs/{org}/repos"],
    listForUser: ["GET /users/{username}/repos"],
    listForks: ["GET /repos/{owner}/{repo}/forks"],
    listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
    listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
    listLanguages: ["GET /repos/{owner}/{repo}/languages"],
    listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
    listPublic: ["GET /repositories"],
    listPullRequestsAssociatedWithCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
    ],
    listReleaseAssets: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/assets"
    ],
    listReleases: ["GET /repos/{owner}/{repo}/releases"],
    listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
    listTags: ["GET /repos/{owner}/{repo}/tags"],
    listTeams: ["GET /repos/{owner}/{repo}/teams"],
    listWebhookDeliveries: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    ],
    listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
    merge: ["POST /repos/{owner}/{repo}/merges"],
    mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
    pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeAppAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    removeCollaborator: [
      "DELETE /repos/{owner}/{repo}/collaborators/{username}"
    ],
    removeStatusCheckContexts: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    removeStatusCheckProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    removeTeamAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    removeUserAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
    replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
    requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
    setAdminBranchProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    setAppAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    setStatusCheckContexts: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    setTeamAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    setUserAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
    transfer: ["POST /repos/{owner}/{repo}/transfer"],
    update: ["PATCH /repos/{owner}/{repo}"],
    updateBranchProtection: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
    updateDeploymentBranchPolicy: [
      "PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
    updateInvitation: [
      "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    updateOrgRuleset: ["PUT /orgs/{org}/rulesets/{ruleset_id}"],
    updatePullRequestReviewProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
    updateReleaseAsset: [
      "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    updateRepoRuleset: ["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    updateStatusCheckPotection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
      {},
      { renamed: ["repos", "updateStatusCheckProtection"] }
    ],
    updateStatusCheckProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
    updateWebhookConfigForRepo: [
      "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    uploadReleaseAsset: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
      { baseUrl: "https://uploads.github.com" }
    ]
  },
  search: {
    code: ["GET /search/code"],
    commits: ["GET /search/commits"],
    issuesAndPullRequests: ["GET /search/issues"],
    labels: ["GET /search/labels"],
    repos: ["GET /search/repositories"],
    topics: ["GET /search/topics"],
    users: ["GET /search/users"]
  },
  secretScanning: {
    getAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ],
    listAlertsForEnterprise: [
      "GET /enterprises/{enterprise}/secret-scanning/alerts"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
    listLocationsForAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
    ],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ]
  },
  securityAdvisories: {
    createFork: [
      "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"
    ],
    createPrivateVulnerabilityReport: [
      "POST /repos/{owner}/{repo}/security-advisories/reports"
    ],
    createRepositoryAdvisory: [
      "POST /repos/{owner}/{repo}/security-advisories"
    ],
    createRepositoryAdvisoryCveRequest: [
      "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"
    ],
    getGlobalAdvisory: ["GET /advisories/{ghsa_id}"],
    getRepositoryAdvisory: [
      "GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    ],
    listGlobalAdvisories: ["GET /advisories"],
    listOrgRepositoryAdvisories: ["GET /orgs/{org}/security-advisories"],
    listRepositoryAdvisories: ["GET /repos/{owner}/{repo}/security-advisories"],
    updateRepositoryAdvisory: [
      "PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    ]
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    addOrUpdateProjectPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    addOrUpdateRepoPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    checkPermissionsForProjectInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    checkPermissionsForRepoInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    create: ["POST /orgs/{org}/teams"],
    createDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
    deleteDiscussionCommentInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    deleteDiscussionInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
    getByName: ["GET /orgs/{org}/teams/{team_slug}"],
    getDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    getDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    getMembershipForUserInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    list: ["GET /orgs/{org}/teams"],
    listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
    listDiscussionCommentsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
    listForAuthenticatedUser: ["GET /user/teams"],
    listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
    listPendingInvitationsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/invitations"
    ],
    listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
    listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
    removeMembershipForUserInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    removeProjectInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
    ],
    removeRepoInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    updateDiscussionCommentInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    updateDiscussionInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
  },
  users: {
    addEmailForAuthenticated: [
      "POST /user/emails",
      {},
      { renamed: ["users", "addEmailForAuthenticatedUser"] }
    ],
    addEmailForAuthenticatedUser: ["POST /user/emails"],
    addSocialAccountForAuthenticatedUser: ["POST /user/social_accounts"],
    block: ["PUT /user/blocks/{username}"],
    checkBlocked: ["GET /user/blocks/{username}"],
    checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
    checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
    createGpgKeyForAuthenticated: [
      "POST /user/gpg_keys",
      {},
      { renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
    ],
    createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
    createPublicSshKeyForAuthenticated: [
      "POST /user/keys",
      {},
      { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
    ],
    createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
    createSshSigningKeyForAuthenticatedUser: ["POST /user/ssh_signing_keys"],
    deleteEmailForAuthenticated: [
      "DELETE /user/emails",
      {},
      { renamed: ["users", "deleteEmailForAuthenticatedUser"] }
    ],
    deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
    deleteGpgKeyForAuthenticated: [
      "DELETE /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
    ],
    deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
    deletePublicSshKeyForAuthenticated: [
      "DELETE /user/keys/{key_id}",
      {},
      { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
    ],
    deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
    deleteSocialAccountForAuthenticatedUser: ["DELETE /user/social_accounts"],
    deleteSshSigningKeyForAuthenticatedUser: [
      "DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"
    ],
    follow: ["PUT /user/following/{username}"],
    getAuthenticated: ["GET /user"],
    getByUsername: ["GET /users/{username}"],
    getContextForUser: ["GET /users/{username}/hovercard"],
    getGpgKeyForAuthenticated: [
      "GET /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
    ],
    getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
    getPublicSshKeyForAuthenticated: [
      "GET /user/keys/{key_id}",
      {},
      { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
    ],
    getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
    getSshSigningKeyForAuthenticatedUser: [
      "GET /user/ssh_signing_keys/{ssh_signing_key_id}"
    ],
    list: ["GET /users"],
    listBlockedByAuthenticated: [
      "GET /user/blocks",
      {},
      { renamed: ["users", "listBlockedByAuthenticatedUser"] }
    ],
    listBlockedByAuthenticatedUser: ["GET /user/blocks"],
    listEmailsForAuthenticated: [
      "GET /user/emails",
      {},
      { renamed: ["users", "listEmailsForAuthenticatedUser"] }
    ],
    listEmailsForAuthenticatedUser: ["GET /user/emails"],
    listFollowedByAuthenticated: [
      "GET /user/following",
      {},
      { renamed: ["users", "listFollowedByAuthenticatedUser"] }
    ],
    listFollowedByAuthenticatedUser: ["GET /user/following"],
    listFollowersForAuthenticatedUser: ["GET /user/followers"],
    listFollowersForUser: ["GET /users/{username}/followers"],
    listFollowingForUser: ["GET /users/{username}/following"],
    listGpgKeysForAuthenticated: [
      "GET /user/gpg_keys",
      {},
      { renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
    ],
    listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
    listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
    listPublicEmailsForAuthenticated: [
      "GET /user/public_emails",
      {},
      { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
    ],
    listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
    listPublicKeysForUser: ["GET /users/{username}/keys"],
    listPublicSshKeysForAuthenticated: [
      "GET /user/keys",
      {},
      { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
    ],
    listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
    listSocialAccountsForAuthenticatedUser: ["GET /user/social_accounts"],
    listSocialAccountsForUser: ["GET /users/{username}/social_accounts"],
    listSshSigningKeysForAuthenticatedUser: ["GET /user/ssh_signing_keys"],
    listSshSigningKeysForUser: ["GET /users/{username}/ssh_signing_keys"],
    setPrimaryEmailVisibilityForAuthenticated: [
      "PATCH /user/email/visibility",
      {},
      { renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
    ],
    setPrimaryEmailVisibilityForAuthenticatedUser: [
      "PATCH /user/email/visibility"
    ],
    unblock: ["DELETE /user/blocks/{username}"],
    unfollow: ["DELETE /user/following/{username}"],
    updateAuthenticated: ["PATCH /user"]
  }
};
var endpoints_default = Endpoints;

// pkg/dist-src/endpoints-to-methods.js
var endpointMethodsMap = /* @__PURE__ */ new Map();
for (const [scope, endpoints] of Object.entries(endpoints_default)) {
  for (const [methodName, endpoint] of Object.entries(endpoints)) {
    const [route, defaults, decorations] = endpoint;
    const [method, url] = route.split(/ /);
    const endpointDefaults = Object.assign(
      {
        method,
        url
      },
      defaults
    );
    if (!endpointMethodsMap.has(scope)) {
      endpointMethodsMap.set(scope, /* @__PURE__ */ new Map());
    }
    endpointMethodsMap.get(scope).set(methodName, {
      scope,
      methodName,
      endpointDefaults,
      decorations
    });
  }
}
var handler = {
  has({ scope }, methodName) {
    return endpointMethodsMap.get(scope).has(methodName);
  },
  getOwnPropertyDescriptor(target, methodName) {
    return {
      value: this.get(target, methodName),
      // ensures method is in the cache
      configurable: true,
      writable: true,
      enumerable: true
    };
  },
  defineProperty(target, methodName, descriptor) {
    Object.defineProperty(target.cache, methodName, descriptor);
    return true;
  },
  deleteProperty(target, methodName) {
    delete target.cache[methodName];
    return true;
  },
  ownKeys({ scope }) {
    return [...endpointMethodsMap.get(scope).keys()];
  },
  set(target, methodName, value) {
    return target.cache[methodName] = value;
  },
  get({ octokit, scope, cache }, methodName) {
    if (cache[methodName]) {
      return cache[methodName];
    }
    const method = endpointMethodsMap.get(scope).get(methodName);
    if (!method) {
      return void 0;
    }
    const { endpointDefaults, decorations } = method;
    if (decorations) {
      cache[methodName] = decorate(
        octokit,
        scope,
        methodName,
        endpointDefaults,
        decorations
      );
    } else {
      cache[methodName] = octokit.request.defaults(endpointDefaults);
    }
    return cache[methodName];
  }
};
function endpointsToMethods(octokit) {
  const newMethods = {};
  for (const scope of endpointMethodsMap.keys()) {
    newMethods[scope] = new Proxy({ octokit, scope, cache: {} }, handler);
  }
  return newMethods;
}
function decorate(octokit, scope, methodName, defaults, decorations) {
  const requestWithDefaults = octokit.request.defaults(defaults);
  function withDecorations(...args) {
    let options = requestWithDefaults.endpoint.merge(...args);
    if (decorations.mapToData) {
      options = Object.assign({}, options, {
        data: options[decorations.mapToData],
        [decorations.mapToData]: void 0
      });
      return requestWithDefaults(options);
    }
    if (decorations.renamed) {
      const [newScope, newMethodName] = decorations.renamed;
      octokit.log.warn(
        `octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`
      );
    }
    if (decorations.deprecated) {
      octokit.log.warn(decorations.deprecated);
    }
    if (decorations.renamedParameters) {
      const options2 = requestWithDefaults.endpoint.merge(...args);
      for (const [name, alias] of Object.entries(
        decorations.renamedParameters
      )) {
        if (name in options2) {
          octokit.log.warn(
            `"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`
          );
          if (!(alias in options2)) {
            options2[alias] = options2[name];
          }
          delete options2[name];
        }
      }
      return requestWithDefaults(options2);
    }
    return requestWithDefaults(...args);
  }
  return Object.assign(withDecorations, requestWithDefaults);
}

// pkg/dist-src/index.js
function restEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit);
  return {
    rest: api
  };
}
restEndpointMethods.VERSION = VERSION;
function legacyRestEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit);
  return {
    ...api,
    rest: api
  };
}
legacyRestEndpointMethods.VERSION = VERSION;
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 331:
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 4437:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(8611));
const https = __importStar(__nccwpck_require__(5692));
const pm = __importStar(__nccwpck_require__(5693));
const tunnel = __importStar(__nccwpck_require__(6259));
const undici_1 = __nccwpck_require__(1861);
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes || (exports.HttpCodes = HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers || (exports.Headers = Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes || (exports.MediaTypes = MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
    readBodyBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                const chunks = [];
                this.message.on('data', (chunk) => {
                    chunks.push(chunk);
                });
                this.message.on('end', () => {
                    resolve(Buffer.concat(chunks));
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    getAgentDispatcher(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (!useProxy) {
            return;
        }
        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (!useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if tunneling agent isn't assigned create a new agent
        if (!agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
        let proxyAgent;
        if (this._keepAlive) {
            proxyAgent = this._proxyAgentDispatcher;
        }
        // if agent is already assigned use that agent.
        if (proxyAgent) {
            return proxyAgent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        proxyAgent = new undici_1.ProxyAgent(Object.assign({ uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 }, ((proxyUrl.username || proxyUrl.password) && {
            token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString('base64')}`
        })));
        this._proxyAgentDispatcher = proxyAgent;
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
                rejectUnauthorized: false
            });
        }
        return proxyAgent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 5693:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        try {
            return new DecodedURL(proxyVar);
        }
        catch (_a) {
            if (!proxyVar.startsWith('http://') && !proxyVar.startsWith('https://'))
                return new DecodedURL(`http://${proxyVar}`);
        }
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const reqHost = reqUrl.hostname;
    if (isLoopbackAddress(reqHost)) {
        return true;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperNoProxyItem === '*' ||
            upperReqHosts.some(x => x === upperNoProxyItem ||
                x.endsWith(`.${upperNoProxyItem}`) ||
                (upperNoProxyItem.startsWith('.') &&
                    x.endsWith(`${upperNoProxyItem}`)))) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
function isLoopbackAddress(host) {
    const hostLower = host.toLowerCase();
    return (hostLower === 'localhost' ||
        hostLower.startsWith('127.') ||
        hostLower.startsWith('[::1]') ||
        hostLower.startsWith('[0:0:0:0:0:0:0:1]'));
}
class DecodedURL extends URL {
    constructor(url, base) {
        super(url, base);
        this._decodedUsername = decodeURIComponent(super.username);
        this._decodedPassword = decodeURIComponent(super.password);
    }
    get username() {
        return this._decodedUsername;
    }
    get password() {
        return this._decodedPassword;
    }
}
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 6236:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.READONLY = exports.UV_FS_O_EXLOCK = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rm = exports.rename = exports.readlink = exports.readdir = exports.open = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;
const fs = __importStar(__nccwpck_require__(9896));
const path = __importStar(__nccwpck_require__(6928));
_a = fs.promises
// export const {open} = 'fs'
, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, exports.mkdir = _a.mkdir, exports.open = _a.open, exports.readdir = _a.readdir, exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rm = _a.rm, exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, exports.unlink = _a.unlink;
// export const {open} = 'fs'
exports.IS_WINDOWS = process.platform === 'win32';
// See https://github.com/nodejs/node/blob/d0153aee367422d0858105abec186da4dff0a0c5/deps/uv/include/uv/win.h#L691
exports.UV_FS_O_EXLOCK = 0x10000000;
exports.READONLY = fs.constants.O_RDONLY;
function exists(fsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield exports.stat(fsPath);
        }
        catch (err) {
            if (err.code === 'ENOENT') {
                return false;
            }
            throw err;
        }
        return true;
    });
}
exports.exists = exists;
function isDirectory(fsPath, useStat = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
        return stats.isDirectory();
    });
}
exports.isDirectory = isDirectory;
/**
 * On OSX/Linux, true if path starts with '/'. On Windows, true for paths like:
 * \, \hello, \\hello\share, C:, and C:\hello (and corresponding alternate separator cases).
 */
function isRooted(p) {
    p = normalizeSeparators(p);
    if (!p) {
        throw new Error('isRooted() parameter "p" cannot be empty');
    }
    if (exports.IS_WINDOWS) {
        return (p.startsWith('\\') || /^[A-Z]:/i.test(p) // e.g. \ or \hello or \\hello
        ); // e.g. C: or C:\hello
    }
    return p.startsWith('/');
}
exports.isRooted = isRooted;
/**
 * Best effort attempt to determine whether a file exists and is executable.
 * @param filePath    file path to check
 * @param extensions  additional file extensions to try
 * @return if file exists and is executable, returns the file path. otherwise empty string.
 */
function tryGetExecutablePath(filePath, extensions) {
    return __awaiter(this, void 0, void 0, function* () {
        let stats = undefined;
        try {
            // test file exists
            stats = yield exports.stat(filePath);
        }
        catch (err) {
            if (err.code !== 'ENOENT') {
                // eslint-disable-next-line no-console
                console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
            }
        }
        if (stats && stats.isFile()) {
            if (exports.IS_WINDOWS) {
                // on Windows, test for valid extension
                const upperExt = path.extname(filePath).toUpperCase();
                if (extensions.some(validExt => validExt.toUpperCase() === upperExt)) {
                    return filePath;
                }
            }
            else {
                if (isUnixExecutable(stats)) {
                    return filePath;
                }
            }
        }
        // try each extension
        const originalFilePath = filePath;
        for (const extension of extensions) {
            filePath = originalFilePath + extension;
            stats = undefined;
            try {
                stats = yield exports.stat(filePath);
            }
            catch (err) {
                if (err.code !== 'ENOENT') {
                    // eslint-disable-next-line no-console
                    console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
                }
            }
            if (stats && stats.isFile()) {
                if (exports.IS_WINDOWS) {
                    // preserve the case of the actual file (since an extension was appended)
                    try {
                        const directory = path.dirname(filePath);
                        const upperName = path.basename(filePath).toUpperCase();
                        for (const actualName of yield exports.readdir(directory)) {
                            if (upperName === actualName.toUpperCase()) {
                                filePath = path.join(directory, actualName);
                                break;
                            }
                        }
                    }
                    catch (err) {
                        // eslint-disable-next-line no-console
                        console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
                    }
                    return filePath;
                }
                else {
                    if (isUnixExecutable(stats)) {
                        return filePath;
                    }
                }
            }
        }
        return '';
    });
}
exports.tryGetExecutablePath = tryGetExecutablePath;
function normalizeSeparators(p) {
    p = p || '';
    if (exports.IS_WINDOWS) {
        // convert slashes on Windows
        p = p.replace(/\//g, '\\');
        // remove redundant slashes
        return p.replace(/\\\\+/g, '\\');
    }
    // remove redundant slashes
    return p.replace(/\/\/+/g, '/');
}
// on Mac/Linux, test the execute bit
//     R   W  X  R  W X R W X
//   256 128 64 32 16 8 4 2 1
function isUnixExecutable(stats) {
    return ((stats.mode & 1) > 0 ||
        ((stats.mode & 8) > 0 && stats.gid === process.getgid()) ||
        ((stats.mode & 64) > 0 && stats.uid === process.getuid()));
}
// Get the path of cmd.exe in windows
function getCmdPath() {
    var _a;
    return (_a = process.env['COMSPEC']) !== null && _a !== void 0 ? _a : `cmd.exe`;
}
exports.getCmdPath = getCmdPath;
//# sourceMappingURL=io-util.js.map

/***/ }),

/***/ 1907:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;
const assert_1 = __nccwpck_require__(2613);
const path = __importStar(__nccwpck_require__(6928));
const ioUtil = __importStar(__nccwpck_require__(6236));
/**
 * Copies a file or folder.
 * Based off of shelljs - https://github.com/shelljs/shelljs/blob/9237f66c52e5daa40458f94f9565e18e8132f5a6/src/cp.js
 *
 * @param     source    source path
 * @param     dest      destination path
 * @param     options   optional. See CopyOptions.
 */
function cp(source, dest, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { force, recursive, copySourceDirectory } = readCopyOptions(options);
        const destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;
        // Dest is an existing file, but not forcing
        if (destStat && destStat.isFile() && !force) {
            return;
        }
        // If dest is an existing directory, should copy inside.
        const newDest = destStat && destStat.isDirectory() && copySourceDirectory
            ? path.join(dest, path.basename(source))
            : dest;
        if (!(yield ioUtil.exists(source))) {
            throw new Error(`no such file or directory: ${source}`);
        }
        const sourceStat = yield ioUtil.stat(source);
        if (sourceStat.isDirectory()) {
            if (!recursive) {
                throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
            }
            else {
                yield cpDirRecursive(source, newDest, 0, force);
            }
        }
        else {
            if (path.relative(source, newDest) === '') {
                // a file cannot be copied to itself
                throw new Error(`'${newDest}' and '${source}' are the same file`);
            }
            yield copyFile(source, newDest, force);
        }
    });
}
exports.cp = cp;
/**
 * Moves a path.
 *
 * @param     source    source path
 * @param     dest      destination path
 * @param     options   optional. See MoveOptions.
 */
function mv(source, dest, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield ioUtil.exists(dest)) {
            let destExists = true;
            if (yield ioUtil.isDirectory(dest)) {
                // If dest is directory copy src into dest
                dest = path.join(dest, path.basename(source));
                destExists = yield ioUtil.exists(dest);
            }
            if (destExists) {
                if (options.force == null || options.force) {
                    yield rmRF(dest);
                }
                else {
                    throw new Error('Destination already exists');
                }
            }
        }
        yield mkdirP(path.dirname(dest));
        yield ioUtil.rename(source, dest);
    });
}
exports.mv = mv;
/**
 * Remove a path recursively with force
 *
 * @param inputPath path to remove
 */
function rmRF(inputPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (ioUtil.IS_WINDOWS) {
            // Check for invalid characters
            // https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
            if (/[*"<>|]/.test(inputPath)) {
                throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');
            }
        }
        try {
            // note if path does not exist, error is silent
            yield ioUtil.rm(inputPath, {
                force: true,
                maxRetries: 3,
                recursive: true,
                retryDelay: 300
            });
        }
        catch (err) {
            throw new Error(`File was unable to be removed ${err}`);
        }
    });
}
exports.rmRF = rmRF;
/**
 * Make a directory.  Creates the full path with folders in between
 * Will throw if it fails
 *
 * @param   fsPath        path to create
 * @returns Promise<void>
 */
function mkdirP(fsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        assert_1.ok(fsPath, 'a path argument must be provided');
        yield ioUtil.mkdir(fsPath, { recursive: true });
    });
}
exports.mkdirP = mkdirP;
/**
 * Returns path of a tool had the tool actually been invoked.  Resolves via paths.
 * If you check and the tool does not exist, it will throw.
 *
 * @param     tool              name of the tool
 * @param     check             whether to check if tool exists
 * @returns   Promise<string>   path to tool
 */
function which(tool, check) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!tool) {
            throw new Error("parameter 'tool' is required");
        }
        // recursive when check=true
        if (check) {
            const result = yield which(tool, false);
            if (!result) {
                if (ioUtil.IS_WINDOWS) {
                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
                }
                else {
                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
                }
            }
            return result;
        }
        const matches = yield findInPath(tool);
        if (matches && matches.length > 0) {
            return matches[0];
        }
        return '';
    });
}
exports.which = which;
/**
 * Returns a list of all occurrences of the given tool on the system path.
 *
 * @returns   Promise<string[]>  the paths of the tool
 */
function findInPath(tool) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!tool) {
            throw new Error("parameter 'tool' is required");
        }
        // build the list of extensions to try
        const extensions = [];
        if (ioUtil.IS_WINDOWS && process.env['PATHEXT']) {
            for (const extension of process.env['PATHEXT'].split(path.delimiter)) {
                if (extension) {
                    extensions.push(extension);
                }
            }
        }
        // if it's rooted, return it if exists. otherwise return empty.
        if (ioUtil.isRooted(tool)) {
            const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);
            if (filePath) {
                return [filePath];
            }
            return [];
        }
        // if any path separators, return empty
        if (tool.includes(path.sep)) {
            return [];
        }
        // build the list of directories
        //
        // Note, technically "where" checks the current directory on Windows. From a toolkit perspective,
        // it feels like we should not do this. Checking the current directory seems like more of a use
        // case of a shell, and the which() function exposed by the toolkit should strive for consistency
        // across platforms.
        const directories = [];
        if (process.env.PATH) {
            for (const p of process.env.PATH.split(path.delimiter)) {
                if (p) {
                    directories.push(p);
                }
            }
        }
        // find all matches
        const matches = [];
        for (const directory of directories) {
            const filePath = yield ioUtil.tryGetExecutablePath(path.join(directory, tool), extensions);
            if (filePath) {
                matches.push(filePath);
            }
        }
        return matches;
    });
}
exports.findInPath = findInPath;
function readCopyOptions(options) {
    const force = options.force == null ? true : options.force;
    const recursive = Boolean(options.recursive);
    const copySourceDirectory = options.copySourceDirectory == null
        ? true
        : Boolean(options.copySourceDirectory);
    return { force, recursive, copySourceDirectory };
}
function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
    return __awaiter(this, void 0, void 0, function* () {
        // Ensure there is not a run away recursive copy
        if (currentDepth >= 255)
            return;
        currentDepth++;
        yield mkdirP(destDir);
        const files = yield ioUtil.readdir(sourceDir);
        for (const fileName of files) {
            const srcFile = `${sourceDir}/${fileName}`;
            const destFile = `${destDir}/${fileName}`;
            const srcFileStat = yield ioUtil.lstat(srcFile);
            if (srcFileStat.isDirectory()) {
                // Recurse
                yield cpDirRecursive(srcFile, destFile, currentDepth, force);
            }
            else {
                yield copyFile(srcFile, destFile, force);
            }
        }
        // Change the mode for the newly created directory
        yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);
    });
}
// Buffered file copy
function copyFile(srcFile, destFile, force) {
    return __awaiter(this, void 0, void 0, function* () {
        if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {
            // unlink/re-link it
            try {
                yield ioUtil.lstat(destFile);
                yield ioUtil.unlink(destFile);
            }
            catch (e) {
                // Try to override file permission
                if (e.code === 'EPERM') {
                    yield ioUtil.chmod(destFile, '0666');
                    yield ioUtil.unlink(destFile);
                }
                // other errors = it doesn't exist, no work to do
            }
            // Copy over symlink
            const symlinkFull = yield ioUtil.readlink(srcFile);
            yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? 'junction' : null);
        }
        else if (!(yield ioUtil.exists(destFile)) || force) {
            yield ioUtil.copyFile(srcFile, destFile);
        }
    });
}
//# sourceMappingURL=io.js.map

/***/ }),

/***/ 1435:
/***/ ((module) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  createTokenAuth: () => createTokenAuth
});
module.exports = __toCommonJS(dist_src_exports);

// pkg/dist-src/auth.js
var REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
var REGEX_IS_INSTALLATION = /^ghs_/;
var REGEX_IS_USER_TO_SERVER = /^ghu_/;
async function auth(token) {
  const isApp = token.split(/\./).length === 3;
  const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
  const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
  const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
  return {
    type: "token",
    token,
    tokenType
  };
}

// pkg/dist-src/with-authorization-prefix.js
function withAuthorizationPrefix(token) {
  if (token.split(/\./).length === 3) {
    return `bearer ${token}`;
  }
  return `token ${token}`;
}

// pkg/dist-src/hook.js
async function hook(token, request, route, parameters) {
  const endpoint = request.endpoint.merge(
    route,
    parameters
  );
  endpoint.headers.authorization = withAuthorizationPrefix(token);
  return request(endpoint);
}

// pkg/dist-src/index.js
var createTokenAuth = function createTokenAuth2(token) {
  if (!token) {
    throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
  }
  if (typeof token !== "string") {
    throw new Error(
      "[@octokit/auth-token] Token passed to createTokenAuth is not a string"
    );
  }
  token = token.replace(/^(token|bearer) +/i, "");
  return Object.assign(auth.bind(null, token), {
    hook: hook.bind(null, token)
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 9214:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var index_exports = {};
__export(index_exports, {
  Octokit: () => Octokit
});
module.exports = __toCommonJS(index_exports);
var import_universal_user_agent = __nccwpck_require__(9530);
var import_before_after_hook = __nccwpck_require__(9851);
var import_request = __nccwpck_require__(7114);
var import_graphql = __nccwpck_require__(9906);
var import_auth_token = __nccwpck_require__(1435);

// pkg/dist-src/version.js
var VERSION = "5.2.1";

// pkg/dist-src/index.js
var noop = () => {
};
var consoleWarn = console.warn.bind(console);
var consoleError = console.error.bind(console);
var userAgentTrail = `octokit-core.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;
var Octokit = class {
  static {
    this.VERSION = VERSION;
  }
  static defaults(defaults) {
    const OctokitWithDefaults = class extends this {
      constructor(...args) {
        const options = args[0] || {};
        if (typeof defaults === "function") {
          super(defaults(options));
          return;
        }
        super(
          Object.assign(
            {},
            defaults,
            options,
            options.userAgent && defaults.userAgent ? {
              userAgent: `${options.userAgent} ${defaults.userAgent}`
            } : null
          )
        );
      }
    };
    return OctokitWithDefaults;
  }
  static {
    this.plugins = [];
  }
  /**
   * Attach a plugin (or many) to your Octokit instance.
   *
   * @example
   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
   */
  static plugin(...newPlugins) {
    const currentPlugins = this.plugins;
    const NewOctokit = class extends this {
      static {
        this.plugins = currentPlugins.concat(
          newPlugins.filter((plugin) => !currentPlugins.includes(plugin))
        );
      }
    };
    return NewOctokit;
  }
  constructor(options = {}) {
    const hook = new import_before_after_hook.Collection();
    const requestDefaults = {
      baseUrl: import_request.request.endpoint.DEFAULTS.baseUrl,
      headers: {},
      request: Object.assign({}, options.request, {
        // @ts-ignore internal usage only, no need to type
        hook: hook.bind(null, "request")
      }),
      mediaType: {
        previews: [],
        format: ""
      }
    };
    requestDefaults.headers["user-agent"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;
    if (options.baseUrl) {
      requestDefaults.baseUrl = options.baseUrl;
    }
    if (options.previews) {
      requestDefaults.mediaType.previews = options.previews;
    }
    if (options.timeZone) {
      requestDefaults.headers["time-zone"] = options.timeZone;
    }
    this.request = import_request.request.defaults(requestDefaults);
    this.graphql = (0, import_graphql.withCustomRequest)(this.request).defaults(requestDefaults);
    this.log = Object.assign(
      {
        debug: noop,
        info: noop,
        warn: consoleWarn,
        error: consoleError
      },
      options.log
    );
    this.hook = hook;
    if (!options.authStrategy) {
      if (!options.auth) {
        this.auth = async () => ({
          type: "unauthenticated"
        });
      } else {
        const auth = (0, import_auth_token.createTokenAuth)(options.auth);
        hook.wrap("request", auth.hook);
        this.auth = auth;
      }
    } else {
      const { authStrategy, ...otherOptions } = options;
      const auth = authStrategy(
        Object.assign(
          {
            request: this.request,
            log: this.log,
            // we pass the current octokit instance as well as its constructor options
            // to allow for authentication strategies that return a new octokit instance
            // that shares the same internal state as the current one. The original
            // requirement for this was the "event-octokit" authentication strategy
            // of https://github.com/probot/octokit-auth-probot.
            octokit: this,
            octokitOptions: otherOptions
          },
          options.auth
        )
      );
      hook.wrap("request", auth.hook);
      this.auth = auth;
    }
    const classConstructor = this.constructor;
    for (let i = 0; i < classConstructor.plugins.length; ++i) {
      Object.assign(this, classConstructor.plugins[i](this, options));
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 976:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  endpoint: () => endpoint
});
module.exports = __toCommonJS(dist_src_exports);

// pkg/dist-src/defaults.js
var import_universal_user_agent = __nccwpck_require__(9530);

// pkg/dist-src/version.js
var VERSION = "9.0.6";

// pkg/dist-src/defaults.js
var userAgent = `octokit-endpoint.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`;
var DEFAULTS = {
  method: "GET",
  baseUrl: "https://api.github.com",
  headers: {
    accept: "application/vnd.github.v3+json",
    "user-agent": userAgent
  },
  mediaType: {
    format: ""
  }
};

// pkg/dist-src/util/lowercase-keys.js
function lowercaseKeys(object) {
  if (!object) {
    return {};
  }
  return Object.keys(object).reduce((newObj, key) => {
    newObj[key.toLowerCase()] = object[key];
    return newObj;
  }, {});
}

// pkg/dist-src/util/is-plain-object.js
function isPlainObject(value) {
  if (typeof value !== "object" || value === null)
    return false;
  if (Object.prototype.toString.call(value) !== "[object Object]")
    return false;
  const proto = Object.getPrototypeOf(value);
  if (proto === null)
    return true;
  const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
}

// pkg/dist-src/util/merge-deep.js
function mergeDeep(defaults, options) {
  const result = Object.assign({}, defaults);
  Object.keys(options).forEach((key) => {
    if (isPlainObject(options[key])) {
      if (!(key in defaults))
        Object.assign(result, { [key]: options[key] });
      else
        result[key] = mergeDeep(defaults[key], options[key]);
    } else {
      Object.assign(result, { [key]: options[key] });
    }
  });
  return result;
}

// pkg/dist-src/util/remove-undefined-properties.js
function removeUndefinedProperties(obj) {
  for (const key in obj) {
    if (obj[key] === void 0) {
      delete obj[key];
    }
  }
  return obj;
}

// pkg/dist-src/merge.js
function merge(defaults, route, options) {
  if (typeof route === "string") {
    let [method, url] = route.split(" ");
    options = Object.assign(url ? { method, url } : { url: method }, options);
  } else {
    options = Object.assign({}, route);
  }
  options.headers = lowercaseKeys(options.headers);
  removeUndefinedProperties(options);
  removeUndefinedProperties(options.headers);
  const mergedOptions = mergeDeep(defaults || {}, options);
  if (options.url === "/graphql") {
    if (defaults && defaults.mediaType.previews?.length) {
      mergedOptions.mediaType.previews = defaults.mediaType.previews.filter(
        (preview) => !mergedOptions.mediaType.previews.includes(preview)
      ).concat(mergedOptions.mediaType.previews);
    }
    mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview) => preview.replace(/-preview/, ""));
  }
  return mergedOptions;
}

// pkg/dist-src/util/add-query-parameters.js
function addQueryParameters(url, parameters) {
  const separator = /\?/.test(url) ? "&" : "?";
  const names = Object.keys(parameters);
  if (names.length === 0) {
    return url;
  }
  return url + separator + names.map((name) => {
    if (name === "q") {
      return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
    }
    return `${name}=${encodeURIComponent(parameters[name])}`;
  }).join("&");
}

// pkg/dist-src/util/extract-url-variable-names.js
var urlVariableRegex = /\{[^{}}]+\}/g;
function removeNonChars(variableName) {
  return variableName.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g, "").split(/,/);
}
function extractUrlVariableNames(url) {
  const matches = url.match(urlVariableRegex);
  if (!matches) {
    return [];
  }
  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
}

// pkg/dist-src/util/omit.js
function omit(object, keysToOmit) {
  const result = { __proto__: null };
  for (const key of Object.keys(object)) {
    if (keysToOmit.indexOf(key) === -1) {
      result[key] = object[key];
    }
  }
  return result;
}

// pkg/dist-src/util/url-template.js
function encodeReserved(str) {
  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
    if (!/%[0-9A-Fa-f]/.test(part)) {
      part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
    }
    return part;
  }).join("");
}
function encodeUnreserved(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function encodeValue(operator, value, key) {
  value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
  if (key) {
    return encodeUnreserved(key) + "=" + value;
  } else {
    return value;
  }
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function isKeyOperator(operator) {
  return operator === ";" || operator === "&" || operator === "?";
}
function getValues(context, operator, key, modifier) {
  var value = context[key], result = [];
  if (isDefined(value) && value !== "") {
    if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
      value = value.toString();
      if (modifier && modifier !== "*") {
        value = value.substring(0, parseInt(modifier, 10));
      }
      result.push(
        encodeValue(operator, value, isKeyOperator(operator) ? key : "")
      );
    } else {
      if (modifier === "*") {
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            result.push(
              encodeValue(operator, value2, isKeyOperator(operator) ? key : "")
            );
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              result.push(encodeValue(operator, value[k], k));
            }
          });
        }
      } else {
        const tmp = [];
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            tmp.push(encodeValue(operator, value2));
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              tmp.push(encodeUnreserved(k));
              tmp.push(encodeValue(operator, value[k].toString()));
            }
          });
        }
        if (isKeyOperator(operator)) {
          result.push(encodeUnreserved(key) + "=" + tmp.join(","));
        } else if (tmp.length !== 0) {
          result.push(tmp.join(","));
        }
      }
    }
  } else {
    if (operator === ";") {
      if (isDefined(value)) {
        result.push(encodeUnreserved(key));
      }
    } else if (value === "" && (operator === "&" || operator === "?")) {
      result.push(encodeUnreserved(key) + "=");
    } else if (value === "") {
      result.push("");
    }
  }
  return result;
}
function parseUrl(template) {
  return {
    expand: expand.bind(null, template)
  };
}
function expand(template, context) {
  var operators = ["+", "#", ".", "/", ";", "?", "&"];
  template = template.replace(
    /\{([^\{\}]+)\}|([^\{\}]+)/g,
    function(_, expression, literal) {
      if (expression) {
        let operator = "";
        const values = [];
        if (operators.indexOf(expression.charAt(0)) !== -1) {
          operator = expression.charAt(0);
          expression = expression.substr(1);
        }
        expression.split(/,/g).forEach(function(variable) {
          var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
          values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
        });
        if (operator && operator !== "+") {
          var separator = ",";
          if (operator === "?") {
            separator = "&";
          } else if (operator !== "#") {
            separator = operator;
          }
          return (values.length !== 0 ? operator : "") + values.join(separator);
        } else {
          return values.join(",");
        }
      } else {
        return encodeReserved(literal);
      }
    }
  );
  if (template === "/") {
    return template;
  } else {
    return template.replace(/\/$/, "");
  }
}

// pkg/dist-src/parse.js
function parse(options) {
  let method = options.method.toUpperCase();
  let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
  let headers = Object.assign({}, options.headers);
  let body;
  let parameters = omit(options, [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "mediaType"
  ]);
  const urlVariableNames = extractUrlVariableNames(url);
  url = parseUrl(url).expand(parameters);
  if (!/^http/.test(url)) {
    url = options.baseUrl + url;
  }
  const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
  const remainingParameters = omit(parameters, omittedParameters);
  const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
  if (!isBinaryRequest) {
    if (options.mediaType.format) {
      headers.accept = headers.accept.split(/,/).map(
        (format) => format.replace(
          /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
          `application/vnd$1$2.${options.mediaType.format}`
        )
      ).join(",");
    }
    if (url.endsWith("/graphql")) {
      if (options.mediaType.previews?.length) {
        const previewsFromAcceptHeader = headers.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g) || [];
        headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
          const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
          return `application/vnd.github.${preview}-preview${format}`;
        }).join(",");
      }
    }
  }
  if (["GET", "HEAD"].includes(method)) {
    url = addQueryParameters(url, remainingParameters);
  } else {
    if ("data" in remainingParameters) {
      body = remainingParameters.data;
    } else {
      if (Object.keys(remainingParameters).length) {
        body = remainingParameters;
      }
    }
  }
  if (!headers["content-type"] && typeof body !== "undefined") {
    headers["content-type"] = "application/json; charset=utf-8";
  }
  if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
    body = "";
  }
  return Object.assign(
    { method, url, headers },
    typeof body !== "undefined" ? { body } : null,
    options.request ? { request: options.request } : null
  );
}

// pkg/dist-src/endpoint-with-defaults.js
function endpointWithDefaults(defaults, route, options) {
  return parse(merge(defaults, route, options));
}

// pkg/dist-src/with-defaults.js
function withDefaults(oldDefaults, newDefaults) {
  const DEFAULTS2 = merge(oldDefaults, newDefaults);
  const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
  return Object.assign(endpoint2, {
    DEFAULTS: DEFAULTS2,
    defaults: withDefaults.bind(null, DEFAULTS2),
    merge: merge.bind(null, DEFAULTS2),
    parse
  });
}

// pkg/dist-src/index.js
var endpoint = withDefaults(null, DEFAULTS);
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 9906:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var index_exports = {};
__export(index_exports, {
  GraphqlResponseError: () => GraphqlResponseError,
  graphql: () => graphql2,
  withCustomRequest: () => withCustomRequest
});
module.exports = __toCommonJS(index_exports);
var import_request3 = __nccwpck_require__(7114);
var import_universal_user_agent = __nccwpck_require__(9530);

// pkg/dist-src/version.js
var VERSION = "7.1.1";

// pkg/dist-src/with-defaults.js
var import_request2 = __nccwpck_require__(7114);

// pkg/dist-src/graphql.js
var import_request = __nccwpck_require__(7114);

// pkg/dist-src/error.js
function _buildMessageForResponseErrors(data) {
  return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
}
var GraphqlResponseError = class extends Error {
  constructor(request2, headers, response) {
    super(_buildMessageForResponseErrors(response));
    this.request = request2;
    this.headers = headers;
    this.response = response;
    this.name = "GraphqlResponseError";
    this.errors = response.errors;
    this.data = response.data;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
};

// pkg/dist-src/graphql.js
var NON_VARIABLE_OPTIONS = [
  "method",
  "baseUrl",
  "url",
  "headers",
  "request",
  "query",
  "mediaType"
];
var FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
function graphql(request2, query, options) {
  if (options) {
    if (typeof query === "string" && "query" in options) {
      return Promise.reject(
        new Error(`[@octokit/graphql] "query" cannot be used as variable name`)
      );
    }
    for (const key in options) {
      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key)) continue;
      return Promise.reject(
        new Error(
          `[@octokit/graphql] "${key}" cannot be used as variable name`
        )
      );
    }
  }
  const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
  const requestOptions = Object.keys(
    parsedOptions
  ).reduce((result, key) => {
    if (NON_VARIABLE_OPTIONS.includes(key)) {
      result[key] = parsedOptions[key];
      return result;
    }
    if (!result.variables) {
      result.variables = {};
    }
    result.variables[key] = parsedOptions[key];
    return result;
  }, {});
  const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
  }
  return request2(requestOptions).then((response) => {
    if (response.data.errors) {
      const headers = {};
      for (const key of Object.keys(response.headers)) {
        headers[key] = response.headers[key];
      }
      throw new GraphqlResponseError(
        requestOptions,
        headers,
        response.data
      );
    }
    return response.data.data;
  });
}

// pkg/dist-src/with-defaults.js
function withDefaults(request2, newDefaults) {
  const newRequest = request2.defaults(newDefaults);
  const newApi = (query, options) => {
    return graphql(newRequest, query, options);
  };
  return Object.assign(newApi, {
    defaults: withDefaults.bind(null, newRequest),
    endpoint: newRequest.endpoint
  });
}

// pkg/dist-src/index.js
var graphql2 = withDefaults(import_request3.request, {
  headers: {
    "user-agent": `octokit-graphql.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`
  },
  method: "POST",
  url: "/graphql"
});
function withCustomRequest(customRequest) {
  return withDefaults(customRequest, {
    method: "POST",
    url: "/graphql"
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 8485:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  RequestError: () => RequestError
});
module.exports = __toCommonJS(dist_src_exports);
var import_deprecation = __nccwpck_require__(4325);
var import_once = __toESM(__nccwpck_require__(2367));
var logOnceCode = (0, import_once.default)((deprecation) => console.warn(deprecation));
var logOnceHeaders = (0, import_once.default)((deprecation) => console.warn(deprecation));
var RequestError = class extends Error {
  constructor(message, statusCode, options) {
    super(message);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.name = "HttpError";
    this.status = statusCode;
    let headers;
    if ("headers" in options && typeof options.headers !== "undefined") {
      headers = options.headers;
    }
    if ("response" in options) {
      this.response = options.response;
      headers = options.response.headers;
    }
    const requestCopy = Object.assign({}, options.request);
    if (options.request.headers.authorization) {
      requestCopy.headers = Object.assign({}, options.request.headers, {
        authorization: options.request.headers.authorization.replace(
          /(?<! ) .*$/,
          " [REDACTED]"
        )
      });
    }
    requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
    this.request = requestCopy;
    Object.defineProperty(this, "code", {
      get() {
        logOnceCode(
          new import_deprecation.Deprecation(
            "[@octokit/request-error] `error.code` is deprecated, use `error.status`."
          )
        );
        return statusCode;
      }
    });
    Object.defineProperty(this, "headers", {
      get() {
        logOnceHeaders(
          new import_deprecation.Deprecation(
            "[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."
          )
        );
        return headers || {};
      }
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 7114:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// pkg/dist-src/index.js
var dist_src_exports = {};
__export(dist_src_exports, {
  request: () => request
});
module.exports = __toCommonJS(dist_src_exports);
var import_endpoint = __nccwpck_require__(976);
var import_universal_user_agent = __nccwpck_require__(9530);

// pkg/dist-src/version.js
var VERSION = "8.4.1";

// pkg/dist-src/is-plain-object.js
function isPlainObject(value) {
  if (typeof value !== "object" || value === null)
    return false;
  if (Object.prototype.toString.call(value) !== "[object Object]")
    return false;
  const proto = Object.getPrototypeOf(value);
  if (proto === null)
    return true;
  const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
}

// pkg/dist-src/fetch-wrapper.js
var import_request_error = __nccwpck_require__(8485);

// pkg/dist-src/get-buffer-response.js
function getBufferResponse(response) {
  return response.arrayBuffer();
}

// pkg/dist-src/fetch-wrapper.js
function fetchWrapper(requestOptions) {
  var _a, _b, _c, _d;
  const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
  const parseSuccessResponseBody = ((_a = requestOptions.request) == null ? void 0 : _a.parseSuccessResponseBody) !== false;
  if (isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body)) {
    requestOptions.body = JSON.stringify(requestOptions.body);
  }
  let headers = {};
  let status;
  let url;
  let { fetch } = globalThis;
  if ((_b = requestOptions.request) == null ? void 0 : _b.fetch) {
    fetch = requestOptions.request.fetch;
  }
  if (!fetch) {
    throw new Error(
      "fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing"
    );
  }
  return fetch(requestOptions.url, {
    method: requestOptions.method,
    body: requestOptions.body,
    redirect: (_c = requestOptions.request) == null ? void 0 : _c.redirect,
    headers: requestOptions.headers,
    signal: (_d = requestOptions.request) == null ? void 0 : _d.signal,
    // duplex must be set if request.body is ReadableStream or Async Iterables.
    // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.
    ...requestOptions.body && { duplex: "half" }
  }).then(async (response) => {
    url = response.url;
    status = response.status;
    for (const keyAndValue of response.headers) {
      headers[keyAndValue[0]] = keyAndValue[1];
    }
    if ("deprecation" in headers) {
      const matches = headers.link && headers.link.match(/<([^<>]+)>; rel="deprecation"/);
      const deprecationLink = matches && matches.pop();
      log.warn(
        `[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`
      );
    }
    if (status === 204 || status === 205) {
      return;
    }
    if (requestOptions.method === "HEAD") {
      if (status < 400) {
        return;
      }
      throw new import_request_error.RequestError(response.statusText, status, {
        response: {
          url,
          status,
          headers,
          data: void 0
        },
        request: requestOptions
      });
    }
    if (status === 304) {
      throw new import_request_error.RequestError("Not modified", status, {
        response: {
          url,
          status,
          headers,
          data: await getResponseData(response)
        },
        request: requestOptions
      });
    }
    if (status >= 400) {
      const data = await getResponseData(response);
      const error = new import_request_error.RequestError(toErrorMessage(data), status, {
        response: {
          url,
          status,
          headers,
          data
        },
        request: requestOptions
      });
      throw error;
    }
    return parseSuccessResponseBody ? await getResponseData(response) : response.body;
  }).then((data) => {
    return {
      status,
      url,
      headers,
      data
    };
  }).catch((error) => {
    if (error instanceof import_request_error.RequestError)
      throw error;
    else if (error.name === "AbortError")
      throw error;
    let message = error.message;
    if (error.name === "TypeError" && "cause" in error) {
      if (error.cause instanceof Error) {
        message = error.cause.message;
      } else if (typeof error.cause === "string") {
        message = error.cause;
      }
    }
    throw new import_request_error.RequestError(message, 500, {
      request: requestOptions
    });
  });
}
async function getResponseData(response) {
  const contentType = response.headers.get("content-type");
  if (/application\/json/.test(contentType)) {
    return response.json().catch(() => response.text()).catch(() => "");
  }
  if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
    return response.text();
  }
  return getBufferResponse(response);
}
function toErrorMessage(data) {
  if (typeof data === "string")
    return data;
  let suffix;
  if ("documentation_url" in data) {
    suffix = ` - ${data.documentation_url}`;
  } else {
    suffix = "";
  }
  if ("message" in data) {
    if (Array.isArray(data.errors)) {
      return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}${suffix}`;
    }
    return `${data.message}${suffix}`;
  }
  return `Unknown error: ${JSON.stringify(data)}`;
}

// pkg/dist-src/with-defaults.js
function withDefaults(oldEndpoint, newDefaults) {
  const endpoint2 = oldEndpoint.defaults(newDefaults);
  const newApi = function(route, parameters) {
    const endpointOptions = endpoint2.merge(route, parameters);
    if (!endpointOptions.request || !endpointOptions.request.hook) {
      return fetchWrapper(endpoint2.parse(endpointOptions));
    }
    const request2 = (route2, parameters2) => {
      return fetchWrapper(
        endpoint2.parse(endpoint2.merge(route2, parameters2))
      );
    };
    Object.assign(request2, {
      endpoint: endpoint2,
      defaults: withDefaults.bind(null, endpoint2)
    });
    return endpointOptions.request.hook(request2, endpointOptions);
  };
  return Object.assign(newApi, {
    endpoint: endpoint2,
    defaults: withDefaults.bind(null, endpoint2)
  });
}

// pkg/dist-src/index.js
var request = withDefaults(import_endpoint.endpoint, {
  headers: {
    "user-agent": `octokit-request.js/${VERSION} ${(0, import_universal_user_agent.getUserAgent)()}`
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ 4952:
/***/ ((module, exports, __nccwpck_require__) => {

"use strict";
/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * See LICENSE file in root directory for full license.
 */


Object.defineProperty(exports, "__esModule", ({ value: true }));

var eventTargetShim = __nccwpck_require__(3087);

/**
 * The signal class.
 * @see https://dom.spec.whatwg.org/#abortsignal
 */
class AbortSignal extends eventTargetShim.EventTarget {
    /**
     * AbortSignal cannot be constructed directly.
     */
    constructor() {
        super();
        throw new TypeError("AbortSignal cannot be constructed directly");
    }
    /**
     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
     */
    get aborted() {
        const aborted = abortedFlags.get(this);
        if (typeof aborted !== "boolean") {
            throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
        }
        return aborted;
    }
}
eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");
/**
 * Create an AbortSignal object.
 */
function createAbortSignal() {
    const signal = Object.create(AbortSignal.prototype);
    eventTargetShim.EventTarget.call(signal);
    abortedFlags.set(signal, false);
    return signal;
}
/**
 * Abort a given signal.
 */
function abortSignal(signal) {
    if (abortedFlags.get(signal) !== false) {
        return;
    }
    abortedFlags.set(signal, true);
    signal.dispatchEvent({ type: "abort" });
}
/**
 * Aborted flag for each instances.
 */
const abortedFlags = new WeakMap();
// Properties should be enumerable.
Object.defineProperties(AbortSignal.prototype, {
    aborted: { enumerable: true },
});
// `toString()` should return `"[object AbortSignal]"`
if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortSignal",
    });
}

/**
 * The AbortController.
 * @see https://dom.spec.whatwg.org/#abortcontroller
 */
class AbortController {
    /**
     * Initialize this controller.
     */
    constructor() {
        signals.set(this, createAbortSignal());
    }
    /**
     * Returns the `AbortSignal` object associated with this object.
     */
    get signal() {
        return getSignal(this);
    }
    /**
     * Abort and signal to any observers that the associated activity is to be aborted.
     */
    abort() {
        abortSignal(getSignal(this));
    }
}
/**
 * Associated signals.
 */
const signals = new WeakMap();
/**
 * Get the associated signal of a given controller.
 */
function getSignal(controller) {
    const signal = signals.get(controller);
    if (signal == null) {
        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? "null" : typeof controller}`);
    }
    return signal;
}
// Properties should be enumerable.
Object.defineProperties(AbortController.prototype, {
    signal: { enumerable: true },
    abort: { enumerable: true },
});
if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
    Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortController",
    });
}

exports.AbortController = AbortController;
exports.AbortSignal = AbortSignal;
exports["default"] = AbortController;

module.exports = AbortController
module.exports.AbortController = module.exports["default"] = AbortController
module.exports.AbortSignal = AbortSignal
//# sourceMappingURL=abort-controller.js.map


/***/ }),

/***/ 2236:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const HttpAgent = __nccwpck_require__(7761);
module.exports = HttpAgent;
module.exports.HttpAgent = HttpAgent;
module.exports.HttpsAgent = __nccwpck_require__(8635);
module.exports.constants = __nccwpck_require__(2429);


/***/ }),

/***/ 7761:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const OriginalAgent = (__nccwpck_require__(8611).Agent);
const ms = __nccwpck_require__(6575);
const debug = (__nccwpck_require__(9023).debuglog)('agentkeepalive');
const {
  INIT_SOCKET,
  CURRENT_ID,
  CREATE_ID,
  SOCKET_CREATED_TIME,
  SOCKET_NAME,
  SOCKET_REQUEST_COUNT,
  SOCKET_REQUEST_FINISHED_COUNT,
} = __nccwpck_require__(2429);

// OriginalAgent come from
// - https://github.com/nodejs/node/blob/v8.12.0/lib/_http_agent.js
// - https://github.com/nodejs/node/blob/v10.12.0/lib/_http_agent.js

// node <= 10
let defaultTimeoutListenerCount = 1;
const majorVersion = parseInt(process.version.split('.', 1)[0].substring(1));
if (majorVersion >= 11 && majorVersion <= 12) {
  defaultTimeoutListenerCount = 2;
} else if (majorVersion >= 13) {
  defaultTimeoutListenerCount = 3;
}

function deprecate(message) {
  console.log('[agentkeepalive:deprecated] %s', message);
}

class Agent extends OriginalAgent {
  constructor(options) {
    options = options || {};
    options.keepAlive = options.keepAlive !== false;
    // default is keep-alive and 4s free socket timeout
    // see https://medium.com/ssense-tech/reduce-networking-errors-in-nodejs-23b4eb9f2d83
    if (options.freeSocketTimeout === undefined) {
      options.freeSocketTimeout = 4000;
    }
    // Legacy API: keepAliveTimeout should be rename to `freeSocketTimeout`
    if (options.keepAliveTimeout) {
      deprecate('options.keepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');
      options.freeSocketTimeout = options.keepAliveTimeout;
      delete options.keepAliveTimeout;
    }
    // Legacy API: freeSocketKeepAliveTimeout should be rename to `freeSocketTimeout`
    if (options.freeSocketKeepAliveTimeout) {
      deprecate('options.freeSocketKeepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');
      options.freeSocketTimeout = options.freeSocketKeepAliveTimeout;
      delete options.freeSocketKeepAliveTimeout;
    }

    // Sets the socket to timeout after timeout milliseconds of inactivity on the socket.
    // By default is double free socket timeout.
    if (options.timeout === undefined) {
      // make sure socket default inactivity timeout >= 8s
      options.timeout = Math.max(options.freeSocketTimeout * 2, 8000);
    }

    // support humanize format
    options.timeout = ms(options.timeout);
    options.freeSocketTimeout = ms(options.freeSocketTimeout);
    options.socketActiveTTL = options.socketActiveTTL ? ms(options.socketActiveTTL) : 0;

    super(options);

    this[CURRENT_ID] = 0;

    // create socket success counter
    this.createSocketCount = 0;
    this.createSocketCountLastCheck = 0;

    this.createSocketErrorCount = 0;
    this.createSocketErrorCountLastCheck = 0;

    this.closeSocketCount = 0;
    this.closeSocketCountLastCheck = 0;

    // socket error event count
    this.errorSocketCount = 0;
    this.errorSocketCountLastCheck = 0;

    // request finished counter
    this.requestCount = 0;
    this.requestCountLastCheck = 0;

    // including free socket timeout counter
    this.timeoutSocketCount = 0;
    this.timeoutSocketCountLastCheck = 0;

    this.on('free', socket => {
      // https://github.com/nodejs/node/pull/32000
      // Node.js native agent will check socket timeout eqs agent.options.timeout.
      // Use the ttl or freeSocketTimeout to overwrite.
      const timeout = this.calcSocketTimeout(socket);
      if (timeout > 0 && socket.timeout !== timeout) {
        socket.setTimeout(timeout);
      }
    });
  }

  get freeSocketKeepAliveTimeout() {
    deprecate('agent.freeSocketKeepAliveTimeout is deprecated, please use agent.options.freeSocketTimeout instead');
    return this.options.freeSocketTimeout;
  }

  get timeout() {
    deprecate('agent.timeout is deprecated, please use agent.options.timeout instead');
    return this.options.timeout;
  }

  get socketActiveTTL() {
    deprecate('agent.socketActiveTTL is deprecated, please use agent.options.socketActiveTTL instead');
    return this.options.socketActiveTTL;
  }

  calcSocketTimeout(socket) {
    /**
     * return <= 0: should free socket
     * return > 0: should update socket timeout
     * return undefined: not find custom timeout
     */
    let freeSocketTimeout = this.options.freeSocketTimeout;
    const socketActiveTTL = this.options.socketActiveTTL;
    if (socketActiveTTL) {
      // check socketActiveTTL
      const aliveTime = Date.now() - socket[SOCKET_CREATED_TIME];
      const diff = socketActiveTTL - aliveTime;
      if (diff <= 0) {
        return diff;
      }
      if (freeSocketTimeout && diff < freeSocketTimeout) {
        freeSocketTimeout = diff;
      }
    }
    // set freeSocketTimeout
    if (freeSocketTimeout) {
      // set free keepalive timer
      // try to use socket custom freeSocketTimeout first, support headers['keep-alive']
      // https://github.com/node-modules/urllib/blob/b76053020923f4d99a1c93cf2e16e0c5ba10bacf/lib/urllib.js#L498
      const customFreeSocketTimeout = socket.freeSocketTimeout || socket.freeSocketKeepAliveTimeout;
      return customFreeSocketTimeout || freeSocketTimeout;
    }
  }

  keepSocketAlive(socket) {
    const result = super.keepSocketAlive(socket);
    // should not keepAlive, do nothing
    if (!result) return result;

    const customTimeout = this.calcSocketTimeout(socket);
    if (typeof customTimeout === 'undefined') {
      return true;
    }
    if (customTimeout <= 0) {
      debug('%s(requests: %s, finished: %s) free but need to destroy by TTL, request count %s, diff is %s',
        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], customTimeout);
      return false;
    }
    if (socket.timeout !== customTimeout) {
      socket.setTimeout(customTimeout);
    }
    return true;
  }

  // only call on addRequest
  reuseSocket(...args) {
    // reuseSocket(socket, req)
    super.reuseSocket(...args);
    const socket = args[0];
    const req = args[1];
    req.reusedSocket = true;
    const agentTimeout = this.options.timeout;
    if (getSocketTimeout(socket) !== agentTimeout) {
      // reset timeout before use
      socket.setTimeout(agentTimeout);
      debug('%s reset timeout to %sms', socket[SOCKET_NAME], agentTimeout);
    }
    socket[SOCKET_REQUEST_COUNT]++;
    debug('%s(requests: %s, finished: %s) reuse on addRequest, timeout %sms',
      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],
      getSocketTimeout(socket));
  }

  [CREATE_ID]() {
    const id = this[CURRENT_ID]++;
    if (this[CURRENT_ID] === Number.MAX_SAFE_INTEGER) this[CURRENT_ID] = 0;
    return id;
  }

  [INIT_SOCKET](socket, options) {
    // bugfix here.
    // https on node 8, 10 won't set agent.options.timeout by default
    // TODO: need to fix on node itself
    if (options.timeout) {
      const timeout = getSocketTimeout(socket);
      if (!timeout) {
        socket.setTimeout(options.timeout);
      }
    }

    if (this.options.keepAlive) {
      // Disable Nagle's algorithm: http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/
      // https://fengmk2.com/benchmark/nagle-algorithm-delayed-ack-mock.html
      socket.setNoDelay(true);
    }
    this.createSocketCount++;
    if (this.options.socketActiveTTL) {
      socket[SOCKET_CREATED_TIME] = Date.now();
    }
    // don't show the hole '-----BEGIN CERTIFICATE----' key string
    socket[SOCKET_NAME] = `sock[${this[CREATE_ID]()}#${options._agentKey}]`.split('-----BEGIN', 1)[0];
    socket[SOCKET_REQUEST_COUNT] = 1;
    socket[SOCKET_REQUEST_FINISHED_COUNT] = 0;
    installListeners(this, socket, options);
  }

  createConnection(options, oncreate) {
    let called = false;
    const onNewCreate = (err, socket) => {
      if (called) return;
      called = true;

      if (err) {
        this.createSocketErrorCount++;
        return oncreate(err);
      }
      this[INIT_SOCKET](socket, options);
      oncreate(err, socket);
    };

    const newSocket = super.createConnection(options, onNewCreate);
    if (newSocket) onNewCreate(null, newSocket);
    return newSocket;
  }

  get statusChanged() {
    const changed = this.createSocketCount !== this.createSocketCountLastCheck ||
      this.createSocketErrorCount !== this.createSocketErrorCountLastCheck ||
      this.closeSocketCount !== this.closeSocketCountLastCheck ||
      this.errorSocketCount !== this.errorSocketCountLastCheck ||
      this.timeoutSocketCount !== this.timeoutSocketCountLastCheck ||
      this.requestCount !== this.requestCountLastCheck;
    if (changed) {
      this.createSocketCountLastCheck = this.createSocketCount;
      this.createSocketErrorCountLastCheck = this.createSocketErrorCount;
      this.closeSocketCountLastCheck = this.closeSocketCount;
      this.errorSocketCountLastCheck = this.errorSocketCount;
      this.timeoutSocketCountLastCheck = this.timeoutSocketCount;
      this.requestCountLastCheck = this.requestCount;
    }
    return changed;
  }

  getCurrentStatus() {
    return {
      createSocketCount: this.createSocketCount,
      createSocketErrorCount: this.createSocketErrorCount,
      closeSocketCount: this.closeSocketCount,
      errorSocketCount: this.errorSocketCount,
      timeoutSocketCount: this.timeoutSocketCount,
      requestCount: this.requestCount,
      freeSockets: inspect(this.freeSockets),
      sockets: inspect(this.sockets),
      requests: inspect(this.requests),
    };
  }
}

// node 8 don't has timeout attribute on socket
// https://github.com/nodejs/node/pull/21204/files#diff-e6ef024c3775d787c38487a6309e491dR408
function getSocketTimeout(socket) {
  return socket.timeout || socket._idleTimeout;
}

function installListeners(agent, socket, options) {
  debug('%s create, timeout %sms', socket[SOCKET_NAME], getSocketTimeout(socket));

  // listener socket events: close, timeout, error, free
  function onFree() {
    // create and socket.emit('free') logic
    // https://github.com/nodejs/node/blob/master/lib/_http_agent.js#L311
    // no req on the socket, it should be the new socket
    if (!socket._httpMessage && socket[SOCKET_REQUEST_COUNT] === 1) return;

    socket[SOCKET_REQUEST_FINISHED_COUNT]++;
    agent.requestCount++;
    debug('%s(requests: %s, finished: %s) free',
      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);

    // should reuse on pedding requests?
    const name = agent.getName(options);
    if (socket.writable && agent.requests[name] && agent.requests[name].length) {
      // will be reuse on agent free listener
      socket[SOCKET_REQUEST_COUNT]++;
      debug('%s(requests: %s, finished: %s) will be reuse on agent free event',
        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);
    }
  }
  socket.on('free', onFree);

  function onClose(isError) {
    debug('%s(requests: %s, finished: %s) close, isError: %s',
      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], isError);
    agent.closeSocketCount++;
  }
  socket.on('close', onClose);

  // start socket timeout handler
  function onTimeout() {
    // onTimeout and emitRequestTimeout(_http_client.js)
    // https://github.com/nodejs/node/blob/v12.x/lib/_http_client.js#L711
    const listenerCount = socket.listeners('timeout').length;
    // node <= 10, default listenerCount is 1, onTimeout
    // 11 < node <= 12, default listenerCount is 2, onTimeout and emitRequestTimeout
    // node >= 13, default listenerCount is 3, onTimeout,
    //   onTimeout(https://github.com/nodejs/node/pull/32000/files#diff-5f7fb0850412c6be189faeddea6c5359R333)
    //   and emitRequestTimeout
    const timeout = getSocketTimeout(socket);
    const req = socket._httpMessage;
    const reqTimeoutListenerCount = req && req.listeners('timeout').length || 0;
    debug('%s(requests: %s, finished: %s) timeout after %sms, listeners %s, defaultTimeoutListenerCount %s, hasHttpRequest %s, HttpRequest timeoutListenerCount %s',
      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],
      timeout, listenerCount, defaultTimeoutListenerCount, !!req, reqTimeoutListenerCount);
    if (debug.enabled) {
      debug('timeout listeners: %s', socket.listeners('timeout').map(f => f.name).join(', '));
    }
    agent.timeoutSocketCount++;
    const name = agent.getName(options);
    if (agent.freeSockets[name] && agent.freeSockets[name].indexOf(socket) !== -1) {
      // free socket timeout, destroy quietly
      socket.destroy();
      // Remove it from freeSockets list immediately to prevent new requests
      // from being sent through this socket.
      agent.removeSocket(socket, options);
      debug('%s is free, destroy quietly', socket[SOCKET_NAME]);
    } else {
      // if there is no any request socket timeout handler,
      // agent need to handle socket timeout itself.
      //
      // custom request socket timeout handle logic must follow these rules:
      //  1. Destroy socket first
      //  2. Must emit socket 'agentRemove' event tell agent remove socket
      //     from freeSockets list immediately.
      //     Otherise you may be get 'socket hang up' error when reuse
      //     free socket and timeout happen in the same time.
      if (reqTimeoutListenerCount === 0) {
        const error = new Error('Socket timeout');
        error.code = 'ERR_SOCKET_TIMEOUT';
        error.timeout = timeout;
        // must manually call socket.end() or socket.destroy() to end the connection.
        // https://nodejs.org/dist/latest-v10.x/docs/api/net.html#net_socket_settimeout_timeout_callback
        socket.destroy(error);
        agent.removeSocket(socket, options);
        debug('%s destroy with timeout error', socket[SOCKET_NAME]);
      }
    }
  }
  socket.on('timeout', onTimeout);

  function onError(err) {
    const listenerCount = socket.listeners('error').length;
    debug('%s(requests: %s, finished: %s) error: %s, listenerCount: %s',
      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],
      err, listenerCount);
    agent.errorSocketCount++;
    if (listenerCount === 1) {
      // if socket don't contain error event handler, don't catch it, emit it again
      debug('%s emit uncaught error event', socket[SOCKET_NAME]);
      socket.removeListener('error', onError);
      socket.emit('error', err);
    }
  }
  socket.on('error', onError);

  function onRemove() {
    debug('%s(requests: %s, finished: %s) agentRemove',
      socket[SOCKET_NAME],
      socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);
    // We need this function for cases like HTTP 'upgrade'
    // (defined by WebSockets) where we need to remove a socket from the
    // pool because it'll be locked up indefinitely
    socket.removeListener('close', onClose);
    socket.removeListener('error', onError);
    socket.removeListener('free', onFree);
    socket.removeListener('timeout', onTimeout);
    socket.removeListener('agentRemove', onRemove);
  }
  socket.on('agentRemove', onRemove);
}

module.exports = Agent;

function inspect(obj) {
  const res = {};
  for (const key in obj) {
    res[key] = obj[key].length;
  }
  return res;
}


/***/ }),

/***/ 2429:
/***/ ((module) => {

"use strict";


module.exports = {
  // agent
  CURRENT_ID: Symbol('agentkeepalive#currentId'),
  CREATE_ID: Symbol('agentkeepalive#createId'),
  INIT_SOCKET: Symbol('agentkeepalive#initSocket'),
  CREATE_HTTPS_CONNECTION: Symbol('agentkeepalive#createHttpsConnection'),
  // socket
  SOCKET_CREATED_TIME: Symbol('agentkeepalive#socketCreatedTime'),
  SOCKET_NAME: Symbol('agentkeepalive#socketName'),
  SOCKET_REQUEST_COUNT: Symbol('agentkeepalive#socketRequestCount'),
  SOCKET_REQUEST_FINISHED_COUNT: Symbol('agentkeepalive#socketRequestFinishedCount'),
};


/***/ }),

/***/ 8635:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const OriginalHttpsAgent = (__nccwpck_require__(5692).Agent);
const HttpAgent = __nccwpck_require__(7761);
const {
  INIT_SOCKET,
  CREATE_HTTPS_CONNECTION,
} = __nccwpck_require__(2429);

class HttpsAgent extends HttpAgent {
  constructor(options) {
    super(options);

    this.defaultPort = 443;
    this.protocol = 'https:';
    this.maxCachedSessions = this.options.maxCachedSessions;
    /* istanbul ignore next */
    if (this.maxCachedSessions === undefined) {
      this.maxCachedSessions = 100;
    }

    this._sessionCache = {
      map: {},
      list: [],
    };
  }

  createConnection(options, oncreate) {
    const socket = this[CREATE_HTTPS_CONNECTION](options, oncreate);
    this[INIT_SOCKET](socket, options);
    return socket;
  }
}

// https://github.com/nodejs/node/blob/master/lib/https.js#L89
HttpsAgent.prototype[CREATE_HTTPS_CONNECTION] = OriginalHttpsAgent.prototype.createConnection;

[
  'getName',
  '_getSession',
  '_cacheSession',
  // https://github.com/nodejs/node/pull/4982
  '_evictSession',
].forEach(function(method) {
  /* istanbul ignore next */
  if (typeof OriginalHttpsAgent.prototype[method] === 'function') {
    HttpsAgent.prototype[method] = OriginalHttpsAgent.prototype[method];
  }
});

module.exports = HttpsAgent;


/***/ }),

/***/ 9851:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var register = __nccwpck_require__(8970);
var addHook = __nccwpck_require__(4136);
var removeHook = __nccwpck_require__(6855);

// bind with array of arguments: https://stackoverflow.com/a/21792913
var bind = Function.bind;
var bindable = bind.bind(bind);

function bindApi(hook, state, name) {
  var removeHookRef = bindable(removeHook, null).apply(
    null,
    name ? [state, name] : [state]
  );
  hook.api = { remove: removeHookRef };
  hook.remove = removeHookRef;
  ["before", "error", "after", "wrap"].forEach(function (kind) {
    var args = name ? [state, kind, name] : [state, kind];
    hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);
  });
}

function HookSingular() {
  var singularHookName = "h";
  var singularHookState = {
    registry: {},
  };
  var singularHook = register.bind(null, singularHookState, singularHookName);
  bindApi(singularHook, singularHookState, singularHookName);
  return singularHook;
}

function HookCollection() {
  var state = {
    registry: {},
  };

  var hook = register.bind(null, state);
  bindApi(hook, state);

  return hook;
}

var collectionHookDeprecationMessageDisplayed = false;
function Hook() {
  if (!collectionHookDeprecationMessageDisplayed) {
    console.warn(
      '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
    );
    collectionHookDeprecationMessageDisplayed = true;
  }
  return HookCollection();
}

Hook.Singular = HookSingular.bind();
Hook.Collection = HookCollection.bind();

module.exports = Hook;
// expose constructors as a named property for TypeScript
module.exports.Hook = Hook;
module.exports.Singular = Hook.Singular;
module.exports.Collection = Hook.Collection;


/***/ }),

/***/ 4136:
/***/ ((module) => {

module.exports = addHook;

function addHook(state, kind, name, hook) {
  var orig = hook;
  if (!state.registry[name]) {
    state.registry[name] = [];
  }

  if (kind === "before") {
    hook = function (method, options) {
      return Promise.resolve()
        .then(orig.bind(null, options))
        .then(method.bind(null, options));
    };
  }

  if (kind === "after") {
    hook = function (method, options) {
      var result;
      return Promise.resolve()
        .then(method.bind(null, options))
        .then(function (result_) {
          result = result_;
          return orig(result, options);
        })
        .then(function () {
          return result;
        });
    };
  }

  if (kind === "error") {
    hook = function (method, options) {
      return Promise.resolve()
        .then(method.bind(null, options))
        .catch(function (error) {
          return orig(error, options);
        });
    };
  }

  state.registry[name].push({
    hook: hook,
    orig: orig,
  });
}


/***/ }),

/***/ 8970:
/***/ ((module) => {

module.exports = register;

function register(state, name, method, options) {
  if (typeof method !== "function") {
    throw new Error("method for before hook must be a function");
  }

  if (!options) {
    options = {};
  }

  if (Array.isArray(name)) {
    return name.reverse().reduce(function (callback, name) {
      return register.bind(null, state, name, callback, options);
    }, method)();
  }

  return Promise.resolve().then(function () {
    if (!state.registry[name]) {
      return method(options);
    }

    return state.registry[name].reduce(function (method, registered) {
      return registered.hook.bind(null, method, options);
    }, method)();
  });
}


/***/ }),

/***/ 6855:
/***/ ((module) => {

module.exports = removeHook;

function removeHook(state, name, method) {
  if (!state.registry[name]) {
    return;
  }

  var index = state.registry[name]
    .map(function (registered) {
      return registered.orig;
    })
    .indexOf(method);

  if (index === -1) {
    return;
  }

  state.registry[name].splice(index, 1);
}


/***/ }),

/***/ 9430:
/***/ (function(module) {

/**
  * This file contains the Bottleneck library (MIT), compiled to ES2017, and without Clustering support.
  * https://github.com/SGrondin/bottleneck
  */
(function (global, factory) {
	 true ? module.exports = factory() :
	0;
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	var load = function(received, defaults, onto = {}) {
	  var k, ref, v;
	  for (k in defaults) {
	    v = defaults[k];
	    onto[k] = (ref = received[k]) != null ? ref : v;
	  }
	  return onto;
	};

	var overwrite = function(received, defaults, onto = {}) {
	  var k, v;
	  for (k in received) {
	    v = received[k];
	    if (defaults[k] !== void 0) {
	      onto[k] = v;
	    }
	  }
	  return onto;
	};

	var parser = {
		load: load,
		overwrite: overwrite
	};

	var DLList;

	DLList = class DLList {
	  constructor(incr, decr) {
	    this.incr = incr;
	    this.decr = decr;
	    this._first = null;
	    this._last = null;
	    this.length = 0;
	  }

	  push(value) {
	    var node;
	    this.length++;
	    if (typeof this.incr === "function") {
	      this.incr();
	    }
	    node = {
	      value,
	      prev: this._last,
	      next: null
	    };
	    if (this._last != null) {
	      this._last.next = node;
	      this._last = node;
	    } else {
	      this._first = this._last = node;
	    }
	    return void 0;
	  }

	  shift() {
	    var value;
	    if (this._first == null) {
	      return;
	    } else {
	      this.length--;
	      if (typeof this.decr === "function") {
	        this.decr();
	      }
	    }
	    value = this._first.value;
	    if ((this._first = this._first.next) != null) {
	      this._first.prev = null;
	    } else {
	      this._last = null;
	    }
	    return value;
	  }

	  first() {
	    if (this._first != null) {
	      return this._first.value;
	    }
	  }

	  getArray() {
	    var node, ref, results;
	    node = this._first;
	    results = [];
	    while (node != null) {
	      results.push((ref = node, node = node.next, ref.value));
	    }
	    return results;
	  }

	  forEachShift(cb) {
	    var node;
	    node = this.shift();
	    while (node != null) {
	      (cb(node), node = this.shift());
	    }
	    return void 0;
	  }

	  debug() {
	    var node, ref, ref1, ref2, results;
	    node = this._first;
	    results = [];
	    while (node != null) {
	      results.push((ref = node, node = node.next, {
	        value: ref.value,
	        prev: (ref1 = ref.prev) != null ? ref1.value : void 0,
	        next: (ref2 = ref.next) != null ? ref2.value : void 0
	      }));
	    }
	    return results;
	  }

	};

	var DLList_1 = DLList;

	var Events;

	Events = class Events {
	  constructor(instance) {
	    this.instance = instance;
	    this._events = {};
	    if ((this.instance.on != null) || (this.instance.once != null) || (this.instance.removeAllListeners != null)) {
	      throw new Error("An Emitter already exists for this object");
	    }
	    this.instance.on = (name, cb) => {
	      return this._addListener(name, "many", cb);
	    };
	    this.instance.once = (name, cb) => {
	      return this._addListener(name, "once", cb);
	    };
	    this.instance.removeAllListeners = (name = null) => {
	      if (name != null) {
	        return delete this._events[name];
	      } else {
	        return this._events = {};
	      }
	    };
	  }

	  _addListener(name, status, cb) {
	    var base;
	    if ((base = this._events)[name] == null) {
	      base[name] = [];
	    }
	    this._events[name].push({cb, status});
	    return this.instance;
	  }

	  listenerCount(name) {
	    if (this._events[name] != null) {
	      return this._events[name].length;
	    } else {
	      return 0;
	    }
	  }

	  async trigger(name, ...args) {
	    var e, promises;
	    try {
	      if (name !== "debug") {
	        this.trigger("debug", `Event triggered: ${name}`, args);
	      }
	      if (this._events[name] == null) {
	        return;
	      }
	      this._events[name] = this._events[name].filter(function(listener) {
	        return listener.status !== "none";
	      });
	      promises = this._events[name].map(async(listener) => {
	        var e, returned;
	        if (listener.status === "none") {
	          return;
	        }
	        if (listener.status === "once") {
	          listener.status = "none";
	        }
	        try {
	          returned = typeof listener.cb === "function" ? listener.cb(...args) : void 0;
	          if (typeof (returned != null ? returned.then : void 0) === "function") {
	            return (await returned);
	          } else {
	            return returned;
	          }
	        } catch (error) {
	          e = error;
	          {
	            this.trigger("error", e);
	          }
	          return null;
	        }
	      });
	      return ((await Promise.all(promises))).find(function(x) {
	        return x != null;
	      });
	    } catch (error) {
	      e = error;
	      {
	        this.trigger("error", e);
	      }
	      return null;
	    }
	  }

	};

	var Events_1 = Events;

	var DLList$1, Events$1, Queues;

	DLList$1 = DLList_1;

	Events$1 = Events_1;

	Queues = class Queues {
	  constructor(num_priorities) {
	    var i;
	    this.Events = new Events$1(this);
	    this._length = 0;
	    this._lists = (function() {
	      var j, ref, results;
	      results = [];
	      for (i = j = 1, ref = num_priorities; (1 <= ref ? j <= ref : j >= ref); i = 1 <= ref ? ++j : --j) {
	        results.push(new DLList$1((() => {
	          return this.incr();
	        }), (() => {
	          return this.decr();
	        })));
	      }
	      return results;
	    }).call(this);
	  }

	  incr() {
	    if (this._length++ === 0) {
	      return this.Events.trigger("leftzero");
	    }
	  }

	  decr() {
	    if (--this._length === 0) {
	      return this.Events.trigger("zero");
	    }
	  }

	  push(job) {
	    return this._lists[job.options.priority].push(job);
	  }

	  queued(priority) {
	    if (priority != null) {
	      return this._lists[priority].length;
	    } else {
	      return this._length;
	    }
	  }

	  shiftAll(fn) {
	    return this._lists.forEach(function(list) {
	      return list.forEachShift(fn);
	    });
	  }

	  getFirst(arr = this._lists) {
	    var j, len, list;
	    for (j = 0, len = arr.length; j < len; j++) {
	      list = arr[j];
	      if (list.length > 0) {
	        return list;
	      }
	    }
	    return [];
	  }

	  shiftLastFrom(priority) {
	    return this.getFirst(this._lists.slice(priority).reverse()).shift();
	  }

	};

	var Queues_1 = Queues;

	var BottleneckError;

	BottleneckError = class BottleneckError extends Error {};

	var BottleneckError_1 = BottleneckError;

	var BottleneckError$1, DEFAULT_PRIORITY, Job, NUM_PRIORITIES, parser$1;

	NUM_PRIORITIES = 10;

	DEFAULT_PRIORITY = 5;

	parser$1 = parser;

	BottleneckError$1 = BottleneckError_1;

	Job = class Job {
	  constructor(task, args, options, jobDefaults, rejectOnDrop, Events, _states, Promise) {
	    this.task = task;
	    this.args = args;
	    this.rejectOnDrop = rejectOnDrop;
	    this.Events = Events;
	    this._states = _states;
	    this.Promise = Promise;
	    this.options = parser$1.load(options, jobDefaults);
	    this.options.priority = this._sanitizePriority(this.options.priority);
	    if (this.options.id === jobDefaults.id) {
	      this.options.id = `${this.options.id}-${this._randomIndex()}`;
	    }
	    this.promise = new this.Promise((_resolve, _reject) => {
	      this._resolve = _resolve;
	      this._reject = _reject;
	    });
	    this.retryCount = 0;
	  }

	  _sanitizePriority(priority) {
	    var sProperty;
	    sProperty = ~~priority !== priority ? DEFAULT_PRIORITY : priority;
	    if (sProperty < 0) {
	      return 0;
	    } else if (sProperty > NUM_PRIORITIES - 1) {
	      return NUM_PRIORITIES - 1;
	    } else {
	      return sProperty;
	    }
	  }

	  _randomIndex() {
	    return Math.random().toString(36).slice(2);
	  }

	  doDrop({error, message = "This job has been dropped by Bottleneck"} = {}) {
	    if (this._states.remove(this.options.id)) {
	      if (this.rejectOnDrop) {
	        this._reject(error != null ? error : new BottleneckError$1(message));
	      }
	      this.Events.trigger("dropped", {args: this.args, options: this.options, task: this.task, promise: this.promise});
	      return true;
	    } else {
	      return false;
	    }
	  }

	  _assertStatus(expected) {
	    var status;
	    status = this._states.jobStatus(this.options.id);
	    if (!(status === expected || (expected === "DONE" && status === null))) {
	      throw new BottleneckError$1(`Invalid job status ${status}, expected ${expected}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`);
	    }
	  }

	  doReceive() {
	    this._states.start(this.options.id);
	    return this.Events.trigger("received", {args: this.args, options: this.options});
	  }

	  doQueue(reachedHWM, blocked) {
	    this._assertStatus("RECEIVED");
	    this._states.next(this.options.id);
	    return this.Events.trigger("queued", {args: this.args, options: this.options, reachedHWM, blocked});
	  }

	  doRun() {
	    if (this.retryCount === 0) {
	      this._assertStatus("QUEUED");
	      this._states.next(this.options.id);
	    } else {
	      this._assertStatus("EXECUTING");
	    }
	    return this.Events.trigger("scheduled", {args: this.args, options: this.options});
	  }

	  async doExecute(chained, clearGlobalState, run, free) {
	    var error, eventInfo, passed;
	    if (this.retryCount === 0) {
	      this._assertStatus("RUNNING");
	      this._states.next(this.options.id);
	    } else {
	      this._assertStatus("EXECUTING");
	    }
	    eventInfo = {args: this.args, options: this.options, retryCount: this.retryCount};
	    this.Events.trigger("executing", eventInfo);
	    try {
	      passed = (await (chained != null ? chained.schedule(this.options, this.task, ...this.args) : this.task(...this.args)));
	      if (clearGlobalState()) {
	        this.doDone(eventInfo);
	        await free(this.options, eventInfo);
	        this._assertStatus("DONE");
	        return this._resolve(passed);
	      }
	    } catch (error1) {
	      error = error1;
	      return this._onFailure(error, eventInfo, clearGlobalState, run, free);
	    }
	  }

	  doExpire(clearGlobalState, run, free) {
	    var error, eventInfo;
	    if (this._states.jobStatus(this.options.id === "RUNNING")) {
	      this._states.next(this.options.id);
	    }
	    this._assertStatus("EXECUTING");
	    eventInfo = {args: this.args, options: this.options, retryCount: this.retryCount};
	    error = new BottleneckError$1(`This job timed out after ${this.options.expiration} ms.`);
	    return this._onFailure(error, eventInfo, clearGlobalState, run, free);
	  }

	  async _onFailure(error, eventInfo, clearGlobalState, run, free) {
	    var retry, retryAfter;
	    if (clearGlobalState()) {
	      retry = (await this.Events.trigger("failed", error, eventInfo));
	      if (retry != null) {
	        retryAfter = ~~retry;
	        this.Events.trigger("retry", `Retrying ${this.options.id} after ${retryAfter} ms`, eventInfo);
	        this.retryCount++;
	        return run(retryAfter);
	      } else {
	        this.doDone(eventInfo);
	        await free(this.options, eventInfo);
	        this._assertStatus("DONE");
	        return this._reject(error);
	      }
	    }
	  }

	  doDone(eventInfo) {
	    this._assertStatus("EXECUTING");
	    this._states.next(this.options.id);
	    return this.Events.trigger("done", eventInfo);
	  }

	};

	var Job_1 = Job;

	var BottleneckError$2, LocalDatastore, parser$2;

	parser$2 = parser;

	BottleneckError$2 = BottleneckError_1;

	LocalDatastore = class LocalDatastore {
	  constructor(instance, storeOptions, storeInstanceOptions) {
	    this.instance = instance;
	    this.storeOptions = storeOptions;
	    this.clientId = this.instance._randomIndex();
	    parser$2.load(storeInstanceOptions, storeInstanceOptions, this);
	    this._nextRequest = this._lastReservoirRefresh = this._lastReservoirIncrease = Date.now();
	    this._running = 0;
	    this._done = 0;
	    this._unblockTime = 0;
	    this.ready = this.Promise.resolve();
	    this.clients = {};
	    this._startHeartbeat();
	  }

	  _startHeartbeat() {
	    var base;
	    if ((this.heartbeat == null) && (((this.storeOptions.reservoirRefreshInterval != null) && (this.storeOptions.reservoirRefreshAmount != null)) || ((this.storeOptions.reservoirIncreaseInterval != null) && (this.storeOptions.reservoirIncreaseAmount != null)))) {
	      return typeof (base = (this.heartbeat = setInterval(() => {
	        var amount, incr, maximum, now, reservoir;
	        now = Date.now();
	        if ((this.storeOptions.reservoirRefreshInterval != null) && now >= this._lastReservoirRefresh + this.storeOptions.reservoirRefreshInterval) {
	          this._lastReservoirRefresh = now;
	          this.storeOptions.reservoir = this.storeOptions.reservoirRefreshAmount;
	          this.instance._drainAll(this.computeCapacity());
	        }
	        if ((this.storeOptions.reservoirIncreaseInterval != null) && now >= this._lastReservoirIncrease + this.storeOptions.reservoirIncreaseInterval) {
	          ({
	            reservoirIncreaseAmount: amount,
	            reservoirIncreaseMaximum: maximum,
	            reservoir
	          } = this.storeOptions);
	          this._lastReservoirIncrease = now;
	          incr = maximum != null ? Math.min(amount, maximum - reservoir) : amount;
	          if (incr > 0) {
	            this.storeOptions.reservoir += incr;
	            return this.instance._drainAll(this.computeCapacity());
	          }
	        }
	      }, this.heartbeatInterval))).unref === "function" ? base.unref() : void 0;
	    } else {
	      return clearInterval(this.heartbeat);
	    }
	  }

	  async __publish__(message) {
	    await this.yieldLoop();
	    return this.instance.Events.trigger("message", message.toString());
	  }

	  async __disconnect__(flush) {
	    await this.yieldLoop();
	    clearInterval(this.heartbeat);
	    return this.Promise.resolve();
	  }

	  yieldLoop(t = 0) {
	    return new this.Promise(function(resolve, reject) {
	      return setTimeout(resolve, t);
	    });
	  }

	  computePenalty() {
	    var ref;
	    return (ref = this.storeOptions.penalty) != null ? ref : (15 * this.storeOptions.minTime) || 5000;
	  }

	  async __updateSettings__(options) {
	    await this.yieldLoop();
	    parser$2.overwrite(options, options, this.storeOptions);
	    this._startHeartbeat();
	    this.instance._drainAll(this.computeCapacity());
	    return true;
	  }

	  async __running__() {
	    await this.yieldLoop();
	    return this._running;
	  }

	  async __queued__() {
	    await this.yieldLoop();
	    return this.instance.queued();
	  }

	  async __done__() {
	    await this.yieldLoop();
	    return this._done;
	  }

	  async __groupCheck__(time) {
	    await this.yieldLoop();
	    return (this._nextRequest + this.timeout) < time;
	  }

	  computeCapacity() {
	    var maxConcurrent, reservoir;
	    ({maxConcurrent, reservoir} = this.storeOptions);
	    if ((maxConcurrent != null) && (reservoir != null)) {
	      return Math.min(maxConcurrent - this._running, reservoir);
	    } else if (maxConcurrent != null) {
	      return maxConcurrent - this._running;
	    } else if (reservoir != null) {
	      return reservoir;
	    } else {
	      return null;
	    }
	  }

	  conditionsCheck(weight) {
	    var capacity;
	    capacity = this.computeCapacity();
	    return (capacity == null) || weight <= capacity;
	  }

	  async __incrementReservoir__(incr) {
	    var reservoir;
	    await this.yieldLoop();
	    reservoir = this.storeOptions.reservoir += incr;
	    this.instance._drainAll(this.computeCapacity());
	    return reservoir;
	  }

	  async __currentReservoir__() {
	    await this.yieldLoop();
	    return this.storeOptions.reservoir;
	  }

	  isBlocked(now) {
	    return this._unblockTime >= now;
	  }

	  check(weight, now) {
	    return this.conditionsCheck(weight) && (this._nextRequest - now) <= 0;
	  }

	  async __check__(weight) {
	    var now;
	    await this.yieldLoop();
	    now = Date.now();
	    return this.check(weight, now);
	  }

	  async __register__(index, weight, expiration) {
	    var now, wait;
	    await this.yieldLoop();
	    now = Date.now();
	    if (this.conditionsCheck(weight)) {
	      this._running += weight;
	      if (this.storeOptions.reservoir != null) {
	        this.storeOptions.reservoir -= weight;
	      }
	      wait = Math.max(this._nextRequest - now, 0);
	      this._nextRequest = now + wait + this.storeOptions.minTime;
	      return {
	        success: true,
	        wait,
	        reservoir: this.storeOptions.reservoir
	      };
	    } else {
	      return {
	        success: false
	      };
	    }
	  }

	  strategyIsBlock() {
	    return this.storeOptions.strategy === 3;
	  }

	  async __submit__(queueLength, weight) {
	    var blocked, now, reachedHWM;
	    await this.yieldLoop();
	    if ((this.storeOptions.maxConcurrent != null) && weight > this.storeOptions.maxConcurrent) {
	      throw new BottleneckError$2(`Impossible to add a job having a weight of ${weight} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);
	    }
	    now = Date.now();
	    reachedHWM = (this.storeOptions.highWater != null) && queueLength === this.storeOptions.highWater && !this.check(weight, now);
	    blocked = this.strategyIsBlock() && (reachedHWM || this.isBlocked(now));
	    if (blocked) {
	      this._unblockTime = now + this.computePenalty();
	      this._nextRequest = this._unblockTime + this.storeOptions.minTime;
	      this.instance._dropAllQueued();
	    }
	    return {
	      reachedHWM,
	      blocked,
	      strategy: this.storeOptions.strategy
	    };
	  }

	  async __free__(index, weight) {
	    await this.yieldLoop();
	    this._running -= weight;
	    this._done += weight;
	    this.instance._drainAll(this.computeCapacity());
	    return {
	      running: this._running
	    };
	  }

	};

	var LocalDatastore_1 = LocalDatastore;

	var BottleneckError$3, States;

	BottleneckError$3 = BottleneckError_1;

	States = class States {
	  constructor(status1) {
	    this.status = status1;
	    this._jobs = {};
	    this.counts = this.status.map(function() {
	      return 0;
	    });
	  }

	  next(id) {
	    var current, next;
	    current = this._jobs[id];
	    next = current + 1;
	    if ((current != null) && next < this.status.length) {
	      this.counts[current]--;
	      this.counts[next]++;
	      return this._jobs[id]++;
	    } else if (current != null) {
	      this.counts[current]--;
	      return delete this._jobs[id];
	    }
	  }

	  start(id) {
	    var initial;
	    initial = 0;
	    this._jobs[id] = initial;
	    return this.counts[initial]++;
	  }

	  remove(id) {
	    var current;
	    current = this._jobs[id];
	    if (current != null) {
	      this.counts[current]--;
	      delete this._jobs[id];
	    }
	    return current != null;
	  }

	  jobStatus(id) {
	    var ref;
	    return (ref = this.status[this._jobs[id]]) != null ? ref : null;
	  }

	  statusJobs(status) {
	    var k, pos, ref, results, v;
	    if (status != null) {
	      pos = this.status.indexOf(status);
	      if (pos < 0) {
	        throw new BottleneckError$3(`status must be one of ${this.status.join(', ')}`);
	      }
	      ref = this._jobs;
	      results = [];
	      for (k in ref) {
	        v = ref[k];
	        if (v === pos) {
	          results.push(k);
	        }
	      }
	      return results;
	    } else {
	      return Object.keys(this._jobs);
	    }
	  }

	  statusCounts() {
	    return this.counts.reduce(((acc, v, i) => {
	      acc[this.status[i]] = v;
	      return acc;
	    }), {});
	  }

	};

	var States_1 = States;

	var DLList$2, Sync;

	DLList$2 = DLList_1;

	Sync = class Sync {
	  constructor(name, Promise) {
	    this.schedule = this.schedule.bind(this);
	    this.name = name;
	    this.Promise = Promise;
	    this._running = 0;
	    this._queue = new DLList$2();
	  }

	  isEmpty() {
	    return this._queue.length === 0;
	  }

	  async _tryToRun() {
	    var args, cb, error, reject, resolve, returned, task;
	    if ((this._running < 1) && this._queue.length > 0) {
	      this._running++;
	      ({task, args, resolve, reject} = this._queue.shift());
	      cb = (await (async function() {
	        try {
	          returned = (await task(...args));
	          return function() {
	            return resolve(returned);
	          };
	        } catch (error1) {
	          error = error1;
	          return function() {
	            return reject(error);
	          };
	        }
	      })());
	      this._running--;
	      this._tryToRun();
	      return cb();
	    }
	  }

	  schedule(task, ...args) {
	    var promise, reject, resolve;
	    resolve = reject = null;
	    promise = new this.Promise(function(_resolve, _reject) {
	      resolve = _resolve;
	      return reject = _reject;
	    });
	    this._queue.push({task, args, resolve, reject});
	    this._tryToRun();
	    return promise;
	  }

	};

	var Sync_1 = Sync;

	var version = "2.19.5";
	var version$1 = {
		version: version
	};

	var version$2 = /*#__PURE__*/Object.freeze({
		version: version,
		default: version$1
	});

	var require$$2 = () => console.log('You must import the full version of Bottleneck in order to use this feature.');

	var require$$3 = () => console.log('You must import the full version of Bottleneck in order to use this feature.');

	var require$$4 = () => console.log('You must import the full version of Bottleneck in order to use this feature.');

	var Events$2, Group, IORedisConnection$1, RedisConnection$1, Scripts$1, parser$3;

	parser$3 = parser;

	Events$2 = Events_1;

	RedisConnection$1 = require$$2;

	IORedisConnection$1 = require$$3;

	Scripts$1 = require$$4;

	Group = (function() {
	  class Group {
	    constructor(limiterOptions = {}) {
	      this.deleteKey = this.deleteKey.bind(this);
	      this.limiterOptions = limiterOptions;
	      parser$3.load(this.limiterOptions, this.defaults, this);
	      this.Events = new Events$2(this);
	      this.instances = {};
	      this.Bottleneck = Bottleneck_1;
	      this._startAutoCleanup();
	      this.sharedConnection = this.connection != null;
	      if (this.connection == null) {
	        if (this.limiterOptions.datastore === "redis") {
	          this.connection = new RedisConnection$1(Object.assign({}, this.limiterOptions, {Events: this.Events}));
	        } else if (this.limiterOptions.datastore === "ioredis") {
	          this.connection = new IORedisConnection$1(Object.assign({}, this.limiterOptions, {Events: this.Events}));
	        }
	      }
	    }

	    key(key = "") {
	      var ref;
	      return (ref = this.instances[key]) != null ? ref : (() => {
	        var limiter;
	        limiter = this.instances[key] = new this.Bottleneck(Object.assign(this.limiterOptions, {
	          id: `${this.id}-${key}`,
	          timeout: this.timeout,
	          connection: this.connection
	        }));
	        this.Events.trigger("created", limiter, key);
	        return limiter;
	      })();
	    }

	    async deleteKey(key = "") {
	      var deleted, instance;
	      instance = this.instances[key];
	      if (this.connection) {
	        deleted = (await this.connection.__runCommand__(['del', ...Scripts$1.allKeys(`${this.id}-${key}`)]));
	      }
	      if (instance != null) {
	        delete this.instances[key];
	        await instance.disconnect();
	      }
	      return (instance != null) || deleted > 0;
	    }

	    limiters() {
	      var k, ref, results, v;
	      ref = this.instances;
	      results = [];
	      for (k in ref) {
	        v = ref[k];
	        results.push({
	          key: k,
	          limiter: v
	        });
	      }
	      return results;
	    }

	    keys() {
	      return Object.keys(this.instances);
	    }

	    async clusterKeys() {
	      var cursor, end, found, i, k, keys, len, next, start;
	      if (this.connection == null) {
	        return this.Promise.resolve(this.keys());
	      }
	      keys = [];
	      cursor = null;
	      start = `b_${this.id}-`.length;
	      end = "_settings".length;
	      while (cursor !== 0) {
	        [next, found] = (await this.connection.__runCommand__(["scan", cursor != null ? cursor : 0, "match", `b_${this.id}-*_settings`, "count", 10000]));
	        cursor = ~~next;
	        for (i = 0, len = found.length; i < len; i++) {
	          k = found[i];
	          keys.push(k.slice(start, -end));
	        }
	      }
	      return keys;
	    }

	    _startAutoCleanup() {
	      var base;
	      clearInterval(this.interval);
	      return typeof (base = (this.interval = setInterval(async() => {
	        var e, k, ref, results, time, v;
	        time = Date.now();
	        ref = this.instances;
	        results = [];
	        for (k in ref) {
	          v = ref[k];
	          try {
	            if ((await v._store.__groupCheck__(time))) {
	              results.push(this.deleteKey(k));
	            } else {
	              results.push(void 0);
	            }
	          } catch (error) {
	            e = error;
	            results.push(v.Events.trigger("error", e));
	          }
	        }
	        return results;
	      }, this.timeout / 2))).unref === "function" ? base.unref() : void 0;
	    }

	    updateSettings(options = {}) {
	      parser$3.overwrite(options, this.defaults, this);
	      parser$3.overwrite(options, options, this.limiterOptions);
	      if (options.timeout != null) {
	        return this._startAutoCleanup();
	      }
	    }

	    disconnect(flush = true) {
	      var ref;
	      if (!this.sharedConnection) {
	        return (ref = this.connection) != null ? ref.disconnect(flush) : void 0;
	      }
	    }

	  }
	  Group.prototype.defaults = {
	    timeout: 1000 * 60 * 5,
	    connection: null,
	    Promise: Promise,
	    id: "group-key"
	  };

	  return Group;

	}).call(commonjsGlobal);

	var Group_1 = Group;

	var Batcher, Events$3, parser$4;

	parser$4 = parser;

	Events$3 = Events_1;

	Batcher = (function() {
	  class Batcher {
	    constructor(options = {}) {
	      this.options = options;
	      parser$4.load(this.options, this.defaults, this);
	      this.Events = new Events$3(this);
	      this._arr = [];
	      this._resetPromise();
	      this._lastFlush = Date.now();
	    }

	    _resetPromise() {
	      return this._promise = new this.Promise((res, rej) => {
	        return this._resolve = res;
	      });
	    }

	    _flush() {
	      clearTimeout(this._timeout);
	      this._lastFlush = Date.now();
	      this._resolve();
	      this.Events.trigger("batch", this._arr);
	      this._arr = [];
	      return this._resetPromise();
	    }

	    add(data) {
	      var ret;
	      this._arr.push(data);
	      ret = this._promise;
	      if (this._arr.length === this.maxSize) {
	        this._flush();
	      } else if ((this.maxTime != null) && this._arr.length === 1) {
	        this._timeout = setTimeout(() => {
	          return this._flush();
	        }, this.maxTime);
	      }
	      return ret;
	    }

	  }
	  Batcher.prototype.defaults = {
	    maxTime: null,
	    maxSize: null,
	    Promise: Promise
	  };

	  return Batcher;

	}).call(commonjsGlobal);

	var Batcher_1 = Batcher;

	var require$$4$1 = () => console.log('You must import the full version of Bottleneck in order to use this feature.');

	var require$$8 = getCjsExportFromNamespace(version$2);

	var Bottleneck, DEFAULT_PRIORITY$1, Events$4, Job$1, LocalDatastore$1, NUM_PRIORITIES$1, Queues$1, RedisDatastore$1, States$1, Sync$1, parser$5,
	  splice = [].splice;

	NUM_PRIORITIES$1 = 10;

	DEFAULT_PRIORITY$1 = 5;

	parser$5 = parser;

	Queues$1 = Queues_1;

	Job$1 = Job_1;

	LocalDatastore$1 = LocalDatastore_1;

	RedisDatastore$1 = require$$4$1;

	Events$4 = Events_1;

	States$1 = States_1;

	Sync$1 = Sync_1;

	Bottleneck = (function() {
	  class Bottleneck {
	    constructor(options = {}, ...invalid) {
	      var storeInstanceOptions, storeOptions;
	      this._addToQueue = this._addToQueue.bind(this);
	      this._validateOptions(options, invalid);
	      parser$5.load(options, this.instanceDefaults, this);
	      this._queues = new Queues$1(NUM_PRIORITIES$1);
	      this._scheduled = {};
	      this._states = new States$1(["RECEIVED", "QUEUED", "RUNNING", "EXECUTING"].concat(this.trackDoneStatus ? ["DONE"] : []));
	      this._limiter = null;
	      this.Events = new Events$4(this);
	      this._submitLock = new Sync$1("submit", this.Promise);
	      this._registerLock = new Sync$1("register", this.Promise);
	      storeOptions = parser$5.load(options, this.storeDefaults, {});
	      this._store = (function() {
	        if (this.datastore === "redis" || this.datastore === "ioredis" || (this.connection != null)) {
	          storeInstanceOptions = parser$5.load(options, this.redisStoreDefaults, {});
	          return new RedisDatastore$1(this, storeOptions, storeInstanceOptions);
	        } else if (this.datastore === "local") {
	          storeInstanceOptions = parser$5.load(options, this.localStoreDefaults, {});
	          return new LocalDatastore$1(this, storeOptions, storeInstanceOptions);
	        } else {
	          throw new Bottleneck.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`);
	        }
	      }).call(this);
	      this._queues.on("leftzero", () => {
	        var ref;
	        return (ref = this._store.heartbeat) != null ? typeof ref.ref === "function" ? ref.ref() : void 0 : void 0;
	      });
	      this._queues.on("zero", () => {
	        var ref;
	        return (ref = this._store.heartbeat) != null ? typeof ref.unref === "function" ? ref.unref() : void 0 : void 0;
	      });
	    }

	    _validateOptions(options, invalid) {
	      if (!((options != null) && typeof options === "object" && invalid.length === 0)) {
	        throw new Bottleneck.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.");
	      }
	    }

	    ready() {
	      return this._store.ready;
	    }

	    clients() {
	      return this._store.clients;
	    }

	    channel() {
	      return `b_${this.id}`;
	    }

	    channel_client() {
	      return `b_${this.id}_${this._store.clientId}`;
	    }

	    publish(message) {
	      return this._store.__publish__(message);
	    }

	    disconnect(flush = true) {
	      return this._store.__disconnect__(flush);
	    }

	    chain(_limiter) {
	      this._limiter = _limiter;
	      return this;
	    }

	    queued(priority) {
	      return this._queues.queued(priority);
	    }

	    clusterQueued() {
	      return this._store.__queued__();
	    }

	    empty() {
	      return this.queued() === 0 && this._submitLock.isEmpty();
	    }

	    running() {
	      return this._store.__running__();
	    }

	    done() {
	      return this._store.__done__();
	    }

	    jobStatus(id) {
	      return this._states.jobStatus(id);
	    }

	    jobs(status) {
	      return this._states.statusJobs(status);
	    }

	    counts() {
	      return this._states.statusCounts();
	    }

	    _randomIndex() {
	      return Math.random().toString(36).slice(2);
	    }

	    check(weight = 1) {
	      return this._store.__check__(weight);
	    }

	    _clearGlobalState(index) {
	      if (this._scheduled[index] != null) {
	        clearTimeout(this._scheduled[index].expiration);
	        delete this._scheduled[index];
	        return true;
	      } else {
	        return false;
	      }
	    }

	    async _free(index, job, options, eventInfo) {
	      var e, running;
	      try {
	        ({running} = (await this._store.__free__(index, options.weight)));
	        this.Events.trigger("debug", `Freed ${options.id}`, eventInfo);
	        if (running === 0 && this.empty()) {
	          return this.Events.trigger("idle");
	        }
	      } catch (error1) {
	        e = error1;
	        return this.Events.trigger("error", e);
	      }
	    }

	    _run(index, job, wait) {
	      var clearGlobalState, free, run;
	      job.doRun();
	      clearGlobalState = this._clearGlobalState.bind(this, index);
	      run = this._run.bind(this, index, job);
	      free = this._free.bind(this, index, job);
	      return this._scheduled[index] = {
	        timeout: setTimeout(() => {
	          return job.doExecute(this._limiter, clearGlobalState, run, free);
	        }, wait),
	        expiration: job.options.expiration != null ? setTimeout(function() {
	          return job.doExpire(clearGlobalState, run, free);
	        }, wait + job.options.expiration) : void 0,
	        job: job
	      };
	    }

	    _drainOne(capacity) {
	      return this._registerLock.schedule(() => {
	        var args, index, next, options, queue;
	        if (this.queued() === 0) {
	          return this.Promise.resolve(null);
	        }
	        queue = this._queues.getFirst();
	        ({options, args} = next = queue.first());
	        if ((capacity != null) && options.weight > capacity) {
	          return this.Promise.resolve(null);
	        }
	        this.Events.trigger("debug", `Draining ${options.id}`, {args, options});
	        index = this._randomIndex();
	        return this._store.__register__(index, options.weight, options.expiration).then(({success, wait, reservoir}) => {
	          var empty;
	          this.Events.trigger("debug", `Drained ${options.id}`, {success, args, options});
	          if (success) {
	            queue.shift();
	            empty = this.empty();
	            if (empty) {
	              this.Events.trigger("empty");
	            }
	            if (reservoir === 0) {
	              this.Events.trigger("depleted", empty);
	            }
	            this._run(index, next, wait);
	            return this.Promise.resolve(options.weight);
	          } else {
	            return this.Promise.resolve(null);
	          }
	        });
	      });
	    }

	    _drainAll(capacity, total = 0) {
	      return this._drainOne(capacity).then((drained) => {
	        var newCapacity;
	        if (drained != null) {
	          newCapacity = capacity != null ? capacity - drained : capacity;
	          return this._drainAll(newCapacity, total + drained);
	        } else {
	          return this.Promise.resolve(total);
	        }
	      }).catch((e) => {
	        return this.Events.trigger("error", e);
	      });
	    }

	    _dropAllQueued(message) {
	      return this._queues.shiftAll(function(job) {
	        return job.doDrop({message});
	      });
	    }

	    stop(options = {}) {
	      var done, waitForExecuting;
	      options = parser$5.load(options, this.stopDefaults);
	      waitForExecuting = (at) => {
	        var finished;
	        finished = () => {
	          var counts;
	          counts = this._states.counts;
	          return (counts[0] + counts[1] + counts[2] + counts[3]) === at;
	        };
	        return new this.Promise((resolve, reject) => {
	          if (finished()) {
	            return resolve();
	          } else {
	            return this.on("done", () => {
	              if (finished()) {
	                this.removeAllListeners("done");
	                return resolve();
	              }
	            });
	          }
	        });
	      };
	      done = options.dropWaitingJobs ? (this._run = function(index, next) {
	        return next.doDrop({
	          message: options.dropErrorMessage
	        });
	      }, this._drainOne = () => {
	        return this.Promise.resolve(null);
	      }, this._registerLock.schedule(() => {
	        return this._submitLock.schedule(() => {
	          var k, ref, v;
	          ref = this._scheduled;
	          for (k in ref) {
	            v = ref[k];
	            if (this.jobStatus(v.job.options.id) === "RUNNING") {
	              clearTimeout(v.timeout);
	              clearTimeout(v.expiration);
	              v.job.doDrop({
	                message: options.dropErrorMessage
	              });
	            }
	          }
	          this._dropAllQueued(options.dropErrorMessage);
	          return waitForExecuting(0);
	        });
	      })) : this.schedule({
	        priority: NUM_PRIORITIES$1 - 1,
	        weight: 0
	      }, () => {
	        return waitForExecuting(1);
	      });
	      this._receive = function(job) {
	        return job._reject(new Bottleneck.prototype.BottleneckError(options.enqueueErrorMessage));
	      };
	      this.stop = () => {
	        return this.Promise.reject(new Bottleneck.prototype.BottleneckError("stop() has already been called"));
	      };
	      return done;
	    }

	    async _addToQueue(job) {
	      var args, blocked, error, options, reachedHWM, shifted, strategy;
	      ({args, options} = job);
	      try {
	        ({reachedHWM, blocked, strategy} = (await this._store.__submit__(this.queued(), options.weight)));
	      } catch (error1) {
	        error = error1;
	        this.Events.trigger("debug", `Could not queue ${options.id}`, {args, options, error});
	        job.doDrop({error});
	        return false;
	      }
	      if (blocked) {
	        job.doDrop();
	        return true;
	      } else if (reachedHWM) {
	        shifted = strategy === Bottleneck.prototype.strategy.LEAK ? this._queues.shiftLastFrom(options.priority) : strategy === Bottleneck.prototype.strategy.OVERFLOW_PRIORITY ? this._queues.shiftLastFrom(options.priority + 1) : strategy === Bottleneck.prototype.strategy.OVERFLOW ? job : void 0;
	        if (shifted != null) {
	          shifted.doDrop();
	        }
	        if ((shifted == null) || strategy === Bottleneck.prototype.strategy.OVERFLOW) {
	          if (shifted == null) {
	            job.doDrop();
	          }
	          return reachedHWM;
	        }
	      }
	      job.doQueue(reachedHWM, blocked);
	      this._queues.push(job);
	      await this._drainAll();
	      return reachedHWM;
	    }

	    _receive(job) {
	      if (this._states.jobStatus(job.options.id) != null) {
	        job._reject(new Bottleneck.prototype.BottleneckError(`A job with the same id already exists (id=${job.options.id})`));
	        return false;
	      } else {
	        job.doReceive();
	        return this._submitLock.schedule(this._addToQueue, job);
	      }
	    }

	    submit(...args) {
	      var cb, fn, job, options, ref, ref1, task;
	      if (typeof args[0] === "function") {
	        ref = args, [fn, ...args] = ref, [cb] = splice.call(args, -1);
	        options = parser$5.load({}, this.jobDefaults);
	      } else {
	        ref1 = args, [options, fn, ...args] = ref1, [cb] = splice.call(args, -1);
	        options = parser$5.load(options, this.jobDefaults);
	      }
	      task = (...args) => {
	        return new this.Promise(function(resolve, reject) {
	          return fn(...args, function(...args) {
	            return (args[0] != null ? reject : resolve)(args);
	          });
	        });
	      };
	      job = new Job$1(task, args, options, this.jobDefaults, this.rejectOnDrop, this.Events, this._states, this.Promise);
	      job.promise.then(function(args) {
	        return typeof cb === "function" ? cb(...args) : void 0;
	      }).catch(function(args) {
	        if (Array.isArray(args)) {
	          return typeof cb === "function" ? cb(...args) : void 0;
	        } else {
	          return typeof cb === "function" ? cb(args) : void 0;
	        }
	      });
	      return this._receive(job);
	    }

	    schedule(...args) {
	      var job, options, task;
	      if (typeof args[0] === "function") {
	        [task, ...args] = args;
	        options = {};
	      } else {
	        [options, task, ...args] = args;
	      }
	      job = new Job$1(task, args, options, this.jobDefaults, this.rejectOnDrop, this.Events, this._states, this.Promise);
	      this._receive(job);
	      return job.promise;
	    }

	    wrap(fn) {
	      var schedule, wrapped;
	      schedule = this.schedule.bind(this);
	      wrapped = function(...args) {
	        return schedule(fn.bind(this), ...args);
	      };
	      wrapped.withOptions = function(options, ...args) {
	        return schedule(options, fn, ...args);
	      };
	      return wrapped;
	    }

	    async updateSettings(options = {}) {
	      await this._store.__updateSettings__(parser$5.overwrite(options, this.storeDefaults));
	      parser$5.overwrite(options, this.instanceDefaults, this);
	      return this;
	    }

	    currentReservoir() {
	      return this._store.__currentReservoir__();
	    }

	    incrementReservoir(incr = 0) {
	      return this._store.__incrementReservoir__(incr);
	    }

	  }
	  Bottleneck.default = Bottleneck;

	  Bottleneck.Events = Events$4;

	  Bottleneck.version = Bottleneck.prototype.version = require$$8.version;

	  Bottleneck.strategy = Bottleneck.prototype.strategy = {
	    LEAK: 1,
	    OVERFLOW: 2,
	    OVERFLOW_PRIORITY: 4,
	    BLOCK: 3
	  };

	  Bottleneck.BottleneckError = Bottleneck.prototype.BottleneckError = BottleneckError_1;

	  Bottleneck.Group = Bottleneck.prototype.Group = Group_1;

	  Bottleneck.RedisConnection = Bottleneck.prototype.RedisConnection = require$$2;

	  Bottleneck.IORedisConnection = Bottleneck.prototype.IORedisConnection = require$$3;

	  Bottleneck.Batcher = Bottleneck.prototype.Batcher = Batcher_1;

	  Bottleneck.prototype.jobDefaults = {
	    priority: DEFAULT_PRIORITY$1,
	    weight: 1,
	    expiration: null,
	    id: "<no-id>"
	  };

	  Bottleneck.prototype.storeDefaults = {
	    maxConcurrent: null,
	    minTime: 0,
	    highWater: null,
	    strategy: Bottleneck.prototype.strategy.LEAK,
	    penalty: null,
	    reservoir: null,
	    reservoirRefreshInterval: null,
	    reservoirRefreshAmount: null,
	    reservoirIncreaseInterval: null,
	    reservoirIncreaseAmount: null,
	    reservoirIncreaseMaximum: null
	  };

	  Bottleneck.prototype.localStoreDefaults = {
	    Promise: Promise,
	    timeout: null,
	    heartbeatInterval: 250
	  };

	  Bottleneck.prototype.redisStoreDefaults = {
	    Promise: Promise,
	    timeout: null,
	    heartbeatInterval: 5000,
	    clientTimeout: 10000,
	    Redis: null,
	    clientOptions: {},
	    clusterNodes: null,
	    clearDatastore: false,
	    connection: null
	  };

	  Bottleneck.prototype.instanceDefaults = {
	    datastore: "local",
	    connection: null,
	    id: "<no-id>",
	    rejectOnDrop: true,
	    trackDoneStatus: false,
	    Promise: Promise
	  };

	  Bottleneck.prototype.stopDefaults = {
	    enqueueErrorMessage: "This limiter has been stopped and cannot accept new jobs.",
	    dropWaitingJobs: true,
	    dropErrorMessage: "This limiter has been stopped."
	  };

	  return Bottleneck;

	}).call(commonjsGlobal);

	var Bottleneck_1 = Bottleneck;

	var lib = Bottleneck_1;

	return lib;

})));


/***/ }),

/***/ 4325:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

class Deprecation extends Error {
  constructor(message) {
    super(message); // Maintains proper stack trace (only available on V8)

    /* istanbul ignore next */

    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }

    this.name = 'Deprecation';
  }

}

exports.Deprecation = Deprecation;


/***/ }),

/***/ 8806:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const fs = __nccwpck_require__(9896)
const path = __nccwpck_require__(6928)
const os = __nccwpck_require__(857)
const crypto = __nccwpck_require__(6982)
const packageJson = __nccwpck_require__(56)

const version = packageJson.version

const LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg

// Parse src into an Object
function parse (src) {
  const obj = {}

  // Convert buffer to string
  let lines = src.toString()

  // Convert line breaks to same format
  lines = lines.replace(/\r\n?/mg, '\n')

  let match
  while ((match = LINE.exec(lines)) != null) {
    const key = match[1]

    // Default undefined or null to empty string
    let value = (match[2] || '')

    // Remove whitespace
    value = value.trim()

    // Check if double quoted
    const maybeQuote = value[0]

    // Remove surrounding quotes
    value = value.replace(/^(['"`])([\s\S]*)\1$/mg, '$2')

    // Expand newlines if double quoted
    if (maybeQuote === '"') {
      value = value.replace(/\\n/g, '\n')
      value = value.replace(/\\r/g, '\r')
    }

    // Add to object
    obj[key] = value
  }

  return obj
}

function _parseVault (options) {
  const vaultPath = _vaultPath(options)

  // Parse .env.vault
  const result = DotenvModule.configDotenv({ path: vaultPath })
  if (!result.parsed) {
    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)
    err.code = 'MISSING_DATA'
    throw err
  }

  // handle scenario for comma separated keys - for use with key rotation
  // example: DOTENV_KEY="dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod"
  const keys = _dotenvKey(options).split(',')
  const length = keys.length

  let decrypted
  for (let i = 0; i < length; i++) {
    try {
      // Get full key
      const key = keys[i].trim()

      // Get instructions for decrypt
      const attrs = _instructions(result, key)

      // Decrypt
      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)

      break
    } catch (error) {
      // last key
      if (i + 1 >= length) {
        throw error
      }
      // try next key
    }
  }

  // Parse decrypted .env string
  return DotenvModule.parse(decrypted)
}

function _log (message) {
  console.log(`[dotenv@${version}][INFO] ${message}`)
}

function _warn (message) {
  console.log(`[dotenv@${version}][WARN] ${message}`)
}

function _debug (message) {
  console.log(`[dotenv@${version}][DEBUG] ${message}`)
}

function _dotenvKey (options) {
  // prioritize developer directly setting options.DOTENV_KEY
  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
    return options.DOTENV_KEY
  }

  // secondary infra already contains a DOTENV_KEY environment variable
  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
    return process.env.DOTENV_KEY
  }

  // fallback to empty string
  return ''
}

function _instructions (result, dotenvKey) {
  // Parse DOTENV_KEY. Format is a URI
  let uri
  try {
    uri = new URL(dotenvKey)
  } catch (error) {
    if (error.code === 'ERR_INVALID_URL') {
      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')
      err.code = 'INVALID_DOTENV_KEY'
      throw err
    }

    throw error
  }

  // Get decrypt key
  const key = uri.password
  if (!key) {
    const err = new Error('INVALID_DOTENV_KEY: Missing key part')
    err.code = 'INVALID_DOTENV_KEY'
    throw err
  }

  // Get environment
  const environment = uri.searchParams.get('environment')
  if (!environment) {
    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')
    err.code = 'INVALID_DOTENV_KEY'
    throw err
  }

  // Get ciphertext payload
  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`
  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION
  if (!ciphertext) {
    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)
    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'
    throw err
  }

  return { ciphertext, key }
}

function _vaultPath (options) {
  let possibleVaultPath = null

  if (options && options.path && options.path.length > 0) {
    if (Array.isArray(options.path)) {
      for (const filepath of options.path) {
        if (fs.existsSync(filepath)) {
          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`
        }
      }
    } else {
      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`
    }
  } else {
    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')
  }

  if (fs.existsSync(possibleVaultPath)) {
    return possibleVaultPath
  }

  return null
}

function _resolveHome (envPath) {
  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath
}

function _configVault (options) {
  _log('Loading env from encrypted .env.vault')

  const parsed = DotenvModule._parseVault(options)

  let processEnv = process.env
  if (options && options.processEnv != null) {
    processEnv = options.processEnv
  }

  DotenvModule.populate(processEnv, parsed, options)

  return { parsed }
}

function configDotenv (options) {
  const dotenvPath = path.resolve(process.cwd(), '.env')
  let encoding = 'utf8'
  const debug = Boolean(options && options.debug)

  if (options && options.encoding) {
    encoding = options.encoding
  } else {
    if (debug) {
      _debug('No encoding is specified. UTF-8 is used by default')
    }
  }

  let optionPaths = [dotenvPath] // default, look for .env
  if (options && options.path) {
    if (!Array.isArray(options.path)) {
      optionPaths = [_resolveHome(options.path)]
    } else {
      optionPaths = [] // reset default
      for (const filepath of options.path) {
        optionPaths.push(_resolveHome(filepath))
      }
    }
  }

  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final
  // parsed data, we will combine it with process.env (or options.processEnv if provided).
  let lastError
  const parsedAll = {}
  for (const path of optionPaths) {
    try {
      // Specifying an encoding returns a string instead of a buffer
      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))

      DotenvModule.populate(parsedAll, parsed, options)
    } catch (e) {
      if (debug) {
        _debug(`Failed to load ${path} ${e.message}`)
      }
      lastError = e
    }
  }

  let processEnv = process.env
  if (options && options.processEnv != null) {
    processEnv = options.processEnv
  }

  DotenvModule.populate(processEnv, parsedAll, options)

  if (lastError) {
    return { parsed: parsedAll, error: lastError }
  } else {
    return { parsed: parsedAll }
  }
}

// Populates process.env from .env file
function config (options) {
  // fallback to original dotenv if DOTENV_KEY is not set
  if (_dotenvKey(options).length === 0) {
    return DotenvModule.configDotenv(options)
  }

  const vaultPath = _vaultPath(options)

  // dotenvKey exists but .env.vault file does not exist
  if (!vaultPath) {
    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)

    return DotenvModule.configDotenv(options)
  }

  return DotenvModule._configVault(options)
}

function decrypt (encrypted, keyStr) {
  const key = Buffer.from(keyStr.slice(-64), 'hex')
  let ciphertext = Buffer.from(encrypted, 'base64')

  const nonce = ciphertext.subarray(0, 12)
  const authTag = ciphertext.subarray(-16)
  ciphertext = ciphertext.subarray(12, -16)

  try {
    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)
    aesgcm.setAuthTag(authTag)
    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`
  } catch (error) {
    const isRange = error instanceof RangeError
    const invalidKeyLength = error.message === 'Invalid key length'
    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'

    if (isRange || invalidKeyLength) {
      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')
      err.code = 'INVALID_DOTENV_KEY'
      throw err
    } else if (decryptionFailed) {
      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')
      err.code = 'DECRYPTION_FAILED'
      throw err
    } else {
      throw error
    }
  }
}

// Populate process.env with parsed values
function populate (processEnv, parsed, options = {}) {
  const debug = Boolean(options && options.debug)
  const override = Boolean(options && options.override)

  if (typeof parsed !== 'object') {
    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')
    err.code = 'OBJECT_REQUIRED'
    throw err
  }

  // Set process.env
  for (const key of Object.keys(parsed)) {
    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
      if (override === true) {
        processEnv[key] = parsed[key]
      }

      if (debug) {
        if (override === true) {
          _debug(`"${key}" is already defined and WAS overwritten`)
        } else {
          _debug(`"${key}" is already defined and was NOT overwritten`)
        }
      }
    } else {
      processEnv[key] = parsed[key]
    }
  }
}

const DotenvModule = {
  configDotenv,
  _configVault,
  _parseVault,
  config,
  decrypt,
  parse,
  populate
}

module.exports.configDotenv = DotenvModule.configDotenv
module.exports._configVault = DotenvModule._configVault
module.exports._parseVault = DotenvModule._parseVault
module.exports.config = DotenvModule.config
module.exports.decrypt = DotenvModule.decrypt
module.exports.parse = DotenvModule.parse
module.exports.populate = DotenvModule.populate

module.exports = DotenvModule


/***/ }),

/***/ 3087:
/***/ ((module, exports) => {

"use strict";
/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */


Object.defineProperty(exports, "__esModule", ({ value: true }));

/**
 * @typedef {object} PrivateData
 * @property {EventTarget} eventTarget The event target.
 * @property {{type:string}} event The original event object.
 * @property {number} eventPhase The current event phase.
 * @property {EventTarget|null} currentTarget The current event target.
 * @property {boolean} canceled The flag to prevent default.
 * @property {boolean} stopped The flag to stop propagation.
 * @property {boolean} immediateStopped The flag to stop propagation immediately.
 * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
 * @property {number} timeStamp The unix time.
 * @private
 */

/**
 * Private data for event wrappers.
 * @type {WeakMap<Event, PrivateData>}
 * @private
 */
const privateData = new WeakMap();

/**
 * Cache for wrapper classes.
 * @type {WeakMap<Object, Function>}
 * @private
 */
const wrappers = new WeakMap();

/**
 * Get private data.
 * @param {Event} event The event object to get private data.
 * @returns {PrivateData} The private data of the event.
 * @private
 */
function pd(event) {
    const retv = privateData.get(event);
    console.assert(
        retv != null,
        "'this' is expected an Event object, but got",
        event
    );
    return retv
}

/**
 * https://dom.spec.whatwg.org/#set-the-canceled-flag
 * @param data {PrivateData} private data.
 */
function setCancelFlag(data) {
    if (data.passiveListener != null) {
        if (
            typeof console !== "undefined" &&
            typeof console.error === "function"
        ) {
            console.error(
                "Unable to preventDefault inside passive event listener invocation.",
                data.passiveListener
            );
        }
        return
    }
    if (!data.event.cancelable) {
        return
    }

    data.canceled = true;
    if (typeof data.event.preventDefault === "function") {
        data.event.preventDefault();
    }
}

/**
 * @see https://dom.spec.whatwg.org/#interface-event
 * @private
 */
/**
 * The event wrapper.
 * @constructor
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Event|{type:string}} event The original event to wrap.
 */
function Event(eventTarget, event) {
    privateData.set(this, {
        eventTarget,
        event,
        eventPhase: 2,
        currentTarget: eventTarget,
        canceled: false,
        stopped: false,
        immediateStopped: false,
        passiveListener: null,
        timeStamp: event.timeStamp || Date.now(),
    });

    // https://heycam.github.io/webidl/#Unforgeable
    Object.defineProperty(this, "isTrusted", { value: false, enumerable: true });

    // Define accessors
    const keys = Object.keys(event);
    for (let i = 0; i < keys.length; ++i) {
        const key = keys[i];
        if (!(key in this)) {
            Object.defineProperty(this, key, defineRedirectDescriptor(key));
        }
    }
}

// Should be enumerable, but class methods are not enumerable.
Event.prototype = {
    /**
     * The type of this event.
     * @type {string}
     */
    get type() {
        return pd(this).event.type
    },

    /**
     * The target of this event.
     * @type {EventTarget}
     */
    get target() {
        return pd(this).eventTarget
    },

    /**
     * The target of this event.
     * @type {EventTarget}
     */
    get currentTarget() {
        return pd(this).currentTarget
    },

    /**
     * @returns {EventTarget[]} The composed path of this event.
     */
    composedPath() {
        const currentTarget = pd(this).currentTarget;
        if (currentTarget == null) {
            return []
        }
        return [currentTarget]
    },

    /**
     * Constant of NONE.
     * @type {number}
     */
    get NONE() {
        return 0
    },

    /**
     * Constant of CAPTURING_PHASE.
     * @type {number}
     */
    get CAPTURING_PHASE() {
        return 1
    },

    /**
     * Constant of AT_TARGET.
     * @type {number}
     */
    get AT_TARGET() {
        return 2
    },

    /**
     * Constant of BUBBLING_PHASE.
     * @type {number}
     */
    get BUBBLING_PHASE() {
        return 3
    },

    /**
     * The target of this event.
     * @type {number}
     */
    get eventPhase() {
        return pd(this).eventPhase
    },

    /**
     * Stop event bubbling.
     * @returns {void}
     */
    stopPropagation() {
        const data = pd(this);

        data.stopped = true;
        if (typeof data.event.stopPropagation === "function") {
            data.event.stopPropagation();
        }
    },

    /**
     * Stop event bubbling.
     * @returns {void}
     */
    stopImmediatePropagation() {
        const data = pd(this);

        data.stopped = true;
        data.immediateStopped = true;
        if (typeof data.event.stopImmediatePropagation === "function") {
            data.event.stopImmediatePropagation();
        }
    },

    /**
     * The flag to be bubbling.
     * @type {boolean}
     */
    get bubbles() {
        return Boolean(pd(this).event.bubbles)
    },

    /**
     * The flag to be cancelable.
     * @type {boolean}
     */
    get cancelable() {
        return Boolean(pd(this).event.cancelable)
    },

    /**
     * Cancel this event.
     * @returns {void}
     */
    preventDefault() {
        setCancelFlag(pd(this));
    },

    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     */
    get defaultPrevented() {
        return pd(this).canceled
    },

    /**
     * The flag to be composed.
     * @type {boolean}
     */
    get composed() {
        return Boolean(pd(this).event.composed)
    },

    /**
     * The unix time of this event.
     * @type {number}
     */
    get timeStamp() {
        return pd(this).timeStamp
    },

    /**
     * The target of this event.
     * @type {EventTarget}
     * @deprecated
     */
    get srcElement() {
        return pd(this).eventTarget
    },

    /**
     * The flag to stop event bubbling.
     * @type {boolean}
     * @deprecated
     */
    get cancelBubble() {
        return pd(this).stopped
    },
    set cancelBubble(value) {
        if (!value) {
            return
        }
        const data = pd(this);

        data.stopped = true;
        if (typeof data.event.cancelBubble === "boolean") {
            data.event.cancelBubble = true;
        }
    },

    /**
     * The flag to indicate cancellation state.
     * @type {boolean}
     * @deprecated
     */
    get returnValue() {
        return !pd(this).canceled
    },
    set returnValue(value) {
        if (!value) {
            setCancelFlag(pd(this));
        }
    },

    /**
     * Initialize this event object. But do nothing under event dispatching.
     * @param {string} type The event type.
     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
     * @param {boolean} [cancelable=false] The flag to be possible to cancel.
     * @deprecated
     */
    initEvent() {
        // Do nothing.
    },
};

// `constructor` is not enumerable.
Object.defineProperty(Event.prototype, "constructor", {
    value: Event,
    configurable: true,
    writable: true,
});

// Ensure `event instanceof window.Event` is `true`.
if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
    Object.setPrototypeOf(Event.prototype, window.Event.prototype);

    // Make association for wrappers.
    wrappers.set(window.Event.prototype, Event);
}

/**
 * Get the property descriptor to redirect a given property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to redirect the property.
 * @private
 */
function defineRedirectDescriptor(key) {
    return {
        get() {
            return pd(this).event[key]
        },
        set(value) {
            pd(this).event[key] = value;
        },
        configurable: true,
        enumerable: true,
    }
}

/**
 * Get the property descriptor to call a given method property.
 * @param {string} key Property name to define property descriptor.
 * @returns {PropertyDescriptor} The property descriptor to call the method property.
 * @private
 */
function defineCallDescriptor(key) {
    return {
        value() {
            const event = pd(this).event;
            return event[key].apply(event, arguments)
        },
        configurable: true,
        enumerable: true,
    }
}

/**
 * Define new wrapper class.
 * @param {Function} BaseEvent The base wrapper class.
 * @param {Object} proto The prototype of the original event.
 * @returns {Function} The defined wrapper class.
 * @private
 */
function defineWrapper(BaseEvent, proto) {
    const keys = Object.keys(proto);
    if (keys.length === 0) {
        return BaseEvent
    }

    /** CustomEvent */
    function CustomEvent(eventTarget, event) {
        BaseEvent.call(this, eventTarget, event);
    }

    CustomEvent.prototype = Object.create(BaseEvent.prototype, {
        constructor: { value: CustomEvent, configurable: true, writable: true },
    });

    // Define accessors.
    for (let i = 0; i < keys.length; ++i) {
        const key = keys[i];
        if (!(key in BaseEvent.prototype)) {
            const descriptor = Object.getOwnPropertyDescriptor(proto, key);
            const isFunc = typeof descriptor.value === "function";
            Object.defineProperty(
                CustomEvent.prototype,
                key,
                isFunc
                    ? defineCallDescriptor(key)
                    : defineRedirectDescriptor(key)
            );
        }
    }

    return CustomEvent
}

/**
 * Get the wrapper class of a given prototype.
 * @param {Object} proto The prototype of the original event to get its wrapper.
 * @returns {Function} The wrapper class.
 * @private
 */
function getWrapper(proto) {
    if (proto == null || proto === Object.prototype) {
        return Event
    }

    let wrapper = wrappers.get(proto);
    if (wrapper == null) {
        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
        wrappers.set(proto, wrapper);
    }
    return wrapper
}

/**
 * Wrap a given event to management a dispatching.
 * @param {EventTarget} eventTarget The event target of this dispatching.
 * @param {Object} event The event to wrap.
 * @returns {Event} The wrapper instance.
 * @private
 */
function wrapEvent(eventTarget, event) {
    const Wrapper = getWrapper(Object.getPrototypeOf(event));
    return new Wrapper(eventTarget, event)
}

/**
 * Get the immediateStopped flag of a given event.
 * @param {Event} event The event to get.
 * @returns {boolean} The flag to stop propagation immediately.
 * @private
 */
function isStopped(event) {
    return pd(event).immediateStopped
}

/**
 * Set the current event phase of a given event.
 * @param {Event} event The event to set current target.
 * @param {number} eventPhase New event phase.
 * @returns {void}
 * @private
 */
function setEventPhase(event, eventPhase) {
    pd(event).eventPhase = eventPhase;
}

/**
 * Set the current target of a given event.
 * @param {Event} event The event to set current target.
 * @param {EventTarget|null} currentTarget New current target.
 * @returns {void}
 * @private
 */
function setCurrentTarget(event, currentTarget) {
    pd(event).currentTarget = currentTarget;
}

/**
 * Set a passive listener of a given event.
 * @param {Event} event The event to set current target.
 * @param {Function|null} passiveListener New passive listener.
 * @returns {void}
 * @private
 */
function setPassiveListener(event, passiveListener) {
    pd(event).passiveListener = passiveListener;
}

/**
 * @typedef {object} ListenerNode
 * @property {Function} listener
 * @property {1|2|3} listenerType
 * @property {boolean} passive
 * @property {boolean} once
 * @property {ListenerNode|null} next
 * @private
 */

/**
 * @type {WeakMap<object, Map<string, ListenerNode>>}
 * @private
 */
const listenersMap = new WeakMap();

// Listener types
const CAPTURE = 1;
const BUBBLE = 2;
const ATTRIBUTE = 3;

/**
 * Check whether a given value is an object or not.
 * @param {any} x The value to check.
 * @returns {boolean} `true` if the value is an object.
 */
function isObject(x) {
    return x !== null && typeof x === "object" //eslint-disable-line no-restricted-syntax
}

/**
 * Get listeners.
 * @param {EventTarget} eventTarget The event target to get.
 * @returns {Map<string, ListenerNode>} The listeners.
 * @private
 */
function getListeners(eventTarget) {
    const listeners = listenersMap.get(eventTarget);
    if (listeners == null) {
        throw new TypeError(
            "'this' is expected an EventTarget object, but got another value."
        )
    }
    return listeners
}

/**
 * Get the property descriptor for the event attribute of a given event.
 * @param {string} eventName The event name to get property descriptor.
 * @returns {PropertyDescriptor} The property descriptor.
 * @private
 */
function defineEventAttributeDescriptor(eventName) {
    return {
        get() {
            const listeners = getListeners(this);
            let node = listeners.get(eventName);
            while (node != null) {
                if (node.listenerType === ATTRIBUTE) {
                    return node.listener
                }
                node = node.next;
            }
            return null
        },

        set(listener) {
            if (typeof listener !== "function" && !isObject(listener)) {
                listener = null; // eslint-disable-line no-param-reassign
            }
            const listeners = getListeners(this);

            // Traverse to the tail while removing old value.
            let prev = null;
            let node = listeners.get(eventName);
            while (node != null) {
                if (node.listenerType === ATTRIBUTE) {
                    // Remove old value.
                    if (prev !== null) {
                        prev.next = node.next;
                    } else if (node.next !== null) {
                        listeners.set(eventName, node.next);
                    } else {
                        listeners.delete(eventName);
                    }
                } else {
                    prev = node;
                }

                node = node.next;
            }

            // Add new value.
            if (listener !== null) {
                const newNode = {
                    listener,
                    listenerType: ATTRIBUTE,
                    passive: false,
                    once: false,
                    next: null,
                };
                if (prev === null) {
                    listeners.set(eventName, newNode);
                } else {
                    prev.next = newNode;
                }
            }
        },
        configurable: true,
        enumerable: true,
    }
}

/**
 * Define an event attribute (e.g. `eventTarget.onclick`).
 * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
 * @param {string} eventName The event name to define.
 * @returns {void}
 */
function defineEventAttribute(eventTargetPrototype, eventName) {
    Object.defineProperty(
        eventTargetPrototype,
        `on${eventName}`,
        defineEventAttributeDescriptor(eventName)
    );
}

/**
 * Define a custom EventTarget with event attributes.
 * @param {string[]} eventNames Event names for event attributes.
 * @returns {EventTarget} The custom EventTarget.
 * @private
 */
function defineCustomEventTarget(eventNames) {
    /** CustomEventTarget */
    function CustomEventTarget() {
        EventTarget.call(this);
    }

    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
        constructor: {
            value: CustomEventTarget,
            configurable: true,
            writable: true,
        },
    });

    for (let i = 0; i < eventNames.length; ++i) {
        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
    }

    return CustomEventTarget
}

/**
 * EventTarget.
 *
 * - This is constructor if no arguments.
 * - This is a function which returns a CustomEventTarget constructor if there are arguments.
 *
 * For example:
 *
 *     class A extends EventTarget {}
 *     class B extends EventTarget("message") {}
 *     class C extends EventTarget("message", "error") {}
 *     class D extends EventTarget(["message", "error"]) {}
 */
function EventTarget() {
    /*eslint-disable consistent-return */
    if (this instanceof EventTarget) {
        listenersMap.set(this, new Map());
        return
    }
    if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(arguments[0])
    }
    if (arguments.length > 0) {
        const types = new Array(arguments.length);
        for (let i = 0; i < arguments.length; ++i) {
            types[i] = arguments[i];
        }
        return defineCustomEventTarget(types)
    }
    throw new TypeError("Cannot call a class as a function")
    /*eslint-enable consistent-return */
}

// Should be enumerable, but class methods are not enumerable.
EventTarget.prototype = {
    /**
     * Add a given listener to this event target.
     * @param {string} eventName The event name to add.
     * @param {Function} listener The listener to add.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */
    addEventListener(eventName, listener, options) {
        if (listener == null) {
            return
        }
        if (typeof listener !== "function" && !isObject(listener)) {
            throw new TypeError("'listener' should be a function or an object.")
        }

        const listeners = getListeners(this);
        const optionsIsObj = isObject(options);
        const capture = optionsIsObj
            ? Boolean(options.capture)
            : Boolean(options);
        const listenerType = capture ? CAPTURE : BUBBLE;
        const newNode = {
            listener,
            listenerType,
            passive: optionsIsObj && Boolean(options.passive),
            once: optionsIsObj && Boolean(options.once),
            next: null,
        };

        // Set it as the first node if the first node is null.
        let node = listeners.get(eventName);
        if (node === undefined) {
            listeners.set(eventName, newNode);
            return
        }

        // Traverse to the tail while checking duplication..
        let prev = null;
        while (node != null) {
            if (
                node.listener === listener &&
                node.listenerType === listenerType
            ) {
                // Should ignore duplication.
                return
            }
            prev = node;
            node = node.next;
        }

        // Add it.
        prev.next = newNode;
    },

    /**
     * Remove a given listener from this event target.
     * @param {string} eventName The event name to remove.
     * @param {Function} listener The listener to remove.
     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
     * @returns {void}
     */
    removeEventListener(eventName, listener, options) {
        if (listener == null) {
            return
        }

        const listeners = getListeners(this);
        const capture = isObject(options)
            ? Boolean(options.capture)
            : Boolean(options);
        const listenerType = capture ? CAPTURE : BUBBLE;

        let prev = null;
        let node = listeners.get(eventName);
        while (node != null) {
            if (
                node.listener === listener &&
                node.listenerType === listenerType
            ) {
                if (prev !== null) {
                    prev.next = node.next;
                } else if (node.next !== null) {
                    listeners.set(eventName, node.next);
                } else {
                    listeners.delete(eventName);
                }
                return
            }

            prev = node;
            node = node.next;
        }
    },

    /**
     * Dispatch a given event.
     * @param {Event|{type:string}} event The event to dispatch.
     * @returns {boolean} `false` if canceled.
     */
    dispatchEvent(event) {
        if (event == null || typeof event.type !== "string") {
            throw new TypeError('"event.type" should be a string.')
        }

        // If listeners aren't registered, terminate.
        const listeners = getListeners(this);
        const eventName = event.type;
        let node = listeners.get(eventName);
        if (node == null) {
            return true
        }

        // Since we cannot rewrite several properties, so wrap object.
        const wrappedEvent = wrapEvent(this, event);

        // This doesn't process capturing phase and bubbling phase.
        // This isn't participating in a tree.
        let prev = null;
        while (node != null) {
            // Remove this listener if it's once
            if (node.once) {
                if (prev !== null) {
                    prev.next = node.next;
                } else if (node.next !== null) {
                    listeners.set(eventName, node.next);
                } else {
                    listeners.delete(eventName);
                }
            } else {
                prev = node;
            }

            // Call this listener
            setPassiveListener(
                wrappedEvent,
                node.passive ? node.listener : null
            );
            if (typeof node.listener === "function") {
                try {
                    node.listener.call(this, wrappedEvent);
                } catch (err) {
                    if (
                        typeof console !== "undefined" &&
                        typeof console.error === "function"
                    ) {
                        console.error(err);
                    }
                }
            } else if (
                node.listenerType !== ATTRIBUTE &&
                typeof node.listener.handleEvent === "function"
            ) {
                node.listener.handleEvent(wrappedEvent);
            }

            // Break if `event.stopImmediatePropagation` was called.
            if (isStopped(wrappedEvent)) {
                break
            }

            node = node.next;
        }
        setPassiveListener(wrappedEvent, null);
        setEventPhase(wrappedEvent, 0);
        setCurrentTarget(wrappedEvent, null);

        return !wrappedEvent.defaultPrevented
    },
};

// `constructor` is not enumerable.
Object.defineProperty(EventTarget.prototype, "constructor", {
    value: EventTarget,
    configurable: true,
    writable: true,
});

// Ensure `eventTarget instanceof window.EventTarget` is `true`.
if (
    typeof window !== "undefined" &&
    typeof window.EventTarget !== "undefined"
) {
    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
}

exports.defineEventAttribute = defineEventAttribute;
exports.EventTarget = EventTarget;
exports["default"] = EventTarget;

module.exports = EventTarget
module.exports.EventTarget = module.exports["default"] = EventTarget
module.exports.defineEventAttribute = defineEventAttribute
//# sourceMappingURL=event-target-shim.js.map


/***/ }),

/***/ 6575:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
/*!
 * humanize-ms - index.js
 * Copyright(c) 2014 dead_horse <dead_horse@qq.com>
 * MIT Licensed
 */



/**
 * Module dependencies.
 */

var util = __nccwpck_require__(9023);
var ms = __nccwpck_require__(9433);

module.exports = function (t) {
  if (typeof t === 'number') return t;
  var r = ms(t);
  if (r === undefined) {
    var err = new Error(util.format('humanize-ms(%j) result undefined', t));
    console.warn(err.stack);
  }
  return r;
};


/***/ }),

/***/ 9433:
/***/ ((module) => {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}


/***/ }),

/***/ 2276:
/***/ ((module, exports, __nccwpck_require__) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Stream = _interopDefault(__nccwpck_require__(2203));
var http = _interopDefault(__nccwpck_require__(8611));
var Url = _interopDefault(__nccwpck_require__(7016));
var whatwgUrl = _interopDefault(__nccwpck_require__(8425));
var https = _interopDefault(__nccwpck_require__(5692));
var zlib = _interopDefault(__nccwpck_require__(3106));

// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

// fix for "Readable" isn't a named export issue
const Readable = Stream.Readable;

const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');

class Blob {
	constructor() {
		this[TYPE] = '';

		const blobParts = arguments[0];
		const options = arguments[1];

		const buffers = [];
		let size = 0;

		if (blobParts) {
			const a = blobParts;
			const length = Number(a.length);
			for (let i = 0; i < length; i++) {
				const element = a[i];
				let buffer;
				if (element instanceof Buffer) {
					buffer = element;
				} else if (ArrayBuffer.isView(element)) {
					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
				} else if (element instanceof ArrayBuffer) {
					buffer = Buffer.from(element);
				} else if (element instanceof Blob) {
					buffer = element[BUFFER];
				} else {
					buffer = Buffer.from(typeof element === 'string' ? element : String(element));
				}
				size += buffer.length;
				buffers.push(buffer);
			}
		}

		this[BUFFER] = Buffer.concat(buffers);

		let type = options && options.type !== undefined && String(options.type).toLowerCase();
		if (type && !/[^\u0020-\u007E]/.test(type)) {
			this[TYPE] = type;
		}
	}
	get size() {
		return this[BUFFER].length;
	}
	get type() {
		return this[TYPE];
	}
	text() {
		return Promise.resolve(this[BUFFER].toString());
	}
	arrayBuffer() {
		const buf = this[BUFFER];
		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		return Promise.resolve(ab);
	}
	stream() {
		const readable = new Readable();
		readable._read = function () {};
		readable.push(this[BUFFER]);
		readable.push(null);
		return readable;
	}
	toString() {
		return '[object Blob]';
	}
	slice() {
		const size = this.size;

		const start = arguments[0];
		const end = arguments[1];
		let relativeStart, relativeEnd;
		if (start === undefined) {
			relativeStart = 0;
		} else if (start < 0) {
			relativeStart = Math.max(size + start, 0);
		} else {
			relativeStart = Math.min(start, size);
		}
		if (end === undefined) {
			relativeEnd = size;
		} else if (end < 0) {
			relativeEnd = Math.max(size + end, 0);
		} else {
			relativeEnd = Math.min(end, size);
		}
		const span = Math.max(relativeEnd - relativeStart, 0);

		const buffer = this[BUFFER];
		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
		const blob = new Blob([], { type: arguments[2] });
		blob[BUFFER] = slicedBuffer;
		return blob;
	}
}

Object.defineProperties(Blob.prototype, {
	size: { enumerable: true },
	type: { enumerable: true },
	slice: { enumerable: true }
});

Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
	value: 'Blob',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */
function FetchError(message, type, systemError) {
  Error.call(this, message);

  this.message = message;
  this.type = type;

  // when err.type is `system`, err.code contains system error code
  if (systemError) {
    this.code = this.errno = systemError.code;
  }

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';

let convert;
try {
	convert = (__nccwpck_require__(9207).convert);
} catch (e) {}

const INTERNALS = Symbol('Body internals');

// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = Stream.PassThrough;

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
function Body(body) {
	var _this = this;

	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    _ref$size = _ref.size;

	let size = _ref$size === undefined ? 0 : _ref$size;
	var _ref$timeout = _ref.timeout;
	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

	if (body == null) {
		// body is undefined or null
		body = null;
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		body = Buffer.from(body.toString());
	} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		body = Buffer.from(body);
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
	} else if (body instanceof Stream) ; else {
		// none of the above
		// coerce to string then buffer
		body = Buffer.from(String(body));
	}
	this[INTERNALS] = {
		body,
		disturbed: false,
		error: null
	};
	this.size = size;
	this.timeout = timeout;

	if (body instanceof Stream) {
		body.on('error', function (err) {
			const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
			_this[INTERNALS].error = error;
		});
	}
}

Body.prototype = {
	get body() {
		return this[INTERNALS].body;
	},

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	},

	/**
  * Decode response as ArrayBuffer
  *
  * @return  Promise
  */
	arrayBuffer() {
		return consumeBody.call(this).then(function (buf) {
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		});
	},

	/**
  * Return raw response as Blob
  *
  * @return Promise
  */
	blob() {
		let ct = this.headers && this.headers.get('content-type') || '';
		return consumeBody.call(this).then(function (buf) {
			return Object.assign(
			// Prevent copying
			new Blob([], {
				type: ct.toLowerCase()
			}), {
				[BUFFER]: buf
			});
		});
	},

	/**
  * Decode response as json
  *
  * @return  Promise
  */
	json() {
		var _this2 = this;

		return consumeBody.call(this).then(function (buffer) {
			try {
				return JSON.parse(buffer.toString());
			} catch (err) {
				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
			}
		});
	},

	/**
  * Decode response as text
  *
  * @return  Promise
  */
	text() {
		return consumeBody.call(this).then(function (buffer) {
			return buffer.toString();
		});
	},

	/**
  * Decode response as buffer (non-spec api)
  *
  * @return  Promise
  */
	buffer() {
		return consumeBody.call(this);
	},

	/**
  * Decode response as text, while automatically detecting the encoding and
  * trying to decode to UTF-8 (non-spec api)
  *
  * @return  Promise
  */
	textConverted() {
		var _this3 = this;

		return consumeBody.call(this).then(function (buffer) {
			return convertBody(buffer, _this3.headers);
		});
	}
};

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: { enumerable: true },
	bodyUsed: { enumerable: true },
	arrayBuffer: { enumerable: true },
	blob: { enumerable: true },
	json: { enumerable: true },
	text: { enumerable: true }
});

Body.mixIn = function (proto) {
	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
		// istanbul ignore else: future proof
		if (!(name in proto)) {
			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
			Object.defineProperty(proto, name, desc);
		}
	}
};

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */
function consumeBody() {
	var _this4 = this;

	if (this[INTERNALS].disturbed) {
		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
	}

	this[INTERNALS].disturbed = true;

	if (this[INTERNALS].error) {
		return Body.Promise.reject(this[INTERNALS].error);
	}

	let body = this.body;

	// body is null
	if (body === null) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is blob
	if (isBlob(body)) {
		body = body.stream();
	}

	// body is buffer
	if (Buffer.isBuffer(body)) {
		return Body.Promise.resolve(body);
	}

	// istanbul ignore if: should never happen
	if (!(body instanceof Stream)) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is stream
	// get ready to actually consume the body
	let accum = [];
	let accumBytes = 0;
	let abort = false;

	return new Body.Promise(function (resolve, reject) {
		let resTimeout;

		// allow timeout on slow response body
		if (_this4.timeout) {
			resTimeout = setTimeout(function () {
				abort = true;
				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
			}, _this4.timeout);
		}

		// handle stream errors
		body.on('error', function (err) {
			if (err.name === 'AbortError') {
				// if the request was aborted, reject with this Error
				abort = true;
				reject(err);
			} else {
				// other errors, such as incorrect content-encoding
				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
			}
		});

		body.on('data', function (chunk) {
			if (abort || chunk === null) {
				return;
			}

			if (_this4.size && accumBytes + chunk.length > _this4.size) {
				abort = true;
				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
				return;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		});

		body.on('end', function () {
			if (abort) {
				return;
			}

			clearTimeout(resTimeout);

			try {
				resolve(Buffer.concat(accum, accumBytes));
			} catch (err) {
				// handle streams that have accumulated too much data (issue #414)
				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
			}
		});
	});
}

/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */
function convertBody(buffer, headers) {
	if (typeof convert !== 'function') {
		throw new Error('The package `encoding` must be installed to use the textConverted() function');
	}

	const ct = headers.get('content-type');
	let charset = 'utf-8';
	let res, str;

	// header
	if (ct) {
		res = /charset=([^;]*)/i.exec(ct);
	}

	// no charset in content type, peek at response body for at most 1024 bytes
	str = buffer.slice(0, 1024).toString();

	// html5
	if (!res && str) {
		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
	}

	// html4
	if (!res && str) {
		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
		if (!res) {
			res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
			if (res) {
				res.pop(); // drop last quote
			}
		}

		if (res) {
			res = /charset=(.*)/i.exec(res.pop());
		}
	}

	// xml
	if (!res && str) {
		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
	}

	// found charset
	if (res) {
		charset = res.pop();

		// prevent decode issues when sites use incorrect encoding
		// ref: https://hsivonen.fi/encoding-menu/
		if (charset === 'gb2312' || charset === 'gbk') {
			charset = 'gb18030';
		}
	}

	// turn raw buffers into a single utf-8 buffer
	return convert(buffer, 'UTF-8', charset).toString();
}

/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */
function isURLSearchParams(obj) {
	// Duck-typing as a necessary condition.
	if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
		return false;
	}

	// Brand-checking and more duck-typing as optional condition.
	return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}

/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */
function isBlob(obj) {
	return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */
function clone(instance) {
	let p1, p2;
	let body = instance.body;

	// don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if (body instanceof Stream && typeof body.getBoundary !== 'function') {
		// tee instance body
		p1 = new PassThrough();
		p2 = new PassThrough();
		body.pipe(p1);
		body.pipe(p2);
		// set instance body to teed body and return the other teed body
		instance[INTERNALS].body = p1;
		body = p2;
	}

	return body;
}

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */
function extractContentType(body) {
	if (body === null) {
		// body is null
		return null;
	} else if (typeof body === 'string') {
		// body is string
		return 'text/plain;charset=UTF-8';
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	} else if (isBlob(body)) {
		// body is blob
		return body.type || null;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return null;
	} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		return null;
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		return null;
	} else if (typeof body.getBoundary === 'function') {
		// detect form data input from form-data module
		return `multipart/form-data;boundary=${body.getBoundary()}`;
	} else if (body instanceof Stream) {
		// body is stream
		// can't really do much about this
		return null;
	} else {
		// Body constructor defaults other things to string
		return 'text/plain;charset=UTF-8';
	}
}

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */
function getTotalBytes(instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		return 0;
	} else if (isBlob(body)) {
		return body.size;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return body.length;
	} else if (body && typeof body.getLengthSync === 'function') {
		// detect form data input from form-data module
		if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
		body.hasKnownLength && body.hasKnownLength()) {
			// 2.x
			return body.getLengthSync();
		}
		return null;
	} else {
		// body is stream
		return null;
	}
}

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */
function writeToStream(dest, instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		dest.end();
	} else if (isBlob(body)) {
		body.stream().pipe(dest);
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		dest.write(body);
		dest.end();
	} else {
		// body is stream
		body.pipe(dest);
	}
}

// expose Promise
Body.Promise = global.Promise;

/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
	name = `${name}`;
	if (invalidTokenRegex.test(name) || name === '') {
		throw new TypeError(`${name} is not a legal HTTP header name`);
	}
}

function validateValue(value) {
	value = `${value}`;
	if (invalidHeaderCharRegex.test(value)) {
		throw new TypeError(`${value} is not a legal HTTP header value`);
	}
}

/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */
function find(map, name) {
	name = name.toLowerCase();
	for (const key in map) {
		if (key.toLowerCase() === name) {
			return key;
		}
	}
	return undefined;
}

const MAP = Symbol('map');
class Headers {
	/**
  * Headers class
  *
  * @param   Object  headers  Response headers
  * @return  Void
  */
	constructor() {
		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

		this[MAP] = Object.create(null);

		if (init instanceof Headers) {
			const rawHeaders = init.raw();
			const headerNames = Object.keys(rawHeaders);

			for (const headerName of headerNames) {
				for (const value of rawHeaders[headerName]) {
					this.append(headerName, value);
				}
			}

			return;
		}

		// We don't worry about converting prop to ByteString here as append()
		// will handle it.
		if (init == null) ; else if (typeof init === 'object') {
			const method = init[Symbol.iterator];
			if (method != null) {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				const pairs = [];
				for (const pair of init) {
					if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
						throw new TypeError('Each header pair must be iterable');
					}
					pairs.push(Array.from(pair));
				}

				for (const pair of pairs) {
					if (pair.length !== 2) {
						throw new TypeError('Each header pair must be a name/value tuple');
					}
					this.append(pair[0], pair[1]);
				}
			} else {
				// record<ByteString, ByteString>
				for (const key of Object.keys(init)) {
					const value = init[key];
					this.append(key, value);
				}
			}
		} else {
			throw new TypeError('Provided initializer must be an object');
		}
	}

	/**
  * Return combined header value given name
  *
  * @param   String  name  Header name
  * @return  Mixed
  */
	get(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key === undefined) {
			return null;
		}

		return this[MAP][key].join(', ');
	}

	/**
  * Iterate over all headers
  *
  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
  * @param   Boolean   thisArg   `this` context for callback function
  * @return  Void
  */
	forEach(callback) {
		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		let pairs = getHeaders(this);
		let i = 0;
		while (i < pairs.length) {
			var _pairs$i = pairs[i];
			const name = _pairs$i[0],
			      value = _pairs$i[1];

			callback.call(thisArg, value, name, this);
			pairs = getHeaders(this);
			i++;
		}
	}

	/**
  * Overwrite header values given name
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	set(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		this[MAP][key !== undefined ? key : name] = [value];
	}

	/**
  * Append a value onto existing header
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	append(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			this[MAP][key].push(value);
		} else {
			this[MAP][name] = [value];
		}
	}

	/**
  * Check for header name existence
  *
  * @param   String   name  Header name
  * @return  Boolean
  */
	has(name) {
		name = `${name}`;
		validateName(name);
		return find(this[MAP], name) !== undefined;
	}

	/**
  * Delete all header values given name
  *
  * @param   String  name  Header name
  * @return  Void
  */
	delete(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			delete this[MAP][key];
		}
	}

	/**
  * Return raw headers (non-spec api)
  *
  * @return  Object
  */
	raw() {
		return this[MAP];
	}

	/**
  * Get an iterator on keys.
  *
  * @return  Iterator
  */
	keys() {
		return createHeadersIterator(this, 'key');
	}

	/**
  * Get an iterator on values.
  *
  * @return  Iterator
  */
	values() {
		return createHeadersIterator(this, 'value');
	}

	/**
  * Get an iterator on entries.
  *
  * This is the default iterator of the Headers object.
  *
  * @return  Iterator
  */
	[Symbol.iterator]() {
		return createHeadersIterator(this, 'key+value');
	}
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];

Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
	value: 'Headers',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Headers.prototype, {
	get: { enumerable: true },
	forEach: { enumerable: true },
	set: { enumerable: true },
	append: { enumerable: true },
	has: { enumerable: true },
	delete: { enumerable: true },
	keys: { enumerable: true },
	values: { enumerable: true },
	entries: { enumerable: true }
});

function getHeaders(headers) {
	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

	const keys = Object.keys(headers[MAP]).sort();
	return keys.map(kind === 'key' ? function (k) {
		return k.toLowerCase();
	} : kind === 'value' ? function (k) {
		return headers[MAP][k].join(', ');
	} : function (k) {
		return [k.toLowerCase(), headers[MAP][k].join(', ')];
	});
}

const INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
	const iterator = Object.create(HeadersIteratorPrototype);
	iterator[INTERNAL] = {
		target,
		kind,
		index: 0
	};
	return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf({
	next() {
		// istanbul ignore if
		if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
			throw new TypeError('Value of `this` is not a HeadersIterator');
		}

		var _INTERNAL = this[INTERNAL];
		const target = _INTERNAL.target,
		      kind = _INTERNAL.kind,
		      index = _INTERNAL.index;

		const values = getHeaders(target, kind);
		const len = values.length;
		if (index >= len) {
			return {
				value: undefined,
				done: true
			};
		}

		this[INTERNAL].index = index + 1;

		return {
			value: values[index],
			done: false
		};
	}
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
	value: 'HeadersIterator',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */
function exportNodeCompatibleHeaders(headers) {
	const obj = Object.assign({ __proto__: null }, headers[MAP]);

	// http.request() only supports string as Host header. This hack makes
	// specifying custom Host header possible.
	const hostHeaderKey = find(headers[MAP], 'Host');
	if (hostHeaderKey !== undefined) {
		obj[hostHeaderKey] = obj[hostHeaderKey][0];
	}

	return obj;
}

/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */
function createHeadersLenient(obj) {
	const headers = new Headers();
	for (const name of Object.keys(obj)) {
		if (invalidTokenRegex.test(name)) {
			continue;
		}
		if (Array.isArray(obj[name])) {
			for (const val of obj[name]) {
				if (invalidHeaderCharRegex.test(val)) {
					continue;
				}
				if (headers[MAP][name] === undefined) {
					headers[MAP][name] = [val];
				} else {
					headers[MAP][name].push(val);
				}
			}
		} else if (!invalidHeaderCharRegex.test(obj[name])) {
			headers[MAP][name] = [obj[name]];
		}
	}
	return headers;
}

const INTERNALS$1 = Symbol('Response internals');

// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES = http.STATUS_CODES;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response {
	constructor() {
		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		Body.call(this, body, opts);

		const status = opts.status || 200;
		const headers = new Headers(opts.headers);

		if (body != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[INTERNALS$1] = {
			url: opts.url,
			status,
			statusText: opts.statusText || STATUS_CODES[status],
			headers,
			counter: opts.counter
		};
	}

	get url() {
		return this[INTERNALS$1].url || '';
	}

	get status() {
		return this[INTERNALS$1].status;
	}

	/**
  * Convenience property representing if the request ended normally
  */
	get ok() {
		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
	}

	get redirected() {
		return this[INTERNALS$1].counter > 0;
	}

	get statusText() {
		return this[INTERNALS$1].statusText;
	}

	get headers() {
		return this[INTERNALS$1].headers;
	}

	/**
  * Clone this response
  *
  * @return  Response
  */
	clone() {
		return new Response(clone(this), {
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected
		});
	}
}

Body.mixIn(Response.prototype);

Object.defineProperties(Response.prototype, {
	url: { enumerable: true },
	status: { enumerable: true },
	ok: { enumerable: true },
	redirected: { enumerable: true },
	statusText: { enumerable: true },
	headers: { enumerable: true },
	clone: { enumerable: true }
});

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
	value: 'Response',
	writable: false,
	enumerable: false,
	configurable: true
});

const INTERNALS$2 = Symbol('Request internals');
const URL = Url.URL || whatwgUrl.URL;

// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = Url.parse;
const format_url = Url.format;

/**
 * Wrapper around `new URL` to handle arbitrary URLs
 *
 * @param  {string} urlStr
 * @return {void}
 */
function parseURL(urlStr) {
	/*
 	Check whether the URL is absolute or not
 		Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
 	Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
 */
	if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
		urlStr = new URL(urlStr).toString();
	}

	// Fallback to old implementation for arbitrary URLs
	return parse_url(urlStr);
}

const streamDestructionSupported = 'destroy' in Stream.Readable.prototype;

/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */
function isRequest(input) {
	return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
	const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
	return !!(proto && proto.constructor.name === 'AbortSignal');
}

/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request {
	constructor(input) {
		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		let parsedURL;

		// normalize input
		if (!isRequest(input)) {
			if (input && input.href) {
				// in order to support Node.js' Url objects; though WHATWG's URL objects
				// will fall into this branch also (since their `toString()` will return
				// `href` property anyway)
				parsedURL = parseURL(input.href);
			} else {
				// coerce input to a string before attempting to parse
				parsedURL = parseURL(`${input}`);
			}
			input = {};
		} else {
			parsedURL = parseURL(input.url);
		}

		let method = init.method || input.method || 'GET';
		method = method.toUpperCase();

		if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

		Body.call(this, inputBody, {
			timeout: init.timeout || input.timeout || 0,
			size: init.size || input.size || 0
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		let signal = isRequest(input) ? input.signal : null;
		if ('signal' in init) signal = init.signal;

		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal');
		}

		this[INTERNALS$2] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal
		};

		// node-fetch-only options
		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
	}

	get method() {
		return this[INTERNALS$2].method;
	}

	get url() {
		return format_url(this[INTERNALS$2].parsedURL);
	}

	get headers() {
		return this[INTERNALS$2].headers;
	}

	get redirect() {
		return this[INTERNALS$2].redirect;
	}

	get signal() {
		return this[INTERNALS$2].signal;
	}

	/**
  * Clone this request
  *
  * @return  Request
  */
	clone() {
		return new Request(this);
	}
}

Body.mixIn(Request.prototype);

Object.defineProperty(Request.prototype, Symbol.toStringTag, {
	value: 'Request',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Request.prototype, {
	method: { enumerable: true },
	url: { enumerable: true },
	headers: { enumerable: true },
	redirect: { enumerable: true },
	clone: { enumerable: true },
	signal: { enumerable: true }
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */
function getNodeRequestOptions(request) {
	const parsedURL = request[INTERNALS$2].parsedURL;
	const headers = new Headers(request[INTERNALS$2].headers);

	// fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// Basic fetch
	if (!parsedURL.protocol || !parsedURL.hostname) {
		throw new TypeError('Only absolute URLs are supported');
	}

	if (!/^https?:$/.test(parsedURL.protocol)) {
		throw new TypeError('Only HTTP(S) protocols are supported');
	}

	if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
		throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
		contentLengthValue = '0';
	}
	if (request.body != null) {
		const totalBytes = getTotalBytes(request);
		if (typeof totalBytes === 'number') {
			contentLengthValue = String(totalBytes);
		}
	}
	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip,deflate');
	}

	let agent = request.agent;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	return Object.assign({}, parsedURL, {
		method: request.method,
		headers: exportNodeCompatibleHeaders(headers),
		agent
	});
}

/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */
function AbortError(message) {
  Error.call(this, message);

  this.type = 'aborted';
  this.message = message;

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';

const URL$1 = Url.URL || whatwgUrl.URL;

// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = Stream.PassThrough;

const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {
	const orig = new URL$1(original).hostname;
	const dest = new URL$1(destination).hostname;

	return orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);
};

/**
 * isSameProtocol reports whether the two provided URLs use the same protocol.
 *
 * Both domains must already be in canonical form.
 * @param {string|URL} original
 * @param {string|URL} destination
 */
const isSameProtocol = function isSameProtocol(destination, original) {
	const orig = new URL$1(original).protocol;
	const dest = new URL$1(destination).protocol;

	return orig === dest;
};

/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */
function fetch(url, opts) {

	// allow custom promise
	if (!fetch.Promise) {
		throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
	}

	Body.Promise = fetch.Promise;

	// wrap http.request into fetch
	return new fetch.Promise(function (resolve, reject) {
		// build request object
		const request = new Request(url, opts);
		const options = getNodeRequestOptions(request);

		const send = (options.protocol === 'https:' ? https : http).request;
		const signal = request.signal;

		let response = null;

		const abort = function abort() {
			let error = new AbortError('The user aborted a request.');
			reject(error);
			if (request.body && request.body instanceof Stream.Readable) {
				destroyStream(request.body, error);
			}
			if (!response || !response.body) return;
			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = function abortAndFinalize() {
			abort();
			finalize();
		};

		// send request
		const req = send(options);
		let reqTimeout;

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		function finalize() {
			req.abort();
			if (signal) signal.removeEventListener('abort', abortAndFinalize);
			clearTimeout(reqTimeout);
		}

		if (request.timeout) {
			req.once('socket', function (socket) {
				reqTimeout = setTimeout(function () {
					reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
					finalize();
				}, request.timeout);
			});
		}

		req.on('error', function (err) {
			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));

			if (response && response.body) {
				destroyStream(response.body, err);
			}

			finalize();
		});

		fixResponseChunkedTransferBadEnding(req, function (err) {
			if (signal && signal.aborted) {
				return;
			}

			if (response && response.body) {
				destroyStream(response.body, err);
			}
		});

		/* c8 ignore next 18 */
		if (parseInt(process.version.substring(1)) < 14) {
			// Before Node.js 14, pipeline() does not fully support async iterators and does not always
			// properly handle when the socket close/end events are out of order.
			req.on('socket', function (s) {
				s.addListener('close', function (hadError) {
					// if a data listener is still present we didn't end cleanly
					const hasDataListener = s.listenerCount('data') > 0;

					// if end happened before close but the socket didn't emit an error, do it now
					if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
						const err = new Error('Premature close');
						err.code = 'ERR_STREAM_PREMATURE_CLOSE';
						response.body.emit('error', err);
					}
				});
			});
		}

		req.on('response', function (res) {
			clearTimeout(reqTimeout);

			const headers = createHeadersLenient(res.headers);

			// HTTP fetch step 5
			if (fetch.isRedirect(res.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				let locationURL = null;
				try {
					locationURL = location === null ? null : new URL$1(location, request.url).toString();
				} catch (err) {
					// error here can only be invalid URL in Location: header
					// do not throw when options.redirect == manual
					// let the user extract the errorneous redirect URL
					if (request.redirect !== 'manual') {
						reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));
						finalize();
						return;
					}
				}

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
						if (locationURL !== null) {
							// handle corrupted header
							try {
								headers.set('Location', locationURL);
							} catch (err) {
								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
								reject(err);
							}
						}
						break;
					case 'follow':
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOpts = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: request.body,
							signal: request.signal,
							timeout: request.timeout,
							size: request.size
						};

						if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
							for (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {
								requestOpts.headers.delete(name);
							}
						}

						// HTTP-redirect fetch step 9
						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
							requestOpts.method = 'GET';
							requestOpts.body = undefined;
							requestOpts.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 15
						resolve(fetch(new Request(locationURL, requestOpts)));
						finalize();
						return;
				}
			}

			// prepare response
			res.once('end', function () {
				if (signal) signal.removeEventListener('abort', abortAndFinalize);
			});
			let body = res.pipe(new PassThrough$1());

			const response_options = {
				url: request.url,
				status: res.statusCode,
				statusText: res.statusMessage,
				headers: headers,
				size: request.size,
				timeout: request.timeout,
				counter: request.counter
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: zlib.Z_SYNC_FLUSH,
				finishFlush: zlib.Z_SYNC_FLUSH
			};

			// for gzip
			if (codings == 'gzip' || codings == 'x-gzip') {
				body = body.pipe(zlib.createGunzip(zlibOptions));
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// for deflate
			if (codings == 'deflate' || codings == 'x-deflate') {
				// handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = res.pipe(new PassThrough$1());
				raw.once('data', function (chunk) {
					// see http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = body.pipe(zlib.createInflate());
					} else {
						body = body.pipe(zlib.createInflateRaw());
					}
					response = new Response(body, response_options);
					resolve(response);
				});
				raw.on('end', function () {
					// some old IIS servers return zero-length OK deflate responses, so 'data' is never emitted.
					if (!response) {
						response = new Response(body, response_options);
						resolve(response);
					}
				});
				return;
			}

			// for br
			if (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {
				body = body.pipe(zlib.createBrotliDecompress());
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// otherwise, use response as-is
			response = new Response(body, response_options);
			resolve(response);
		});

		writeToStream(req, request);
	});
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
	let socket;

	request.on('socket', function (s) {
		socket = s;
	});

	request.on('response', function (response) {
		const headers = response.headers;

		if (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {
			response.once('close', function (hadError) {
				// tests for socket presence, as in some situations the
				// the 'socket' event is not triggered for the request
				// (happens in deno), avoids `TypeError`
				// if a data listener is still present we didn't end cleanly
				const hasDataListener = socket && socket.listenerCount('data') > 0;

				if (hasDataListener && !hadError) {
					const err = new Error('Premature close');
					err.code = 'ERR_STREAM_PREMATURE_CLOSE';
					errorCallback(err);
				}
			});
		}
	});
}

function destroyStream(stream, err) {
	if (stream.destroy) {
		stream.destroy(err);
	} else {
		// node < 8
		stream.emit('error', err);
		stream.end();
	}
}

/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */
fetch.isRedirect = function (code) {
	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

// expose Promise
fetch.Promise = global.Promise;

module.exports = exports = fetch;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports["default"] = exports;
exports.Headers = Headers;
exports.Request = Request;
exports.Response = Response;
exports.FetchError = FetchError;
exports.AbortError = AbortError;


/***/ }),

/***/ 2367:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

var wrappy = __nccwpck_require__(5659)
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}


/***/ }),

/***/ 5121:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


var punycode = __nccwpck_require__(4876);
var mappingTable = __nccwpck_require__(2472);

var PROCESSING_OPTIONS = {
  TRANSITIONAL: 0,
  NONTRANSITIONAL: 1
};

function normalize(str) { // fix bug in v8
  return str.split('\u0000').map(function (s) { return s.normalize('NFC'); }).join('\u0000');
}

function findStatus(val) {
  var start = 0;
  var end = mappingTable.length - 1;

  while (start <= end) {
    var mid = Math.floor((start + end) / 2);

    var target = mappingTable[mid];
    if (target[0][0] <= val && target[0][1] >= val) {
      return target;
    } else if (target[0][0] > val) {
      end = mid - 1;
    } else {
      start = mid + 1;
    }
  }

  return null;
}

var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function countSymbols(string) {
  return string
    // replace every surrogate pair with a BMP symbol
    .replace(regexAstralSymbols, '_')
    // then get the length
    .length;
}

function mapChars(domain_name, useSTD3, processing_option) {
  var hasError = false;
  var processed = "";

  var len = countSymbols(domain_name);
  for (var i = 0; i < len; ++i) {
    var codePoint = domain_name.codePointAt(i);
    var status = findStatus(codePoint);

    switch (status[1]) {
      case "disallowed":
        hasError = true;
        processed += String.fromCodePoint(codePoint);
        break;
      case "ignored":
        break;
      case "mapped":
        processed += String.fromCodePoint.apply(String, status[2]);
        break;
      case "deviation":
        if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
          processed += String.fromCodePoint.apply(String, status[2]);
        } else {
          processed += String.fromCodePoint(codePoint);
        }
        break;
      case "valid":
        processed += String.fromCodePoint(codePoint);
        break;
      case "disallowed_STD3_mapped":
        if (useSTD3) {
          hasError = true;
          processed += String.fromCodePoint(codePoint);
        } else {
          processed += String.fromCodePoint.apply(String, status[2]);
        }
        break;
      case "disallowed_STD3_valid":
        if (useSTD3) {
          hasError = true;
        }

        processed += String.fromCodePoint(codePoint);
        break;
    }
  }

  return {
    string: processed,
    error: hasError
  };
}

var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;

function validateLabel(label, processing_option) {
  if (label.substr(0, 4) === "xn--") {
    label = punycode.toUnicode(label);
    processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
  }

  var error = false;

  if (normalize(label) !== label ||
      (label[3] === "-" && label[4] === "-") ||
      label[0] === "-" || label[label.length - 1] === "-" ||
      label.indexOf(".") !== -1 ||
      label.search(combiningMarksRegex) === 0) {
    error = true;
  }

  var len = countSymbols(label);
  for (var i = 0; i < len; ++i) {
    var status = findStatus(label.codePointAt(i));
    if ((processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid") ||
        (processing === PROCESSING_OPTIONS.NONTRANSITIONAL &&
         status[1] !== "valid" && status[1] !== "deviation")) {
      error = true;
      break;
    }
  }

  return {
    label: label,
    error: error
  };
}

function processing(domain_name, useSTD3, processing_option) {
  var result = mapChars(domain_name, useSTD3, processing_option);
  result.string = normalize(result.string);

  var labels = result.string.split(".");
  for (var i = 0; i < labels.length; ++i) {
    try {
      var validation = validateLabel(labels[i]);
      labels[i] = validation.label;
      result.error = result.error || validation.error;
    } catch(e) {
      result.error = true;
    }
  }

  return {
    string: labels.join("."),
    error: result.error
  };
}

module.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
  var result = processing(domain_name, useSTD3, processing_option);
  var labels = result.string.split(".");
  labels = labels.map(function(l) {
    try {
      return punycode.toASCII(l);
    } catch(e) {
      result.error = true;
      return l;
    }
  });

  if (verifyDnsLength) {
    var total = labels.slice(0, labels.length - 1).join(".").length;
    if (total.length > 253 || total.length === 0) {
      result.error = true;
    }

    for (var i=0; i < labels.length; ++i) {
      if (labels.length > 63 || labels.length === 0) {
        result.error = true;
        break;
      }
    }
  }

  if (result.error) return null;
  return labels.join(".");
};

module.exports.toUnicode = function(domain_name, useSTD3) {
  var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);

  return {
    domain: result.string,
    error: result.error
  };
};

module.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;


/***/ }),

/***/ 6259:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(8653);


/***/ }),

/***/ 8653:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


var net = __nccwpck_require__(9278);
var tls = __nccwpck_require__(4756);
var http = __nccwpck_require__(8611);
var https = __nccwpck_require__(5692);
var events = __nccwpck_require__(4434);
var assert = __nccwpck_require__(2613);
var util = __nccwpck_require__(9023);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 1861:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Client = __nccwpck_require__(3894)
const Dispatcher = __nccwpck_require__(700)
const errors = __nccwpck_require__(5606)
const Pool = __nccwpck_require__(27)
const BalancedPool = __nccwpck_require__(6288)
const Agent = __nccwpck_require__(8256)
const util = __nccwpck_require__(7001)
const { InvalidArgumentError } = errors
const api = __nccwpck_require__(5526)
const buildConnector = __nccwpck_require__(863)
const MockClient = __nccwpck_require__(4866)
const MockAgent = __nccwpck_require__(7140)
const MockPool = __nccwpck_require__(5487)
const mockErrors = __nccwpck_require__(5198)
const ProxyAgent = __nccwpck_require__(7025)
const RetryHandler = __nccwpck_require__(1294)
const { getGlobalDispatcher, setGlobalDispatcher } = __nccwpck_require__(6762)
const DecoratorHandler = __nccwpck_require__(2015)
const RedirectHandler = __nccwpck_require__(5726)
const createRedirectInterceptor = __nccwpck_require__(9010)

let hasCrypto
try {
  __nccwpck_require__(6982)
  hasCrypto = true
} catch {
  hasCrypto = false
}

Object.assign(Dispatcher.prototype, api)

module.exports.Dispatcher = Dispatcher
module.exports.Client = Client
module.exports.Pool = Pool
module.exports.BalancedPool = BalancedPool
module.exports.Agent = Agent
module.exports.ProxyAgent = ProxyAgent
module.exports.RetryHandler = RetryHandler

module.exports.DecoratorHandler = DecoratorHandler
module.exports.RedirectHandler = RedirectHandler
module.exports.createRedirectInterceptor = createRedirectInterceptor

module.exports.buildConnector = buildConnector
module.exports.errors = errors

function makeDispatcher (fn) {
  return (url, opts, handler) => {
    if (typeof opts === 'function') {
      handler = opts
      opts = null
    }

    if (!url || (typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL))) {
      throw new InvalidArgumentError('invalid url')
    }

    if (opts != null && typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (opts && opts.path != null) {
      if (typeof opts.path !== 'string') {
        throw new InvalidArgumentError('invalid opts.path')
      }

      let path = opts.path
      if (!opts.path.startsWith('/')) {
        path = `/${path}`
      }

      url = new URL(util.parseOrigin(url).origin + path)
    } else {
      if (!opts) {
        opts = typeof url === 'object' ? url : {}
      }

      url = util.parseURL(url)
    }

    const { agent, dispatcher = getGlobalDispatcher() } = opts

    if (agent) {
      throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?')
    }

    return fn.call(dispatcher, {
      ...opts,
      origin: url.origin,
      path: url.search ? `${url.pathname}${url.search}` : url.pathname,
      method: opts.method || (opts.body ? 'PUT' : 'GET')
    }, handler)
  }
}

module.exports.setGlobalDispatcher = setGlobalDispatcher
module.exports.getGlobalDispatcher = getGlobalDispatcher

if (util.nodeMajor > 16 || (util.nodeMajor === 16 && util.nodeMinor >= 8)) {
  let fetchImpl = null
  module.exports.fetch = async function fetch (resource) {
    if (!fetchImpl) {
      fetchImpl = (__nccwpck_require__(22).fetch)
    }

    try {
      return await fetchImpl(...arguments)
    } catch (err) {
      if (typeof err === 'object') {
        Error.captureStackTrace(err, this)
      }

      throw err
    }
  }
  module.exports.Headers = __nccwpck_require__(6396).Headers
  module.exports.Response = __nccwpck_require__(5891).Response
  module.exports.Request = __nccwpck_require__(7591).Request
  module.exports.FormData = __nccwpck_require__(6334).FormData
  module.exports.File = __nccwpck_require__(6002).File
  module.exports.FileReader = __nccwpck_require__(6859).FileReader

  const { setGlobalOrigin, getGlobalOrigin } = __nccwpck_require__(1339)

  module.exports.setGlobalOrigin = setGlobalOrigin
  module.exports.getGlobalOrigin = getGlobalOrigin

  const { CacheStorage } = __nccwpck_require__(1909)
  const { kConstruct } = __nccwpck_require__(9237)

  // Cache & CacheStorage are tightly coupled with fetch. Even if it may run
  // in an older version of Node, it doesn't have any use without fetch.
  module.exports.caches = new CacheStorage(kConstruct)
}

if (util.nodeMajor >= 16) {
  const { deleteCookie, getCookies, getSetCookies, setCookie } = __nccwpck_require__(2125)

  module.exports.deleteCookie = deleteCookie
  module.exports.getCookies = getCookies
  module.exports.getSetCookies = getSetCookies
  module.exports.setCookie = setCookie

  const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(6615)

  module.exports.parseMIMEType = parseMIMEType
  module.exports.serializeAMimeType = serializeAMimeType
}

if (util.nodeMajor >= 18 && hasCrypto) {
  const { WebSocket } = __nccwpck_require__(5974)

  module.exports.WebSocket = WebSocket
}

module.exports.request = makeDispatcher(api.request)
module.exports.stream = makeDispatcher(api.stream)
module.exports.pipeline = makeDispatcher(api.pipeline)
module.exports.connect = makeDispatcher(api.connect)
module.exports.upgrade = makeDispatcher(api.upgrade)

module.exports.MockClient = MockClient
module.exports.MockPool = MockPool
module.exports.MockAgent = MockAgent
module.exports.mockErrors = mockErrors


/***/ }),

/***/ 8256:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { InvalidArgumentError } = __nccwpck_require__(5606)
const { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = __nccwpck_require__(8136)
const DispatcherBase = __nccwpck_require__(4219)
const Pool = __nccwpck_require__(27)
const Client = __nccwpck_require__(3894)
const util = __nccwpck_require__(7001)
const createRedirectInterceptor = __nccwpck_require__(9010)
const { WeakRef, FinalizationRegistry } = __nccwpck_require__(6131)()

const kOnConnect = Symbol('onConnect')
const kOnDisconnect = Symbol('onDisconnect')
const kOnConnectionError = Symbol('onConnectionError')
const kMaxRedirections = Symbol('maxRedirections')
const kOnDrain = Symbol('onDrain')
const kFactory = Symbol('factory')
const kFinalizer = Symbol('finalizer')
const kOptions = Symbol('options')

function defaultFactory (origin, opts) {
  return opts && opts.connections === 1
    ? new Client(origin, opts)
    : new Pool(origin, opts)
}

class Agent extends DispatcherBase {
  constructor ({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
    super()

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    if (connect && typeof connect !== 'function') {
      connect = { ...connect }
    }

    this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent)
      ? options.interceptors.Agent
      : [createRedirectInterceptor({ maxRedirections })]

    this[kOptions] = { ...util.deepClone(options), connect }
    this[kOptions].interceptors = options.interceptors
      ? { ...options.interceptors }
      : undefined
    this[kMaxRedirections] = maxRedirections
    this[kFactory] = factory
    this[kClients] = new Map()
    this[kFinalizer] = new FinalizationRegistry(/* istanbul ignore next: gc is undeterministic */ key => {
      const ref = this[kClients].get(key)
      if (ref !== undefined && ref.deref() === undefined) {
        this[kClients].delete(key)
      }
    })

    const agent = this

    this[kOnDrain] = (origin, targets) => {
      agent.emit('drain', origin, [agent, ...targets])
    }

    this[kOnConnect] = (origin, targets) => {
      agent.emit('connect', origin, [agent, ...targets])
    }

    this[kOnDisconnect] = (origin, targets, err) => {
      agent.emit('disconnect', origin, [agent, ...targets], err)
    }

    this[kOnConnectionError] = (origin, targets, err) => {
      agent.emit('connectionError', origin, [agent, ...targets], err)
    }
  }

  get [kRunning] () {
    let ret = 0
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore next: gc is undeterministic */
      if (client) {
        ret += client[kRunning]
      }
    }
    return ret
  }

  [kDispatch] (opts, handler) {
    let key
    if (opts.origin && (typeof opts.origin === 'string' || opts.origin instanceof URL)) {
      key = String(opts.origin)
    } else {
      throw new InvalidArgumentError('opts.origin must be a non-empty string or URL.')
    }

    const ref = this[kClients].get(key)

    let dispatcher = ref ? ref.deref() : null
    if (!dispatcher) {
      dispatcher = this[kFactory](opts.origin, this[kOptions])
        .on('drain', this[kOnDrain])
        .on('connect', this[kOnConnect])
        .on('disconnect', this[kOnDisconnect])
        .on('connectionError', this[kOnConnectionError])

      this[kClients].set(key, new WeakRef(dispatcher))
      this[kFinalizer].register(dispatcher, key)
    }

    return dispatcher.dispatch(opts, handler)
  }

  async [kClose] () {
    const closePromises = []
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore else: gc is undeterministic */
      if (client) {
        closePromises.push(client.close())
      }
    }

    await Promise.all(closePromises)
  }

  async [kDestroy] (err) {
    const destroyPromises = []
    for (const ref of this[kClients].values()) {
      const client = ref.deref()
      /* istanbul ignore else: gc is undeterministic */
      if (client) {
        destroyPromises.push(client.destroy(err))
      }
    }

    await Promise.all(destroyPromises)
  }
}

module.exports = Agent


/***/ }),

/***/ 2685:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { addAbortListener } = __nccwpck_require__(7001)
const { RequestAbortedError } = __nccwpck_require__(5606)

const kListener = Symbol('kListener')
const kSignal = Symbol('kSignal')

function abort (self) {
  if (self.abort) {
    self.abort()
  } else {
    self.onError(new RequestAbortedError())
  }
}

function addSignal (self, signal) {
  self[kSignal] = null
  self[kListener] = null

  if (!signal) {
    return
  }

  if (signal.aborted) {
    abort(self)
    return
  }

  self[kSignal] = signal
  self[kListener] = () => {
    abort(self)
  }

  addAbortListener(self[kSignal], self[kListener])
}

function removeSignal (self) {
  if (!self[kSignal]) {
    return
  }

  if ('removeEventListener' in self[kSignal]) {
    self[kSignal].removeEventListener('abort', self[kListener])
  } else {
    self[kSignal].removeListener('abort', self[kListener])
  }

  self[kSignal] = null
  self[kListener] = null
}

module.exports = {
  addSignal,
  removeSignal
}


/***/ }),

/***/ 4833:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { AsyncResource } = __nccwpck_require__(290)
const { InvalidArgumentError, RequestAbortedError, SocketError } = __nccwpck_require__(5606)
const util = __nccwpck_require__(7001)
const { addSignal, removeSignal } = __nccwpck_require__(2685)

class ConnectHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    const { signal, opaque, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    super('UNDICI_CONNECT')

    this.opaque = opaque || null
    this.responseHeaders = responseHeaders || null
    this.callback = callback
    this.abort = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders () {
    throw new SocketError('bad connect', null)
  }

  onUpgrade (statusCode, rawHeaders, socket) {
    const { callback, opaque, context } = this

    removeSignal(this)

    this.callback = null

    let headers = rawHeaders
    // Indicates is an HTTP2Session
    if (headers != null) {
      headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
    }

    this.runInAsyncScope(callback, null, null, {
      statusCode,
      headers,
      socket,
      opaque,
      context
    })
  }

  onError (err) {
    const { callback, opaque } = this

    removeSignal(this)

    if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }
  }
}

function connect (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      connect.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    const connectHandler = new ConnectHandler(opts, callback)
    this.dispatch({ ...opts, method: 'CONNECT' }, connectHandler)
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = connect


/***/ }),

/***/ 89:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  Readable,
  Duplex,
  PassThrough
} = __nccwpck_require__(2203)
const {
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError
} = __nccwpck_require__(5606)
const util = __nccwpck_require__(7001)
const { AsyncResource } = __nccwpck_require__(290)
const { addSignal, removeSignal } = __nccwpck_require__(2685)
const assert = __nccwpck_require__(2613)

const kResume = Symbol('resume')

class PipelineRequest extends Readable {
  constructor () {
    super({ autoDestroy: true })

    this[kResume] = null
  }

  _read () {
    const { [kResume]: resume } = this

    if (resume) {
      this[kResume] = null
      resume()
    }
  }

  _destroy (err, callback) {
    this._read()

    callback(err)
  }
}

class PipelineResponse extends Readable {
  constructor (resume) {
    super({ autoDestroy: true })
    this[kResume] = resume
  }

  _read () {
    this[kResume]()
  }

  _destroy (err, callback) {
    if (!err && !this._readableState.endEmitted) {
      err = new RequestAbortedError()
    }

    callback(err)
  }
}

class PipelineHandler extends AsyncResource {
  constructor (opts, handler) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof handler !== 'function') {
      throw new InvalidArgumentError('invalid handler')
    }

    const { signal, method, opaque, onInfo, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    if (method === 'CONNECT') {
      throw new InvalidArgumentError('invalid method')
    }

    if (onInfo && typeof onInfo !== 'function') {
      throw new InvalidArgumentError('invalid onInfo callback')
    }

    super('UNDICI_PIPELINE')

    this.opaque = opaque || null
    this.responseHeaders = responseHeaders || null
    this.handler = handler
    this.abort = null
    this.context = null
    this.onInfo = onInfo || null

    this.req = new PipelineRequest().on('error', util.nop)

    this.ret = new Duplex({
      readableObjectMode: opts.objectMode,
      autoDestroy: true,
      read: () => {
        const { body } = this

        if (body && body.resume) {
          body.resume()
        }
      },
      write: (chunk, encoding, callback) => {
        const { req } = this

        if (req.push(chunk, encoding) || req._readableState.destroyed) {
          callback()
        } else {
          req[kResume] = callback
        }
      },
      destroy: (err, callback) => {
        const { body, req, res, ret, abort } = this

        if (!err && !ret._readableState.endEmitted) {
          err = new RequestAbortedError()
        }

        if (abort && err) {
          abort()
        }

        util.destroy(body, err)
        util.destroy(req, err)
        util.destroy(res, err)

        removeSignal(this)

        callback(err)
      }
    }).on('prefinish', () => {
      const { req } = this

      // Node < 15 does not call _final in same tick.
      req.push(null)
    })

    this.res = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    const { ret, res } = this

    assert(!res, 'pipeline cannot be retried')

    if (ret.destroyed) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume) {
    const { opaque, handler, context } = this

    if (statusCode < 200) {
      if (this.onInfo) {
        const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
        this.onInfo({ statusCode, headers })
      }
      return
    }

    this.res = new PipelineResponse(resume)

    let body
    try {
      this.handler = null
      const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
      body = this.runInAsyncScope(handler, null, {
        statusCode,
        headers,
        opaque,
        body: this.res,
        context
      })
    } catch (err) {
      this.res.on('error', util.nop)
      throw err
    }

    if (!body || typeof body.on !== 'function') {
      throw new InvalidReturnValueError('expected Readable')
    }

    body
      .on('data', (chunk) => {
        const { ret, body } = this

        if (!ret.push(chunk) && body.pause) {
          body.pause()
        }
      })
      .on('error', (err) => {
        const { ret } = this

        util.destroy(ret, err)
      })
      .on('end', () => {
        const { ret } = this

        ret.push(null)
      })
      .on('close', () => {
        const { ret } = this

        if (!ret._readableState.ended) {
          util.destroy(ret, new RequestAbortedError())
        }
      })

    this.body = body
  }

  onData (chunk) {
    const { res } = this
    return res.push(chunk)
  }

  onComplete (trailers) {
    const { res } = this
    res.push(null)
  }

  onError (err) {
    const { ret } = this
    this.handler = null
    util.destroy(ret, err)
  }
}

function pipeline (opts, handler) {
  try {
    const pipelineHandler = new PipelineHandler(opts, handler)
    this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler)
    return pipelineHandler.ret
  } catch (err) {
    return new PassThrough().destroy(err)
  }
}

module.exports = pipeline


/***/ }),

/***/ 4018:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Readable = __nccwpck_require__(5468)
const {
  InvalidArgumentError,
  RequestAbortedError
} = __nccwpck_require__(5606)
const util = __nccwpck_require__(7001)
const { getResolveErrorBodyCallback } = __nccwpck_require__(6968)
const { AsyncResource } = __nccwpck_require__(290)
const { addSignal, removeSignal } = __nccwpck_require__(2685)

class RequestHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts

    try {
      if (typeof callback !== 'function') {
        throw new InvalidArgumentError('invalid callback')
      }

      if (highWaterMark && (typeof highWaterMark !== 'number' || highWaterMark < 0)) {
        throw new InvalidArgumentError('invalid highWaterMark')
      }

      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
      }

      if (method === 'CONNECT') {
        throw new InvalidArgumentError('invalid method')
      }

      if (onInfo && typeof onInfo !== 'function') {
        throw new InvalidArgumentError('invalid onInfo callback')
      }

      super('UNDICI_REQUEST')
    } catch (err) {
      if (util.isStream(body)) {
        util.destroy(body.on('error', util.nop), err)
      }
      throw err
    }

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.callback = callback
    this.res = null
    this.abort = null
    this.body = body
    this.trailers = {}
    this.context = null
    this.onInfo = onInfo || null
    this.throwOnError = throwOnError
    this.highWaterMark = highWaterMark

    if (util.isStream(body)) {
      body.on('error', (err) => {
        this.onError(err)
      })
    }

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this

    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)

    if (statusCode < 200) {
      if (this.onInfo) {
        this.onInfo({ statusCode, headers })
      }
      return
    }

    const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers
    const contentType = parsedHeaders['content-type']
    const body = new Readable({ resume, abort, contentType, highWaterMark })

    this.callback = null
    this.res = body
    if (callback !== null) {
      if (this.throwOnError && statusCode >= 400) {
        this.runInAsyncScope(getResolveErrorBodyCallback, null,
          { callback, body, contentType, statusCode, statusMessage, headers }
        )
      } else {
        this.runInAsyncScope(callback, null, null, {
          statusCode,
          headers,
          trailers: this.trailers,
          opaque,
          body,
          context
        })
      }
    }
  }

  onData (chunk) {
    const { res } = this
    return res.push(chunk)
  }

  onComplete (trailers) {
    const { res } = this

    removeSignal(this)

    util.parseHeaders(trailers, this.trailers)

    res.push(null)
  }

  onError (err) {
    const { res, callback, body, opaque } = this

    removeSignal(this)

    if (callback) {
      // TODO: Does this need queueMicrotask?
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }

    if (res) {
      this.res = null
      // Ensure all queued handlers are invoked before destroying res.
      queueMicrotask(() => {
        util.destroy(res, err)
      })
    }

    if (body) {
      this.body = null
      util.destroy(body, err)
    }
  }
}

function request (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      request.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    this.dispatch(opts, new RequestHandler(opts, callback))
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = request
module.exports.RequestHandler = RequestHandler


/***/ }),

/***/ 9383:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { finished, PassThrough } = __nccwpck_require__(2203)
const {
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError
} = __nccwpck_require__(5606)
const util = __nccwpck_require__(7001)
const { getResolveErrorBodyCallback } = __nccwpck_require__(6968)
const { AsyncResource } = __nccwpck_require__(290)
const { addSignal, removeSignal } = __nccwpck_require__(2685)

class StreamHandler extends AsyncResource {
  constructor (opts, factory, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts

    try {
      if (typeof callback !== 'function') {
        throw new InvalidArgumentError('invalid callback')
      }

      if (typeof factory !== 'function') {
        throw new InvalidArgumentError('invalid factory')
      }

      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
      }

      if (method === 'CONNECT') {
        throw new InvalidArgumentError('invalid method')
      }

      if (onInfo && typeof onInfo !== 'function') {
        throw new InvalidArgumentError('invalid onInfo callback')
      }

      super('UNDICI_STREAM')
    } catch (err) {
      if (util.isStream(body)) {
        util.destroy(body.on('error', util.nop), err)
      }
      throw err
    }

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.factory = factory
    this.callback = callback
    this.res = null
    this.abort = null
    this.context = null
    this.trailers = null
    this.body = body
    this.onInfo = onInfo || null
    this.throwOnError = throwOnError || false

    if (util.isStream(body)) {
      body.on('error', (err) => {
        this.onError(err)
      })
    }

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = context
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const { factory, opaque, context, callback, responseHeaders } = this

    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)

    if (statusCode < 200) {
      if (this.onInfo) {
        this.onInfo({ statusCode, headers })
      }
      return
    }

    this.factory = null

    let res

    if (this.throwOnError && statusCode >= 400) {
      const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers
      const contentType = parsedHeaders['content-type']
      res = new PassThrough()

      this.callback = null
      this.runInAsyncScope(getResolveErrorBodyCallback, null,
        { callback, body: res, contentType, statusCode, statusMessage, headers }
      )
    } else {
      if (factory === null) {
        return
      }

      res = this.runInAsyncScope(factory, null, {
        statusCode,
        headers,
        opaque,
        context
      })

      if (
        !res ||
        typeof res.write !== 'function' ||
        typeof res.end !== 'function' ||
        typeof res.on !== 'function'
      ) {
        throw new InvalidReturnValueError('expected Writable')
      }

      // TODO: Avoid finished. It registers an unnecessary amount of listeners.
      finished(res, { readable: false }, (err) => {
        const { callback, res, opaque, trailers, abort } = this

        this.res = null
        if (err || !res.readable) {
          util.destroy(res, err)
        }

        this.callback = null
        this.runInAsyncScope(callback, null, err || null, { opaque, trailers })

        if (err) {
          abort()
        }
      })
    }

    res.on('drain', resume)

    this.res = res

    const needDrain = res.writableNeedDrain !== undefined
      ? res.writableNeedDrain
      : res._writableState && res._writableState.needDrain

    return needDrain !== true
  }

  onData (chunk) {
    const { res } = this

    return res ? res.write(chunk) : true
  }

  onComplete (trailers) {
    const { res } = this

    removeSignal(this)

    if (!res) {
      return
    }

    this.trailers = util.parseHeaders(trailers)

    res.end()
  }

  onError (err) {
    const { res, callback, opaque, body } = this

    removeSignal(this)

    this.factory = null

    if (res) {
      this.res = null
      util.destroy(res, err)
    } else if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }

    if (body) {
      this.body = null
      util.destroy(body, err)
    }
  }
}

function stream (opts, factory, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      stream.call(this, opts, factory, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    this.dispatch(opts, new StreamHandler(opts, factory, callback))
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = stream


/***/ }),

/***/ 6491:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { InvalidArgumentError, RequestAbortedError, SocketError } = __nccwpck_require__(5606)
const { AsyncResource } = __nccwpck_require__(290)
const util = __nccwpck_require__(7001)
const { addSignal, removeSignal } = __nccwpck_require__(2685)
const assert = __nccwpck_require__(2613)

class UpgradeHandler extends AsyncResource {
  constructor (opts, callback) {
    if (!opts || typeof opts !== 'object') {
      throw new InvalidArgumentError('invalid opts')
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    const { signal, opaque, responseHeaders } = opts

    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {
      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')
    }

    super('UNDICI_UPGRADE')

    this.responseHeaders = responseHeaders || null
    this.opaque = opaque || null
    this.callback = callback
    this.abort = null
    this.context = null

    addSignal(this, signal)
  }

  onConnect (abort, context) {
    if (!this.callback) {
      throw new RequestAbortedError()
    }

    this.abort = abort
    this.context = null
  }

  onHeaders () {
    throw new SocketError('bad upgrade', null)
  }

  onUpgrade (statusCode, rawHeaders, socket) {
    const { callback, opaque, context } = this

    assert.strictEqual(statusCode, 101)

    removeSignal(this)

    this.callback = null
    const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)
    this.runInAsyncScope(callback, null, null, {
      headers,
      socket,
      opaque,
      context
    })
  }

  onError (err) {
    const { callback, opaque } = this

    removeSignal(this)

    if (callback) {
      this.callback = null
      queueMicrotask(() => {
        this.runInAsyncScope(callback, null, err, { opaque })
      })
    }
  }
}

function upgrade (opts, callback) {
  if (callback === undefined) {
    return new Promise((resolve, reject) => {
      upgrade.call(this, opts, (err, data) => {
        return err ? reject(err) : resolve(data)
      })
    })
  }

  try {
    const upgradeHandler = new UpgradeHandler(opts, callback)
    this.dispatch({
      ...opts,
      method: opts.method || 'GET',
      upgrade: opts.protocol || 'Websocket'
    }, upgradeHandler)
  } catch (err) {
    if (typeof callback !== 'function') {
      throw err
    }
    const opaque = opts && opts.opaque
    queueMicrotask(() => callback(err, { opaque }))
  }
}

module.exports = upgrade


/***/ }),

/***/ 5526:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


module.exports.request = __nccwpck_require__(4018)
module.exports.stream = __nccwpck_require__(9383)
module.exports.pipeline = __nccwpck_require__(89)
module.exports.upgrade = __nccwpck_require__(6491)
module.exports.connect = __nccwpck_require__(4833)


/***/ }),

/***/ 5468:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// Ported from https://github.com/nodejs/undici/pull/907



const assert = __nccwpck_require__(2613)
const { Readable } = __nccwpck_require__(2203)
const { RequestAbortedError, NotSupportedError, InvalidArgumentError } = __nccwpck_require__(5606)
const util = __nccwpck_require__(7001)
const { ReadableStreamFrom, toUSVString } = __nccwpck_require__(7001)

let Blob

const kConsume = Symbol('kConsume')
const kReading = Symbol('kReading')
const kBody = Symbol('kBody')
const kAbort = Symbol('abort')
const kContentType = Symbol('kContentType')

const noop = () => {}

module.exports = class BodyReadable extends Readable {
  constructor ({
    resume,
    abort,
    contentType = '',
    highWaterMark = 64 * 1024 // Same as nodejs fs streams.
  }) {
    super({
      autoDestroy: true,
      read: resume,
      highWaterMark
    })

    this._readableState.dataEmitted = false

    this[kAbort] = abort
    this[kConsume] = null
    this[kBody] = null
    this[kContentType] = contentType

    // Is stream being consumed through Readable API?
    // This is an optimization so that we avoid checking
    // for 'data' and 'readable' listeners in the hot path
    // inside push().
    this[kReading] = false
  }

  destroy (err) {
    if (this.destroyed) {
      // Node < 16
      return this
    }

    if (!err && !this._readableState.endEmitted) {
      err = new RequestAbortedError()
    }

    if (err) {
      this[kAbort]()
    }

    return super.destroy(err)
  }

  emit (ev, ...args) {
    if (ev === 'data') {
      // Node < 16.7
      this._readableState.dataEmitted = true
    } else if (ev === 'error') {
      // Node < 16
      this._readableState.errorEmitted = true
    }
    return super.emit(ev, ...args)
  }

  on (ev, ...args) {
    if (ev === 'data' || ev === 'readable') {
      this[kReading] = true
    }
    return super.on(ev, ...args)
  }

  addListener (ev, ...args) {
    return this.on(ev, ...args)
  }

  off (ev, ...args) {
    const ret = super.off(ev, ...args)
    if (ev === 'data' || ev === 'readable') {
      this[kReading] = (
        this.listenerCount('data') > 0 ||
        this.listenerCount('readable') > 0
      )
    }
    return ret
  }

  removeListener (ev, ...args) {
    return this.off(ev, ...args)
  }

  push (chunk) {
    if (this[kConsume] && chunk !== null && this.readableLength === 0) {
      consumePush(this[kConsume], chunk)
      return this[kReading] ? super.push(chunk) : true
    }
    return super.push(chunk)
  }

  // https://fetch.spec.whatwg.org/#dom-body-text
  async text () {
    return consume(this, 'text')
  }

  // https://fetch.spec.whatwg.org/#dom-body-json
  async json () {
    return consume(this, 'json')
  }

  // https://fetch.spec.whatwg.org/#dom-body-blob
  async blob () {
    return consume(this, 'blob')
  }

  // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
  async arrayBuffer () {
    return consume(this, 'arrayBuffer')
  }

  // https://fetch.spec.whatwg.org/#dom-body-formdata
  async formData () {
    // TODO: Implement.
    throw new NotSupportedError()
  }

  // https://fetch.spec.whatwg.org/#dom-body-bodyused
  get bodyUsed () {
    return util.isDisturbed(this)
  }

  // https://fetch.spec.whatwg.org/#dom-body-body
  get body () {
    if (!this[kBody]) {
      this[kBody] = ReadableStreamFrom(this)
      if (this[kConsume]) {
        // TODO: Is this the best way to force a lock?
        this[kBody].getReader() // Ensure stream is locked.
        assert(this[kBody].locked)
      }
    }
    return this[kBody]
  }

  dump (opts) {
    let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144
    const signal = opts && opts.signal

    if (signal) {
      try {
        if (typeof signal !== 'object' || !('aborted' in signal)) {
          throw new InvalidArgumentError('signal must be an AbortSignal')
        }
        util.throwIfAborted(signal)
      } catch (err) {
        return Promise.reject(err)
      }
    }

    if (this.closed) {
      return Promise.resolve(null)
    }

    return new Promise((resolve, reject) => {
      const signalListenerCleanup = signal
        ? util.addAbortListener(signal, () => {
          this.destroy()
        })
        : noop

      this
        .on('close', function () {
          signalListenerCleanup()
          if (signal && signal.aborted) {
            reject(signal.reason || Object.assign(new Error('The operation was aborted'), { name: 'AbortError' }))
          } else {
            resolve(null)
          }
        })
        .on('error', noop)
        .on('data', function (chunk) {
          limit -= chunk.length
          if (limit <= 0) {
            this.destroy()
          }
        })
        .resume()
    })
  }
}

// https://streams.spec.whatwg.org/#readablestream-locked
function isLocked (self) {
  // Consume is an implicit lock.
  return (self[kBody] && self[kBody].locked === true) || self[kConsume]
}

// https://fetch.spec.whatwg.org/#body-unusable
function isUnusable (self) {
  return util.isDisturbed(self) || isLocked(self)
}

async function consume (stream, type) {
  if (isUnusable(stream)) {
    throw new TypeError('unusable')
  }

  assert(!stream[kConsume])

  return new Promise((resolve, reject) => {
    stream[kConsume] = {
      type,
      stream,
      resolve,
      reject,
      length: 0,
      body: []
    }

    stream
      .on('error', function (err) {
        consumeFinish(this[kConsume], err)
      })
      .on('close', function () {
        if (this[kConsume].body !== null) {
          consumeFinish(this[kConsume], new RequestAbortedError())
        }
      })

    process.nextTick(consumeStart, stream[kConsume])
  })
}

function consumeStart (consume) {
  if (consume.body === null) {
    return
  }

  const { _readableState: state } = consume.stream

  for (const chunk of state.buffer) {
    consumePush(consume, chunk)
  }

  if (state.endEmitted) {
    consumeEnd(this[kConsume])
  } else {
    consume.stream.on('end', function () {
      consumeEnd(this[kConsume])
    })
  }

  consume.stream.resume()

  while (consume.stream.read() != null) {
    // Loop
  }
}

function consumeEnd (consume) {
  const { type, body, resolve, stream, length } = consume

  try {
    if (type === 'text') {
      resolve(toUSVString(Buffer.concat(body)))
    } else if (type === 'json') {
      resolve(JSON.parse(Buffer.concat(body)))
    } else if (type === 'arrayBuffer') {
      const dst = new Uint8Array(length)

      let pos = 0
      for (const buf of body) {
        dst.set(buf, pos)
        pos += buf.byteLength
      }

      resolve(dst.buffer)
    } else if (type === 'blob') {
      if (!Blob) {
        Blob = (__nccwpck_require__(181).Blob)
      }
      resolve(new Blob(body, { type: stream[kContentType] }))
    }

    consumeFinish(consume)
  } catch (err) {
    stream.destroy(err)
  }
}

function consumePush (consume, chunk) {
  consume.length += chunk.length
  consume.body.push(chunk)
}

function consumeFinish (consume, err) {
  if (consume.body === null) {
    return
  }

  if (err) {
    consume.reject(err)
  } else {
    consume.resolve()
  }

  consume.type = null
  consume.stream = null
  consume.resolve = null
  consume.reject = null
  consume.length = 0
  consume.body = null
}


/***/ }),

/***/ 6968:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(2613)
const {
  ResponseStatusCodeError
} = __nccwpck_require__(5606)
const { toUSVString } = __nccwpck_require__(7001)

async function getResolveErrorBodyCallback ({ callback, body, contentType, statusCode, statusMessage, headers }) {
  assert(body)

  let chunks = []
  let limit = 0

  for await (const chunk of body) {
    chunks.push(chunk)
    limit += chunk.length
    if (limit > 128 * 1024) {
      chunks = null
      break
    }
  }

  if (statusCode === 204 || !contentType || !chunks) {
    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))
    return
  }

  try {
    if (contentType.startsWith('application/json')) {
      const payload = JSON.parse(toUSVString(Buffer.concat(chunks)))
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))
      return
    }

    if (contentType.startsWith('text/')) {
      const payload = toUSVString(Buffer.concat(chunks))
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))
      return
    }
  } catch (err) {
    // Process in a fallback if error
  }

  process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))
}

module.exports = { getResolveErrorBodyCallback }


/***/ }),

/***/ 6288:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  BalancedPoolMissingUpstreamError,
  InvalidArgumentError
} = __nccwpck_require__(5606)
const {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kRemoveClient,
  kGetDispatcher
} = __nccwpck_require__(4633)
const Pool = __nccwpck_require__(27)
const { kUrl, kInterceptors } = __nccwpck_require__(8136)
const { parseOrigin } = __nccwpck_require__(7001)
const kFactory = Symbol('factory')

const kOptions = Symbol('options')
const kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor')
const kCurrentWeight = Symbol('kCurrentWeight')
const kIndex = Symbol('kIndex')
const kWeight = Symbol('kWeight')
const kMaxWeightPerServer = Symbol('kMaxWeightPerServer')
const kErrorPenalty = Symbol('kErrorPenalty')

function getGreatestCommonDivisor (a, b) {
  if (b === 0) return a
  return getGreatestCommonDivisor(b, a % b)
}

function defaultFactory (origin, opts) {
  return new Pool(origin, opts)
}

class BalancedPool extends PoolBase {
  constructor (upstreams = [], { factory = defaultFactory, ...opts } = {}) {
    super()

    this[kOptions] = opts
    this[kIndex] = -1
    this[kCurrentWeight] = 0

    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100
    this[kErrorPenalty] = this[kOptions].errorPenalty || 15

    if (!Array.isArray(upstreams)) {
      upstreams = [upstreams]
    }

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool)
      ? opts.interceptors.BalancedPool
      : []
    this[kFactory] = factory

    for (const upstream of upstreams) {
      this.addUpstream(upstream)
    }
    this._updateBalancedPoolStats()
  }

  addUpstream (upstream) {
    const upstreamOrigin = parseOrigin(upstream).origin

    if (this[kClients].find((pool) => (
      pool[kUrl].origin === upstreamOrigin &&
      pool.closed !== true &&
      pool.destroyed !== true
    ))) {
      return this
    }
    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]))

    this[kAddClient](pool)
    pool.on('connect', () => {
      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty])
    })

    pool.on('connectionError', () => {
      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])
      this._updateBalancedPoolStats()
    })

    pool.on('disconnect', (...args) => {
      const err = args[2]
      if (err && err.code === 'UND_ERR_SOCKET') {
        // decrease the weight of the pool.
        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])
        this._updateBalancedPoolStats()
      }
    })

    for (const client of this[kClients]) {
      client[kWeight] = this[kMaxWeightPerServer]
    }

    this._updateBalancedPoolStats()

    return this
  }

  _updateBalancedPoolStats () {
    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0)
  }

  removeUpstream (upstream) {
    const upstreamOrigin = parseOrigin(upstream).origin

    const pool = this[kClients].find((pool) => (
      pool[kUrl].origin === upstreamOrigin &&
      pool.closed !== true &&
      pool.destroyed !== true
    ))

    if (pool) {
      this[kRemoveClient](pool)
    }

    return this
  }

  get upstreams () {
    return this[kClients]
      .filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true)
      .map((p) => p[kUrl].origin)
  }

  [kGetDispatcher] () {
    // We validate that pools is greater than 0,
    // otherwise we would have to wait until an upstream
    // is added, which might never happen.
    if (this[kClients].length === 0) {
      throw new BalancedPoolMissingUpstreamError()
    }

    const dispatcher = this[kClients].find(dispatcher => (
      !dispatcher[kNeedDrain] &&
      dispatcher.closed !== true &&
      dispatcher.destroyed !== true
    ))

    if (!dispatcher) {
      return
    }

    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true)

    if (allClientsBusy) {
      return
    }

    let counter = 0

    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain])

    while (counter++ < this[kClients].length) {
      this[kIndex] = (this[kIndex] + 1) % this[kClients].length
      const pool = this[kClients][this[kIndex]]

      // find pool index with the largest weight
      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
        maxWeightIndex = this[kIndex]
      }

      // decrease the current weight every `this[kClients].length`.
      if (this[kIndex] === 0) {
        // Set the current weight to the next lower weight.
        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor]

        if (this[kCurrentWeight] <= 0) {
          this[kCurrentWeight] = this[kMaxWeightPerServer]
        }
      }
      if (pool[kWeight] >= this[kCurrentWeight] && (!pool[kNeedDrain])) {
        return pool
      }
    }

    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight]
    this[kIndex] = maxWeightIndex
    return this[kClients][maxWeightIndex]
  }
}

module.exports = BalancedPool


/***/ }),

/***/ 7210:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kConstruct } = __nccwpck_require__(9237)
const { urlEquals, fieldValues: getFieldValues } = __nccwpck_require__(9718)
const { kEnumerableProperty, isDisturbed } = __nccwpck_require__(7001)
const { kHeadersList } = __nccwpck_require__(8136)
const { webidl } = __nccwpck_require__(1677)
const { Response, cloneResponse } = __nccwpck_require__(5891)
const { Request } = __nccwpck_require__(7591)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(3507)
const { fetching } = __nccwpck_require__(22)
const { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = __nccwpck_require__(1096)
const assert = __nccwpck_require__(2613)
const { getGlobalDispatcher } = __nccwpck_require__(6762)

/**
 * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
 * @typedef {Object} CacheBatchOperation
 * @property {'delete' | 'put'} type
 * @property {any} request
 * @property {any} response
 * @property {import('../../types/cache').CacheQueryOptions} options
 */

/**
 * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
 * @typedef {[any, any][]} requestResponseList
 */

class Cache {
  /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
   * @type {requestResponseList}
   */
  #relevantRequestResponseList

  constructor () {
    if (arguments[0] !== kConstruct) {
      webidl.illegalConstructor()
    }

    this.#relevantRequestResponseList = arguments[1]
  }

  async match (request, options = {}) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.match' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    const p = await this.matchAll(request, options)

    if (p.length === 0) {
      return
    }

    return p[0]
  }

  async matchAll (request = undefined, options = {}) {
    webidl.brandCheck(this, Cache)

    if (request !== undefined) request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    // 1.
    let r = null

    // 2.
    if (request !== undefined) {
      if (request instanceof Request) {
        // 2.1.1
        r = request[kState]

        // 2.1.2
        if (r.method !== 'GET' && !options.ignoreMethod) {
          return []
        }
      } else if (typeof request === 'string') {
        // 2.2.1
        r = new Request(request)[kState]
      }
    }

    // 5.
    // 5.1
    const responses = []

    // 5.2
    if (request === undefined) {
      // 5.2.1
      for (const requestResponse of this.#relevantRequestResponseList) {
        responses.push(requestResponse[1])
      }
    } else { // 5.3
      // 5.3.1
      const requestResponses = this.#queryCache(r, options)

      // 5.3.2
      for (const requestResponse of requestResponses) {
        responses.push(requestResponse[1])
      }
    }

    // 5.4
    // We don't implement CORs so we don't need to loop over the responses, yay!

    // 5.5.1
    const responseList = []

    // 5.5.2
    for (const response of responses) {
      // 5.5.2.1
      const responseObject = new Response(response.body?.source ?? null)
      const body = responseObject[kState].body
      responseObject[kState] = response
      responseObject[kState].body = body
      responseObject[kHeaders][kHeadersList] = response.headersList
      responseObject[kHeaders][kGuard] = 'immutable'

      responseList.push(responseObject)
    }

    // 6.
    return Object.freeze(responseList)
  }

  async add (request) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.add' })

    request = webidl.converters.RequestInfo(request)

    // 1.
    const requests = [request]

    // 2.
    const responseArrayPromise = this.addAll(requests)

    // 3.
    return await responseArrayPromise
  }

  async addAll (requests) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.addAll' })

    requests = webidl.converters['sequence<RequestInfo>'](requests)

    // 1.
    const responsePromises = []

    // 2.
    const requestList = []

    // 3.
    for (const request of requests) {
      if (typeof request === 'string') {
        continue
      }

      // 3.1
      const r = request[kState]

      // 3.2
      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {
        throw webidl.errors.exception({
          header: 'Cache.addAll',
          message: 'Expected http/s scheme when method is not GET.'
        })
      }
    }

    // 4.
    /** @type {ReturnType<typeof fetching>[]} */
    const fetchControllers = []

    // 5.
    for (const request of requests) {
      // 5.1
      const r = new Request(request)[kState]

      // 5.2
      if (!urlIsHttpHttpsScheme(r.url)) {
        throw webidl.errors.exception({
          header: 'Cache.addAll',
          message: 'Expected http/s scheme.'
        })
      }

      // 5.4
      r.initiator = 'fetch'
      r.destination = 'subresource'

      // 5.5
      requestList.push(r)

      // 5.6
      const responsePromise = createDeferredPromise()

      // 5.7
      fetchControllers.push(fetching({
        request: r,
        dispatcher: getGlobalDispatcher(),
        processResponse (response) {
          // 1.
          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {
            responsePromise.reject(webidl.errors.exception({
              header: 'Cache.addAll',
              message: 'Received an invalid status code or the request failed.'
            }))
          } else if (response.headersList.contains('vary')) { // 2.
            // 2.1
            const fieldValues = getFieldValues(response.headersList.get('vary'))

            // 2.2
            for (const fieldValue of fieldValues) {
              // 2.2.1
              if (fieldValue === '*') {
                responsePromise.reject(webidl.errors.exception({
                  header: 'Cache.addAll',
                  message: 'invalid vary field value'
                }))

                for (const controller of fetchControllers) {
                  controller.abort()
                }

                return
              }
            }
          }
        },
        processResponseEndOfBody (response) {
          // 1.
          if (response.aborted) {
            responsePromise.reject(new DOMException('aborted', 'AbortError'))
            return
          }

          // 2.
          responsePromise.resolve(response)
        }
      }))

      // 5.8
      responsePromises.push(responsePromise.promise)
    }

    // 6.
    const p = Promise.all(responsePromises)

    // 7.
    const responses = await p

    // 7.1
    const operations = []

    // 7.2
    let index = 0

    // 7.3
    for (const response of responses) {
      // 7.3.1
      /** @type {CacheBatchOperation} */
      const operation = {
        type: 'put', // 7.3.2
        request: requestList[index], // 7.3.3
        response // 7.3.4
      }

      operations.push(operation) // 7.3.5

      index++ // 7.3.6
    }

    // 7.5
    const cacheJobPromise = createDeferredPromise()

    // 7.6.1
    let errorData = null

    // 7.6.2
    try {
      this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    // 7.6.3
    queueMicrotask(() => {
      // 7.6.3.1
      if (errorData === null) {
        cacheJobPromise.resolve(undefined)
      } else {
        // 7.6.3.2
        cacheJobPromise.reject(errorData)
      }
    })

    // 7.7
    return cacheJobPromise.promise
  }

  async put (request, response) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 2, { header: 'Cache.put' })

    request = webidl.converters.RequestInfo(request)
    response = webidl.converters.Response(response)

    // 1.
    let innerRequest = null

    // 2.
    if (request instanceof Request) {
      innerRequest = request[kState]
    } else { // 3.
      innerRequest = new Request(request)[kState]
    }

    // 4.
    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Expected an http/s scheme when method is not GET'
      })
    }

    // 5.
    const innerResponse = response[kState]

    // 6.
    if (innerResponse.status === 206) {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Got 206 status'
      })
    }

    // 7.
    if (innerResponse.headersList.contains('vary')) {
      // 7.1.
      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'))

      // 7.2.
      for (const fieldValue of fieldValues) {
        // 7.2.1
        if (fieldValue === '*') {
          throw webidl.errors.exception({
            header: 'Cache.put',
            message: 'Got * vary field value'
          })
        }
      }
    }

    // 8.
    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
      throw webidl.errors.exception({
        header: 'Cache.put',
        message: 'Response body is locked or disturbed'
      })
    }

    // 9.
    const clonedResponse = cloneResponse(innerResponse)

    // 10.
    const bodyReadPromise = createDeferredPromise()

    // 11.
    if (innerResponse.body != null) {
      // 11.1
      const stream = innerResponse.body.stream

      // 11.2
      const reader = stream.getReader()

      // 11.3
      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject)
    } else {
      bodyReadPromise.resolve(undefined)
    }

    // 12.
    /** @type {CacheBatchOperation[]} */
    const operations = []

    // 13.
    /** @type {CacheBatchOperation} */
    const operation = {
      type: 'put', // 14.
      request: innerRequest, // 15.
      response: clonedResponse // 16.
    }

    // 17.
    operations.push(operation)

    // 19.
    const bytes = await bodyReadPromise.promise

    if (clonedResponse.body != null) {
      clonedResponse.body.source = bytes
    }

    // 19.1
    const cacheJobPromise = createDeferredPromise()

    // 19.2.1
    let errorData = null

    // 19.2.2
    try {
      this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    // 19.2.3
    queueMicrotask(() => {
      // 19.2.3.1
      if (errorData === null) {
        cacheJobPromise.resolve()
      } else { // 19.2.3.2
        cacheJobPromise.reject(errorData)
      }
    })

    return cacheJobPromise.promise
  }

  async delete (request, options = {}) {
    webidl.brandCheck(this, Cache)
    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.delete' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    /**
     * @type {Request}
     */
    let r = null

    if (request instanceof Request) {
      r = request[kState]

      if (r.method !== 'GET' && !options.ignoreMethod) {
        return false
      }
    } else {
      assert(typeof request === 'string')

      r = new Request(request)[kState]
    }

    /** @type {CacheBatchOperation[]} */
    const operations = []

    /** @type {CacheBatchOperation} */
    const operation = {
      type: 'delete',
      request: r,
      options
    }

    operations.push(operation)

    const cacheJobPromise = createDeferredPromise()

    let errorData = null
    let requestResponses

    try {
      requestResponses = this.#batchCacheOperations(operations)
    } catch (e) {
      errorData = e
    }

    queueMicrotask(() => {
      if (errorData === null) {
        cacheJobPromise.resolve(!!requestResponses?.length)
      } else {
        cacheJobPromise.reject(errorData)
      }
    })

    return cacheJobPromise.promise
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
   * @param {any} request
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @returns {readonly Request[]}
   */
  async keys (request = undefined, options = {}) {
    webidl.brandCheck(this, Cache)

    if (request !== undefined) request = webidl.converters.RequestInfo(request)
    options = webidl.converters.CacheQueryOptions(options)

    // 1.
    let r = null

    // 2.
    if (request !== undefined) {
      // 2.1
      if (request instanceof Request) {
        // 2.1.1
        r = request[kState]

        // 2.1.2
        if (r.method !== 'GET' && !options.ignoreMethod) {
          return []
        }
      } else if (typeof request === 'string') { // 2.2
        r = new Request(request)[kState]
      }
    }

    // 4.
    const promise = createDeferredPromise()

    // 5.
    // 5.1
    const requests = []

    // 5.2
    if (request === undefined) {
      // 5.2.1
      for (const requestResponse of this.#relevantRequestResponseList) {
        // 5.2.1.1
        requests.push(requestResponse[0])
      }
    } else { // 5.3
      // 5.3.1
      const requestResponses = this.#queryCache(r, options)

      // 5.3.2
      for (const requestResponse of requestResponses) {
        // 5.3.2.1
        requests.push(requestResponse[0])
      }
    }

    // 5.4
    queueMicrotask(() => {
      // 5.4.1
      const requestList = []

      // 5.4.2
      for (const request of requests) {
        const requestObject = new Request('https://a')
        requestObject[kState] = request
        requestObject[kHeaders][kHeadersList] = request.headersList
        requestObject[kHeaders][kGuard] = 'immutable'
        requestObject[kRealm] = request.client

        // 5.4.2.1
        requestList.push(requestObject)
      }

      // 5.4.3
      promise.resolve(Object.freeze(requestList))
    })

    return promise.promise
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
   * @param {CacheBatchOperation[]} operations
   * @returns {requestResponseList}
   */
  #batchCacheOperations (operations) {
    // 1.
    const cache = this.#relevantRequestResponseList

    // 2.
    const backupCache = [...cache]

    // 3.
    const addedItems = []

    // 4.1
    const resultList = []

    try {
      // 4.2
      for (const operation of operations) {
        // 4.2.1
        if (operation.type !== 'delete' && operation.type !== 'put') {
          throw webidl.errors.exception({
            header: 'Cache.#batchCacheOperations',
            message: 'operation type does not match "delete" or "put"'
          })
        }

        // 4.2.2
        if (operation.type === 'delete' && operation.response != null) {
          throw webidl.errors.exception({
            header: 'Cache.#batchCacheOperations',
            message: 'delete operation should not have an associated response'
          })
        }

        // 4.2.3
        if (this.#queryCache(operation.request, operation.options, addedItems).length) {
          throw new DOMException('???', 'InvalidStateError')
        }

        // 4.2.4
        let requestResponses

        // 4.2.5
        if (operation.type === 'delete') {
          // 4.2.5.1
          requestResponses = this.#queryCache(operation.request, operation.options)

          // TODO: the spec is wrong, this is needed to pass WPTs
          if (requestResponses.length === 0) {
            return []
          }

          // 4.2.5.2
          for (const requestResponse of requestResponses) {
            const idx = cache.indexOf(requestResponse)
            assert(idx !== -1)

            // 4.2.5.2.1
            cache.splice(idx, 1)
          }
        } else if (operation.type === 'put') { // 4.2.6
          // 4.2.6.1
          if (operation.response == null) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'put operation should have an associated response'
            })
          }

          // 4.2.6.2
          const r = operation.request

          // 4.2.6.3
          if (!urlIsHttpHttpsScheme(r.url)) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'expected http or https scheme'
            })
          }

          // 4.2.6.4
          if (r.method !== 'GET') {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'not get method'
            })
          }

          // 4.2.6.5
          if (operation.options != null) {
            throw webidl.errors.exception({
              header: 'Cache.#batchCacheOperations',
              message: 'options must not be defined'
            })
          }

          // 4.2.6.6
          requestResponses = this.#queryCache(operation.request)

          // 4.2.6.7
          for (const requestResponse of requestResponses) {
            const idx = cache.indexOf(requestResponse)
            assert(idx !== -1)

            // 4.2.6.7.1
            cache.splice(idx, 1)
          }

          // 4.2.6.8
          cache.push([operation.request, operation.response])

          // 4.2.6.10
          addedItems.push([operation.request, operation.response])
        }

        // 4.2.7
        resultList.push([operation.request, operation.response])
      }

      // 4.3
      return resultList
    } catch (e) { // 5.
      // 5.1
      this.#relevantRequestResponseList.length = 0

      // 5.2
      this.#relevantRequestResponseList = backupCache

      // 5.3
      throw e
    }
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#query-cache
   * @param {any} requestQuery
   * @param {import('../../types/cache').CacheQueryOptions} options
   * @param {requestResponseList} targetStorage
   * @returns {requestResponseList}
   */
  #queryCache (requestQuery, options, targetStorage) {
    /** @type {requestResponseList} */
    const resultList = []

    const storage = targetStorage ?? this.#relevantRequestResponseList

    for (const requestResponse of storage) {
      const [cachedRequest, cachedResponse] = requestResponse
      if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
        resultList.push(requestResponse)
      }
    }

    return resultList
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
   * @param {any} requestQuery
   * @param {any} request
   * @param {any | null} response
   * @param {import('../../types/cache').CacheQueryOptions | undefined} options
   * @returns {boolean}
   */
  #requestMatchesCachedItem (requestQuery, request, response = null, options) {
    // if (options?.ignoreMethod === false && request.method === 'GET') {
    //   return false
    // }

    const queryURL = new URL(requestQuery.url)

    const cachedURL = new URL(request.url)

    if (options?.ignoreSearch) {
      cachedURL.search = ''

      queryURL.search = ''
    }

    if (!urlEquals(queryURL, cachedURL, true)) {
      return false
    }

    if (
      response == null ||
      options?.ignoreVary ||
      !response.headersList.contains('vary')
    ) {
      return true
    }

    const fieldValues = getFieldValues(response.headersList.get('vary'))

    for (const fieldValue of fieldValues) {
      if (fieldValue === '*') {
        return false
      }

      const requestValue = request.headersList.get(fieldValue)
      const queryValue = requestQuery.headersList.get(fieldValue)

      // If one has the header and the other doesn't, or one has
      // a different value than the other, return false
      if (requestValue !== queryValue) {
        return false
      }
    }

    return true
  }
}

Object.defineProperties(Cache.prototype, {
  [Symbol.toStringTag]: {
    value: 'Cache',
    configurable: true
  },
  match: kEnumerableProperty,
  matchAll: kEnumerableProperty,
  add: kEnumerableProperty,
  addAll: kEnumerableProperty,
  put: kEnumerableProperty,
  delete: kEnumerableProperty,
  keys: kEnumerableProperty
})

const cacheQueryOptionConverters = [
  {
    key: 'ignoreSearch',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'ignoreMethod',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'ignoreVary',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
]

webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters)

webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
  ...cacheQueryOptionConverters,
  {
    key: 'cacheName',
    converter: webidl.converters.DOMString
  }
])

webidl.converters.Response = webidl.interfaceConverter(Response)

webidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(
  webidl.converters.RequestInfo
)

module.exports = {
  Cache
}


/***/ }),

/***/ 1909:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kConstruct } = __nccwpck_require__(9237)
const { Cache } = __nccwpck_require__(7210)
const { webidl } = __nccwpck_require__(1677)
const { kEnumerableProperty } = __nccwpck_require__(7001)

class CacheStorage {
  /**
   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
   * @type {Map<string, import('./cache').requestResponseList}
   */
  #caches = new Map()

  constructor () {
    if (arguments[0] !== kConstruct) {
      webidl.illegalConstructor()
    }
  }

  async match (request, options = {}) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.match' })

    request = webidl.converters.RequestInfo(request)
    options = webidl.converters.MultiCacheQueryOptions(options)

    // 1.
    if (options.cacheName != null) {
      // 1.1.1.1
      if (this.#caches.has(options.cacheName)) {
        // 1.1.1.1.1
        const cacheList = this.#caches.get(options.cacheName)
        const cache = new Cache(kConstruct, cacheList)

        return await cache.match(request, options)
      }
    } else { // 2.
      // 2.2
      for (const cacheList of this.#caches.values()) {
        const cache = new Cache(kConstruct, cacheList)

        // 2.2.1.2
        const response = await cache.match(request, options)

        if (response !== undefined) {
          return response
        }
      }
    }
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */
  async has (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.has' })

    cacheName = webidl.converters.DOMString(cacheName)

    // 2.1.1
    // 2.2
    return this.#caches.has(cacheName)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
   * @param {string} cacheName
   * @returns {Promise<Cache>}
   */
  async open (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.open' })

    cacheName = webidl.converters.DOMString(cacheName)

    // 2.1
    if (this.#caches.has(cacheName)) {
      // await caches.open('v1') !== await caches.open('v1')

      // 2.1.1
      const cache = this.#caches.get(cacheName)

      // 2.1.1.1
      return new Cache(kConstruct, cache)
    }

    // 2.2
    const cache = []

    // 2.3
    this.#caches.set(cacheName, cache)

    // 2.4
    return new Cache(kConstruct, cache)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
   * @param {string} cacheName
   * @returns {Promise<boolean>}
   */
  async delete (cacheName) {
    webidl.brandCheck(this, CacheStorage)
    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.delete' })

    cacheName = webidl.converters.DOMString(cacheName)

    return this.#caches.delete(cacheName)
  }

  /**
   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
   * @returns {string[]}
   */
  async keys () {
    webidl.brandCheck(this, CacheStorage)

    // 2.1
    const keys = this.#caches.keys()

    // 2.2
    return [...keys]
  }
}

Object.defineProperties(CacheStorage.prototype, {
  [Symbol.toStringTag]: {
    value: 'CacheStorage',
    configurable: true
  },
  match: kEnumerableProperty,
  has: kEnumerableProperty,
  open: kEnumerableProperty,
  delete: kEnumerableProperty,
  keys: kEnumerableProperty
})

module.exports = {
  CacheStorage
}


/***/ }),

/***/ 9237:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


module.exports = {
  kConstruct: (__nccwpck_require__(8136).kConstruct)
}


/***/ }),

/***/ 9718:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const assert = __nccwpck_require__(2613)
const { URLSerializer } = __nccwpck_require__(6615)
const { isValidHeaderName } = __nccwpck_require__(1096)

/**
 * @see https://url.spec.whatwg.org/#concept-url-equals
 * @param {URL} A
 * @param {URL} B
 * @param {boolean | undefined} excludeFragment
 * @returns {boolean}
 */
function urlEquals (A, B, excludeFragment = false) {
  const serializedA = URLSerializer(A, excludeFragment)

  const serializedB = URLSerializer(B, excludeFragment)

  return serializedA === serializedB
}

/**
 * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
 * @param {string} header
 */
function fieldValues (header) {
  assert(header !== null)

  const values = []

  for (let value of header.split(',')) {
    value = value.trim()

    if (!value.length) {
      continue
    } else if (!isValidHeaderName(value)) {
      continue
    }

    values.push(value)
  }

  return values
}

module.exports = {
  urlEquals,
  fieldValues
}


/***/ }),

/***/ 3894:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// @ts-check



/* global WebAssembly */

const assert = __nccwpck_require__(2613)
const net = __nccwpck_require__(9278)
const http = __nccwpck_require__(8611)
const { pipeline } = __nccwpck_require__(2203)
const util = __nccwpck_require__(7001)
const timers = __nccwpck_require__(955)
const Request = __nccwpck_require__(9428)
const DispatcherBase = __nccwpck_require__(4219)
const {
  RequestContentLengthMismatchError,
  ResponseContentLengthMismatchError,
  InvalidArgumentError,
  RequestAbortedError,
  HeadersTimeoutError,
  HeadersOverflowError,
  SocketError,
  InformationalError,
  BodyTimeoutError,
  HTTPParserError,
  ResponseExceededMaxSizeError,
  ClientDestroyedError
} = __nccwpck_require__(5606)
const buildConnector = __nccwpck_require__(863)
const {
  kUrl,
  kReset,
  kServerName,
  kClient,
  kBusy,
  kParser,
  kConnect,
  kBlocking,
  kResuming,
  kRunning,
  kPending,
  kSize,
  kWriting,
  kQueue,
  kConnected,
  kConnecting,
  kNeedDrain,
  kNoRef,
  kKeepAliveDefaultTimeout,
  kHostHeader,
  kPendingIdx,
  kRunningIdx,
  kError,
  kPipelining,
  kSocket,
  kKeepAliveTimeoutValue,
  kMaxHeadersSize,
  kKeepAliveMaxTimeout,
  kKeepAliveTimeoutThreshold,
  kHeadersTimeout,
  kBodyTimeout,
  kStrictContentLength,
  kConnector,
  kMaxRedirections,
  kMaxRequests,
  kCounter,
  kClose,
  kDestroy,
  kDispatch,
  kInterceptors,
  kLocalAddress,
  kMaxResponseSize,
  kHTTPConnVersion,
  // HTTP2
  kHost,
  kHTTP2Session,
  kHTTP2SessionState,
  kHTTP2BuildRequest,
  kHTTP2CopyHeaders,
  kHTTP1BuildRequest
} = __nccwpck_require__(8136)

/** @type {import('http2')} */
let http2
try {
  http2 = __nccwpck_require__(5675)
} catch {
  // @ts-ignore
  http2 = { constants: {} }
}

const {
  constants: {
    HTTP2_HEADER_AUTHORITY,
    HTTP2_HEADER_METHOD,
    HTTP2_HEADER_PATH,
    HTTP2_HEADER_SCHEME,
    HTTP2_HEADER_CONTENT_LENGTH,
    HTTP2_HEADER_EXPECT,
    HTTP2_HEADER_STATUS
  }
} = http2

// Experimental
let h2ExperimentalWarned = false

const FastBuffer = Buffer[Symbol.species]

const kClosedResolve = Symbol('kClosedResolve')

const channels = {}

try {
  const diagnosticsChannel = __nccwpck_require__(1637)
  channels.sendHeaders = diagnosticsChannel.channel('undici:client:sendHeaders')
  channels.beforeConnect = diagnosticsChannel.channel('undici:client:beforeConnect')
  channels.connectError = diagnosticsChannel.channel('undici:client:connectError')
  channels.connected = diagnosticsChannel.channel('undici:client:connected')
} catch {
  channels.sendHeaders = { hasSubscribers: false }
  channels.beforeConnect = { hasSubscribers: false }
  channels.connectError = { hasSubscribers: false }
  channels.connected = { hasSubscribers: false }
}

/**
 * @type {import('../types/client').default}
 */
class Client extends DispatcherBase {
  /**
   *
   * @param {string|URL} url
   * @param {import('../types/client').Client.Options} options
   */
  constructor (url, {
    interceptors,
    maxHeaderSize,
    headersTimeout,
    socketTimeout,
    requestTimeout,
    connectTimeout,
    bodyTimeout,
    idleTimeout,
    keepAlive,
    keepAliveTimeout,
    maxKeepAliveTimeout,
    keepAliveMaxTimeout,
    keepAliveTimeoutThreshold,
    socketPath,
    pipelining,
    tls,
    strictContentLength,
    maxCachedSessions,
    maxRedirections,
    connect,
    maxRequestsPerClient,
    localAddress,
    maxResponseSize,
    autoSelectFamily,
    autoSelectFamilyAttemptTimeout,
    // h2
    allowH2,
    maxConcurrentStreams
  } = {}) {
    super()

    if (keepAlive !== undefined) {
      throw new InvalidArgumentError('unsupported keepAlive, use pipelining=0 instead')
    }

    if (socketTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported socketTimeout, use headersTimeout & bodyTimeout instead')
    }

    if (requestTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported requestTimeout, use headersTimeout & bodyTimeout instead')
    }

    if (idleTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported idleTimeout, use keepAliveTimeout instead')
    }

    if (maxKeepAliveTimeout !== undefined) {
      throw new InvalidArgumentError('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead')
    }

    if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
      throw new InvalidArgumentError('invalid maxHeaderSize')
    }

    if (socketPath != null && typeof socketPath !== 'string') {
      throw new InvalidArgumentError('invalid socketPath')
    }

    if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
      throw new InvalidArgumentError('invalid connectTimeout')
    }

    if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
      throw new InvalidArgumentError('invalid keepAliveTimeout')
    }

    if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
      throw new InvalidArgumentError('invalid keepAliveMaxTimeout')
    }

    if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
      throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold')
    }

    if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
      throw new InvalidArgumentError('headersTimeout must be a positive integer or zero')
    }

    if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
      throw new InvalidArgumentError('bodyTimeout must be a positive integer or zero')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
      throw new InvalidArgumentError('maxRequestsPerClient must be a positive number')
    }

    if (localAddress != null && (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)) {
      throw new InvalidArgumentError('localAddress must be valid string IP address')
    }

    if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
      throw new InvalidArgumentError('maxResponseSize must be a positive number')
    }

    if (
      autoSelectFamilyAttemptTimeout != null &&
      (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)
    ) {
      throw new InvalidArgumentError('autoSelectFamilyAttemptTimeout must be a positive number')
    }

    // h2
    if (allowH2 != null && typeof allowH2 !== 'boolean') {
      throw new InvalidArgumentError('allowH2 must be a valid boolean value')
    }

    if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)) {
      throw new InvalidArgumentError('maxConcurrentStreams must be a possitive integer, greater than 0')
    }

    if (typeof connect !== 'function') {
      connect = buildConnector({
        ...tls,
        maxCachedSessions,
        allowH2,
        socketPath,
        timeout: connectTimeout,
        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),
        ...connect
      })
    }

    this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client)
      ? interceptors.Client
      : [createRedirectInterceptor({ maxRedirections })]
    this[kUrl] = util.parseOrigin(url)
    this[kConnector] = connect
    this[kSocket] = null
    this[kPipelining] = pipelining != null ? pipelining : 1
    this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize
    this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout
    this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout
    this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold
    this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout]
    this[kServerName] = null
    this[kLocalAddress] = localAddress != null ? localAddress : null
    this[kResuming] = 0 // 0, idle, 1, scheduled, 2 resuming
    this[kNeedDrain] = 0 // 0, idle, 1, scheduled, 2 resuming
    this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}\r\n`
    this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3
    this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3
    this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength
    this[kMaxRedirections] = maxRedirections
    this[kMaxRequests] = maxRequestsPerClient
    this[kClosedResolve] = null
    this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1
    this[kHTTPConnVersion] = 'h1'

    // HTTP/2
    this[kHTTP2Session] = null
    this[kHTTP2SessionState] = !allowH2
      ? null
      : {
        // streams: null, // Fixed queue of streams - For future support of `push`
          openStreams: 0, // Keep track of them to decide wether or not unref the session
          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server
        }
    this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}`

    // kQueue is built up of 3 sections separated by
    // the kRunningIdx and kPendingIdx indices.
    // |   complete   |   running   |   pending   |
    //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length
    // kRunningIdx points to the first running element.
    // kPendingIdx points to the first pending element.
    // This implements a fast queue with an amortized
    // time of O(1).

    this[kQueue] = []
    this[kRunningIdx] = 0
    this[kPendingIdx] = 0
  }

  get pipelining () {
    return this[kPipelining]
  }

  set pipelining (value) {
    this[kPipelining] = value
    resume(this, true)
  }

  get [kPending] () {
    return this[kQueue].length - this[kPendingIdx]
  }

  get [kRunning] () {
    return this[kPendingIdx] - this[kRunningIdx]
  }

  get [kSize] () {
    return this[kQueue].length - this[kRunningIdx]
  }

  get [kConnected] () {
    return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed
  }

  get [kBusy] () {
    const socket = this[kSocket]
    return (
      (socket && (socket[kReset] || socket[kWriting] || socket[kBlocking])) ||
      (this[kSize] >= (this[kPipelining] || 1)) ||
      this[kPending] > 0
    )
  }

  /* istanbul ignore: only used for test */
  [kConnect] (cb) {
    connect(this)
    this.once('connect', cb)
  }

  [kDispatch] (opts, handler) {
    const origin = opts.origin || this[kUrl].origin

    const request = this[kHTTPConnVersion] === 'h2'
      ? Request[kHTTP2BuildRequest](origin, opts, handler)
      : Request[kHTTP1BuildRequest](origin, opts, handler)

    this[kQueue].push(request)
    if (this[kResuming]) {
      // Do nothing.
    } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {
      // Wait a tick in case stream/iterator is ended in the same tick.
      this[kResuming] = 1
      process.nextTick(resume, this)
    } else {
      resume(this, true)
    }

    if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
      this[kNeedDrain] = 2
    }

    return this[kNeedDrain] < 2
  }

  async [kClose] () {
    // TODO: for H2 we need to gracefully flush the remaining enqueued
    // request and close each stream.
    return new Promise((resolve) => {
      if (!this[kSize]) {
        resolve(null)
      } else {
        this[kClosedResolve] = resolve
      }
    })
  }

  async [kDestroy] (err) {
    return new Promise((resolve) => {
      const requests = this[kQueue].splice(this[kPendingIdx])
      for (let i = 0; i < requests.length; i++) {
        const request = requests[i]
        errorRequest(this, request, err)
      }

      const callback = () => {
        if (this[kClosedResolve]) {
          // TODO (fix): Should we error here with ClientDestroyedError?
          this[kClosedResolve]()
          this[kClosedResolve] = null
        }
        resolve()
      }

      if (this[kHTTP2Session] != null) {
        util.destroy(this[kHTTP2Session], err)
        this[kHTTP2Session] = null
        this[kHTTP2SessionState] = null
      }

      if (!this[kSocket]) {
        queueMicrotask(callback)
      } else {
        util.destroy(this[kSocket].on('close', callback), err)
      }

      resume(this)
    })
  }
}

function onHttp2SessionError (err) {
  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')

  this[kSocket][kError] = err

  onError(this[kClient], err)
}

function onHttp2FrameError (type, code, id) {
  const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`)

  if (id === 0) {
    this[kSocket][kError] = err
    onError(this[kClient], err)
  }
}

function onHttp2SessionEnd () {
  util.destroy(this, new SocketError('other side closed'))
  util.destroy(this[kSocket], new SocketError('other side closed'))
}

function onHTTP2GoAway (code) {
  const client = this[kClient]
  const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`)
  client[kSocket] = null
  client[kHTTP2Session] = null

  if (client.destroyed) {
    assert(this[kPending] === 0)

    // Fail entire queue.
    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(this, request, err)
    }
  } else if (client[kRunning] > 0) {
    // Fail head of pipeline.
    const request = client[kQueue][client[kRunningIdx]]
    client[kQueue][client[kRunningIdx]++] = null

    errorRequest(client, request, err)
  }

  client[kPendingIdx] = client[kRunningIdx]

  assert(client[kRunning] === 0)

  client.emit('disconnect',
    client[kUrl],
    [client],
    err
  )

  resume(client)
}

const constants = __nccwpck_require__(2771)
const createRedirectInterceptor = __nccwpck_require__(9010)
const EMPTY_BUF = Buffer.alloc(0)

async function lazyllhttp () {
  const llhttpWasmData = process.env.JEST_WORKER_ID ? __nccwpck_require__(1917) : undefined

  let mod
  try {
    mod = await WebAssembly.compile(Buffer.from(__nccwpck_require__(4063), 'base64'))
  } catch (e) {
    /* istanbul ignore next */

    // We could check if the error was caused by the simd option not
    // being enabled, but the occurring of this other error
    // * https://github.com/emscripten-core/emscripten/issues/11495
    // got me to remove that check to avoid breaking Node 12.
    mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || __nccwpck_require__(1917), 'base64'))
  }

  return await WebAssembly.instantiate(mod, {
    env: {
      /* eslint-disable camelcase */

      wasm_on_url: (p, at, len) => {
        /* istanbul ignore next */
        return 0
      },
      wasm_on_status: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_message_begin: (p) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onMessageBegin() || 0
      },
      wasm_on_header_field: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_header_value: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0
      },
      wasm_on_body: (p, at, len) => {
        assert.strictEqual(currentParser.ptr, p)
        const start = at - currentBufferPtr + currentBufferRef.byteOffset
        return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0
      },
      wasm_on_message_complete: (p) => {
        assert.strictEqual(currentParser.ptr, p)
        return currentParser.onMessageComplete() || 0
      }

      /* eslint-enable camelcase */
    }
  })
}

let llhttpInstance = null
let llhttpPromise = lazyllhttp()
llhttpPromise.catch()

let currentParser = null
let currentBufferRef = null
let currentBufferSize = 0
let currentBufferPtr = null

const TIMEOUT_HEADERS = 1
const TIMEOUT_BODY = 2
const TIMEOUT_IDLE = 3

class Parser {
  constructor (client, socket, { exports }) {
    assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0)

    this.llhttp = exports
    this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE)
    this.client = client
    this.socket = socket
    this.timeout = null
    this.timeoutValue = null
    this.timeoutType = null
    this.statusCode = null
    this.statusText = ''
    this.upgrade = false
    this.headers = []
    this.headersSize = 0
    this.headersMaxSize = client[kMaxHeadersSize]
    this.shouldKeepAlive = false
    this.paused = false
    this.resume = this.resume.bind(this)

    this.bytesRead = 0

    this.keepAlive = ''
    this.contentLength = ''
    this.connection = ''
    this.maxResponseSize = client[kMaxResponseSize]
  }

  setTimeout (value, type) {
    this.timeoutType = type
    if (value !== this.timeoutValue) {
      timers.clearTimeout(this.timeout)
      if (value) {
        this.timeout = timers.setTimeout(onParserTimeout, value, this)
        // istanbul ignore else: only for jest
        if (this.timeout.unref) {
          this.timeout.unref()
        }
      } else {
        this.timeout = null
      }
      this.timeoutValue = value
    } else if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }
  }

  resume () {
    if (this.socket.destroyed || !this.paused) {
      return
    }

    assert(this.ptr != null)
    assert(currentParser == null)

    this.llhttp.llhttp_resume(this.ptr)

    assert(this.timeoutType === TIMEOUT_BODY)
    if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    this.paused = false
    this.execute(this.socket.read() || EMPTY_BUF) // Flush parser.
    this.readMore()
  }

  readMore () {
    while (!this.paused && this.ptr) {
      const chunk = this.socket.read()
      if (chunk === null) {
        break
      }
      this.execute(chunk)
    }
  }

  execute (data) {
    assert(this.ptr != null)
    assert(currentParser == null)
    assert(!this.paused)

    const { socket, llhttp } = this

    if (data.length > currentBufferSize) {
      if (currentBufferPtr) {
        llhttp.free(currentBufferPtr)
      }
      currentBufferSize = Math.ceil(data.length / 4096) * 4096
      currentBufferPtr = llhttp.malloc(currentBufferSize)
    }

    new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data)

    // Call `execute` on the wasm parser.
    // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,
    // and finally the length of bytes to parse.
    // The return value is an error code or `constants.ERROR.OK`.
    try {
      let ret

      try {
        currentBufferRef = data
        currentParser = this
        ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length)
        /* eslint-disable-next-line no-useless-catch */
      } catch (err) {
        /* istanbul ignore next: difficult to make a test case for */
        throw err
      } finally {
        currentParser = null
        currentBufferRef = null
      }

      const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr

      if (ret === constants.ERROR.PAUSED_UPGRADE) {
        this.onUpgrade(data.slice(offset))
      } else if (ret === constants.ERROR.PAUSED) {
        this.paused = true
        socket.unshift(data.slice(offset))
      } else if (ret !== constants.ERROR.OK) {
        const ptr = llhttp.llhttp_get_error_reason(this.ptr)
        let message = ''
        /* istanbul ignore else: difficult to make a test case for */
        if (ptr) {
          const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0)
          message =
            'Response does not match the HTTP/1.1 protocol (' +
            Buffer.from(llhttp.memory.buffer, ptr, len).toString() +
            ')'
        }
        throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset))
      }
    } catch (err) {
      util.destroy(socket, err)
    }
  }

  destroy () {
    assert(this.ptr != null)
    assert(currentParser == null)

    this.llhttp.llhttp_free(this.ptr)
    this.ptr = null

    timers.clearTimeout(this.timeout)
    this.timeout = null
    this.timeoutValue = null
    this.timeoutType = null

    this.paused = false
  }

  onStatus (buf) {
    this.statusText = buf.toString()
  }

  onMessageBegin () {
    const { socket, client } = this

    /* istanbul ignore next: difficult to make a test case for */
    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]
    if (!request) {
      return -1
    }
  }

  onHeaderField (buf) {
    const len = this.headers.length

    if ((len & 1) === 0) {
      this.headers.push(buf)
    } else {
      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])
    }

    this.trackHeader(buf.length)
  }

  onHeaderValue (buf) {
    let len = this.headers.length

    if ((len & 1) === 1) {
      this.headers.push(buf)
      len += 1
    } else {
      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])
    }

    const key = this.headers[len - 2]
    if (key.length === 10 && key.toString().toLowerCase() === 'keep-alive') {
      this.keepAlive += buf.toString()
    } else if (key.length === 10 && key.toString().toLowerCase() === 'connection') {
      this.connection += buf.toString()
    } else if (key.length === 14 && key.toString().toLowerCase() === 'content-length') {
      this.contentLength += buf.toString()
    }

    this.trackHeader(buf.length)
  }

  trackHeader (len) {
    this.headersSize += len
    if (this.headersSize >= this.headersMaxSize) {
      util.destroy(this.socket, new HeadersOverflowError())
    }
  }

  onUpgrade (head) {
    const { upgrade, client, socket, headers, statusCode } = this

    assert(upgrade)

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert(!socket.destroyed)
    assert(socket === client[kSocket])
    assert(!this.paused)
    assert(request.upgrade || request.method === 'CONNECT')

    this.statusCode = null
    this.statusText = ''
    this.shouldKeepAlive = null

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    socket.unshift(head)

    socket[kParser].destroy()
    socket[kParser] = null

    socket[kClient] = null
    socket[kError] = null
    socket
      .removeListener('error', onSocketError)
      .removeListener('readable', onSocketReadable)
      .removeListener('end', onSocketEnd)
      .removeListener('close', onSocketClose)

    client[kSocket] = null
    client[kQueue][client[kRunningIdx]++] = null
    client.emit('disconnect', client[kUrl], [client], new InformationalError('upgrade'))

    try {
      request.onUpgrade(statusCode, headers, socket)
    } catch (err) {
      util.destroy(socket, err)
    }

    resume(client)
  }

  onHeadersComplete (statusCode, upgrade, shouldKeepAlive) {
    const { client, socket, headers, statusText } = this

    /* istanbul ignore next: difficult to make a test case for */
    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]

    /* istanbul ignore next: difficult to make a test case for */
    if (!request) {
      return -1
    }

    assert(!this.upgrade)
    assert(this.statusCode < 200)

    if (statusCode === 100) {
      util.destroy(socket, new SocketError('bad response', util.getSocketInfo(socket)))
      return -1
    }

    /* this can only happen if server is misbehaving */
    if (upgrade && !request.upgrade) {
      util.destroy(socket, new SocketError('bad upgrade', util.getSocketInfo(socket)))
      return -1
    }

    assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS)

    this.statusCode = statusCode
    this.shouldKeepAlive = (
      shouldKeepAlive ||
      // Override llhttp value which does not allow keepAlive for HEAD.
      (request.method === 'HEAD' && !socket[kReset] && this.connection.toLowerCase() === 'keep-alive')
    )

    if (this.statusCode >= 200) {
      const bodyTimeout = request.bodyTimeout != null
        ? request.bodyTimeout
        : client[kBodyTimeout]
      this.setTimeout(bodyTimeout, TIMEOUT_BODY)
    } else if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    if (request.method === 'CONNECT') {
      assert(client[kRunning] === 1)
      this.upgrade = true
      return 2
    }

    if (upgrade) {
      assert(client[kRunning] === 1)
      this.upgrade = true
      return 2
    }

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    if (this.shouldKeepAlive && client[kPipelining]) {
      const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null

      if (keepAliveTimeout != null) {
        const timeout = Math.min(
          keepAliveTimeout - client[kKeepAliveTimeoutThreshold],
          client[kKeepAliveMaxTimeout]
        )
        if (timeout <= 0) {
          socket[kReset] = true
        } else {
          client[kKeepAliveTimeoutValue] = timeout
        }
      } else {
        client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout]
      }
    } else {
      // Stop more requests from being dispatched.
      socket[kReset] = true
    }

    const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false

    if (request.aborted) {
      return -1
    }

    if (request.method === 'HEAD') {
      return 1
    }

    if (statusCode < 200) {
      return 1
    }

    if (socket[kBlocking]) {
      socket[kBlocking] = false
      resume(client)
    }

    return pause ? constants.ERROR.PAUSED : 0
  }

  onBody (buf) {
    const { client, socket, statusCode, maxResponseSize } = this

    if (socket.destroyed) {
      return -1
    }

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert.strictEqual(this.timeoutType, TIMEOUT_BODY)
    if (this.timeout) {
      // istanbul ignore else: only for jest
      if (this.timeout.refresh) {
        this.timeout.refresh()
      }
    }

    assert(statusCode >= 200)

    if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
      util.destroy(socket, new ResponseExceededMaxSizeError())
      return -1
    }

    this.bytesRead += buf.length

    if (request.onData(buf) === false) {
      return constants.ERROR.PAUSED
    }
  }

  onMessageComplete () {
    const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this

    if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
      return -1
    }

    if (upgrade) {
      return
    }

    const request = client[kQueue][client[kRunningIdx]]
    assert(request)

    assert(statusCode >= 100)

    this.statusCode = null
    this.statusText = ''
    this.bytesRead = 0
    this.contentLength = ''
    this.keepAlive = ''
    this.connection = ''

    assert(this.headers.length % 2 === 0)
    this.headers = []
    this.headersSize = 0

    if (statusCode < 200) {
      return
    }

    /* istanbul ignore next: should be handled by llhttp? */
    if (request.method !== 'HEAD' && contentLength && bytesRead !== parseInt(contentLength, 10)) {
      util.destroy(socket, new ResponseContentLengthMismatchError())
      return -1
    }

    request.onComplete(headers)

    client[kQueue][client[kRunningIdx]++] = null

    if (socket[kWriting]) {
      assert.strictEqual(client[kRunning], 0)
      // Response completed before request.
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (!shouldKeepAlive) {
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (socket[kReset] && client[kRunning] === 0) {
      // Destroy socket once all requests have completed.
      // The request at the tail of the pipeline is the one
      // that requested reset and no further requests should
      // have been queued since then.
      util.destroy(socket, new InformationalError('reset'))
      return constants.ERROR.PAUSED
    } else if (client[kPipelining] === 1) {
      // We must wait a full event loop cycle to reuse this socket to make sure
      // that non-spec compliant servers are not closing the connection even if they
      // said they won't.
      setImmediate(resume, client)
    } else {
      resume(client)
    }
  }
}

function onParserTimeout (parser) {
  const { socket, timeoutType, client } = parser

  /* istanbul ignore else */
  if (timeoutType === TIMEOUT_HEADERS) {
    if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
      assert(!parser.paused, 'cannot be paused while waiting for headers')
      util.destroy(socket, new HeadersTimeoutError())
    }
  } else if (timeoutType === TIMEOUT_BODY) {
    if (!parser.paused) {
      util.destroy(socket, new BodyTimeoutError())
    }
  } else if (timeoutType === TIMEOUT_IDLE) {
    assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue])
    util.destroy(socket, new InformationalError('socket idle timeout'))
  }
}

function onSocketReadable () {
  const { [kParser]: parser } = this
  if (parser) {
    parser.readMore()
  }
}

function onSocketError (err) {
  const { [kClient]: client, [kParser]: parser } = this

  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')

  if (client[kHTTPConnVersion] !== 'h2') {
    // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded
    // to the user.
    if (err.code === 'ECONNRESET' && parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so for as a valid response.
      parser.onMessageComplete()
      return
    }
  }

  this[kError] = err

  onError(this[kClient], err)
}

function onError (client, err) {
  if (
    client[kRunning] === 0 &&
    err.code !== 'UND_ERR_INFO' &&
    err.code !== 'UND_ERR_SOCKET'
  ) {
    // Error is not caused by running request and not a recoverable
    // socket error.

    assert(client[kPendingIdx] === client[kRunningIdx])

    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(client, request, err)
    }
    assert(client[kSize] === 0)
  }
}

function onSocketEnd () {
  const { [kParser]: parser, [kClient]: client } = this

  if (client[kHTTPConnVersion] !== 'h2') {
    if (parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so far as a valid response.
      parser.onMessageComplete()
      return
    }
  }

  util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)))
}

function onSocketClose () {
  const { [kClient]: client, [kParser]: parser } = this

  if (client[kHTTPConnVersion] === 'h1' && parser) {
    if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
      // We treat all incoming data so far as a valid response.
      parser.onMessageComplete()
    }

    this[kParser].destroy()
    this[kParser] = null
  }

  const err = this[kError] || new SocketError('closed', util.getSocketInfo(this))

  client[kSocket] = null

  if (client.destroyed) {
    assert(client[kPending] === 0)

    // Fail entire queue.
    const requests = client[kQueue].splice(client[kRunningIdx])
    for (let i = 0; i < requests.length; i++) {
      const request = requests[i]
      errorRequest(client, request, err)
    }
  } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {
    // Fail head of pipeline.
    const request = client[kQueue][client[kRunningIdx]]
    client[kQueue][client[kRunningIdx]++] = null

    errorRequest(client, request, err)
  }

  client[kPendingIdx] = client[kRunningIdx]

  assert(client[kRunning] === 0)

  client.emit('disconnect', client[kUrl], [client], err)

  resume(client)
}

async function connect (client) {
  assert(!client[kConnecting])
  assert(!client[kSocket])

  let { host, hostname, protocol, port } = client[kUrl]

  // Resolve ipv6
  if (hostname[0] === '[') {
    const idx = hostname.indexOf(']')

    assert(idx !== -1)
    const ip = hostname.substring(1, idx)

    assert(net.isIP(ip))
    hostname = ip
  }

  client[kConnecting] = true

  if (channels.beforeConnect.hasSubscribers) {
    channels.beforeConnect.publish({
      connectParams: {
        host,
        hostname,
        protocol,
        port,
        servername: client[kServerName],
        localAddress: client[kLocalAddress]
      },
      connector: client[kConnector]
    })
  }

  try {
    const socket = await new Promise((resolve, reject) => {
      client[kConnector]({
        host,
        hostname,
        protocol,
        port,
        servername: client[kServerName],
        localAddress: client[kLocalAddress]
      }, (err, socket) => {
        if (err) {
          reject(err)
        } else {
          resolve(socket)
        }
      })
    })

    if (client.destroyed) {
      util.destroy(socket.on('error', () => {}), new ClientDestroyedError())
      return
    }

    client[kConnecting] = false

    assert(socket)

    const isH2 = socket.alpnProtocol === 'h2'
    if (isH2) {
      if (!h2ExperimentalWarned) {
        h2ExperimentalWarned = true
        process.emitWarning('H2 support is experimental, expect them to change at any time.', {
          code: 'UNDICI-H2'
        })
      }

      const session = http2.connect(client[kUrl], {
        createConnection: () => socket,
        peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
      })

      client[kHTTPConnVersion] = 'h2'
      session[kClient] = client
      session[kSocket] = socket
      session.on('error', onHttp2SessionError)
      session.on('frameError', onHttp2FrameError)
      session.on('end', onHttp2SessionEnd)
      session.on('goaway', onHTTP2GoAway)
      session.on('close', onSocketClose)
      session.unref()

      client[kHTTP2Session] = session
      socket[kHTTP2Session] = session
    } else {
      if (!llhttpInstance) {
        llhttpInstance = await llhttpPromise
        llhttpPromise = null
      }

      socket[kNoRef] = false
      socket[kWriting] = false
      socket[kReset] = false
      socket[kBlocking] = false
      socket[kParser] = new Parser(client, socket, llhttpInstance)
    }

    socket[kCounter] = 0
    socket[kMaxRequests] = client[kMaxRequests]
    socket[kClient] = client
    socket[kError] = null

    socket
      .on('error', onSocketError)
      .on('readable', onSocketReadable)
      .on('end', onSocketEnd)
      .on('close', onSocketClose)

    client[kSocket] = socket

    if (channels.connected.hasSubscribers) {
      channels.connected.publish({
        connectParams: {
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        },
        connector: client[kConnector],
        socket
      })
    }
    client.emit('connect', client[kUrl], [client])
  } catch (err) {
    if (client.destroyed) {
      return
    }

    client[kConnecting] = false

    if (channels.connectError.hasSubscribers) {
      channels.connectError.publish({
        connectParams: {
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        },
        connector: client[kConnector],
        error: err
      })
    }

    if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {
      assert(client[kRunning] === 0)
      while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
        const request = client[kQueue][client[kPendingIdx]++]
        errorRequest(client, request, err)
      }
    } else {
      onError(client, err)
    }

    client.emit('connectionError', client[kUrl], [client], err)
  }

  resume(client)
}

function emitDrain (client) {
  client[kNeedDrain] = 0
  client.emit('drain', client[kUrl], [client])
}

function resume (client, sync) {
  if (client[kResuming] === 2) {
    return
  }

  client[kResuming] = 2

  _resume(client, sync)
  client[kResuming] = 0

  if (client[kRunningIdx] > 256) {
    client[kQueue].splice(0, client[kRunningIdx])
    client[kPendingIdx] -= client[kRunningIdx]
    client[kRunningIdx] = 0
  }
}

function _resume (client, sync) {
  while (true) {
    if (client.destroyed) {
      assert(client[kPending] === 0)
      return
    }

    if (client[kClosedResolve] && !client[kSize]) {
      client[kClosedResolve]()
      client[kClosedResolve] = null
      return
    }

    const socket = client[kSocket]

    if (socket && !socket.destroyed && socket.alpnProtocol !== 'h2') {
      if (client[kSize] === 0) {
        if (!socket[kNoRef] && socket.unref) {
          socket.unref()
          socket[kNoRef] = true
        }
      } else if (socket[kNoRef] && socket.ref) {
        socket.ref()
        socket[kNoRef] = false
      }

      if (client[kSize] === 0) {
        if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
          socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE)
        }
      } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
        if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
          const request = client[kQueue][client[kRunningIdx]]
          const headersTimeout = request.headersTimeout != null
            ? request.headersTimeout
            : client[kHeadersTimeout]
          socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS)
        }
      }
    }

    if (client[kBusy]) {
      client[kNeedDrain] = 2
    } else if (client[kNeedDrain] === 2) {
      if (sync) {
        client[kNeedDrain] = 1
        process.nextTick(emitDrain, client)
      } else {
        emitDrain(client)
      }
      continue
    }

    if (client[kPending] === 0) {
      return
    }

    if (client[kRunning] >= (client[kPipelining] || 1)) {
      return
    }

    const request = client[kQueue][client[kPendingIdx]]

    if (client[kUrl].protocol === 'https:' && client[kServerName] !== request.servername) {
      if (client[kRunning] > 0) {
        return
      }

      client[kServerName] = request.servername

      if (socket && socket.servername !== request.servername) {
        util.destroy(socket, new InformationalError('servername changed'))
        return
      }
    }

    if (client[kConnecting]) {
      return
    }

    if (!socket && !client[kHTTP2Session]) {
      connect(client)
      return
    }

    if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
      return
    }

    if (client[kRunning] > 0 && !request.idempotent) {
      // Non-idempotent request cannot be retried.
      // Ensure that no other requests are inflight and
      // could cause failure.
      return
    }

    if (client[kRunning] > 0 && (request.upgrade || request.method === 'CONNECT')) {
      // Don't dispatch an upgrade until all preceding requests have completed.
      // A misbehaving server might upgrade the connection before all pipelined
      // request has completed.
      return
    }

    if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 &&
      (util.isStream(request.body) || util.isAsyncIterable(request.body))) {
      // Request with stream or iterator body can error while other requests
      // are inflight and indirectly error those as well.
      // Ensure this doesn't happen by waiting for inflight
      // to complete before dispatching.

      // Request with stream or iterator body cannot be retried.
      // Ensure that no other requests are inflight and
      // could cause failure.
      return
    }

    if (!request.aborted && write(client, request)) {
      client[kPendingIdx]++
    } else {
      client[kQueue].splice(client[kPendingIdx], 1)
    }
  }
}

// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2
function shouldSendContentLength (method) {
  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT'
}

function write (client, request) {
  if (client[kHTTPConnVersion] === 'h2') {
    writeH2(client, client[kHTTP2Session], request)
    return
  }

  const { body, method, path, host, upgrade, headers, blocking, reset } = request

  // https://tools.ietf.org/html/rfc7231#section-4.3.1
  // https://tools.ietf.org/html/rfc7231#section-4.3.2
  // https://tools.ietf.org/html/rfc7231#section-4.3.5

  // Sending a payload body on a request that does not
  // expect it can cause undefined behavior on some
  // servers and corrupt connection state. Do not
  // re-use the connection for further requests.

  const expectsPayload = (
    method === 'PUT' ||
    method === 'POST' ||
    method === 'PATCH'
  )

  if (body && typeof body.read === 'function') {
    // Try to read EOF in order to get length.
    body.read(0)
  }

  const bodyLength = util.bodyLength(body)

  let contentLength = bodyLength

  if (contentLength === null) {
    contentLength = request.contentLength
  }

  if (contentLength === 0 && !expectsPayload) {
    // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.

    contentLength = null
  }

  // https://github.com/nodejs/undici/issues/2046
  // A user agent may send a Content-Length header with 0 value, this should be allowed.
  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
    if (client[kStrictContentLength]) {
      errorRequest(client, request, new RequestContentLengthMismatchError())
      return false
    }

    process.emitWarning(new RequestContentLengthMismatchError())
  }

  const socket = client[kSocket]

  try {
    request.onConnect((err) => {
      if (request.aborted || request.completed) {
        return
      }

      errorRequest(client, request, err || new RequestAbortedError())

      util.destroy(socket, new InformationalError('aborted'))
    })
  } catch (err) {
    errorRequest(client, request, err)
  }

  if (request.aborted) {
    return false
  }

  if (method === 'HEAD') {
    // https://github.com/mcollina/undici/issues/258
    // Close after a HEAD request to interop with misbehaving servers
    // that may send a body in the response.

    socket[kReset] = true
  }

  if (upgrade || method === 'CONNECT') {
    // On CONNECT or upgrade, block pipeline from dispatching further
    // requests on this connection.

    socket[kReset] = true
  }

  if (reset != null) {
    socket[kReset] = reset
  }

  if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
    socket[kReset] = true
  }

  if (blocking) {
    socket[kBlocking] = true
  }

  let header = `${method} ${path} HTTP/1.1\r\n`

  if (typeof host === 'string') {
    header += `host: ${host}\r\n`
  } else {
    header += client[kHostHeader]
  }

  if (upgrade) {
    header += `connection: upgrade\r\nupgrade: ${upgrade}\r\n`
  } else if (client[kPipelining] && !socket[kReset]) {
    header += 'connection: keep-alive\r\n'
  } else {
    header += 'connection: close\r\n'
  }

  if (headers) {
    header += headers
  }

  if (channels.sendHeaders.hasSubscribers) {
    channels.sendHeaders.publish({ request, headers: header, socket })
  }

  /* istanbul ignore else: assertion */
  if (!body || bodyLength === 0) {
    if (contentLength === 0) {
      socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1')
    } else {
      assert(contentLength === null, 'no body must not have content length')
      socket.write(`${header}\r\n`, 'latin1')
    }
    request.onRequestSent()
  } else if (util.isBuffer(body)) {
    assert(contentLength === body.byteLength, 'buffer body must have content length')

    socket.cork()
    socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
    socket.write(body)
    socket.uncork()
    request.onBodySent(body)
    request.onRequestSent()
    if (!expectsPayload) {
      socket[kReset] = true
    }
  } else if (util.isBlobLike(body)) {
    if (typeof body.stream === 'function') {
      writeIterable({ body: body.stream(), client, request, socket, contentLength, header, expectsPayload })
    } else {
      writeBlob({ body, client, request, socket, contentLength, header, expectsPayload })
    }
  } else if (util.isStream(body)) {
    writeStream({ body, client, request, socket, contentLength, header, expectsPayload })
  } else if (util.isIterable(body)) {
    writeIterable({ body, client, request, socket, contentLength, header, expectsPayload })
  } else {
    assert(false)
  }

  return true
}

function writeH2 (client, session, request) {
  const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request

  let headers
  if (typeof reqHeaders === 'string') headers = Request[kHTTP2CopyHeaders](reqHeaders.trim())
  else headers = reqHeaders

  if (upgrade) {
    errorRequest(client, request, new Error('Upgrade not supported for H2'))
    return false
  }

  try {
    // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?
    request.onConnect((err) => {
      if (request.aborted || request.completed) {
        return
      }

      errorRequest(client, request, err || new RequestAbortedError())
    })
  } catch (err) {
    errorRequest(client, request, err)
  }

  if (request.aborted) {
    return false
  }

  /** @type {import('node:http2').ClientHttp2Stream} */
  let stream
  const h2State = client[kHTTP2SessionState]

  headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost]
  headers[HTTP2_HEADER_METHOD] = method

  if (method === 'CONNECT') {
    session.ref()
    // we are already connected, streams are pending, first request
    // will create a new stream. We trigger a request to create the stream and wait until
    // `ready` event is triggered
    // We disabled endStream to allow the user to write to the stream
    stream = session.request(headers, { endStream: false, signal })

    if (stream.id && !stream.pending) {
      request.onUpgrade(null, null, stream)
      ++h2State.openStreams
    } else {
      stream.once('ready', () => {
        request.onUpgrade(null, null, stream)
        ++h2State.openStreams
      })
    }

    stream.once('close', () => {
      h2State.openStreams -= 1
      // TODO(HTTP/2): unref only if current streams count is 0
      if (h2State.openStreams === 0) session.unref()
    })

    return true
  }

  // https://tools.ietf.org/html/rfc7540#section-8.3
  // :path and :scheme headers must be omited when sending CONNECT

  headers[HTTP2_HEADER_PATH] = path
  headers[HTTP2_HEADER_SCHEME] = 'https'

  // https://tools.ietf.org/html/rfc7231#section-4.3.1
  // https://tools.ietf.org/html/rfc7231#section-4.3.2
  // https://tools.ietf.org/html/rfc7231#section-4.3.5

  // Sending a payload body on a request that does not
  // expect it can cause undefined behavior on some
  // servers and corrupt connection state. Do not
  // re-use the connection for further requests.

  const expectsPayload = (
    method === 'PUT' ||
    method === 'POST' ||
    method === 'PATCH'
  )

  if (body && typeof body.read === 'function') {
    // Try to read EOF in order to get length.
    body.read(0)
  }

  let contentLength = util.bodyLength(body)

  if (contentLength == null) {
    contentLength = request.contentLength
  }

  if (contentLength === 0 || !expectsPayload) {
    // https://tools.ietf.org/html/rfc7230#section-3.3.2
    // A user agent SHOULD NOT send a Content-Length header field when
    // the request message does not contain a payload body and the method
    // semantics do not anticipate such a body.

    contentLength = null
  }

  // https://github.com/nodejs/undici/issues/2046
  // A user agent may send a Content-Length header with 0 value, this should be allowed.
  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
    if (client[kStrictContentLength]) {
      errorRequest(client, request, new RequestContentLengthMismatchError())
      return false
    }

    process.emitWarning(new RequestContentLengthMismatchError())
  }

  if (contentLength != null) {
    assert(body, 'no body must not have content length')
    headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`
  }

  session.ref()

  const shouldEndStream = method === 'GET' || method === 'HEAD'
  if (expectContinue) {
    headers[HTTP2_HEADER_EXPECT] = '100-continue'
    stream = session.request(headers, { endStream: shouldEndStream, signal })

    stream.once('continue', writeBodyH2)
  } else {
    stream = session.request(headers, {
      endStream: shouldEndStream,
      signal
    })
    writeBodyH2()
  }

  // Increment counter as we have new several streams open
  ++h2State.openStreams

  stream.once('response', headers => {
    const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers

    if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), '') === false) {
      stream.pause()
    }
  })

  stream.once('end', () => {
    request.onComplete([])
  })

  stream.on('data', (chunk) => {
    if (request.onData(chunk) === false) {
      stream.pause()
    }
  })

  stream.once('close', () => {
    h2State.openStreams -= 1
    // TODO(HTTP/2): unref only if current streams count is 0
    if (h2State.openStreams === 0) {
      session.unref()
    }
  })

  stream.once('error', function (err) {
    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
      h2State.streams -= 1
      util.destroy(stream, err)
    }
  })

  stream.once('frameError', (type, code) => {
    const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`)
    errorRequest(client, request, err)

    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
      h2State.streams -= 1
      util.destroy(stream, err)
    }
  })

  // stream.on('aborted', () => {
  //   // TODO(HTTP/2): Support aborted
  // })

  // stream.on('timeout', () => {
  //   // TODO(HTTP/2): Support timeout
  // })

  // stream.on('push', headers => {
  //   // TODO(HTTP/2): Suppor push
  // })

  // stream.on('trailers', headers => {
  //   // TODO(HTTP/2): Support trailers
  // })

  return true

  function writeBodyH2 () {
    /* istanbul ignore else: assertion */
    if (!body) {
      request.onRequestSent()
    } else if (util.isBuffer(body)) {
      assert(contentLength === body.byteLength, 'buffer body must have content length')
      stream.cork()
      stream.write(body)
      stream.uncork()
      stream.end()
      request.onBodySent(body)
      request.onRequestSent()
    } else if (util.isBlobLike(body)) {
      if (typeof body.stream === 'function') {
        writeIterable({
          client,
          request,
          contentLength,
          h2stream: stream,
          expectsPayload,
          body: body.stream(),
          socket: client[kSocket],
          header: ''
        })
      } else {
        writeBlob({
          body,
          client,
          request,
          contentLength,
          expectsPayload,
          h2stream: stream,
          header: '',
          socket: client[kSocket]
        })
      }
    } else if (util.isStream(body)) {
      writeStream({
        body,
        client,
        request,
        contentLength,
        expectsPayload,
        socket: client[kSocket],
        h2stream: stream,
        header: ''
      })
    } else if (util.isIterable(body)) {
      writeIterable({
        body,
        client,
        request,
        contentLength,
        expectsPayload,
        header: '',
        h2stream: stream,
        socket: client[kSocket]
      })
    } else {
      assert(false)
    }
  }
}

function writeStream ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined')

  if (client[kHTTPConnVersion] === 'h2') {
    // For HTTP/2, is enough to pipe the stream
    const pipe = pipeline(
      body,
      h2stream,
      (err) => {
        if (err) {
          util.destroy(body, err)
          util.destroy(h2stream, err)
        } else {
          request.onRequestSent()
        }
      }
    )

    pipe.on('data', onPipeData)
    pipe.once('end', () => {
      pipe.removeListener('data', onPipeData)
      util.destroy(pipe)
    })

    function onPipeData (chunk) {
      request.onBodySent(chunk)
    }

    return
  }

  let finished = false

  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })

  const onData = function (chunk) {
    if (finished) {
      return
    }

    try {
      if (!writer.write(chunk) && this.pause) {
        this.pause()
      }
    } catch (err) {
      util.destroy(this, err)
    }
  }
  const onDrain = function () {
    if (finished) {
      return
    }

    if (body.resume) {
      body.resume()
    }
  }
  const onAbort = function () {
    if (finished) {
      return
    }
    const err = new RequestAbortedError()
    queueMicrotask(() => onFinished(err))
  }
  const onFinished = function (err) {
    if (finished) {
      return
    }

    finished = true

    assert(socket.destroyed || (socket[kWriting] && client[kRunning] <= 1))

    socket
      .off('drain', onDrain)
      .off('error', onFinished)

    body
      .removeListener('data', onData)
      .removeListener('end', onFinished)
      .removeListener('error', onFinished)
      .removeListener('close', onAbort)

    if (!err) {
      try {
        writer.end()
      } catch (er) {
        err = er
      }
    }

    writer.destroy(err)

    if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {
      util.destroy(body, err)
    } else {
      util.destroy(body)
    }
  }

  body
    .on('data', onData)
    .on('end', onFinished)
    .on('error', onFinished)
    .on('close', onAbort)

  if (body.resume) {
    body.resume()
  }

  socket
    .on('drain', onDrain)
    .on('error', onFinished)
}

async function writeBlob ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength === body.size, 'blob body must have content length')

  const isH2 = client[kHTTPConnVersion] === 'h2'
  try {
    if (contentLength != null && contentLength !== body.size) {
      throw new RequestContentLengthMismatchError()
    }

    const buffer = Buffer.from(await body.arrayBuffer())

    if (isH2) {
      h2stream.cork()
      h2stream.write(buffer)
      h2stream.uncork()
    } else {
      socket.cork()
      socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
      socket.write(buffer)
      socket.uncork()
    }

    request.onBodySent(buffer)
    request.onRequestSent()

    if (!expectsPayload) {
      socket[kReset] = true
    }

    resume(client)
  } catch (err) {
    util.destroy(isH2 ? h2stream : socket, err)
  }
}

async function writeIterable ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined')

  let callback = null
  function onDrain () {
    if (callback) {
      const cb = callback
      callback = null
      cb()
    }
  }

  const waitForDrain = () => new Promise((resolve, reject) => {
    assert(callback === null)

    if (socket[kError]) {
      reject(socket[kError])
    } else {
      callback = resolve
    }
  })

  if (client[kHTTPConnVersion] === 'h2') {
    h2stream
      .on('close', onDrain)
      .on('drain', onDrain)

    try {
      // It's up to the user to somehow abort the async iterable.
      for await (const chunk of body) {
        if (socket[kError]) {
          throw socket[kError]
        }

        const res = h2stream.write(chunk)
        request.onBodySent(chunk)
        if (!res) {
          await waitForDrain()
        }
      }
    } catch (err) {
      h2stream.destroy(err)
    } finally {
      request.onRequestSent()
      h2stream.end()
      h2stream
        .off('close', onDrain)
        .off('drain', onDrain)
    }

    return
  }

  socket
    .on('close', onDrain)
    .on('drain', onDrain)

  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })
  try {
    // It's up to the user to somehow abort the async iterable.
    for await (const chunk of body) {
      if (socket[kError]) {
        throw socket[kError]
      }

      if (!writer.write(chunk)) {
        await waitForDrain()
      }
    }

    writer.end()
  } catch (err) {
    writer.destroy(err)
  } finally {
    socket
      .off('close', onDrain)
      .off('drain', onDrain)
  }
}

class AsyncWriter {
  constructor ({ socket, request, contentLength, client, expectsPayload, header }) {
    this.socket = socket
    this.request = request
    this.contentLength = contentLength
    this.client = client
    this.bytesWritten = 0
    this.expectsPayload = expectsPayload
    this.header = header

    socket[kWriting] = true
  }

  write (chunk) {
    const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this

    if (socket[kError]) {
      throw socket[kError]
    }

    if (socket.destroyed) {
      return false
    }

    const len = Buffer.byteLength(chunk)
    if (!len) {
      return true
    }

    // We should defer writing chunks.
    if (contentLength !== null && bytesWritten + len > contentLength) {
      if (client[kStrictContentLength]) {
        throw new RequestContentLengthMismatchError()
      }

      process.emitWarning(new RequestContentLengthMismatchError())
    }

    socket.cork()

    if (bytesWritten === 0) {
      if (!expectsPayload) {
        socket[kReset] = true
      }

      if (contentLength === null) {
        socket.write(`${header}transfer-encoding: chunked\r\n`, 'latin1')
      } else {
        socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, 'latin1')
      }
    }

    if (contentLength === null) {
      socket.write(`\r\n${len.toString(16)}\r\n`, 'latin1')
    }

    this.bytesWritten += len

    const ret = socket.write(chunk)

    socket.uncork()

    request.onBodySent(chunk)

    if (!ret) {
      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
        // istanbul ignore else: only for jest
        if (socket[kParser].timeout.refresh) {
          socket[kParser].timeout.refresh()
        }
      }
    }

    return ret
  }

  end () {
    const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this
    request.onRequestSent()

    socket[kWriting] = false

    if (socket[kError]) {
      throw socket[kError]
    }

    if (socket.destroyed) {
      return
    }

    if (bytesWritten === 0) {
      if (expectsPayload) {
        // https://tools.ietf.org/html/rfc7230#section-3.3.2
        // A user agent SHOULD send a Content-Length in a request message when
        // no Transfer-Encoding is sent and the request method defines a meaning
        // for an enclosed payload body.

        socket.write(`${header}content-length: 0\r\n\r\n`, 'latin1')
      } else {
        socket.write(`${header}\r\n`, 'latin1')
      }
    } else if (contentLength === null) {
      socket.write('\r\n0\r\n\r\n', 'latin1')
    }

    if (contentLength !== null && bytesWritten !== contentLength) {
      if (client[kStrictContentLength]) {
        throw new RequestContentLengthMismatchError()
      } else {
        process.emitWarning(new RequestContentLengthMismatchError())
      }
    }

    if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
      // istanbul ignore else: only for jest
      if (socket[kParser].timeout.refresh) {
        socket[kParser].timeout.refresh()
      }
    }

    resume(client)
  }

  destroy (err) {
    const { socket, client } = this

    socket[kWriting] = false

    if (err) {
      assert(client[kRunning] <= 1, 'pipeline should only contain this request')
      util.destroy(socket, err)
    }
  }
}

function errorRequest (client, request, err) {
  try {
    request.onError(err)
    assert(request.aborted)
  } catch (err) {
    client.emit('error', err)
  }
}

module.exports = Client


/***/ }),

/***/ 6131:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


/* istanbul ignore file: only for Node 12 */

const { kConnected, kSize } = __nccwpck_require__(8136)

class CompatWeakRef {
  constructor (value) {
    this.value = value
  }

  deref () {
    return this.value[kConnected] === 0 && this.value[kSize] === 0
      ? undefined
      : this.value
  }
}

class CompatFinalizer {
  constructor (finalizer) {
    this.finalizer = finalizer
  }

  register (dispatcher, key) {
    if (dispatcher.on) {
      dispatcher.on('disconnect', () => {
        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
          this.finalizer(key)
        }
      })
    }
  }
}

module.exports = function () {
  // FIXME: remove workaround when the Node bug is fixed
  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
  if (process.env.NODE_V8_COVERAGE) {
    return {
      WeakRef: CompatWeakRef,
      FinalizationRegistry: CompatFinalizer
    }
  }
  return {
    WeakRef: global.WeakRef || CompatWeakRef,
    FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
  }
}


/***/ }),

/***/ 9908:
/***/ ((module) => {

"use strict";


// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size
const maxAttributeValueSize = 1024

// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size
const maxNameValuePairSize = 4096

module.exports = {
  maxAttributeValueSize,
  maxNameValuePairSize
}


/***/ }),

/***/ 2125:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { parseSetCookie } = __nccwpck_require__(5746)
const { stringify } = __nccwpck_require__(4061)
const { webidl } = __nccwpck_require__(1677)
const { Headers } = __nccwpck_require__(6396)

/**
 * @typedef {Object} Cookie
 * @property {string} name
 * @property {string} value
 * @property {Date|number|undefined} expires
 * @property {number|undefined} maxAge
 * @property {string|undefined} domain
 * @property {string|undefined} path
 * @property {boolean|undefined} secure
 * @property {boolean|undefined} httpOnly
 * @property {'Strict'|'Lax'|'None'} sameSite
 * @property {string[]} unparsed
 */

/**
 * @param {Headers} headers
 * @returns {Record<string, string>}
 */
function getCookies (headers) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'getCookies' })

  webidl.brandCheck(headers, Headers, { strict: false })

  const cookie = headers.get('cookie')
  const out = {}

  if (!cookie) {
    return out
  }

  for (const piece of cookie.split(';')) {
    const [name, ...value] = piece.split('=')

    out[name.trim()] = value.join('=')
  }

  return out
}

/**
 * @param {Headers} headers
 * @param {string} name
 * @param {{ path?: string, domain?: string }|undefined} attributes
 * @returns {void}
 */
function deleteCookie (headers, name, attributes) {
  webidl.argumentLengthCheck(arguments, 2, { header: 'deleteCookie' })

  webidl.brandCheck(headers, Headers, { strict: false })

  name = webidl.converters.DOMString(name)
  attributes = webidl.converters.DeleteCookieAttributes(attributes)

  // Matches behavior of
  // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278
  setCookie(headers, {
    name,
    value: '',
    expires: new Date(0),
    ...attributes
  })
}

/**
 * @param {Headers} headers
 * @returns {Cookie[]}
 */
function getSetCookies (headers) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'getSetCookies' })

  webidl.brandCheck(headers, Headers, { strict: false })

  const cookies = headers.getSetCookie()

  if (!cookies) {
    return []
  }

  return cookies.map((pair) => parseSetCookie(pair))
}

/**
 * @param {Headers} headers
 * @param {Cookie} cookie
 * @returns {void}
 */
function setCookie (headers, cookie) {
  webidl.argumentLengthCheck(arguments, 2, { header: 'setCookie' })

  webidl.brandCheck(headers, Headers, { strict: false })

  cookie = webidl.converters.Cookie(cookie)

  const str = stringify(cookie)

  if (str) {
    headers.append('Set-Cookie', stringify(cookie))
  }
}

webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'path',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'domain',
    defaultValue: null
  }
])

webidl.converters.Cookie = webidl.dictionaryConverter([
  {
    converter: webidl.converters.DOMString,
    key: 'name'
  },
  {
    converter: webidl.converters.DOMString,
    key: 'value'
  },
  {
    converter: webidl.nullableConverter((value) => {
      if (typeof value === 'number') {
        return webidl.converters['unsigned long long'](value)
      }

      return new Date(value)
    }),
    key: 'expires',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters['long long']),
    key: 'maxAge',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'domain',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.DOMString),
    key: 'path',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: 'secure',
    defaultValue: null
  },
  {
    converter: webidl.nullableConverter(webidl.converters.boolean),
    key: 'httpOnly',
    defaultValue: null
  },
  {
    converter: webidl.converters.USVString,
    key: 'sameSite',
    allowedValues: ['Strict', 'Lax', 'None']
  },
  {
    converter: webidl.sequenceConverter(webidl.converters.DOMString),
    key: 'unparsed',
    defaultValue: []
  }
])

module.exports = {
  getCookies,
  deleteCookie,
  getSetCookies,
  setCookie
}


/***/ }),

/***/ 5746:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { maxNameValuePairSize, maxAttributeValueSize } = __nccwpck_require__(9908)
const { isCTLExcludingHtab } = __nccwpck_require__(4061)
const { collectASequenceOfCodePointsFast } = __nccwpck_require__(6615)
const assert = __nccwpck_require__(2613)

/**
 * @description Parses the field-value attributes of a set-cookie header string.
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} header
 * @returns if the header is invalid, null will be returned
 */
function parseSetCookie (header) {
  // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F
  //    character (CTL characters excluding HTAB): Abort these steps and
  //    ignore the set-cookie-string entirely.
  if (isCTLExcludingHtab(header)) {
    return null
  }

  let nameValuePair = ''
  let unparsedAttributes = ''
  let name = ''
  let value = ''

  // 2. If the set-cookie-string contains a %x3B (";") character:
  if (header.includes(';')) {
    // 1. The name-value-pair string consists of the characters up to,
    //    but not including, the first %x3B (";"), and the unparsed-
    //    attributes consist of the remainder of the set-cookie-string
    //    (including the %x3B (";") in question).
    const position = { position: 0 }

    nameValuePair = collectASequenceOfCodePointsFast(';', header, position)
    unparsedAttributes = header.slice(position.position)
  } else {
    // Otherwise:

    // 1. The name-value-pair string consists of all the characters
    //    contained in the set-cookie-string, and the unparsed-
    //    attributes is the empty string.
    nameValuePair = header
  }

  // 3. If the name-value-pair string lacks a %x3D ("=") character, then
  //    the name string is empty, and the value string is the value of
  //    name-value-pair.
  if (!nameValuePair.includes('=')) {
    value = nameValuePair
  } else {
    //    Otherwise, the name string consists of the characters up to, but
    //    not including, the first %x3D ("=") character, and the (possibly
    //    empty) value string consists of the characters after the first
    //    %x3D ("=") character.
    const position = { position: 0 }
    name = collectASequenceOfCodePointsFast(
      '=',
      nameValuePair,
      position
    )
    value = nameValuePair.slice(position.position + 1)
  }

  // 4. Remove any leading or trailing WSP characters from the name
  //    string and the value string.
  name = name.trim()
  value = value.trim()

  // 5. If the sum of the lengths of the name string and the value string
  //    is more than 4096 octets, abort these steps and ignore the set-
  //    cookie-string entirely.
  if (name.length + value.length > maxNameValuePairSize) {
    return null
  }

  // 6. The cookie-name is the name string, and the cookie-value is the
  //    value string.
  return {
    name, value, ...parseUnparsedAttributes(unparsedAttributes)
  }
}

/**
 * Parses the remaining attributes of a set-cookie header
 * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
 * @param {string} unparsedAttributes
 * @param {[Object.<string, unknown>]={}} cookieAttributeList
 */
function parseUnparsedAttributes (unparsedAttributes, cookieAttributeList = {}) {
  // 1. If the unparsed-attributes string is empty, skip the rest of
  //    these steps.
  if (unparsedAttributes.length === 0) {
    return cookieAttributeList
  }

  // 2. Discard the first character of the unparsed-attributes (which
  //    will be a %x3B (";") character).
  assert(unparsedAttributes[0] === ';')
  unparsedAttributes = unparsedAttributes.slice(1)

  let cookieAv = ''

  // 3. If the remaining unparsed-attributes contains a %x3B (";")
  //    character:
  if (unparsedAttributes.includes(';')) {
    // 1. Consume the characters of the unparsed-attributes up to, but
    //    not including, the first %x3B (";") character.
    cookieAv = collectASequenceOfCodePointsFast(
      ';',
      unparsedAttributes,
      { position: 0 }
    )
    unparsedAttributes = unparsedAttributes.slice(cookieAv.length)
  } else {
    // Otherwise:

    // 1. Consume the remainder of the unparsed-attributes.
    cookieAv = unparsedAttributes
    unparsedAttributes = ''
  }

  // Let the cookie-av string be the characters consumed in this step.

  let attributeName = ''
  let attributeValue = ''

  // 4. If the cookie-av string contains a %x3D ("=") character:
  if (cookieAv.includes('=')) {
    // 1. The (possibly empty) attribute-name string consists of the
    //    characters up to, but not including, the first %x3D ("=")
    //    character, and the (possibly empty) attribute-value string
    //    consists of the characters after the first %x3D ("=")
    //    character.
    const position = { position: 0 }

    attributeName = collectASequenceOfCodePointsFast(
      '=',
      cookieAv,
      position
    )
    attributeValue = cookieAv.slice(position.position + 1)
  } else {
    // Otherwise:

    // 1. The attribute-name string consists of the entire cookie-av
    //    string, and the attribute-value string is empty.
    attributeName = cookieAv
  }

  // 5. Remove any leading or trailing WSP characters from the attribute-
  //    name string and the attribute-value string.
  attributeName = attributeName.trim()
  attributeValue = attributeValue.trim()

  // 6. If the attribute-value is longer than 1024 octets, ignore the
  //    cookie-av string and return to Step 1 of this algorithm.
  if (attributeValue.length > maxAttributeValueSize) {
    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
  }

  // 7. Process the attribute-name and attribute-value according to the
  //    requirements in the following subsections.  (Notice that
  //    attributes with unrecognized attribute-names are ignored.)
  const attributeNameLowercase = attributeName.toLowerCase()

  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1
  // If the attribute-name case-insensitively matches the string
  // "Expires", the user agent MUST process the cookie-av as follows.
  if (attributeNameLowercase === 'expires') {
    // 1. Let the expiry-time be the result of parsing the attribute-value
    //    as cookie-date (see Section 5.1.1).
    const expiryTime = new Date(attributeValue)

    // 2. If the attribute-value failed to parse as a cookie date, ignore
    //    the cookie-av.

    cookieAttributeList.expires = expiryTime
  } else if (attributeNameLowercase === 'max-age') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2
    // If the attribute-name case-insensitively matches the string "Max-
    // Age", the user agent MUST process the cookie-av as follows.

    // 1. If the first character of the attribute-value is not a DIGIT or a
    //    "-" character, ignore the cookie-av.
    const charCode = attributeValue.charCodeAt(0)

    if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
    }

    // 2. If the remainder of attribute-value contains a non-DIGIT
    //    character, ignore the cookie-av.
    if (!/^\d+$/.test(attributeValue)) {
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
    }

    // 3. Let delta-seconds be the attribute-value converted to an integer.
    const deltaSeconds = Number(attributeValue)

    // 4. Let cookie-age-limit be the maximum age of the cookie (which
    //    SHOULD be 400 days or less, see Section 4.1.2.2).

    // 5. Set delta-seconds to the smaller of its present value and cookie-
    //    age-limit.
    // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)

    // 6. If delta-seconds is less than or equal to zero (0), let expiry-
    //    time be the earliest representable date and time.  Otherwise, let
    //    the expiry-time be the current date and time plus delta-seconds
    //    seconds.
    // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds

    // 7. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Max-Age and an attribute-value of expiry-time.
    cookieAttributeList.maxAge = deltaSeconds
  } else if (attributeNameLowercase === 'domain') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3
    // If the attribute-name case-insensitively matches the string "Domain",
    // the user agent MUST process the cookie-av as follows.

    // 1. Let cookie-domain be the attribute-value.
    let cookieDomain = attributeValue

    // 2. If cookie-domain starts with %x2E ("."), let cookie-domain be
    //    cookie-domain without its leading %x2E (".").
    if (cookieDomain[0] === '.') {
      cookieDomain = cookieDomain.slice(1)
    }

    // 3. Convert the cookie-domain to lower case.
    cookieDomain = cookieDomain.toLowerCase()

    // 4. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Domain and an attribute-value of cookie-domain.
    cookieAttributeList.domain = cookieDomain
  } else if (attributeNameLowercase === 'path') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4
    // If the attribute-name case-insensitively matches the string "Path",
    // the user agent MUST process the cookie-av as follows.

    // 1. If the attribute-value is empty or if the first character of the
    //    attribute-value is not %x2F ("/"):
    let cookiePath = ''
    if (attributeValue.length === 0 || attributeValue[0] !== '/') {
      // 1. Let cookie-path be the default-path.
      cookiePath = '/'
    } else {
      // Otherwise:

      // 1. Let cookie-path be the attribute-value.
      cookiePath = attributeValue
    }

    // 2. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of Path and an attribute-value of cookie-path.
    cookieAttributeList.path = cookiePath
  } else if (attributeNameLowercase === 'secure') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5
    // If the attribute-name case-insensitively matches the string "Secure",
    // the user agent MUST append an attribute to the cookie-attribute-list
    // with an attribute-name of Secure and an empty attribute-value.

    cookieAttributeList.secure = true
  } else if (attributeNameLowercase === 'httponly') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6
    // If the attribute-name case-insensitively matches the string
    // "HttpOnly", the user agent MUST append an attribute to the cookie-
    // attribute-list with an attribute-name of HttpOnly and an empty
    // attribute-value.

    cookieAttributeList.httpOnly = true
  } else if (attributeNameLowercase === 'samesite') {
    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7
    // If the attribute-name case-insensitively matches the string
    // "SameSite", the user agent MUST process the cookie-av as follows:

    // 1. Let enforcement be "Default".
    let enforcement = 'Default'

    const attributeValueLowercase = attributeValue.toLowerCase()
    // 2. If cookie-av's attribute-value is a case-insensitive match for
    //    "None", set enforcement to "None".
    if (attributeValueLowercase.includes('none')) {
      enforcement = 'None'
    }

    // 3. If cookie-av's attribute-value is a case-insensitive match for
    //    "Strict", set enforcement to "Strict".
    if (attributeValueLowercase.includes('strict')) {
      enforcement = 'Strict'
    }

    // 4. If cookie-av's attribute-value is a case-insensitive match for
    //    "Lax", set enforcement to "Lax".
    if (attributeValueLowercase.includes('lax')) {
      enforcement = 'Lax'
    }

    // 5. Append an attribute to the cookie-attribute-list with an
    //    attribute-name of "SameSite" and an attribute-value of
    //    enforcement.
    cookieAttributeList.sameSite = enforcement
  } else {
    cookieAttributeList.unparsed ??= []

    cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`)
  }

  // 8. Return to Step 1 of this algorithm.
  return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)
}

module.exports = {
  parseSetCookie,
  parseUnparsedAttributes
}


/***/ }),

/***/ 4061:
/***/ ((module) => {

"use strict";


/**
 * @param {string} value
 * @returns {boolean}
 */
function isCTLExcludingHtab (value) {
  if (value.length === 0) {
    return false
  }

  for (const char of value) {
    const code = char.charCodeAt(0)

    if (
      (code >= 0x00 || code <= 0x08) ||
      (code >= 0x0A || code <= 0x1F) ||
      code === 0x7F
    ) {
      return false
    }
  }
}

/**
 CHAR           = <any US-ASCII character (octets 0 - 127)>
 token          = 1*<any CHAR except CTLs or separators>
 separators     = "(" | ")" | "<" | ">" | "@"
                | "," | ";" | ":" | "\" | <">
                | "/" | "[" | "]" | "?" | "="
                | "{" | "}" | SP | HT
 * @param {string} name
 */
function validateCookieName (name) {
  for (const char of name) {
    const code = char.charCodeAt(0)

    if (
      (code <= 0x20 || code > 0x7F) ||
      char === '(' ||
      char === ')' ||
      char === '>' ||
      char === '<' ||
      char === '@' ||
      char === ',' ||
      char === ';' ||
      char === ':' ||
      char === '\\' ||
      char === '"' ||
      char === '/' ||
      char === '[' ||
      char === ']' ||
      char === '?' ||
      char === '=' ||
      char === '{' ||
      char === '}'
    ) {
      throw new Error('Invalid cookie name')
    }
  }
}

/**
 cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
 cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
                       ; US-ASCII characters excluding CTLs,
                       ; whitespace DQUOTE, comma, semicolon,
                       ; and backslash
 * @param {string} value
 */
function validateCookieValue (value) {
  for (const char of value) {
    const code = char.charCodeAt(0)

    if (
      code < 0x21 || // exclude CTLs (0-31)
      code === 0x22 ||
      code === 0x2C ||
      code === 0x3B ||
      code === 0x5C ||
      code > 0x7E // non-ascii
    ) {
      throw new Error('Invalid header value')
    }
  }
}

/**
 * path-value        = <any CHAR except CTLs or ";">
 * @param {string} path
 */
function validateCookiePath (path) {
  for (const char of path) {
    const code = char.charCodeAt(0)

    if (code < 0x21 || char === ';') {
      throw new Error('Invalid cookie path')
    }
  }
}

/**
 * I have no idea why these values aren't allowed to be honest,
 * but Deno tests these. - Khafra
 * @param {string} domain
 */
function validateCookieDomain (domain) {
  if (
    domain.startsWith('-') ||
    domain.endsWith('.') ||
    domain.endsWith('-')
  ) {
    throw new Error('Invalid cookie domain')
  }
}

/**
 * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
 * @param {number|Date} date
  IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
  ; fixed length/zone/capitalization subset of the format
  ; see Section 3.3 of [RFC5322]

  day-name     = %x4D.6F.6E ; "Mon", case-sensitive
              / %x54.75.65 ; "Tue", case-sensitive
              / %x57.65.64 ; "Wed", case-sensitive
              / %x54.68.75 ; "Thu", case-sensitive
              / %x46.72.69 ; "Fri", case-sensitive
              / %x53.61.74 ; "Sat", case-sensitive
              / %x53.75.6E ; "Sun", case-sensitive
  date1        = day SP month SP year
                  ; e.g., 02 Jun 1982

  day          = 2DIGIT
  month        = %x4A.61.6E ; "Jan", case-sensitive
              / %x46.65.62 ; "Feb", case-sensitive
              / %x4D.61.72 ; "Mar", case-sensitive
              / %x41.70.72 ; "Apr", case-sensitive
              / %x4D.61.79 ; "May", case-sensitive
              / %x4A.75.6E ; "Jun", case-sensitive
              / %x4A.75.6C ; "Jul", case-sensitive
              / %x41.75.67 ; "Aug", case-sensitive
              / %x53.65.70 ; "Sep", case-sensitive
              / %x4F.63.74 ; "Oct", case-sensitive
              / %x4E.6F.76 ; "Nov", case-sensitive
              / %x44.65.63 ; "Dec", case-sensitive
  year         = 4DIGIT

  GMT          = %x47.4D.54 ; "GMT", case-sensitive

  time-of-day  = hour ":" minute ":" second
              ; 00:00:00 - 23:59:60 (leap second)

  hour         = 2DIGIT
  minute       = 2DIGIT
  second       = 2DIGIT
 */
function toIMFDate (date) {
  if (typeof date === 'number') {
    date = new Date(date)
  }

  const days = [
    'Sun', 'Mon', 'Tue', 'Wed',
    'Thu', 'Fri', 'Sat'
  ]

  const months = [
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
  ]

  const dayName = days[date.getUTCDay()]
  const day = date.getUTCDate().toString().padStart(2, '0')
  const month = months[date.getUTCMonth()]
  const year = date.getUTCFullYear()
  const hour = date.getUTCHours().toString().padStart(2, '0')
  const minute = date.getUTCMinutes().toString().padStart(2, '0')
  const second = date.getUTCSeconds().toString().padStart(2, '0')

  return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`
}

/**
 max-age-av        = "Max-Age=" non-zero-digit *DIGIT
                       ; In practice, both expires-av and max-age-av
                       ; are limited to dates representable by the
                       ; user agent.
 * @param {number} maxAge
 */
function validateCookieMaxAge (maxAge) {
  if (maxAge < 0) {
    throw new Error('Invalid cookie max-age')
  }
}

/**
 * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
 * @param {import('./index').Cookie} cookie
 */
function stringify (cookie) {
  if (cookie.name.length === 0) {
    return null
  }

  validateCookieName(cookie.name)
  validateCookieValue(cookie.value)

  const out = [`${cookie.name}=${cookie.value}`]

  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1
  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2
  if (cookie.name.startsWith('__Secure-')) {
    cookie.secure = true
  }

  if (cookie.name.startsWith('__Host-')) {
    cookie.secure = true
    cookie.domain = null
    cookie.path = '/'
  }

  if (cookie.secure) {
    out.push('Secure')
  }

  if (cookie.httpOnly) {
    out.push('HttpOnly')
  }

  if (typeof cookie.maxAge === 'number') {
    validateCookieMaxAge(cookie.maxAge)
    out.push(`Max-Age=${cookie.maxAge}`)
  }

  if (cookie.domain) {
    validateCookieDomain(cookie.domain)
    out.push(`Domain=${cookie.domain}`)
  }

  if (cookie.path) {
    validateCookiePath(cookie.path)
    out.push(`Path=${cookie.path}`)
  }

  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {
    out.push(`Expires=${toIMFDate(cookie.expires)}`)
  }

  if (cookie.sameSite) {
    out.push(`SameSite=${cookie.sameSite}`)
  }

  for (const part of cookie.unparsed) {
    if (!part.includes('=')) {
      throw new Error('Invalid unparsed')
    }

    const [key, ...value] = part.split('=')

    out.push(`${key.trim()}=${value.join('=')}`)
  }

  return out.join('; ')
}

module.exports = {
  isCTLExcludingHtab,
  validateCookieName,
  validateCookiePath,
  validateCookieValue,
  toIMFDate,
  stringify
}


/***/ }),

/***/ 863:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const net = __nccwpck_require__(9278)
const assert = __nccwpck_require__(2613)
const util = __nccwpck_require__(7001)
const { InvalidArgumentError, ConnectTimeoutError } = __nccwpck_require__(5606)

let tls // include tls conditionally since it is not always available

// TODO: session re-use does not wait for the first
// connection to resolve the session and might therefore
// resolve the same servername multiple times even when
// re-use is enabled.

let SessionCache
// FIXME: remove workaround when the Node bug is fixed
// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308
if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
  SessionCache = class WeakSessionCache {
    constructor (maxCachedSessions) {
      this._maxCachedSessions = maxCachedSessions
      this._sessionCache = new Map()
      this._sessionRegistry = new global.FinalizationRegistry((key) => {
        if (this._sessionCache.size < this._maxCachedSessions) {
          return
        }

        const ref = this._sessionCache.get(key)
        if (ref !== undefined && ref.deref() === undefined) {
          this._sessionCache.delete(key)
        }
      })
    }

    get (sessionKey) {
      const ref = this._sessionCache.get(sessionKey)
      return ref ? ref.deref() : null
    }

    set (sessionKey, session) {
      if (this._maxCachedSessions === 0) {
        return
      }

      this._sessionCache.set(sessionKey, new WeakRef(session))
      this._sessionRegistry.register(session, sessionKey)
    }
  }
} else {
  SessionCache = class SimpleSessionCache {
    constructor (maxCachedSessions) {
      this._maxCachedSessions = maxCachedSessions
      this._sessionCache = new Map()
    }

    get (sessionKey) {
      return this._sessionCache.get(sessionKey)
    }

    set (sessionKey, session) {
      if (this._maxCachedSessions === 0) {
        return
      }

      if (this._sessionCache.size >= this._maxCachedSessions) {
        // remove the oldest session
        const { value: oldestKey } = this._sessionCache.keys().next()
        this._sessionCache.delete(oldestKey)
      }

      this._sessionCache.set(sessionKey, session)
    }
  }
}

function buildConnector ({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {
  if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
    throw new InvalidArgumentError('maxCachedSessions must be a positive integer or zero')
  }

  const options = { path: socketPath, ...opts }
  const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions)
  timeout = timeout == null ? 10e3 : timeout
  allowH2 = allowH2 != null ? allowH2 : false
  return function connect ({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
    let socket
    if (protocol === 'https:') {
      if (!tls) {
        tls = __nccwpck_require__(4756)
      }
      servername = servername || options.servername || util.getServerName(host) || null

      const sessionKey = servername || hostname
      const session = sessionCache.get(sessionKey) || null

      assert(sessionKey)

      socket = tls.connect({
        highWaterMark: 16384, // TLS in node can't have bigger HWM anyway...
        ...options,
        servername,
        session,
        localAddress,
        // TODO(HTTP/2): Add support for h2c
        ALPNProtocols: allowH2 ? ['http/1.1', 'h2'] : ['http/1.1'],
        socket: httpSocket, // upgrade socket connection
        port: port || 443,
        host: hostname
      })

      socket
        .on('session', function (session) {
          // TODO (fix): Can a session become invalid once established? Don't think so?
          sessionCache.set(sessionKey, session)
        })
    } else {
      assert(!httpSocket, 'httpSocket can only be sent on TLS update')
      socket = net.connect({
        highWaterMark: 64 * 1024, // Same as nodejs fs streams.
        ...options,
        localAddress,
        port: port || 80,
        host: hostname
      })
    }

    // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket
    if (options.keepAlive == null || options.keepAlive) {
      const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay
      socket.setKeepAlive(true, keepAliveInitialDelay)
    }

    const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout)

    socket
      .setNoDelay(true)
      .once(protocol === 'https:' ? 'secureConnect' : 'connect', function () {
        cancelTimeout()

        if (callback) {
          const cb = callback
          callback = null
          cb(null, this)
        }
      })
      .on('error', function (err) {
        cancelTimeout()

        if (callback) {
          const cb = callback
          callback = null
          cb(err)
        }
      })

    return socket
  }
}

function setupTimeout (onConnectTimeout, timeout) {
  if (!timeout) {
    return () => {}
  }

  let s1 = null
  let s2 = null
  const timeoutId = setTimeout(() => {
    // setImmediate is added to make sure that we priotorise socket error events over timeouts
    s1 = setImmediate(() => {
      if (process.platform === 'win32') {
        // Windows needs an extra setImmediate probably due to implementation differences in the socket logic
        s2 = setImmediate(() => onConnectTimeout())
      } else {
        onConnectTimeout()
      }
    })
  }, timeout)
  return () => {
    clearTimeout(timeoutId)
    clearImmediate(s1)
    clearImmediate(s2)
  }
}

function onConnectTimeout (socket) {
  util.destroy(socket, new ConnectTimeoutError())
}

module.exports = buildConnector


/***/ }),

/***/ 6600:
/***/ ((module) => {

"use strict";


/** @type {Record<string, string | undefined>} */
const headerNameLowerCasedRecord = {}

// https://developer.mozilla.org/docs/Web/HTTP/Headers
const wellknownHeaderNames = [
  'Accept',
  'Accept-Encoding',
  'Accept-Language',
  'Accept-Ranges',
  'Access-Control-Allow-Credentials',
  'Access-Control-Allow-Headers',
  'Access-Control-Allow-Methods',
  'Access-Control-Allow-Origin',
  'Access-Control-Expose-Headers',
  'Access-Control-Max-Age',
  'Access-Control-Request-Headers',
  'Access-Control-Request-Method',
  'Age',
  'Allow',
  'Alt-Svc',
  'Alt-Used',
  'Authorization',
  'Cache-Control',
  'Clear-Site-Data',
  'Connection',
  'Content-Disposition',
  'Content-Encoding',
  'Content-Language',
  'Content-Length',
  'Content-Location',
  'Content-Range',
  'Content-Security-Policy',
  'Content-Security-Policy-Report-Only',
  'Content-Type',
  'Cookie',
  'Cross-Origin-Embedder-Policy',
  'Cross-Origin-Opener-Policy',
  'Cross-Origin-Resource-Policy',
  'Date',
  'Device-Memory',
  'Downlink',
  'ECT',
  'ETag',
  'Expect',
  'Expect-CT',
  'Expires',
  'Forwarded',
  'From',
  'Host',
  'If-Match',
  'If-Modified-Since',
  'If-None-Match',
  'If-Range',
  'If-Unmodified-Since',
  'Keep-Alive',
  'Last-Modified',
  'Link',
  'Location',
  'Max-Forwards',
  'Origin',
  'Permissions-Policy',
  'Pragma',
  'Proxy-Authenticate',
  'Proxy-Authorization',
  'RTT',
  'Range',
  'Referer',
  'Referrer-Policy',
  'Refresh',
  'Retry-After',
  'Sec-WebSocket-Accept',
  'Sec-WebSocket-Extensions',
  'Sec-WebSocket-Key',
  'Sec-WebSocket-Protocol',
  'Sec-WebSocket-Version',
  'Server',
  'Server-Timing',
  'Service-Worker-Allowed',
  'Service-Worker-Navigation-Preload',
  'Set-Cookie',
  'SourceMap',
  'Strict-Transport-Security',
  'Supports-Loading-Mode',
  'TE',
  'Timing-Allow-Origin',
  'Trailer',
  'Transfer-Encoding',
  'Upgrade',
  'Upgrade-Insecure-Requests',
  'User-Agent',
  'Vary',
  'Via',
  'WWW-Authenticate',
  'X-Content-Type-Options',
  'X-DNS-Prefetch-Control',
  'X-Frame-Options',
  'X-Permitted-Cross-Domain-Policies',
  'X-Powered-By',
  'X-Requested-With',
  'X-XSS-Protection'
]

for (let i = 0; i < wellknownHeaderNames.length; ++i) {
  const key = wellknownHeaderNames[i]
  const lowerCasedKey = key.toLowerCase()
  headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] =
    lowerCasedKey
}

// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf(headerNameLowerCasedRecord, null)

module.exports = {
  wellknownHeaderNames,
  headerNameLowerCasedRecord
}


/***/ }),

/***/ 5606:
/***/ ((module) => {

"use strict";


class UndiciError extends Error {
  constructor (message) {
    super(message)
    this.name = 'UndiciError'
    this.code = 'UND_ERR'
  }
}

class ConnectTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ConnectTimeoutError)
    this.name = 'ConnectTimeoutError'
    this.message = message || 'Connect Timeout Error'
    this.code = 'UND_ERR_CONNECT_TIMEOUT'
  }
}

class HeadersTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, HeadersTimeoutError)
    this.name = 'HeadersTimeoutError'
    this.message = message || 'Headers Timeout Error'
    this.code = 'UND_ERR_HEADERS_TIMEOUT'
  }
}

class HeadersOverflowError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, HeadersOverflowError)
    this.name = 'HeadersOverflowError'
    this.message = message || 'Headers Overflow Error'
    this.code = 'UND_ERR_HEADERS_OVERFLOW'
  }
}

class BodyTimeoutError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, BodyTimeoutError)
    this.name = 'BodyTimeoutError'
    this.message = message || 'Body Timeout Error'
    this.code = 'UND_ERR_BODY_TIMEOUT'
  }
}

class ResponseStatusCodeError extends UndiciError {
  constructor (message, statusCode, headers, body) {
    super(message)
    Error.captureStackTrace(this, ResponseStatusCodeError)
    this.name = 'ResponseStatusCodeError'
    this.message = message || 'Response Status Code Error'
    this.code = 'UND_ERR_RESPONSE_STATUS_CODE'
    this.body = body
    this.status = statusCode
    this.statusCode = statusCode
    this.headers = headers
  }
}

class InvalidArgumentError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InvalidArgumentError)
    this.name = 'InvalidArgumentError'
    this.message = message || 'Invalid Argument Error'
    this.code = 'UND_ERR_INVALID_ARG'
  }
}

class InvalidReturnValueError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InvalidReturnValueError)
    this.name = 'InvalidReturnValueError'
    this.message = message || 'Invalid Return Value Error'
    this.code = 'UND_ERR_INVALID_RETURN_VALUE'
  }
}

class RequestAbortedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, RequestAbortedError)
    this.name = 'AbortError'
    this.message = message || 'Request aborted'
    this.code = 'UND_ERR_ABORTED'
  }
}

class InformationalError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, InformationalError)
    this.name = 'InformationalError'
    this.message = message || 'Request information'
    this.code = 'UND_ERR_INFO'
  }
}

class RequestContentLengthMismatchError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, RequestContentLengthMismatchError)
    this.name = 'RequestContentLengthMismatchError'
    this.message = message || 'Request body length does not match content-length header'
    this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH'
  }
}

class ResponseContentLengthMismatchError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ResponseContentLengthMismatchError)
    this.name = 'ResponseContentLengthMismatchError'
    this.message = message || 'Response body length does not match content-length header'
    this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH'
  }
}

class ClientDestroyedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ClientDestroyedError)
    this.name = 'ClientDestroyedError'
    this.message = message || 'The client is destroyed'
    this.code = 'UND_ERR_DESTROYED'
  }
}

class ClientClosedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ClientClosedError)
    this.name = 'ClientClosedError'
    this.message = message || 'The client is closed'
    this.code = 'UND_ERR_CLOSED'
  }
}

class SocketError extends UndiciError {
  constructor (message, socket) {
    super(message)
    Error.captureStackTrace(this, SocketError)
    this.name = 'SocketError'
    this.message = message || 'Socket error'
    this.code = 'UND_ERR_SOCKET'
    this.socket = socket
  }
}

class NotSupportedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, NotSupportedError)
    this.name = 'NotSupportedError'
    this.message = message || 'Not supported error'
    this.code = 'UND_ERR_NOT_SUPPORTED'
  }
}

class BalancedPoolMissingUpstreamError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, NotSupportedError)
    this.name = 'MissingUpstreamError'
    this.message = message || 'No upstream has been added to the BalancedPool'
    this.code = 'UND_ERR_BPL_MISSING_UPSTREAM'
  }
}

class HTTPParserError extends Error {
  constructor (message, code, data) {
    super(message)
    Error.captureStackTrace(this, HTTPParserError)
    this.name = 'HTTPParserError'
    this.code = code ? `HPE_${code}` : undefined
    this.data = data ? data.toString() : undefined
  }
}

class ResponseExceededMaxSizeError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, ResponseExceededMaxSizeError)
    this.name = 'ResponseExceededMaxSizeError'
    this.message = message || 'Response content exceeded max size'
    this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE'
  }
}

class RequestRetryError extends UndiciError {
  constructor (message, code, { headers, data }) {
    super(message)
    Error.captureStackTrace(this, RequestRetryError)
    this.name = 'RequestRetryError'
    this.message = message || 'Request retry error'
    this.code = 'UND_ERR_REQ_RETRY'
    this.statusCode = code
    this.data = data
    this.headers = headers
  }
}

module.exports = {
  HTTPParserError,
  UndiciError,
  HeadersTimeoutError,
  HeadersOverflowError,
  BodyTimeoutError,
  RequestContentLengthMismatchError,
  ConnectTimeoutError,
  ResponseStatusCodeError,
  InvalidArgumentError,
  InvalidReturnValueError,
  RequestAbortedError,
  ClientDestroyedError,
  ClientClosedError,
  InformationalError,
  SocketError,
  NotSupportedError,
  ResponseContentLengthMismatchError,
  BalancedPoolMissingUpstreamError,
  ResponseExceededMaxSizeError,
  RequestRetryError
}


/***/ }),

/***/ 9428:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  InvalidArgumentError,
  NotSupportedError
} = __nccwpck_require__(5606)
const assert = __nccwpck_require__(2613)
const { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = __nccwpck_require__(8136)
const util = __nccwpck_require__(7001)

// tokenRegExp and headerCharRegex have been lifted from
// https://github.com/nodejs/node/blob/main/lib/_http_common.js

/**
 * Verifies that the given val is a valid HTTP token
 * per the rules defined in RFC 7230
 * See https://tools.ietf.org/html/rfc7230#section-3.2.6
 */
const tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/

/**
 * Matches if val contains an invalid field-vchar
 *  field-value    = *( field-content / obs-fold )
 *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 *  field-vchar    = VCHAR / obs-text
 */
const headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/

// Verifies that a given path is valid does not contain control chars \x00 to \x20
const invalidPathRegex = /[^\u0021-\u00ff]/

const kHandler = Symbol('handler')

const channels = {}

let extractBody

try {
  const diagnosticsChannel = __nccwpck_require__(1637)
  channels.create = diagnosticsChannel.channel('undici:request:create')
  channels.bodySent = diagnosticsChannel.channel('undici:request:bodySent')
  channels.headers = diagnosticsChannel.channel('undici:request:headers')
  channels.trailers = diagnosticsChannel.channel('undici:request:trailers')
  channels.error = diagnosticsChannel.channel('undici:request:error')
} catch {
  channels.create = { hasSubscribers: false }
  channels.bodySent = { hasSubscribers: false }
  channels.headers = { hasSubscribers: false }
  channels.trailers = { hasSubscribers: false }
  channels.error = { hasSubscribers: false }
}

class Request {
  constructor (origin, {
    path,
    method,
    body,
    headers,
    query,
    idempotent,
    blocking,
    upgrade,
    headersTimeout,
    bodyTimeout,
    reset,
    throwOnError,
    expectContinue
  }, handler) {
    if (typeof path !== 'string') {
      throw new InvalidArgumentError('path must be a string')
    } else if (
      path[0] !== '/' &&
      !(path.startsWith('http://') || path.startsWith('https://')) &&
      method !== 'CONNECT'
    ) {
      throw new InvalidArgumentError('path must be an absolute URL or start with a slash')
    } else if (invalidPathRegex.exec(path) !== null) {
      throw new InvalidArgumentError('invalid request path')
    }

    if (typeof method !== 'string') {
      throw new InvalidArgumentError('method must be a string')
    } else if (tokenRegExp.exec(method) === null) {
      throw new InvalidArgumentError('invalid request method')
    }

    if (upgrade && typeof upgrade !== 'string') {
      throw new InvalidArgumentError('upgrade must be a string')
    }

    if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
      throw new InvalidArgumentError('invalid headersTimeout')
    }

    if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
      throw new InvalidArgumentError('invalid bodyTimeout')
    }

    if (reset != null && typeof reset !== 'boolean') {
      throw new InvalidArgumentError('invalid reset')
    }

    if (expectContinue != null && typeof expectContinue !== 'boolean') {
      throw new InvalidArgumentError('invalid expectContinue')
    }

    this.headersTimeout = headersTimeout

    this.bodyTimeout = bodyTimeout

    this.throwOnError = throwOnError === true

    this.method = method

    this.abort = null

    if (body == null) {
      this.body = null
    } else if (util.isStream(body)) {
      this.body = body

      const rState = this.body._readableState
      if (!rState || !rState.autoDestroy) {
        this.endHandler = function autoDestroy () {
          util.destroy(this)
        }
        this.body.on('end', this.endHandler)
      }

      this.errorHandler = err => {
        if (this.abort) {
          this.abort(err)
        } else {
          this.error = err
        }
      }
      this.body.on('error', this.errorHandler)
    } else if (util.isBuffer(body)) {
      this.body = body.byteLength ? body : null
    } else if (ArrayBuffer.isView(body)) {
      this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null
    } else if (body instanceof ArrayBuffer) {
      this.body = body.byteLength ? Buffer.from(body) : null
    } else if (typeof body === 'string') {
      this.body = body.length ? Buffer.from(body) : null
    } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {
      this.body = body
    } else {
      throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable')
    }

    this.completed = false

    this.aborted = false

    this.upgrade = upgrade || null

    this.path = query ? util.buildURL(path, query) : path

    this.origin = origin

    this.idempotent = idempotent == null
      ? method === 'HEAD' || method === 'GET'
      : idempotent

    this.blocking = blocking == null ? false : blocking

    this.reset = reset == null ? null : reset

    this.host = null

    this.contentLength = null

    this.contentType = null

    this.headers = ''

    // Only for H2
    this.expectContinue = expectContinue != null ? expectContinue : false

    if (Array.isArray(headers)) {
      if (headers.length % 2 !== 0) {
        throw new InvalidArgumentError('headers array must be even')
      }
      for (let i = 0; i < headers.length; i += 2) {
        processHeader(this, headers[i], headers[i + 1])
      }
    } else if (headers && typeof headers === 'object') {
      const keys = Object.keys(headers)
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i]
        processHeader(this, key, headers[key])
      }
    } else if (headers != null) {
      throw new InvalidArgumentError('headers must be an object or an array')
    }

    if (util.isFormDataLike(this.body)) {
      if (util.nodeMajor < 16 || (util.nodeMajor === 16 && util.nodeMinor < 8)) {
        throw new InvalidArgumentError('Form-Data bodies are only supported in node v16.8 and newer.')
      }

      if (!extractBody) {
        extractBody = (__nccwpck_require__(6564).extractBody)
      }

      const [bodyStream, contentType] = extractBody(body)
      if (this.contentType == null) {
        this.contentType = contentType
        this.headers += `content-type: ${contentType}\r\n`
      }
      this.body = bodyStream.stream
      this.contentLength = bodyStream.length
    } else if (util.isBlobLike(body) && this.contentType == null && body.type) {
      this.contentType = body.type
      this.headers += `content-type: ${body.type}\r\n`
    }

    util.validateHandler(handler, method, upgrade)

    this.servername = util.getServerName(this.host)

    this[kHandler] = handler

    if (channels.create.hasSubscribers) {
      channels.create.publish({ request: this })
    }
  }

  onBodySent (chunk) {
    if (this[kHandler].onBodySent) {
      try {
        return this[kHandler].onBodySent(chunk)
      } catch (err) {
        this.abort(err)
      }
    }
  }

  onRequestSent () {
    if (channels.bodySent.hasSubscribers) {
      channels.bodySent.publish({ request: this })
    }

    if (this[kHandler].onRequestSent) {
      try {
        return this[kHandler].onRequestSent()
      } catch (err) {
        this.abort(err)
      }
    }
  }

  onConnect (abort) {
    assert(!this.aborted)
    assert(!this.completed)

    if (this.error) {
      abort(this.error)
    } else {
      this.abort = abort
      return this[kHandler].onConnect(abort)
    }
  }

  onHeaders (statusCode, headers, resume, statusText) {
    assert(!this.aborted)
    assert(!this.completed)

    if (channels.headers.hasSubscribers) {
      channels.headers.publish({ request: this, response: { statusCode, headers, statusText } })
    }

    try {
      return this[kHandler].onHeaders(statusCode, headers, resume, statusText)
    } catch (err) {
      this.abort(err)
    }
  }

  onData (chunk) {
    assert(!this.aborted)
    assert(!this.completed)

    try {
      return this[kHandler].onData(chunk)
    } catch (err) {
      this.abort(err)
      return false
    }
  }

  onUpgrade (statusCode, headers, socket) {
    assert(!this.aborted)
    assert(!this.completed)

    return this[kHandler].onUpgrade(statusCode, headers, socket)
  }

  onComplete (trailers) {
    this.onFinally()

    assert(!this.aborted)

    this.completed = true
    if (channels.trailers.hasSubscribers) {
      channels.trailers.publish({ request: this, trailers })
    }

    try {
      return this[kHandler].onComplete(trailers)
    } catch (err) {
      // TODO (fix): This might be a bad idea?
      this.onError(err)
    }
  }

  onError (error) {
    this.onFinally()

    if (channels.error.hasSubscribers) {
      channels.error.publish({ request: this, error })
    }

    if (this.aborted) {
      return
    }
    this.aborted = true

    return this[kHandler].onError(error)
  }

  onFinally () {
    if (this.errorHandler) {
      this.body.off('error', this.errorHandler)
      this.errorHandler = null
    }

    if (this.endHandler) {
      this.body.off('end', this.endHandler)
      this.endHandler = null
    }
  }

  // TODO: adjust to support H2
  addHeader (key, value) {
    processHeader(this, key, value)
    return this
  }

  static [kHTTP1BuildRequest] (origin, opts, handler) {
    // TODO: Migrate header parsing here, to make Requests
    // HTTP agnostic
    return new Request(origin, opts, handler)
  }

  static [kHTTP2BuildRequest] (origin, opts, handler) {
    const headers = opts.headers
    opts = { ...opts, headers: null }

    const request = new Request(origin, opts, handler)

    request.headers = {}

    if (Array.isArray(headers)) {
      if (headers.length % 2 !== 0) {
        throw new InvalidArgumentError('headers array must be even')
      }
      for (let i = 0; i < headers.length; i += 2) {
        processHeader(request, headers[i], headers[i + 1], true)
      }
    } else if (headers && typeof headers === 'object') {
      const keys = Object.keys(headers)
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i]
        processHeader(request, key, headers[key], true)
      }
    } else if (headers != null) {
      throw new InvalidArgumentError('headers must be an object or an array')
    }

    return request
  }

  static [kHTTP2CopyHeaders] (raw) {
    const rawHeaders = raw.split('\r\n')
    const headers = {}

    for (const header of rawHeaders) {
      const [key, value] = header.split(': ')

      if (value == null || value.length === 0) continue

      if (headers[key]) headers[key] += `,${value}`
      else headers[key] = value
    }

    return headers
  }
}

function processHeaderValue (key, val, skipAppend) {
  if (val && typeof val === 'object') {
    throw new InvalidArgumentError(`invalid ${key} header`)
  }

  val = val != null ? `${val}` : ''

  if (headerCharRegex.exec(val) !== null) {
    throw new InvalidArgumentError(`invalid ${key} header`)
  }

  return skipAppend ? val : `${key}: ${val}\r\n`
}

function processHeader (request, key, val, skipAppend = false) {
  if (val && (typeof val === 'object' && !Array.isArray(val))) {
    throw new InvalidArgumentError(`invalid ${key} header`)
  } else if (val === undefined) {
    return
  }

  if (
    request.host === null &&
    key.length === 4 &&
    key.toLowerCase() === 'host'
  ) {
    if (headerCharRegex.exec(val) !== null) {
      throw new InvalidArgumentError(`invalid ${key} header`)
    }
    // Consumed by Client
    request.host = val
  } else if (
    request.contentLength === null &&
    key.length === 14 &&
    key.toLowerCase() === 'content-length'
  ) {
    request.contentLength = parseInt(val, 10)
    if (!Number.isFinite(request.contentLength)) {
      throw new InvalidArgumentError('invalid content-length header')
    }
  } else if (
    request.contentType === null &&
    key.length === 12 &&
    key.toLowerCase() === 'content-type'
  ) {
    request.contentType = val
    if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)
    else request.headers += processHeaderValue(key, val)
  } else if (
    key.length === 17 &&
    key.toLowerCase() === 'transfer-encoding'
  ) {
    throw new InvalidArgumentError('invalid transfer-encoding header')
  } else if (
    key.length === 10 &&
    key.toLowerCase() === 'connection'
  ) {
    const value = typeof val === 'string' ? val.toLowerCase() : null
    if (value !== 'close' && value !== 'keep-alive') {
      throw new InvalidArgumentError('invalid connection header')
    } else if (value === 'close') {
      request.reset = true
    }
  } else if (
    key.length === 10 &&
    key.toLowerCase() === 'keep-alive'
  ) {
    throw new InvalidArgumentError('invalid keep-alive header')
  } else if (
    key.length === 7 &&
    key.toLowerCase() === 'upgrade'
  ) {
    throw new InvalidArgumentError('invalid upgrade header')
  } else if (
    key.length === 6 &&
    key.toLowerCase() === 'expect'
  ) {
    throw new NotSupportedError('expect header not supported')
  } else if (tokenRegExp.exec(key) === null) {
    throw new InvalidArgumentError('invalid header key')
  } else {
    if (Array.isArray(val)) {
      for (let i = 0; i < val.length; i++) {
        if (skipAppend) {
          if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`
          else request.headers[key] = processHeaderValue(key, val[i], skipAppend)
        } else {
          request.headers += processHeaderValue(key, val[i])
        }
      }
    } else {
      if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)
      else request.headers += processHeaderValue(key, val)
    }
  }
}

module.exports = Request


/***/ }),

/***/ 8136:
/***/ ((module) => {

module.exports = {
  kClose: Symbol('close'),
  kDestroy: Symbol('destroy'),
  kDispatch: Symbol('dispatch'),
  kUrl: Symbol('url'),
  kWriting: Symbol('writing'),
  kResuming: Symbol('resuming'),
  kQueue: Symbol('queue'),
  kConnect: Symbol('connect'),
  kConnecting: Symbol('connecting'),
  kHeadersList: Symbol('headers list'),
  kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),
  kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),
  kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),
  kKeepAliveTimeoutValue: Symbol('keep alive timeout'),
  kKeepAlive: Symbol('keep alive'),
  kHeadersTimeout: Symbol('headers timeout'),
  kBodyTimeout: Symbol('body timeout'),
  kServerName: Symbol('server name'),
  kLocalAddress: Symbol('local address'),
  kHost: Symbol('host'),
  kNoRef: Symbol('no ref'),
  kBodyUsed: Symbol('used'),
  kRunning: Symbol('running'),
  kBlocking: Symbol('blocking'),
  kPending: Symbol('pending'),
  kSize: Symbol('size'),
  kBusy: Symbol('busy'),
  kQueued: Symbol('queued'),
  kFree: Symbol('free'),
  kConnected: Symbol('connected'),
  kClosed: Symbol('closed'),
  kNeedDrain: Symbol('need drain'),
  kReset: Symbol('reset'),
  kDestroyed: Symbol.for('nodejs.stream.destroyed'),
  kMaxHeadersSize: Symbol('max headers size'),
  kRunningIdx: Symbol('running index'),
  kPendingIdx: Symbol('pending index'),
  kError: Symbol('error'),
  kClients: Symbol('clients'),
  kClient: Symbol('client'),
  kParser: Symbol('parser'),
  kOnDestroyed: Symbol('destroy callbacks'),
  kPipelining: Symbol('pipelining'),
  kSocket: Symbol('socket'),
  kHostHeader: Symbol('host header'),
  kConnector: Symbol('connector'),
  kStrictContentLength: Symbol('strict content length'),
  kMaxRedirections: Symbol('maxRedirections'),
  kMaxRequests: Symbol('maxRequestsPerClient'),
  kProxy: Symbol('proxy agent options'),
  kCounter: Symbol('socket request counter'),
  kInterceptors: Symbol('dispatch interceptors'),
  kMaxResponseSize: Symbol('max response size'),
  kHTTP2Session: Symbol('http2Session'),
  kHTTP2SessionState: Symbol('http2Session state'),
  kHTTP2BuildRequest: Symbol('http2 build request'),
  kHTTP1BuildRequest: Symbol('http1 build request'),
  kHTTP2CopyHeaders: Symbol('http2 copy headers'),
  kHTTPConnVersion: Symbol('http connection version'),
  kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),
  kConstruct: Symbol('constructable')
}


/***/ }),

/***/ 7001:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const assert = __nccwpck_require__(2613)
const { kDestroyed, kBodyUsed } = __nccwpck_require__(8136)
const { IncomingMessage } = __nccwpck_require__(8611)
const stream = __nccwpck_require__(2203)
const net = __nccwpck_require__(9278)
const { InvalidArgumentError } = __nccwpck_require__(5606)
const { Blob } = __nccwpck_require__(181)
const nodeUtil = __nccwpck_require__(9023)
const { stringify } = __nccwpck_require__(3480)
const { headerNameLowerCasedRecord } = __nccwpck_require__(6600)

const [nodeMajor, nodeMinor] = process.versions.node.split('.').map(v => Number(v))

function nop () {}

function isStream (obj) {
  return obj && typeof obj === 'object' && typeof obj.pipe === 'function' && typeof obj.on === 'function'
}

// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)
function isBlobLike (object) {
  return (Blob && object instanceof Blob) || (
    object &&
    typeof object === 'object' &&
    (typeof object.stream === 'function' ||
      typeof object.arrayBuffer === 'function') &&
    /^(Blob|File)$/.test(object[Symbol.toStringTag])
  )
}

function buildURL (url, queryParams) {
  if (url.includes('?') || url.includes('#')) {
    throw new Error('Query params cannot be passed when url already contains "?" or "#".')
  }

  const stringified = stringify(queryParams)

  if (stringified) {
    url += '?' + stringified
  }

  return url
}

function parseURL (url) {
  if (typeof url === 'string') {
    url = new URL(url)

    if (!/^https?:/.test(url.origin || url.protocol)) {
      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')
    }

    return url
  }

  if (!url || typeof url !== 'object') {
    throw new InvalidArgumentError('Invalid URL: The URL argument must be a non-null object.')
  }

  if (!/^https?:/.test(url.origin || url.protocol)) {
    throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')
  }

  if (!(url instanceof URL)) {
    if (url.port != null && url.port !== '' && !Number.isFinite(parseInt(url.port))) {
      throw new InvalidArgumentError('Invalid URL: port must be a valid integer or a string representation of an integer.')
    }

    if (url.path != null && typeof url.path !== 'string') {
      throw new InvalidArgumentError('Invalid URL path: the path must be a string or null/undefined.')
    }

    if (url.pathname != null && typeof url.pathname !== 'string') {
      throw new InvalidArgumentError('Invalid URL pathname: the pathname must be a string or null/undefined.')
    }

    if (url.hostname != null && typeof url.hostname !== 'string') {
      throw new InvalidArgumentError('Invalid URL hostname: the hostname must be a string or null/undefined.')
    }

    if (url.origin != null && typeof url.origin !== 'string') {
      throw new InvalidArgumentError('Invalid URL origin: the origin must be a string or null/undefined.')
    }

    const port = url.port != null
      ? url.port
      : (url.protocol === 'https:' ? 443 : 80)
    let origin = url.origin != null
      ? url.origin
      : `${url.protocol}//${url.hostname}:${port}`
    let path = url.path != null
      ? url.path
      : `${url.pathname || ''}${url.search || ''}`

    if (origin.endsWith('/')) {
      origin = origin.substring(0, origin.length - 1)
    }

    if (path && !path.startsWith('/')) {
      path = `/${path}`
    }
    // new URL(path, origin) is unsafe when `path` contains an absolute URL
    // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:
    // If first parameter is a relative URL, second param is required, and will be used as the base URL.
    // If first parameter is an absolute URL, a given second param will be ignored.
    url = new URL(origin + path)
  }

  return url
}

function parseOrigin (url) {
  url = parseURL(url)

  if (url.pathname !== '/' || url.search || url.hash) {
    throw new InvalidArgumentError('invalid url')
  }

  return url
}

function getHostname (host) {
  if (host[0] === '[') {
    const idx = host.indexOf(']')

    assert(idx !== -1)
    return host.substring(1, idx)
  }

  const idx = host.indexOf(':')
  if (idx === -1) return host

  return host.substring(0, idx)
}

// IP addresses are not valid server names per RFC6066
// > Currently, the only server names supported are DNS hostnames
function getServerName (host) {
  if (!host) {
    return null
  }

  assert.strictEqual(typeof host, 'string')

  const servername = getHostname(host)
  if (net.isIP(servername)) {
    return ''
  }

  return servername
}

function deepClone (obj) {
  return JSON.parse(JSON.stringify(obj))
}

function isAsyncIterable (obj) {
  return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function')
}

function isIterable (obj) {
  return !!(obj != null && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function'))
}

function bodyLength (body) {
  if (body == null) {
    return 0
  } else if (isStream(body)) {
    const state = body._readableState
    return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length)
      ? state.length
      : null
  } else if (isBlobLike(body)) {
    return body.size != null ? body.size : null
  } else if (isBuffer(body)) {
    return body.byteLength
  }

  return null
}

function isDestroyed (stream) {
  return !stream || !!(stream.destroyed || stream[kDestroyed])
}

function isReadableAborted (stream) {
  const state = stream && stream._readableState
  return isDestroyed(stream) && state && !state.endEmitted
}

function destroy (stream, err) {
  if (stream == null || !isStream(stream) || isDestroyed(stream)) {
    return
  }

  if (typeof stream.destroy === 'function') {
    if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {
      // See: https://github.com/nodejs/node/pull/38505/files
      stream.socket = null
    }

    stream.destroy(err)
  } else if (err) {
    process.nextTick((stream, err) => {
      stream.emit('error', err)
    }, stream, err)
  }

  if (stream.destroyed !== true) {
    stream[kDestroyed] = true
  }
}

const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/
function parseKeepAliveTimeout (val) {
  const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR)
  return m ? parseInt(m[1], 10) * 1000 : null
}

/**
 * Retrieves a header name and returns its lowercase value.
 * @param {string | Buffer} value Header name
 * @returns {string}
 */
function headerNameToString (value) {
  return headerNameLowerCasedRecord[value] || value.toLowerCase()
}

function parseHeaders (headers, obj = {}) {
  // For H2 support
  if (!Array.isArray(headers)) return headers

  for (let i = 0; i < headers.length; i += 2) {
    const key = headers[i].toString().toLowerCase()
    let val = obj[key]

    if (!val) {
      if (Array.isArray(headers[i + 1])) {
        obj[key] = headers[i + 1].map(x => x.toString('utf8'))
      } else {
        obj[key] = headers[i + 1].toString('utf8')
      }
    } else {
      if (!Array.isArray(val)) {
        val = [val]
        obj[key] = val
      }
      val.push(headers[i + 1].toString('utf8'))
    }
  }

  // See https://github.com/nodejs/node/pull/46528
  if ('content-length' in obj && 'content-disposition' in obj) {
    obj['content-disposition'] = Buffer.from(obj['content-disposition']).toString('latin1')
  }

  return obj
}

function parseRawHeaders (headers) {
  const ret = []
  let hasContentLength = false
  let contentDispositionIdx = -1

  for (let n = 0; n < headers.length; n += 2) {
    const key = headers[n + 0].toString()
    const val = headers[n + 1].toString('utf8')

    if (key.length === 14 && (key === 'content-length' || key.toLowerCase() === 'content-length')) {
      ret.push(key, val)
      hasContentLength = true
    } else if (key.length === 19 && (key === 'content-disposition' || key.toLowerCase() === 'content-disposition')) {
      contentDispositionIdx = ret.push(key, val) - 1
    } else {
      ret.push(key, val)
    }
  }

  // See https://github.com/nodejs/node/pull/46528
  if (hasContentLength && contentDispositionIdx !== -1) {
    ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString('latin1')
  }

  return ret
}

function isBuffer (buffer) {
  // See, https://github.com/mcollina/undici/pull/319
  return buffer instanceof Uint8Array || Buffer.isBuffer(buffer)
}

function validateHandler (handler, method, upgrade) {
  if (!handler || typeof handler !== 'object') {
    throw new InvalidArgumentError('handler must be an object')
  }

  if (typeof handler.onConnect !== 'function') {
    throw new InvalidArgumentError('invalid onConnect method')
  }

  if (typeof handler.onError !== 'function') {
    throw new InvalidArgumentError('invalid onError method')
  }

  if (typeof handler.onBodySent !== 'function' && handler.onBodySent !== undefined) {
    throw new InvalidArgumentError('invalid onBodySent method')
  }

  if (upgrade || method === 'CONNECT') {
    if (typeof handler.onUpgrade !== 'function') {
      throw new InvalidArgumentError('invalid onUpgrade method')
    }
  } else {
    if (typeof handler.onHeaders !== 'function') {
      throw new InvalidArgumentError('invalid onHeaders method')
    }

    if (typeof handler.onData !== 'function') {
      throw new InvalidArgumentError('invalid onData method')
    }

    if (typeof handler.onComplete !== 'function') {
      throw new InvalidArgumentError('invalid onComplete method')
    }
  }
}

// A body is disturbed if it has been read from and it cannot
// be re-used without losing state or data.
function isDisturbed (body) {
  return !!(body && (
    stream.isDisturbed
      ? stream.isDisturbed(body) || body[kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?
      : body[kBodyUsed] ||
        body.readableDidRead ||
        (body._readableState && body._readableState.dataEmitted) ||
        isReadableAborted(body)
  ))
}

function isErrored (body) {
  return !!(body && (
    stream.isErrored
      ? stream.isErrored(body)
      : /state: 'errored'/.test(nodeUtil.inspect(body)
      )))
}

function isReadable (body) {
  return !!(body && (
    stream.isReadable
      ? stream.isReadable(body)
      : /state: 'readable'/.test(nodeUtil.inspect(body)
      )))
}

function getSocketInfo (socket) {
  return {
    localAddress: socket.localAddress,
    localPort: socket.localPort,
    remoteAddress: socket.remoteAddress,
    remotePort: socket.remotePort,
    remoteFamily: socket.remoteFamily,
    timeout: socket.timeout,
    bytesWritten: socket.bytesWritten,
    bytesRead: socket.bytesRead
  }
}

async function * convertIterableToBuffer (iterable) {
  for await (const chunk of iterable) {
    yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk)
  }
}

let ReadableStream
function ReadableStreamFrom (iterable) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(3774).ReadableStream)
  }

  if (ReadableStream.from) {
    return ReadableStream.from(convertIterableToBuffer(iterable))
  }

  let iterator
  return new ReadableStream(
    {
      async start () {
        iterator = iterable[Symbol.asyncIterator]()
      },
      async pull (controller) {
        const { done, value } = await iterator.next()
        if (done) {
          queueMicrotask(() => {
            controller.close()
          })
        } else {
          const buf = Buffer.isBuffer(value) ? value : Buffer.from(value)
          controller.enqueue(new Uint8Array(buf))
        }
        return controller.desiredSize > 0
      },
      async cancel (reason) {
        await iterator.return()
      }
    },
    0
  )
}

// The chunk should be a FormData instance and contains
// all the required methods.
function isFormDataLike (object) {
  return (
    object &&
    typeof object === 'object' &&
    typeof object.append === 'function' &&
    typeof object.delete === 'function' &&
    typeof object.get === 'function' &&
    typeof object.getAll === 'function' &&
    typeof object.has === 'function' &&
    typeof object.set === 'function' &&
    object[Symbol.toStringTag] === 'FormData'
  )
}

function throwIfAborted (signal) {
  if (!signal) { return }
  if (typeof signal.throwIfAborted === 'function') {
    signal.throwIfAborted()
  } else {
    if (signal.aborted) {
      // DOMException not available < v17.0.0
      const err = new Error('The operation was aborted')
      err.name = 'AbortError'
      throw err
    }
  }
}

function addAbortListener (signal, listener) {
  if ('addEventListener' in signal) {
    signal.addEventListener('abort', listener, { once: true })
    return () => signal.removeEventListener('abort', listener)
  }
  signal.addListener('abort', listener)
  return () => signal.removeListener('abort', listener)
}

const hasToWellFormed = !!String.prototype.toWellFormed

/**
 * @param {string} val
 */
function toUSVString (val) {
  if (hasToWellFormed) {
    return `${val}`.toWellFormed()
  } else if (nodeUtil.toUSVString) {
    return nodeUtil.toUSVString(val)
  }

  return `${val}`
}

// Parsed accordingly to RFC 9110
// https://www.rfc-editor.org/rfc/rfc9110#field.content-range
function parseRangeHeader (range) {
  if (range == null || range === '') return { start: 0, end: null, size: null }

  const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null
  return m
    ? {
        start: parseInt(m[1]),
        end: m[2] ? parseInt(m[2]) : null,
        size: m[3] ? parseInt(m[3]) : null
      }
    : null
}

const kEnumerableProperty = Object.create(null)
kEnumerableProperty.enumerable = true

module.exports = {
  kEnumerableProperty,
  nop,
  isDisturbed,
  isErrored,
  isReadable,
  toUSVString,
  isReadableAborted,
  isBlobLike,
  parseOrigin,
  parseURL,
  getServerName,
  isStream,
  isIterable,
  isAsyncIterable,
  isDestroyed,
  headerNameToString,
  parseRawHeaders,
  parseHeaders,
  parseKeepAliveTimeout,
  destroy,
  bodyLength,
  deepClone,
  ReadableStreamFrom,
  isBuffer,
  validateHandler,
  getSocketInfo,
  isFormDataLike,
  buildURL,
  throwIfAborted,
  addAbortListener,
  parseRangeHeader,
  nodeMajor,
  nodeMinor,
  nodeHasAutoSelectFamily: nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 13),
  safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE']
}


/***/ }),

/***/ 4219:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Dispatcher = __nccwpck_require__(700)
const {
  ClientDestroyedError,
  ClientClosedError,
  InvalidArgumentError
} = __nccwpck_require__(5606)
const { kDestroy, kClose, kDispatch, kInterceptors } = __nccwpck_require__(8136)

const kDestroyed = Symbol('destroyed')
const kClosed = Symbol('closed')
const kOnDestroyed = Symbol('onDestroyed')
const kOnClosed = Symbol('onClosed')
const kInterceptedDispatch = Symbol('Intercepted Dispatch')

class DispatcherBase extends Dispatcher {
  constructor () {
    super()

    this[kDestroyed] = false
    this[kOnDestroyed] = null
    this[kClosed] = false
    this[kOnClosed] = []
  }

  get destroyed () {
    return this[kDestroyed]
  }

  get closed () {
    return this[kClosed]
  }

  get interceptors () {
    return this[kInterceptors]
  }

  set interceptors (newInterceptors) {
    if (newInterceptors) {
      for (let i = newInterceptors.length - 1; i >= 0; i--) {
        const interceptor = this[kInterceptors][i]
        if (typeof interceptor !== 'function') {
          throw new InvalidArgumentError('interceptor must be an function')
        }
      }
    }

    this[kInterceptors] = newInterceptors
  }

  close (callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        this.close((err, data) => {
          return err ? reject(err) : resolve(data)
        })
      })
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    if (this[kDestroyed]) {
      queueMicrotask(() => callback(new ClientDestroyedError(), null))
      return
    }

    if (this[kClosed]) {
      if (this[kOnClosed]) {
        this[kOnClosed].push(callback)
      } else {
        queueMicrotask(() => callback(null, null))
      }
      return
    }

    this[kClosed] = true
    this[kOnClosed].push(callback)

    const onClosed = () => {
      const callbacks = this[kOnClosed]
      this[kOnClosed] = null
      for (let i = 0; i < callbacks.length; i++) {
        callbacks[i](null, null)
      }
    }

    // Should not error.
    this[kClose]()
      .then(() => this.destroy())
      .then(() => {
        queueMicrotask(onClosed)
      })
  }

  destroy (err, callback) {
    if (typeof err === 'function') {
      callback = err
      err = null
    }

    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        this.destroy(err, (err, data) => {
          return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data)
        })
      })
    }

    if (typeof callback !== 'function') {
      throw new InvalidArgumentError('invalid callback')
    }

    if (this[kDestroyed]) {
      if (this[kOnDestroyed]) {
        this[kOnDestroyed].push(callback)
      } else {
        queueMicrotask(() => callback(null, null))
      }
      return
    }

    if (!err) {
      err = new ClientDestroyedError()
    }

    this[kDestroyed] = true
    this[kOnDestroyed] = this[kOnDestroyed] || []
    this[kOnDestroyed].push(callback)

    const onDestroyed = () => {
      const callbacks = this[kOnDestroyed]
      this[kOnDestroyed] = null
      for (let i = 0; i < callbacks.length; i++) {
        callbacks[i](null, null)
      }
    }

    // Should not error.
    this[kDestroy](err).then(() => {
      queueMicrotask(onDestroyed)
    })
  }

  [kInterceptedDispatch] (opts, handler) {
    if (!this[kInterceptors] || this[kInterceptors].length === 0) {
      this[kInterceptedDispatch] = this[kDispatch]
      return this[kDispatch](opts, handler)
    }

    let dispatch = this[kDispatch].bind(this)
    for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
      dispatch = this[kInterceptors][i](dispatch)
    }
    this[kInterceptedDispatch] = dispatch
    return dispatch(opts, handler)
  }

  dispatch (opts, handler) {
    if (!handler || typeof handler !== 'object') {
      throw new InvalidArgumentError('handler must be an object')
    }

    try {
      if (!opts || typeof opts !== 'object') {
        throw new InvalidArgumentError('opts must be an object.')
      }

      if (this[kDestroyed] || this[kOnDestroyed]) {
        throw new ClientDestroyedError()
      }

      if (this[kClosed]) {
        throw new ClientClosedError()
      }

      return this[kInterceptedDispatch](opts, handler)
    } catch (err) {
      if (typeof handler.onError !== 'function') {
        throw new InvalidArgumentError('invalid onError method')
      }

      handler.onError(err)

      return false
    }
  }
}

module.exports = DispatcherBase


/***/ }),

/***/ 700:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const EventEmitter = __nccwpck_require__(4434)

class Dispatcher extends EventEmitter {
  dispatch () {
    throw new Error('not implemented')
  }

  close () {
    throw new Error('not implemented')
  }

  destroy () {
    throw new Error('not implemented')
  }
}

module.exports = Dispatcher


/***/ }),

/***/ 6564:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Busboy = __nccwpck_require__(1608)
const util = __nccwpck_require__(7001)
const {
  ReadableStreamFrom,
  isBlobLike,
  isReadableStreamLike,
  readableStreamClose,
  createDeferredPromise,
  fullyReadBody
} = __nccwpck_require__(1096)
const { FormData } = __nccwpck_require__(6334)
const { kState } = __nccwpck_require__(3507)
const { webidl } = __nccwpck_require__(1677)
const { DOMException, structuredClone } = __nccwpck_require__(7431)
const { Blob, File: NativeFile } = __nccwpck_require__(181)
const { kBodyUsed } = __nccwpck_require__(8136)
const assert = __nccwpck_require__(2613)
const { isErrored } = __nccwpck_require__(7001)
const { isUint8Array, isArrayBuffer } = __nccwpck_require__(8253)
const { File: UndiciFile } = __nccwpck_require__(6002)
const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(6615)

let random
try {
  const crypto = __nccwpck_require__(7598)
  random = (max) => crypto.randomInt(0, max)
} catch {
  random = (max) => Math.floor(Math.random(max))
}

let ReadableStream = globalThis.ReadableStream

/** @type {globalThis['File']} */
const File = NativeFile ?? UndiciFile
const textEncoder = new TextEncoder()
const textDecoder = new TextDecoder()

// https://fetch.spec.whatwg.org/#concept-bodyinit-extract
function extractBody (object, keepalive = false) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(3774).ReadableStream)
  }

  // 1. Let stream be null.
  let stream = null

  // 2. If object is a ReadableStream object, then set stream to object.
  if (object instanceof ReadableStream) {
    stream = object
  } else if (isBlobLike(object)) {
    // 3. Otherwise, if object is a Blob object, set stream to the
    //    result of running object’s get stream.
    stream = object.stream()
  } else {
    // 4. Otherwise, set stream to a new ReadableStream object, and set
    //    up stream.
    stream = new ReadableStream({
      async pull (controller) {
        controller.enqueue(
          typeof source === 'string' ? textEncoder.encode(source) : source
        )
        queueMicrotask(() => readableStreamClose(controller))
      },
      start () {},
      type: undefined
    })
  }

  // 5. Assert: stream is a ReadableStream object.
  assert(isReadableStreamLike(stream))

  // 6. Let action be null.
  let action = null

  // 7. Let source be null.
  let source = null

  // 8. Let length be null.
  let length = null

  // 9. Let type be null.
  let type = null

  // 10. Switch on object:
  if (typeof object === 'string') {
    // Set source to the UTF-8 encoding of object.
    // Note: setting source to a Uint8Array here breaks some mocking assumptions.
    source = object

    // Set type to `text/plain;charset=UTF-8`.
    type = 'text/plain;charset=UTF-8'
  } else if (object instanceof URLSearchParams) {
    // URLSearchParams

    // spec says to run application/x-www-form-urlencoded on body.list
    // this is implemented in Node.js as apart of an URLSearchParams instance toString method
    // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490
    // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100

    // Set source to the result of running the application/x-www-form-urlencoded serializer with object’s list.
    source = object.toString()

    // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.
    type = 'application/x-www-form-urlencoded;charset=UTF-8'
  } else if (isArrayBuffer(object)) {
    // BufferSource/ArrayBuffer

    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.slice())
  } else if (ArrayBuffer.isView(object)) {
    // BufferSource/ArrayBufferView

    // Set source to a copy of the bytes held by object.
    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength))
  } else if (util.isFormDataLike(object)) {
    const boundary = `----formdata-undici-0${`${random(1e11)}`.padStart(11, '0')}`
    const prefix = `--${boundary}\r\nContent-Disposition: form-data`

    /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
    const escape = (str) =>
      str.replace(/\n/g, '%0A').replace(/\r/g, '%0D').replace(/"/g, '%22')
    const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, '\r\n')

    // Set action to this step: run the multipart/form-data
    // encoding algorithm, with object’s entry list and UTF-8.
    // - This ensures that the body is immutable and can't be changed afterwords
    // - That the content-length is calculated in advance.
    // - And that all parts are pre-encoded and ready to be sent.

    const blobParts = []
    const rn = new Uint8Array([13, 10]) // '\r\n'
    length = 0
    let hasUnknownSizeValue = false

    for (const [name, value] of object) {
      if (typeof value === 'string') {
        const chunk = textEncoder.encode(prefix +
          `; name="${escape(normalizeLinefeeds(name))}"` +
          `\r\n\r\n${normalizeLinefeeds(value)}\r\n`)
        blobParts.push(chunk)
        length += chunk.byteLength
      } else {
        const chunk = textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` +
          (value.name ? `; filename="${escape(value.name)}"` : '') + '\r\n' +
          `Content-Type: ${
            value.type || 'application/octet-stream'
          }\r\n\r\n`)
        blobParts.push(chunk, value, rn)
        if (typeof value.size === 'number') {
          length += chunk.byteLength + value.size + rn.byteLength
        } else {
          hasUnknownSizeValue = true
        }
      }
    }

    const chunk = textEncoder.encode(`--${boundary}--`)
    blobParts.push(chunk)
    length += chunk.byteLength
    if (hasUnknownSizeValue) {
      length = null
    }

    // Set source to object.
    source = object

    action = async function * () {
      for (const part of blobParts) {
        if (part.stream) {
          yield * part.stream()
        } else {
          yield part
        }
      }
    }

    // Set type to `multipart/form-data; boundary=`,
    // followed by the multipart/form-data boundary string generated
    // by the multipart/form-data encoding algorithm.
    type = 'multipart/form-data; boundary=' + boundary
  } else if (isBlobLike(object)) {
    // Blob

    // Set source to object.
    source = object

    // Set length to object’s size.
    length = object.size

    // If object’s type attribute is not the empty byte sequence, set
    // type to its value.
    if (object.type) {
      type = object.type
    }
  } else if (typeof object[Symbol.asyncIterator] === 'function') {
    // If keepalive is true, then throw a TypeError.
    if (keepalive) {
      throw new TypeError('keepalive')
    }

    // If object is disturbed or locked, then throw a TypeError.
    if (util.isDisturbed(object) || object.locked) {
      throw new TypeError(
        'Response body object should not be disturbed or locked'
      )
    }

    stream =
      object instanceof ReadableStream ? object : ReadableStreamFrom(object)
  }

  // 11. If source is a byte sequence, then set action to a
  // step that returns source and length to source’s length.
  if (typeof source === 'string' || util.isBuffer(source)) {
    length = Buffer.byteLength(source)
  }

  // 12. If action is non-null, then run these steps in in parallel:
  if (action != null) {
    // Run action.
    let iterator
    stream = new ReadableStream({
      async start () {
        iterator = action(object)[Symbol.asyncIterator]()
      },
      async pull (controller) {
        const { value, done } = await iterator.next()
        if (done) {
          // When running action is done, close stream.
          queueMicrotask(() => {
            controller.close()
          })
        } else {
          // Whenever one or more bytes are available and stream is not errored,
          // enqueue a Uint8Array wrapping an ArrayBuffer containing the available
          // bytes into stream.
          if (!isErrored(stream)) {
            controller.enqueue(new Uint8Array(value))
          }
        }
        return controller.desiredSize > 0
      },
      async cancel (reason) {
        await iterator.return()
      },
      type: undefined
    })
  }

  // 13. Let body be a body whose stream is stream, source is source,
  // and length is length.
  const body = { stream, source, length }

  // 14. Return (body, type).
  return [body, type]
}

// https://fetch.spec.whatwg.org/#bodyinit-safely-extract
function safelyExtractBody (object, keepalive = false) {
  if (!ReadableStream) {
    // istanbul ignore next
    ReadableStream = (__nccwpck_require__(3774).ReadableStream)
  }

  // To safely extract a body and a `Content-Type` value from
  // a byte sequence or BodyInit object object, run these steps:

  // 1. If object is a ReadableStream object, then:
  if (object instanceof ReadableStream) {
    // Assert: object is neither disturbed nor locked.
    // istanbul ignore next
    assert(!util.isDisturbed(object), 'The body has already been consumed.')
    // istanbul ignore next
    assert(!object.locked, 'The stream is locked.')
  }

  // 2. Return the results of extracting object.
  return extractBody(object, keepalive)
}

function cloneBody (body) {
  // To clone a body body, run these steps:

  // https://fetch.spec.whatwg.org/#concept-body-clone

  // 1. Let « out1, out2 » be the result of teeing body’s stream.
  const [out1, out2] = body.stream.tee()
  const out2Clone = structuredClone(out2, { transfer: [out2] })
  // This, for whatever reasons, unrefs out2Clone which allows
  // the process to exit by itself.
  const [, finalClone] = out2Clone.tee()

  // 2. Set body’s stream to out1.
  body.stream = out1

  // 3. Return a body whose stream is out2 and other members are copied from body.
  return {
    stream: finalClone,
    length: body.length,
    source: body.source
  }
}

async function * consumeBody (body) {
  if (body) {
    if (isUint8Array(body)) {
      yield body
    } else {
      const stream = body.stream

      if (util.isDisturbed(stream)) {
        throw new TypeError('The body has already been consumed.')
      }

      if (stream.locked) {
        throw new TypeError('The stream is locked.')
      }

      // Compat.
      stream[kBodyUsed] = true

      yield * stream
    }
  }
}

function throwIfAborted (state) {
  if (state.aborted) {
    throw new DOMException('The operation was aborted.', 'AbortError')
  }
}

function bodyMixinMethods (instance) {
  const methods = {
    blob () {
      // The blob() method steps are to return the result of
      // running consume body with this and the following step
      // given a byte sequence bytes: return a Blob whose
      // contents are bytes and whose type attribute is this’s
      // MIME type.
      return specConsumeBody(this, (bytes) => {
        let mimeType = bodyMimeType(this)

        if (mimeType === 'failure') {
          mimeType = ''
        } else if (mimeType) {
          mimeType = serializeAMimeType(mimeType)
        }

        // Return a Blob whose contents are bytes and type attribute
        // is mimeType.
        return new Blob([bytes], { type: mimeType })
      }, instance)
    },

    arrayBuffer () {
      // The arrayBuffer() method steps are to return the result
      // of running consume body with this and the following step
      // given a byte sequence bytes: return a new ArrayBuffer
      // whose contents are bytes.
      return specConsumeBody(this, (bytes) => {
        return new Uint8Array(bytes).buffer
      }, instance)
    },

    text () {
      // The text() method steps are to return the result of running
      // consume body with this and UTF-8 decode.
      return specConsumeBody(this, utf8DecodeBytes, instance)
    },

    json () {
      // The json() method steps are to return the result of running
      // consume body with this and parse JSON from bytes.
      return specConsumeBody(this, parseJSONFromBytes, instance)
    },

    async formData () {
      webidl.brandCheck(this, instance)

      throwIfAborted(this[kState])

      const contentType = this.headers.get('Content-Type')

      // If mimeType’s essence is "multipart/form-data", then:
      if (/multipart\/form-data/.test(contentType)) {
        const headers = {}
        for (const [key, value] of this.headers) headers[key.toLowerCase()] = value

        const responseFormData = new FormData()

        let busboy

        try {
          busboy = new Busboy({
            headers,
            preservePath: true
          })
        } catch (err) {
          throw new DOMException(`${err}`, 'AbortError')
        }

        busboy.on('field', (name, value) => {
          responseFormData.append(name, value)
        })
        busboy.on('file', (name, value, filename, encoding, mimeType) => {
          const chunks = []

          if (encoding === 'base64' || encoding.toLowerCase() === 'base64') {
            let base64chunk = ''

            value.on('data', (chunk) => {
              base64chunk += chunk.toString().replace(/[\r\n]/gm, '')

              const end = base64chunk.length - base64chunk.length % 4
              chunks.push(Buffer.from(base64chunk.slice(0, end), 'base64'))

              base64chunk = base64chunk.slice(end)
            })
            value.on('end', () => {
              chunks.push(Buffer.from(base64chunk, 'base64'))
              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))
            })
          } else {
            value.on('data', (chunk) => {
              chunks.push(chunk)
            })
            value.on('end', () => {
              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))
            })
          }
        })

        const busboyResolve = new Promise((resolve, reject) => {
          busboy.on('finish', resolve)
          busboy.on('error', (err) => reject(new TypeError(err)))
        })

        if (this.body !== null) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk)
        busboy.end()
        await busboyResolve

        return responseFormData
      } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
        // Otherwise, if mimeType’s essence is "application/x-www-form-urlencoded", then:

        // 1. Let entries be the result of parsing bytes.
        let entries
        try {
          let text = ''
          // application/x-www-form-urlencoded parser will keep the BOM.
          // https://url.spec.whatwg.org/#concept-urlencoded-parser
          // Note that streaming decoder is stateful and cannot be reused
          const streamingDecoder = new TextDecoder('utf-8', { ignoreBOM: true })

          for await (const chunk of consumeBody(this[kState].body)) {
            if (!isUint8Array(chunk)) {
              throw new TypeError('Expected Uint8Array chunk')
            }
            text += streamingDecoder.decode(chunk, { stream: true })
          }
          text += streamingDecoder.decode()
          entries = new URLSearchParams(text)
        } catch (err) {
          // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.
          // 2. If entries is failure, then throw a TypeError.
          throw Object.assign(new TypeError(), { cause: err })
        }

        // 3. Return a new FormData object whose entries are entries.
        const formData = new FormData()
        for (const [name, value] of entries) {
          formData.append(name, value)
        }
        return formData
      } else {
        // Wait a tick before checking if the request has been aborted.
        // Otherwise, a TypeError can be thrown when an AbortError should.
        await Promise.resolve()

        throwIfAborted(this[kState])

        // Otherwise, throw a TypeError.
        throw webidl.errors.exception({
          header: `${instance.name}.formData`,
          message: 'Could not parse content as FormData.'
        })
      }
    }
  }

  return methods
}

function mixinBody (prototype) {
  Object.assign(prototype.prototype, bodyMixinMethods(prototype))
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-body-consume-body
 * @param {Response|Request} object
 * @param {(value: unknown) => unknown} convertBytesToJSValue
 * @param {Response|Request} instance
 */
async function specConsumeBody (object, convertBytesToJSValue, instance) {
  webidl.brandCheck(object, instance)

  throwIfAborted(object[kState])

  // 1. If object is unusable, then return a promise rejected
  //    with a TypeError.
  if (bodyUnusable(object[kState].body)) {
    throw new TypeError('Body is unusable')
  }

  // 2. Let promise be a new promise.
  const promise = createDeferredPromise()

  // 3. Let errorSteps given error be to reject promise with error.
  const errorSteps = (error) => promise.reject(error)

  // 4. Let successSteps given a byte sequence data be to resolve
  //    promise with the result of running convertBytesToJSValue
  //    with data. If that threw an exception, then run errorSteps
  //    with that exception.
  const successSteps = (data) => {
    try {
      promise.resolve(convertBytesToJSValue(data))
    } catch (e) {
      errorSteps(e)
    }
  }

  // 5. If object’s body is null, then run successSteps with an
  //    empty byte sequence.
  if (object[kState].body == null) {
    successSteps(new Uint8Array())
    return promise.promise
  }

  // 6. Otherwise, fully read object’s body given successSteps,
  //    errorSteps, and object’s relevant global object.
  await fullyReadBody(object[kState].body, successSteps, errorSteps)

  // 7. Return promise.
  return promise.promise
}

// https://fetch.spec.whatwg.org/#body-unusable
function bodyUnusable (body) {
  // An object including the Body interface mixin is
  // said to be unusable if its body is non-null and
  // its body’s stream is disturbed or locked.
  return body != null && (body.stream.locked || util.isDisturbed(body.stream))
}

/**
 * @see https://encoding.spec.whatwg.org/#utf-8-decode
 * @param {Buffer} buffer
 */
function utf8DecodeBytes (buffer) {
  if (buffer.length === 0) {
    return ''
  }

  // 1. Let buffer be the result of peeking three bytes from
  //    ioQueue, converted to a byte sequence.

  // 2. If buffer is 0xEF 0xBB 0xBF, then read three
  //    bytes from ioQueue. (Do nothing with those bytes.)
  if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {
    buffer = buffer.subarray(3)
  }

  // 3. Process a queue with an instance of UTF-8’s
  //    decoder, ioQueue, output, and "replacement".
  const output = textDecoder.decode(buffer)

  // 4. Return output.
  return output
}

/**
 * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
 * @param {Uint8Array} bytes
 */
function parseJSONFromBytes (bytes) {
  return JSON.parse(utf8DecodeBytes(bytes))
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-body-mime-type
 * @param {import('./response').Response|import('./request').Request} object
 */
function bodyMimeType (object) {
  const { headersList } = object[kState]
  const contentType = headersList.get('content-type')

  if (contentType === null) {
    return 'failure'
  }

  return parseMIMEType(contentType)
}

module.exports = {
  extractBody,
  safelyExtractBody,
  cloneBody,
  mixinBody
}


/***/ }),

/***/ 7431:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { MessageChannel, receiveMessageOnPort } = __nccwpck_require__(8167)

const corsSafeListedMethods = ['GET', 'HEAD', 'POST']
const corsSafeListedMethodsSet = new Set(corsSafeListedMethods)

const nullBodyStatus = [101, 204, 205, 304]

const redirectStatus = [301, 302, 303, 307, 308]
const redirectStatusSet = new Set(redirectStatus)

// https://fetch.spec.whatwg.org/#block-bad-port
const badPorts = [
  '1', '7', '9', '11', '13', '15', '17', '19', '20', '21', '22', '23', '25', '37', '42', '43', '53', '69', '77', '79',
  '87', '95', '101', '102', '103', '104', '109', '110', '111', '113', '115', '117', '119', '123', '135', '137',
  '139', '143', '161', '179', '389', '427', '465', '512', '513', '514', '515', '526', '530', '531', '532',
  '540', '548', '554', '556', '563', '587', '601', '636', '989', '990', '993', '995', '1719', '1720', '1723',
  '2049', '3659', '4045', '5060', '5061', '6000', '6566', '6665', '6666', '6667', '6668', '6669', '6697',
  '10080'
]

const badPortsSet = new Set(badPorts)

// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies
const referrerPolicy = [
  '',
  'no-referrer',
  'no-referrer-when-downgrade',
  'same-origin',
  'origin',
  'strict-origin',
  'origin-when-cross-origin',
  'strict-origin-when-cross-origin',
  'unsafe-url'
]
const referrerPolicySet = new Set(referrerPolicy)

const requestRedirect = ['follow', 'manual', 'error']

const safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE']
const safeMethodsSet = new Set(safeMethods)

const requestMode = ['navigate', 'same-origin', 'no-cors', 'cors']

const requestCredentials = ['omit', 'same-origin', 'include']

const requestCache = [
  'default',
  'no-store',
  'reload',
  'no-cache',
  'force-cache',
  'only-if-cached'
]

// https://fetch.spec.whatwg.org/#request-body-header-name
const requestBodyHeader = [
  'content-encoding',
  'content-language',
  'content-location',
  'content-type',
  // See https://github.com/nodejs/undici/issues/2021
  // 'Content-Length' is a forbidden header name, which is typically
  // removed in the Headers implementation. However, undici doesn't
  // filter out headers, so we add it here.
  'content-length'
]

// https://fetch.spec.whatwg.org/#enumdef-requestduplex
const requestDuplex = [
  'half'
]

// http://fetch.spec.whatwg.org/#forbidden-method
const forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK']
const forbiddenMethodsSet = new Set(forbiddenMethods)

const subresource = [
  'audio',
  'audioworklet',
  'font',
  'image',
  'manifest',
  'paintworklet',
  'script',
  'style',
  'track',
  'video',
  'xslt',
  ''
]
const subresourceSet = new Set(subresource)

/** @type {globalThis['DOMException']} */
const DOMException = globalThis.DOMException ?? (() => {
  // DOMException was only made a global in Node v17.0.0,
  // but fetch supports >= v16.8.
  try {
    atob('~')
  } catch (err) {
    return Object.getPrototypeOf(err).constructor
  }
})()

let channel

/** @type {globalThis['structuredClone']} */
const structuredClone =
  globalThis.structuredClone ??
  // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
  // structuredClone was added in v17.0.0, but fetch supports v16.8
  function structuredClone (value, options = undefined) {
    if (arguments.length === 0) {
      throw new TypeError('missing argument')
    }

    if (!channel) {
      channel = new MessageChannel()
    }
    channel.port1.unref()
    channel.port2.unref()
    channel.port1.postMessage(value, options?.transfer)
    return receiveMessageOnPort(channel.port2).message
  }

module.exports = {
  DOMException,
  structuredClone,
  subresource,
  forbiddenMethods,
  requestBodyHeader,
  referrerPolicy,
  requestRedirect,
  requestMode,
  requestCredentials,
  requestCache,
  redirectStatus,
  corsSafeListedMethods,
  nullBodyStatus,
  safeMethods,
  badPorts,
  requestDuplex,
  subresourceSet,
  badPortsSet,
  redirectStatusSet,
  corsSafeListedMethodsSet,
  safeMethodsSet,
  forbiddenMethodsSet,
  referrerPolicySet
}


/***/ }),

/***/ 6615:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(2613)
const { atob } = __nccwpck_require__(181)
const { isomorphicDecode } = __nccwpck_require__(1096)

const encoder = new TextEncoder()

/**
 * @see https://mimesniff.spec.whatwg.org/#http-token-code-point
 */
const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/
const HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/ // eslint-disable-line
/**
 * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
 */
const HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/ // eslint-disable-line

// https://fetch.spec.whatwg.org/#data-url-processor
/** @param {URL} dataURL */
function dataURLProcessor (dataURL) {
  // 1. Assert: dataURL’s scheme is "data".
  assert(dataURL.protocol === 'data:')

  // 2. Let input be the result of running the URL
  // serializer on dataURL with exclude fragment
  // set to true.
  let input = URLSerializer(dataURL, true)

  // 3. Remove the leading "data:" string from input.
  input = input.slice(5)

  // 4. Let position point at the start of input.
  const position = { position: 0 }

  // 5. Let mimeType be the result of collecting a
  // sequence of code points that are not equal
  // to U+002C (,), given position.
  let mimeType = collectASequenceOfCodePointsFast(
    ',',
    input,
    position
  )

  // 6. Strip leading and trailing ASCII whitespace
  // from mimeType.
  // Undici implementation note: we need to store the
  // length because if the mimetype has spaces removed,
  // the wrong amount will be sliced from the input in
  // step #9
  const mimeTypeLength = mimeType.length
  mimeType = removeASCIIWhitespace(mimeType, true, true)

  // 7. If position is past the end of input, then
  // return failure
  if (position.position >= input.length) {
    return 'failure'
  }

  // 8. Advance position by 1.
  position.position++

  // 9. Let encodedBody be the remainder of input.
  const encodedBody = input.slice(mimeTypeLength + 1)

  // 10. Let body be the percent-decoding of encodedBody.
  let body = stringPercentDecode(encodedBody)

  // 11. If mimeType ends with U+003B (;), followed by
  // zero or more U+0020 SPACE, followed by an ASCII
  // case-insensitive match for "base64", then:
  if (/;(\u0020){0,}base64$/i.test(mimeType)) {
    // 1. Let stringBody be the isomorphic decode of body.
    const stringBody = isomorphicDecode(body)

    // 2. Set body to the forgiving-base64 decode of
    // stringBody.
    body = forgivingBase64(stringBody)

    // 3. If body is failure, then return failure.
    if (body === 'failure') {
      return 'failure'
    }

    // 4. Remove the last 6 code points from mimeType.
    mimeType = mimeType.slice(0, -6)

    // 5. Remove trailing U+0020 SPACE code points from mimeType,
    // if any.
    mimeType = mimeType.replace(/(\u0020)+$/, '')

    // 6. Remove the last U+003B (;) code point from mimeType.
    mimeType = mimeType.slice(0, -1)
  }

  // 12. If mimeType starts with U+003B (;), then prepend
  // "text/plain" to mimeType.
  if (mimeType.startsWith(';')) {
    mimeType = 'text/plain' + mimeType
  }

  // 13. Let mimeTypeRecord be the result of parsing
  // mimeType.
  let mimeTypeRecord = parseMIMEType(mimeType)

  // 14. If mimeTypeRecord is failure, then set
  // mimeTypeRecord to text/plain;charset=US-ASCII.
  if (mimeTypeRecord === 'failure') {
    mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII')
  }

  // 15. Return a new data: URL struct whose MIME
  // type is mimeTypeRecord and body is body.
  // https://fetch.spec.whatwg.org/#data-url-struct
  return { mimeType: mimeTypeRecord, body }
}

// https://url.spec.whatwg.org/#concept-url-serializer
/**
 * @param {URL} url
 * @param {boolean} excludeFragment
 */
function URLSerializer (url, excludeFragment = false) {
  if (!excludeFragment) {
    return url.href
  }

  const href = url.href
  const hashLength = url.hash.length

  return hashLength === 0 ? href : href.substring(0, href.length - hashLength)
}

// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points
/**
 * @param {(char: string) => boolean} condition
 * @param {string} input
 * @param {{ position: number }} position
 */
function collectASequenceOfCodePoints (condition, input, position) {
  // 1. Let result be the empty string.
  let result = ''

  // 2. While position doesn’t point past the end of input and the
  // code point at position within input meets the condition condition:
  while (position.position < input.length && condition(input[position.position])) {
    // 1. Append that code point to the end of result.
    result += input[position.position]

    // 2. Advance position by 1.
    position.position++
  }

  // 3. Return result.
  return result
}

/**
 * A faster collectASequenceOfCodePoints that only works when comparing a single character.
 * @param {string} char
 * @param {string} input
 * @param {{ position: number }} position
 */
function collectASequenceOfCodePointsFast (char, input, position) {
  const idx = input.indexOf(char, position.position)
  const start = position.position

  if (idx === -1) {
    position.position = input.length
    return input.slice(start)
  }

  position.position = idx
  return input.slice(start, position.position)
}

// https://url.spec.whatwg.org/#string-percent-decode
/** @param {string} input */
function stringPercentDecode (input) {
  // 1. Let bytes be the UTF-8 encoding of input.
  const bytes = encoder.encode(input)

  // 2. Return the percent-decoding of bytes.
  return percentDecode(bytes)
}

// https://url.spec.whatwg.org/#percent-decode
/** @param {Uint8Array} input */
function percentDecode (input) {
  // 1. Let output be an empty byte sequence.
  /** @type {number[]} */
  const output = []

  // 2. For each byte byte in input:
  for (let i = 0; i < input.length; i++) {
    const byte = input[i]

    // 1. If byte is not 0x25 (%), then append byte to output.
    if (byte !== 0x25) {
      output.push(byte)

    // 2. Otherwise, if byte is 0x25 (%) and the next two bytes
    // after byte in input are not in the ranges
    // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),
    // and 0x61 (a) to 0x66 (f), all inclusive, append byte
    // to output.
    } else if (
      byte === 0x25 &&
      !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))
    ) {
      output.push(0x25)

    // 3. Otherwise:
    } else {
      // 1. Let bytePoint be the two bytes after byte in input,
      // decoded, and then interpreted as hexadecimal number.
      const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2])
      const bytePoint = Number.parseInt(nextTwoBytes, 16)

      // 2. Append a byte whose value is bytePoint to output.
      output.push(bytePoint)

      // 3. Skip the next two bytes in input.
      i += 2
    }
  }

  // 3. Return output.
  return Uint8Array.from(output)
}

// https://mimesniff.spec.whatwg.org/#parse-a-mime-type
/** @param {string} input */
function parseMIMEType (input) {
  // 1. Remove any leading and trailing HTTP whitespace
  // from input.
  input = removeHTTPWhitespace(input, true, true)

  // 2. Let position be a position variable for input,
  // initially pointing at the start of input.
  const position = { position: 0 }

  // 3. Let type be the result of collecting a sequence
  // of code points that are not U+002F (/) from
  // input, given position.
  const type = collectASequenceOfCodePointsFast(
    '/',
    input,
    position
  )

  // 4. If type is the empty string or does not solely
  // contain HTTP token code points, then return failure.
  // https://mimesniff.spec.whatwg.org/#http-token-code-point
  if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
    return 'failure'
  }

  // 5. If position is past the end of input, then return
  // failure
  if (position.position > input.length) {
    return 'failure'
  }

  // 6. Advance position by 1. (This skips past U+002F (/).)
  position.position++

  // 7. Let subtype be the result of collecting a sequence of
  // code points that are not U+003B (;) from input, given
  // position.
  let subtype = collectASequenceOfCodePointsFast(
    ';',
    input,
    position
  )

  // 8. Remove any trailing HTTP whitespace from subtype.
  subtype = removeHTTPWhitespace(subtype, false, true)

  // 9. If subtype is the empty string or does not solely
  // contain HTTP token code points, then return failure.
  if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
    return 'failure'
  }

  const typeLowercase = type.toLowerCase()
  const subtypeLowercase = subtype.toLowerCase()

  // 10. Let mimeType be a new MIME type record whose type
  // is type, in ASCII lowercase, and subtype is subtype,
  // in ASCII lowercase.
  // https://mimesniff.spec.whatwg.org/#mime-type
  const mimeType = {
    type: typeLowercase,
    subtype: subtypeLowercase,
    /** @type {Map<string, string>} */
    parameters: new Map(),
    // https://mimesniff.spec.whatwg.org/#mime-type-essence
    essence: `${typeLowercase}/${subtypeLowercase}`
  }

  // 11. While position is not past the end of input:
  while (position.position < input.length) {
    // 1. Advance position by 1. (This skips past U+003B (;).)
    position.position++

    // 2. Collect a sequence of code points that are HTTP
    // whitespace from input given position.
    collectASequenceOfCodePoints(
      // https://fetch.spec.whatwg.org/#http-whitespace
      char => HTTP_WHITESPACE_REGEX.test(char),
      input,
      position
    )

    // 3. Let parameterName be the result of collecting a
    // sequence of code points that are not U+003B (;)
    // or U+003D (=) from input, given position.
    let parameterName = collectASequenceOfCodePoints(
      (char) => char !== ';' && char !== '=',
      input,
      position
    )

    // 4. Set parameterName to parameterName, in ASCII
    // lowercase.
    parameterName = parameterName.toLowerCase()

    // 5. If position is not past the end of input, then:
    if (position.position < input.length) {
      // 1. If the code point at position within input is
      // U+003B (;), then continue.
      if (input[position.position] === ';') {
        continue
      }

      // 2. Advance position by 1. (This skips past U+003D (=).)
      position.position++
    }

    // 6. If position is past the end of input, then break.
    if (position.position > input.length) {
      break
    }

    // 7. Let parameterValue be null.
    let parameterValue = null

    // 8. If the code point at position within input is
    // U+0022 ("), then:
    if (input[position.position] === '"') {
      // 1. Set parameterValue to the result of collecting
      // an HTTP quoted string from input, given position
      // and the extract-value flag.
      parameterValue = collectAnHTTPQuotedString(input, position, true)

      // 2. Collect a sequence of code points that are not
      // U+003B (;) from input, given position.
      collectASequenceOfCodePointsFast(
        ';',
        input,
        position
      )

    // 9. Otherwise:
    } else {
      // 1. Set parameterValue to the result of collecting
      // a sequence of code points that are not U+003B (;)
      // from input, given position.
      parameterValue = collectASequenceOfCodePointsFast(
        ';',
        input,
        position
      )

      // 2. Remove any trailing HTTP whitespace from parameterValue.
      parameterValue = removeHTTPWhitespace(parameterValue, false, true)

      // 3. If parameterValue is the empty string, then continue.
      if (parameterValue.length === 0) {
        continue
      }
    }

    // 10. If all of the following are true
    // - parameterName is not the empty string
    // - parameterName solely contains HTTP token code points
    // - parameterValue solely contains HTTP quoted-string token code points
    // - mimeType’s parameters[parameterName] does not exist
    // then set mimeType’s parameters[parameterName] to parameterValue.
    if (
      parameterName.length !== 0 &&
      HTTP_TOKEN_CODEPOINTS.test(parameterName) &&
      (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) &&
      !mimeType.parameters.has(parameterName)
    ) {
      mimeType.parameters.set(parameterName, parameterValue)
    }
  }

  // 12. Return mimeType.
  return mimeType
}

// https://infra.spec.whatwg.org/#forgiving-base64-decode
/** @param {string} data */
function forgivingBase64 (data) {
  // 1. Remove all ASCII whitespace from data.
  data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, '')  // eslint-disable-line

  // 2. If data’s code point length divides by 4 leaving
  // no remainder, then:
  if (data.length % 4 === 0) {
    // 1. If data ends with one or two U+003D (=) code points,
    // then remove them from data.
    data = data.replace(/=?=$/, '')
  }

  // 3. If data’s code point length divides by 4 leaving
  // a remainder of 1, then return failure.
  if (data.length % 4 === 1) {
    return 'failure'
  }

  // 4. If data contains a code point that is not one of
  //  U+002B (+)
  //  U+002F (/)
  //  ASCII alphanumeric
  // then return failure.
  if (/[^+/0-9A-Za-z]/.test(data)) {
    return 'failure'
  }

  const binary = atob(data)
  const bytes = new Uint8Array(binary.length)

  for (let byte = 0; byte < binary.length; byte++) {
    bytes[byte] = binary.charCodeAt(byte)
  }

  return bytes
}

// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string
// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string
/**
 * @param {string} input
 * @param {{ position: number }} position
 * @param {boolean?} extractValue
 */
function collectAnHTTPQuotedString (input, position, extractValue) {
  // 1. Let positionStart be position.
  const positionStart = position.position

  // 2. Let value be the empty string.
  let value = ''

  // 3. Assert: the code point at position within input
  // is U+0022 (").
  assert(input[position.position] === '"')

  // 4. Advance position by 1.
  position.position++

  // 5. While true:
  while (true) {
    // 1. Append the result of collecting a sequence of code points
    // that are not U+0022 (") or U+005C (\) from input, given
    // position, to value.
    value += collectASequenceOfCodePoints(
      (char) => char !== '"' && char !== '\\',
      input,
      position
    )

    // 2. If position is past the end of input, then break.
    if (position.position >= input.length) {
      break
    }

    // 3. Let quoteOrBackslash be the code point at position within
    // input.
    const quoteOrBackslash = input[position.position]

    // 4. Advance position by 1.
    position.position++

    // 5. If quoteOrBackslash is U+005C (\), then:
    if (quoteOrBackslash === '\\') {
      // 1. If position is past the end of input, then append
      // U+005C (\) to value and break.
      if (position.position >= input.length) {
        value += '\\'
        break
      }

      // 2. Append the code point at position within input to value.
      value += input[position.position]

      // 3. Advance position by 1.
      position.position++

    // 6. Otherwise:
    } else {
      // 1. Assert: quoteOrBackslash is U+0022 (").
      assert(quoteOrBackslash === '"')

      // 2. Break.
      break
    }
  }

  // 6. If the extract-value flag is set, then return value.
  if (extractValue) {
    return value
  }

  // 7. Return the code points from positionStart to position,
  // inclusive, within input.
  return input.slice(positionStart, position.position)
}

/**
 * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
 */
function serializeAMimeType (mimeType) {
  assert(mimeType !== 'failure')
  const { parameters, essence } = mimeType

  // 1. Let serialization be the concatenation of mimeType’s
  //    type, U+002F (/), and mimeType’s subtype.
  let serialization = essence

  // 2. For each name → value of mimeType’s parameters:
  for (let [name, value] of parameters.entries()) {
    // 1. Append U+003B (;) to serialization.
    serialization += ';'

    // 2. Append name to serialization.
    serialization += name

    // 3. Append U+003D (=) to serialization.
    serialization += '='

    // 4. If value does not solely contain HTTP token code
    //    points or value is the empty string, then:
    if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
      // 1. Precede each occurence of U+0022 (") or
      //    U+005C (\) in value with U+005C (\).
      value = value.replace(/(\\|")/g, '\\$1')

      // 2. Prepend U+0022 (") to value.
      value = '"' + value

      // 3. Append U+0022 (") to value.
      value += '"'
    }

    // 5. Append value to serialization.
    serialization += value
  }

  // 3. Return serialization.
  return serialization
}

/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} char
 */
function isHTTPWhiteSpace (char) {
  return char === '\r' || char === '\n' || char === '\t' || char === ' '
}

/**
 * @see https://fetch.spec.whatwg.org/#http-whitespace
 * @param {string} str
 */
function removeHTTPWhitespace (str, leading = true, trailing = true) {
  let lead = 0
  let trail = str.length - 1

  if (leading) {
    for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);
  }

  if (trailing) {
    for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);
  }

  return str.slice(lead, trail + 1)
}

/**
 * @see https://infra.spec.whatwg.org/#ascii-whitespace
 * @param {string} char
 */
function isASCIIWhitespace (char) {
  return char === '\r' || char === '\n' || char === '\t' || char === '\f' || char === ' '
}

/**
 * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
 */
function removeASCIIWhitespace (str, leading = true, trailing = true) {
  let lead = 0
  let trail = str.length - 1

  if (leading) {
    for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);
  }

  if (trailing) {
    for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);
  }

  return str.slice(lead, trail + 1)
}

module.exports = {
  dataURLProcessor,
  URLSerializer,
  collectASequenceOfCodePoints,
  collectASequenceOfCodePointsFast,
  stringPercentDecode,
  parseMIMEType,
  collectAnHTTPQuotedString,
  serializeAMimeType
}


/***/ }),

/***/ 6002:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Blob, File: NativeFile } = __nccwpck_require__(181)
const { types } = __nccwpck_require__(9023)
const { kState } = __nccwpck_require__(3507)
const { isBlobLike } = __nccwpck_require__(1096)
const { webidl } = __nccwpck_require__(1677)
const { parseMIMEType, serializeAMimeType } = __nccwpck_require__(6615)
const { kEnumerableProperty } = __nccwpck_require__(7001)
const encoder = new TextEncoder()

class File extends Blob {
  constructor (fileBits, fileName, options = {}) {
    // The File constructor is invoked with two or three parameters, depending
    // on whether the optional dictionary parameter is used. When the File()
    // constructor is invoked, user agents must run the following steps:
    webidl.argumentLengthCheck(arguments, 2, { header: 'File constructor' })

    fileBits = webidl.converters['sequence<BlobPart>'](fileBits)
    fileName = webidl.converters.USVString(fileName)
    options = webidl.converters.FilePropertyBag(options)

    // 1. Let bytes be the result of processing blob parts given fileBits and
    // options.
    // Note: Blob handles this for us

    // 2. Let n be the fileName argument to the constructor.
    const n = fileName

    // 3. Process FilePropertyBag dictionary argument by running the following
    // substeps:

    //    1. If the type member is provided and is not the empty string, let t
    //    be set to the type dictionary member. If t contains any characters
    //    outside the range U+0020 to U+007E, then set t to the empty string
    //    and return from these substeps.
    //    2. Convert every character in t to ASCII lowercase.
    let t = options.type
    let d

    // eslint-disable-next-line no-labels
    substep: {
      if (t) {
        t = parseMIMEType(t)

        if (t === 'failure') {
          t = ''
          // eslint-disable-next-line no-labels
          break substep
        }

        t = serializeAMimeType(t).toLowerCase()
      }

      //    3. If the lastModified member is provided, let d be set to the
      //    lastModified dictionary member. If it is not provided, set d to the
      //    current date and time represented as the number of milliseconds since
      //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
      d = options.lastModified
    }

    // 4. Return a new File object F such that:
    // F refers to the bytes byte sequence.
    // F.size is set to the number of total bytes in bytes.
    // F.name is set to n.
    // F.type is set to t.
    // F.lastModified is set to d.

    super(processBlobParts(fileBits, options), { type: t })
    this[kState] = {
      name: n,
      lastModified: d,
      type: t
    }
  }

  get name () {
    webidl.brandCheck(this, File)

    return this[kState].name
  }

  get lastModified () {
    webidl.brandCheck(this, File)

    return this[kState].lastModified
  }

  get type () {
    webidl.brandCheck(this, File)

    return this[kState].type
  }
}

class FileLike {
  constructor (blobLike, fileName, options = {}) {
    // TODO: argument idl type check

    // The File constructor is invoked with two or three parameters, depending
    // on whether the optional dictionary parameter is used. When the File()
    // constructor is invoked, user agents must run the following steps:

    // 1. Let bytes be the result of processing blob parts given fileBits and
    // options.

    // 2. Let n be the fileName argument to the constructor.
    const n = fileName

    // 3. Process FilePropertyBag dictionary argument by running the following
    // substeps:

    //    1. If the type member is provided and is not the empty string, let t
    //    be set to the type dictionary member. If t contains any characters
    //    outside the range U+0020 to U+007E, then set t to the empty string
    //    and return from these substeps.
    //    TODO
    const t = options.type

    //    2. Convert every character in t to ASCII lowercase.
    //    TODO

    //    3. If the lastModified member is provided, let d be set to the
    //    lastModified dictionary member. If it is not provided, set d to the
    //    current date and time represented as the number of milliseconds since
    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).
    const d = options.lastModified ?? Date.now()

    // 4. Return a new File object F such that:
    // F refers to the bytes byte sequence.
    // F.size is set to the number of total bytes in bytes.
    // F.name is set to n.
    // F.type is set to t.
    // F.lastModified is set to d.

    this[kState] = {
      blobLike,
      name: n,
      type: t,
      lastModified: d
    }
  }

  stream (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.stream(...args)
  }

  arrayBuffer (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.arrayBuffer(...args)
  }

  slice (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.slice(...args)
  }

  text (...args) {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.text(...args)
  }

  get size () {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.size
  }

  get type () {
    webidl.brandCheck(this, FileLike)

    return this[kState].blobLike.type
  }

  get name () {
    webidl.brandCheck(this, FileLike)

    return this[kState].name
  }

  get lastModified () {
    webidl.brandCheck(this, FileLike)

    return this[kState].lastModified
  }

  get [Symbol.toStringTag] () {
    return 'File'
  }
}

Object.defineProperties(File.prototype, {
  [Symbol.toStringTag]: {
    value: 'File',
    configurable: true
  },
  name: kEnumerableProperty,
  lastModified: kEnumerableProperty
})

webidl.converters.Blob = webidl.interfaceConverter(Blob)

webidl.converters.BlobPart = function (V, opts) {
  if (webidl.util.Type(V) === 'Object') {
    if (isBlobLike(V)) {
      return webidl.converters.Blob(V, { strict: false })
    }

    if (
      ArrayBuffer.isView(V) ||
      types.isAnyArrayBuffer(V)
    ) {
      return webidl.converters.BufferSource(V, opts)
    }
  }

  return webidl.converters.USVString(V, opts)
}

webidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(
  webidl.converters.BlobPart
)

// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag
webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
  {
    key: 'lastModified',
    converter: webidl.converters['long long'],
    get defaultValue () {
      return Date.now()
    }
  },
  {
    key: 'type',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'endings',
    converter: (value) => {
      value = webidl.converters.DOMString(value)
      value = value.toLowerCase()

      if (value !== 'native') {
        value = 'transparent'
      }

      return value
    },
    defaultValue: 'transparent'
  }
])

/**
 * @see https://www.w3.org/TR/FileAPI/#process-blob-parts
 * @param {(NodeJS.TypedArray|Blob|string)[]} parts
 * @param {{ type: string, endings: string }} options
 */
function processBlobParts (parts, options) {
  // 1. Let bytes be an empty sequence of bytes.
  /** @type {NodeJS.TypedArray[]} */
  const bytes = []

  // 2. For each element in parts:
  for (const element of parts) {
    // 1. If element is a USVString, run the following substeps:
    if (typeof element === 'string') {
      // 1. Let s be element.
      let s = element

      // 2. If the endings member of options is "native", set s
      //    to the result of converting line endings to native
      //    of element.
      if (options.endings === 'native') {
        s = convertLineEndingsNative(s)
      }

      // 3. Append the result of UTF-8 encoding s to bytes.
      bytes.push(encoder.encode(s))
    } else if (
      types.isAnyArrayBuffer(element) ||
      types.isTypedArray(element)
    ) {
      // 2. If element is a BufferSource, get a copy of the
      //    bytes held by the buffer source, and append those
      //    bytes to bytes.
      if (!element.buffer) { // ArrayBuffer
        bytes.push(new Uint8Array(element))
      } else {
        bytes.push(
          new Uint8Array(element.buffer, element.byteOffset, element.byteLength)
        )
      }
    } else if (isBlobLike(element)) {
      // 3. If element is a Blob, append the bytes it represents
      //    to bytes.
      bytes.push(element)
    }
  }

  // 3. Return bytes.
  return bytes
}

/**
 * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
 * @param {string} s
 */
function convertLineEndingsNative (s) {
  // 1. Let native line ending be be the code point U+000A LF.
  let nativeLineEnding = '\n'

  // 2. If the underlying platform’s conventions are to
  //    represent newlines as a carriage return and line feed
  //    sequence, set native line ending to the code point
  //    U+000D CR followed by the code point U+000A LF.
  if (process.platform === 'win32') {
    nativeLineEnding = '\r\n'
  }

  return s.replace(/\r?\n/g, nativeLineEnding)
}

// If this function is moved to ./util.js, some tools (such as
// rollup) will warn about circular dependencies. See:
// https://github.com/nodejs/undici/issues/1629
function isFileLike (object) {
  return (
    (NativeFile && object instanceof NativeFile) ||
    object instanceof File || (
      object &&
      (typeof object.stream === 'function' ||
      typeof object.arrayBuffer === 'function') &&
      object[Symbol.toStringTag] === 'File'
    )
  )
}

module.exports = { File, FileLike, isFileLike }


/***/ }),

/***/ 6334:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { isBlobLike, toUSVString, makeIterator } = __nccwpck_require__(1096)
const { kState } = __nccwpck_require__(3507)
const { File: UndiciFile, FileLike, isFileLike } = __nccwpck_require__(6002)
const { webidl } = __nccwpck_require__(1677)
const { Blob, File: NativeFile } = __nccwpck_require__(181)

/** @type {globalThis['File']} */
const File = NativeFile ?? UndiciFile

// https://xhr.spec.whatwg.org/#formdata
class FormData {
  constructor (form) {
    if (form !== undefined) {
      throw webidl.errors.conversionFailed({
        prefix: 'FormData constructor',
        argument: 'Argument 1',
        types: ['undefined']
      })
    }

    this[kState] = []
  }

  append (name, value, filename = undefined) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.append' })

    if (arguments.length === 3 && !isBlobLike(value)) {
      throw new TypeError(
        "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
      )
    }

    // 1. Let value be value if given; otherwise blobValue.

    name = webidl.converters.USVString(name)
    value = isBlobLike(value)
      ? webidl.converters.Blob(value, { strict: false })
      : webidl.converters.USVString(value)
    filename = arguments.length === 3
      ? webidl.converters.USVString(filename)
      : undefined

    // 2. Let entry be the result of creating an entry with
    // name, value, and filename if given.
    const entry = makeEntry(name, value, filename)

    // 3. Append entry to this’s entry list.
    this[kState].push(entry)
  }

  delete (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.delete' })

    name = webidl.converters.USVString(name)

    // The delete(name) method steps are to remove all entries whose name
    // is name from this’s entry list.
    this[kState] = this[kState].filter(entry => entry.name !== name)
  }

  get (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.get' })

    name = webidl.converters.USVString(name)

    // 1. If there is no entry whose name is name in this’s entry list,
    // then return null.
    const idx = this[kState].findIndex((entry) => entry.name === name)
    if (idx === -1) {
      return null
    }

    // 2. Return the value of the first entry whose name is name from
    // this’s entry list.
    return this[kState][idx].value
  }

  getAll (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.getAll' })

    name = webidl.converters.USVString(name)

    // 1. If there is no entry whose name is name in this’s entry list,
    // then return the empty list.
    // 2. Return the values of all entries whose name is name, in order,
    // from this’s entry list.
    return this[kState]
      .filter((entry) => entry.name === name)
      .map((entry) => entry.value)
  }

  has (name) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.has' })

    name = webidl.converters.USVString(name)

    // The has(name) method steps are to return true if there is an entry
    // whose name is name in this’s entry list; otherwise false.
    return this[kState].findIndex((entry) => entry.name === name) !== -1
  }

  set (name, value, filename = undefined) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.set' })

    if (arguments.length === 3 && !isBlobLike(value)) {
      throw new TypeError(
        "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
      )
    }

    // The set(name, value) and set(name, blobValue, filename) method steps
    // are:

    // 1. Let value be value if given; otherwise blobValue.

    name = webidl.converters.USVString(name)
    value = isBlobLike(value)
      ? webidl.converters.Blob(value, { strict: false })
      : webidl.converters.USVString(value)
    filename = arguments.length === 3
      ? toUSVString(filename)
      : undefined

    // 2. Let entry be the result of creating an entry with name, value, and
    // filename if given.
    const entry = makeEntry(name, value, filename)

    // 3. If there are entries in this’s entry list whose name is name, then
    // replace the first such entry with entry and remove the others.
    const idx = this[kState].findIndex((entry) => entry.name === name)
    if (idx !== -1) {
      this[kState] = [
        ...this[kState].slice(0, idx),
        entry,
        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)
      ]
    } else {
      // 4. Otherwise, append entry to this’s entry list.
      this[kState].push(entry)
    }
  }

  entries () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'key+value'
    )
  }

  keys () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'key'
    )
  }

  values () {
    webidl.brandCheck(this, FormData)

    return makeIterator(
      () => this[kState].map(pair => [pair.name, pair.value]),
      'FormData',
      'value'
    )
  }

  /**
   * @param {(value: string, key: string, self: FormData) => void} callbackFn
   * @param {unknown} thisArg
   */
  forEach (callbackFn, thisArg = globalThis) {
    webidl.brandCheck(this, FormData)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.forEach' })

    if (typeof callbackFn !== 'function') {
      throw new TypeError(
        "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
      )
    }

    for (const [key, value] of this) {
      callbackFn.apply(thisArg, [value, key, this])
    }
  }
}

FormData.prototype[Symbol.iterator] = FormData.prototype.entries

Object.defineProperties(FormData.prototype, {
  [Symbol.toStringTag]: {
    value: 'FormData',
    configurable: true
  }
})

/**
 * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
 * @param {string} name
 * @param {string|Blob} value
 * @param {?string} filename
 * @returns
 */
function makeEntry (name, value, filename) {
  // 1. Set name to the result of converting name into a scalar value string.
  // "To convert a string into a scalar value string, replace any surrogates
  //  with U+FFFD."
  // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end
  name = Buffer.from(name).toString('utf8')

  // 2. If value is a string, then set value to the result of converting
  //    value into a scalar value string.
  if (typeof value === 'string') {
    value = Buffer.from(value).toString('utf8')
  } else {
    // 3. Otherwise:

    // 1. If value is not a File object, then set value to a new File object,
    //    representing the same bytes, whose name attribute value is "blob"
    if (!isFileLike(value)) {
      value = value instanceof Blob
        ? new File([value], 'blob', { type: value.type })
        : new FileLike(value, 'blob', { type: value.type })
    }

    // 2. If filename is given, then set value to a new File object,
    //    representing the same bytes, whose name attribute is filename.
    if (filename !== undefined) {
      /** @type {FilePropertyBag} */
      const options = {
        type: value.type,
        lastModified: value.lastModified
      }

      value = (NativeFile && value instanceof NativeFile) || value instanceof UndiciFile
        ? new File([value], filename, options)
        : new FileLike(value, filename, options)
    }
  }

  // 4. Return an entry whose name is name and whose value is value.
  return { name, value }
}

module.exports = { FormData }


/***/ }),

/***/ 1339:
/***/ ((module) => {

"use strict";


// In case of breaking changes, increase the version
// number to avoid conflicts.
const globalOrigin = Symbol.for('undici.globalOrigin.1')

function getGlobalOrigin () {
  return globalThis[globalOrigin]
}

function setGlobalOrigin (newOrigin) {
  if (newOrigin === undefined) {
    Object.defineProperty(globalThis, globalOrigin, {
      value: undefined,
      writable: true,
      enumerable: false,
      configurable: false
    })

    return
  }

  const parsedURL = new URL(newOrigin)

  if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {
    throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`)
  }

  Object.defineProperty(globalThis, globalOrigin, {
    value: parsedURL,
    writable: true,
    enumerable: false,
    configurable: false
  })
}

module.exports = {
  getGlobalOrigin,
  setGlobalOrigin
}


/***/ }),

/***/ 6396:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// https://github.com/Ethan-Arrowood/undici-fetch



const { kHeadersList, kConstruct } = __nccwpck_require__(8136)
const { kGuard } = __nccwpck_require__(3507)
const { kEnumerableProperty } = __nccwpck_require__(7001)
const {
  makeIterator,
  isValidHeaderName,
  isValidHeaderValue
} = __nccwpck_require__(1096)
const util = __nccwpck_require__(9023)
const { webidl } = __nccwpck_require__(1677)
const assert = __nccwpck_require__(2613)

const kHeadersMap = Symbol('headers map')
const kHeadersSortedMap = Symbol('headers map sorted')

/**
 * @param {number} code
 */
function isHTTPWhiteSpaceCharCode (code) {
  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
 * @param {string} potentialValue
 */
function headerValueNormalize (potentialValue) {
  //  To normalize a byte sequence potentialValue, remove
  //  any leading and trailing HTTP whitespace bytes from
  //  potentialValue.
  let i = 0; let j = potentialValue.length

  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j
  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i

  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j)
}

function fill (headers, object) {
  // To fill a Headers object headers with a given object object, run these steps:

  // 1. If object is a sequence, then for each header in object:
  // Note: webidl conversion to array has already been done.
  if (Array.isArray(object)) {
    for (let i = 0; i < object.length; ++i) {
      const header = object[i]
      // 1. If header does not contain exactly two items, then throw a TypeError.
      if (header.length !== 2) {
        throw webidl.errors.exception({
          header: 'Headers constructor',
          message: `expected name/value pair to be length 2, found ${header.length}.`
        })
      }

      // 2. Append (header’s first item, header’s second item) to headers.
      appendHeader(headers, header[0], header[1])
    }
  } else if (typeof object === 'object' && object !== null) {
    // Note: null should throw

    // 2. Otherwise, object is a record, then for each key → value in object,
    //    append (key, value) to headers
    const keys = Object.keys(object)
    for (let i = 0; i < keys.length; ++i) {
      appendHeader(headers, keys[i], object[keys[i]])
    }
  } else {
    throw webidl.errors.conversionFailed({
      prefix: 'Headers constructor',
      argument: 'Argument 1',
      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
    })
  }
}

/**
 * @see https://fetch.spec.whatwg.org/#concept-headers-append
 */
function appendHeader (headers, name, value) {
  // 1. Normalize value.
  value = headerValueNormalize(value)

  // 2. If name is not a header name or value is not a
  //    header value, then throw a TypeError.
  if (!isValidHeaderName(name)) {
    throw webidl.errors.invalidArgument({
      prefix: 'Headers.append',
      value: name,
      type: 'header name'
    })
  } else if (!isValidHeaderValue(value)) {
    throw webidl.errors.invalidArgument({
      prefix: 'Headers.append',
      value,
      type: 'header value'
    })
  }

  // 3. If headers’s guard is "immutable", then throw a TypeError.
  // 4. Otherwise, if headers’s guard is "request" and name is a
  //    forbidden header name, return.
  // Note: undici does not implement forbidden header names
  if (headers[kGuard] === 'immutable') {
    throw new TypeError('immutable')
  } else if (headers[kGuard] === 'request-no-cors') {
    // 5. Otherwise, if headers’s guard is "request-no-cors":
    // TODO
  }

  // 6. Otherwise, if headers’s guard is "response" and name is a
  //    forbidden response-header name, return.

  // 7. Append (name, value) to headers’s header list.
  return headers[kHeadersList].append(name, value)

  // 8. If headers’s guard is "request-no-cors", then remove
  //    privileged no-CORS request headers from headers
}

class HeadersList {
  /** @type {[string, string][]|null} */
  cookies = null

  constructor (init) {
    if (init instanceof HeadersList) {
      this[kHeadersMap] = new Map(init[kHeadersMap])
      this[kHeadersSortedMap] = init[kHeadersSortedMap]
      this.cookies = init.cookies === null ? null : [...init.cookies]
    } else {
      this[kHeadersMap] = new Map(init)
      this[kHeadersSortedMap] = null
    }
  }

  // https://fetch.spec.whatwg.org/#header-list-contains
  contains (name) {
    // A header list list contains a header name name if list
    // contains a header whose name is a byte-case-insensitive
    // match for name.
    name = name.toLowerCase()

    return this[kHeadersMap].has(name)
  }

  clear () {
    this[kHeadersMap].clear()
    this[kHeadersSortedMap] = null
    this.cookies = null
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-append
  append (name, value) {
    this[kHeadersSortedMap] = null

    // 1. If list contains name, then set name to the first such
    //    header’s name.
    const lowercaseName = name.toLowerCase()
    const exists = this[kHeadersMap].get(lowercaseName)

    // 2. Append (name, value) to list.
    if (exists) {
      const delimiter = lowercaseName === 'cookie' ? '; ' : ', '
      this[kHeadersMap].set(lowercaseName, {
        name: exists.name,
        value: `${exists.value}${delimiter}${value}`
      })
    } else {
      this[kHeadersMap].set(lowercaseName, { name, value })
    }

    if (lowercaseName === 'set-cookie') {
      this.cookies ??= []
      this.cookies.push(value)
    }
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-set
  set (name, value) {
    this[kHeadersSortedMap] = null
    const lowercaseName = name.toLowerCase()

    if (lowercaseName === 'set-cookie') {
      this.cookies = [value]
    }

    // 1. If list contains name, then set the value of
    //    the first such header to value and remove the
    //    others.
    // 2. Otherwise, append header (name, value) to list.
    this[kHeadersMap].set(lowercaseName, { name, value })
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-delete
  delete (name) {
    this[kHeadersSortedMap] = null

    name = name.toLowerCase()

    if (name === 'set-cookie') {
      this.cookies = null
    }

    this[kHeadersMap].delete(name)
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-get
  get (name) {
    const value = this[kHeadersMap].get(name.toLowerCase())

    // 1. If list does not contain name, then return null.
    // 2. Return the values of all headers in list whose name
    //    is a byte-case-insensitive match for name,
    //    separated from each other by 0x2C 0x20, in order.
    return value === undefined ? null : value.value
  }

  * [Symbol.iterator] () {
    // use the lowercased name
    for (const [name, { value }] of this[kHeadersMap]) {
      yield [name, value]
    }
  }

  get entries () {
    const headers = {}

    if (this[kHeadersMap].size) {
      for (const { name, value } of this[kHeadersMap].values()) {
        headers[name] = value
      }
    }

    return headers
  }
}

// https://fetch.spec.whatwg.org/#headers-class
class Headers {
  constructor (init = undefined) {
    if (init === kConstruct) {
      return
    }
    this[kHeadersList] = new HeadersList()

    // The new Headers(init) constructor steps are:

    // 1. Set this’s guard to "none".
    this[kGuard] = 'none'

    // 2. If init is given, then fill this with init.
    if (init !== undefined) {
      init = webidl.converters.HeadersInit(init)
      fill(this, init)
    }
  }

  // https://fetch.spec.whatwg.org/#dom-headers-append
  append (name, value) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.append' })

    name = webidl.converters.ByteString(name)
    value = webidl.converters.ByteString(value)

    return appendHeader(this, name, value)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-delete
  delete (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.delete' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.delete',
        value: name,
        type: 'header name'
      })
    }

    // 2. If this’s guard is "immutable", then throw a TypeError.
    // 3. Otherwise, if this’s guard is "request" and name is a
    //    forbidden header name, return.
    // 4. Otherwise, if this’s guard is "request-no-cors", name
    //    is not a no-CORS-safelisted request-header name, and
    //    name is not a privileged no-CORS request-header name,
    //    return.
    // 5. Otherwise, if this’s guard is "response" and name is
    //    a forbidden response-header name, return.
    // Note: undici does not implement forbidden header names
    if (this[kGuard] === 'immutable') {
      throw new TypeError('immutable')
    } else if (this[kGuard] === 'request-no-cors') {
      // TODO
    }

    // 6. If this’s header list does not contain name, then
    //    return.
    if (!this[kHeadersList].contains(name)) {
      return
    }

    // 7. Delete name from this’s header list.
    // 8. If this’s guard is "request-no-cors", then remove
    //    privileged no-CORS request headers from this.
    this[kHeadersList].delete(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-get
  get (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.get' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.get',
        value: name,
        type: 'header name'
      })
    }

    // 2. Return the result of getting name from this’s header
    //    list.
    return this[kHeadersList].get(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-has
  has (name) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.has' })

    name = webidl.converters.ByteString(name)

    // 1. If name is not a header name, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.has',
        value: name,
        type: 'header name'
      })
    }

    // 2. Return true if this’s header list contains name;
    //    otherwise false.
    return this[kHeadersList].contains(name)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-set
  set (name, value) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.set' })

    name = webidl.converters.ByteString(name)
    value = webidl.converters.ByteString(value)

    // 1. Normalize value.
    value = headerValueNormalize(value)

    // 2. If name is not a header name or value is not a
    //    header value, then throw a TypeError.
    if (!isValidHeaderName(name)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.set',
        value: name,
        type: 'header name'
      })
    } else if (!isValidHeaderValue(value)) {
      throw webidl.errors.invalidArgument({
        prefix: 'Headers.set',
        value,
        type: 'header value'
      })
    }

    // 3. If this’s guard is "immutable", then throw a TypeError.
    // 4. Otherwise, if this’s guard is "request" and name is a
    //    forbidden header name, return.
    // 5. Otherwise, if this’s guard is "request-no-cors" and
    //    name/value is not a no-CORS-safelisted request-header,
    //    return.
    // 6. Otherwise, if this’s guard is "response" and name is a
    //    forbidden response-header name, return.
    // Note: undici does not implement forbidden header names
    if (this[kGuard] === 'immutable') {
      throw new TypeError('immutable')
    } else if (this[kGuard] === 'request-no-cors') {
      // TODO
    }

    // 7. Set (name, value) in this’s header list.
    // 8. If this’s guard is "request-no-cors", then remove
    //    privileged no-CORS request headers from this
    this[kHeadersList].set(name, value)
  }

  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
  getSetCookie () {
    webidl.brandCheck(this, Headers)

    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».
    // 2. Return the values of all headers in this’s header list whose name is
    //    a byte-case-insensitive match for `Set-Cookie`, in order.

    const list = this[kHeadersList].cookies

    if (list) {
      return [...list]
    }

    return []
  }

  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
  get [kHeadersSortedMap] () {
    if (this[kHeadersList][kHeadersSortedMap]) {
      return this[kHeadersList][kHeadersSortedMap]
    }

    // 1. Let headers be an empty list of headers with the key being the name
    //    and value the value.
    const headers = []

    // 2. Let names be the result of convert header names to a sorted-lowercase
    //    set with all the names of the headers in list.
    const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1)
    const cookies = this[kHeadersList].cookies

    // 3. For each name of names:
    for (let i = 0; i < names.length; ++i) {
      const [name, value] = names[i]
      // 1. If name is `set-cookie`, then:
      if (name === 'set-cookie') {
        // 1. Let values be a list of all values of headers in list whose name
        //    is a byte-case-insensitive match for name, in order.

        // 2. For each value of values:
        // 1. Append (name, value) to headers.
        for (let j = 0; j < cookies.length; ++j) {
          headers.push([name, cookies[j]])
        }
      } else {
        // 2. Otherwise:

        // 1. Let value be the result of getting name from list.

        // 2. Assert: value is non-null.
        assert(value !== null)

        // 3. Append (name, value) to headers.
        headers.push([name, value])
      }
    }

    this[kHeadersList][kHeadersSortedMap] = headers

    // 4. Return headers.
    return headers
  }

  keys () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'key')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'key'
    )
  }

  values () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'value')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'value'
    )
  }

  entries () {
    webidl.brandCheck(this, Headers)

    if (this[kGuard] === 'immutable') {
      const value = this[kHeadersSortedMap]
      return makeIterator(() => value, 'Headers',
        'key+value')
    }

    return makeIterator(
      () => [...this[kHeadersSortedMap].values()],
      'Headers',
      'key+value'
    )
  }

  /**
   * @param {(value: string, key: string, self: Headers) => void} callbackFn
   * @param {unknown} thisArg
   */
  forEach (callbackFn, thisArg = globalThis) {
    webidl.brandCheck(this, Headers)

    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.forEach' })

    if (typeof callbackFn !== 'function') {
      throw new TypeError(
        "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
      )
    }

    for (const [key, value] of this) {
      callbackFn.apply(thisArg, [value, key, this])
    }
  }

  [Symbol.for('nodejs.util.inspect.custom')] () {
    webidl.brandCheck(this, Headers)

    return this[kHeadersList]
  }
}

Headers.prototype[Symbol.iterator] = Headers.prototype.entries

Object.defineProperties(Headers.prototype, {
  append: kEnumerableProperty,
  delete: kEnumerableProperty,
  get: kEnumerableProperty,
  has: kEnumerableProperty,
  set: kEnumerableProperty,
  getSetCookie: kEnumerableProperty,
  keys: kEnumerableProperty,
  values: kEnumerableProperty,
  entries: kEnumerableProperty,
  forEach: kEnumerableProperty,
  [Symbol.iterator]: { enumerable: false },
  [Symbol.toStringTag]: {
    value: 'Headers',
    configurable: true
  },
  [util.inspect.custom]: {
    enumerable: false
  }
})

webidl.converters.HeadersInit = function (V) {
  if (webidl.util.Type(V) === 'Object') {
    if (V[Symbol.iterator]) {
      return webidl.converters['sequence<sequence<ByteString>>'](V)
    }

    return webidl.converters['record<ByteString, ByteString>'](V)
  }

  throw webidl.errors.conversionFailed({
    prefix: 'Headers constructor',
    argument: 'Argument 1',
    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']
  })
}

module.exports = {
  fill,
  Headers,
  HeadersList
}


/***/ }),

/***/ 22:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
// https://github.com/Ethan-Arrowood/undici-fetch



const {
  Response,
  makeNetworkError,
  makeAppropriateNetworkError,
  filterResponse,
  makeResponse
} = __nccwpck_require__(5891)
const { Headers } = __nccwpck_require__(6396)
const { Request, makeRequest } = __nccwpck_require__(7591)
const zlib = __nccwpck_require__(3106)
const {
  bytesMatch,
  makePolicyContainer,
  clonePolicyContainer,
  requestBadPort,
  TAOCheck,
  appendRequestOriginHeader,
  responseLocationURL,
  requestCurrentURL,
  setRequestReferrerPolicyOnRedirect,
  tryUpgradeRequestToAPotentiallyTrustworthyURL,
  createOpaqueTimingInfo,
  appendFetchMetadata,
  corsCheck,
  crossOriginResourcePolicyCheck,
  determineRequestsReferrer,
  coarsenedSharedCurrentTime,
  createDeferredPromise,
  isBlobLike,
  sameOrigin,
  isCancelled,
  isAborted,
  isErrorLike,
  fullyReadBody,
  readableStreamClose,
  isomorphicEncode,
  urlIsLocal,
  urlIsHttpHttpsScheme,
  urlHasHttpsScheme
} = __nccwpck_require__(1096)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(3507)
const assert = __nccwpck_require__(2613)
const { safelyExtractBody } = __nccwpck_require__(6564)
const {
  redirectStatusSet,
  nullBodyStatus,
  safeMethodsSet,
  requestBodyHeader,
  subresourceSet,
  DOMException
} = __nccwpck_require__(7431)
const { kHeadersList } = __nccwpck_require__(8136)
const EE = __nccwpck_require__(4434)
const { Readable, pipeline } = __nccwpck_require__(2203)
const { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = __nccwpck_require__(7001)
const { dataURLProcessor, serializeAMimeType } = __nccwpck_require__(6615)
const { TransformStream } = __nccwpck_require__(3774)
const { getGlobalDispatcher } = __nccwpck_require__(6762)
const { webidl } = __nccwpck_require__(1677)
const { STATUS_CODES } = __nccwpck_require__(8611)
const GET_OR_HEAD = ['GET', 'HEAD']

/** @type {import('buffer').resolveObjectURL} */
let resolveObjectURL
let ReadableStream = globalThis.ReadableStream

class Fetch extends EE {
  constructor (dispatcher) {
    super()

    this.dispatcher = dispatcher
    this.connection = null
    this.dump = false
    this.state = 'ongoing'
    // 2 terminated listeners get added per request,
    // but only 1 gets removed. If there are 20 redirects,
    // 21 listeners will be added.
    // See https://github.com/nodejs/undici/issues/1711
    // TODO (fix): Find and fix root cause for leaked listener.
    this.setMaxListeners(21)
  }

  terminate (reason) {
    if (this.state !== 'ongoing') {
      return
    }

    this.state = 'terminated'
    this.connection?.destroy(reason)
    this.emit('terminated', reason)
  }

  // https://fetch.spec.whatwg.org/#fetch-controller-abort
  abort (error) {
    if (this.state !== 'ongoing') {
      return
    }

    // 1. Set controller’s state to "aborted".
    this.state = 'aborted'

    // 2. Let fallbackError be an "AbortError" DOMException.
    // 3. Set error to fallbackError if it is not given.
    if (!error) {
      error = new DOMException('The operation was aborted.', 'AbortError')
    }

    // 4. Let serializedError be StructuredSerialize(error).
    //    If that threw an exception, catch it, and let
    //    serializedError be StructuredSerialize(fallbackError).

    // 5. Set controller’s serialized abort reason to serializedError.
    this.serializedAbortReason = error

    this.connection?.destroy(error)
    this.emit('terminated', error)
  }
}

// https://fetch.spec.whatwg.org/#fetch-method
function fetch (input, init = {}) {
  webidl.argumentLengthCheck(arguments, 1, { header: 'globalThis.fetch' })

  // 1. Let p be a new promise.
  const p = createDeferredPromise()

  // 2. Let requestObject be the result of invoking the initial value of
  // Request as constructor with input and init as arguments. If this throws
  // an exception, reject p with it and return p.
  let requestObject

  try {
    requestObject = new Request(input, init)
  } catch (e) {
    p.reject(e)
    return p.promise
  }

  // 3. Let request be requestObject’s request.
  const request = requestObject[kState]

  // 4. If requestObject’s signal’s aborted flag is set, then:
  if (requestObject.signal.aborted) {
    // 1. Abort the fetch() call with p, request, null, and
    //    requestObject’s signal’s abort reason.
    abortFetch(p, request, null, requestObject.signal.reason)

    // 2. Return p.
    return p.promise
  }

  // 5. Let globalObject be request’s client’s global object.
  const globalObject = request.client.globalObject

  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set
  // request’s service-workers mode to "none".
  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {
    request.serviceWorkers = 'none'
  }

  // 7. Let responseObject be null.
  let responseObject = null

  // 8. Let relevantRealm be this’s relevant Realm.
  const relevantRealm = null

  // 9. Let locallyAborted be false.
  let locallyAborted = false

  // 10. Let controller be null.
  let controller = null

  // 11. Add the following abort steps to requestObject’s signal:
  addAbortListener(
    requestObject.signal,
    () => {
      // 1. Set locallyAborted to true.
      locallyAborted = true

      // 2. Assert: controller is non-null.
      assert(controller != null)

      // 3. Abort controller with requestObject’s signal’s abort reason.
      controller.abort(requestObject.signal.reason)

      // 4. Abort the fetch() call with p, request, responseObject,
      //    and requestObject’s signal’s abort reason.
      abortFetch(p, request, responseObject, requestObject.signal.reason)
    }
  )

  // 12. Let handleFetchDone given response response be to finalize and
  // report timing with response, globalObject, and "fetch".
  const handleFetchDone = (response) =>
    finalizeAndReportTiming(response, 'fetch')

  // 13. Set controller to the result of calling fetch given request,
  // with processResponseEndOfBody set to handleFetchDone, and processResponse
  // given response being these substeps:

  const processResponse = (response) => {
    // 1. If locallyAborted is true, terminate these substeps.
    if (locallyAborted) {
      return Promise.resolve()
    }

    // 2. If response’s aborted flag is set, then:
    if (response.aborted) {
      // 1. Let deserializedError be the result of deserialize a serialized
      //    abort reason given controller’s serialized abort reason and
      //    relevantRealm.

      // 2. Abort the fetch() call with p, request, responseObject, and
      //    deserializedError.

      abortFetch(p, request, responseObject, controller.serializedAbortReason)
      return Promise.resolve()
    }

    // 3. If response is a network error, then reject p with a TypeError
    // and terminate these substeps.
    if (response.type === 'error') {
      p.reject(
        Object.assign(new TypeError('fetch failed'), { cause: response.error })
      )
      return Promise.resolve()
    }

    // 4. Set responseObject to the result of creating a Response object,
    // given response, "immutable", and relevantRealm.
    responseObject = new Response()
    responseObject[kState] = response
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kHeadersList] = response.headersList
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 5. Resolve p with responseObject.
    p.resolve(responseObject)
  }

  controller = fetching({
    request,
    processResponseEndOfBody: handleFetchDone,
    processResponse,
    dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici
  })

  // 14. Return p.
  return p.promise
}

// https://fetch.spec.whatwg.org/#finalize-and-report-timing
function finalizeAndReportTiming (response, initiatorType = 'other') {
  // 1. If response is an aborted network error, then return.
  if (response.type === 'error' && response.aborted) {
    return
  }

  // 2. If response’s URL list is null or empty, then return.
  if (!response.urlList?.length) {
    return
  }

  // 3. Let originalURL be response’s URL list[0].
  const originalURL = response.urlList[0]

  // 4. Let timingInfo be response’s timing info.
  let timingInfo = response.timingInfo

  // 5. Let cacheState be response’s cache state.
  let cacheState = response.cacheState

  // 6. If originalURL’s scheme is not an HTTP(S) scheme, then return.
  if (!urlIsHttpHttpsScheme(originalURL)) {
    return
  }

  // 7. If timingInfo is null, then return.
  if (timingInfo === null) {
    return
  }

  // 8. If response’s timing allow passed flag is not set, then:
  if (!response.timingAllowPassed) {
    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.
    timingInfo = createOpaqueTimingInfo({
      startTime: timingInfo.startTime
    })

    //  2. Set cacheState to the empty string.
    cacheState = ''
  }

  // 9. Set timingInfo’s end time to the coarsened shared current time
  // given global’s relevant settings object’s cross-origin isolated
  // capability.
  // TODO: given global’s relevant settings object’s cross-origin isolated
  // capability?
  timingInfo.endTime = coarsenedSharedCurrentTime()

  // 10. Set response’s timing info to timingInfo.
  response.timingInfo = timingInfo

  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,
  // global, and cacheState.
  markResourceTiming(
    timingInfo,
    originalURL,
    initiatorType,
    globalThis,
    cacheState
  )
}

// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing
function markResourceTiming (timingInfo, originalURL, initiatorType, globalThis, cacheState) {
  if (nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 2)) {
    performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState)
  }
}

// https://fetch.spec.whatwg.org/#abort-fetch
function abortFetch (p, request, responseObject, error) {
  // Note: AbortSignal.reason was added in node v17.2.0
  // which would give us an undefined error to reject with.
  // Remove this once node v16 is no longer supported.
  if (!error) {
    error = new DOMException('The operation was aborted.', 'AbortError')
  }

  // 1. Reject promise with error.
  p.reject(error)

  // 2. If request’s body is not null and is readable, then cancel request’s
  // body with error.
  if (request.body != null && isReadable(request.body?.stream)) {
    request.body.stream.cancel(error).catch((err) => {
      if (err.code === 'ERR_INVALID_STATE') {
        // Node bug?
        return
      }
      throw err
    })
  }

  // 3. If responseObject is null, then return.
  if (responseObject == null) {
    return
  }

  // 4. Let response be responseObject’s response.
  const response = responseObject[kState]

  // 5. If response’s body is not null and is readable, then error response’s
  // body with error.
  if (response.body != null && isReadable(response.body?.stream)) {
    response.body.stream.cancel(error).catch((err) => {
      if (err.code === 'ERR_INVALID_STATE') {
        // Node bug?
        return
      }
      throw err
    })
  }
}

// https://fetch.spec.whatwg.org/#fetching
function fetching ({
  request,
  processRequestBodyChunkLength,
  processRequestEndOfBody,
  processResponse,
  processResponseEndOfBody,
  processResponseConsumeBody,
  useParallelQueue = false,
  dispatcher // undici
}) {
  // 1. Let taskDestination be null.
  let taskDestination = null

  // 2. Let crossOriginIsolatedCapability be false.
  let crossOriginIsolatedCapability = false

  // 3. If request’s client is non-null, then:
  if (request.client != null) {
    // 1. Set taskDestination to request’s client’s global object.
    taskDestination = request.client.globalObject

    // 2. Set crossOriginIsolatedCapability to request’s client’s cross-origin
    // isolated capability.
    crossOriginIsolatedCapability =
      request.client.crossOriginIsolatedCapability
  }

  // 4. If useParallelQueue is true, then set taskDestination to the result of
  // starting a new parallel queue.
  // TODO

  // 5. Let timingInfo be a new fetch timing info whose start time and
  // post-redirect start time are the coarsened shared current time given
  // crossOriginIsolatedCapability.
  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability)
  const timingInfo = createOpaqueTimingInfo({
    startTime: currenTime
  })

  // 6. Let fetchParams be a new fetch params whose
  // request is request,
  // timing info is timingInfo,
  // process request body chunk length is processRequestBodyChunkLength,
  // process request end-of-body is processRequestEndOfBody,
  // process response is processResponse,
  // process response consume body is processResponseConsumeBody,
  // process response end-of-body is processResponseEndOfBody,
  // task destination is taskDestination,
  // and cross-origin isolated capability is crossOriginIsolatedCapability.
  const fetchParams = {
    controller: new Fetch(dispatcher),
    request,
    timingInfo,
    processRequestBodyChunkLength,
    processRequestEndOfBody,
    processResponse,
    processResponseConsumeBody,
    processResponseEndOfBody,
    taskDestination,
    crossOriginIsolatedCapability
  }

  // 7. If request’s body is a byte sequence, then set request’s body to
  //    request’s body as a body.
  // NOTE: Since fetching is only called from fetch, body should already be
  // extracted.
  assert(!request.body || request.body.stream)

  // 8. If request’s window is "client", then set request’s window to request’s
  // client, if request’s client’s global object is a Window object; otherwise
  // "no-window".
  if (request.window === 'client') {
    // TODO: What if request.client is null?
    request.window =
      request.client?.globalObject?.constructor?.name === 'Window'
        ? request.client
        : 'no-window'
  }

  // 9. If request’s origin is "client", then set request’s origin to request’s
  // client’s origin.
  if (request.origin === 'client') {
    // TODO: What if request.client is null?
    request.origin = request.client?.origin
  }

  // 10. If all of the following conditions are true:
  // TODO

  // 11. If request’s policy container is "client", then:
  if (request.policyContainer === 'client') {
    // 1. If request’s client is non-null, then set request’s policy
    // container to a clone of request’s client’s policy container. [HTML]
    if (request.client != null) {
      request.policyContainer = clonePolicyContainer(
        request.client.policyContainer
      )
    } else {
      // 2. Otherwise, set request’s policy container to a new policy
      // container.
      request.policyContainer = makePolicyContainer()
    }
  }

  // 12. If request’s header list does not contain `Accept`, then:
  if (!request.headersList.contains('accept')) {
    // 1. Let value be `*/*`.
    const value = '*/*'

    // 2. A user agent should set value to the first matching statement, if
    // any, switching on request’s destination:
    // "document"
    // "frame"
    // "iframe"
    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`
    // "image"
    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`
    // "style"
    // `text/css,*/*;q=0.1`
    // TODO

    // 3. Append `Accept`/value to request’s header list.
    request.headersList.append('accept', value)
  }

  // 13. If request’s header list does not contain `Accept-Language`, then
  // user agents should append `Accept-Language`/an appropriate value to
  // request’s header list.
  if (!request.headersList.contains('accept-language')) {
    request.headersList.append('accept-language', '*')
  }

  // 14. If request’s priority is null, then use request’s initiator and
  // destination appropriately in setting request’s priority to a
  // user-agent-defined object.
  if (request.priority === null) {
    // TODO
  }

  // 15. If request is a subresource request, then:
  if (subresourceSet.has(request.destination)) {
    // TODO
  }

  // 16. Run main fetch given fetchParams.
  mainFetch(fetchParams)
    .catch(err => {
      fetchParams.controller.terminate(err)
    })

  // 17. Return fetchParam's controller
  return fetchParams.controller
}

// https://fetch.spec.whatwg.org/#concept-main-fetch
async function mainFetch (fetchParams, recursive = false) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. If request’s local-URLs-only flag is set and request’s current URL is
  // not local, then set response to a network error.
  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
    response = makeNetworkError('local URLs only')
  }

  // 4. Run report Content Security Policy violations for request.
  // TODO

  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.
  tryUpgradeRequestToAPotentiallyTrustworthyURL(request)

  // 6. If should request be blocked due to a bad port, should fetching request
  // be blocked as mixed content, or should request be blocked by Content
  // Security Policy returns blocked, then set response to a network error.
  if (requestBadPort(request) === 'blocked') {
    response = makeNetworkError('bad port')
  }
  // TODO: should fetching request be blocked as mixed content?
  // TODO: should request be blocked by Content Security Policy?

  // 7. If request’s referrer policy is the empty string, then set request’s
  // referrer policy to request’s policy container’s referrer policy.
  if (request.referrerPolicy === '') {
    request.referrerPolicy = request.policyContainer.referrerPolicy
  }

  // 8. If request’s referrer is not "no-referrer", then set request’s
  // referrer to the result of invoking determine request’s referrer.
  if (request.referrer !== 'no-referrer') {
    request.referrer = determineRequestsReferrer(request)
  }

  // 9. Set request’s current URL’s scheme to "https" if all of the following
  // conditions are true:
  // - request’s current URL’s scheme is "http"
  // - request’s current URL’s host is a domain
  // - Matching request’s current URL’s host per Known HSTS Host Domain Name
  //   Matching results in either a superdomain match with an asserted
  //   includeSubDomains directive or a congruent match (with or without an
  //   asserted includeSubDomains directive). [HSTS]
  // TODO

  // 10. If recursive is false, then run the remaining steps in parallel.
  // TODO

  // 11. If response is null, then set response to the result of running
  // the steps corresponding to the first matching statement:
  if (response === null) {
    response = await (async () => {
      const currentURL = requestCurrentURL(request)

      if (
        // - request’s current URL’s origin is same origin with request’s origin,
        //   and request’s response tainting is "basic"
        (sameOrigin(currentURL, request.url) && request.responseTainting === 'basic') ||
        // request’s current URL’s scheme is "data"
        (currentURL.protocol === 'data:') ||
        // - request’s mode is "navigate" or "websocket"
        (request.mode === 'navigate' || request.mode === 'websocket')
      ) {
        // 1. Set request’s response tainting to "basic".
        request.responseTainting = 'basic'

        // 2. Return the result of running scheme fetch given fetchParams.
        return await schemeFetch(fetchParams)
      }

      // request’s mode is "same-origin"
      if (request.mode === 'same-origin') {
        // 1. Return a network error.
        return makeNetworkError('request mode cannot be "same-origin"')
      }

      // request’s mode is "no-cors"
      if (request.mode === 'no-cors') {
        // 1. If request’s redirect mode is not "follow", then return a network
        // error.
        if (request.redirect !== 'follow') {
          return makeNetworkError(
            'redirect mode cannot be "follow" for "no-cors" request'
          )
        }

        // 2. Set request’s response tainting to "opaque".
        request.responseTainting = 'opaque'

        // 3. Return the result of running scheme fetch given fetchParams.
        return await schemeFetch(fetchParams)
      }

      // request’s current URL’s scheme is not an HTTP(S) scheme
      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
        // Return a network error.
        return makeNetworkError('URL scheme must be a HTTP(S) scheme')
      }

      // - request’s use-CORS-preflight flag is set
      // - request’s unsafe-request flag is set and either request’s method is
      //   not a CORS-safelisted method or CORS-unsafe request-header names with
      //   request’s header list is not empty
      //    1. Set request’s response tainting to "cors".
      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch
      //    given fetchParams and true.
      //    3. If corsWithPreflightResponse is a network error, then clear cache
      //    entries using request.
      //    4. Return corsWithPreflightResponse.
      // TODO

      // Otherwise
      //    1. Set request’s response tainting to "cors".
      request.responseTainting = 'cors'

      //    2. Return the result of running HTTP fetch given fetchParams.
      return await httpFetch(fetchParams)
    })()
  }

  // 12. If recursive is true, then return response.
  if (recursive) {
    return response
  }

  // 13. If response is not a network error and response is not a filtered
  // response, then:
  if (response.status !== 0 && !response.internalResponse) {
    // If request’s response tainting is "cors", then:
    if (request.responseTainting === 'cors') {
      // 1. Let headerNames be the result of extracting header list values
      // given `Access-Control-Expose-Headers` and response’s header list.
      // TODO
      // 2. If request’s credentials mode is not "include" and headerNames
      // contains `*`, then set response’s CORS-exposed header-name list to
      // all unique header names in response’s header list.
      // TODO
      // 3. Otherwise, if headerNames is not null or failure, then set
      // response’s CORS-exposed header-name list to headerNames.
      // TODO
    }

    // Set response to the following filtered response with response as its
    // internal response, depending on request’s response tainting:
    if (request.responseTainting === 'basic') {
      response = filterResponse(response, 'basic')
    } else if (request.responseTainting === 'cors') {
      response = filterResponse(response, 'cors')
    } else if (request.responseTainting === 'opaque') {
      response = filterResponse(response, 'opaque')
    } else {
      assert(false)
    }
  }

  // 14. Let internalResponse be response, if response is a network error,
  // and response’s internal response otherwise.
  let internalResponse =
    response.status === 0 ? response : response.internalResponse

  // 15. If internalResponse’s URL list is empty, then set it to a clone of
  // request’s URL list.
  if (internalResponse.urlList.length === 0) {
    internalResponse.urlList.push(...request.urlList)
  }

  // 16. If request’s timing allow failed flag is unset, then set
  // internalResponse’s timing allow passed flag.
  if (!request.timingAllowFailed) {
    response.timingAllowPassed = true
  }

  // 17. If response is not a network error and any of the following returns
  // blocked
  // - should internalResponse to request be blocked as mixed content
  // - should internalResponse to request be blocked by Content Security Policy
  // - should internalResponse to request be blocked due to its MIME type
  // - should internalResponse to request be blocked due to nosniff
  // TODO

  // 18. If response’s type is "opaque", internalResponse’s status is 206,
  // internalResponse’s range-requested flag is set, and request’s header
  // list does not contain `Range`, then set response and internalResponse
  // to a network error.
  if (
    response.type === 'opaque' &&
    internalResponse.status === 206 &&
    internalResponse.rangeRequested &&
    !request.headers.contains('range')
  ) {
    response = internalResponse = makeNetworkError()
  }

  // 19. If response is not a network error and either request’s method is
  // `HEAD` or `CONNECT`, or internalResponse’s status is a null body status,
  // set internalResponse’s body to null and disregard any enqueuing toward
  // it (if any).
  if (
    response.status !== 0 &&
    (request.method === 'HEAD' ||
      request.method === 'CONNECT' ||
      nullBodyStatus.includes(internalResponse.status))
  ) {
    internalResponse.body = null
    fetchParams.controller.dump = true
  }

  // 20. If request’s integrity metadata is not the empty string, then:
  if (request.integrity) {
    // 1. Let processBodyError be this step: run fetch finale given fetchParams
    // and a network error.
    const processBodyError = (reason) =>
      fetchFinale(fetchParams, makeNetworkError(reason))

    // 2. If request’s response tainting is "opaque", or response’s body is null,
    // then run processBodyError and abort these steps.
    if (request.responseTainting === 'opaque' || response.body == null) {
      processBodyError(response.error)
      return
    }

    // 3. Let processBody given bytes be these steps:
    const processBody = (bytes) => {
      // 1. If bytes do not match request’s integrity metadata,
      // then run processBodyError and abort these steps. [SRI]
      if (!bytesMatch(bytes, request.integrity)) {
        processBodyError('integrity mismatch')
        return
      }

      // 2. Set response’s body to bytes as a body.
      response.body = safelyExtractBody(bytes)[0]

      // 3. Run fetch finale given fetchParams and response.
      fetchFinale(fetchParams, response)
    }

    // 4. Fully read response’s body given processBody and processBodyError.
    await fullyReadBody(response.body, processBody, processBodyError)
  } else {
    // 21. Otherwise, run fetch finale given fetchParams and response.
    fetchFinale(fetchParams, response)
  }
}

// https://fetch.spec.whatwg.org/#concept-scheme-fetch
// given a fetch params fetchParams
function schemeFetch (fetchParams) {
  // Note: since the connection is destroyed on redirect, which sets fetchParams to a
  // cancelled state, we do not want this condition to trigger *unless* there have been
  // no redirects. See https://github.com/nodejs/undici/issues/1776
  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
    return Promise.resolve(makeAppropriateNetworkError(fetchParams))
  }

  // 2. Let request be fetchParams’s request.
  const { request } = fetchParams

  const { protocol: scheme } = requestCurrentURL(request)

  // 3. Switch on request’s current URL’s scheme and run the associated steps:
  switch (scheme) {
    case 'about:': {
      // If request’s current URL’s path is the string "blank", then return a new response
      // whose status message is `OK`, header list is « (`Content-Type`, `text/html;charset=utf-8`) »,
      // and body is the empty byte sequence as a body.

      // Otherwise, return a network error.
      return Promise.resolve(makeNetworkError('about scheme is not supported'))
    }
    case 'blob:': {
      if (!resolveObjectURL) {
        resolveObjectURL = (__nccwpck_require__(181).resolveObjectURL)
      }

      // 1. Let blobURLEntry be request’s current URL’s blob URL entry.
      const blobURLEntry = requestCurrentURL(request)

      // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56
      // Buffer.resolveObjectURL does not ignore URL queries.
      if (blobURLEntry.search.length !== 0) {
        return Promise.resolve(makeNetworkError('NetworkError when attempting to fetch resource.'))
      }

      const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString())

      // 2. If request’s method is not `GET`, blobURLEntry is null, or blobURLEntry’s
      //    object is not a Blob object, then return a network error.
      if (request.method !== 'GET' || !isBlobLike(blobURLEntryObject)) {
        return Promise.resolve(makeNetworkError('invalid method'))
      }

      // 3. Let bodyWithType be the result of safely extracting blobURLEntry’s object.
      const bodyWithType = safelyExtractBody(blobURLEntryObject)

      // 4. Let body be bodyWithType’s body.
      const body = bodyWithType[0]

      // 5. Let length be body’s length, serialized and isomorphic encoded.
      const length = isomorphicEncode(`${body.length}`)

      // 6. Let type be bodyWithType’s type if it is non-null; otherwise the empty byte sequence.
      const type = bodyWithType[1] ?? ''

      // 7. Return a new response whose status message is `OK`, header list is
      //    « (`Content-Length`, length), (`Content-Type`, type) », and body is body.
      const response = makeResponse({
        statusText: 'OK',
        headersList: [
          ['content-length', { name: 'Content-Length', value: length }],
          ['content-type', { name: 'Content-Type', value: type }]
        ]
      })

      response.body = body

      return Promise.resolve(response)
    }
    case 'data:': {
      // 1. Let dataURLStruct be the result of running the
      //    data: URL processor on request’s current URL.
      const currentURL = requestCurrentURL(request)
      const dataURLStruct = dataURLProcessor(currentURL)

      // 2. If dataURLStruct is failure, then return a
      //    network error.
      if (dataURLStruct === 'failure') {
        return Promise.resolve(makeNetworkError('failed to fetch the data URL'))
      }

      // 3. Let mimeType be dataURLStruct’s MIME type, serialized.
      const mimeType = serializeAMimeType(dataURLStruct.mimeType)

      // 4. Return a response whose status message is `OK`,
      //    header list is « (`Content-Type`, mimeType) »,
      //    and body is dataURLStruct’s body as a body.
      return Promise.resolve(makeResponse({
        statusText: 'OK',
        headersList: [
          ['content-type', { name: 'Content-Type', value: mimeType }]
        ],
        body: safelyExtractBody(dataURLStruct.body)[0]
      }))
    }
    case 'file:': {
      // For now, unfortunate as it is, file URLs are left as an exercise for the reader.
      // When in doubt, return a network error.
      return Promise.resolve(makeNetworkError('not implemented... yet...'))
    }
    case 'http:':
    case 'https:': {
      // Return the result of running HTTP fetch given fetchParams.

      return httpFetch(fetchParams)
        .catch((err) => makeNetworkError(err))
    }
    default: {
      return Promise.resolve(makeNetworkError('unknown scheme'))
    }
  }
}

// https://fetch.spec.whatwg.org/#finalize-response
function finalizeResponse (fetchParams, response) {
  // 1. Set fetchParams’s request’s done flag.
  fetchParams.request.done = true

  // 2, If fetchParams’s process response done is not null, then queue a fetch
  // task to run fetchParams’s process response done given response, with
  // fetchParams’s task destination.
  if (fetchParams.processResponseDone != null) {
    queueMicrotask(() => fetchParams.processResponseDone(response))
  }
}

// https://fetch.spec.whatwg.org/#fetch-finale
function fetchFinale (fetchParams, response) {
  // 1. If response is a network error, then:
  if (response.type === 'error') {
    // 1. Set response’s URL list to « fetchParams’s request’s URL list[0] ».
    response.urlList = [fetchParams.request.urlList[0]]

    // 2. Set response’s timing info to the result of creating an opaque timing
    // info for fetchParams’s timing info.
    response.timingInfo = createOpaqueTimingInfo({
      startTime: fetchParams.timingInfo.startTime
    })
  }

  // 2. Let processResponseEndOfBody be the following steps:
  const processResponseEndOfBody = () => {
    // 1. Set fetchParams’s request’s done flag.
    fetchParams.request.done = true

    // If fetchParams’s process response end-of-body is not null,
    // then queue a fetch task to run fetchParams’s process response
    // end-of-body given response with fetchParams’s task destination.
    if (fetchParams.processResponseEndOfBody != null) {
      queueMicrotask(() => fetchParams.processResponseEndOfBody(response))
    }
  }

  // 3. If fetchParams’s process response is non-null, then queue a fetch task
  // to run fetchParams’s process response given response, with fetchParams’s
  // task destination.
  if (fetchParams.processResponse != null) {
    queueMicrotask(() => fetchParams.processResponse(response))
  }

  // 4. If response’s body is null, then run processResponseEndOfBody.
  if (response.body == null) {
    processResponseEndOfBody()
  } else {
  // 5. Otherwise:

    // 1. Let transformStream be a new a TransformStream.

    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,
    // enqueues chunk in transformStream.
    const identityTransformAlgorithm = (chunk, controller) => {
      controller.enqueue(chunk)
    }

    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm
    // and flushAlgorithm set to processResponseEndOfBody.
    const transformStream = new TransformStream({
      start () {},
      transform: identityTransformAlgorithm,
      flush: processResponseEndOfBody
    }, {
      size () {
        return 1
      }
    }, {
      size () {
        return 1
      }
    })

    // 4. Set response’s body to the result of piping response’s body through transformStream.
    response.body = { stream: response.body.stream.pipeThrough(transformStream) }
  }

  // 6. If fetchParams’s process response consume body is non-null, then:
  if (fetchParams.processResponseConsumeBody != null) {
    // 1. Let processBody given nullOrBytes be this step: run fetchParams’s
    // process response consume body given response and nullOrBytes.
    const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes)

    // 2. Let processBodyError be this step: run fetchParams’s process
    // response consume body given response and failure.
    const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure)

    // 3. If response’s body is null, then queue a fetch task to run processBody
    // given null, with fetchParams’s task destination.
    if (response.body == null) {
      queueMicrotask(() => processBody(null))
    } else {
      // 4. Otherwise, fully read response’s body given processBody, processBodyError,
      // and fetchParams’s task destination.
      return fullyReadBody(response.body, processBody, processBodyError)
    }
    return Promise.resolve()
  }
}

// https://fetch.spec.whatwg.org/#http-fetch
async function httpFetch (fetchParams) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. Let actualResponse be null.
  let actualResponse = null

  // 4. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 5. If request’s service-workers mode is "all", then:
  if (request.serviceWorkers === 'all') {
    // TODO
  }

  // 6. If response is null, then:
  if (response === null) {
    // 1. If makeCORSPreflight is true and one of these conditions is true:
    // TODO

    // 2. If request’s redirect mode is "follow", then set request’s
    // service-workers mode to "none".
    if (request.redirect === 'follow') {
      request.serviceWorkers = 'none'
    }

    // 3. Set response and actualResponse to the result of running
    // HTTP-network-or-cache fetch given fetchParams.
    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams)

    // 4. If request’s response tainting is "cors" and a CORS check
    // for request and response returns failure, then return a network error.
    if (
      request.responseTainting === 'cors' &&
      corsCheck(request, response) === 'failure'
    ) {
      return makeNetworkError('cors failure')
    }

    // 5. If the TAO check for request and response returns failure, then set
    // request’s timing allow failed flag.
    if (TAOCheck(request, response) === 'failure') {
      request.timingAllowFailed = true
    }
  }

  // 7. If either request’s response tainting or response’s type
  // is "opaque", and the cross-origin resource policy check with
  // request’s origin, request’s client, request’s destination,
  // and actualResponse returns blocked, then return a network error.
  if (
    (request.responseTainting === 'opaque' || response.type === 'opaque') &&
    crossOriginResourcePolicyCheck(
      request.origin,
      request.client,
      request.destination,
      actualResponse
    ) === 'blocked'
  ) {
    return makeNetworkError('blocked')
  }

  // 8. If actualResponse’s status is a redirect status, then:
  if (redirectStatusSet.has(actualResponse.status)) {
    // 1. If actualResponse’s status is not 303, request’s body is not null,
    // and the connection uses HTTP/2, then user agents may, and are even
    // encouraged to, transmit an RST_STREAM frame.
    // See, https://github.com/whatwg/fetch/issues/1288
    if (request.redirect !== 'manual') {
      fetchParams.controller.connection.destroy()
    }

    // 2. Switch on request’s redirect mode:
    if (request.redirect === 'error') {
      // Set response to a network error.
      response = makeNetworkError('unexpected redirect')
    } else if (request.redirect === 'manual') {
      // Set response to an opaque-redirect filtered response whose internal
      // response is actualResponse.
      // NOTE(spec): On the web this would return an `opaqueredirect` response,
      // but that doesn't make sense server side.
      // See https://github.com/nodejs/undici/issues/1193.
      response = actualResponse
    } else if (request.redirect === 'follow') {
      // Set response to the result of running HTTP-redirect fetch given
      // fetchParams and response.
      response = await httpRedirectFetch(fetchParams, response)
    } else {
      assert(false)
    }
  }

  // 9. Set response’s timing info to timingInfo.
  response.timingInfo = timingInfo

  // 10. Return response.
  return response
}

// https://fetch.spec.whatwg.org/#http-redirect-fetch
function httpRedirectFetch (fetchParams, response) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let actualResponse be response, if response is not a filtered response,
  // and response’s internal response otherwise.
  const actualResponse = response.internalResponse
    ? response.internalResponse
    : response

  // 3. Let locationURL be actualResponse’s location URL given request’s current
  // URL’s fragment.
  let locationURL

  try {
    locationURL = responseLocationURL(
      actualResponse,
      requestCurrentURL(request).hash
    )

    // 4. If locationURL is null, then return response.
    if (locationURL == null) {
      return response
    }
  } catch (err) {
    // 5. If locationURL is failure, then return a network error.
    return Promise.resolve(makeNetworkError(err))
  }

  // 6. If locationURL’s scheme is not an HTTP(S) scheme, then return a network
  // error.
  if (!urlIsHttpHttpsScheme(locationURL)) {
    return Promise.resolve(makeNetworkError('URL scheme must be a HTTP(S) scheme'))
  }

  // 7. If request’s redirect count is 20, then return a network error.
  if (request.redirectCount === 20) {
    return Promise.resolve(makeNetworkError('redirect count exceeded'))
  }

  // 8. Increase request’s redirect count by 1.
  request.redirectCount += 1

  // 9. If request’s mode is "cors", locationURL includes credentials, and
  // request’s origin is not same origin with locationURL’s origin, then return
  //  a network error.
  if (
    request.mode === 'cors' &&
    (locationURL.username || locationURL.password) &&
    !sameOrigin(request, locationURL)
  ) {
    return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'))
  }

  // 10. If request’s response tainting is "cors" and locationURL includes
  // credentials, then return a network error.
  if (
    request.responseTainting === 'cors' &&
    (locationURL.username || locationURL.password)
  ) {
    return Promise.resolve(makeNetworkError(
      'URL cannot contain credentials for request mode "cors"'
    ))
  }

  // 11. If actualResponse’s status is not 303, request’s body is non-null,
  // and request’s body’s source is null, then return a network error.
  if (
    actualResponse.status !== 303 &&
    request.body != null &&
    request.body.source == null
  ) {
    return Promise.resolve(makeNetworkError())
  }

  // 12. If one of the following is true
  // - actualResponse’s status is 301 or 302 and request’s method is `POST`
  // - actualResponse’s status is 303 and request’s method is not `GET` or `HEAD`
  if (
    ([301, 302].includes(actualResponse.status) && request.method === 'POST') ||
    (actualResponse.status === 303 &&
      !GET_OR_HEAD.includes(request.method))
  ) {
    // then:
    // 1. Set request’s method to `GET` and request’s body to null.
    request.method = 'GET'
    request.body = null

    // 2. For each headerName of request-body-header name, delete headerName from
    // request’s header list.
    for (const headerName of requestBodyHeader) {
      request.headersList.delete(headerName)
    }
  }

  // 13. If request’s current URL’s origin is not same origin with locationURL’s
  //     origin, then for each headerName of CORS non-wildcard request-header name,
  //     delete headerName from request’s header list.
  if (!sameOrigin(requestCurrentURL(request), locationURL)) {
    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name
    request.headersList.delete('authorization')

    // https://fetch.spec.whatwg.org/#authentication-entries
    request.headersList.delete('proxy-authorization', true)

    // "Cookie" and "Host" are forbidden request-headers, which undici doesn't implement.
    request.headersList.delete('cookie')
    request.headersList.delete('host')
  }

  // 14. If request’s body is non-null, then set request’s body to the first return
  // value of safely extracting request’s body’s source.
  if (request.body != null) {
    assert(request.body.source != null)
    request.body = safelyExtractBody(request.body.source)[0]
  }

  // 15. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 16. Set timingInfo’s redirect end time and post-redirect start time to the
  // coarsened shared current time given fetchParams’s cross-origin isolated
  // capability.
  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =
    coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability)

  // 17. If timingInfo’s redirect start time is 0, then set timingInfo’s
  //  redirect start time to timingInfo’s start time.
  if (timingInfo.redirectStartTime === 0) {
    timingInfo.redirectStartTime = timingInfo.startTime
  }

  // 18. Append locationURL to request’s URL list.
  request.urlList.push(locationURL)

  // 19. Invoke set request’s referrer policy on redirect on request and
  // actualResponse.
  setRequestReferrerPolicyOnRedirect(request, actualResponse)

  // 20. Return the result of running main fetch given fetchParams and true.
  return mainFetch(fetchParams, true)
}

// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch
async function httpNetworkOrCacheFetch (
  fetchParams,
  isAuthenticationFetch = false,
  isNewConnectionFetch = false
) {
  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let httpFetchParams be null.
  let httpFetchParams = null

  // 3. Let httpRequest be null.
  let httpRequest = null

  // 4. Let response be null.
  let response = null

  // 5. Let storedResponse be null.
  // TODO: cache

  // 6. Let httpCache be null.
  const httpCache = null

  // 7. Let the revalidatingFlag be unset.
  const revalidatingFlag = false

  // 8. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. If request’s window is "no-window" and request’s redirect mode is
  //    "error", then set httpFetchParams to fetchParams and httpRequest to
  //    request.
  if (request.window === 'no-window' && request.redirect === 'error') {
    httpFetchParams = fetchParams
    httpRequest = request
  } else {
    // Otherwise:

    // 1. Set httpRequest to a clone of request.
    httpRequest = makeRequest(request)

    // 2. Set httpFetchParams to a copy of fetchParams.
    httpFetchParams = { ...fetchParams }

    // 3. Set httpFetchParams’s request to httpRequest.
    httpFetchParams.request = httpRequest
  }

  //    3. Let includeCredentials be true if one of
  const includeCredentials =
    request.credentials === 'include' ||
    (request.credentials === 'same-origin' &&
      request.responseTainting === 'basic')

  //    4. Let contentLength be httpRequest’s body’s length, if httpRequest’s
  //    body is non-null; otherwise null.
  const contentLength = httpRequest.body ? httpRequest.body.length : null

  //    5. Let contentLengthHeaderValue be null.
  let contentLengthHeaderValue = null

  //    6. If httpRequest’s body is null and httpRequest’s method is `POST` or
  //    `PUT`, then set contentLengthHeaderValue to `0`.
  if (
    httpRequest.body == null &&
    ['POST', 'PUT'].includes(httpRequest.method)
  ) {
    contentLengthHeaderValue = '0'
  }

  //    7. If contentLength is non-null, then set contentLengthHeaderValue to
  //    contentLength, serialized and isomorphic encoded.
  if (contentLength != null) {
    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`)
  }

  //    8. If contentLengthHeaderValue is non-null, then append
  //    `Content-Length`/contentLengthHeaderValue to httpRequest’s header
  //    list.
  if (contentLengthHeaderValue != null) {
    httpRequest.headersList.append('content-length', contentLengthHeaderValue)
  }

  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,
  //    contentLengthHeaderValue) to httpRequest’s header list.

  //    10. If contentLength is non-null and httpRequest’s keepalive is true,
  //    then:
  if (contentLength != null && httpRequest.keepalive) {
    // NOTE: keepalive is a noop outside of browser context.
  }

  //    11. If httpRequest’s referrer is a URL, then append
  //    `Referer`/httpRequest’s referrer, serialized and isomorphic encoded,
  //     to httpRequest’s header list.
  if (httpRequest.referrer instanceof URL) {
    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href))
  }

  //    12. Append a request `Origin` header for httpRequest.
  appendRequestOriginHeader(httpRequest)

  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]
  appendFetchMetadata(httpRequest)

  //    14. If httpRequest’s header list does not contain `User-Agent`, then
  //    user agents should append `User-Agent`/default `User-Agent` value to
  //    httpRequest’s header list.
  if (!httpRequest.headersList.contains('user-agent')) {
    httpRequest.headersList.append('user-agent', typeof esbuildDetection === 'undefined' ? 'undici' : 'node')
  }

  //    15. If httpRequest’s cache mode is "default" and httpRequest’s header
  //    list contains `If-Modified-Since`, `If-None-Match`,
  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set
  //    httpRequest’s cache mode to "no-store".
  if (
    httpRequest.cache === 'default' &&
    (httpRequest.headersList.contains('if-modified-since') ||
      httpRequest.headersList.contains('if-none-match') ||
      httpRequest.headersList.contains('if-unmodified-since') ||
      httpRequest.headersList.contains('if-match') ||
      httpRequest.headersList.contains('if-range'))
  ) {
    httpRequest.cache = 'no-store'
  }

  //    16. If httpRequest’s cache mode is "no-cache", httpRequest’s prevent
  //    no-cache cache-control header modification flag is unset, and
  //    httpRequest’s header list does not contain `Cache-Control`, then append
  //    `Cache-Control`/`max-age=0` to httpRequest’s header list.
  if (
    httpRequest.cache === 'no-cache' &&
    !httpRequest.preventNoCacheCacheControlHeaderModification &&
    !httpRequest.headersList.contains('cache-control')
  ) {
    httpRequest.headersList.append('cache-control', 'max-age=0')
  }

  //    17. If httpRequest’s cache mode is "no-store" or "reload", then:
  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {
    // 1. If httpRequest’s header list does not contain `Pragma`, then append
    // `Pragma`/`no-cache` to httpRequest’s header list.
    if (!httpRequest.headersList.contains('pragma')) {
      httpRequest.headersList.append('pragma', 'no-cache')
    }

    // 2. If httpRequest’s header list does not contain `Cache-Control`,
    // then append `Cache-Control`/`no-cache` to httpRequest’s header list.
    if (!httpRequest.headersList.contains('cache-control')) {
      httpRequest.headersList.append('cache-control', 'no-cache')
    }
  }

  //    18. If httpRequest’s header list contains `Range`, then append
  //    `Accept-Encoding`/`identity` to httpRequest’s header list.
  if (httpRequest.headersList.contains('range')) {
    httpRequest.headersList.append('accept-encoding', 'identity')
  }

  //    19. Modify httpRequest’s header list per HTTP. Do not append a given
  //    header if httpRequest’s header list contains that header’s name.
  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129
  if (!httpRequest.headersList.contains('accept-encoding')) {
    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate')
    } else {
      httpRequest.headersList.append('accept-encoding', 'gzip, deflate')
    }
  }

  httpRequest.headersList.delete('host')

  //    20. If includeCredentials is true, then:
  if (includeCredentials) {
    // 1. If the user agent is not configured to block cookies for httpRequest
    // (see section 7 of [COOKIES]), then:
    // TODO: credentials
    // 2. If httpRequest’s header list does not contain `Authorization`, then:
    // TODO: credentials
  }

  //    21. If there’s a proxy-authentication entry, use it as appropriate.
  //    TODO: proxy-authentication

  //    22. Set httpCache to the result of determining the HTTP cache
  //    partition, given httpRequest.
  //    TODO: cache

  //    23. If httpCache is null, then set httpRequest’s cache mode to
  //    "no-store".
  if (httpCache == null) {
    httpRequest.cache = 'no-store'
  }

  //    24. If httpRequest’s cache mode is neither "no-store" nor "reload",
  //    then:
  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {
    // TODO: cache
  }

  // 9. If aborted, then return the appropriate network error for fetchParams.
  // TODO

  // 10. If response is null, then:
  if (response == null) {
    // 1. If httpRequest’s cache mode is "only-if-cached", then return a
    // network error.
    if (httpRequest.mode === 'only-if-cached') {
      return makeNetworkError('only if cached')
    }

    // 2. Let forwardResponse be the result of running HTTP-network fetch
    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.
    const forwardResponse = await httpNetworkFetch(
      httpFetchParams,
      includeCredentials,
      isNewConnectionFetch
    )

    // 3. If httpRequest’s method is unsafe and forwardResponse’s status is
    // in the range 200 to 399, inclusive, invalidate appropriate stored
    // responses in httpCache, as per the "Invalidation" chapter of HTTP
    // Caching, and set storedResponse to null. [HTTP-CACHING]
    if (
      !safeMethodsSet.has(httpRequest.method) &&
      forwardResponse.status >= 200 &&
      forwardResponse.status <= 399
    ) {
      // TODO: cache
    }

    // 4. If the revalidatingFlag is set and forwardResponse’s status is 304,
    // then:
    if (revalidatingFlag && forwardResponse.status === 304) {
      // TODO: cache
    }

    // 5. If response is null, then:
    if (response == null) {
      // 1. Set response to forwardResponse.
      response = forwardResponse

      // 2. Store httpRequest and forwardResponse in httpCache, as per the
      // "Storing Responses in Caches" chapter of HTTP Caching. [HTTP-CACHING]
      // TODO: cache
    }
  }

  // 11. Set response’s URL list to a clone of httpRequest’s URL list.
  response.urlList = [...httpRequest.urlList]

  // 12. If httpRequest’s header list contains `Range`, then set response’s
  // range-requested flag.
  if (httpRequest.headersList.contains('range')) {
    response.rangeRequested = true
  }

  // 13. Set response’s request-includes-credentials to includeCredentials.
  response.requestIncludesCredentials = includeCredentials

  // 14. If response’s status is 401, httpRequest’s response tainting is not
  // "cors", includeCredentials is true, and request’s window is an environment
  // settings object, then:
  // TODO

  // 15. If response’s status is 407, then:
  if (response.status === 407) {
    // 1. If request’s window is "no-window", then return a network error.
    if (request.window === 'no-window') {
      return makeNetworkError()
    }

    // 2. ???

    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.
    if (isCancelled(fetchParams)) {
      return makeAppropriateNetworkError(fetchParams)
    }

    // 4. Prompt the end user as appropriate in request’s window and store
    // the result as a proxy-authentication entry. [HTTP-AUTH]
    // TODO: Invoke some kind of callback?

    // 5. Set response to the result of running HTTP-network-or-cache fetch given
    // fetchParams.
    // TODO
    return makeNetworkError('proxy authentication required')
  }

  // 16. If all of the following are true
  if (
    // response’s status is 421
    response.status === 421 &&
    // isNewConnectionFetch is false
    !isNewConnectionFetch &&
    // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
    (request.body == null || request.body.source != null)
  ) {
    // then:

    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.
    if (isCancelled(fetchParams)) {
      return makeAppropriateNetworkError(fetchParams)
    }

    // 2. Set response to the result of running HTTP-network-or-cache
    // fetch given fetchParams, isAuthenticationFetch, and true.

    // TODO (spec): The spec doesn't specify this but we need to cancel
    // the active response before we can start a new one.
    // https://github.com/whatwg/fetch/issues/1293
    fetchParams.controller.connection.destroy()

    response = await httpNetworkOrCacheFetch(
      fetchParams,
      isAuthenticationFetch,
      true
    )
  }

  // 17. If isAuthenticationFetch is true, then create an authentication entry
  if (isAuthenticationFetch) {
    // TODO
  }

  // 18. Return response.
  return response
}

// https://fetch.spec.whatwg.org/#http-network-fetch
async function httpNetworkFetch (
  fetchParams,
  includeCredentials = false,
  forceNewConnection = false
) {
  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed)

  fetchParams.controller.connection = {
    abort: null,
    destroyed: false,
    destroy (err) {
      if (!this.destroyed) {
        this.destroyed = true
        this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'))
      }
    }
  }

  // 1. Let request be fetchParams’s request.
  const request = fetchParams.request

  // 2. Let response be null.
  let response = null

  // 3. Let timingInfo be fetchParams’s timing info.
  const timingInfo = fetchParams.timingInfo

  // 4. Let httpCache be the result of determining the HTTP cache partition,
  // given request.
  // TODO: cache
  const httpCache = null

  // 5. If httpCache is null, then set request’s cache mode to "no-store".
  if (httpCache == null) {
    request.cache = 'no-store'
  }

  // 6. Let networkPartitionKey be the result of determining the network
  // partition key given request.
  // TODO

  // 7. Let newConnection be "yes" if forceNewConnection is true; otherwise
  // "no".
  const newConnection = forceNewConnection ? 'yes' : 'no' // eslint-disable-line no-unused-vars

  // 8. Switch on request’s mode:
  if (request.mode === 'websocket') {
    // Let connection be the result of obtaining a WebSocket connection,
    // given request’s current URL.
    // TODO
  } else {
    // Let connection be the result of obtaining a connection, given
    // networkPartitionKey, request’s current URL’s origin,
    // includeCredentials, and forceNewConnection.
    // TODO
  }

  // 9. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. If connection is failure, then return a network error.

  //    2. Set timingInfo’s final connection timing info to the result of
  //    calling clamp and coarsen connection timing info with connection’s
  //    timing info, timingInfo’s post-redirect start time, and fetchParams’s
  //    cross-origin isolated capability.

  //    3. If connection is not an HTTP/2 connection, request’s body is non-null,
  //    and request’s body’s source is null, then append (`Transfer-Encoding`,
  //    `chunked`) to request’s header list.

  //    4. Set timingInfo’s final network-request start time to the coarsened
  //    shared current time given fetchParams’s cross-origin isolated
  //    capability.

  //    5. Set response to the result of making an HTTP request over connection
  //    using request with the following caveats:

  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]
  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]

  //        - If request’s body is non-null, and request’s body’s source is null,
  //        then the user agent may have a buffer of up to 64 kibibytes and store
  //        a part of request’s body in that buffer. If the user agent reads from
  //        request’s body beyond that buffer’s size and the user agent needs to
  //        resend request, then instead return a network error.

  //        - Set timingInfo’s final network-response start time to the coarsened
  //        shared current time given fetchParams’s cross-origin isolated capability,
  //        immediately after the user agent’s HTTP parser receives the first byte
  //        of the response (e.g., frame header bytes for HTTP/2 or response status
  //        line for HTTP/1.x).

  //        - Wait until all the headers are transmitted.

  //        - Any responses whose status is in the range 100 to 199, inclusive,
  //        and is not 101, are to be ignored, except for the purposes of setting
  //        timingInfo’s final network-response start time above.

  //    - If request’s header list contains `Transfer-Encoding`/`chunked` and
  //    response is transferred via HTTP/1.0 or older, then return a network
  //    error.

  //    - If the HTTP request results in a TLS client certificate dialog, then:

  //        1. If request’s window is an environment settings object, make the
  //        dialog available in request’s window.

  //        2. Otherwise, return a network error.

  // To transmit request’s body body, run these steps:
  let requestBody = null
  // 1. If body is null and fetchParams’s process request end-of-body is
  // non-null, then queue a fetch task given fetchParams’s process request
  // end-of-body and fetchParams’s task destination.
  if (request.body == null && fetchParams.processRequestEndOfBody) {
    queueMicrotask(() => fetchParams.processRequestEndOfBody())
  } else if (request.body != null) {
    // 2. Otherwise, if body is non-null:

    //    1. Let processBodyChunk given bytes be these steps:
    const processBodyChunk = async function * (bytes) {
      // 1. If the ongoing fetch is terminated, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. Run this step in parallel: transmit bytes.
      yield bytes

      // 3. If fetchParams’s process request body is non-null, then run
      // fetchParams’s process request body given bytes’s length.
      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength)
    }

    // 2. Let processEndOfBody be these steps:
    const processEndOfBody = () => {
      // 1. If fetchParams is canceled, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. If fetchParams’s process request end-of-body is non-null,
      // then run fetchParams’s process request end-of-body.
      if (fetchParams.processRequestEndOfBody) {
        fetchParams.processRequestEndOfBody()
      }
    }

    // 3. Let processBodyError given e be these steps:
    const processBodyError = (e) => {
      // 1. If fetchParams is canceled, then abort these steps.
      if (isCancelled(fetchParams)) {
        return
      }

      // 2. If e is an "AbortError" DOMException, then abort fetchParams’s controller.
      if (e.name === 'AbortError') {
        fetchParams.controller.abort()
      } else {
        fetchParams.controller.terminate(e)
      }
    }

    // 4. Incrementally read request’s body given processBodyChunk, processEndOfBody,
    // processBodyError, and fetchParams’s task destination.
    requestBody = (async function * () {
      try {
        for await (const bytes of request.body.stream) {
          yield * processBodyChunk(bytes)
        }
        processEndOfBody()
      } catch (err) {
        processBodyError(err)
      }
    })()
  }

  try {
    // socket is only provided for websockets
    const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody })

    if (socket) {
      response = makeResponse({ status, statusText, headersList, socket })
    } else {
      const iterator = body[Symbol.asyncIterator]()
      fetchParams.controller.next = () => iterator.next()

      response = makeResponse({ status, statusText, headersList })
    }
  } catch (err) {
    // 10. If aborted, then:
    if (err.name === 'AbortError') {
      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.
      fetchParams.controller.connection.destroy()

      // 2. Return the appropriate network error for fetchParams.
      return makeAppropriateNetworkError(fetchParams, err)
    }

    return makeNetworkError(err)
  }

  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch
  // if it is suspended.
  const pullAlgorithm = () => {
    fetchParams.controller.resume()
  }

  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams’s
  // controller with reason, given reason.
  const cancelAlgorithm = (reason) => {
    fetchParams.controller.abort(reason)
  }

  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by
  // the user agent.
  // TODO

  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object
  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.
  // TODO

  // 15. Let stream be a new ReadableStream.
  // 16. Set up stream with pullAlgorithm set to pullAlgorithm,
  // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to
  // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(3774).ReadableStream)
  }

  const stream = new ReadableStream(
    {
      async start (controller) {
        fetchParams.controller.controller = controller
      },
      async pull (controller) {
        await pullAlgorithm(controller)
      },
      async cancel (reason) {
        await cancelAlgorithm(reason)
      }
    },
    {
      highWaterMark: 0,
      size () {
        return 1
      }
    }
  )

  // 17. Run these steps, but abort when the ongoing fetch is terminated:

  //    1. Set response’s body to a new body whose stream is stream.
  response.body = { stream }

  //    2. If response is not a network error and request’s cache mode is
  //    not "no-store", then update response in httpCache for request.
  //    TODO

  //    3. If includeCredentials is true and the user agent is not configured
  //    to block cookies for request (see section 7 of [COOKIES]), then run the
  //    "set-cookie-string" parsing algorithm (see section 5.2 of [COOKIES]) on
  //    the value of each header whose name is a byte-case-insensitive match for
  //    `Set-Cookie` in response’s header list, if any, and request’s current URL.
  //    TODO

  // 18. If aborted, then:
  // TODO

  // 19. Run these steps in parallel:

  //    1. Run these steps, but abort when fetchParams is canceled:
  fetchParams.controller.on('terminated', onAborted)
  fetchParams.controller.resume = async () => {
    // 1. While true
    while (true) {
      // 1-3. See onData...

      // 4. Set bytes to the result of handling content codings given
      // codings and bytes.
      let bytes
      let isFailure
      try {
        const { done, value } = await fetchParams.controller.next()

        if (isAborted(fetchParams)) {
          break
        }

        bytes = done ? undefined : value
      } catch (err) {
        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
          // zlib doesn't like empty streams.
          bytes = undefined
        } else {
          bytes = err

          // err may be propagated from the result of calling readablestream.cancel,
          // which might not be an error. https://github.com/nodejs/undici/issues/2009
          isFailure = true
        }
      }

      if (bytes === undefined) {
        // 2. Otherwise, if the bytes transmission for response’s message
        // body is done normally and stream is readable, then close
        // stream, finalize response for fetchParams and response, and
        // abort these in-parallel steps.
        readableStreamClose(fetchParams.controller.controller)

        finalizeResponse(fetchParams, response)

        return
      }

      // 5. Increase timingInfo’s decoded body size by bytes’s length.
      timingInfo.decodedBodySize += bytes?.byteLength ?? 0

      // 6. If bytes is failure, then terminate fetchParams’s controller.
      if (isFailure) {
        fetchParams.controller.terminate(bytes)
        return
      }

      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes
      // into stream.
      fetchParams.controller.controller.enqueue(new Uint8Array(bytes))

      // 8. If stream is errored, then terminate the ongoing fetch.
      if (isErrored(stream)) {
        fetchParams.controller.terminate()
        return
      }

      // 9. If stream doesn’t need more data ask the user agent to suspend
      // the ongoing fetch.
      if (!fetchParams.controller.controller.desiredSize) {
        return
      }
    }
  }

  //    2. If aborted, then:
  function onAborted (reason) {
    // 2. If fetchParams is aborted, then:
    if (isAborted(fetchParams)) {
      // 1. Set response’s aborted flag.
      response.aborted = true

      // 2. If stream is readable, then error stream with the result of
      //    deserialize a serialized abort reason given fetchParams’s
      //    controller’s serialized abort reason and an
      //    implementation-defined realm.
      if (isReadable(stream)) {
        fetchParams.controller.controller.error(
          fetchParams.controller.serializedAbortReason
        )
      }
    } else {
      // 3. Otherwise, if stream is readable, error stream with a TypeError.
      if (isReadable(stream)) {
        fetchParams.controller.controller.error(new TypeError('terminated', {
          cause: isErrorLike(reason) ? reason : undefined
        }))
      }
    }

    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.
    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.
    fetchParams.controller.connection.destroy()
  }

  // 20. Return response.
  return response

  async function dispatch ({ body }) {
    const url = requestCurrentURL(request)
    /** @type {import('../..').Agent} */
    const agent = fetchParams.controller.dispatcher

    return new Promise((resolve, reject) => agent.dispatch(
      {
        path: url.pathname + url.search,
        origin: url.origin,
        method: request.method,
        body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
        headers: request.headersList.entries,
        maxRedirections: 0,
        upgrade: request.mode === 'websocket' ? 'websocket' : undefined
      },
      {
        body: null,
        abort: null,

        onConnect (abort) {
          // TODO (fix): Do we need connection here?
          const { connection } = fetchParams.controller

          if (connection.destroyed) {
            abort(new DOMException('The operation was aborted.', 'AbortError'))
          } else {
            fetchParams.controller.on('terminated', abort)
            this.abort = connection.abort = abort
          }
        },

        onHeaders (status, headersList, resume, statusText) {
          if (status < 200) {
            return
          }

          let codings = []
          let location = ''

          const headers = new Headers()

          // For H2, the headers are a plain JS object
          // We distinguish between them and iterate accordingly
          if (Array.isArray(headersList)) {
            for (let n = 0; n < headersList.length; n += 2) {
              const key = headersList[n + 0].toString('latin1')
              const val = headersList[n + 1].toString('latin1')
              if (key.toLowerCase() === 'content-encoding') {
                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                // "All content-coding values are case-insensitive..."
                codings = val.toLowerCase().split(',').map((x) => x.trim())
              } else if (key.toLowerCase() === 'location') {
                location = val
              }

              headers[kHeadersList].append(key, val)
            }
          } else {
            const keys = Object.keys(headersList)
            for (const key of keys) {
              const val = headersList[key]
              if (key.toLowerCase() === 'content-encoding') {
                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1
                // "All content-coding values are case-insensitive..."
                codings = val.toLowerCase().split(',').map((x) => x.trim()).reverse()
              } else if (key.toLowerCase() === 'location') {
                location = val
              }

              headers[kHeadersList].append(key, val)
            }
          }

          this.body = new Readable({ read: resume })

          const decoders = []

          const willFollow = request.redirect === 'follow' &&
            location &&
            redirectStatusSet.has(status)

          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
          if (request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {
            for (const coding of codings) {
              // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2
              if (coding === 'x-gzip' || coding === 'gzip') {
                decoders.push(zlib.createGunzip({
                  // Be less strict when decoding compressed responses, since sometimes
                  // servers send slightly invalid responses that are still accepted
                  // by common browsers.
                  // Always using Z_SYNC_FLUSH is what cURL does.
                  flush: zlib.constants.Z_SYNC_FLUSH,
                  finishFlush: zlib.constants.Z_SYNC_FLUSH
                }))
              } else if (coding === 'deflate') {
                decoders.push(zlib.createInflate())
              } else if (coding === 'br') {
                decoders.push(zlib.createBrotliDecompress())
              } else {
                decoders.length = 0
                break
              }
            }
          }

          resolve({
            status,
            statusText,
            headersList: headers[kHeadersList],
            body: decoders.length
              ? pipeline(this.body, ...decoders, () => { })
              : this.body.on('error', () => {})
          })

          return true
        },

        onData (chunk) {
          if (fetchParams.controller.dump) {
            return
          }

          // 1. If one or more bytes have been transmitted from response’s
          // message body, then:

          //  1. Let bytes be the transmitted bytes.
          const bytes = chunk

          //  2. Let codings be the result of extracting header list values
          //  given `Content-Encoding` and response’s header list.
          //  See pullAlgorithm.

          //  3. Increase timingInfo’s encoded body size by bytes’s length.
          timingInfo.encodedBodySize += bytes.byteLength

          //  4. See pullAlgorithm...

          return this.body.push(bytes)
        },

        onComplete () {
          if (this.abort) {
            fetchParams.controller.off('terminated', this.abort)
          }

          fetchParams.controller.ended = true

          this.body.push(null)
        },

        onError (error) {
          if (this.abort) {
            fetchParams.controller.off('terminated', this.abort)
          }

          this.body?.destroy(error)

          fetchParams.controller.terminate(error)

          reject(error)
        },

        onUpgrade (status, headersList, socket) {
          if (status !== 101) {
            return
          }

          const headers = new Headers()

          for (let n = 0; n < headersList.length; n += 2) {
            const key = headersList[n + 0].toString('latin1')
            const val = headersList[n + 1].toString('latin1')

            headers[kHeadersList].append(key, val)
          }

          resolve({
            status,
            statusText: STATUS_CODES[status],
            headersList: headers[kHeadersList],
            socket
          })

          return true
        }
      }
    ))
  }
}

module.exports = {
  fetch,
  Fetch,
  fetching,
  finalizeAndReportTiming
}


/***/ }),

/***/ 7591:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
/* globals AbortController */



const { extractBody, mixinBody, cloneBody } = __nccwpck_require__(6564)
const { Headers, fill: fillHeaders, HeadersList } = __nccwpck_require__(6396)
const { FinalizationRegistry } = __nccwpck_require__(6131)()
const util = __nccwpck_require__(7001)
const {
  isValidHTTPToken,
  sameOrigin,
  normalizeMethod,
  makePolicyContainer,
  normalizeMethodRecord
} = __nccwpck_require__(1096)
const {
  forbiddenMethodsSet,
  corsSafeListedMethodsSet,
  referrerPolicy,
  requestRedirect,
  requestMode,
  requestCredentials,
  requestCache,
  requestDuplex
} = __nccwpck_require__(7431)
const { kEnumerableProperty } = util
const { kHeaders, kSignal, kState, kGuard, kRealm } = __nccwpck_require__(3507)
const { webidl } = __nccwpck_require__(1677)
const { getGlobalOrigin } = __nccwpck_require__(1339)
const { URLSerializer } = __nccwpck_require__(6615)
const { kHeadersList, kConstruct } = __nccwpck_require__(8136)
const assert = __nccwpck_require__(2613)
const { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __nccwpck_require__(4434)

let TransformStream = globalThis.TransformStream

const kAbortController = Symbol('abortController')

const requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
  signal.removeEventListener('abort', abort)
})

// https://fetch.spec.whatwg.org/#request-class
class Request {
  // https://fetch.spec.whatwg.org/#dom-request
  constructor (input, init = {}) {
    if (input === kConstruct) {
      return
    }

    webidl.argumentLengthCheck(arguments, 1, { header: 'Request constructor' })

    input = webidl.converters.RequestInfo(input)
    init = webidl.converters.RequestInit(init)

    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object
    this[kRealm] = {
      settingsObject: {
        baseUrl: getGlobalOrigin(),
        get origin () {
          return this.baseUrl?.origin
        },
        policyContainer: makePolicyContainer()
      }
    }

    // 1. Let request be null.
    let request = null

    // 2. Let fallbackMode be null.
    let fallbackMode = null

    // 3. Let baseURL be this’s relevant settings object’s API base URL.
    const baseUrl = this[kRealm].settingsObject.baseUrl

    // 4. Let signal be null.
    let signal = null

    // 5. If input is a string, then:
    if (typeof input === 'string') {
      // 1. Let parsedURL be the result of parsing input with baseURL.
      // 2. If parsedURL is failure, then throw a TypeError.
      let parsedURL
      try {
        parsedURL = new URL(input, baseUrl)
      } catch (err) {
        throw new TypeError('Failed to parse URL from ' + input, { cause: err })
      }

      // 3. If parsedURL includes credentials, then throw a TypeError.
      if (parsedURL.username || parsedURL.password) {
        throw new TypeError(
          'Request cannot be constructed from a URL that includes credentials: ' +
            input
        )
      }

      // 4. Set request to a new request whose URL is parsedURL.
      request = makeRequest({ urlList: [parsedURL] })

      // 5. Set fallbackMode to "cors".
      fallbackMode = 'cors'
    } else {
      // 6. Otherwise:

      // 7. Assert: input is a Request object.
      assert(input instanceof Request)

      // 8. Set request to input’s request.
      request = input[kState]

      // 9. Set signal to input’s signal.
      signal = input[kSignal]
    }

    // 7. Let origin be this’s relevant settings object’s origin.
    const origin = this[kRealm].settingsObject.origin

    // 8. Let window be "client".
    let window = 'client'

    // 9. If request’s window is an environment settings object and its origin
    // is same origin with origin, then set window to request’s window.
    if (
      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&
      sameOrigin(request.window, origin)
    ) {
      window = request.window
    }

    // 10. If init["window"] exists and is non-null, then throw a TypeError.
    if (init.window != null) {
      throw new TypeError(`'window' option '${window}' must be null`)
    }

    // 11. If init["window"] exists, then set window to "no-window".
    if ('window' in init) {
      window = 'no-window'
    }

    // 12. Set request to a new request with the following properties:
    request = makeRequest({
      // URL request’s URL.
      // undici implementation note: this is set as the first item in request's urlList in makeRequest
      // method request’s method.
      method: request.method,
      // header list A copy of request’s header list.
      // undici implementation note: headersList is cloned in makeRequest
      headersList: request.headersList,
      // unsafe-request flag Set.
      unsafeRequest: request.unsafeRequest,
      // client This’s relevant settings object.
      client: this[kRealm].settingsObject,
      // window window.
      window,
      // priority request’s priority.
      priority: request.priority,
      // origin request’s origin. The propagation of the origin is only significant for navigation requests
      // being handled by a service worker. In this scenario a request can have an origin that is different
      // from the current client.
      origin: request.origin,
      // referrer request’s referrer.
      referrer: request.referrer,
      // referrer policy request’s referrer policy.
      referrerPolicy: request.referrerPolicy,
      // mode request’s mode.
      mode: request.mode,
      // credentials mode request’s credentials mode.
      credentials: request.credentials,
      // cache mode request’s cache mode.
      cache: request.cache,
      // redirect mode request’s redirect mode.
      redirect: request.redirect,
      // integrity metadata request’s integrity metadata.
      integrity: request.integrity,
      // keepalive request’s keepalive.
      keepalive: request.keepalive,
      // reload-navigation flag request’s reload-navigation flag.
      reloadNavigation: request.reloadNavigation,
      // history-navigation flag request’s history-navigation flag.
      historyNavigation: request.historyNavigation,
      // URL list A clone of request’s URL list.
      urlList: [...request.urlList]
    })

    const initHasKey = Object.keys(init).length !== 0

    // 13. If init is not empty, then:
    if (initHasKey) {
      // 1. If request’s mode is "navigate", then set it to "same-origin".
      if (request.mode === 'navigate') {
        request.mode = 'same-origin'
      }

      // 2. Unset request’s reload-navigation flag.
      request.reloadNavigation = false

      // 3. Unset request’s history-navigation flag.
      request.historyNavigation = false

      // 4. Set request’s origin to "client".
      request.origin = 'client'

      // 5. Set request’s referrer to "client"
      request.referrer = 'client'

      // 6. Set request’s referrer policy to the empty string.
      request.referrerPolicy = ''

      // 7. Set request’s URL to request’s current URL.
      request.url = request.urlList[request.urlList.length - 1]

      // 8. Set request’s URL list to « request’s URL ».
      request.urlList = [request.url]
    }

    // 14. If init["referrer"] exists, then:
    if (init.referrer !== undefined) {
      // 1. Let referrer be init["referrer"].
      const referrer = init.referrer

      // 2. If referrer is the empty string, then set request’s referrer to "no-referrer".
      if (referrer === '') {
        request.referrer = 'no-referrer'
      } else {
        // 1. Let parsedReferrer be the result of parsing referrer with
        // baseURL.
        // 2. If parsedReferrer is failure, then throw a TypeError.
        let parsedReferrer
        try {
          parsedReferrer = new URL(referrer, baseUrl)
        } catch (err) {
          throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err })
        }

        // 3. If one of the following is true
        // - parsedReferrer’s scheme is "about" and path is the string "client"
        // - parsedReferrer’s origin is not same origin with origin
        // then set request’s referrer to "client".
        if (
          (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client') ||
          (origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl))
        ) {
          request.referrer = 'client'
        } else {
          // 4. Otherwise, set request’s referrer to parsedReferrer.
          request.referrer = parsedReferrer
        }
      }
    }

    // 15. If init["referrerPolicy"] exists, then set request’s referrer policy
    // to it.
    if (init.referrerPolicy !== undefined) {
      request.referrerPolicy = init.referrerPolicy
    }

    // 16. Let mode be init["mode"] if it exists, and fallbackMode otherwise.
    let mode
    if (init.mode !== undefined) {
      mode = init.mode
    } else {
      mode = fallbackMode
    }

    // 17. If mode is "navigate", then throw a TypeError.
    if (mode === 'navigate') {
      throw webidl.errors.exception({
        header: 'Request constructor',
        message: 'invalid request mode navigate.'
      })
    }

    // 18. If mode is non-null, set request’s mode to mode.
    if (mode != null) {
      request.mode = mode
    }

    // 19. If init["credentials"] exists, then set request’s credentials mode
    // to it.
    if (init.credentials !== undefined) {
      request.credentials = init.credentials
    }

    // 18. If init["cache"] exists, then set request’s cache mode to it.
    if (init.cache !== undefined) {
      request.cache = init.cache
    }

    // 21. If request’s cache mode is "only-if-cached" and request’s mode is
    // not "same-origin", then throw a TypeError.
    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {
      throw new TypeError(
        "'only-if-cached' can be set only with 'same-origin' mode"
      )
    }

    // 22. If init["redirect"] exists, then set request’s redirect mode to it.
    if (init.redirect !== undefined) {
      request.redirect = init.redirect
    }

    // 23. If init["integrity"] exists, then set request’s integrity metadata to it.
    if (init.integrity != null) {
      request.integrity = String(init.integrity)
    }

    // 24. If init["keepalive"] exists, then set request’s keepalive to it.
    if (init.keepalive !== undefined) {
      request.keepalive = Boolean(init.keepalive)
    }

    // 25. If init["method"] exists, then:
    if (init.method !== undefined) {
      // 1. Let method be init["method"].
      let method = init.method

      // 2. If method is not a method or method is a forbidden method, then
      // throw a TypeError.
      if (!isValidHTTPToken(method)) {
        throw new TypeError(`'${method}' is not a valid HTTP method.`)
      }

      if (forbiddenMethodsSet.has(method.toUpperCase())) {
        throw new TypeError(`'${method}' HTTP method is unsupported.`)
      }

      // 3. Normalize method.
      method = normalizeMethodRecord[method] ?? normalizeMethod(method)

      // 4. Set request’s method to method.
      request.method = method
    }

    // 26. If init["signal"] exists, then set signal to it.
    if (init.signal !== undefined) {
      signal = init.signal
    }

    // 27. Set this’s request to request.
    this[kState] = request

    // 28. Set this’s signal to a new AbortSignal object with this’s relevant
    // Realm.
    // TODO: could this be simplified with AbortSignal.any
    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)
    const ac = new AbortController()
    this[kSignal] = ac.signal
    this[kSignal][kRealm] = this[kRealm]

    // 29. If signal is not null, then make this’s signal follow signal.
    if (signal != null) {
      if (
        !signal ||
        typeof signal.aborted !== 'boolean' ||
        typeof signal.addEventListener !== 'function'
      ) {
        throw new TypeError(
          "Failed to construct 'Request': member signal is not of type AbortSignal."
        )
      }

      if (signal.aborted) {
        ac.abort(signal.reason)
      } else {
        // Keep a strong ref to ac while request object
        // is alive. This is needed to prevent AbortController
        // from being prematurely garbage collected.
        // See, https://github.com/nodejs/undici/issues/1926.
        this[kAbortController] = ac

        const acRef = new WeakRef(ac)
        const abort = function () {
          const ac = acRef.deref()
          if (ac !== undefined) {
            ac.abort(this.reason)
          }
        }

        // Third-party AbortControllers may not work with these.
        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.
        try {
          // If the max amount of listeners is equal to the default, increase it
          // This is only available in node >= v19.9.0
          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {
            setMaxListeners(100, signal)
          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {
            setMaxListeners(100, signal)
          }
        } catch {}

        util.addAbortListener(signal, abort)
        requestFinalizer.register(ac, { signal, abort })
      }
    }

    // 30. Set this’s headers to a new Headers object with this’s relevant
    // Realm, whose header list is request’s header list and guard is
    // "request".
    this[kHeaders] = new Headers(kConstruct)
    this[kHeaders][kHeadersList] = request.headersList
    this[kHeaders][kGuard] = 'request'
    this[kHeaders][kRealm] = this[kRealm]

    // 31. If this’s request’s mode is "no-cors", then:
    if (mode === 'no-cors') {
      // 1. If this’s request’s method is not a CORS-safelisted method,
      // then throw a TypeError.
      if (!corsSafeListedMethodsSet.has(request.method)) {
        throw new TypeError(
          `'${request.method} is unsupported in no-cors mode.`
        )
      }

      // 2. Set this’s headers’s guard to "request-no-cors".
      this[kHeaders][kGuard] = 'request-no-cors'
    }

    // 32. If init is not empty, then:
    if (initHasKey) {
      /** @type {HeadersList} */
      const headersList = this[kHeaders][kHeadersList]
      // 1. Let headers be a copy of this’s headers and its associated header
      // list.
      // 2. If init["headers"] exists, then set headers to init["headers"].
      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList)

      // 3. Empty this’s headers’s header list.
      headersList.clear()

      // 4. If headers is a Headers object, then for each header in its header
      // list, append header’s name/header’s value to this’s headers.
      if (headers instanceof HeadersList) {
        for (const [key, val] of headers) {
          headersList.append(key, val)
        }
        // Note: Copy the `set-cookie` meta-data.
        headersList.cookies = headers.cookies
      } else {
        // 5. Otherwise, fill this’s headers with headers.
        fillHeaders(this[kHeaders], headers)
      }
    }

    // 33. Let inputBody be input’s request’s body if input is a Request
    // object; otherwise null.
    const inputBody = input instanceof Request ? input[kState].body : null

    // 34. If either init["body"] exists and is non-null or inputBody is
    // non-null, and request’s method is `GET` or `HEAD`, then throw a
    // TypeError.
    if (
      (init.body != null || inputBody != null) &&
      (request.method === 'GET' || request.method === 'HEAD')
    ) {
      throw new TypeError('Request with GET/HEAD method cannot have body.')
    }

    // 35. Let initBody be null.
    let initBody = null

    // 36. If init["body"] exists and is non-null, then:
    if (init.body != null) {
      // 1. Let Content-Type be null.
      // 2. Set initBody and Content-Type to the result of extracting
      // init["body"], with keepalive set to request’s keepalive.
      const [extractedBody, contentType] = extractBody(
        init.body,
        request.keepalive
      )
      initBody = extractedBody

      // 3, If Content-Type is non-null and this’s headers’s header list does
      // not contain `Content-Type`, then append `Content-Type`/Content-Type to
      // this’s headers.
      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {
        this[kHeaders].append('content-type', contentType)
      }
    }

    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise
    // inputBody.
    const inputOrInitBody = initBody ?? inputBody

    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is
    // null, then:
    if (inputOrInitBody != null && inputOrInitBody.source == null) {
      // 1. If initBody is non-null and init["duplex"] does not exist,
      //    then throw a TypeError.
      if (initBody != null && init.duplex == null) {
        throw new TypeError('RequestInit: duplex option is required when sending a body.')
      }

      // 2. If this’s request’s mode is neither "same-origin" nor "cors",
      // then throw a TypeError.
      if (request.mode !== 'same-origin' && request.mode !== 'cors') {
        throw new TypeError(
          'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
        )
      }

      // 3. Set this’s request’s use-CORS-preflight flag.
      request.useCORSPreflightFlag = true
    }

    // 39. Let finalBody be inputOrInitBody.
    let finalBody = inputOrInitBody

    // 40. If initBody is null and inputBody is non-null, then:
    if (initBody == null && inputBody != null) {
      // 1. If input is unusable, then throw a TypeError.
      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
        throw new TypeError(
          'Cannot construct a Request with a Request object that has already been used.'
        )
      }

      // 2. Set finalBody to the result of creating a proxy for inputBody.
      if (!TransformStream) {
        TransformStream = (__nccwpck_require__(3774).TransformStream)
      }

      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy
      const identityTransform = new TransformStream()
      inputBody.stream.pipeThrough(identityTransform)
      finalBody = {
        source: inputBody.source,
        length: inputBody.length,
        stream: identityTransform.readable
      }
    }

    // 41. Set this’s request’s body to finalBody.
    this[kState].body = finalBody
  }

  // Returns request’s HTTP method, which is "GET" by default.
  get method () {
    webidl.brandCheck(this, Request)

    // The method getter steps are to return this’s request’s method.
    return this[kState].method
  }

  // Returns the URL of request as a string.
  get url () {
    webidl.brandCheck(this, Request)

    // The url getter steps are to return this’s request’s URL, serialized.
    return URLSerializer(this[kState].url)
  }

  // Returns a Headers object consisting of the headers associated with request.
  // Note that headers added in the network layer by the user agent will not
  // be accounted for in this object, e.g., the "Host" header.
  get headers () {
    webidl.brandCheck(this, Request)

    // The headers getter steps are to return this’s headers.
    return this[kHeaders]
  }

  // Returns the kind of resource requested by request, e.g., "document"
  // or "script".
  get destination () {
    webidl.brandCheck(this, Request)

    // The destination getter are to return this’s request’s destination.
    return this[kState].destination
  }

  // Returns the referrer of request. Its value can be a same-origin URL if
  // explicitly set in init, the empty string to indicate no referrer, and
  // "about:client" when defaulting to the global’s default. This is used
  // during fetching to determine the value of the `Referer` header of the
  // request being made.
  get referrer () {
    webidl.brandCheck(this, Request)

    // 1. If this’s request’s referrer is "no-referrer", then return the
    // empty string.
    if (this[kState].referrer === 'no-referrer') {
      return ''
    }

    // 2. If this’s request’s referrer is "client", then return
    // "about:client".
    if (this[kState].referrer === 'client') {
      return 'about:client'
    }

    // Return this’s request’s referrer, serialized.
    return this[kState].referrer.toString()
  }

  // Returns the referrer policy associated with request.
  // This is used during fetching to compute the value of the request’s
  // referrer.
  get referrerPolicy () {
    webidl.brandCheck(this, Request)

    // The referrerPolicy getter steps are to return this’s request’s referrer policy.
    return this[kState].referrerPolicy
  }

  // Returns the mode associated with request, which is a string indicating
  // whether the request will use CORS, or will be restricted to same-origin
  // URLs.
  get mode () {
    webidl.brandCheck(this, Request)

    // The mode getter steps are to return this’s request’s mode.
    return this[kState].mode
  }

  // Returns the credentials mode associated with request,
  // which is a string indicating whether credentials will be sent with the
  // request always, never, or only when sent to a same-origin URL.
  get credentials () {
    // The credentials getter steps are to return this’s request’s credentials mode.
    return this[kState].credentials
  }

  // Returns the cache mode associated with request,
  // which is a string indicating how the request will
  // interact with the browser’s cache when fetching.
  get cache () {
    webidl.brandCheck(this, Request)

    // The cache getter steps are to return this’s request’s cache mode.
    return this[kState].cache
  }

  // Returns the redirect mode associated with request,
  // which is a string indicating how redirects for the
  // request will be handled during fetching. A request
  // will follow redirects by default.
  get redirect () {
    webidl.brandCheck(this, Request)

    // The redirect getter steps are to return this’s request’s redirect mode.
    return this[kState].redirect
  }

  // Returns request’s subresource integrity metadata, which is a
  // cryptographic hash of the resource being fetched. Its value
  // consists of multiple hashes separated by whitespace. [SRI]
  get integrity () {
    webidl.brandCheck(this, Request)

    // The integrity getter steps are to return this’s request’s integrity
    // metadata.
    return this[kState].integrity
  }

  // Returns a boolean indicating whether or not request can outlive the
  // global in which it was created.
  get keepalive () {
    webidl.brandCheck(this, Request)

    // The keepalive getter steps are to return this’s request’s keepalive.
    return this[kState].keepalive
  }

  // Returns a boolean indicating whether or not request is for a reload
  // navigation.
  get isReloadNavigation () {
    webidl.brandCheck(this, Request)

    // The isReloadNavigation getter steps are to return true if this’s
    // request’s reload-navigation flag is set; otherwise false.
    return this[kState].reloadNavigation
  }

  // Returns a boolean indicating whether or not request is for a history
  // navigation (a.k.a. back-foward navigation).
  get isHistoryNavigation () {
    webidl.brandCheck(this, Request)

    // The isHistoryNavigation getter steps are to return true if this’s request’s
    // history-navigation flag is set; otherwise false.
    return this[kState].historyNavigation
  }

  // Returns the signal associated with request, which is an AbortSignal
  // object indicating whether or not request has been aborted, and its
  // abort event handler.
  get signal () {
    webidl.brandCheck(this, Request)

    // The signal getter steps are to return this’s signal.
    return this[kSignal]
  }

  get body () {
    webidl.brandCheck(this, Request)

    return this[kState].body ? this[kState].body.stream : null
  }

  get bodyUsed () {
    webidl.brandCheck(this, Request)

    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
  }

  get duplex () {
    webidl.brandCheck(this, Request)

    return 'half'
  }

  // Returns a clone of request.
  clone () {
    webidl.brandCheck(this, Request)

    // 1. If this is unusable, then throw a TypeError.
    if (this.bodyUsed || this.body?.locked) {
      throw new TypeError('unusable')
    }

    // 2. Let clonedRequest be the result of cloning this’s request.
    const clonedRequest = cloneRequest(this[kState])

    // 3. Let clonedRequestObject be the result of creating a Request object,
    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.
    const clonedRequestObject = new Request(kConstruct)
    clonedRequestObject[kState] = clonedRequest
    clonedRequestObject[kRealm] = this[kRealm]
    clonedRequestObject[kHeaders] = new Headers(kConstruct)
    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList
    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]
    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]

    // 4. Make clonedRequestObject’s signal follow this’s signal.
    const ac = new AbortController()
    if (this.signal.aborted) {
      ac.abort(this.signal.reason)
    } else {
      util.addAbortListener(
        this.signal,
        () => {
          ac.abort(this.signal.reason)
        }
      )
    }
    clonedRequestObject[kSignal] = ac.signal

    // 4. Return clonedRequestObject.
    return clonedRequestObject
  }
}

mixinBody(Request)

function makeRequest (init) {
  // https://fetch.spec.whatwg.org/#requests
  const request = {
    method: 'GET',
    localURLsOnly: false,
    unsafeRequest: false,
    body: null,
    client: null,
    reservedClient: null,
    replacesClientId: '',
    window: 'client',
    keepalive: false,
    serviceWorkers: 'all',
    initiator: '',
    destination: '',
    priority: null,
    origin: 'client',
    policyContainer: 'client',
    referrer: 'client',
    referrerPolicy: '',
    mode: 'no-cors',
    useCORSPreflightFlag: false,
    credentials: 'same-origin',
    useCredentials: false,
    cache: 'default',
    redirect: 'follow',
    integrity: '',
    cryptoGraphicsNonceMetadata: '',
    parserMetadata: '',
    reloadNavigation: false,
    historyNavigation: false,
    userActivation: false,
    taintedOrigin: false,
    redirectCount: 0,
    responseTainting: 'basic',
    preventNoCacheCacheControlHeaderModification: false,
    done: false,
    timingAllowFailed: false,
    ...init,
    headersList: init.headersList
      ? new HeadersList(init.headersList)
      : new HeadersList()
  }
  request.url = request.urlList[0]
  return request
}

// https://fetch.spec.whatwg.org/#concept-request-clone
function cloneRequest (request) {
  // To clone a request request, run these steps:

  // 1. Let newRequest be a copy of request, except for its body.
  const newRequest = makeRequest({ ...request, body: null })

  // 2. If request’s body is non-null, set newRequest’s body to the
  // result of cloning request’s body.
  if (request.body != null) {
    newRequest.body = cloneBody(request.body)
  }

  // 3. Return newRequest.
  return newRequest
}

Object.defineProperties(Request.prototype, {
  method: kEnumerableProperty,
  url: kEnumerableProperty,
  headers: kEnumerableProperty,
  redirect: kEnumerableProperty,
  clone: kEnumerableProperty,
  signal: kEnumerableProperty,
  duplex: kEnumerableProperty,
  destination: kEnumerableProperty,
  body: kEnumerableProperty,
  bodyUsed: kEnumerableProperty,
  isHistoryNavigation: kEnumerableProperty,
  isReloadNavigation: kEnumerableProperty,
  keepalive: kEnumerableProperty,
  integrity: kEnumerableProperty,
  cache: kEnumerableProperty,
  credentials: kEnumerableProperty,
  attribute: kEnumerableProperty,
  referrerPolicy: kEnumerableProperty,
  referrer: kEnumerableProperty,
  mode: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'Request',
    configurable: true
  }
})

webidl.converters.Request = webidl.interfaceConverter(
  Request
)

// https://fetch.spec.whatwg.org/#requestinfo
webidl.converters.RequestInfo = function (V) {
  if (typeof V === 'string') {
    return webidl.converters.USVString(V)
  }

  if (V instanceof Request) {
    return webidl.converters.Request(V)
  }

  return webidl.converters.USVString(V)
}

webidl.converters.AbortSignal = webidl.interfaceConverter(
  AbortSignal
)

// https://fetch.spec.whatwg.org/#requestinit
webidl.converters.RequestInit = webidl.dictionaryConverter([
  {
    key: 'method',
    converter: webidl.converters.ByteString
  },
  {
    key: 'headers',
    converter: webidl.converters.HeadersInit
  },
  {
    key: 'body',
    converter: webidl.nullableConverter(
      webidl.converters.BodyInit
    )
  },
  {
    key: 'referrer',
    converter: webidl.converters.USVString
  },
  {
    key: 'referrerPolicy',
    converter: webidl.converters.DOMString,
    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
    allowedValues: referrerPolicy
  },
  {
    key: 'mode',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#concept-request-mode
    allowedValues: requestMode
  },
  {
    key: 'credentials',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestcredentials
    allowedValues: requestCredentials
  },
  {
    key: 'cache',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestcache
    allowedValues: requestCache
  },
  {
    key: 'redirect',
    converter: webidl.converters.DOMString,
    // https://fetch.spec.whatwg.org/#requestredirect
    allowedValues: requestRedirect
  },
  {
    key: 'integrity',
    converter: webidl.converters.DOMString
  },
  {
    key: 'keepalive',
    converter: webidl.converters.boolean
  },
  {
    key: 'signal',
    converter: webidl.nullableConverter(
      (signal) => webidl.converters.AbortSignal(
        signal,
        { strict: false }
      )
    )
  },
  {
    key: 'window',
    converter: webidl.converters.any
  },
  {
    key: 'duplex',
    converter: webidl.converters.DOMString,
    allowedValues: requestDuplex
  }
])

module.exports = { Request, makeRequest }


/***/ }),

/***/ 5891:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Headers, HeadersList, fill } = __nccwpck_require__(6396)
const { extractBody, cloneBody, mixinBody } = __nccwpck_require__(6564)
const util = __nccwpck_require__(7001)
const { kEnumerableProperty } = util
const {
  isValidReasonPhrase,
  isCancelled,
  isAborted,
  isBlobLike,
  serializeJavascriptValueToJSONString,
  isErrorLike,
  isomorphicEncode
} = __nccwpck_require__(1096)
const {
  redirectStatusSet,
  nullBodyStatus,
  DOMException
} = __nccwpck_require__(7431)
const { kState, kHeaders, kGuard, kRealm } = __nccwpck_require__(3507)
const { webidl } = __nccwpck_require__(1677)
const { FormData } = __nccwpck_require__(6334)
const { getGlobalOrigin } = __nccwpck_require__(1339)
const { URLSerializer } = __nccwpck_require__(6615)
const { kHeadersList, kConstruct } = __nccwpck_require__(8136)
const assert = __nccwpck_require__(2613)
const { types } = __nccwpck_require__(9023)

const ReadableStream = globalThis.ReadableStream || (__nccwpck_require__(3774).ReadableStream)
const textEncoder = new TextEncoder('utf-8')

// https://fetch.spec.whatwg.org/#response-class
class Response {
  // Creates network error Response.
  static error () {
    // TODO
    const relevantRealm = { settingsObject: {} }

    // The static error() method steps are to return the result of creating a
    // Response object, given a new network error, "immutable", and this’s
    // relevant Realm.
    const responseObject = new Response()
    responseObject[kState] = makeNetworkError()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm
    return responseObject
  }

  // https://fetch.spec.whatwg.org/#dom-response-json
  static json (data, init = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.json' })

    if (init !== null) {
      init = webidl.converters.ResponseInit(init)
    }

    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.
    const bytes = textEncoder.encode(
      serializeJavascriptValueToJSONString(data)
    )

    // 2. Let body be the result of extracting bytes.
    const body = extractBody(bytes)

    // 3. Let responseObject be the result of creating a Response object, given a new response,
    //    "response", and this’s relevant Realm.
    const relevantRealm = { settingsObject: {} }
    const responseObject = new Response()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kGuard] = 'response'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 4. Perform initialize a response given responseObject, init, and (body, "application/json").
    initializeResponse(responseObject, init, { body: body[0], type: 'application/json' })

    // 5. Return responseObject.
    return responseObject
  }

  // Creates a redirect Response that redirects to url with status status.
  static redirect (url, status = 302) {
    const relevantRealm = { settingsObject: {} }

    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.redirect' })

    url = webidl.converters.USVString(url)
    status = webidl.converters['unsigned short'](status)

    // 1. Let parsedURL be the result of parsing url with current settings
    // object’s API base URL.
    // 2. If parsedURL is failure, then throw a TypeError.
    // TODO: base-URL?
    let parsedURL
    try {
      parsedURL = new URL(url, getGlobalOrigin())
    } catch (err) {
      throw Object.assign(new TypeError('Failed to parse URL from ' + url), {
        cause: err
      })
    }

    // 3. If status is not a redirect status, then throw a RangeError.
    if (!redirectStatusSet.has(status)) {
      throw new RangeError('Invalid status code ' + status)
    }

    // 4. Let responseObject be the result of creating a Response object,
    // given a new response, "immutable", and this’s relevant Realm.
    const responseObject = new Response()
    responseObject[kRealm] = relevantRealm
    responseObject[kHeaders][kGuard] = 'immutable'
    responseObject[kHeaders][kRealm] = relevantRealm

    // 5. Set responseObject’s response’s status to status.
    responseObject[kState].status = status

    // 6. Let value be parsedURL, serialized and isomorphic encoded.
    const value = isomorphicEncode(URLSerializer(parsedURL))

    // 7. Append `Location`/value to responseObject’s response’s header list.
    responseObject[kState].headersList.append('location', value)

    // 8. Return responseObject.
    return responseObject
  }

  // https://fetch.spec.whatwg.org/#dom-response
  constructor (body = null, init = {}) {
    if (body !== null) {
      body = webidl.converters.BodyInit(body)
    }

    init = webidl.converters.ResponseInit(init)

    // TODO
    this[kRealm] = { settingsObject: {} }

    // 1. Set this’s response to a new response.
    this[kState] = makeResponse({})

    // 2. Set this’s headers to a new Headers object with this’s relevant
    // Realm, whose header list is this’s response’s header list and guard
    // is "response".
    this[kHeaders] = new Headers(kConstruct)
    this[kHeaders][kGuard] = 'response'
    this[kHeaders][kHeadersList] = this[kState].headersList
    this[kHeaders][kRealm] = this[kRealm]

    // 3. Let bodyWithType be null.
    let bodyWithType = null

    // 4. If body is non-null, then set bodyWithType to the result of extracting body.
    if (body != null) {
      const [extractedBody, type] = extractBody(body)
      bodyWithType = { body: extractedBody, type }
    }

    // 5. Perform initialize a response given this, init, and bodyWithType.
    initializeResponse(this, init, bodyWithType)
  }

  // Returns response’s type, e.g., "cors".
  get type () {
    webidl.brandCheck(this, Response)

    // The type getter steps are to return this’s response’s type.
    return this[kState].type
  }

  // Returns response’s URL, if it has one; otherwise the empty string.
  get url () {
    webidl.brandCheck(this, Response)

    const urlList = this[kState].urlList

    // The url getter steps are to return the empty string if this’s
    // response’s URL is null; otherwise this’s response’s URL,
    // serialized with exclude fragment set to true.
    const url = urlList[urlList.length - 1] ?? null

    if (url === null) {
      return ''
    }

    return URLSerializer(url, true)
  }

  // Returns whether response was obtained through a redirect.
  get redirected () {
    webidl.brandCheck(this, Response)

    // The redirected getter steps are to return true if this’s response’s URL
    // list has more than one item; otherwise false.
    return this[kState].urlList.length > 1
  }

  // Returns response’s status.
  get status () {
    webidl.brandCheck(this, Response)

    // The status getter steps are to return this’s response’s status.
    return this[kState].status
  }

  // Returns whether response’s status is an ok status.
  get ok () {
    webidl.brandCheck(this, Response)

    // The ok getter steps are to return true if this’s response’s status is an
    // ok status; otherwise false.
    return this[kState].status >= 200 && this[kState].status <= 299
  }

  // Returns response’s status message.
  get statusText () {
    webidl.brandCheck(this, Response)

    // The statusText getter steps are to return this’s response’s status
    // message.
    return this[kState].statusText
  }

  // Returns response’s headers as Headers.
  get headers () {
    webidl.brandCheck(this, Response)

    // The headers getter steps are to return this’s headers.
    return this[kHeaders]
  }

  get body () {
    webidl.brandCheck(this, Response)

    return this[kState].body ? this[kState].body.stream : null
  }

  get bodyUsed () {
    webidl.brandCheck(this, Response)

    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)
  }

  // Returns a clone of response.
  clone () {
    webidl.brandCheck(this, Response)

    // 1. If this is unusable, then throw a TypeError.
    if (this.bodyUsed || (this.body && this.body.locked)) {
      throw webidl.errors.exception({
        header: 'Response.clone',
        message: 'Body has already been consumed.'
      })
    }

    // 2. Let clonedResponse be the result of cloning this’s response.
    const clonedResponse = cloneResponse(this[kState])

    // 3. Return the result of creating a Response object, given
    // clonedResponse, this’s headers’s guard, and this’s relevant Realm.
    const clonedResponseObject = new Response()
    clonedResponseObject[kState] = clonedResponse
    clonedResponseObject[kRealm] = this[kRealm]
    clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList
    clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard]
    clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm]

    return clonedResponseObject
  }
}

mixinBody(Response)

Object.defineProperties(Response.prototype, {
  type: kEnumerableProperty,
  url: kEnumerableProperty,
  status: kEnumerableProperty,
  ok: kEnumerableProperty,
  redirected: kEnumerableProperty,
  statusText: kEnumerableProperty,
  headers: kEnumerableProperty,
  clone: kEnumerableProperty,
  body: kEnumerableProperty,
  bodyUsed: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'Response',
    configurable: true
  }
})

Object.defineProperties(Response, {
  json: kEnumerableProperty,
  redirect: kEnumerableProperty,
  error: kEnumerableProperty
})

// https://fetch.spec.whatwg.org/#concept-response-clone
function cloneResponse (response) {
  // To clone a response response, run these steps:

  // 1. If response is a filtered response, then return a new identical
  // filtered response whose internal response is a clone of response’s
  // internal response.
  if (response.internalResponse) {
    return filterResponse(
      cloneResponse(response.internalResponse),
      response.type
    )
  }

  // 2. Let newResponse be a copy of response, except for its body.
  const newResponse = makeResponse({ ...response, body: null })

  // 3. If response’s body is non-null, then set newResponse’s body to the
  // result of cloning response’s body.
  if (response.body != null) {
    newResponse.body = cloneBody(response.body)
  }

  // 4. Return newResponse.
  return newResponse
}

function makeResponse (init) {
  return {
    aborted: false,
    rangeRequested: false,
    timingAllowPassed: false,
    requestIncludesCredentials: false,
    type: 'default',
    status: 200,
    timingInfo: null,
    cacheState: '',
    statusText: '',
    ...init,
    headersList: init.headersList
      ? new HeadersList(init.headersList)
      : new HeadersList(),
    urlList: init.urlList ? [...init.urlList] : []
  }
}

function makeNetworkError (reason) {
  const isError = isErrorLike(reason)
  return makeResponse({
    type: 'error',
    status: 0,
    error: isError
      ? reason
      : new Error(reason ? String(reason) : reason),
    aborted: reason && reason.name === 'AbortError'
  })
}

function makeFilteredResponse (response, state) {
  state = {
    internalResponse: response,
    ...state
  }

  return new Proxy(response, {
    get (target, p) {
      return p in state ? state[p] : target[p]
    },
    set (target, p, value) {
      assert(!(p in state))
      target[p] = value
      return true
    }
  })
}

// https://fetch.spec.whatwg.org/#concept-filtered-response
function filterResponse (response, type) {
  // Set response to the following filtered response with response as its
  // internal response, depending on request’s response tainting:
  if (type === 'basic') {
    // A basic filtered response is a filtered response whose type is "basic"
    // and header list excludes any headers in internal response’s header list
    // whose name is a forbidden response-header name.

    // Note: undici does not implement forbidden response-header names
    return makeFilteredResponse(response, {
      type: 'basic',
      headersList: response.headersList
    })
  } else if (type === 'cors') {
    // A CORS filtered response is a filtered response whose type is "cors"
    // and header list excludes any headers in internal response’s header
    // list whose name is not a CORS-safelisted response-header name, given
    // internal response’s CORS-exposed header-name list.

    // Note: undici does not implement CORS-safelisted response-header names
    return makeFilteredResponse(response, {
      type: 'cors',
      headersList: response.headersList
    })
  } else if (type === 'opaque') {
    // An opaque filtered response is a filtered response whose type is
    // "opaque", URL list is the empty list, status is 0, status message
    // is the empty byte sequence, header list is empty, and body is null.

    return makeFilteredResponse(response, {
      type: 'opaque',
      urlList: Object.freeze([]),
      status: 0,
      statusText: '',
      body: null
    })
  } else if (type === 'opaqueredirect') {
    // An opaque-redirect filtered response is a filtered response whose type
    // is "opaqueredirect", status is 0, status message is the empty byte
    // sequence, header list is empty, and body is null.

    return makeFilteredResponse(response, {
      type: 'opaqueredirect',
      status: 0,
      statusText: '',
      headersList: [],
      body: null
    })
  } else {
    assert(false)
  }
}

// https://fetch.spec.whatwg.org/#appropriate-network-error
function makeAppropriateNetworkError (fetchParams, err = null) {
  // 1. Assert: fetchParams is canceled.
  assert(isCancelled(fetchParams))

  // 2. Return an aborted network error if fetchParams is aborted;
  // otherwise return a network error.
  return isAborted(fetchParams)
    ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), { cause: err }))
    : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), { cause: err }))
}

// https://whatpr.org/fetch/1392.html#initialize-a-response
function initializeResponse (response, init, body) {
  // 1. If init["status"] is not in the range 200 to 599, inclusive, then
  //    throw a RangeError.
  if (init.status !== null && (init.status < 200 || init.status > 599)) {
    throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.')
  }

  // 2. If init["statusText"] does not match the reason-phrase token production,
  //    then throw a TypeError.
  if ('statusText' in init && init.statusText != null) {
    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:
    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )
    if (!isValidReasonPhrase(String(init.statusText))) {
      throw new TypeError('Invalid statusText')
    }
  }

  // 3. Set response’s response’s status to init["status"].
  if ('status' in init && init.status != null) {
    response[kState].status = init.status
  }

  // 4. Set response’s response’s status message to init["statusText"].
  if ('statusText' in init && init.statusText != null) {
    response[kState].statusText = init.statusText
  }

  // 5. If init["headers"] exists, then fill response’s headers with init["headers"].
  if ('headers' in init && init.headers != null) {
    fill(response[kHeaders], init.headers)
  }

  // 6. If body was given, then:
  if (body) {
    // 1. If response's status is a null body status, then throw a TypeError.
    if (nullBodyStatus.includes(response.status)) {
      throw webidl.errors.exception({
        header: 'Response constructor',
        message: 'Invalid response status code ' + response.status
      })
    }

    // 2. Set response's body to body's body.
    response[kState].body = body.body

    // 3. If body's type is non-null and response's header list does not contain
    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.
    if (body.type != null && !response[kState].headersList.contains('Content-Type')) {
      response[kState].headersList.append('content-type', body.type)
    }
  }
}

webidl.converters.ReadableStream = webidl.interfaceConverter(
  ReadableStream
)

webidl.converters.FormData = webidl.interfaceConverter(
  FormData
)

webidl.converters.URLSearchParams = webidl.interfaceConverter(
  URLSearchParams
)

// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit
webidl.converters.XMLHttpRequestBodyInit = function (V) {
  if (typeof V === 'string') {
    return webidl.converters.USVString(V)
  }

  if (isBlobLike(V)) {
    return webidl.converters.Blob(V, { strict: false })
  }

  if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
    return webidl.converters.BufferSource(V)
  }

  if (util.isFormDataLike(V)) {
    return webidl.converters.FormData(V, { strict: false })
  }

  if (V instanceof URLSearchParams) {
    return webidl.converters.URLSearchParams(V)
  }

  return webidl.converters.DOMString(V)
}

// https://fetch.spec.whatwg.org/#bodyinit
webidl.converters.BodyInit = function (V) {
  if (V instanceof ReadableStream) {
    return webidl.converters.ReadableStream(V)
  }

  // Note: the spec doesn't include async iterables,
  // this is an undici extension.
  if (V?.[Symbol.asyncIterator]) {
    return V
  }

  return webidl.converters.XMLHttpRequestBodyInit(V)
}

webidl.converters.ResponseInit = webidl.dictionaryConverter([
  {
    key: 'status',
    converter: webidl.converters['unsigned short'],
    defaultValue: 200
  },
  {
    key: 'statusText',
    converter: webidl.converters.ByteString,
    defaultValue: ''
  },
  {
    key: 'headers',
    converter: webidl.converters.HeadersInit
  }
])

module.exports = {
  makeNetworkError,
  makeResponse,
  makeAppropriateNetworkError,
  filterResponse,
  Response,
  cloneResponse
}


/***/ }),

/***/ 3507:
/***/ ((module) => {

"use strict";


module.exports = {
  kUrl: Symbol('url'),
  kHeaders: Symbol('headers'),
  kSignal: Symbol('signal'),
  kState: Symbol('state'),
  kGuard: Symbol('guard'),
  kRealm: Symbol('realm')
}


/***/ }),

/***/ 1096:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = __nccwpck_require__(7431)
const { getGlobalOrigin } = __nccwpck_require__(1339)
const { performance } = __nccwpck_require__(2987)
const { isBlobLike, toUSVString, ReadableStreamFrom } = __nccwpck_require__(7001)
const assert = __nccwpck_require__(2613)
const { isUint8Array } = __nccwpck_require__(8253)

let supportedHashes = []

// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable
/** @type {import('crypto')|undefined} */
let crypto

try {
  crypto = __nccwpck_require__(6982)
  const possibleRelevantHashes = ['sha256', 'sha384', 'sha512']
  supportedHashes = crypto.getHashes().filter((hash) => possibleRelevantHashes.includes(hash))
/* c8 ignore next 3 */
} catch {
}

function responseURL (response) {
  // https://fetch.spec.whatwg.org/#responses
  // A response has an associated URL. It is a pointer to the last URL
  // in response’s URL list and null if response’s URL list is empty.
  const urlList = response.urlList
  const length = urlList.length
  return length === 0 ? null : urlList[length - 1].toString()
}

// https://fetch.spec.whatwg.org/#concept-response-location-url
function responseLocationURL (response, requestFragment) {
  // 1. If response’s status is not a redirect status, then return null.
  if (!redirectStatusSet.has(response.status)) {
    return null
  }

  // 2. Let location be the result of extracting header list values given
  // `Location` and response’s header list.
  let location = response.headersList.get('location')

  // 3. If location is a header value, then set location to the result of
  //    parsing location with response’s URL.
  if (location !== null && isValidHeaderValue(location)) {
    location = new URL(location, responseURL(response))
  }

  // 4. If location is a URL whose fragment is null, then set location’s
  // fragment to requestFragment.
  if (location && !location.hash) {
    location.hash = requestFragment
  }

  // 5. Return location.
  return location
}

/** @returns {URL} */
function requestCurrentURL (request) {
  return request.urlList[request.urlList.length - 1]
}

function requestBadPort (request) {
  // 1. Let url be request’s current URL.
  const url = requestCurrentURL(request)

  // 2. If url’s scheme is an HTTP(S) scheme and url’s port is a bad port,
  // then return blocked.
  if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
    return 'blocked'
  }

  // 3. Return allowed.
  return 'allowed'
}

function isErrorLike (object) {
  return object instanceof Error || (
    object?.constructor?.name === 'Error' ||
    object?.constructor?.name === 'DOMException'
  )
}

// Check whether |statusText| is a ByteString and
// matches the Reason-Phrase token production.
// RFC 2616: https://tools.ietf.org/html/rfc2616
// RFC 7230: https://tools.ietf.org/html/rfc7230
// "reason-phrase = *( HTAB / SP / VCHAR / obs-text )"
// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116
function isValidReasonPhrase (statusText) {
  for (let i = 0; i < statusText.length; ++i) {
    const c = statusText.charCodeAt(i)
    if (
      !(
        (
          c === 0x09 || // HTAB
          (c >= 0x20 && c <= 0x7e) || // SP / VCHAR
          (c >= 0x80 && c <= 0xff)
        ) // obs-text
      )
    ) {
      return false
    }
  }
  return true
}

/**
 * @see https://tools.ietf.org/html/rfc7230#section-3.2.6
 * @param {number} c
 */
function isTokenCharCode (c) {
  switch (c) {
    case 0x22:
    case 0x28:
    case 0x29:
    case 0x2c:
    case 0x2f:
    case 0x3a:
    case 0x3b:
    case 0x3c:
    case 0x3d:
    case 0x3e:
    case 0x3f:
    case 0x40:
    case 0x5b:
    case 0x5c:
    case 0x5d:
    case 0x7b:
    case 0x7d:
      // DQUOTE and "(),/:;<=>?@[\]{}"
      return false
    default:
      // VCHAR %x21-7E
      return c >= 0x21 && c <= 0x7e
  }
}

/**
 * @param {string} characters
 */
function isValidHTTPToken (characters) {
  if (characters.length === 0) {
    return false
  }
  for (let i = 0; i < characters.length; ++i) {
    if (!isTokenCharCode(characters.charCodeAt(i))) {
      return false
    }
  }
  return true
}

/**
 * @see https://fetch.spec.whatwg.org/#header-name
 * @param {string} potentialValue
 */
function isValidHeaderName (potentialValue) {
  return isValidHTTPToken(potentialValue)
}

/**
 * @see https://fetch.spec.whatwg.org/#header-value
 * @param {string} potentialValue
 */
function isValidHeaderValue (potentialValue) {
  // - Has no leading or trailing HTTP tab or space bytes.
  // - Contains no 0x00 (NUL) or HTTP newline bytes.
  if (
    potentialValue.startsWith('\t') ||
    potentialValue.startsWith(' ') ||
    potentialValue.endsWith('\t') ||
    potentialValue.endsWith(' ')
  ) {
    return false
  }

  if (
    potentialValue.includes('\0') ||
    potentialValue.includes('\r') ||
    potentialValue.includes('\n')
  ) {
    return false
  }

  return true
}

// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect
function setRequestReferrerPolicyOnRedirect (request, actualResponse) {
  //  Given a request request and a response actualResponse, this algorithm
  //  updates request’s referrer policy according to the Referrer-Policy
  //  header (if any) in actualResponse.

  // 1. Let policy be the result of executing § 8.1 Parse a referrer policy
  // from a Referrer-Policy header on actualResponse.

  // 8.1 Parse a referrer policy from a Referrer-Policy header
  // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response’s header list.
  const { headersList } = actualResponse
  // 2. Let policy be the empty string.
  // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.
  // 4. Return policy.
  const policyHeader = (headersList.get('referrer-policy') ?? '').split(',')

  // Note: As the referrer-policy can contain multiple policies
  // separated by comma, we need to loop through all of them
  // and pick the first valid one.
  // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy
  let policy = ''
  if (policyHeader.length > 0) {
    // The right-most policy takes precedence.
    // The left-most policy is the fallback.
    for (let i = policyHeader.length; i !== 0; i--) {
      const token = policyHeader[i - 1].trim()
      if (referrerPolicyTokens.has(token)) {
        policy = token
        break
      }
    }
  }

  // 2. If policy is not the empty string, then set request’s referrer policy to policy.
  if (policy !== '') {
    request.referrerPolicy = policy
  }
}

// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check
function crossOriginResourcePolicyCheck () {
  // TODO
  return 'allowed'
}

// https://fetch.spec.whatwg.org/#concept-cors-check
function corsCheck () {
  // TODO
  return 'success'
}

// https://fetch.spec.whatwg.org/#concept-tao-check
function TAOCheck () {
  // TODO
  return 'success'
}

function appendFetchMetadata (httpRequest) {
  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header
  //  TODO

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header

  //  1. Assert: r’s url is a potentially trustworthy URL.
  //  TODO

  //  2. Let header be a Structured Header whose value is a token.
  let header = null

  //  3. Set header’s value to r’s mode.
  header = httpRequest.mode

  //  4. Set a structured field value `Sec-Fetch-Mode`/header in r’s header list.
  httpRequest.headersList.set('sec-fetch-mode', header)

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header
  //  TODO

  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header
  //  TODO
}

// https://fetch.spec.whatwg.org/#append-a-request-origin-header
function appendRequestOriginHeader (request) {
  // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.
  let serializedOrigin = request.origin

  // 2. If request’s response tainting is "cors" or request’s mode is "websocket", then append (`Origin`, serializedOrigin) to request’s header list.
  if (request.responseTainting === 'cors' || request.mode === 'websocket') {
    if (serializedOrigin) {
      request.headersList.append('origin', serializedOrigin)
    }

  // 3. Otherwise, if request’s method is neither `GET` nor `HEAD`, then:
  } else if (request.method !== 'GET' && request.method !== 'HEAD') {
    // 1. Switch on request’s referrer policy:
    switch (request.referrerPolicy) {
      case 'no-referrer':
        // Set serializedOrigin to `null`.
        serializedOrigin = null
        break
      case 'no-referrer-when-downgrade':
      case 'strict-origin':
      case 'strict-origin-when-cross-origin':
        // If request’s origin is a tuple origin, its scheme is "https", and request’s current URL’s scheme is not "https", then set serializedOrigin to `null`.
        if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
          serializedOrigin = null
        }
        break
      case 'same-origin':
        // If request’s origin is not same origin with request’s current URL’s origin, then set serializedOrigin to `null`.
        if (!sameOrigin(request, requestCurrentURL(request))) {
          serializedOrigin = null
        }
        break
      default:
        // Do nothing.
    }

    if (serializedOrigin) {
      // 2. Append (`Origin`, serializedOrigin) to request’s header list.
      request.headersList.append('origin', serializedOrigin)
    }
  }
}

function coarsenedSharedCurrentTime (crossOriginIsolatedCapability) {
  // TODO
  return performance.now()
}

// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info
function createOpaqueTimingInfo (timingInfo) {
  return {
    startTime: timingInfo.startTime ?? 0,
    redirectStartTime: 0,
    redirectEndTime: 0,
    postRedirectStartTime: timingInfo.startTime ?? 0,
    finalServiceWorkerStartTime: 0,
    finalNetworkResponseStartTime: 0,
    finalNetworkRequestStartTime: 0,
    endTime: 0,
    encodedBodySize: 0,
    decodedBodySize: 0,
    finalConnectionTimingInfo: null
  }
}

// https://html.spec.whatwg.org/multipage/origin.html#policy-container
function makePolicyContainer () {
  // Note: the fetch spec doesn't make use of embedder policy or CSP list
  return {
    referrerPolicy: 'strict-origin-when-cross-origin'
  }
}

// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container
function clonePolicyContainer (policyContainer) {
  return {
    referrerPolicy: policyContainer.referrerPolicy
  }
}

// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer
function determineRequestsReferrer (request) {
  // 1. Let policy be request's referrer policy.
  const policy = request.referrerPolicy

  // Note: policy cannot (shouldn't) be null or an empty string.
  assert(policy)

  // 2. Let environment be request’s client.

  let referrerSource = null

  // 3. Switch on request’s referrer:
  if (request.referrer === 'client') {
    // Note: node isn't a browser and doesn't implement document/iframes,
    // so we bypass this step and replace it with our own.

    const globalOrigin = getGlobalOrigin()

    if (!globalOrigin || globalOrigin.origin === 'null') {
      return 'no-referrer'
    }

    // note: we need to clone it as it's mutated
    referrerSource = new URL(globalOrigin)
  } else if (request.referrer instanceof URL) {
    // Let referrerSource be request’s referrer.
    referrerSource = request.referrer
  }

  // 4. Let request’s referrerURL be the result of stripping referrerSource for
  //    use as a referrer.
  let referrerURL = stripURLForReferrer(referrerSource)

  // 5. Let referrerOrigin be the result of stripping referrerSource for use as
  //    a referrer, with the origin-only flag set to true.
  const referrerOrigin = stripURLForReferrer(referrerSource, true)

  // 6. If the result of serializing referrerURL is a string whose length is
  //    greater than 4096, set referrerURL to referrerOrigin.
  if (referrerURL.toString().length > 4096) {
    referrerURL = referrerOrigin
  }

  const areSameOrigin = sameOrigin(request, referrerURL)
  const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) &&
    !isURLPotentiallyTrustworthy(request.url)

  // 8. Execute the switch statements corresponding to the value of policy:
  switch (policy) {
    case 'origin': return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true)
    case 'unsafe-url': return referrerURL
    case 'same-origin':
      return areSameOrigin ? referrerOrigin : 'no-referrer'
    case 'origin-when-cross-origin':
      return areSameOrigin ? referrerURL : referrerOrigin
    case 'strict-origin-when-cross-origin': {
      const currentURL = requestCurrentURL(request)

      // 1. If the origin of referrerURL and the origin of request’s current
      //    URL are the same, then return referrerURL.
      if (sameOrigin(referrerURL, currentURL)) {
        return referrerURL
      }

      // 2. If referrerURL is a potentially trustworthy URL and request’s
      //    current URL is not a potentially trustworthy URL, then return no
      //    referrer.
      if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
        return 'no-referrer'
      }

      // 3. Return referrerOrigin.
      return referrerOrigin
    }
    case 'strict-origin': // eslint-disable-line
      /**
         * 1. If referrerURL is a potentially trustworthy URL and
         * request’s current URL is not a potentially trustworthy URL,
         * then return no referrer.
         * 2. Return referrerOrigin
        */
    case 'no-referrer-when-downgrade': // eslint-disable-line
      /**
       * 1. If referrerURL is a potentially trustworthy URL and
       * request’s current URL is not a potentially trustworthy URL,
       * then return no referrer.
       * 2. Return referrerOrigin
      */

    default: // eslint-disable-line
      return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin
  }
}

/**
 * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
 * @param {URL} url
 * @param {boolean|undefined} originOnly
 */
function stripURLForReferrer (url, originOnly) {
  // 1. Assert: url is a URL.
  assert(url instanceof URL)

  // 2. If url’s scheme is a local scheme, then return no referrer.
  if (url.protocol === 'file:' || url.protocol === 'about:' || url.protocol === 'blank:') {
    return 'no-referrer'
  }

  // 3. Set url’s username to the empty string.
  url.username = ''

  // 4. Set url’s password to the empty string.
  url.password = ''

  // 5. Set url’s fragment to null.
  url.hash = ''

  // 6. If the origin-only flag is true, then:
  if (originOnly) {
    // 1. Set url’s path to « the empty string ».
    url.pathname = ''

    // 2. Set url’s query to null.
    url.search = ''
  }

  // 7. Return url.
  return url
}

function isURLPotentiallyTrustworthy (url) {
  if (!(url instanceof URL)) {
    return false
  }

  // If child of about, return true
  if (url.href === 'about:blank' || url.href === 'about:srcdoc') {
    return true
  }

  // If scheme is data, return true
  if (url.protocol === 'data:') return true

  // If file, return true
  if (url.protocol === 'file:') return true

  return isOriginPotentiallyTrustworthy(url.origin)

  function isOriginPotentiallyTrustworthy (origin) {
    // If origin is explicitly null, return false
    if (origin == null || origin === 'null') return false

    const originAsURL = new URL(origin)

    // If secure, return true
    if (originAsURL.protocol === 'https:' || originAsURL.protocol === 'wss:') {
      return true
    }

    // If localhost or variants, return true
    if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) ||
     (originAsURL.hostname === 'localhost' || originAsURL.hostname.includes('localhost.')) ||
     (originAsURL.hostname.endsWith('.localhost'))) {
      return true
    }

    // If any other, return false
    return false
  }
}

/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
 * @param {Uint8Array} bytes
 * @param {string} metadataList
 */
function bytesMatch (bytes, metadataList) {
  // If node is not built with OpenSSL support, we cannot check
  // a request's integrity, so allow it by default (the spec will
  // allow requests if an invalid hash is given, as precedence).
  /* istanbul ignore if: only if node is built with --without-ssl */
  if (crypto === undefined) {
    return true
  }

  // 1. Let parsedMetadata be the result of parsing metadataList.
  const parsedMetadata = parseMetadata(metadataList)

  // 2. If parsedMetadata is no metadata, return true.
  if (parsedMetadata === 'no metadata') {
    return true
  }

  // 3. If response is not eligible for integrity validation, return false.
  // TODO

  // 4. If parsedMetadata is the empty set, return true.
  if (parsedMetadata.length === 0) {
    return true
  }

  // 5. Let metadata be the result of getting the strongest
  //    metadata from parsedMetadata.
  const strongest = getStrongestMetadata(parsedMetadata)
  const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest)

  // 6. For each item in metadata:
  for (const item of metadata) {
    // 1. Let algorithm be the alg component of item.
    const algorithm = item.algo

    // 2. Let expectedValue be the val component of item.
    const expectedValue = item.hash

    // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e
    // "be liberal with padding". This is annoying, and it's not even in the spec.

    // 3. Let actualValue be the result of applying algorithm to bytes.
    let actualValue = crypto.createHash(algorithm).update(bytes).digest('base64')

    if (actualValue[actualValue.length - 1] === '=') {
      if (actualValue[actualValue.length - 2] === '=') {
        actualValue = actualValue.slice(0, -2)
      } else {
        actualValue = actualValue.slice(0, -1)
      }
    }

    // 4. If actualValue is a case-sensitive match for expectedValue,
    //    return true.
    if (compareBase64Mixed(actualValue, expectedValue)) {
      return true
    }
  }

  // 7. Return false.
  return false
}

// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options
// https://www.w3.org/TR/CSP2/#source-list-syntax
// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1
const parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i

/**
 * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
 * @param {string} metadata
 */
function parseMetadata (metadata) {
  // 1. Let result be the empty set.
  /** @type {{ algo: string, hash: string }[]} */
  const result = []

  // 2. Let empty be equal to true.
  let empty = true

  // 3. For each token returned by splitting metadata on spaces:
  for (const token of metadata.split(' ')) {
    // 1. Set empty to false.
    empty = false

    // 2. Parse token as a hash-with-options.
    const parsedToken = parseHashWithOptions.exec(token)

    // 3. If token does not parse, continue to the next token.
    if (
      parsedToken === null ||
      parsedToken.groups === undefined ||
      parsedToken.groups.algo === undefined
    ) {
      // Note: Chromium blocks the request at this point, but Firefox
      // gives a warning that an invalid integrity was given. The
      // correct behavior is to ignore these, and subsequently not
      // check the integrity of the resource.
      continue
    }

    // 4. Let algorithm be the hash-algo component of token.
    const algorithm = parsedToken.groups.algo.toLowerCase()

    // 5. If algorithm is a hash function recognized by the user
    //    agent, add the parsed token to result.
    if (supportedHashes.includes(algorithm)) {
      result.push(parsedToken.groups)
    }
  }

  // 4. Return no metadata if empty is true, otherwise return result.
  if (empty === true) {
    return 'no metadata'
  }

  return result
}

/**
 * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
 */
function getStrongestMetadata (metadataList) {
  // Let algorithm be the algo component of the first item in metadataList.
  // Can be sha256
  let algorithm = metadataList[0].algo
  // If the algorithm is sha512, then it is the strongest
  // and we can return immediately
  if (algorithm[3] === '5') {
    return algorithm
  }

  for (let i = 1; i < metadataList.length; ++i) {
    const metadata = metadataList[i]
    // If the algorithm is sha512, then it is the strongest
    // and we can break the loop immediately
    if (metadata.algo[3] === '5') {
      algorithm = 'sha512'
      break
    // If the algorithm is sha384, then a potential sha256 or sha384 is ignored
    } else if (algorithm[3] === '3') {
      continue
    // algorithm is sha256, check if algorithm is sha384 and if so, set it as
    // the strongest
    } else if (metadata.algo[3] === '3') {
      algorithm = 'sha384'
    }
  }
  return algorithm
}

function filterMetadataListByAlgorithm (metadataList, algorithm) {
  if (metadataList.length === 1) {
    return metadataList
  }

  let pos = 0
  for (let i = 0; i < metadataList.length; ++i) {
    if (metadataList[i].algo === algorithm) {
      metadataList[pos++] = metadataList[i]
    }
  }

  metadataList.length = pos

  return metadataList
}

/**
 * Compares two base64 strings, allowing for base64url
 * in the second string.
 *
* @param {string} actualValue always base64
 * @param {string} expectedValue base64 or base64url
 * @returns {boolean}
 */
function compareBase64Mixed (actualValue, expectedValue) {
  if (actualValue.length !== expectedValue.length) {
    return false
  }
  for (let i = 0; i < actualValue.length; ++i) {
    if (actualValue[i] !== expectedValue[i]) {
      if (
        (actualValue[i] === '+' && expectedValue[i] === '-') ||
        (actualValue[i] === '/' && expectedValue[i] === '_')
      ) {
        continue
      }
      return false
    }
  }

  return true
}

// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request
function tryUpgradeRequestToAPotentiallyTrustworthyURL (request) {
  // TODO
}

/**
 * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
 * @param {URL} A
 * @param {URL} B
 */
function sameOrigin (A, B) {
  // 1. If A and B are the same opaque origin, then return true.
  if (A.origin === B.origin && A.origin === 'null') {
    return true
  }

  // 2. If A and B are both tuple origins and their schemes,
  //    hosts, and port are identical, then return true.
  if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
    return true
  }

  // 3. Return false.
  return false
}

function createDeferredPromise () {
  let res
  let rej
  const promise = new Promise((resolve, reject) => {
    res = resolve
    rej = reject
  })

  return { promise, resolve: res, reject: rej }
}

function isAborted (fetchParams) {
  return fetchParams.controller.state === 'aborted'
}

function isCancelled (fetchParams) {
  return fetchParams.controller.state === 'aborted' ||
    fetchParams.controller.state === 'terminated'
}

const normalizeMethodRecord = {
  delete: 'DELETE',
  DELETE: 'DELETE',
  get: 'GET',
  GET: 'GET',
  head: 'HEAD',
  HEAD: 'HEAD',
  options: 'OPTIONS',
  OPTIONS: 'OPTIONS',
  post: 'POST',
  POST: 'POST',
  put: 'PUT',
  PUT: 'PUT'
}

// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.
Object.setPrototypeOf(normalizeMethodRecord, null)

/**
 * @see https://fetch.spec.whatwg.org/#concept-method-normalize
 * @param {string} method
 */
function normalizeMethod (method) {
  return normalizeMethodRecord[method.toLowerCase()] ?? method
}

// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string
function serializeJavascriptValueToJSONString (value) {
  // 1. Let result be ? Call(%JSON.stringify%, undefined, « value »).
  const result = JSON.stringify(value)

  // 2. If result is undefined, then throw a TypeError.
  if (result === undefined) {
    throw new TypeError('Value is not JSON serializable')
  }

  // 3. Assert: result is a string.
  assert(typeof result === 'string')

  // 4. Return result.
  return result
}

// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object
const esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))

/**
 * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
 * @param {() => unknown[]} iterator
 * @param {string} name name of the instance
 * @param {'key'|'value'|'key+value'} kind
 */
function makeIterator (iterator, name, kind) {
  const object = {
    index: 0,
    kind,
    target: iterator
  }

  const i = {
    next () {
      // 1. Let interface be the interface for which the iterator prototype object exists.

      // 2. Let thisValue be the this value.

      // 3. Let object be ? ToObject(thisValue).

      // 4. If object is a platform object, then perform a security
      //    check, passing:

      // 5. If object is not a default iterator object for interface,
      //    then throw a TypeError.
      if (Object.getPrototypeOf(this) !== i) {
        throw new TypeError(
          `'next' called on an object that does not implement interface ${name} Iterator.`
        )
      }

      // 6. Let index be object’s index.
      // 7. Let kind be object’s kind.
      // 8. Let values be object’s target's value pairs to iterate over.
      const { index, kind, target } = object
      const values = target()

      // 9. Let len be the length of values.
      const len = values.length

      // 10. If index is greater than or equal to len, then return
      //     CreateIterResultObject(undefined, true).
      if (index >= len) {
        return { value: undefined, done: true }
      }

      // 11. Let pair be the entry in values at index index.
      const pair = values[index]

      // 12. Set object’s index to index + 1.
      object.index = index + 1

      // 13. Return the iterator result for pair and kind.
      return iteratorResult(pair, kind)
    },
    // The class string of an iterator prototype object for a given interface is the
    // result of concatenating the identifier of the interface and the string " Iterator".
    [Symbol.toStringTag]: `${name} Iterator`
  }

  // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.
  Object.setPrototypeOf(i, esIteratorPrototype)
  // esIteratorPrototype needs to be the prototype of i
  // which is the prototype of an empty object. Yes, it's confusing.
  return Object.setPrototypeOf({}, i)
}

// https://webidl.spec.whatwg.org/#iterator-result
function iteratorResult (pair, kind) {
  let result

  // 1. Let result be a value determined by the value of kind:
  switch (kind) {
    case 'key': {
      // 1. Let idlKey be pair’s key.
      // 2. Let key be the result of converting idlKey to an
      //    ECMAScript value.
      // 3. result is key.
      result = pair[0]
      break
    }
    case 'value': {
      // 1. Let idlValue be pair’s value.
      // 2. Let value be the result of converting idlValue to
      //    an ECMAScript value.
      // 3. result is value.
      result = pair[1]
      break
    }
    case 'key+value': {
      // 1. Let idlKey be pair’s key.
      // 2. Let idlValue be pair’s value.
      // 3. Let key be the result of converting idlKey to an
      //    ECMAScript value.
      // 4. Let value be the result of converting idlValue to
      //    an ECMAScript value.
      // 5. Let array be ! ArrayCreate(2).
      // 6. Call ! CreateDataProperty(array, "0", key).
      // 7. Call ! CreateDataProperty(array, "1", value).
      // 8. result is array.
      result = pair
      break
    }
  }

  // 2. Return CreateIterResultObject(result, false).
  return { value: result, done: false }
}

/**
 * @see https://fetch.spec.whatwg.org/#body-fully-read
 */
async function fullyReadBody (body, processBody, processBodyError) {
  // 1. If taskDestination is null, then set taskDestination to
  //    the result of starting a new parallel queue.

  // 2. Let successSteps given a byte sequence bytes be to queue a
  //    fetch task to run processBody given bytes, with taskDestination.
  const successSteps = processBody

  // 3. Let errorSteps be to queue a fetch task to run processBodyError,
  //    with taskDestination.
  const errorSteps = processBodyError

  // 4. Let reader be the result of getting a reader for body’s stream.
  //    If that threw an exception, then run errorSteps with that
  //    exception and return.
  let reader

  try {
    reader = body.stream.getReader()
  } catch (e) {
    errorSteps(e)
    return
  }

  // 5. Read all bytes from reader, given successSteps and errorSteps.
  try {
    const result = await readAllBytes(reader)
    successSteps(result)
  } catch (e) {
    errorSteps(e)
  }
}

/** @type {ReadableStream} */
let ReadableStream = globalThis.ReadableStream

function isReadableStreamLike (stream) {
  if (!ReadableStream) {
    ReadableStream = (__nccwpck_require__(3774).ReadableStream)
  }

  return stream instanceof ReadableStream || (
    stream[Symbol.toStringTag] === 'ReadableStream' &&
    typeof stream.tee === 'function'
  )
}

const MAXIMUM_ARGUMENT_LENGTH = 65535

/**
 * @see https://infra.spec.whatwg.org/#isomorphic-decode
 * @param {number[]|Uint8Array} input
 */
function isomorphicDecode (input) {
  // 1. To isomorphic decode a byte sequence input, return a string whose code point
  //    length is equal to input’s length and whose code points have the same values
  //    as the values of input’s bytes, in the same order.

  if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
    return String.fromCharCode(...input)
  }

  return input.reduce((previous, current) => previous + String.fromCharCode(current), '')
}

/**
 * @param {ReadableStreamController<Uint8Array>} controller
 */
function readableStreamClose (controller) {
  try {
    controller.close()
  } catch (err) {
    // TODO: add comment explaining why this error occurs.
    if (!err.message.includes('Controller is already closed')) {
      throw err
    }
  }
}

/**
 * @see https://infra.spec.whatwg.org/#isomorphic-encode
 * @param {string} input
 */
function isomorphicEncode (input) {
  // 1. Assert: input contains no code points greater than U+00FF.
  for (let i = 0; i < input.length; i++) {
    assert(input.charCodeAt(i) <= 0xFF)
  }

  // 2. Return a byte sequence whose length is equal to input’s code
  //    point length and whose bytes have the same values as the
  //    values of input’s code points, in the same order
  return input
}

/**
 * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
 * @see https://streams.spec.whatwg.org/#read-loop
 * @param {ReadableStreamDefaultReader} reader
 */
async function readAllBytes (reader) {
  const bytes = []
  let byteLength = 0

  while (true) {
    const { done, value: chunk } = await reader.read()

    if (done) {
      // 1. Call successSteps with bytes.
      return Buffer.concat(bytes, byteLength)
    }

    // 1. If chunk is not a Uint8Array object, call failureSteps
    //    with a TypeError and abort these steps.
    if (!isUint8Array(chunk)) {
      throw new TypeError('Received non-Uint8Array chunk')
    }

    // 2. Append the bytes represented by chunk to bytes.
    bytes.push(chunk)
    byteLength += chunk.length

    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.
  }
}

/**
 * @see https://fetch.spec.whatwg.org/#is-local
 * @param {URL} url
 */
function urlIsLocal (url) {
  assert('protocol' in url) // ensure it's a url object

  const protocol = url.protocol

  return protocol === 'about:' || protocol === 'blob:' || protocol === 'data:'
}

/**
 * @param {string|URL} url
 */
function urlHasHttpsScheme (url) {
  if (typeof url === 'string') {
    return url.startsWith('https:')
  }

  return url.protocol === 'https:'
}

/**
 * @see https://fetch.spec.whatwg.org/#http-scheme
 * @param {URL} url
 */
function urlIsHttpHttpsScheme (url) {
  assert('protocol' in url) // ensure it's a url object

  const protocol = url.protocol

  return protocol === 'http:' || protocol === 'https:'
}

/**
 * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
 */
const hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key))

module.exports = {
  isAborted,
  isCancelled,
  createDeferredPromise,
  ReadableStreamFrom,
  toUSVString,
  tryUpgradeRequestToAPotentiallyTrustworthyURL,
  coarsenedSharedCurrentTime,
  determineRequestsReferrer,
  makePolicyContainer,
  clonePolicyContainer,
  appendFetchMetadata,
  appendRequestOriginHeader,
  TAOCheck,
  corsCheck,
  crossOriginResourcePolicyCheck,
  createOpaqueTimingInfo,
  setRequestReferrerPolicyOnRedirect,
  isValidHTTPToken,
  requestBadPort,
  requestCurrentURL,
  responseURL,
  responseLocationURL,
  isBlobLike,
  isURLPotentiallyTrustworthy,
  isValidReasonPhrase,
  sameOrigin,
  normalizeMethod,
  serializeJavascriptValueToJSONString,
  makeIterator,
  isValidHeaderName,
  isValidHeaderValue,
  hasOwn,
  isErrorLike,
  fullyReadBody,
  bytesMatch,
  isReadableStreamLike,
  readableStreamClose,
  isomorphicEncode,
  isomorphicDecode,
  urlIsLocal,
  urlHasHttpsScheme,
  urlIsHttpHttpsScheme,
  readAllBytes,
  normalizeMethodRecord,
  parseMetadata
}


/***/ }),

/***/ 1677:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { types } = __nccwpck_require__(9023)
const { hasOwn, toUSVString } = __nccwpck_require__(1096)

/** @type {import('../../types/webidl').Webidl} */
const webidl = {}
webidl.converters = {}
webidl.util = {}
webidl.errors = {}

webidl.errors.exception = function (message) {
  return new TypeError(`${message.header}: ${message.message}`)
}

webidl.errors.conversionFailed = function (context) {
  const plural = context.types.length === 1 ? '' : ' one of'
  const message =
    `${context.argument} could not be converted to` +
    `${plural}: ${context.types.join(', ')}.`

  return webidl.errors.exception({
    header: context.prefix,
    message
  })
}

webidl.errors.invalidArgument = function (context) {
  return webidl.errors.exception({
    header: context.prefix,
    message: `"${context.value}" is an invalid ${context.type}.`
  })
}

// https://webidl.spec.whatwg.org/#implements
webidl.brandCheck = function (V, I, opts = undefined) {
  if (opts?.strict !== false && !(V instanceof I)) {
    throw new TypeError('Illegal invocation')
  } else {
    return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag]
  }
}

webidl.argumentLengthCheck = function ({ length }, min, ctx) {
  if (length < min) {
    throw webidl.errors.exception({
      message: `${min} argument${min !== 1 ? 's' : ''} required, ` +
               `but${length ? ' only' : ''} ${length} found.`,
      ...ctx
    })
  }
}

webidl.illegalConstructor = function () {
  throw webidl.errors.exception({
    header: 'TypeError',
    message: 'Illegal constructor'
  })
}

// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values
webidl.util.Type = function (V) {
  switch (typeof V) {
    case 'undefined': return 'Undefined'
    case 'boolean': return 'Boolean'
    case 'string': return 'String'
    case 'symbol': return 'Symbol'
    case 'number': return 'Number'
    case 'bigint': return 'BigInt'
    case 'function':
    case 'object': {
      if (V === null) {
        return 'Null'
      }

      return 'Object'
    }
  }
}

// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint
webidl.util.ConvertToInt = function (V, bitLength, signedness, opts = {}) {
  let upperBound
  let lowerBound

  // 1. If bitLength is 64, then:
  if (bitLength === 64) {
    // 1. Let upperBound be 2^53 − 1.
    upperBound = Math.pow(2, 53) - 1

    // 2. If signedness is "unsigned", then let lowerBound be 0.
    if (signedness === 'unsigned') {
      lowerBound = 0
    } else {
      // 3. Otherwise let lowerBound be −2^53 + 1.
      lowerBound = Math.pow(-2, 53) + 1
    }
  } else if (signedness === 'unsigned') {
    // 2. Otherwise, if signedness is "unsigned", then:

    // 1. Let lowerBound be 0.
    lowerBound = 0

    // 2. Let upperBound be 2^bitLength − 1.
    upperBound = Math.pow(2, bitLength) - 1
  } else {
    // 3. Otherwise:

    // 1. Let lowerBound be -2^bitLength − 1.
    lowerBound = Math.pow(-2, bitLength) - 1

    // 2. Let upperBound be 2^bitLength − 1 − 1.
    upperBound = Math.pow(2, bitLength - 1) - 1
  }

  // 4. Let x be ? ToNumber(V).
  let x = Number(V)

  // 5. If x is −0, then set x to +0.
  if (x === 0) {
    x = 0
  }

  // 6. If the conversion is to an IDL type associated
  //    with the [EnforceRange] extended attribute, then:
  if (opts.enforceRange === true) {
    // 1. If x is NaN, +∞, or −∞, then throw a TypeError.
    if (
      Number.isNaN(x) ||
      x === Number.POSITIVE_INFINITY ||
      x === Number.NEGATIVE_INFINITY
    ) {
      throw webidl.errors.exception({
        header: 'Integer conversion',
        message: `Could not convert ${V} to an integer.`
      })
    }

    // 2. Set x to IntegerPart(x).
    x = webidl.util.IntegerPart(x)

    // 3. If x < lowerBound or x > upperBound, then
    //    throw a TypeError.
    if (x < lowerBound || x > upperBound) {
      throw webidl.errors.exception({
        header: 'Integer conversion',
        message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
      })
    }

    // 4. Return x.
    return x
  }

  // 7. If x is not NaN and the conversion is to an IDL
  //    type associated with the [Clamp] extended
  //    attribute, then:
  if (!Number.isNaN(x) && opts.clamp === true) {
    // 1. Set x to min(max(x, lowerBound), upperBound).
    x = Math.min(Math.max(x, lowerBound), upperBound)

    // 2. Round x to the nearest integer, choosing the
    //    even integer if it lies halfway between two,
    //    and choosing +0 rather than −0.
    if (Math.floor(x) % 2 === 0) {
      x = Math.floor(x)
    } else {
      x = Math.ceil(x)
    }

    // 3. Return x.
    return x
  }

  // 8. If x is NaN, +0, +∞, or −∞, then return +0.
  if (
    Number.isNaN(x) ||
    (x === 0 && Object.is(0, x)) ||
    x === Number.POSITIVE_INFINITY ||
    x === Number.NEGATIVE_INFINITY
  ) {
    return 0
  }

  // 9. Set x to IntegerPart(x).
  x = webidl.util.IntegerPart(x)

  // 10. Set x to x modulo 2^bitLength.
  x = x % Math.pow(2, bitLength)

  // 11. If signedness is "signed" and x ≥ 2^bitLength − 1,
  //    then return x − 2^bitLength.
  if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {
    return x - Math.pow(2, bitLength)
  }

  // 12. Otherwise, return x.
  return x
}

// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart
webidl.util.IntegerPart = function (n) {
  // 1. Let r be floor(abs(n)).
  const r = Math.floor(Math.abs(n))

  // 2. If n < 0, then return -1 × r.
  if (n < 0) {
    return -1 * r
  }

  // 3. Otherwise, return r.
  return r
}

// https://webidl.spec.whatwg.org/#es-sequence
webidl.sequenceConverter = function (converter) {
  return (V) => {
    // 1. If Type(V) is not Object, throw a TypeError.
    if (webidl.util.Type(V) !== 'Object') {
      throw webidl.errors.exception({
        header: 'Sequence',
        message: `Value of type ${webidl.util.Type(V)} is not an Object.`
      })
    }

    // 2. Let method be ? GetMethod(V, @@iterator).
    /** @type {Generator} */
    const method = V?.[Symbol.iterator]?.()
    const seq = []

    // 3. If method is undefined, throw a TypeError.
    if (
      method === undefined ||
      typeof method.next !== 'function'
    ) {
      throw webidl.errors.exception({
        header: 'Sequence',
        message: 'Object is not an iterator.'
      })
    }

    // https://webidl.spec.whatwg.org/#create-sequence-from-iterable
    while (true) {
      const { done, value } = method.next()

      if (done) {
        break
      }

      seq.push(converter(value))
    }

    return seq
  }
}

// https://webidl.spec.whatwg.org/#es-to-record
webidl.recordConverter = function (keyConverter, valueConverter) {
  return (O) => {
    // 1. If Type(O) is not Object, throw a TypeError.
    if (webidl.util.Type(O) !== 'Object') {
      throw webidl.errors.exception({
        header: 'Record',
        message: `Value of type ${webidl.util.Type(O)} is not an Object.`
      })
    }

    // 2. Let result be a new empty instance of record<K, V>.
    const result = {}

    if (!types.isProxy(O)) {
      // Object.keys only returns enumerable properties
      const keys = Object.keys(O)

      for (const key of keys) {
        // 1. Let typedKey be key converted to an IDL value of type K.
        const typedKey = keyConverter(key)

        // 2. Let value be ? Get(O, key).
        // 3. Let typedValue be value converted to an IDL value of type V.
        const typedValue = valueConverter(O[key])

        // 4. Set result[typedKey] to typedValue.
        result[typedKey] = typedValue
      }

      // 5. Return result.
      return result
    }

    // 3. Let keys be ? O.[[OwnPropertyKeys]]().
    const keys = Reflect.ownKeys(O)

    // 4. For each key of keys.
    for (const key of keys) {
      // 1. Let desc be ? O.[[GetOwnProperty]](key).
      const desc = Reflect.getOwnPropertyDescriptor(O, key)

      // 2. If desc is not undefined and desc.[[Enumerable]] is true:
      if (desc?.enumerable) {
        // 1. Let typedKey be key converted to an IDL value of type K.
        const typedKey = keyConverter(key)

        // 2. Let value be ? Get(O, key).
        // 3. Let typedValue be value converted to an IDL value of type V.
        const typedValue = valueConverter(O[key])

        // 4. Set result[typedKey] to typedValue.
        result[typedKey] = typedValue
      }
    }

    // 5. Return result.
    return result
  }
}

webidl.interfaceConverter = function (i) {
  return (V, opts = {}) => {
    if (opts.strict !== false && !(V instanceof i)) {
      throw webidl.errors.exception({
        header: i.name,
        message: `Expected ${V} to be an instance of ${i.name}.`
      })
    }

    return V
  }
}

webidl.dictionaryConverter = function (converters) {
  return (dictionary) => {
    const type = webidl.util.Type(dictionary)
    const dict = {}

    if (type === 'Null' || type === 'Undefined') {
      return dict
    } else if (type !== 'Object') {
      throw webidl.errors.exception({
        header: 'Dictionary',
        message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
      })
    }

    for (const options of converters) {
      const { key, defaultValue, required, converter } = options

      if (required === true) {
        if (!hasOwn(dictionary, key)) {
          throw webidl.errors.exception({
            header: 'Dictionary',
            message: `Missing required key "${key}".`
          })
        }
      }

      let value = dictionary[key]
      const hasDefault = hasOwn(options, 'defaultValue')

      // Only use defaultValue if value is undefined and
      // a defaultValue options was provided.
      if (hasDefault && value !== null) {
        value = value ?? defaultValue
      }

      // A key can be optional and have no default value.
      // When this happens, do not perform a conversion,
      // and do not assign the key a value.
      if (required || hasDefault || value !== undefined) {
        value = converter(value)

        if (
          options.allowedValues &&
          !options.allowedValues.includes(value)
        ) {
          throw webidl.errors.exception({
            header: 'Dictionary',
            message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(', ')}.`
          })
        }

        dict[key] = value
      }
    }

    return dict
  }
}

webidl.nullableConverter = function (converter) {
  return (V) => {
    if (V === null) {
      return V
    }

    return converter(V)
  }
}

// https://webidl.spec.whatwg.org/#es-DOMString
webidl.converters.DOMString = function (V, opts = {}) {
  // 1. If V is null and the conversion is to an IDL type
  //    associated with the [LegacyNullToEmptyString]
  //    extended attribute, then return the DOMString value
  //    that represents the empty string.
  if (V === null && opts.legacyNullToEmptyString) {
    return ''
  }

  // 2. Let x be ? ToString(V).
  if (typeof V === 'symbol') {
    throw new TypeError('Could not convert argument of type symbol to string.')
  }

  // 3. Return the IDL DOMString value that represents the
  //    same sequence of code units as the one the
  //    ECMAScript String value x represents.
  return String(V)
}

// https://webidl.spec.whatwg.org/#es-ByteString
webidl.converters.ByteString = function (V) {
  // 1. Let x be ? ToString(V).
  // Note: DOMString converter perform ? ToString(V)
  const x = webidl.converters.DOMString(V)

  // 2. If the value of any element of x is greater than
  //    255, then throw a TypeError.
  for (let index = 0; index < x.length; index++) {
    if (x.charCodeAt(index) > 255) {
      throw new TypeError(
        'Cannot convert argument to a ByteString because the character at ' +
        `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`
      )
    }
  }

  // 3. Return an IDL ByteString value whose length is the
  //    length of x, and where the value of each element is
  //    the value of the corresponding element of x.
  return x
}

// https://webidl.spec.whatwg.org/#es-USVString
webidl.converters.USVString = toUSVString

// https://webidl.spec.whatwg.org/#es-boolean
webidl.converters.boolean = function (V) {
  // 1. Let x be the result of computing ToBoolean(V).
  const x = Boolean(V)

  // 2. Return the IDL boolean value that is the one that represents
  //    the same truth value as the ECMAScript Boolean value x.
  return x
}

// https://webidl.spec.whatwg.org/#es-any
webidl.converters.any = function (V) {
  return V
}

// https://webidl.spec.whatwg.org/#es-long-long
webidl.converters['long long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 64, "signed").
  const x = webidl.util.ConvertToInt(V, 64, 'signed')

  // 2. Return the IDL long long value that represents
  //    the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-long-long
webidl.converters['unsigned long long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 64, "unsigned").
  const x = webidl.util.ConvertToInt(V, 64, 'unsigned')

  // 2. Return the IDL unsigned long long value that
  //    represents the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-long
webidl.converters['unsigned long'] = function (V) {
  // 1. Let x be ? ConvertToInt(V, 32, "unsigned").
  const x = webidl.util.ConvertToInt(V, 32, 'unsigned')

  // 2. Return the IDL unsigned long value that
  //    represents the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#es-unsigned-short
webidl.converters['unsigned short'] = function (V, opts) {
  // 1. Let x be ? ConvertToInt(V, 16, "unsigned").
  const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts)

  // 2. Return the IDL unsigned short value that represents
  //    the same numeric value as x.
  return x
}

// https://webidl.spec.whatwg.org/#idl-ArrayBuffer
webidl.converters.ArrayBuffer = function (V, opts = {}) {
  // 1. If Type(V) is not Object, or V does not have an
  //    [[ArrayBufferData]] internal slot, then throw a
  //    TypeError.
  // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances
  // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances
  if (
    webidl.util.Type(V) !== 'Object' ||
    !types.isAnyArrayBuffer(V)
  ) {
    throw webidl.errors.conversionFailed({
      prefix: `${V}`,
      argument: `${V}`,
      types: ['ArrayBuffer']
    })
  }

  // 2. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V) is true, then throw a
  //    TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V) is true, then throw a
  //    TypeError.
  // Note: resizable ArrayBuffers are currently a proposal.

  // 4. Return the IDL ArrayBuffer value that is a
  //    reference to the same object as V.
  return V
}

webidl.converters.TypedArray = function (V, T, opts = {}) {
  // 1. Let T be the IDL type V is being converted to.

  // 2. If Type(V) is not Object, or V does not have a
  //    [[TypedArrayName]] internal slot with a value
  //    equal to T’s name, then throw a TypeError.
  if (
    webidl.util.Type(V) !== 'Object' ||
    !types.isTypedArray(V) ||
    V.constructor.name !== T.name
  ) {
    throw webidl.errors.conversionFailed({
      prefix: `${T.name}`,
      argument: `${V}`,
      types: [T.name]
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 4. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  // Note: resizable array buffers are currently a proposal

  // 5. Return the IDL value of type T that is a reference
  //    to the same object as V.
  return V
}

webidl.converters.DataView = function (V, opts = {}) {
  // 1. If Type(V) is not Object, or V does not have a
  //    [[DataView]] internal slot, then throw a TypeError.
  if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {
    throw webidl.errors.exception({
      header: 'DataView',
      message: 'Object is not a DataView.'
    })
  }

  // 2. If the conversion is not to an IDL type associated
  //    with the [AllowShared] extended attribute, and
  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,
  //    then throw a TypeError.
  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
    throw webidl.errors.exception({
      header: 'ArrayBuffer',
      message: 'SharedArrayBuffer is not allowed.'
    })
  }

  // 3. If the conversion is not to an IDL type associated
  //    with the [AllowResizable] extended attribute, and
  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is
  //    true, then throw a TypeError.
  // Note: resizable ArrayBuffers are currently a proposal

  // 4. Return the IDL DataView value that is a reference
  //    to the same object as V.
  return V
}

// https://webidl.spec.whatwg.org/#BufferSource
webidl.converters.BufferSource = function (V, opts = {}) {
  if (types.isAnyArrayBuffer(V)) {
    return webidl.converters.ArrayBuffer(V, opts)
  }

  if (types.isTypedArray(V)) {
    return webidl.converters.TypedArray(V, V.constructor)
  }

  if (types.isDataView(V)) {
    return webidl.converters.DataView(V, opts)
  }

  throw new TypeError(`Could not convert ${V} to a BufferSource.`)
}

webidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(
  webidl.converters.ByteString
)

webidl.converters['sequence<sequence<ByteString>>'] = webidl.sequenceConverter(
  webidl.converters['sequence<ByteString>']
)

webidl.converters['record<ByteString, ByteString>'] = webidl.recordConverter(
  webidl.converters.ByteString,
  webidl.converters.ByteString
)

module.exports = {
  webidl
}


/***/ }),

/***/ 8100:
/***/ ((module) => {

"use strict";


/**
 * @see https://encoding.spec.whatwg.org/#concept-encoding-get
 * @param {string|undefined} label
 */
function getEncoding (label) {
  if (!label) {
    return 'failure'
  }

  // 1. Remove any leading and trailing ASCII whitespace from label.
  // 2. If label is an ASCII case-insensitive match for any of the
  //    labels listed in the table below, then return the
  //    corresponding encoding; otherwise return failure.
  switch (label.trim().toLowerCase()) {
    case 'unicode-1-1-utf-8':
    case 'unicode11utf8':
    case 'unicode20utf8':
    case 'utf-8':
    case 'utf8':
    case 'x-unicode20utf8':
      return 'UTF-8'
    case '866':
    case 'cp866':
    case 'csibm866':
    case 'ibm866':
      return 'IBM866'
    case 'csisolatin2':
    case 'iso-8859-2':
    case 'iso-ir-101':
    case 'iso8859-2':
    case 'iso88592':
    case 'iso_8859-2':
    case 'iso_8859-2:1987':
    case 'l2':
    case 'latin2':
      return 'ISO-8859-2'
    case 'csisolatin3':
    case 'iso-8859-3':
    case 'iso-ir-109':
    case 'iso8859-3':
    case 'iso88593':
    case 'iso_8859-3':
    case 'iso_8859-3:1988':
    case 'l3':
    case 'latin3':
      return 'ISO-8859-3'
    case 'csisolatin4':
    case 'iso-8859-4':
    case 'iso-ir-110':
    case 'iso8859-4':
    case 'iso88594':
    case 'iso_8859-4':
    case 'iso_8859-4:1988':
    case 'l4':
    case 'latin4':
      return 'ISO-8859-4'
    case 'csisolatincyrillic':
    case 'cyrillic':
    case 'iso-8859-5':
    case 'iso-ir-144':
    case 'iso8859-5':
    case 'iso88595':
    case 'iso_8859-5':
    case 'iso_8859-5:1988':
      return 'ISO-8859-5'
    case 'arabic':
    case 'asmo-708':
    case 'csiso88596e':
    case 'csiso88596i':
    case 'csisolatinarabic':
    case 'ecma-114':
    case 'iso-8859-6':
    case 'iso-8859-6-e':
    case 'iso-8859-6-i':
    case 'iso-ir-127':
    case 'iso8859-6':
    case 'iso88596':
    case 'iso_8859-6':
    case 'iso_8859-6:1987':
      return 'ISO-8859-6'
    case 'csisolatingreek':
    case 'ecma-118':
    case 'elot_928':
    case 'greek':
    case 'greek8':
    case 'iso-8859-7':
    case 'iso-ir-126':
    case 'iso8859-7':
    case 'iso88597':
    case 'iso_8859-7':
    case 'iso_8859-7:1987':
    case 'sun_eu_greek':
      return 'ISO-8859-7'
    case 'csiso88598e':
    case 'csisolatinhebrew':
    case 'hebrew':
    case 'iso-8859-8':
    case 'iso-8859-8-e':
    case 'iso-ir-138':
    case 'iso8859-8':
    case 'iso88598':
    case 'iso_8859-8':
    case 'iso_8859-8:1988':
    case 'visual':
      return 'ISO-8859-8'
    case 'csiso88598i':
    case 'iso-8859-8-i':
    case 'logical':
      return 'ISO-8859-8-I'
    case 'csisolatin6':
    case 'iso-8859-10':
    case 'iso-ir-157':
    case 'iso8859-10':
    case 'iso885910':
    case 'l6':
    case 'latin6':
      return 'ISO-8859-10'
    case 'iso-8859-13':
    case 'iso8859-13':
    case 'iso885913':
      return 'ISO-8859-13'
    case 'iso-8859-14':
    case 'iso8859-14':
    case 'iso885914':
      return 'ISO-8859-14'
    case 'csisolatin9':
    case 'iso-8859-15':
    case 'iso8859-15':
    case 'iso885915':
    case 'iso_8859-15':
    case 'l9':
      return 'ISO-8859-15'
    case 'iso-8859-16':
      return 'ISO-8859-16'
    case 'cskoi8r':
    case 'koi':
    case 'koi8':
    case 'koi8-r':
    case 'koi8_r':
      return 'KOI8-R'
    case 'koi8-ru':
    case 'koi8-u':
      return 'KOI8-U'
    case 'csmacintosh':
    case 'mac':
    case 'macintosh':
    case 'x-mac-roman':
      return 'macintosh'
    case 'iso-8859-11':
    case 'iso8859-11':
    case 'iso885911':
    case 'tis-620':
    case 'windows-874':
      return 'windows-874'
    case 'cp1250':
    case 'windows-1250':
    case 'x-cp1250':
      return 'windows-1250'
    case 'cp1251':
    case 'windows-1251':
    case 'x-cp1251':
      return 'windows-1251'
    case 'ansi_x3.4-1968':
    case 'ascii':
    case 'cp1252':
    case 'cp819':
    case 'csisolatin1':
    case 'ibm819':
    case 'iso-8859-1':
    case 'iso-ir-100':
    case 'iso8859-1':
    case 'iso88591':
    case 'iso_8859-1':
    case 'iso_8859-1:1987':
    case 'l1':
    case 'latin1':
    case 'us-ascii':
    case 'windows-1252':
    case 'x-cp1252':
      return 'windows-1252'
    case 'cp1253':
    case 'windows-1253':
    case 'x-cp1253':
      return 'windows-1253'
    case 'cp1254':
    case 'csisolatin5':
    case 'iso-8859-9':
    case 'iso-ir-148':
    case 'iso8859-9':
    case 'iso88599':
    case 'iso_8859-9':
    case 'iso_8859-9:1989':
    case 'l5':
    case 'latin5':
    case 'windows-1254':
    case 'x-cp1254':
      return 'windows-1254'
    case 'cp1255':
    case 'windows-1255':
    case 'x-cp1255':
      return 'windows-1255'
    case 'cp1256':
    case 'windows-1256':
    case 'x-cp1256':
      return 'windows-1256'
    case 'cp1257':
    case 'windows-1257':
    case 'x-cp1257':
      return 'windows-1257'
    case 'cp1258':
    case 'windows-1258':
    case 'x-cp1258':
      return 'windows-1258'
    case 'x-mac-cyrillic':
    case 'x-mac-ukrainian':
      return 'x-mac-cyrillic'
    case 'chinese':
    case 'csgb2312':
    case 'csiso58gb231280':
    case 'gb2312':
    case 'gb_2312':
    case 'gb_2312-80':
    case 'gbk':
    case 'iso-ir-58':
    case 'x-gbk':
      return 'GBK'
    case 'gb18030':
      return 'gb18030'
    case 'big5':
    case 'big5-hkscs':
    case 'cn-big5':
    case 'csbig5':
    case 'x-x-big5':
      return 'Big5'
    case 'cseucpkdfmtjapanese':
    case 'euc-jp':
    case 'x-euc-jp':
      return 'EUC-JP'
    case 'csiso2022jp':
    case 'iso-2022-jp':
      return 'ISO-2022-JP'
    case 'csshiftjis':
    case 'ms932':
    case 'ms_kanji':
    case 'shift-jis':
    case 'shift_jis':
    case 'sjis':
    case 'windows-31j':
    case 'x-sjis':
      return 'Shift_JIS'
    case 'cseuckr':
    case 'csksc56011987':
    case 'euc-kr':
    case 'iso-ir-149':
    case 'korean':
    case 'ks_c_5601-1987':
    case 'ks_c_5601-1989':
    case 'ksc5601':
    case 'ksc_5601':
    case 'windows-949':
      return 'EUC-KR'
    case 'csiso2022kr':
    case 'hz-gb-2312':
    case 'iso-2022-cn':
    case 'iso-2022-cn-ext':
    case 'iso-2022-kr':
    case 'replacement':
      return 'replacement'
    case 'unicodefffe':
    case 'utf-16be':
      return 'UTF-16BE'
    case 'csunicode':
    case 'iso-10646-ucs-2':
    case 'ucs-2':
    case 'unicode':
    case 'unicodefeff':
    case 'utf-16':
    case 'utf-16le':
      return 'UTF-16LE'
    case 'x-user-defined':
      return 'x-user-defined'
    default: return 'failure'
  }
}

module.exports = {
  getEncoding
}


/***/ }),

/***/ 6859:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  staticPropertyDescriptors,
  readOperation,
  fireAProgressEvent
} = __nccwpck_require__(3042)
const {
  kState,
  kError,
  kResult,
  kEvents,
  kAborted
} = __nccwpck_require__(2601)
const { webidl } = __nccwpck_require__(1677)
const { kEnumerableProperty } = __nccwpck_require__(7001)

class FileReader extends EventTarget {
  constructor () {
    super()

    this[kState] = 'empty'
    this[kResult] = null
    this[kError] = null
    this[kEvents] = {
      loadend: null,
      error: null,
      abort: null,
      load: null,
      progress: null,
      loadstart: null
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
   * @param {import('buffer').Blob} blob
   */
  readAsArrayBuffer (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsArrayBuffer' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsArrayBuffer(blob) method, when invoked,
    // must initiate a read operation for blob with ArrayBuffer.
    readOperation(this, blob, 'ArrayBuffer')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#readAsBinaryString
   * @param {import('buffer').Blob} blob
   */
  readAsBinaryString (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsBinaryString' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsBinaryString(blob) method, when invoked,
    // must initiate a read operation for blob with BinaryString.
    readOperation(this, blob, 'BinaryString')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#readAsDataText
   * @param {import('buffer').Blob} blob
   * @param {string?} encoding
   */
  readAsText (blob, encoding = undefined) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsText' })

    blob = webidl.converters.Blob(blob, { strict: false })

    if (encoding !== undefined) {
      encoding = webidl.converters.DOMString(encoding)
    }

    // The readAsText(blob, encoding) method, when invoked,
    // must initiate a read operation for blob with Text and encoding.
    readOperation(this, blob, 'Text', encoding)
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
   * @param {import('buffer').Blob} blob
   */
  readAsDataURL (blob) {
    webidl.brandCheck(this, FileReader)

    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsDataURL' })

    blob = webidl.converters.Blob(blob, { strict: false })

    // The readAsDataURL(blob) method, when invoked, must
    // initiate a read operation for blob with DataURL.
    readOperation(this, blob, 'DataURL')
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dfn-abort
   */
  abort () {
    // 1. If this's state is "empty" or if this's state is
    //    "done" set this's result to null and terminate
    //    this algorithm.
    if (this[kState] === 'empty' || this[kState] === 'done') {
      this[kResult] = null
      return
    }

    // 2. If this's state is "loading" set this's state to
    //    "done" and set this's result to null.
    if (this[kState] === 'loading') {
      this[kState] = 'done'
      this[kResult] = null
    }

    // 3. If there are any tasks from this on the file reading
    //    task source in an affiliated task queue, then remove
    //    those tasks from that task queue.
    this[kAborted] = true

    // 4. Terminate the algorithm for the read method being processed.
    // TODO

    // 5. Fire a progress event called abort at this.
    fireAProgressEvent('abort', this)

    // 6. If this's state is not "loading", fire a progress
    //    event called loadend at this.
    if (this[kState] !== 'loading') {
      fireAProgressEvent('loadend', this)
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
   */
  get readyState () {
    webidl.brandCheck(this, FileReader)

    switch (this[kState]) {
      case 'empty': return this.EMPTY
      case 'loading': return this.LOADING
      case 'done': return this.DONE
    }
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-result
   */
  get result () {
    webidl.brandCheck(this, FileReader)

    // The result attribute’s getter, when invoked, must return
    // this's result.
    return this[kResult]
  }

  /**
   * @see https://w3c.github.io/FileAPI/#dom-filereader-error
   */
  get error () {
    webidl.brandCheck(this, FileReader)

    // The error attribute’s getter, when invoked, must return
    // this's error.
    return this[kError]
  }

  get onloadend () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].loadend
  }

  set onloadend (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].loadend) {
      this.removeEventListener('loadend', this[kEvents].loadend)
    }

    if (typeof fn === 'function') {
      this[kEvents].loadend = fn
      this.addEventListener('loadend', fn)
    } else {
      this[kEvents].loadend = null
    }
  }

  get onerror () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].error
  }

  set onerror (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].error) {
      this.removeEventListener('error', this[kEvents].error)
    }

    if (typeof fn === 'function') {
      this[kEvents].error = fn
      this.addEventListener('error', fn)
    } else {
      this[kEvents].error = null
    }
  }

  get onloadstart () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].loadstart
  }

  set onloadstart (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].loadstart) {
      this.removeEventListener('loadstart', this[kEvents].loadstart)
    }

    if (typeof fn === 'function') {
      this[kEvents].loadstart = fn
      this.addEventListener('loadstart', fn)
    } else {
      this[kEvents].loadstart = null
    }
  }

  get onprogress () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].progress
  }

  set onprogress (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].progress) {
      this.removeEventListener('progress', this[kEvents].progress)
    }

    if (typeof fn === 'function') {
      this[kEvents].progress = fn
      this.addEventListener('progress', fn)
    } else {
      this[kEvents].progress = null
    }
  }

  get onload () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].load
  }

  set onload (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].load) {
      this.removeEventListener('load', this[kEvents].load)
    }

    if (typeof fn === 'function') {
      this[kEvents].load = fn
      this.addEventListener('load', fn)
    } else {
      this[kEvents].load = null
    }
  }

  get onabort () {
    webidl.brandCheck(this, FileReader)

    return this[kEvents].abort
  }

  set onabort (fn) {
    webidl.brandCheck(this, FileReader)

    if (this[kEvents].abort) {
      this.removeEventListener('abort', this[kEvents].abort)
    }

    if (typeof fn === 'function') {
      this[kEvents].abort = fn
      this.addEventListener('abort', fn)
    } else {
      this[kEvents].abort = null
    }
  }
}

// https://w3c.github.io/FileAPI/#dom-filereader-empty
FileReader.EMPTY = FileReader.prototype.EMPTY = 0
// https://w3c.github.io/FileAPI/#dom-filereader-loading
FileReader.LOADING = FileReader.prototype.LOADING = 1
// https://w3c.github.io/FileAPI/#dom-filereader-done
FileReader.DONE = FileReader.prototype.DONE = 2

Object.defineProperties(FileReader.prototype, {
  EMPTY: staticPropertyDescriptors,
  LOADING: staticPropertyDescriptors,
  DONE: staticPropertyDescriptors,
  readAsArrayBuffer: kEnumerableProperty,
  readAsBinaryString: kEnumerableProperty,
  readAsText: kEnumerableProperty,
  readAsDataURL: kEnumerableProperty,
  abort: kEnumerableProperty,
  readyState: kEnumerableProperty,
  result: kEnumerableProperty,
  error: kEnumerableProperty,
  onloadstart: kEnumerableProperty,
  onprogress: kEnumerableProperty,
  onload: kEnumerableProperty,
  onabort: kEnumerableProperty,
  onerror: kEnumerableProperty,
  onloadend: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'FileReader',
    writable: false,
    enumerable: false,
    configurable: true
  }
})

Object.defineProperties(FileReader, {
  EMPTY: staticPropertyDescriptors,
  LOADING: staticPropertyDescriptors,
  DONE: staticPropertyDescriptors
})

module.exports = {
  FileReader
}


/***/ }),

/***/ 2517:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { webidl } = __nccwpck_require__(1677)

const kState = Symbol('ProgressEvent state')

/**
 * @see https://xhr.spec.whatwg.org/#progressevent
 */
class ProgressEvent extends Event {
  constructor (type, eventInitDict = {}) {
    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {})

    super(type, eventInitDict)

    this[kState] = {
      lengthComputable: eventInitDict.lengthComputable,
      loaded: eventInitDict.loaded,
      total: eventInitDict.total
    }
  }

  get lengthComputable () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].lengthComputable
  }

  get loaded () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].loaded
  }

  get total () {
    webidl.brandCheck(this, ProgressEvent)

    return this[kState].total
  }
}

webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
  {
    key: 'lengthComputable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'loaded',
    converter: webidl.converters['unsigned long long'],
    defaultValue: 0
  },
  {
    key: 'total',
    converter: webidl.converters['unsigned long long'],
    defaultValue: 0
  },
  {
    key: 'bubbles',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'cancelable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'composed',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
])

module.exports = {
  ProgressEvent
}


/***/ }),

/***/ 2601:
/***/ ((module) => {

"use strict";


module.exports = {
  kState: Symbol('FileReader state'),
  kResult: Symbol('FileReader result'),
  kError: Symbol('FileReader error'),
  kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),
  kEvents: Symbol('FileReader events'),
  kAborted: Symbol('FileReader aborted')
}


/***/ }),

/***/ 3042:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  kState,
  kError,
  kResult,
  kAborted,
  kLastProgressEventFired
} = __nccwpck_require__(2601)
const { ProgressEvent } = __nccwpck_require__(2517)
const { getEncoding } = __nccwpck_require__(8100)
const { DOMException } = __nccwpck_require__(7431)
const { serializeAMimeType, parseMIMEType } = __nccwpck_require__(6615)
const { types } = __nccwpck_require__(9023)
const { StringDecoder } = __nccwpck_require__(3193)
const { btoa } = __nccwpck_require__(181)

/** @type {PropertyDescriptor} */
const staticPropertyDescriptors = {
  enumerable: true,
  writable: false,
  configurable: false
}

/**
 * @see https://w3c.github.io/FileAPI/#readOperation
 * @param {import('./filereader').FileReader} fr
 * @param {import('buffer').Blob} blob
 * @param {string} type
 * @param {string?} encodingName
 */
function readOperation (fr, blob, type, encodingName) {
  // 1. If fr’s state is "loading", throw an InvalidStateError
  //    DOMException.
  if (fr[kState] === 'loading') {
    throw new DOMException('Invalid state', 'InvalidStateError')
  }

  // 2. Set fr’s state to "loading".
  fr[kState] = 'loading'

  // 3. Set fr’s result to null.
  fr[kResult] = null

  // 4. Set fr’s error to null.
  fr[kError] = null

  // 5. Let stream be the result of calling get stream on blob.
  /** @type {import('stream/web').ReadableStream} */
  const stream = blob.stream()

  // 6. Let reader be the result of getting a reader from stream.
  const reader = stream.getReader()

  // 7. Let bytes be an empty byte sequence.
  /** @type {Uint8Array[]} */
  const bytes = []

  // 8. Let chunkPromise be the result of reading a chunk from
  //    stream with reader.
  let chunkPromise = reader.read()

  // 9. Let isFirstChunk be true.
  let isFirstChunk = true

  // 10. In parallel, while true:
  // Note: "In parallel" just means non-blocking
  // Note 2: readOperation itself cannot be async as double
  // reading the body would then reject the promise, instead
  // of throwing an error.
  ;(async () => {
    while (!fr[kAborted]) {
      // 1. Wait for chunkPromise to be fulfilled or rejected.
      try {
        const { done, value } = await chunkPromise

        // 2. If chunkPromise is fulfilled, and isFirstChunk is
        //    true, queue a task to fire a progress event called
        //    loadstart at fr.
        if (isFirstChunk && !fr[kAborted]) {
          queueMicrotask(() => {
            fireAProgressEvent('loadstart', fr)
          })
        }

        // 3. Set isFirstChunk to false.
        isFirstChunk = false

        // 4. If chunkPromise is fulfilled with an object whose
        //    done property is false and whose value property is
        //    a Uint8Array object, run these steps:
        if (!done && types.isUint8Array(value)) {
          // 1. Let bs be the byte sequence represented by the
          //    Uint8Array object.

          // 2. Append bs to bytes.
          bytes.push(value)

          // 3. If roughly 50ms have passed since these steps
          //    were last invoked, queue a task to fire a
          //    progress event called progress at fr.
          if (
            (
              fr[kLastProgressEventFired] === undefined ||
              Date.now() - fr[kLastProgressEventFired] >= 50
            ) &&
            !fr[kAborted]
          ) {
            fr[kLastProgressEventFired] = Date.now()
            queueMicrotask(() => {
              fireAProgressEvent('progress', fr)
            })
          }

          // 4. Set chunkPromise to the result of reading a
          //    chunk from stream with reader.
          chunkPromise = reader.read()
        } else if (done) {
          // 5. Otherwise, if chunkPromise is fulfilled with an
          //    object whose done property is true, queue a task
          //    to run the following steps and abort this algorithm:
          queueMicrotask(() => {
            // 1. Set fr’s state to "done".
            fr[kState] = 'done'

            // 2. Let result be the result of package data given
            //    bytes, type, blob’s type, and encodingName.
            try {
              const result = packageData(bytes, type, blob.type, encodingName)

              // 4. Else:

              if (fr[kAborted]) {
                return
              }

              // 1. Set fr’s result to result.
              fr[kResult] = result

              // 2. Fire a progress event called load at the fr.
              fireAProgressEvent('load', fr)
            } catch (error) {
              // 3. If package data threw an exception error:

              // 1. Set fr’s error to error.
              fr[kError] = error

              // 2. Fire a progress event called error at fr.
              fireAProgressEvent('error', fr)
            }

            // 5. If fr’s state is not "loading", fire a progress
            //    event called loadend at the fr.
            if (fr[kState] !== 'loading') {
              fireAProgressEvent('loadend', fr)
            }
          })

          break
        }
      } catch (error) {
        if (fr[kAborted]) {
          return
        }

        // 6. Otherwise, if chunkPromise is rejected with an
        //    error error, queue a task to run the following
        //    steps and abort this algorithm:
        queueMicrotask(() => {
          // 1. Set fr’s state to "done".
          fr[kState] = 'done'

          // 2. Set fr’s error to error.
          fr[kError] = error

          // 3. Fire a progress event called error at fr.
          fireAProgressEvent('error', fr)

          // 4. If fr’s state is not "loading", fire a progress
          //    event called loadend at fr.
          if (fr[kState] !== 'loading') {
            fireAProgressEvent('loadend', fr)
          }
        })

        break
      }
    }
  })()
}

/**
 * @see https://w3c.github.io/FileAPI/#fire-a-progress-event
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e The name of the event
 * @param {import('./filereader').FileReader} reader
 */
function fireAProgressEvent (e, reader) {
  // The progress event e does not bubble. e.bubbles must be false
  // The progress event e is NOT cancelable. e.cancelable must be false
  const event = new ProgressEvent(e, {
    bubbles: false,
    cancelable: false
  })

  reader.dispatchEvent(event)
}

/**
 * @see https://w3c.github.io/FileAPI/#blob-package-data
 * @param {Uint8Array[]} bytes
 * @param {string} type
 * @param {string?} mimeType
 * @param {string?} encodingName
 */
function packageData (bytes, type, mimeType, encodingName) {
  // 1. A Blob has an associated package data algorithm, given
  //    bytes, a type, a optional mimeType, and a optional
  //    encodingName, which switches on type and runs the
  //    associated steps:

  switch (type) {
    case 'DataURL': {
      // 1. Return bytes as a DataURL [RFC2397] subject to
      //    the considerations below:
      //  * Use mimeType as part of the Data URL if it is
      //    available in keeping with the Data URL
      //    specification [RFC2397].
      //  * If mimeType is not available return a Data URL
      //    without a media-type. [RFC2397].

      // https://datatracker.ietf.org/doc/html/rfc2397#section-3
      // dataurl    := "data:" [ mediatype ] [ ";base64" ] "," data
      // mediatype  := [ type "/" subtype ] *( ";" parameter )
      // data       := *urlchar
      // parameter  := attribute "=" value
      let dataURL = 'data:'

      const parsed = parseMIMEType(mimeType || 'application/octet-stream')

      if (parsed !== 'failure') {
        dataURL += serializeAMimeType(parsed)
      }

      dataURL += ';base64,'

      const decoder = new StringDecoder('latin1')

      for (const chunk of bytes) {
        dataURL += btoa(decoder.write(chunk))
      }

      dataURL += btoa(decoder.end())

      return dataURL
    }
    case 'Text': {
      // 1. Let encoding be failure
      let encoding = 'failure'

      // 2. If the encodingName is present, set encoding to the
      //    result of getting an encoding from encodingName.
      if (encodingName) {
        encoding = getEncoding(encodingName)
      }

      // 3. If encoding is failure, and mimeType is present:
      if (encoding === 'failure' && mimeType) {
        // 1. Let type be the result of parse a MIME type
        //    given mimeType.
        const type = parseMIMEType(mimeType)

        // 2. If type is not failure, set encoding to the result
        //    of getting an encoding from type’s parameters["charset"].
        if (type !== 'failure') {
          encoding = getEncoding(type.parameters.get('charset'))
        }
      }

      // 4. If encoding is failure, then set encoding to UTF-8.
      if (encoding === 'failure') {
        encoding = 'UTF-8'
      }

      // 5. Decode bytes using fallback encoding encoding, and
      //    return the result.
      return decode(bytes, encoding)
    }
    case 'ArrayBuffer': {
      // Return a new ArrayBuffer whose contents are bytes.
      const sequence = combineByteSequences(bytes)

      return sequence.buffer
    }
    case 'BinaryString': {
      // Return bytes as a binary string, in which every byte
      //  is represented by a code unit of equal value [0..255].
      let binaryString = ''

      const decoder = new StringDecoder('latin1')

      for (const chunk of bytes) {
        binaryString += decoder.write(chunk)
      }

      binaryString += decoder.end()

      return binaryString
    }
  }
}

/**
 * @see https://encoding.spec.whatwg.org/#decode
 * @param {Uint8Array[]} ioQueue
 * @param {string} encoding
 */
function decode (ioQueue, encoding) {
  const bytes = combineByteSequences(ioQueue)

  // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.
  const BOMEncoding = BOMSniffing(bytes)

  let slice = 0

  // 2. If BOMEncoding is non-null:
  if (BOMEncoding !== null) {
    // 1. Set encoding to BOMEncoding.
    encoding = BOMEncoding

    // 2. Read three bytes from ioQueue, if BOMEncoding is
    //    UTF-8; otherwise read two bytes.
    //    (Do nothing with those bytes.)
    slice = BOMEncoding === 'UTF-8' ? 3 : 2
  }

  // 3. Process a queue with an instance of encoding’s
  //    decoder, ioQueue, output, and "replacement".

  // 4. Return output.

  const sliced = bytes.slice(slice)
  return new TextDecoder(encoding).decode(sliced)
}

/**
 * @see https://encoding.spec.whatwg.org/#bom-sniff
 * @param {Uint8Array} ioQueue
 */
function BOMSniffing (ioQueue) {
  // 1. Let BOM be the result of peeking 3 bytes from ioQueue,
  //    converted to a byte sequence.
  const [a, b, c] = ioQueue

  // 2. For each of the rows in the table below, starting with
  //    the first one and going down, if BOM starts with the
  //    bytes given in the first column, then return the
  //    encoding given in the cell in the second column of that
  //    row. Otherwise, return null.
  if (a === 0xEF && b === 0xBB && c === 0xBF) {
    return 'UTF-8'
  } else if (a === 0xFE && b === 0xFF) {
    return 'UTF-16BE'
  } else if (a === 0xFF && b === 0xFE) {
    return 'UTF-16LE'
  }

  return null
}

/**
 * @param {Uint8Array[]} sequences
 */
function combineByteSequences (sequences) {
  const size = sequences.reduce((a, b) => {
    return a + b.byteLength
  }, 0)

  let offset = 0

  return sequences.reduce((a, b) => {
    a.set(b, offset)
    offset += b.byteLength
    return a
  }, new Uint8Array(size))
}

module.exports = {
  staticPropertyDescriptors,
  readOperation,
  fireAProgressEvent
}


/***/ }),

/***/ 6762:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


// We include a version number for the Dispatcher API. In case of breaking changes,
// this version number must be increased to avoid conflicts.
const globalDispatcher = Symbol.for('undici.globalDispatcher.1')
const { InvalidArgumentError } = __nccwpck_require__(5606)
const Agent = __nccwpck_require__(8256)

if (getGlobalDispatcher() === undefined) {
  setGlobalDispatcher(new Agent())
}

function setGlobalDispatcher (agent) {
  if (!agent || typeof agent.dispatch !== 'function') {
    throw new InvalidArgumentError('Argument agent must implement Agent')
  }
  Object.defineProperty(globalThis, globalDispatcher, {
    value: agent,
    writable: true,
    enumerable: false,
    configurable: false
  })
}

function getGlobalDispatcher () {
  return globalThis[globalDispatcher]
}

module.exports = {
  setGlobalDispatcher,
  getGlobalDispatcher
}


/***/ }),

/***/ 2015:
/***/ ((module) => {

"use strict";


module.exports = class DecoratorHandler {
  constructor (handler) {
    this.handler = handler
  }

  onConnect (...args) {
    return this.handler.onConnect(...args)
  }

  onError (...args) {
    return this.handler.onError(...args)
  }

  onUpgrade (...args) {
    return this.handler.onUpgrade(...args)
  }

  onHeaders (...args) {
    return this.handler.onHeaders(...args)
  }

  onData (...args) {
    return this.handler.onData(...args)
  }

  onComplete (...args) {
    return this.handler.onComplete(...args)
  }

  onBodySent (...args) {
    return this.handler.onBodySent(...args)
  }
}


/***/ }),

/***/ 5726:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const util = __nccwpck_require__(7001)
const { kBodyUsed } = __nccwpck_require__(8136)
const assert = __nccwpck_require__(2613)
const { InvalidArgumentError } = __nccwpck_require__(5606)
const EE = __nccwpck_require__(4434)

const redirectableStatusCodes = [300, 301, 302, 303, 307, 308]

const kBody = Symbol('body')

class BodyAsyncIterable {
  constructor (body) {
    this[kBody] = body
    this[kBodyUsed] = false
  }

  async * [Symbol.asyncIterator] () {
    assert(!this[kBodyUsed], 'disturbed')
    this[kBodyUsed] = true
    yield * this[kBody]
  }
}

class RedirectHandler {
  constructor (dispatch, maxRedirections, opts, handler) {
    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
      throw new InvalidArgumentError('maxRedirections must be a positive number')
    }

    util.validateHandler(handler, opts.method, opts.upgrade)

    this.dispatch = dispatch
    this.location = null
    this.abort = null
    this.opts = { ...opts, maxRedirections: 0 } // opts must be a copy
    this.maxRedirections = maxRedirections
    this.handler = handler
    this.history = []

    if (util.isStream(this.opts.body)) {
      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp
      // so that it can be dispatched again?
      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?
      if (util.bodyLength(this.opts.body) === 0) {
        this.opts.body
          .on('data', function () {
            assert(false)
          })
      }

      if (typeof this.opts.body.readableDidRead !== 'boolean') {
        this.opts.body[kBodyUsed] = false
        EE.prototype.on.call(this.opts.body, 'data', function () {
          this[kBodyUsed] = true
        })
      }
    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {
      // TODO (fix): We can't access ReadableStream internal state
      // to determine whether or not it has been disturbed. This is just
      // a workaround.
      this.opts.body = new BodyAsyncIterable(this.opts.body)
    } else if (
      this.opts.body &&
      typeof this.opts.body !== 'string' &&
      !ArrayBuffer.isView(this.opts.body) &&
      util.isIterable(this.opts.body)
    ) {
      // TODO: Should we allow re-using iterable if !this.opts.idempotent
      // or through some other flag?
      this.opts.body = new BodyAsyncIterable(this.opts.body)
    }
  }

  onConnect (abort) {
    this.abort = abort
    this.handler.onConnect(abort, { history: this.history })
  }

  onUpgrade (statusCode, headers, socket) {
    this.handler.onUpgrade(statusCode, headers, socket)
  }

  onError (error) {
    this.handler.onError(error)
  }

  onHeaders (statusCode, headers, resume, statusText) {
    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body)
      ? null
      : parseLocation(statusCode, headers)

    if (this.opts.origin) {
      this.history.push(new URL(this.opts.path, this.opts.origin))
    }

    if (!this.location) {
      return this.handler.onHeaders(statusCode, headers, resume, statusText)
    }

    const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)))
    const path = search ? `${pathname}${search}` : pathname

    // Remove headers referring to the original URL.
    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.
    // https://tools.ietf.org/html/rfc7231#section-6.4
    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin)
    this.opts.path = path
    this.opts.origin = origin
    this.opts.maxRedirections = 0
    this.opts.query = null

    // https://tools.ietf.org/html/rfc7231#section-6.4.4
    // In case of HTTP 303, always replace method to be either HEAD or GET
    if (statusCode === 303 && this.opts.method !== 'HEAD') {
      this.opts.method = 'GET'
      this.opts.body = null
    }
  }

  onData (chunk) {
    if (this.location) {
      /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response bodies.

        Redirection is used to serve the requested resource from another URL, so it is assumes that
        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.

        For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually
        (which means it's optional and not mandated) contain just an hyperlink to the value of
        the Location response header, so the body can be ignored safely.

        For status 300, which is "Multiple Choices", the spec mentions both generating a Location
        response header AND a response body with the other possible location to follow.
        Since the spec explicitily chooses not to specify a format for such body and leave it to
        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.
      */
    } else {
      return this.handler.onData(chunk)
    }
  }

  onComplete (trailers) {
    if (this.location) {
      /*
        https://tools.ietf.org/html/rfc7231#section-6.4

        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections
        and neither are useful if present.

        See comment on onData method above for more detailed informations.
      */

      this.location = null
      this.abort = null

      this.dispatch(this.opts, this)
    } else {
      this.handler.onComplete(trailers)
    }
  }

  onBodySent (chunk) {
    if (this.handler.onBodySent) {
      this.handler.onBodySent(chunk)
    }
  }
}

function parseLocation (statusCode, headers) {
  if (redirectableStatusCodes.indexOf(statusCode) === -1) {
    return null
  }

  for (let i = 0; i < headers.length; i += 2) {
    if (headers[i].toString().toLowerCase() === 'location') {
      return headers[i + 1]
    }
  }
}

// https://tools.ietf.org/html/rfc7231#section-6.4.4
function shouldRemoveHeader (header, removeContent, unknownOrigin) {
  if (header.length === 4) {
    return util.headerNameToString(header) === 'host'
  }
  if (removeContent && util.headerNameToString(header).startsWith('content-')) {
    return true
  }
  if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
    const name = util.headerNameToString(header)
    return name === 'authorization' || name === 'cookie' || name === 'proxy-authorization'
  }
  return false
}

// https://tools.ietf.org/html/rfc7231#section-6.4
function cleanRequestHeaders (headers, removeContent, unknownOrigin) {
  const ret = []
  if (Array.isArray(headers)) {
    for (let i = 0; i < headers.length; i += 2) {
      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
        ret.push(headers[i], headers[i + 1])
      }
    }
  } else if (headers && typeof headers === 'object') {
    for (const key of Object.keys(headers)) {
      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
        ret.push(key, headers[key])
      }
    }
  } else {
    assert(headers == null, 'headers must be an object or an array')
  }
  return ret
}

module.exports = RedirectHandler


/***/ }),

/***/ 1294:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const assert = __nccwpck_require__(2613)

const { kRetryHandlerDefaultRetry } = __nccwpck_require__(8136)
const { RequestRetryError } = __nccwpck_require__(5606)
const { isDisturbed, parseHeaders, parseRangeHeader } = __nccwpck_require__(7001)

function calculateRetryAfterHeader (retryAfter) {
  const current = Date.now()
  const diff = new Date(retryAfter).getTime() - current

  return diff
}

class RetryHandler {
  constructor (opts, handlers) {
    const { retryOptions, ...dispatchOpts } = opts
    const {
      // Retry scoped
      retry: retryFn,
      maxRetries,
      maxTimeout,
      minTimeout,
      timeoutFactor,
      // Response scoped
      methods,
      errorCodes,
      retryAfter,
      statusCodes
    } = retryOptions ?? {}

    this.dispatch = handlers.dispatch
    this.handler = handlers.handler
    this.opts = dispatchOpts
    this.abort = null
    this.aborted = false
    this.retryOpts = {
      retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],
      retryAfter: retryAfter ?? true,
      maxTimeout: maxTimeout ?? 30 * 1000, // 30s,
      timeout: minTimeout ?? 500, // .5s
      timeoutFactor: timeoutFactor ?? 2,
      maxRetries: maxRetries ?? 5,
      // What errors we should retry
      methods: methods ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],
      // Indicates which errors to retry
      statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
      // List of errors to retry
      errorCodes: errorCodes ?? [
        'ECONNRESET',
        'ECONNREFUSED',
        'ENOTFOUND',
        'ENETDOWN',
        'ENETUNREACH',
        'EHOSTDOWN',
        'EHOSTUNREACH',
        'EPIPE'
      ]
    }

    this.retryCount = 0
    this.start = 0
    this.end = null
    this.etag = null
    this.resume = null

    // Handle possible onConnect duplication
    this.handler.onConnect(reason => {
      this.aborted = true
      if (this.abort) {
        this.abort(reason)
      } else {
        this.reason = reason
      }
    })
  }

  onRequestSent () {
    if (this.handler.onRequestSent) {
      this.handler.onRequestSent()
    }
  }

  onUpgrade (statusCode, headers, socket) {
    if (this.handler.onUpgrade) {
      this.handler.onUpgrade(statusCode, headers, socket)
    }
  }

  onConnect (abort) {
    if (this.aborted) {
      abort(this.reason)
    } else {
      this.abort = abort
    }
  }

  onBodySent (chunk) {
    if (this.handler.onBodySent) return this.handler.onBodySent(chunk)
  }

  static [kRetryHandlerDefaultRetry] (err, { state, opts }, cb) {
    const { statusCode, code, headers } = err
    const { method, retryOptions } = opts
    const {
      maxRetries,
      timeout,
      maxTimeout,
      timeoutFactor,
      statusCodes,
      errorCodes,
      methods
    } = retryOptions
    let { counter, currentTimeout } = state

    currentTimeout =
      currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout

    // Any code that is not a Undici's originated and allowed to retry
    if (
      code &&
      code !== 'UND_ERR_REQ_RETRY' &&
      code !== 'UND_ERR_SOCKET' &&
      !errorCodes.includes(code)
    ) {
      cb(err)
      return
    }

    // If a set of method are provided and the current method is not in the list
    if (Array.isArray(methods) && !methods.includes(method)) {
      cb(err)
      return
    }

    // If a set of status code are provided and the current status code is not in the list
    if (
      statusCode != null &&
      Array.isArray(statusCodes) &&
      !statusCodes.includes(statusCode)
    ) {
      cb(err)
      return
    }

    // If we reached the max number of retries
    if (counter > maxRetries) {
      cb(err)
      return
    }

    let retryAfterHeader = headers != null && headers['retry-after']
    if (retryAfterHeader) {
      retryAfterHeader = Number(retryAfterHeader)
      retryAfterHeader = isNaN(retryAfterHeader)
        ? calculateRetryAfterHeader(retryAfterHeader)
        : retryAfterHeader * 1e3 // Retry-After is in seconds
    }

    const retryTimeout =
      retryAfterHeader > 0
        ? Math.min(retryAfterHeader, maxTimeout)
        : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout)

    state.currentTimeout = retryTimeout

    setTimeout(() => cb(null), retryTimeout)
  }

  onHeaders (statusCode, rawHeaders, resume, statusMessage) {
    const headers = parseHeaders(rawHeaders)

    this.retryCount += 1

    if (statusCode >= 300) {
      this.abort(
        new RequestRetryError('Request failed', statusCode, {
          headers,
          count: this.retryCount
        })
      )
      return false
    }

    // Checkpoint for resume from where we left it
    if (this.resume != null) {
      this.resume = null

      if (statusCode !== 206) {
        return true
      }

      const contentRange = parseRangeHeader(headers['content-range'])
      // If no content range
      if (!contentRange) {
        this.abort(
          new RequestRetryError('Content-Range mismatch', statusCode, {
            headers,
            count: this.retryCount
          })
        )
        return false
      }

      // Let's start with a weak etag check
      if (this.etag != null && this.etag !== headers.etag) {
        this.abort(
          new RequestRetryError('ETag mismatch', statusCode, {
            headers,
            count: this.retryCount
          })
        )
        return false
      }

      const { start, size, end = size } = contentRange

      assert(this.start === start, 'content-range mismatch')
      assert(this.end == null || this.end === end, 'content-range mismatch')

      this.resume = resume
      return true
    }

    if (this.end == null) {
      if (statusCode === 206) {
        // First time we receive 206
        const range = parseRangeHeader(headers['content-range'])

        if (range == null) {
          return this.handler.onHeaders(
            statusCode,
            rawHeaders,
            resume,
            statusMessage
          )
        }

        const { start, size, end = size } = range

        assert(
          start != null && Number.isFinite(start) && this.start !== start,
          'content-range mismatch'
        )
        assert(Number.isFinite(start))
        assert(
          end != null && Number.isFinite(end) && this.end !== end,
          'invalid content-length'
        )

        this.start = start
        this.end = end
      }

      // We make our best to checkpoint the body for further range headers
      if (this.end == null) {
        const contentLength = headers['content-length']
        this.end = contentLength != null ? Number(contentLength) : null
      }

      assert(Number.isFinite(this.start))
      assert(
        this.end == null || Number.isFinite(this.end),
        'invalid content-length'
      )

      this.resume = resume
      this.etag = headers.etag != null ? headers.etag : null

      return this.handler.onHeaders(
        statusCode,
        rawHeaders,
        resume,
        statusMessage
      )
    }

    const err = new RequestRetryError('Request failed', statusCode, {
      headers,
      count: this.retryCount
    })

    this.abort(err)

    return false
  }

  onData (chunk) {
    this.start += chunk.length

    return this.handler.onData(chunk)
  }

  onComplete (rawTrailers) {
    this.retryCount = 0
    return this.handler.onComplete(rawTrailers)
  }

  onError (err) {
    if (this.aborted || isDisturbed(this.opts.body)) {
      return this.handler.onError(err)
    }

    this.retryOpts.retry(
      err,
      {
        state: { counter: this.retryCount++, currentTimeout: this.retryAfter },
        opts: { retryOptions: this.retryOpts, ...this.opts }
      },
      onRetry.bind(this)
    )

    function onRetry (err) {
      if (err != null || this.aborted || isDisturbed(this.opts.body)) {
        return this.handler.onError(err)
      }

      if (this.start !== 0) {
        this.opts = {
          ...this.opts,
          headers: {
            ...this.opts.headers,
            range: `bytes=${this.start}-${this.end ?? ''}`
          }
        }
      }

      try {
        this.dispatch(this.opts, this)
      } catch (err) {
        this.handler.onError(err)
      }
    }
  }
}

module.exports = RetryHandler


/***/ }),

/***/ 9010:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const RedirectHandler = __nccwpck_require__(5726)

function createRedirectInterceptor ({ maxRedirections: defaultMaxRedirections }) {
  return (dispatch) => {
    return function Intercept (opts, handler) {
      const { maxRedirections = defaultMaxRedirections } = opts

      if (!maxRedirections) {
        return dispatch(opts, handler)
      }

      const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler)
      opts = { ...opts, maxRedirections: 0 } // Stop sub dispatcher from also redirecting.
      return dispatch(opts, redirectHandler)
    }
  }
}

module.exports = createRedirectInterceptor


/***/ }),

/***/ 2771:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
const utils_1 = __nccwpck_require__(4051);
// C headers
var ERROR;
(function (ERROR) {
    ERROR[ERROR["OK"] = 0] = "OK";
    ERROR[ERROR["INTERNAL"] = 1] = "INTERNAL";
    ERROR[ERROR["STRICT"] = 2] = "STRICT";
    ERROR[ERROR["LF_EXPECTED"] = 3] = "LF_EXPECTED";
    ERROR[ERROR["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
    ERROR[ERROR["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
    ERROR[ERROR["INVALID_METHOD"] = 6] = "INVALID_METHOD";
    ERROR[ERROR["INVALID_URL"] = 7] = "INVALID_URL";
    ERROR[ERROR["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
    ERROR[ERROR["INVALID_VERSION"] = 9] = "INVALID_VERSION";
    ERROR[ERROR["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
    ERROR[ERROR["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
    ERROR[ERROR["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
    ERROR[ERROR["INVALID_STATUS"] = 13] = "INVALID_STATUS";
    ERROR[ERROR["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
    ERROR[ERROR["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
    ERROR[ERROR["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
    ERROR[ERROR["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
    ERROR[ERROR["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
    ERROR[ERROR["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
    ERROR[ERROR["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
    ERROR[ERROR["PAUSED"] = 21] = "PAUSED";
    ERROR[ERROR["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
    ERROR[ERROR["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
    ERROR[ERROR["USER"] = 24] = "USER";
})(ERROR = exports.ERROR || (exports.ERROR = {}));
var TYPE;
(function (TYPE) {
    TYPE[TYPE["BOTH"] = 0] = "BOTH";
    TYPE[TYPE["REQUEST"] = 1] = "REQUEST";
    TYPE[TYPE["RESPONSE"] = 2] = "RESPONSE";
})(TYPE = exports.TYPE || (exports.TYPE = {}));
var FLAGS;
(function (FLAGS) {
    FLAGS[FLAGS["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
    FLAGS[FLAGS["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
    FLAGS[FLAGS["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
    FLAGS[FLAGS["CHUNKED"] = 8] = "CHUNKED";
    FLAGS[FLAGS["UPGRADE"] = 16] = "UPGRADE";
    FLAGS[FLAGS["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
    FLAGS[FLAGS["SKIPBODY"] = 64] = "SKIPBODY";
    FLAGS[FLAGS["TRAILING"] = 128] = "TRAILING";
    // 1 << 8 is unused
    FLAGS[FLAGS["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
var LENIENT_FLAGS;
(function (LENIENT_FLAGS) {
    LENIENT_FLAGS[LENIENT_FLAGS["HEADERS"] = 1] = "HEADERS";
    LENIENT_FLAGS[LENIENT_FLAGS["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
    LENIENT_FLAGS[LENIENT_FLAGS["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
var METHODS;
(function (METHODS) {
    METHODS[METHODS["DELETE"] = 0] = "DELETE";
    METHODS[METHODS["GET"] = 1] = "GET";
    METHODS[METHODS["HEAD"] = 2] = "HEAD";
    METHODS[METHODS["POST"] = 3] = "POST";
    METHODS[METHODS["PUT"] = 4] = "PUT";
    /* pathological */
    METHODS[METHODS["CONNECT"] = 5] = "CONNECT";
    METHODS[METHODS["OPTIONS"] = 6] = "OPTIONS";
    METHODS[METHODS["TRACE"] = 7] = "TRACE";
    /* WebDAV */
    METHODS[METHODS["COPY"] = 8] = "COPY";
    METHODS[METHODS["LOCK"] = 9] = "LOCK";
    METHODS[METHODS["MKCOL"] = 10] = "MKCOL";
    METHODS[METHODS["MOVE"] = 11] = "MOVE";
    METHODS[METHODS["PROPFIND"] = 12] = "PROPFIND";
    METHODS[METHODS["PROPPATCH"] = 13] = "PROPPATCH";
    METHODS[METHODS["SEARCH"] = 14] = "SEARCH";
    METHODS[METHODS["UNLOCK"] = 15] = "UNLOCK";
    METHODS[METHODS["BIND"] = 16] = "BIND";
    METHODS[METHODS["REBIND"] = 17] = "REBIND";
    METHODS[METHODS["UNBIND"] = 18] = "UNBIND";
    METHODS[METHODS["ACL"] = 19] = "ACL";
    /* subversion */
    METHODS[METHODS["REPORT"] = 20] = "REPORT";
    METHODS[METHODS["MKACTIVITY"] = 21] = "MKACTIVITY";
    METHODS[METHODS["CHECKOUT"] = 22] = "CHECKOUT";
    METHODS[METHODS["MERGE"] = 23] = "MERGE";
    /* upnp */
    METHODS[METHODS["M-SEARCH"] = 24] = "M-SEARCH";
    METHODS[METHODS["NOTIFY"] = 25] = "NOTIFY";
    METHODS[METHODS["SUBSCRIBE"] = 26] = "SUBSCRIBE";
    METHODS[METHODS["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
    /* RFC-5789 */
    METHODS[METHODS["PATCH"] = 28] = "PATCH";
    METHODS[METHODS["PURGE"] = 29] = "PURGE";
    /* CalDAV */
    METHODS[METHODS["MKCALENDAR"] = 30] = "MKCALENDAR";
    /* RFC-2068, section 19.6.1.2 */
    METHODS[METHODS["LINK"] = 31] = "LINK";
    METHODS[METHODS["UNLINK"] = 32] = "UNLINK";
    /* icecast */
    METHODS[METHODS["SOURCE"] = 33] = "SOURCE";
    /* RFC-7540, section 11.6 */
    METHODS[METHODS["PRI"] = 34] = "PRI";
    /* RFC-2326 RTSP */
    METHODS[METHODS["DESCRIBE"] = 35] = "DESCRIBE";
    METHODS[METHODS["ANNOUNCE"] = 36] = "ANNOUNCE";
    METHODS[METHODS["SETUP"] = 37] = "SETUP";
    METHODS[METHODS["PLAY"] = 38] = "PLAY";
    METHODS[METHODS["PAUSE"] = 39] = "PAUSE";
    METHODS[METHODS["TEARDOWN"] = 40] = "TEARDOWN";
    METHODS[METHODS["GET_PARAMETER"] = 41] = "GET_PARAMETER";
    METHODS[METHODS["SET_PARAMETER"] = 42] = "SET_PARAMETER";
    METHODS[METHODS["REDIRECT"] = 43] = "REDIRECT";
    METHODS[METHODS["RECORD"] = 44] = "RECORD";
    /* RAOP */
    METHODS[METHODS["FLUSH"] = 45] = "FLUSH";
})(METHODS = exports.METHODS || (exports.METHODS = {}));
exports.METHODS_HTTP = [
    METHODS.DELETE,
    METHODS.GET,
    METHODS.HEAD,
    METHODS.POST,
    METHODS.PUT,
    METHODS.CONNECT,
    METHODS.OPTIONS,
    METHODS.TRACE,
    METHODS.COPY,
    METHODS.LOCK,
    METHODS.MKCOL,
    METHODS.MOVE,
    METHODS.PROPFIND,
    METHODS.PROPPATCH,
    METHODS.SEARCH,
    METHODS.UNLOCK,
    METHODS.BIND,
    METHODS.REBIND,
    METHODS.UNBIND,
    METHODS.ACL,
    METHODS.REPORT,
    METHODS.MKACTIVITY,
    METHODS.CHECKOUT,
    METHODS.MERGE,
    METHODS['M-SEARCH'],
    METHODS.NOTIFY,
    METHODS.SUBSCRIBE,
    METHODS.UNSUBSCRIBE,
    METHODS.PATCH,
    METHODS.PURGE,
    METHODS.MKCALENDAR,
    METHODS.LINK,
    METHODS.UNLINK,
    METHODS.PRI,
    // TODO(indutny): should we allow it with HTTP?
    METHODS.SOURCE,
];
exports.METHODS_ICE = [
    METHODS.SOURCE,
];
exports.METHODS_RTSP = [
    METHODS.OPTIONS,
    METHODS.DESCRIBE,
    METHODS.ANNOUNCE,
    METHODS.SETUP,
    METHODS.PLAY,
    METHODS.PAUSE,
    METHODS.TEARDOWN,
    METHODS.GET_PARAMETER,
    METHODS.SET_PARAMETER,
    METHODS.REDIRECT,
    METHODS.RECORD,
    METHODS.FLUSH,
    // For AirPlay
    METHODS.GET,
    METHODS.POST,
];
exports.METHOD_MAP = utils_1.enumToMap(METHODS);
exports.H_METHOD_MAP = {};
Object.keys(exports.METHOD_MAP).forEach((key) => {
    if (/^H/.test(key)) {
        exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
    }
});
var FINISH;
(function (FINISH) {
    FINISH[FINISH["SAFE"] = 0] = "SAFE";
    FINISH[FINISH["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
    FINISH[FINISH["UNSAFE"] = 2] = "UNSAFE";
})(FINISH = exports.FINISH || (exports.FINISH = {}));
exports.ALPHA = [];
for (let i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++) {
    // Upper case
    exports.ALPHA.push(String.fromCharCode(i));
    // Lower case
    exports.ALPHA.push(String.fromCharCode(i + 0x20));
}
exports.NUM_MAP = {
    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,
    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,
};
exports.HEX_MAP = {
    0: 0, 1: 1, 2: 2, 3: 3, 4: 4,
    5: 5, 6: 6, 7: 7, 8: 8, 9: 9,
    A: 0XA, B: 0XB, C: 0XC, D: 0XD, E: 0XE, F: 0XF,
    a: 0xa, b: 0xb, c: 0xc, d: 0xd, e: 0xe, f: 0xf,
};
exports.NUM = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
];
exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
exports.MARK = ['-', '_', '.', '!', '~', '*', '\'', '(', ')'];
exports.USERINFO_CHARS = exports.ALPHANUM
    .concat(exports.MARK)
    .concat(['%', ';', ':', '&', '=', '+', '$', ',']);
// TODO(indutny): use RFC
exports.STRICT_URL_CHAR = [
    '!', '"', '$', '%', '&', '\'',
    '(', ')', '*', '+', ',', '-', '.', '/',
    ':', ';', '<', '=', '>',
    '@', '[', '\\', ']', '^', '_',
    '`',
    '{', '|', '}', '~',
].concat(exports.ALPHANUM);
exports.URL_CHAR = exports.STRICT_URL_CHAR
    .concat(['\t', '\f']);
// All characters with 0x80 bit set to 1
for (let i = 0x80; i <= 0xff; i++) {
    exports.URL_CHAR.push(i);
}
exports.HEX = exports.NUM.concat(['a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F']);
/* Tokens as defined by rfc 2616. Also lowercases them.
 *        token       = 1*<any CHAR except CTLs or separators>
 *     separators     = "(" | ")" | "<" | ">" | "@"
 *                    | "," | ";" | ":" | "\" | <">
 *                    | "/" | "[" | "]" | "?" | "="
 *                    | "{" | "}" | SP | HT
 */
exports.STRICT_TOKEN = [
    '!', '#', '$', '%', '&', '\'',
    '*', '+', '-', '.',
    '^', '_', '`',
    '|', '~',
].concat(exports.ALPHANUM);
exports.TOKEN = exports.STRICT_TOKEN.concat([' ']);
/*
 * Verify that a char is a valid visible (printable) US-ASCII
 * character or %x80-FF
 */
exports.HEADER_CHARS = ['\t'];
for (let i = 32; i <= 255; i++) {
    if (i !== 127) {
        exports.HEADER_CHARS.push(i);
    }
}
// ',' = \x44
exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
exports.MAJOR = exports.NUM_MAP;
exports.MINOR = exports.MAJOR;
var HEADER_STATE;
(function (HEADER_STATE) {
    HEADER_STATE[HEADER_STATE["GENERAL"] = 0] = "GENERAL";
    HEADER_STATE[HEADER_STATE["CONNECTION"] = 1] = "CONNECTION";
    HEADER_STATE[HEADER_STATE["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
    HEADER_STATE[HEADER_STATE["UPGRADE"] = 4] = "UPGRADE";
    HEADER_STATE[HEADER_STATE["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
    HEADER_STATE[HEADER_STATE["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
    HEADER_STATE[HEADER_STATE["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
    HEADER_STATE[HEADER_STATE["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
exports.SPECIAL_HEADERS = {
    'connection': HEADER_STATE.CONNECTION,
    'content-length': HEADER_STATE.CONTENT_LENGTH,
    'proxy-connection': HEADER_STATE.CONNECTION,
    'transfer-encoding': HEADER_STATE.TRANSFER_ENCODING,
    'upgrade': HEADER_STATE.UPGRADE,
};
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ 1917:
/***/ ((module) => {

module.exports = ''


/***/ }),

/***/ 4063:
/***/ ((module) => {

module.exports = ''


/***/ }),

/***/ 4051:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.enumToMap = void 0;
function enumToMap(obj) {
    const res = {};
    Object.keys(obj).forEach((key) => {
        const value = obj[key];
        if (typeof value === 'number') {
            res[key] = value;
        }
    });
    return res;
}
exports.enumToMap = enumToMap;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 7140:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kClients } = __nccwpck_require__(8136)
const Agent = __nccwpck_require__(8256)
const {
  kAgent,
  kMockAgentSet,
  kMockAgentGet,
  kDispatches,
  kIsMockActive,
  kNetConnect,
  kGetNetConnect,
  kOptions,
  kFactory
} = __nccwpck_require__(7520)
const MockClient = __nccwpck_require__(4866)
const MockPool = __nccwpck_require__(5487)
const { matchValue, buildMockOptions } = __nccwpck_require__(7476)
const { InvalidArgumentError, UndiciError } = __nccwpck_require__(5606)
const Dispatcher = __nccwpck_require__(700)
const Pluralizer = __nccwpck_require__(4020)
const PendingInterceptorsFormatter = __nccwpck_require__(179)

class FakeWeakRef {
  constructor (value) {
    this.value = value
  }

  deref () {
    return this.value
  }
}

class MockAgent extends Dispatcher {
  constructor (opts) {
    super(opts)

    this[kNetConnect] = true
    this[kIsMockActive] = true

    // Instantiate Agent and encapsulate
    if ((opts && opts.agent && typeof opts.agent.dispatch !== 'function')) {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }
    const agent = opts && opts.agent ? opts.agent : new Agent(opts)
    this[kAgent] = agent

    this[kClients] = agent[kClients]
    this[kOptions] = buildMockOptions(opts)
  }

  get (origin) {
    let dispatcher = this[kMockAgentGet](origin)

    if (!dispatcher) {
      dispatcher = this[kFactory](origin)
      this[kMockAgentSet](origin, dispatcher)
    }
    return dispatcher
  }

  dispatch (opts, handler) {
    // Call MockAgent.get to perform additional setup before dispatching as normal
    this.get(opts.origin)
    return this[kAgent].dispatch(opts, handler)
  }

  async close () {
    await this[kAgent].close()
    this[kClients].clear()
  }

  deactivate () {
    this[kIsMockActive] = false
  }

  activate () {
    this[kIsMockActive] = true
  }

  enableNetConnect (matcher) {
    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {
      if (Array.isArray(this[kNetConnect])) {
        this[kNetConnect].push(matcher)
      } else {
        this[kNetConnect] = [matcher]
      }
    } else if (typeof matcher === 'undefined') {
      this[kNetConnect] = true
    } else {
      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.')
    }
  }

  disableNetConnect () {
    this[kNetConnect] = false
  }

  // This is required to bypass issues caused by using global symbols - see:
  // https://github.com/nodejs/undici/issues/1447
  get isMockActive () {
    return this[kIsMockActive]
  }

  [kMockAgentSet] (origin, dispatcher) {
    this[kClients].set(origin, new FakeWeakRef(dispatcher))
  }

  [kFactory] (origin) {
    const mockOptions = Object.assign({ agent: this }, this[kOptions])
    return this[kOptions] && this[kOptions].connections === 1
      ? new MockClient(origin, mockOptions)
      : new MockPool(origin, mockOptions)
  }

  [kMockAgentGet] (origin) {
    // First check if we can immediately find it
    const ref = this[kClients].get(origin)
    if (ref) {
      return ref.deref()
    }

    // If the origin is not a string create a dummy parent pool and return to user
    if (typeof origin !== 'string') {
      const dispatcher = this[kFactory]('http://localhost:9999')
      this[kMockAgentSet](origin, dispatcher)
      return dispatcher
    }

    // If we match, create a pool and assign the same dispatches
    for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
      const nonExplicitDispatcher = nonExplicitRef.deref()
      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {
        const dispatcher = this[kFactory](origin)
        this[kMockAgentSet](origin, dispatcher)
        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches]
        return dispatcher
      }
    }
  }

  [kGetNetConnect] () {
    return this[kNetConnect]
  }

  pendingInterceptors () {
    const mockAgentClients = this[kClients]

    return Array.from(mockAgentClients.entries())
      .flatMap(([origin, scope]) => scope.deref()[kDispatches].map(dispatch => ({ ...dispatch, origin })))
      .filter(({ pending }) => pending)
  }

  assertNoPendingInterceptors ({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
    const pending = this.pendingInterceptors()

    if (pending.length === 0) {
      return
    }

    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length)

    throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim())
  }
}

module.exports = MockAgent


/***/ }),

/***/ 4866:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { promisify } = __nccwpck_require__(9023)
const Client = __nccwpck_require__(3894)
const { buildMockDispatch } = __nccwpck_require__(7476)
const {
  kDispatches,
  kMockAgent,
  kClose,
  kOriginalClose,
  kOrigin,
  kOriginalDispatch,
  kConnected
} = __nccwpck_require__(7520)
const { MockInterceptor } = __nccwpck_require__(2542)
const Symbols = __nccwpck_require__(8136)
const { InvalidArgumentError } = __nccwpck_require__(5606)

/**
 * MockClient provides an API that extends the Client to influence the mockDispatches.
 */
class MockClient extends Client {
  constructor (origin, opts) {
    super(origin, opts)

    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }

    this[kMockAgent] = opts.agent
    this[kOrigin] = origin
    this[kDispatches] = []
    this[kConnected] = 1
    this[kOriginalDispatch] = this.dispatch
    this[kOriginalClose] = this.close.bind(this)

    this.dispatch = buildMockDispatch.call(this)
    this.close = this[kClose]
  }

  get [Symbols.kConnected] () {
    return this[kConnected]
  }

  /**
   * Sets up the base interceptor for mocking replies from undici.
   */
  intercept (opts) {
    return new MockInterceptor(opts, this[kDispatches])
  }

  async [kClose] () {
    await promisify(this[kOriginalClose])()
    this[kConnected] = 0
    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])
  }
}

module.exports = MockClient


/***/ }),

/***/ 5198:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { UndiciError } = __nccwpck_require__(5606)

class MockNotMatchedError extends UndiciError {
  constructor (message) {
    super(message)
    Error.captureStackTrace(this, MockNotMatchedError)
    this.name = 'MockNotMatchedError'
    this.message = message || 'The request does not match any registered mock dispatches'
    this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED'
  }
}

module.exports = {
  MockNotMatchedError
}


/***/ }),

/***/ 2542:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { getResponseData, buildKey, addMockDispatch } = __nccwpck_require__(7476)
const {
  kDispatches,
  kDispatchKey,
  kDefaultHeaders,
  kDefaultTrailers,
  kContentLength,
  kMockDispatch
} = __nccwpck_require__(7520)
const { InvalidArgumentError } = __nccwpck_require__(5606)
const { buildURL } = __nccwpck_require__(7001)

/**
 * Defines the scope API for an interceptor reply
 */
class MockScope {
  constructor (mockDispatch) {
    this[kMockDispatch] = mockDispatch
  }

  /**
   * Delay a reply by a set amount in ms.
   */
  delay (waitInMs) {
    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {
      throw new InvalidArgumentError('waitInMs must be a valid integer > 0')
    }

    this[kMockDispatch].delay = waitInMs
    return this
  }

  /**
   * For a defined reply, never mark as consumed.
   */
  persist () {
    this[kMockDispatch].persist = true
    return this
  }

  /**
   * Allow one to define a reply for a set amount of matching requests.
   */
  times (repeatTimes) {
    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0')
    }

    this[kMockDispatch].times = repeatTimes
    return this
  }
}

/**
 * Defines an interceptor for a Mock
 */
class MockInterceptor {
  constructor (opts, mockDispatches) {
    if (typeof opts !== 'object') {
      throw new InvalidArgumentError('opts must be an object')
    }
    if (typeof opts.path === 'undefined') {
      throw new InvalidArgumentError('opts.path must be defined')
    }
    if (typeof opts.method === 'undefined') {
      opts.method = 'GET'
    }
    // See https://github.com/nodejs/undici/issues/1245
    // As per RFC 3986, clients are not supposed to send URI
    // fragments to servers when they retrieve a document,
    if (typeof opts.path === 'string') {
      if (opts.query) {
        opts.path = buildURL(opts.path, opts.query)
      } else {
        // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811
        const parsedURL = new URL(opts.path, 'data://')
        opts.path = parsedURL.pathname + parsedURL.search
      }
    }
    if (typeof opts.method === 'string') {
      opts.method = opts.method.toUpperCase()
    }

    this[kDispatchKey] = buildKey(opts)
    this[kDispatches] = mockDispatches
    this[kDefaultHeaders] = {}
    this[kDefaultTrailers] = {}
    this[kContentLength] = false
  }

  createMockScopeDispatchData (statusCode, data, responseOptions = {}) {
    const responseData = getResponseData(data)
    const contentLength = this[kContentLength] ? { 'content-length': responseData.length } : {}
    const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers }
    const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers }

    return { statusCode, data, headers, trailers }
  }

  validateReplyParameters (statusCode, data, responseOptions) {
    if (typeof statusCode === 'undefined') {
      throw new InvalidArgumentError('statusCode must be defined')
    }
    if (typeof data === 'undefined') {
      throw new InvalidArgumentError('data must be defined')
    }
    if (typeof responseOptions !== 'object') {
      throw new InvalidArgumentError('responseOptions must be an object')
    }
  }

  /**
   * Mock an undici request with a defined reply.
   */
  reply (replyData) {
    // Values of reply aren't available right now as they
    // can only be available when the reply callback is invoked.
    if (typeof replyData === 'function') {
      // We'll first wrap the provided callback in another function,
      // this function will properly resolve the data from the callback
      // when invoked.
      const wrappedDefaultsCallback = (opts) => {
        // Our reply options callback contains the parameter for statusCode, data and options.
        const resolvedData = replyData(opts)

        // Check if it is in the right format
        if (typeof resolvedData !== 'object') {
          throw new InvalidArgumentError('reply options callback must return an object')
        }

        const { statusCode, data = '', responseOptions = {} } = resolvedData
        this.validateReplyParameters(statusCode, data, responseOptions)
        // Since the values can be obtained immediately we return them
        // from this higher order function that will be resolved later.
        return {
          ...this.createMockScopeDispatchData(statusCode, data, responseOptions)
        }
      }

      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.
      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback)
      return new MockScope(newMockDispatch)
    }

    // We can have either one or three parameters, if we get here,
    // we should have 1-3 parameters. So we spread the arguments of
    // this function to obtain the parameters, since replyData will always
    // just be the statusCode.
    const [statusCode, data = '', responseOptions = {}] = [...arguments]
    this.validateReplyParameters(statusCode, data, responseOptions)

    // Send in-already provided data like usual
    const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions)
    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData)
    return new MockScope(newMockDispatch)
  }

  /**
   * Mock an undici request with a defined error.
   */
  replyWithError (error) {
    if (typeof error === 'undefined') {
      throw new InvalidArgumentError('error must be defined')
    }

    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error })
    return new MockScope(newMockDispatch)
  }

  /**
   * Set default reply headers on the interceptor for subsequent replies
   */
  defaultReplyHeaders (headers) {
    if (typeof headers === 'undefined') {
      throw new InvalidArgumentError('headers must be defined')
    }

    this[kDefaultHeaders] = headers
    return this
  }

  /**
   * Set default reply trailers on the interceptor for subsequent replies
   */
  defaultReplyTrailers (trailers) {
    if (typeof trailers === 'undefined') {
      throw new InvalidArgumentError('trailers must be defined')
    }

    this[kDefaultTrailers] = trailers
    return this
  }

  /**
   * Set reply content length header for replies on the interceptor
   */
  replyContentLength () {
    this[kContentLength] = true
    return this
  }
}

module.exports.MockInterceptor = MockInterceptor
module.exports.MockScope = MockScope


/***/ }),

/***/ 5487:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { promisify } = __nccwpck_require__(9023)
const Pool = __nccwpck_require__(27)
const { buildMockDispatch } = __nccwpck_require__(7476)
const {
  kDispatches,
  kMockAgent,
  kClose,
  kOriginalClose,
  kOrigin,
  kOriginalDispatch,
  kConnected
} = __nccwpck_require__(7520)
const { MockInterceptor } = __nccwpck_require__(2542)
const Symbols = __nccwpck_require__(8136)
const { InvalidArgumentError } = __nccwpck_require__(5606)

/**
 * MockPool provides an API that extends the Pool to influence the mockDispatches.
 */
class MockPool extends Pool {
  constructor (origin, opts) {
    super(origin, opts)

    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {
      throw new InvalidArgumentError('Argument opts.agent must implement Agent')
    }

    this[kMockAgent] = opts.agent
    this[kOrigin] = origin
    this[kDispatches] = []
    this[kConnected] = 1
    this[kOriginalDispatch] = this.dispatch
    this[kOriginalClose] = this.close.bind(this)

    this.dispatch = buildMockDispatch.call(this)
    this.close = this[kClose]
  }

  get [Symbols.kConnected] () {
    return this[kConnected]
  }

  /**
   * Sets up the base interceptor for mocking replies from undici.
   */
  intercept (opts) {
    return new MockInterceptor(opts, this[kDispatches])
  }

  async [kClose] () {
    await promisify(this[kOriginalClose])()
    this[kConnected] = 0
    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])
  }
}

module.exports = MockPool


/***/ }),

/***/ 7520:
/***/ ((module) => {

"use strict";


module.exports = {
  kAgent: Symbol('agent'),
  kOptions: Symbol('options'),
  kFactory: Symbol('factory'),
  kDispatches: Symbol('dispatches'),
  kDispatchKey: Symbol('dispatch key'),
  kDefaultHeaders: Symbol('default headers'),
  kDefaultTrailers: Symbol('default trailers'),
  kContentLength: Symbol('content length'),
  kMockAgent: Symbol('mock agent'),
  kMockAgentSet: Symbol('mock agent set'),
  kMockAgentGet: Symbol('mock agent get'),
  kMockDispatch: Symbol('mock dispatch'),
  kClose: Symbol('close'),
  kOriginalClose: Symbol('original agent close'),
  kOrigin: Symbol('origin'),
  kIsMockActive: Symbol('is mock active'),
  kNetConnect: Symbol('net connect'),
  kGetNetConnect: Symbol('get net connect'),
  kConnected: Symbol('connected')
}


/***/ }),

/***/ 7476:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { MockNotMatchedError } = __nccwpck_require__(5198)
const {
  kDispatches,
  kMockAgent,
  kOriginalDispatch,
  kOrigin,
  kGetNetConnect
} = __nccwpck_require__(7520)
const { buildURL, nop } = __nccwpck_require__(7001)
const { STATUS_CODES } = __nccwpck_require__(8611)
const {
  types: {
    isPromise
  }
} = __nccwpck_require__(9023)

function matchValue (match, value) {
  if (typeof match === 'string') {
    return match === value
  }
  if (match instanceof RegExp) {
    return match.test(value)
  }
  if (typeof match === 'function') {
    return match(value) === true
  }
  return false
}

function lowerCaseEntries (headers) {
  return Object.fromEntries(
    Object.entries(headers).map(([headerName, headerValue]) => {
      return [headerName.toLocaleLowerCase(), headerValue]
    })
  )
}

/**
 * @param {import('../../index').Headers|string[]|Record<string, string>} headers
 * @param {string} key
 */
function getHeaderByName (headers, key) {
  if (Array.isArray(headers)) {
    for (let i = 0; i < headers.length; i += 2) {
      if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
        return headers[i + 1]
      }
    }

    return undefined
  } else if (typeof headers.get === 'function') {
    return headers.get(key)
  } else {
    return lowerCaseEntries(headers)[key.toLocaleLowerCase()]
  }
}

/** @param {string[]} headers */
function buildHeadersFromArray (headers) { // fetch HeadersList
  const clone = headers.slice()
  const entries = []
  for (let index = 0; index < clone.length; index += 2) {
    entries.push([clone[index], clone[index + 1]])
  }
  return Object.fromEntries(entries)
}

function matchHeaders (mockDispatch, headers) {
  if (typeof mockDispatch.headers === 'function') {
    if (Array.isArray(headers)) { // fetch HeadersList
      headers = buildHeadersFromArray(headers)
    }
    return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {})
  }
  if (typeof mockDispatch.headers === 'undefined') {
    return true
  }
  if (typeof headers !== 'object' || typeof mockDispatch.headers !== 'object') {
    return false
  }

  for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)) {
    const headerValue = getHeaderByName(headers, matchHeaderName)

    if (!matchValue(matchHeaderValue, headerValue)) {
      return false
    }
  }
  return true
}

function safeUrl (path) {
  if (typeof path !== 'string') {
    return path
  }

  const pathSegments = path.split('?')

  if (pathSegments.length !== 2) {
    return path
  }

  const qp = new URLSearchParams(pathSegments.pop())
  qp.sort()
  return [...pathSegments, qp.toString()].join('?')
}

function matchKey (mockDispatch, { path, method, body, headers }) {
  const pathMatch = matchValue(mockDispatch.path, path)
  const methodMatch = matchValue(mockDispatch.method, method)
  const bodyMatch = typeof mockDispatch.body !== 'undefined' ? matchValue(mockDispatch.body, body) : true
  const headersMatch = matchHeaders(mockDispatch, headers)
  return pathMatch && methodMatch && bodyMatch && headersMatch
}

function getResponseData (data) {
  if (Buffer.isBuffer(data)) {
    return data
  } else if (typeof data === 'object') {
    return JSON.stringify(data)
  } else {
    return data.toString()
  }
}

function getMockDispatch (mockDispatches, key) {
  const basePath = key.query ? buildURL(key.path, key.query) : key.path
  const resolvedPath = typeof basePath === 'string' ? safeUrl(basePath) : basePath

  // Match path
  let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`)
  }

  // Match method
  matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`)
  }

  // Match body
  matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== 'undefined' ? matchValue(body, key.body) : true)
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`)
  }

  // Match headers
  matchedMockDispatches = matchedMockDispatches.filter((mockDispatch) => matchHeaders(mockDispatch, key.headers))
  if (matchedMockDispatches.length === 0) {
    throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === 'object' ? JSON.stringify(key.headers) : key.headers}'`)
  }

  return matchedMockDispatches[0]
}

function addMockDispatch (mockDispatches, key, data) {
  const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false }
  const replyData = typeof data === 'function' ? { callback: data } : { ...data }
  const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } }
  mockDispatches.push(newMockDispatch)
  return newMockDispatch
}

function deleteMockDispatch (mockDispatches, key) {
  const index = mockDispatches.findIndex(dispatch => {
    if (!dispatch.consumed) {
      return false
    }
    return matchKey(dispatch, key)
  })
  if (index !== -1) {
    mockDispatches.splice(index, 1)
  }
}

function buildKey (opts) {
  const { path, method, body, headers, query } = opts
  return {
    path,
    method,
    body,
    headers,
    query
  }
}

function generateKeyValues (data) {
  return Object.entries(data).reduce((keyValuePairs, [key, value]) => [
    ...keyValuePairs,
    Buffer.from(`${key}`),
    Array.isArray(value) ? value.map(x => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
  ], [])
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
 * @param {number} statusCode
 */
function getStatusText (statusCode) {
  return STATUS_CODES[statusCode] || 'unknown'
}

async function getResponse (body) {
  const buffers = []
  for await (const data of body) {
    buffers.push(data)
  }
  return Buffer.concat(buffers).toString('utf8')
}

/**
 * Mock dispatch function used to simulate undici dispatches
 */
function mockDispatch (opts, handler) {
  // Get mock dispatch from built key
  const key = buildKey(opts)
  const mockDispatch = getMockDispatch(this[kDispatches], key)

  mockDispatch.timesInvoked++

  // Here's where we resolve a callback if a callback is present for the dispatch data.
  if (mockDispatch.data.callback) {
    mockDispatch.data = { ...mockDispatch.data, ...mockDispatch.data.callback(opts) }
  }

  // Parse mockDispatch data
  const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch
  const { timesInvoked, times } = mockDispatch

  // If it's used up and not persistent, mark as consumed
  mockDispatch.consumed = !persist && timesInvoked >= times
  mockDispatch.pending = timesInvoked < times

  // If specified, trigger dispatch error
  if (error !== null) {
    deleteMockDispatch(this[kDispatches], key)
    handler.onError(error)
    return true
  }

  // Handle the request with a delay if necessary
  if (typeof delay === 'number' && delay > 0) {
    setTimeout(() => {
      handleReply(this[kDispatches])
    }, delay)
  } else {
    handleReply(this[kDispatches])
  }

  function handleReply (mockDispatches, _data = data) {
    // fetch's HeadersList is a 1D string array
    const optsHeaders = Array.isArray(opts.headers)
      ? buildHeadersFromArray(opts.headers)
      : opts.headers
    const body = typeof _data === 'function'
      ? _data({ ...opts, headers: optsHeaders })
      : _data

    // util.types.isPromise is likely needed for jest.
    if (isPromise(body)) {
      // If handleReply is asynchronous, throwing an error
      // in the callback will reject the promise, rather than
      // synchronously throw the error, which breaks some tests.
      // Rather, we wait for the callback to resolve if it is a
      // promise, and then re-run handleReply with the new body.
      body.then((newData) => handleReply(mockDispatches, newData))
      return
    }

    const responseData = getResponseData(body)
    const responseHeaders = generateKeyValues(headers)
    const responseTrailers = generateKeyValues(trailers)

    handler.abort = nop
    handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode))
    handler.onData(Buffer.from(responseData))
    handler.onComplete(responseTrailers)
    deleteMockDispatch(mockDispatches, key)
  }

  function resume () {}

  return true
}

function buildMockDispatch () {
  const agent = this[kMockAgent]
  const origin = this[kOrigin]
  const originalDispatch = this[kOriginalDispatch]

  return function dispatch (opts, handler) {
    if (agent.isMockActive) {
      try {
        mockDispatch.call(this, opts, handler)
      } catch (error) {
        if (error instanceof MockNotMatchedError) {
          const netConnect = agent[kGetNetConnect]()
          if (netConnect === false) {
            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`)
          }
          if (checkNetConnect(netConnect, origin)) {
            originalDispatch.call(this, opts, handler)
          } else {
            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`)
          }
        } else {
          throw error
        }
      }
    } else {
      originalDispatch.call(this, opts, handler)
    }
  }
}

function checkNetConnect (netConnect, origin) {
  const url = new URL(origin)
  if (netConnect === true) {
    return true
  } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
    return true
  }
  return false
}

function buildMockOptions (opts) {
  if (opts) {
    const { agent, ...mockOptions } = opts
    return mockOptions
  }
}

module.exports = {
  getResponseData,
  getMockDispatch,
  addMockDispatch,
  deleteMockDispatch,
  buildKey,
  generateKeyValues,
  matchValue,
  getResponse,
  getStatusText,
  mockDispatch,
  buildMockDispatch,
  checkNetConnect,
  buildMockOptions,
  getHeaderByName
}


/***/ }),

/***/ 179:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Transform } = __nccwpck_require__(2203)
const { Console } = __nccwpck_require__(4236)

/**
 * Gets the output of `console.table(…)` as a string.
 */
module.exports = class PendingInterceptorsFormatter {
  constructor ({ disableColors } = {}) {
    this.transform = new Transform({
      transform (chunk, _enc, cb) {
        cb(null, chunk)
      }
    })

    this.logger = new Console({
      stdout: this.transform,
      inspectOptions: {
        colors: !disableColors && !process.env.CI
      }
    })
  }

  format (pendingInterceptors) {
    const withPrettyHeaders = pendingInterceptors.map(
      ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
        Method: method,
        Origin: origin,
        Path: path,
        'Status code': statusCode,
        Persistent: persist ? '✅' : '❌',
        Invocations: timesInvoked,
        Remaining: persist ? Infinity : times - timesInvoked
      }))

    this.logger.table(withPrettyHeaders)
    return this.transform.read().toString()
  }
}


/***/ }),

/***/ 4020:
/***/ ((module) => {

"use strict";


const singulars = {
  pronoun: 'it',
  is: 'is',
  was: 'was',
  this: 'this'
}

const plurals = {
  pronoun: 'they',
  is: 'are',
  was: 'were',
  this: 'these'
}

module.exports = class Pluralizer {
  constructor (singular, plural) {
    this.singular = singular
    this.plural = plural
  }

  pluralize (count) {
    const one = count === 1
    const keys = one ? singulars : plurals
    const noun = one ? this.singular : this.plural
    return { ...keys, count, noun }
  }
}


/***/ }),

/***/ 3302:
/***/ ((module) => {

"use strict";
/* eslint-disable */



// Extracted from node/lib/internal/fixed_queue.js

// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.
const kSize = 2048;
const kMask = kSize - 1;

// The FixedQueue is implemented as a singly-linked list of fixed-size
// circular buffers. It looks something like this:
//
//  head                                                       tail
//    |                                                          |
//    v                                                          v
// +-----------+ <-----\       +-----------+ <------\         +-----------+
// |  [null]   |        \----- |   next    |         \------- |   next    |
// +-----------+               +-----------+                  +-----------+
// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |                  |  [empty]  |
// |   item    |               |   item    |       bottom --> |   item    |
// |   item    |               |   item    |                  |   item    |
// |    ...    |               |    ...    |                  |    ...    |
// |   item    |               |   item    |                  |   item    |
// |   item    |               |   item    |                  |   item    |
// |  [empty]  | <-- top       |   item    |                  |   item    |
// |  [empty]  |               |   item    |                  |   item    |
// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |
// +-----------+               +-----------+                  +-----------+
//
// Or, if there is only one circular buffer, it looks something
// like either of these:
//
//  head   tail                                 head   tail
//    |     |                                     |     |
//    v     v                                     v     v
// +-----------+                               +-----------+
// |  [null]   |                               |  [null]   |
// +-----------+                               +-----------+
// |  [empty]  |                               |   item    |
// |  [empty]  |                               |   item    |
// |   item    | <-- bottom            top --> |  [empty]  |
// |   item    |                               |  [empty]  |
// |  [empty]  | <-- top            bottom --> |   item    |
// |  [empty]  |                               |   item    |
// +-----------+                               +-----------+
//
// Adding a value means moving `top` forward by one, removing means
// moving `bottom` forward by one. After reaching the end, the queue
// wraps around.
//
// When `top === bottom` the current queue is empty and when
// `top + 1 === bottom` it's full. This wastes a single space of storage
// but allows much quicker checks.

class FixedCircularBuffer {
  constructor() {
    this.bottom = 0;
    this.top = 0;
    this.list = new Array(kSize);
    this.next = null;
  }

  isEmpty() {
    return this.top === this.bottom;
  }

  isFull() {
    return ((this.top + 1) & kMask) === this.bottom;
  }

  push(data) {
    this.list[this.top] = data;
    this.top = (this.top + 1) & kMask;
  }

  shift() {
    const nextItem = this.list[this.bottom];
    if (nextItem === undefined)
      return null;
    this.list[this.bottom] = undefined;
    this.bottom = (this.bottom + 1) & kMask;
    return nextItem;
  }
}

module.exports = class FixedQueue {
  constructor() {
    this.head = this.tail = new FixedCircularBuffer();
  }

  isEmpty() {
    return this.head.isEmpty();
  }

  push(data) {
    if (this.head.isFull()) {
      // Head is full: Creates a new queue, sets the old queue's `.next` to it,
      // and sets it as the new main queue.
      this.head = this.head.next = new FixedCircularBuffer();
    }
    this.head.push(data);
  }

  shift() {
    const tail = this.tail;
    const next = tail.shift();
    if (tail.isEmpty() && tail.next !== null) {
      // If there is another queue, it forms the new tail.
      this.tail = tail.next;
    }
    return next;
  }
};


/***/ }),

/***/ 4633:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const DispatcherBase = __nccwpck_require__(4219)
const FixedQueue = __nccwpck_require__(3302)
const { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = __nccwpck_require__(8136)
const PoolStats = __nccwpck_require__(3238)

const kClients = Symbol('clients')
const kNeedDrain = Symbol('needDrain')
const kQueue = Symbol('queue')
const kClosedResolve = Symbol('closed resolve')
const kOnDrain = Symbol('onDrain')
const kOnConnect = Symbol('onConnect')
const kOnDisconnect = Symbol('onDisconnect')
const kOnConnectionError = Symbol('onConnectionError')
const kGetDispatcher = Symbol('get dispatcher')
const kAddClient = Symbol('add client')
const kRemoveClient = Symbol('remove client')
const kStats = Symbol('stats')

class PoolBase extends DispatcherBase {
  constructor () {
    super()

    this[kQueue] = new FixedQueue()
    this[kClients] = []
    this[kQueued] = 0

    const pool = this

    this[kOnDrain] = function onDrain (origin, targets) {
      const queue = pool[kQueue]

      let needDrain = false

      while (!needDrain) {
        const item = queue.shift()
        if (!item) {
          break
        }
        pool[kQueued]--
        needDrain = !this.dispatch(item.opts, item.handler)
      }

      this[kNeedDrain] = needDrain

      if (!this[kNeedDrain] && pool[kNeedDrain]) {
        pool[kNeedDrain] = false
        pool.emit('drain', origin, [pool, ...targets])
      }

      if (pool[kClosedResolve] && queue.isEmpty()) {
        Promise
          .all(pool[kClients].map(c => c.close()))
          .then(pool[kClosedResolve])
      }
    }

    this[kOnConnect] = (origin, targets) => {
      pool.emit('connect', origin, [pool, ...targets])
    }

    this[kOnDisconnect] = (origin, targets, err) => {
      pool.emit('disconnect', origin, [pool, ...targets], err)
    }

    this[kOnConnectionError] = (origin, targets, err) => {
      pool.emit('connectionError', origin, [pool, ...targets], err)
    }

    this[kStats] = new PoolStats(this)
  }

  get [kBusy] () {
    return this[kNeedDrain]
  }

  get [kConnected] () {
    return this[kClients].filter(client => client[kConnected]).length
  }

  get [kFree] () {
    return this[kClients].filter(client => client[kConnected] && !client[kNeedDrain]).length
  }

  get [kPending] () {
    let ret = this[kQueued]
    for (const { [kPending]: pending } of this[kClients]) {
      ret += pending
    }
    return ret
  }

  get [kRunning] () {
    let ret = 0
    for (const { [kRunning]: running } of this[kClients]) {
      ret += running
    }
    return ret
  }

  get [kSize] () {
    let ret = this[kQueued]
    for (const { [kSize]: size } of this[kClients]) {
      ret += size
    }
    return ret
  }

  get stats () {
    return this[kStats]
  }

  async [kClose] () {
    if (this[kQueue].isEmpty()) {
      return Promise.all(this[kClients].map(c => c.close()))
    } else {
      return new Promise((resolve) => {
        this[kClosedResolve] = resolve
      })
    }
  }

  async [kDestroy] (err) {
    while (true) {
      const item = this[kQueue].shift()
      if (!item) {
        break
      }
      item.handler.onError(err)
    }

    return Promise.all(this[kClients].map(c => c.destroy(err)))
  }

  [kDispatch] (opts, handler) {
    const dispatcher = this[kGetDispatcher]()

    if (!dispatcher) {
      this[kNeedDrain] = true
      this[kQueue].push({ opts, handler })
      this[kQueued]++
    } else if (!dispatcher.dispatch(opts, handler)) {
      dispatcher[kNeedDrain] = true
      this[kNeedDrain] = !this[kGetDispatcher]()
    }

    return !this[kNeedDrain]
  }

  [kAddClient] (client) {
    client
      .on('drain', this[kOnDrain])
      .on('connect', this[kOnConnect])
      .on('disconnect', this[kOnDisconnect])
      .on('connectionError', this[kOnConnectionError])

    this[kClients].push(client)

    if (this[kNeedDrain]) {
      process.nextTick(() => {
        if (this[kNeedDrain]) {
          this[kOnDrain](client[kUrl], [this, client])
        }
      })
    }

    return this
  }

  [kRemoveClient] (client) {
    client.close(() => {
      const idx = this[kClients].indexOf(client)
      if (idx !== -1) {
        this[kClients].splice(idx, 1)
      }
    })

    this[kNeedDrain] = this[kClients].some(dispatcher => (
      !dispatcher[kNeedDrain] &&
      dispatcher.closed !== true &&
      dispatcher.destroyed !== true
    ))
  }
}

module.exports = {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kRemoveClient,
  kGetDispatcher
}


/***/ }),

/***/ 3238:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

const { kFree, kConnected, kPending, kQueued, kRunning, kSize } = __nccwpck_require__(8136)
const kPool = Symbol('pool')

class PoolStats {
  constructor (pool) {
    this[kPool] = pool
  }

  get connected () {
    return this[kPool][kConnected]
  }

  get free () {
    return this[kPool][kFree]
  }

  get pending () {
    return this[kPool][kPending]
  }

  get queued () {
    return this[kPool][kQueued]
  }

  get running () {
    return this[kPool][kRunning]
  }

  get size () {
    return this[kPool][kSize]
  }
}

module.exports = PoolStats


/***/ }),

/***/ 27:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const {
  PoolBase,
  kClients,
  kNeedDrain,
  kAddClient,
  kGetDispatcher
} = __nccwpck_require__(4633)
const Client = __nccwpck_require__(3894)
const {
  InvalidArgumentError
} = __nccwpck_require__(5606)
const util = __nccwpck_require__(7001)
const { kUrl, kInterceptors } = __nccwpck_require__(8136)
const buildConnector = __nccwpck_require__(863)

const kOptions = Symbol('options')
const kConnections = Symbol('connections')
const kFactory = Symbol('factory')

function defaultFactory (origin, opts) {
  return new Client(origin, opts)
}

class Pool extends PoolBase {
  constructor (origin, {
    connections,
    factory = defaultFactory,
    connect,
    connectTimeout,
    tls,
    maxCachedSessions,
    socketPath,
    autoSelectFamily,
    autoSelectFamilyAttemptTimeout,
    allowH2,
    ...options
  } = {}) {
    super()

    if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
      throw new InvalidArgumentError('invalid connections')
    }

    if (typeof factory !== 'function') {
      throw new InvalidArgumentError('factory must be a function.')
    }

    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {
      throw new InvalidArgumentError('connect must be a function or an object')
    }

    if (typeof connect !== 'function') {
      connect = buildConnector({
        ...tls,
        maxCachedSessions,
        allowH2,
        socketPath,
        timeout: connectTimeout,
        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),
        ...connect
      })
    }

    this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool)
      ? options.interceptors.Pool
      : []
    this[kConnections] = connections || null
    this[kUrl] = util.parseOrigin(origin)
    this[kOptions] = { ...util.deepClone(options), connect, allowH2 }
    this[kOptions].interceptors = options.interceptors
      ? { ...options.interceptors }
      : undefined
    this[kFactory] = factory

    this.on('connectionError', (origin, targets, error) => {
      // If a connection error occurs, we remove the client from the pool,
      // and emit a connectionError event. They will not be re-used.
      // Fixes https://github.com/nodejs/undici/issues/3895
      for (const target of targets) {
        // Do not use kRemoveClient here, as it will close the client,
        // but the client cannot be closed in this state.
        const idx = this[kClients].indexOf(target)
        if (idx !== -1) {
          this[kClients].splice(idx, 1)
        }
      }
    })
  }

  [kGetDispatcher] () {
    let dispatcher = this[kClients].find(dispatcher => !dispatcher[kNeedDrain])

    if (dispatcher) {
      return dispatcher
    }

    if (!this[kConnections] || this[kClients].length < this[kConnections]) {
      dispatcher = this[kFactory](this[kUrl], this[kOptions])
      this[kAddClient](dispatcher)
    }

    return dispatcher
  }
}

module.exports = Pool


/***/ }),

/***/ 7025:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kProxy, kClose, kDestroy, kInterceptors } = __nccwpck_require__(8136)
const { URL } = __nccwpck_require__(7016)
const Agent = __nccwpck_require__(8256)
const Pool = __nccwpck_require__(27)
const DispatcherBase = __nccwpck_require__(4219)
const { InvalidArgumentError, RequestAbortedError } = __nccwpck_require__(5606)
const buildConnector = __nccwpck_require__(863)

const kAgent = Symbol('proxy agent')
const kClient = Symbol('proxy client')
const kProxyHeaders = Symbol('proxy headers')
const kRequestTls = Symbol('request tls settings')
const kProxyTls = Symbol('proxy tls settings')
const kConnectEndpoint = Symbol('connect endpoint function')

function defaultProtocolPort (protocol) {
  return protocol === 'https:' ? 443 : 80
}

function buildProxyOptions (opts) {
  if (typeof opts === 'string') {
    opts = { uri: opts }
  }

  if (!opts || !opts.uri) {
    throw new InvalidArgumentError('Proxy opts.uri is mandatory')
  }

  return {
    uri: opts.uri,
    protocol: opts.protocol || 'https'
  }
}

function defaultFactory (origin, opts) {
  return new Pool(origin, opts)
}

class ProxyAgent extends DispatcherBase {
  constructor (opts) {
    super(opts)
    this[kProxy] = buildProxyOptions(opts)
    this[kAgent] = new Agent(opts)
    this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent)
      ? opts.interceptors.ProxyAgent
      : []

    if (typeof opts === 'string') {
      opts = { uri: opts }
    }

    if (!opts || !opts.uri) {
      throw new InvalidArgumentError('Proxy opts.uri is mandatory')
    }

    const { clientFactory = defaultFactory } = opts

    if (typeof clientFactory !== 'function') {
      throw new InvalidArgumentError('Proxy opts.clientFactory must be a function.')
    }

    this[kRequestTls] = opts.requestTls
    this[kProxyTls] = opts.proxyTls
    this[kProxyHeaders] = opts.headers || {}

    const resolvedUrl = new URL(opts.uri)
    const { origin, port, host, username, password } = resolvedUrl

    if (opts.auth && opts.token) {
      throw new InvalidArgumentError('opts.auth cannot be used in combination with opts.token')
    } else if (opts.auth) {
      /* @deprecated in favour of opts.token */
      this[kProxyHeaders]['proxy-authorization'] = `Basic ${opts.auth}`
    } else if (opts.token) {
      this[kProxyHeaders]['proxy-authorization'] = opts.token
    } else if (username && password) {
      this[kProxyHeaders]['proxy-authorization'] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString('base64')}`
    }

    const connect = buildConnector({ ...opts.proxyTls })
    this[kConnectEndpoint] = buildConnector({ ...opts.requestTls })
    this[kClient] = clientFactory(resolvedUrl, { connect })
    this[kAgent] = new Agent({
      ...opts,
      connect: async (opts, callback) => {
        let requestedHost = opts.host
        if (!opts.port) {
          requestedHost += `:${defaultProtocolPort(opts.protocol)}`
        }
        try {
          const { socket, statusCode } = await this[kClient].connect({
            origin,
            port,
            path: requestedHost,
            signal: opts.signal,
            headers: {
              ...this[kProxyHeaders],
              host
            }
          })
          if (statusCode !== 200) {
            socket.on('error', () => {}).destroy()
            callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`))
          }
          if (opts.protocol !== 'https:') {
            callback(null, socket)
            return
          }
          let servername
          if (this[kRequestTls]) {
            servername = this[kRequestTls].servername
          } else {
            servername = opts.servername
          }
          this[kConnectEndpoint]({ ...opts, servername, httpSocket: socket }, callback)
        } catch (err) {
          callback(err)
        }
      }
    })
  }

  dispatch (opts, handler) {
    const { host } = new URL(opts.origin)
    const headers = buildHeaders(opts.headers)
    throwIfProxyAuthIsSent(headers)
    return this[kAgent].dispatch(
      {
        ...opts,
        headers: {
          ...headers,
          host
        }
      },
      handler
    )
  }

  async [kClose] () {
    await this[kAgent].close()
    await this[kClient].close()
  }

  async [kDestroy] () {
    await this[kAgent].destroy()
    await this[kClient].destroy()
  }
}

/**
 * @param {string[] | Record<string, string>} headers
 * @returns {Record<string, string>}
 */
function buildHeaders (headers) {
  // When using undici.fetch, the headers list is stored
  // as an array.
  if (Array.isArray(headers)) {
    /** @type {Record<string, string>} */
    const headersPair = {}

    for (let i = 0; i < headers.length; i += 2) {
      headersPair[headers[i]] = headers[i + 1]
    }

    return headersPair
  }

  return headers
}

/**
 * @param {Record<string, string>} headers
 *
 * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
 * Nevertheless, it was changed and to avoid a security vulnerability by end users
 * this check was created.
 * It should be removed in the next major version for performance reasons
 */
function throwIfProxyAuthIsSent (headers) {
  const existProxyAuth = headers && Object.keys(headers)
    .find((key) => key.toLowerCase() === 'proxy-authorization')
  if (existProxyAuth) {
    throw new InvalidArgumentError('Proxy-Authorization should be sent in ProxyAgent constructor')
  }
}

module.exports = ProxyAgent


/***/ }),

/***/ 955:
/***/ ((module) => {

"use strict";


let fastNow = Date.now()
let fastNowTimeout

const fastTimers = []

function onTimeout () {
  fastNow = Date.now()

  let len = fastTimers.length
  let idx = 0
  while (idx < len) {
    const timer = fastTimers[idx]

    if (timer.state === 0) {
      timer.state = fastNow + timer.delay
    } else if (timer.state > 0 && fastNow >= timer.state) {
      timer.state = -1
      timer.callback(timer.opaque)
    }

    if (timer.state === -1) {
      timer.state = -2
      if (idx !== len - 1) {
        fastTimers[idx] = fastTimers.pop()
      } else {
        fastTimers.pop()
      }
      len -= 1
    } else {
      idx += 1
    }
  }

  if (fastTimers.length > 0) {
    refreshTimeout()
  }
}

function refreshTimeout () {
  if (fastNowTimeout && fastNowTimeout.refresh) {
    fastNowTimeout.refresh()
  } else {
    clearTimeout(fastNowTimeout)
    fastNowTimeout = setTimeout(onTimeout, 1e3)
    if (fastNowTimeout.unref) {
      fastNowTimeout.unref()
    }
  }
}

class Timeout {
  constructor (callback, delay, opaque) {
    this.callback = callback
    this.delay = delay
    this.opaque = opaque

    //  -2 not in timer list
    //  -1 in timer list but inactive
    //   0 in timer list waiting for time
    // > 0 in timer list waiting for time to expire
    this.state = -2

    this.refresh()
  }

  refresh () {
    if (this.state === -2) {
      fastTimers.push(this)
      if (!fastNowTimeout || fastTimers.length === 1) {
        refreshTimeout()
      }
    }

    this.state = 0
  }

  clear () {
    this.state = -1
  }
}

module.exports = {
  setTimeout (callback, delay, opaque) {
    return delay < 1e3
      ? setTimeout(callback, delay, opaque)
      : new Timeout(callback, delay, opaque)
  },
  clearTimeout (timeout) {
    if (timeout instanceof Timeout) {
      timeout.clear()
    } else {
      clearTimeout(timeout)
    }
  }
}


/***/ }),

/***/ 9017:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const diagnosticsChannel = __nccwpck_require__(1637)
const { uid, states } = __nccwpck_require__(3640)
const {
  kReadyState,
  kSentClose,
  kByteParser,
  kReceivedClose
} = __nccwpck_require__(8840)
const { fireEvent, failWebsocketConnection } = __nccwpck_require__(7433)
const { CloseEvent } = __nccwpck_require__(2316)
const { makeRequest } = __nccwpck_require__(7591)
const { fetching } = __nccwpck_require__(22)
const { Headers } = __nccwpck_require__(6396)
const { getGlobalDispatcher } = __nccwpck_require__(6762)
const { kHeadersList } = __nccwpck_require__(8136)

const channels = {}
channels.open = diagnosticsChannel.channel('undici:websocket:open')
channels.close = diagnosticsChannel.channel('undici:websocket:close')
channels.socketError = diagnosticsChannel.channel('undici:websocket:socket_error')

/** @type {import('crypto')} */
let crypto
try {
  crypto = __nccwpck_require__(6982)
} catch {

}

/**
 * @see https://websockets.spec.whatwg.org/#concept-websocket-establish
 * @param {URL} url
 * @param {string|string[]} protocols
 * @param {import('./websocket').WebSocket} ws
 * @param {(response: any) => void} onEstablish
 * @param {Partial<import('../../types/websocket').WebSocketInit>} options
 */
function establishWebSocketConnection (url, protocols, ws, onEstablish, options) {
  // 1. Let requestURL be a copy of url, with its scheme set to "http", if url’s
  //    scheme is "ws", and to "https" otherwise.
  const requestURL = url

  requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:'

  // 2. Let request be a new request, whose URL is requestURL, client is client,
  //    service-workers mode is "none", referrer is "no-referrer", mode is
  //    "websocket", credentials mode is "include", cache mode is "no-store" ,
  //    and redirect mode is "error".
  const request = makeRequest({
    urlList: [requestURL],
    serviceWorkers: 'none',
    referrer: 'no-referrer',
    mode: 'websocket',
    credentials: 'include',
    cache: 'no-store',
    redirect: 'error'
  })

  // Note: undici extension, allow setting custom headers.
  if (options.headers) {
    const headersList = new Headers(options.headers)[kHeadersList]

    request.headersList = headersList
  }

  // 3. Append (`Upgrade`, `websocket`) to request’s header list.
  // 4. Append (`Connection`, `Upgrade`) to request’s header list.
  // Note: both of these are handled by undici currently.
  // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397

  // 5. Let keyValue be a nonce consisting of a randomly selected
  //    16-byte value that has been forgiving-base64-encoded and
  //    isomorphic encoded.
  const keyValue = crypto.randomBytes(16).toString('base64')

  // 6. Append (`Sec-WebSocket-Key`, keyValue) to request’s
  //    header list.
  request.headersList.append('sec-websocket-key', keyValue)

  // 7. Append (`Sec-WebSocket-Version`, `13`) to request’s
  //    header list.
  request.headersList.append('sec-websocket-version', '13')

  // 8. For each protocol in protocols, combine
  //    (`Sec-WebSocket-Protocol`, protocol) in request’s header
  //    list.
  for (const protocol of protocols) {
    request.headersList.append('sec-websocket-protocol', protocol)
  }

  // 9. Let permessageDeflate be a user-agent defined
  //    "permessage-deflate" extension header value.
  // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673
  // TODO: enable once permessage-deflate is supported
  const permessageDeflate = '' // 'permessage-deflate; 15'

  // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to
  //     request’s header list.
  // request.headersList.append('sec-websocket-extensions', permessageDeflate)

  // 11. Fetch request with useParallelQueue set to true, and
  //     processResponse given response being these steps:
  const controller = fetching({
    request,
    useParallelQueue: true,
    dispatcher: options.dispatcher ?? getGlobalDispatcher(),
    processResponse (response) {
      // 1. If response is a network error or its status is not 101,
      //    fail the WebSocket connection.
      if (response.type === 'error' || response.status !== 101) {
        failWebsocketConnection(ws, 'Received network error or non-101 status code.')
        return
      }

      // 2. If protocols is not the empty list and extracting header
      //    list values given `Sec-WebSocket-Protocol` and response’s
      //    header list results in null, failure, or the empty byte
      //    sequence, then fail the WebSocket connection.
      if (protocols.length !== 0 && !response.headersList.get('Sec-WebSocket-Protocol')) {
        failWebsocketConnection(ws, 'Server did not respond with sent protocols.')
        return
      }

      // 3. Follow the requirements stated step 2 to step 6, inclusive,
      //    of the last set of steps in section 4.1 of The WebSocket
      //    Protocol to validate response. This either results in fail
      //    the WebSocket connection or the WebSocket connection is
      //    established.

      // 2. If the response lacks an |Upgrade| header field or the |Upgrade|
      //    header field contains a value that is not an ASCII case-
      //    insensitive match for the value "websocket", the client MUST
      //    _Fail the WebSocket Connection_.
      if (response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {
        failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".')
        return
      }

      // 3. If the response lacks a |Connection| header field or the
      //    |Connection| header field doesn't contain a token that is an
      //    ASCII case-insensitive match for the value "Upgrade", the client
      //    MUST _Fail the WebSocket Connection_.
      if (response.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {
        failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".')
        return
      }

      // 4. If the response lacks a |Sec-WebSocket-Accept| header field or
      //    the |Sec-WebSocket-Accept| contains a value other than the
      //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-
      //    Key| (as a string, not base64-decoded) with the string "258EAFA5-
      //    E914-47DA-95CA-C5AB0DC85B11" but ignoring any leading and
      //    trailing whitespace, the client MUST _Fail the WebSocket
      //    Connection_.
      const secWSAccept = response.headersList.get('Sec-WebSocket-Accept')
      const digest = crypto.createHash('sha1').update(keyValue + uid).digest('base64')
      if (secWSAccept !== digest) {
        failWebsocketConnection(ws, 'Incorrect hash received in Sec-WebSocket-Accept header.')
        return
      }

      // 5. If the response includes a |Sec-WebSocket-Extensions| header
      //    field and this header field indicates the use of an extension
      //    that was not present in the client's handshake (the server has
      //    indicated an extension not requested by the client), the client
      //    MUST _Fail the WebSocket Connection_.  (The parsing of this
      //    header field to determine which extensions are requested is
      //    discussed in Section 9.1.)
      const secExtension = response.headersList.get('Sec-WebSocket-Extensions')

      if (secExtension !== null && secExtension !== permessageDeflate) {
        failWebsocketConnection(ws, 'Received different permessage-deflate than the one set.')
        return
      }

      // 6. If the response includes a |Sec-WebSocket-Protocol| header field
      //    and this header field indicates the use of a subprotocol that was
      //    not present in the client's handshake (the server has indicated a
      //    subprotocol not requested by the client), the client MUST _Fail
      //    the WebSocket Connection_.
      const secProtocol = response.headersList.get('Sec-WebSocket-Protocol')

      if (secProtocol !== null && secProtocol !== request.headersList.get('Sec-WebSocket-Protocol')) {
        failWebsocketConnection(ws, 'Protocol was not set in the opening handshake.')
        return
      }

      response.socket.on('data', onSocketData)
      response.socket.on('close', onSocketClose)
      response.socket.on('error', onSocketError)

      if (channels.open.hasSubscribers) {
        channels.open.publish({
          address: response.socket.address(),
          protocol: secProtocol,
          extensions: secExtension
        })
      }

      onEstablish(response)
    }
  })

  return controller
}

/**
 * @param {Buffer} chunk
 */
function onSocketData (chunk) {
  if (!this.ws[kByteParser].write(chunk)) {
    this.pause()
  }
}

/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
 */
function onSocketClose () {
  const { ws } = this

  // If the TCP connection was closed after the
  // WebSocket closing handshake was completed, the WebSocket connection
  // is said to have been closed _cleanly_.
  const wasClean = ws[kSentClose] && ws[kReceivedClose]

  let code = 1005
  let reason = ''

  const result = ws[kByteParser].closingInfo

  if (result) {
    code = result.code ?? 1005
    reason = result.reason
  } else if (!ws[kSentClose]) {
    // If _The WebSocket
    // Connection is Closed_ and no Close control frame was received by the
    // endpoint (such as could occur if the underlying transport connection
    // is lost), _The WebSocket Connection Close Code_ is considered to be
    // 1006.
    code = 1006
  }

  // 1. Change the ready state to CLOSED (3).
  ws[kReadyState] = states.CLOSED

  // 2. If the user agent was required to fail the WebSocket
  //    connection, or if the WebSocket connection was closed
  //    after being flagged as full, fire an event named error
  //    at the WebSocket object.
  // TODO

  // 3. Fire an event named close at the WebSocket object,
  //    using CloseEvent, with the wasClean attribute
  //    initialized to true if the connection closed cleanly
  //    and false otherwise, the code attribute initialized to
  //    the WebSocket connection close code, and the reason
  //    attribute initialized to the result of applying UTF-8
  //    decode without BOM to the WebSocket connection close
  //    reason.
  fireEvent('close', ws, CloseEvent, {
    wasClean, code, reason
  })

  if (channels.close.hasSubscribers) {
    channels.close.publish({
      websocket: ws,
      code,
      reason
    })
  }
}

function onSocketError (error) {
  const { ws } = this

  ws[kReadyState] = states.CLOSING

  if (channels.socketError.hasSubscribers) {
    channels.socketError.publish(error)
  }

  this.destroy()
}

module.exports = {
  establishWebSocketConnection
}


/***/ }),

/***/ 3640:
/***/ ((module) => {

"use strict";


// This is a Globally Unique Identifier unique used
// to validate that the endpoint accepts websocket
// connections.
// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3
const uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'

/** @type {PropertyDescriptor} */
const staticPropertyDescriptors = {
  enumerable: true,
  writable: false,
  configurable: false
}

const states = {
  CONNECTING: 0,
  OPEN: 1,
  CLOSING: 2,
  CLOSED: 3
}

const opcodes = {
  CONTINUATION: 0x0,
  TEXT: 0x1,
  BINARY: 0x2,
  CLOSE: 0x8,
  PING: 0x9,
  PONG: 0xA
}

const maxUnsigned16Bit = 2 ** 16 - 1 // 65535

const parserStates = {
  INFO: 0,
  PAYLOADLENGTH_16: 2,
  PAYLOADLENGTH_64: 3,
  READ_DATA: 4
}

const emptyBuffer = Buffer.allocUnsafe(0)

module.exports = {
  uid,
  staticPropertyDescriptors,
  states,
  opcodes,
  maxUnsigned16Bit,
  parserStates,
  emptyBuffer
}


/***/ }),

/***/ 2316:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { webidl } = __nccwpck_require__(1677)
const { kEnumerableProperty } = __nccwpck_require__(7001)
const { MessagePort } = __nccwpck_require__(8167)

/**
 * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
 */
class MessageEvent extends Event {
  #eventInit

  constructor (type, eventInitDict = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent constructor' })

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.MessageEventInit(eventInitDict)

    super(type, eventInitDict)

    this.#eventInit = eventInitDict
  }

  get data () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.data
  }

  get origin () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.origin
  }

  get lastEventId () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.lastEventId
  }

  get source () {
    webidl.brandCheck(this, MessageEvent)

    return this.#eventInit.source
  }

  get ports () {
    webidl.brandCheck(this, MessageEvent)

    if (!Object.isFrozen(this.#eventInit.ports)) {
      Object.freeze(this.#eventInit.ports)
    }

    return this.#eventInit.ports
  }

  initMessageEvent (
    type,
    bubbles = false,
    cancelable = false,
    data = null,
    origin = '',
    lastEventId = '',
    source = null,
    ports = []
  ) {
    webidl.brandCheck(this, MessageEvent)

    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent.initMessageEvent' })

    return new MessageEvent(type, {
      bubbles, cancelable, data, origin, lastEventId, source, ports
    })
  }
}

/**
 * @see https://websockets.spec.whatwg.org/#the-closeevent-interface
 */
class CloseEvent extends Event {
  #eventInit

  constructor (type, eventInitDict = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'CloseEvent constructor' })

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.CloseEventInit(eventInitDict)

    super(type, eventInitDict)

    this.#eventInit = eventInitDict
  }

  get wasClean () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.wasClean
  }

  get code () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.code
  }

  get reason () {
    webidl.brandCheck(this, CloseEvent)

    return this.#eventInit.reason
  }
}

// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface
class ErrorEvent extends Event {
  #eventInit

  constructor (type, eventInitDict) {
    webidl.argumentLengthCheck(arguments, 1, { header: 'ErrorEvent constructor' })

    super(type, eventInitDict)

    type = webidl.converters.DOMString(type)
    eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {})

    this.#eventInit = eventInitDict
  }

  get message () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.message
  }

  get filename () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.filename
  }

  get lineno () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.lineno
  }

  get colno () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.colno
  }

  get error () {
    webidl.brandCheck(this, ErrorEvent)

    return this.#eventInit.error
  }
}

Object.defineProperties(MessageEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'MessageEvent',
    configurable: true
  },
  data: kEnumerableProperty,
  origin: kEnumerableProperty,
  lastEventId: kEnumerableProperty,
  source: kEnumerableProperty,
  ports: kEnumerableProperty,
  initMessageEvent: kEnumerableProperty
})

Object.defineProperties(CloseEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'CloseEvent',
    configurable: true
  },
  reason: kEnumerableProperty,
  code: kEnumerableProperty,
  wasClean: kEnumerableProperty
})

Object.defineProperties(ErrorEvent.prototype, {
  [Symbol.toStringTag]: {
    value: 'ErrorEvent',
    configurable: true
  },
  message: kEnumerableProperty,
  filename: kEnumerableProperty,
  lineno: kEnumerableProperty,
  colno: kEnumerableProperty,
  error: kEnumerableProperty
})

webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort)

webidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(
  webidl.converters.MessagePort
)

const eventInit = [
  {
    key: 'bubbles',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'cancelable',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'composed',
    converter: webidl.converters.boolean,
    defaultValue: false
  }
]

webidl.converters.MessageEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'data',
    converter: webidl.converters.any,
    defaultValue: null
  },
  {
    key: 'origin',
    converter: webidl.converters.USVString,
    defaultValue: ''
  },
  {
    key: 'lastEventId',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'source',
    // Node doesn't implement WindowProxy or ServiceWorker, so the only
    // valid value for source is a MessagePort.
    converter: webidl.nullableConverter(webidl.converters.MessagePort),
    defaultValue: null
  },
  {
    key: 'ports',
    converter: webidl.converters['sequence<MessagePort>'],
    get defaultValue () {
      return []
    }
  }
])

webidl.converters.CloseEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'wasClean',
    converter: webidl.converters.boolean,
    defaultValue: false
  },
  {
    key: 'code',
    converter: webidl.converters['unsigned short'],
    defaultValue: 0
  },
  {
    key: 'reason',
    converter: webidl.converters.USVString,
    defaultValue: ''
  }
])

webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
  ...eventInit,
  {
    key: 'message',
    converter: webidl.converters.DOMString,
    defaultValue: ''
  },
  {
    key: 'filename',
    converter: webidl.converters.USVString,
    defaultValue: ''
  },
  {
    key: 'lineno',
    converter: webidl.converters['unsigned long'],
    defaultValue: 0
  },
  {
    key: 'colno',
    converter: webidl.converters['unsigned long'],
    defaultValue: 0
  },
  {
    key: 'error',
    converter: webidl.converters.any
  }
])

module.exports = {
  MessageEvent,
  CloseEvent,
  ErrorEvent
}


/***/ }),

/***/ 248:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { maxUnsigned16Bit } = __nccwpck_require__(3640)

/** @type {import('crypto')} */
let crypto
try {
  crypto = __nccwpck_require__(6982)
} catch {

}

class WebsocketFrameSend {
  /**
   * @param {Buffer|undefined} data
   */
  constructor (data) {
    this.frameData = data
    this.maskKey = crypto.randomBytes(4)
  }

  createFrame (opcode) {
    const bodyLength = this.frameData?.byteLength ?? 0

    /** @type {number} */
    let payloadLength = bodyLength // 0-125
    let offset = 6

    if (bodyLength > maxUnsigned16Bit) {
      offset += 8 // payload length is next 8 bytes
      payloadLength = 127
    } else if (bodyLength > 125) {
      offset += 2 // payload length is next 2 bytes
      payloadLength = 126
    }

    const buffer = Buffer.allocUnsafe(bodyLength + offset)

    // Clear first 2 bytes, everything else is overwritten
    buffer[0] = buffer[1] = 0
    buffer[0] |= 0x80 // FIN
    buffer[0] = (buffer[0] & 0xF0) + opcode // opcode

    /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
    buffer[offset - 4] = this.maskKey[0]
    buffer[offset - 3] = this.maskKey[1]
    buffer[offset - 2] = this.maskKey[2]
    buffer[offset - 1] = this.maskKey[3]

    buffer[1] = payloadLength

    if (payloadLength === 126) {
      buffer.writeUInt16BE(bodyLength, 2)
    } else if (payloadLength === 127) {
      // Clear extended payload length
      buffer[2] = buffer[3] = 0
      buffer.writeUIntBE(bodyLength, 4, 6)
    }

    buffer[1] |= 0x80 // MASK

    // mask body
    for (let i = 0; i < bodyLength; i++) {
      buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4]
    }

    return buffer
  }
}

module.exports = {
  WebsocketFrameSend
}


/***/ }),

/***/ 6668:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { Writable } = __nccwpck_require__(2203)
const diagnosticsChannel = __nccwpck_require__(1637)
const { parserStates, opcodes, states, emptyBuffer } = __nccwpck_require__(3640)
const { kReadyState, kSentClose, kResponse, kReceivedClose } = __nccwpck_require__(8840)
const { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = __nccwpck_require__(7433)
const { WebsocketFrameSend } = __nccwpck_require__(248)

// This code was influenced by ws released under the MIT license.
// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>
// Copyright (c) 2013 Arnout Kazemier and contributors
// Copyright (c) 2016 Luigi Pinca and contributors

const channels = {}
channels.ping = diagnosticsChannel.channel('undici:websocket:ping')
channels.pong = diagnosticsChannel.channel('undici:websocket:pong')

class ByteParser extends Writable {
  #buffers = []
  #byteOffset = 0

  #state = parserStates.INFO

  #info = {}
  #fragments = []

  constructor (ws) {
    super()

    this.ws = ws
  }

  /**
   * @param {Buffer} chunk
   * @param {() => void} callback
   */
  _write (chunk, _, callback) {
    this.#buffers.push(chunk)
    this.#byteOffset += chunk.length

    this.run(callback)
  }

  /**
   * Runs whenever a new chunk is received.
   * Callback is called whenever there are no more chunks buffering,
   * or not enough bytes are buffered to parse.
   */
  run (callback) {
    while (true) {
      if (this.#state === parserStates.INFO) {
        // If there aren't enough bytes to parse the payload length, etc.
        if (this.#byteOffset < 2) {
          return callback()
        }

        const buffer = this.consume(2)

        this.#info.fin = (buffer[0] & 0x80) !== 0
        this.#info.opcode = buffer[0] & 0x0F

        // If we receive a fragmented message, we use the type of the first
        // frame to parse the full message as binary/text, when it's terminated
        this.#info.originalOpcode ??= this.#info.opcode

        this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION

        if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
          // Only text and binary frames can be fragmented
          failWebsocketConnection(this.ws, 'Invalid frame type was fragmented.')
          return
        }

        const payloadLength = buffer[1] & 0x7F

        if (payloadLength <= 125) {
          this.#info.payloadLength = payloadLength
          this.#state = parserStates.READ_DATA
        } else if (payloadLength === 126) {
          this.#state = parserStates.PAYLOADLENGTH_16
        } else if (payloadLength === 127) {
          this.#state = parserStates.PAYLOADLENGTH_64
        }

        if (this.#info.fragmented && payloadLength > 125) {
          // A fragmented frame can't be fragmented itself
          failWebsocketConnection(this.ws, 'Fragmented frame exceeded 125 bytes.')
          return
        } else if (
          (this.#info.opcode === opcodes.PING ||
            this.#info.opcode === opcodes.PONG ||
            this.#info.opcode === opcodes.CLOSE) &&
          payloadLength > 125
        ) {
          // Control frames can have a payload length of 125 bytes MAX
          failWebsocketConnection(this.ws, 'Payload length for control frame exceeded 125 bytes.')
          return
        } else if (this.#info.opcode === opcodes.CLOSE) {
          if (payloadLength === 1) {
            failWebsocketConnection(this.ws, 'Received close frame with a 1-byte body.')
            return
          }

          const body = this.consume(payloadLength)

          this.#info.closeInfo = this.parseCloseBody(false, body)

          if (!this.ws[kSentClose]) {
            // If an endpoint receives a Close frame and did not previously send a
            // Close frame, the endpoint MUST send a Close frame in response.  (When
            // sending a Close frame in response, the endpoint typically echos the
            // status code it received.)
            const body = Buffer.allocUnsafe(2)
            body.writeUInt16BE(this.#info.closeInfo.code, 0)
            const closeFrame = new WebsocketFrameSend(body)

            this.ws[kResponse].socket.write(
              closeFrame.createFrame(opcodes.CLOSE),
              (err) => {
                if (!err) {
                  this.ws[kSentClose] = true
                }
              }
            )
          }

          // Upon either sending or receiving a Close control frame, it is said
          // that _The WebSocket Closing Handshake is Started_ and that the
          // WebSocket connection is in the CLOSING state.
          this.ws[kReadyState] = states.CLOSING
          this.ws[kReceivedClose] = true

          this.end()

          return
        } else if (this.#info.opcode === opcodes.PING) {
          // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in
          // response, unless it already received a Close frame.
          // A Pong frame sent in response to a Ping frame must have identical
          // "Application data"

          const body = this.consume(payloadLength)

          if (!this.ws[kReceivedClose]) {
            const frame = new WebsocketFrameSend(body)

            this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG))

            if (channels.ping.hasSubscribers) {
              channels.ping.publish({
                payload: body
              })
            }
          }

          this.#state = parserStates.INFO

          if (this.#byteOffset > 0) {
            continue
          } else {
            callback()
            return
          }
        } else if (this.#info.opcode === opcodes.PONG) {
          // A Pong frame MAY be sent unsolicited.  This serves as a
          // unidirectional heartbeat.  A response to an unsolicited Pong frame is
          // not expected.

          const body = this.consume(payloadLength)

          if (channels.pong.hasSubscribers) {
            channels.pong.publish({
              payload: body
            })
          }

          if (this.#byteOffset > 0) {
            continue
          } else {
            callback()
            return
          }
        }
      } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
        if (this.#byteOffset < 2) {
          return callback()
        }

        const buffer = this.consume(2)

        this.#info.payloadLength = buffer.readUInt16BE(0)
        this.#state = parserStates.READ_DATA
      } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
        if (this.#byteOffset < 8) {
          return callback()
        }

        const buffer = this.consume(8)
        const upper = buffer.readUInt32BE(0)

        // 2^31 is the maxinimum bytes an arraybuffer can contain
        // on 32-bit systems. Although, on 64-bit systems, this is
        // 2^53-1 bytes.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length
        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275
        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e
        if (upper > 2 ** 31 - 1) {
          failWebsocketConnection(this.ws, 'Received payload length > 2^31 bytes.')
          return
        }

        const lower = buffer.readUInt32BE(4)

        this.#info.payloadLength = (upper << 8) + lower
        this.#state = parserStates.READ_DATA
      } else if (this.#state === parserStates.READ_DATA) {
        if (this.#byteOffset < this.#info.payloadLength) {
          // If there is still more data in this chunk that needs to be read
          return callback()
        } else if (this.#byteOffset >= this.#info.payloadLength) {
          // If the server sent multiple frames in a single chunk

          const body = this.consume(this.#info.payloadLength)

          this.#fragments.push(body)

          // If the frame is unfragmented, or a fragmented frame was terminated,
          // a message was received
          if (!this.#info.fragmented || (this.#info.fin && this.#info.opcode === opcodes.CONTINUATION)) {
            const fullMessage = Buffer.concat(this.#fragments)

            websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage)

            this.#info = {}
            this.#fragments.length = 0
          }

          this.#state = parserStates.INFO
        }
      }

      if (this.#byteOffset > 0) {
        continue
      } else {
        callback()
        break
      }
    }
  }

  /**
   * Take n bytes from the buffered Buffers
   * @param {number} n
   * @returns {Buffer|null}
   */
  consume (n) {
    if (n > this.#byteOffset) {
      return null
    } else if (n === 0) {
      return emptyBuffer
    }

    if (this.#buffers[0].length === n) {
      this.#byteOffset -= this.#buffers[0].length
      return this.#buffers.shift()
    }

    const buffer = Buffer.allocUnsafe(n)
    let offset = 0

    while (offset !== n) {
      const next = this.#buffers[0]
      const { length } = next

      if (length + offset === n) {
        buffer.set(this.#buffers.shift(), offset)
        break
      } else if (length + offset > n) {
        buffer.set(next.subarray(0, n - offset), offset)
        this.#buffers[0] = next.subarray(n - offset)
        break
      } else {
        buffer.set(this.#buffers.shift(), offset)
        offset += next.length
      }
    }

    this.#byteOffset -= n

    return buffer
  }

  parseCloseBody (onlyCode, data) {
    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5
    /** @type {number|undefined} */
    let code

    if (data.length >= 2) {
      // _The WebSocket Connection Close Code_ is
      // defined as the status code (Section 7.4) contained in the first Close
      // control frame received by the application
      code = data.readUInt16BE(0)
    }

    if (onlyCode) {
      if (!isValidStatusCode(code)) {
        return null
      }

      return { code }
    }

    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6
    /** @type {Buffer} */
    let reason = data.subarray(2)

    // Remove BOM
    if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {
      reason = reason.subarray(3)
    }

    if (code !== undefined && !isValidStatusCode(code)) {
      return null
    }

    try {
      // TODO: optimize this
      reason = new TextDecoder('utf-8', { fatal: true }).decode(reason)
    } catch {
      return null
    }

    return { code, reason }
  }

  get closingInfo () {
    return this.#info.closeInfo
  }
}

module.exports = {
  ByteParser
}


/***/ }),

/***/ 8840:
/***/ ((module) => {

"use strict";


module.exports = {
  kWebSocketURL: Symbol('url'),
  kReadyState: Symbol('ready state'),
  kController: Symbol('controller'),
  kResponse: Symbol('response'),
  kBinaryType: Symbol('binary type'),
  kSentClose: Symbol('sent close'),
  kReceivedClose: Symbol('received close'),
  kByteParser: Symbol('byte parser')
}


/***/ }),

/***/ 7433:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = __nccwpck_require__(8840)
const { states, opcodes } = __nccwpck_require__(3640)
const { MessageEvent, ErrorEvent } = __nccwpck_require__(2316)

/* globals Blob */

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isEstablished (ws) {
  // If the server's response is validated as provided for above, it is
  // said that _The WebSocket Connection is Established_ and that the
  // WebSocket Connection is in the OPEN state.
  return ws[kReadyState] === states.OPEN
}

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isClosing (ws) {
  // Upon either sending or receiving a Close control frame, it is said
  // that _The WebSocket Closing Handshake is Started_ and that the
  // WebSocket connection is in the CLOSING state.
  return ws[kReadyState] === states.CLOSING
}

/**
 * @param {import('./websocket').WebSocket} ws
 */
function isClosed (ws) {
  return ws[kReadyState] === states.CLOSED
}

/**
 * @see https://dom.spec.whatwg.org/#concept-event-fire
 * @param {string} e
 * @param {EventTarget} target
 * @param {EventInit | undefined} eventInitDict
 */
function fireEvent (e, target, eventConstructor = Event, eventInitDict) {
  // 1. If eventConstructor is not given, then let eventConstructor be Event.

  // 2. Let event be the result of creating an event given eventConstructor,
  //    in the relevant realm of target.
  // 3. Initialize event’s type attribute to e.
  const event = new eventConstructor(e, eventInitDict) // eslint-disable-line new-cap

  // 4. Initialize any other IDL attributes of event as described in the
  //    invocation of this algorithm.

  // 5. Return the result of dispatching event at target, with legacy target
  //    override flag set if set.
  target.dispatchEvent(event)
}

/**
 * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
 * @param {import('./websocket').WebSocket} ws
 * @param {number} type Opcode
 * @param {Buffer} data application data
 */
function websocketMessageReceived (ws, type, data) {
  // 1. If ready state is not OPEN (1), then return.
  if (ws[kReadyState] !== states.OPEN) {
    return
  }

  // 2. Let dataForEvent be determined by switching on type and binary type:
  let dataForEvent

  if (type === opcodes.TEXT) {
    // -> type indicates that the data is Text
    //      a new DOMString containing data
    try {
      dataForEvent = new TextDecoder('utf-8', { fatal: true }).decode(data)
    } catch {
      failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.')
      return
    }
  } else if (type === opcodes.BINARY) {
    if (ws[kBinaryType] === 'blob') {
      // -> type indicates that the data is Binary and binary type is "blob"
      //      a new Blob object, created in the relevant Realm of the WebSocket
      //      object, that represents data as its raw data
      dataForEvent = new Blob([data])
    } else {
      // -> type indicates that the data is Binary and binary type is "arraybuffer"
      //      a new ArrayBuffer object, created in the relevant Realm of the
      //      WebSocket object, whose contents are data
      dataForEvent = new Uint8Array(data).buffer
    }
  }

  // 3. Fire an event named message at the WebSocket object, using MessageEvent,
  //    with the origin attribute initialized to the serialization of the WebSocket
  //    object’s url's origin, and the data attribute initialized to dataForEvent.
  fireEvent('message', ws, MessageEvent, {
    origin: ws[kWebSocketURL].origin,
    data: dataForEvent
  })
}

/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455
 * @see https://datatracker.ietf.org/doc/html/rfc2616
 * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
 * @param {string} protocol
 */
function isValidSubprotocol (protocol) {
  // If present, this value indicates one
  // or more comma-separated subprotocol the client wishes to speak,
  // ordered by preference.  The elements that comprise this value
  // MUST be non-empty strings with characters in the range U+0021 to
  // U+007E not including separator characters as defined in
  // [RFC2616] and MUST all be unique strings.
  if (protocol.length === 0) {
    return false
  }

  for (const char of protocol) {
    const code = char.charCodeAt(0)

    if (
      code < 0x21 ||
      code > 0x7E ||
      char === '(' ||
      char === ')' ||
      char === '<' ||
      char === '>' ||
      char === '@' ||
      char === ',' ||
      char === ';' ||
      char === ':' ||
      char === '\\' ||
      char === '"' ||
      char === '/' ||
      char === '[' ||
      char === ']' ||
      char === '?' ||
      char === '=' ||
      char === '{' ||
      char === '}' ||
      code === 32 || // SP
      code === 9 // HT
    ) {
      return false
    }
  }

  return true
}

/**
 * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
 * @param {number} code
 */
function isValidStatusCode (code) {
  if (code >= 1000 && code < 1015) {
    return (
      code !== 1004 && // reserved
      code !== 1005 && // "MUST NOT be set as a status code"
      code !== 1006 // "MUST NOT be set as a status code"
    )
  }

  return code >= 3000 && code <= 4999
}

/**
 * @param {import('./websocket').WebSocket} ws
 * @param {string|undefined} reason
 */
function failWebsocketConnection (ws, reason) {
  const { [kController]: controller, [kResponse]: response } = ws

  controller.abort()

  if (response?.socket && !response.socket.destroyed) {
    response.socket.destroy()
  }

  if (reason) {
    fireEvent('error', ws, ErrorEvent, {
      error: new Error(reason)
    })
  }
}

module.exports = {
  isEstablished,
  isClosing,
  isClosed,
  fireEvent,
  isValidSubprotocol,
  isValidStatusCode,
  failWebsocketConnection,
  websocketMessageReceived
}


/***/ }),

/***/ 5974:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const { webidl } = __nccwpck_require__(1677)
const { DOMException } = __nccwpck_require__(7431)
const { URLSerializer } = __nccwpck_require__(6615)
const { getGlobalOrigin } = __nccwpck_require__(1339)
const { staticPropertyDescriptors, states, opcodes, emptyBuffer } = __nccwpck_require__(3640)
const {
  kWebSocketURL,
  kReadyState,
  kController,
  kBinaryType,
  kResponse,
  kSentClose,
  kByteParser
} = __nccwpck_require__(8840)
const { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = __nccwpck_require__(7433)
const { establishWebSocketConnection } = __nccwpck_require__(9017)
const { WebsocketFrameSend } = __nccwpck_require__(248)
const { ByteParser } = __nccwpck_require__(6668)
const { kEnumerableProperty, isBlobLike } = __nccwpck_require__(7001)
const { getGlobalDispatcher } = __nccwpck_require__(6762)
const { types } = __nccwpck_require__(9023)

let experimentalWarned = false

// https://websockets.spec.whatwg.org/#interface-definition
class WebSocket extends EventTarget {
  #events = {
    open: null,
    error: null,
    close: null,
    message: null
  }

  #bufferedAmount = 0
  #protocol = ''
  #extensions = ''

  /**
   * @param {string} url
   * @param {string|string[]} protocols
   */
  constructor (url, protocols = []) {
    super()

    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket constructor' })

    if (!experimentalWarned) {
      experimentalWarned = true
      process.emitWarning('WebSockets are experimental, expect them to change at any time.', {
        code: 'UNDICI-WS'
      })
    }

    const options = webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'](protocols)

    url = webidl.converters.USVString(url)
    protocols = options.protocols

    // 1. Let baseURL be this's relevant settings object's API base URL.
    const baseURL = getGlobalOrigin()

    // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.
    let urlRecord

    try {
      urlRecord = new URL(url, baseURL)
    } catch (e) {
      // 3. If urlRecord is failure, then throw a "SyntaxError" DOMException.
      throw new DOMException(e, 'SyntaxError')
    }

    // 4. If urlRecord’s scheme is "http", then set urlRecord’s scheme to "ws".
    if (urlRecord.protocol === 'http:') {
      urlRecord.protocol = 'ws:'
    } else if (urlRecord.protocol === 'https:') {
      // 5. Otherwise, if urlRecord’s scheme is "https", set urlRecord’s scheme to "wss".
      urlRecord.protocol = 'wss:'
    }

    // 6. If urlRecord’s scheme is not "ws" or "wss", then throw a "SyntaxError" DOMException.
    if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {
      throw new DOMException(
        `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
        'SyntaxError'
      )
    }

    // 7. If urlRecord’s fragment is non-null, then throw a "SyntaxError"
    //    DOMException.
    if (urlRecord.hash || urlRecord.href.endsWith('#')) {
      throw new DOMException('Got fragment', 'SyntaxError')
    }

    // 8. If protocols is a string, set protocols to a sequence consisting
    //    of just that string.
    if (typeof protocols === 'string') {
      protocols = [protocols]
    }

    // 9. If any of the values in protocols occur more than once or otherwise
    //    fail to match the requirements for elements that comprise the value
    //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket
    //    protocol, then throw a "SyntaxError" DOMException.
    if (protocols.length !== new Set(protocols.map(p => p.toLowerCase())).size) {
      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')
    }

    if (protocols.length > 0 && !protocols.every(p => isValidSubprotocol(p))) {
      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')
    }

    // 10. Set this's url to urlRecord.
    this[kWebSocketURL] = new URL(urlRecord.href)

    // 11. Let client be this's relevant settings object.

    // 12. Run this step in parallel:

    //    1. Establish a WebSocket connection given urlRecord, protocols,
    //       and client.
    this[kController] = establishWebSocketConnection(
      urlRecord,
      protocols,
      this,
      (response) => this.#onConnectionEstablished(response),
      options
    )

    // Each WebSocket object has an associated ready state, which is a
    // number representing the state of the connection. Initially it must
    // be CONNECTING (0).
    this[kReadyState] = WebSocket.CONNECTING

    // The extensions attribute must initially return the empty string.

    // The protocol attribute must initially return the empty string.

    // Each WebSocket object has an associated binary type, which is a
    // BinaryType. Initially it must be "blob".
    this[kBinaryType] = 'blob'
  }

  /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-close
   * @param {number|undefined} code
   * @param {string|undefined} reason
   */
  close (code = undefined, reason = undefined) {
    webidl.brandCheck(this, WebSocket)

    if (code !== undefined) {
      code = webidl.converters['unsigned short'](code, { clamp: true })
    }

    if (reason !== undefined) {
      reason = webidl.converters.USVString(reason)
    }

    // 1. If code is present, but is neither an integer equal to 1000 nor an
    //    integer in the range 3000 to 4999, inclusive, throw an
    //    "InvalidAccessError" DOMException.
    if (code !== undefined) {
      if (code !== 1000 && (code < 3000 || code > 4999)) {
        throw new DOMException('invalid code', 'InvalidAccessError')
      }
    }

    let reasonByteLength = 0

    // 2. If reason is present, then run these substeps:
    if (reason !== undefined) {
      // 1. Let reasonBytes be the result of encoding reason.
      // 2. If reasonBytes is longer than 123 bytes, then throw a
      //    "SyntaxError" DOMException.
      reasonByteLength = Buffer.byteLength(reason)

      if (reasonByteLength > 123) {
        throw new DOMException(
          `Reason must be less than 123 bytes; received ${reasonByteLength}`,
          'SyntaxError'
        )
      }
    }

    // 3. Run the first matching steps from the following list:
    if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {
      // If this's ready state is CLOSING (2) or CLOSED (3)
      // Do nothing.
    } else if (!isEstablished(this)) {
      // If the WebSocket connection is not yet established
      // Fail the WebSocket connection and set this's ready state
      // to CLOSING (2).
      failWebsocketConnection(this, 'Connection was closed before it was established.')
      this[kReadyState] = WebSocket.CLOSING
    } else if (!isClosing(this)) {
      // If the WebSocket closing handshake has not yet been started
      // Start the WebSocket closing handshake and set this's ready
      // state to CLOSING (2).
      // - If neither code nor reason is present, the WebSocket Close
      //   message must not have a body.
      // - If code is present, then the status code to use in the
      //   WebSocket Close message must be the integer given by code.
      // - If reason is also present, then reasonBytes must be
      //   provided in the Close message after the status code.

      const frame = new WebsocketFrameSend()

      // If neither code nor reason is present, the WebSocket Close
      // message must not have a body.

      // If code is present, then the status code to use in the
      // WebSocket Close message must be the integer given by code.
      if (code !== undefined && reason === undefined) {
        frame.frameData = Buffer.allocUnsafe(2)
        frame.frameData.writeUInt16BE(code, 0)
      } else if (code !== undefined && reason !== undefined) {
        // If reason is also present, then reasonBytes must be
        // provided in the Close message after the status code.
        frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength)
        frame.frameData.writeUInt16BE(code, 0)
        // the body MAY contain UTF-8-encoded data with value /reason/
        frame.frameData.write(reason, 2, 'utf-8')
      } else {
        frame.frameData = emptyBuffer
      }

      /** @type {import('stream').Duplex} */
      const socket = this[kResponse].socket

      socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
        if (!err) {
          this[kSentClose] = true
        }
      })

      // Upon either sending or receiving a Close control frame, it is said
      // that _The WebSocket Closing Handshake is Started_ and that the
      // WebSocket connection is in the CLOSING state.
      this[kReadyState] = states.CLOSING
    } else {
      // Otherwise
      // Set this's ready state to CLOSING (2).
      this[kReadyState] = WebSocket.CLOSING
    }
  }

  /**
   * @see https://websockets.spec.whatwg.org/#dom-websocket-send
   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
   */
  send (data) {
    webidl.brandCheck(this, WebSocket)

    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket.send' })

    data = webidl.converters.WebSocketSendData(data)

    // 1. If this's ready state is CONNECTING, then throw an
    //    "InvalidStateError" DOMException.
    if (this[kReadyState] === WebSocket.CONNECTING) {
      throw new DOMException('Sent before connected.', 'InvalidStateError')
    }

    // 2. Run the appropriate set of steps from the following list:
    // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1
    // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2

    if (!isEstablished(this) || isClosing(this)) {
      return
    }

    /** @type {import('stream').Duplex} */
    const socket = this[kResponse].socket

    // If data is a string
    if (typeof data === 'string') {
      // If the WebSocket connection is established and the WebSocket
      // closing handshake has not yet started, then the user agent
      // must send a WebSocket Message comprised of the data argument
      // using a text frame opcode; if the data cannot be sent, e.g.
      // because it would need to be buffered but the buffer is full,
      // the user agent must flag the WebSocket as full and then close
      // the WebSocket connection. Any invocation of this method with a
      // string argument that does not throw an exception must increase
      // the bufferedAmount attribute by the number of bytes needed to
      // express the argument as UTF-8.

      const value = Buffer.from(data)
      const frame = new WebsocketFrameSend(value)
      const buffer = frame.createFrame(opcodes.TEXT)

      this.#bufferedAmount += value.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= value.byteLength
      })
    } else if (types.isArrayBuffer(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need
      // to be buffered but the buffer is full, the user agent must flag
      // the WebSocket as full and then close the WebSocket connection.
      // The data to be sent is the data stored in the buffer described
      // by the ArrayBuffer object. Any invocation of this method with an
      // ArrayBuffer argument that does not throw an exception must
      // increase the bufferedAmount attribute by the length of the
      // ArrayBuffer in bytes.

      const value = Buffer.from(data)
      const frame = new WebsocketFrameSend(value)
      const buffer = frame.createFrame(opcodes.BINARY)

      this.#bufferedAmount += value.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= value.byteLength
      })
    } else if (ArrayBuffer.isView(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need to
      // be buffered but the buffer is full, the user agent must flag the
      // WebSocket as full and then close the WebSocket connection. The
      // data to be sent is the data stored in the section of the buffer
      // described by the ArrayBuffer object that data references. Any
      // invocation of this method with this kind of argument that does
      // not throw an exception must increase the bufferedAmount attribute
      // by the length of data’s buffer in bytes.

      const ab = Buffer.from(data, data.byteOffset, data.byteLength)

      const frame = new WebsocketFrameSend(ab)
      const buffer = frame.createFrame(opcodes.BINARY)

      this.#bufferedAmount += ab.byteLength
      socket.write(buffer, () => {
        this.#bufferedAmount -= ab.byteLength
      })
    } else if (isBlobLike(data)) {
      // If the WebSocket connection is established, and the WebSocket
      // closing handshake has not yet started, then the user agent must
      // send a WebSocket Message comprised of data using a binary frame
      // opcode; if the data cannot be sent, e.g. because it would need to
      // be buffered but the buffer is full, the user agent must flag the
      // WebSocket as full and then close the WebSocket connection. The data
      // to be sent is the raw data represented by the Blob object. Any
      // invocation of this method with a Blob argument that does not throw
      // an exception must increase the bufferedAmount attribute by the size
      // of the Blob object’s raw data, in bytes.

      const frame = new WebsocketFrameSend()

      data.arrayBuffer().then((ab) => {
        const value = Buffer.from(ab)
        frame.frameData = value
        const buffer = frame.createFrame(opcodes.BINARY)

        this.#bufferedAmount += value.byteLength
        socket.write(buffer, () => {
          this.#bufferedAmount -= value.byteLength
        })
      })
    }
  }

  get readyState () {
    webidl.brandCheck(this, WebSocket)

    // The readyState getter steps are to return this's ready state.
    return this[kReadyState]
  }

  get bufferedAmount () {
    webidl.brandCheck(this, WebSocket)

    return this.#bufferedAmount
  }

  get url () {
    webidl.brandCheck(this, WebSocket)

    // The url getter steps are to return this's url, serialized.
    return URLSerializer(this[kWebSocketURL])
  }

  get extensions () {
    webidl.brandCheck(this, WebSocket)

    return this.#extensions
  }

  get protocol () {
    webidl.brandCheck(this, WebSocket)

    return this.#protocol
  }

  get onopen () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.open
  }

  set onopen (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.open) {
      this.removeEventListener('open', this.#events.open)
    }

    if (typeof fn === 'function') {
      this.#events.open = fn
      this.addEventListener('open', fn)
    } else {
      this.#events.open = null
    }
  }

  get onerror () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.error
  }

  set onerror (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.error) {
      this.removeEventListener('error', this.#events.error)
    }

    if (typeof fn === 'function') {
      this.#events.error = fn
      this.addEventListener('error', fn)
    } else {
      this.#events.error = null
    }
  }

  get onclose () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.close
  }

  set onclose (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.close) {
      this.removeEventListener('close', this.#events.close)
    }

    if (typeof fn === 'function') {
      this.#events.close = fn
      this.addEventListener('close', fn)
    } else {
      this.#events.close = null
    }
  }

  get onmessage () {
    webidl.brandCheck(this, WebSocket)

    return this.#events.message
  }

  set onmessage (fn) {
    webidl.brandCheck(this, WebSocket)

    if (this.#events.message) {
      this.removeEventListener('message', this.#events.message)
    }

    if (typeof fn === 'function') {
      this.#events.message = fn
      this.addEventListener('message', fn)
    } else {
      this.#events.message = null
    }
  }

  get binaryType () {
    webidl.brandCheck(this, WebSocket)

    return this[kBinaryType]
  }

  set binaryType (type) {
    webidl.brandCheck(this, WebSocket)

    if (type !== 'blob' && type !== 'arraybuffer') {
      this[kBinaryType] = 'blob'
    } else {
      this[kBinaryType] = type
    }
  }

  /**
   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
   */
  #onConnectionEstablished (response) {
    // processResponse is called when the "response’s header list has been received and initialized."
    // once this happens, the connection is open
    this[kResponse] = response

    const parser = new ByteParser(this)
    parser.on('drain', function onParserDrain () {
      this.ws[kResponse].socket.resume()
    })

    response.socket.ws = this
    this[kByteParser] = parser

    // 1. Change the ready state to OPEN (1).
    this[kReadyState] = states.OPEN

    // 2. Change the extensions attribute’s value to the extensions in use, if
    //    it is not the null value.
    // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1
    const extensions = response.headersList.get('sec-websocket-extensions')

    if (extensions !== null) {
      this.#extensions = extensions
    }

    // 3. Change the protocol attribute’s value to the subprotocol in use, if
    //    it is not the null value.
    // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9
    const protocol = response.headersList.get('sec-websocket-protocol')

    if (protocol !== null) {
      this.#protocol = protocol
    }

    // 4. Fire an event named open at the WebSocket object.
    fireEvent('open', this)
  }
}

// https://websockets.spec.whatwg.org/#dom-websocket-connecting
WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING
// https://websockets.spec.whatwg.org/#dom-websocket-open
WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN
// https://websockets.spec.whatwg.org/#dom-websocket-closing
WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING
// https://websockets.spec.whatwg.org/#dom-websocket-closed
WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED

Object.defineProperties(WebSocket.prototype, {
  CONNECTING: staticPropertyDescriptors,
  OPEN: staticPropertyDescriptors,
  CLOSING: staticPropertyDescriptors,
  CLOSED: staticPropertyDescriptors,
  url: kEnumerableProperty,
  readyState: kEnumerableProperty,
  bufferedAmount: kEnumerableProperty,
  onopen: kEnumerableProperty,
  onerror: kEnumerableProperty,
  onclose: kEnumerableProperty,
  close: kEnumerableProperty,
  onmessage: kEnumerableProperty,
  binaryType: kEnumerableProperty,
  send: kEnumerableProperty,
  extensions: kEnumerableProperty,
  protocol: kEnumerableProperty,
  [Symbol.toStringTag]: {
    value: 'WebSocket',
    writable: false,
    enumerable: false,
    configurable: true
  }
})

Object.defineProperties(WebSocket, {
  CONNECTING: staticPropertyDescriptors,
  OPEN: staticPropertyDescriptors,
  CLOSING: staticPropertyDescriptors,
  CLOSED: staticPropertyDescriptors
})

webidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(
  webidl.converters.DOMString
)

webidl.converters['DOMString or sequence<DOMString>'] = function (V) {
  if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {
    return webidl.converters['sequence<DOMString>'](V)
  }

  return webidl.converters.DOMString(V)
}

// This implements the propsal made in https://github.com/whatwg/websockets/issues/42
webidl.converters.WebSocketInit = webidl.dictionaryConverter([
  {
    key: 'protocols',
    converter: webidl.converters['DOMString or sequence<DOMString>'],
    get defaultValue () {
      return []
    }
  },
  {
    key: 'dispatcher',
    converter: (V) => V,
    get defaultValue () {
      return getGlobalDispatcher()
    }
  },
  {
    key: 'headers',
    converter: webidl.nullableConverter(webidl.converters.HeadersInit)
  }
])

webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function (V) {
  if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {
    return webidl.converters.WebSocketInit(V)
  }

  return { protocols: webidl.converters['DOMString or sequence<DOMString>'](V) }
}

webidl.converters.WebSocketSendData = function (V) {
  if (webidl.util.Type(V) === 'Object') {
    if (isBlobLike(V)) {
      return webidl.converters.Blob(V, { strict: false })
    }

    if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
      return webidl.converters.BufferSource(V)
    }
  }

  return webidl.converters.USVString(V)
}

module.exports = {
  WebSocket
}


/***/ }),

/***/ 9530:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({ value: true }));

function getUserAgent() {
  if (typeof navigator === "object" && "userAgent" in navigator) {
    return navigator.userAgent;
  }

  if (typeof process === "object" && process.version !== undefined) {
    return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
  }

  return "<environment undetectable>";
}

exports.getUserAgent = getUserAgent;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 1200:
/***/ ((module) => {

"use strict";


var conversions = {};
module.exports = conversions;

function sign(x) {
    return x < 0 ? -1 : 1;
}

function evenRound(x) {
    // Round x to the nearest integer, choosing the even integer if it lies halfway between two.
    if ((x % 1) === 0.5 && (x & 1) === 0) { // [even number].5; round down (i.e. floor)
        return Math.floor(x);
    } else {
        return Math.round(x);
    }
}

function createNumberConversion(bitLength, typeOpts) {
    if (!typeOpts.unsigned) {
        --bitLength;
    }
    const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
    const upperBound = Math.pow(2, bitLength) - 1;

    const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
    const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);

    return function(V, opts) {
        if (!opts) opts = {};

        let x = +V;

        if (opts.enforceRange) {
            if (!Number.isFinite(x)) {
                throw new TypeError("Argument is not a finite number");
            }

            x = sign(x) * Math.floor(Math.abs(x));
            if (x < lowerBound || x > upperBound) {
                throw new TypeError("Argument is not in byte range");
            }

            return x;
        }

        if (!isNaN(x) && opts.clamp) {
            x = evenRound(x);

            if (x < lowerBound) x = lowerBound;
            if (x > upperBound) x = upperBound;
            return x;
        }

        if (!Number.isFinite(x) || x === 0) {
            return 0;
        }

        x = sign(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;

        if (!typeOpts.unsigned && x >= moduloBound) {
            return x - moduloVal;
        } else if (typeOpts.unsigned) {
            if (x < 0) {
              x += moduloVal;
            } else if (x === -0) { // don't return negative zero
              return 0;
            }
        }

        return x;
    }
}

conversions["void"] = function () {
    return undefined;
};

conversions["boolean"] = function (val) {
    return !!val;
};

conversions["byte"] = createNumberConversion(8, { unsigned: false });
conversions["octet"] = createNumberConversion(8, { unsigned: true });

conversions["short"] = createNumberConversion(16, { unsigned: false });
conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });

conversions["long"] = createNumberConversion(32, { unsigned: false });
conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });

conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });

conversions["double"] = function (V) {
    const x = +V;

    if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
    }

    return x;
};

conversions["unrestricted double"] = function (V) {
    const x = +V;

    if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
    }

    return x;
};

// not quite valid, but good enough for JS
conversions["float"] = conversions["double"];
conversions["unrestricted float"] = conversions["unrestricted double"];

conversions["DOMString"] = function (V, opts) {
    if (!opts) opts = {};

    if (opts.treatNullAsEmptyString && V === null) {
        return "";
    }

    return String(V);
};

conversions["ByteString"] = function (V, opts) {
    const x = String(V);
    let c = undefined;
    for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {
        if (c > 255) {
            throw new TypeError("Argument is not a valid bytestring");
        }
    }

    return x;
};

conversions["USVString"] = function (V) {
    const S = String(V);
    const n = S.length;
    const U = [];
    for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 0xD800 || c > 0xDFFF) {
            U.push(String.fromCodePoint(c));
        } else if (0xDC00 <= c && c <= 0xDFFF) {
            U.push(String.fromCodePoint(0xFFFD));
        } else {
            if (i === n - 1) {
                U.push(String.fromCodePoint(0xFFFD));
            } else {
                const d = S.charCodeAt(i + 1);
                if (0xDC00 <= d && d <= 0xDFFF) {
                    const a = c & 0x3FF;
                    const b = d & 0x3FF;
                    U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
                    ++i;
                } else {
                    U.push(String.fromCodePoint(0xFFFD));
                }
            }
        }
    }

    return U.join('');
};

conversions["Date"] = function (V, opts) {
    if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
    }
    if (isNaN(V)) {
        return undefined;
    }

    return V;
};

conversions["RegExp"] = function (V, opts) {
    if (!(V instanceof RegExp)) {
        V = new RegExp(V);
    }

    return V;
};


/***/ }),

/***/ 2215:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";

const usm = __nccwpck_require__(9116);

exports.implementation = class URLImpl {
  constructor(constructorArgs) {
    const url = constructorArgs[0];
    const base = constructorArgs[1];

    let parsedBase = null;
    if (base !== undefined) {
      parsedBase = usm.basicURLParse(base);
      if (parsedBase === "failure") {
        throw new TypeError("Invalid base URL");
      }
    }

    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }

    this._url = parsedURL;

    // TODO: query stuff
  }

  get href() {
    return usm.serializeURL(this._url);
  }

  set href(v) {
    const parsedURL = usm.basicURLParse(v);
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }

    this._url = parsedURL;
  }

  get origin() {
    return usm.serializeURLOrigin(this._url);
  }

  get protocol() {
    return this._url.scheme + ":";
  }

  set protocol(v) {
    usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
  }

  get username() {
    return this._url.username;
  }

  set username(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    usm.setTheUsername(this._url, v);
  }

  get password() {
    return this._url.password;
  }

  set password(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    usm.setThePassword(this._url, v);
  }

  get host() {
    const url = this._url;

    if (url.host === null) {
      return "";
    }

    if (url.port === null) {
      return usm.serializeHost(url.host);
    }

    return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
  }

  set host(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
  }

  get hostname() {
    if (this._url.host === null) {
      return "";
    }

    return usm.serializeHost(this._url.host);
  }

  set hostname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
  }

  get port() {
    if (this._url.port === null) {
      return "";
    }

    return usm.serializeInteger(this._url.port);
  }

  set port(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    if (v === "") {
      this._url.port = null;
    } else {
      usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
    }
  }

  get pathname() {
    if (this._url.cannotBeABaseURL) {
      return this._url.path[0];
    }

    if (this._url.path.length === 0) {
      return "";
    }

    return "/" + this._url.path.join("/");
  }

  set pathname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    this._url.path = [];
    usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
  }

  get search() {
    if (this._url.query === null || this._url.query === "") {
      return "";
    }

    return "?" + this._url.query;
  }

  set search(v) {
    // TODO: query stuff

    const url = this._url;

    if (v === "") {
      url.query = null;
      return;
    }

    const input = v[0] === "?" ? v.substring(1) : v;
    url.query = "";
    usm.basicURLParse(input, { url, stateOverride: "query" });
  }

  get hash() {
    if (this._url.fragment === null || this._url.fragment === "") {
      return "";
    }

    return "#" + this._url.fragment;
  }

  set hash(v) {
    if (v === "") {
      this._url.fragment = null;
      return;
    }

    const input = v[0] === "#" ? v.substring(1) : v;
    this._url.fragment = "";
    usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
  }

  toJSON() {
    return this.href;
  }
};


/***/ }),

/***/ 7608:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const conversions = __nccwpck_require__(1200);
const utils = __nccwpck_require__(1180);
const Impl = __nccwpck_require__(2215);

const impl = utils.implSymbol;

function URL(url) {
  if (!this || this[impl] || !(this instanceof URL)) {
    throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
  }
  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
  }
  const args = [];
  for (let i = 0; i < arguments.length && i < 2; ++i) {
    args[i] = arguments[i];
  }
  args[0] = conversions["USVString"](args[0]);
  if (args[1] !== undefined) {
  args[1] = conversions["USVString"](args[1]);
  }

  module.exports.setup(this, args);
}

URL.prototype.toJSON = function toJSON() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }
  const args = [];
  for (let i = 0; i < arguments.length && i < 0; ++i) {
    args[i] = arguments[i];
  }
  return this[impl].toJSON.apply(this[impl], args);
};
Object.defineProperty(URL.prototype, "href", {
  get() {
    return this[impl].href;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].href = V;
  },
  enumerable: true,
  configurable: true
});

URL.prototype.toString = function () {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }
  return this.href;
};

Object.defineProperty(URL.prototype, "origin", {
  get() {
    return this[impl].origin;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "protocol", {
  get() {
    return this[impl].protocol;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].protocol = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "username", {
  get() {
    return this[impl].username;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].username = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "password", {
  get() {
    return this[impl].password;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].password = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "host", {
  get() {
    return this[impl].host;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].host = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "hostname", {
  get() {
    return this[impl].hostname;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].hostname = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "port", {
  get() {
    return this[impl].port;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].port = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "pathname", {
  get() {
    return this[impl].pathname;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].pathname = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "search", {
  get() {
    return this[impl].search;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].search = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "hash", {
  get() {
    return this[impl].hash;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].hash = V;
  },
  enumerable: true,
  configurable: true
});


module.exports = {
  is(obj) {
    return !!obj && obj[impl] instanceof Impl.implementation;
  },
  create(constructorArgs, privateData) {
    let obj = Object.create(URL.prototype);
    this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    obj[impl] = new Impl.implementation(constructorArgs, privateData);
    obj[impl][utils.wrapperSymbol] = obj;
  },
  interface: URL,
  expose: {
    Window: { URL: URL },
    Worker: { URL: URL }
  }
};



/***/ }),

/***/ 8425:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

"use strict";


exports.URL = __nccwpck_require__(7608)["interface"];
exports.serializeURL = __nccwpck_require__(9116).serializeURL;
exports.serializeURLOrigin = __nccwpck_require__(9116).serializeURLOrigin;
exports.basicURLParse = __nccwpck_require__(9116).basicURLParse;
exports.setTheUsername = __nccwpck_require__(9116).setTheUsername;
exports.setThePassword = __nccwpck_require__(9116).setThePassword;
exports.serializeHost = __nccwpck_require__(9116).serializeHost;
exports.serializeInteger = __nccwpck_require__(9116).serializeInteger;
exports.parseURL = __nccwpck_require__(9116).parseURL;


/***/ }),

/***/ 9116:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";

const punycode = __nccwpck_require__(4876);
const tr46 = __nccwpck_require__(5121);

const specialSchemes = {
  ftp: 21,
  file: null,
  gopher: 70,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

const failure = Symbol("failure");

function countSymbols(str) {
  return punycode.ucs2.decode(str).length;
}

function at(input, idx) {
  const c = input[idx];
  return isNaN(c) ? undefined : String.fromCodePoint(c);
}

function isASCIIDigit(c) {
  return c >= 0x30 && c <= 0x39;
}

function isASCIIAlpha(c) {
  return (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A);
}

function isASCIIAlphanumeric(c) {
  return isASCIIAlpha(c) || isASCIIDigit(c);
}

function isASCIIHex(c) {
  return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);
}

function isSingleDot(buffer) {
  return buffer === "." || buffer.toLowerCase() === "%2e";
}

function isDoubleDot(buffer) {
  buffer = buffer.toLowerCase();
  return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
}

function isWindowsDriveLetterCodePoints(cp1, cp2) {
  return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
}

function isWindowsDriveLetterString(string) {
  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
}

function isNormalizedWindowsDriveLetterString(string) {
  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
}

function containsForbiddenHostCodePoint(string) {
  return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
}

function containsForbiddenHostCodePointExcludingPercent(string) {
  return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
}

function isSpecialScheme(scheme) {
  return specialSchemes[scheme] !== undefined;
}

function isSpecial(url) {
  return isSpecialScheme(url.scheme);
}

function defaultPort(scheme) {
  return specialSchemes[scheme];
}

function percentEncode(c) {
  let hex = c.toString(16).toUpperCase();
  if (hex.length === 1) {
    hex = "0" + hex;
  }

  return "%" + hex;
}

function utf8PercentEncode(c) {
  const buf = new Buffer(c);

  let str = "";

  for (let i = 0; i < buf.length; ++i) {
    str += percentEncode(buf[i]);
  }

  return str;
}

function utf8PercentDecode(str) {
  const input = new Buffer(str);
  const output = [];
  for (let i = 0; i < input.length; ++i) {
    if (input[i] !== 37) {
      output.push(input[i]);
    } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
      output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
      i += 2;
    } else {
      output.push(input[i]);
    }
  }
  return new Buffer(output).toString();
}

function isC0ControlPercentEncode(c) {
  return c <= 0x1F || c > 0x7E;
}

const extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
function isPathPercentEncode(c) {
  return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
}

const extraUserinfoPercentEncodeSet =
  new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
function isUserinfoPercentEncode(c) {
  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
}

function percentEncodeChar(c, encodeSetPredicate) {
  const cStr = String.fromCodePoint(c);

  if (encodeSetPredicate(c)) {
    return utf8PercentEncode(cStr);
  }

  return cStr;
}

function parseIPv4Number(input) {
  let R = 10;

  if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
    input = input.substring(2);
    R = 16;
  } else if (input.length >= 2 && input.charAt(0) === "0") {
    input = input.substring(1);
    R = 8;
  }

  if (input === "") {
    return 0;
  }

  const regex = R === 10 ? /[^0-9]/ : (R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/);
  if (regex.test(input)) {
    return failure;
  }

  return parseInt(input, R);
}

function parseIPv4(input) {
  const parts = input.split(".");
  if (parts[parts.length - 1] === "") {
    if (parts.length > 1) {
      parts.pop();
    }
  }

  if (parts.length > 4) {
    return input;
  }

  const numbers = [];
  for (const part of parts) {
    if (part === "") {
      return input;
    }
    const n = parseIPv4Number(part);
    if (n === failure) {
      return input;
    }

    numbers.push(n);
  }

  for (let i = 0; i < numbers.length - 1; ++i) {
    if (numbers[i] > 255) {
      return failure;
    }
  }
  if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
    return failure;
  }

  let ipv4 = numbers.pop();
  let counter = 0;

  for (const n of numbers) {
    ipv4 += n * Math.pow(256, 3 - counter);
    ++counter;
  }

  return ipv4;
}

function serializeIPv4(address) {
  let output = "";
  let n = address;

  for (let i = 1; i <= 4; ++i) {
    output = String(n % 256) + output;
    if (i !== 4) {
      output = "." + output;
    }
    n = Math.floor(n / 256);
  }

  return output;
}

function parseIPv6(input) {
  const address = [0, 0, 0, 0, 0, 0, 0, 0];
  let pieceIndex = 0;
  let compress = null;
  let pointer = 0;

  input = punycode.ucs2.decode(input);

  if (input[pointer] === 58) {
    if (input[pointer + 1] !== 58) {
      return failure;
    }

    pointer += 2;
    ++pieceIndex;
    compress = pieceIndex;
  }

  while (pointer < input.length) {
    if (pieceIndex === 8) {
      return failure;
    }

    if (input[pointer] === 58) {
      if (compress !== null) {
        return failure;
      }
      ++pointer;
      ++pieceIndex;
      compress = pieceIndex;
      continue;
    }

    let value = 0;
    let length = 0;

    while (length < 4 && isASCIIHex(input[pointer])) {
      value = value * 0x10 + parseInt(at(input, pointer), 16);
      ++pointer;
      ++length;
    }

    if (input[pointer] === 46) {
      if (length === 0) {
        return failure;
      }

      pointer -= length;

      if (pieceIndex > 6) {
        return failure;
      }

      let numbersSeen = 0;

      while (input[pointer] !== undefined) {
        let ipv4Piece = null;

        if (numbersSeen > 0) {
          if (input[pointer] === 46 && numbersSeen < 4) {
            ++pointer;
          } else {
            return failure;
          }
        }

        if (!isASCIIDigit(input[pointer])) {
          return failure;
        }

        while (isASCIIDigit(input[pointer])) {
          const number = parseInt(at(input, pointer));
          if (ipv4Piece === null) {
            ipv4Piece = number;
          } else if (ipv4Piece === 0) {
            return failure;
          } else {
            ipv4Piece = ipv4Piece * 10 + number;
          }
          if (ipv4Piece > 255) {
            return failure;
          }
          ++pointer;
        }

        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;

        ++numbersSeen;

        if (numbersSeen === 2 || numbersSeen === 4) {
          ++pieceIndex;
        }
      }

      if (numbersSeen !== 4) {
        return failure;
      }

      break;
    } else if (input[pointer] === 58) {
      ++pointer;
      if (input[pointer] === undefined) {
        return failure;
      }
    } else if (input[pointer] !== undefined) {
      return failure;
    }

    address[pieceIndex] = value;
    ++pieceIndex;
  }

  if (compress !== null) {
    let swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex !== 0 && swaps > 0) {
      const temp = address[compress + swaps - 1];
      address[compress + swaps - 1] = address[pieceIndex];
      address[pieceIndex] = temp;
      --pieceIndex;
      --swaps;
    }
  } else if (compress === null && pieceIndex !== 8) {
    return failure;
  }

  return address;
}

function serializeIPv6(address) {
  let output = "";
  const seqResult = findLongestZeroSequence(address);
  const compress = seqResult.idx;
  let ignore0 = false;

  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
    if (ignore0 && address[pieceIndex] === 0) {
      continue;
    } else if (ignore0) {
      ignore0 = false;
    }

    if (compress === pieceIndex) {
      const separator = pieceIndex === 0 ? "::" : ":";
      output += separator;
      ignore0 = true;
      continue;
    }

    output += address[pieceIndex].toString(16);

    if (pieceIndex !== 7) {
      output += ":";
    }
  }

  return output;
}

function parseHost(input, isSpecialArg) {
  if (input[0] === "[") {
    if (input[input.length - 1] !== "]") {
      return failure;
    }

    return parseIPv6(input.substring(1, input.length - 1));
  }

  if (!isSpecialArg) {
    return parseOpaqueHost(input);
  }

  const domain = utf8PercentDecode(input);
  const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
  if (asciiDomain === null) {
    return failure;
  }

  if (containsForbiddenHostCodePoint(asciiDomain)) {
    return failure;
  }

  const ipv4Host = parseIPv4(asciiDomain);
  if (typeof ipv4Host === "number" || ipv4Host === failure) {
    return ipv4Host;
  }

  return asciiDomain;
}

function parseOpaqueHost(input) {
  if (containsForbiddenHostCodePointExcludingPercent(input)) {
    return failure;
  }

  let output = "";
  const decoded = punycode.ucs2.decode(input);
  for (let i = 0; i < decoded.length; ++i) {
    output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
  }
  return output;
}

function findLongestZeroSequence(arr) {
  let maxIdx = null;
  let maxLen = 1; // only find elements > 1
  let currStart = null;
  let currLen = 0;

  for (let i = 0; i < arr.length; ++i) {
    if (arr[i] !== 0) {
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }

      currStart = null;
      currLen = 0;
    } else {
      if (currStart === null) {
        currStart = i;
      }
      ++currLen;
    }
  }

  // if trailing zeros
  if (currLen > maxLen) {
    maxIdx = currStart;
    maxLen = currLen;
  }

  return {
    idx: maxIdx,
    len: maxLen
  };
}

function serializeHost(host) {
  if (typeof host === "number") {
    return serializeIPv4(host);
  }

  // IPv6 serializer
  if (host instanceof Array) {
    return "[" + serializeIPv6(host) + "]";
  }

  return host;
}

function trimControlChars(url) {
  return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
}

function trimTabAndNewline(url) {
  return url.replace(/\u0009|\u000A|\u000D/g, "");
}

function shortenPath(url) {
  const path = url.path;
  if (path.length === 0) {
    return;
  }
  if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
    return;
  }

  path.pop();
}

function includesCredentials(url) {
  return url.username !== "" || url.password !== "";
}

function cannotHaveAUsernamePasswordPort(url) {
  return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
}

function isNormalizedWindowsDriveLetter(string) {
  return /^[A-Za-z]:$/.test(string);
}

function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
  this.pointer = 0;
  this.input = input;
  this.base = base || null;
  this.encodingOverride = encodingOverride || "utf-8";
  this.stateOverride = stateOverride;
  this.url = url;
  this.failure = false;
  this.parseError = false;

  if (!this.url) {
    this.url = {
      scheme: "",
      username: "",
      password: "",
      host: null,
      port: null,
      path: [],
      query: null,
      fragment: null,

      cannotBeABaseURL: false
    };

    const res = trimControlChars(this.input);
    if (res !== this.input) {
      this.parseError = true;
    }
    this.input = res;
  }

  const res = trimTabAndNewline(this.input);
  if (res !== this.input) {
    this.parseError = true;
  }
  this.input = res;

  this.state = stateOverride || "scheme start";

  this.buffer = "";
  this.atFlag = false;
  this.arrFlag = false;
  this.passwordTokenSeenFlag = false;

  this.input = punycode.ucs2.decode(this.input);

  for (; this.pointer <= this.input.length; ++this.pointer) {
    const c = this.input[this.pointer];
    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);

    // exec state machine
    const ret = this["parse " + this.state](c, cStr);
    if (!ret) {
      break; // terminate algorithm
    } else if (ret === failure) {
      this.failure = true;
      break;
    }
  }
}

URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
  if (isASCIIAlpha(c)) {
    this.buffer += cStr.toLowerCase();
    this.state = "scheme";
  } else if (!this.stateOverride) {
    this.state = "no scheme";
    --this.pointer;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
  if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
    this.buffer += cStr.toLowerCase();
  } else if (c === 58) {
    if (this.stateOverride) {
      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
        return false;
      }

      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
        return false;
      }

      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
        return false;
      }

      if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
        return false;
      }
    }
    this.url.scheme = this.buffer;
    this.buffer = "";
    if (this.stateOverride) {
      return false;
    }
    if (this.url.scheme === "file") {
      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
        this.parseError = true;
      }
      this.state = "file";
    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
      this.state = "special relative or authority";
    } else if (isSpecial(this.url)) {
      this.state = "special authority slashes";
    } else if (this.input[this.pointer + 1] === 47) {
      this.state = "path or authority";
      ++this.pointer;
    } else {
      this.url.cannotBeABaseURL = true;
      this.url.path.push("");
      this.state = "cannot-be-a-base-URL path";
    }
  } else if (!this.stateOverride) {
    this.buffer = "";
    this.state = "no scheme";
    this.pointer = -1;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
  if (this.base === null || (this.base.cannotBeABaseURL && c !== 35)) {
    return failure;
  } else if (this.base.cannotBeABaseURL && c === 35) {
    this.url.scheme = this.base.scheme;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
    this.url.fragment = "";
    this.url.cannotBeABaseURL = true;
    this.state = "fragment";
  } else if (this.base.scheme === "file") {
    this.state = "file";
    --this.pointer;
  } else {
    this.state = "relative";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
  if (c === 47 && this.input[this.pointer + 1] === 47) {
    this.state = "special authority ignore slashes";
    ++this.pointer;
  } else {
    this.parseError = true;
    this.state = "relative";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
  if (c === 47) {
    this.state = "authority";
  } else {
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
  this.url.scheme = this.base.scheme;
  if (isNaN(c)) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
  } else if (c === 47) {
    this.state = "relative slash";
  } else if (c === 63) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = "";
    this.state = "query";
  } else if (c === 35) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
    this.url.fragment = "";
    this.state = "fragment";
  } else if (isSpecial(this.url) && c === 92) {
    this.parseError = true;
    this.state = "relative slash";
  } else {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice(0, this.base.path.length - 1);

    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
  if (isSpecial(this.url) && (c === 47 || c === 92)) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "special authority ignore slashes";
  } else if (c === 47) {
    this.state = "authority";
  } else {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
  if (c === 47 && this.input[this.pointer + 1] === 47) {
    this.state = "special authority ignore slashes";
    ++this.pointer;
  } else {
    this.parseError = true;
    this.state = "special authority ignore slashes";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
  if (c !== 47 && c !== 92) {
    this.state = "authority";
    --this.pointer;
  } else {
    this.parseError = true;
  }

  return true;
};

URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
  if (c === 64) {
    this.parseError = true;
    if (this.atFlag) {
      this.buffer = "%40" + this.buffer;
    }
    this.atFlag = true;

    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars
    const len = countSymbols(this.buffer);
    for (let pointer = 0; pointer < len; ++pointer) {
      const codePoint = this.buffer.codePointAt(pointer);

      if (codePoint === 58 && !this.passwordTokenSeenFlag) {
        this.passwordTokenSeenFlag = true;
        continue;
      }
      const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
      if (this.passwordTokenSeenFlag) {
        this.url.password += encodedCodePoints;
      } else {
        this.url.username += encodedCodePoints;
      }
    }
    this.buffer = "";
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
             (isSpecial(this.url) && c === 92)) {
    if (this.atFlag && this.buffer === "") {
      this.parseError = true;
      return failure;
    }
    this.pointer -= countSymbols(this.buffer) + 1;
    this.buffer = "";
    this.state = "host";
  } else {
    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse hostname"] =
URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
  if (this.stateOverride && this.url.scheme === "file") {
    --this.pointer;
    this.state = "file host";
  } else if (c === 58 && !this.arrFlag) {
    if (this.buffer === "") {
      this.parseError = true;
      return failure;
    }

    const host = parseHost(this.buffer, isSpecial(this.url));
    if (host === failure) {
      return failure;
    }

    this.url.host = host;
    this.buffer = "";
    this.state = "port";
    if (this.stateOverride === "hostname") {
      return false;
    }
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
             (isSpecial(this.url) && c === 92)) {
    --this.pointer;
    if (isSpecial(this.url) && this.buffer === "") {
      this.parseError = true;
      return failure;
    } else if (this.stateOverride && this.buffer === "" &&
               (includesCredentials(this.url) || this.url.port !== null)) {
      this.parseError = true;
      return false;
    }

    const host = parseHost(this.buffer, isSpecial(this.url));
    if (host === failure) {
      return failure;
    }

    this.url.host = host;
    this.buffer = "";
    this.state = "path start";
    if (this.stateOverride) {
      return false;
    }
  } else {
    if (c === 91) {
      this.arrFlag = true;
    } else if (c === 93) {
      this.arrFlag = false;
    }
    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
  if (isASCIIDigit(c)) {
    this.buffer += cStr;
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
             (isSpecial(this.url) && c === 92) ||
             this.stateOverride) {
    if (this.buffer !== "") {
      const port = parseInt(this.buffer);
      if (port > Math.pow(2, 16) - 1) {
        this.parseError = true;
        return failure;
      }
      this.url.port = port === defaultPort(this.url.scheme) ? null : port;
      this.buffer = "";
    }
    if (this.stateOverride) {
      return false;
    }
    this.state = "path start";
    --this.pointer;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

const fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);

URLStateMachine.prototype["parse file"] = function parseFile(c) {
  this.url.scheme = "file";

  if (c === 47 || c === 92) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "file slash";
  } else if (this.base !== null && this.base.scheme === "file") {
    if (isNaN(c)) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
    } else if (c === 63) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) ||
          (this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
           !fileOtherwiseCodePoints.has(this.input[this.pointer + 2]))) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        shortenPath(this.url);
      } else {
        this.parseError = true;
      }

      this.state = "path";
      --this.pointer;
    }
  } else {
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
  if (c === 47 || c === 92) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "file host";
  } else {
    if (this.base !== null && this.base.scheme === "file") {
      if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
        this.url.path.push(this.base.path[0]);
      } else {
        this.url.host = this.base.host;
      }
    }
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
    --this.pointer;
    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
      this.parseError = true;
      this.state = "path";
    } else if (this.buffer === "") {
      this.url.host = "";
      if (this.stateOverride) {
        return false;
      }
      this.state = "path start";
    } else {
      let host = parseHost(this.buffer, isSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      if (host === "localhost") {
        host = "";
      }
      this.url.host = host;

      if (this.stateOverride) {
        return false;
      }

      this.buffer = "";
      this.state = "path start";
    }
  } else {
    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
  if (isSpecial(this.url)) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "path";

    if (c !== 47 && c !== 92) {
      --this.pointer;
    }
  } else if (!this.stateOverride && c === 63) {
    this.url.query = "";
    this.state = "query";
  } else if (!this.stateOverride && c === 35) {
    this.url.fragment = "";
    this.state = "fragment";
  } else if (c !== undefined) {
    this.state = "path";
    if (c !== 47) {
      --this.pointer;
    }
  }

  return true;
};

URLStateMachine.prototype["parse path"] = function parsePath(c) {
  if (isNaN(c) || c === 47 || (isSpecial(this.url) && c === 92) ||
      (!this.stateOverride && (c === 63 || c === 35))) {
    if (isSpecial(this.url) && c === 92) {
      this.parseError = true;
    }

    if (isDoubleDot(this.buffer)) {
      shortenPath(this.url);
      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
        this.url.path.push("");
      }
    } else if (isSingleDot(this.buffer) && c !== 47 &&
               !(isSpecial(this.url) && c === 92)) {
      this.url.path.push("");
    } else if (!isSingleDot(this.buffer)) {
      if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
        if (this.url.host !== "" && this.url.host !== null) {
          this.parseError = true;
          this.url.host = "";
        }
        this.buffer = this.buffer[0] + ":";
      }
      this.url.path.push(this.buffer);
    }
    this.buffer = "";
    if (this.url.scheme === "file" && (c === undefined || c === 63 || c === 35)) {
      while (this.url.path.length > 1 && this.url.path[0] === "") {
        this.parseError = true;
        this.url.path.shift();
      }
    }
    if (c === 63) {
      this.url.query = "";
      this.state = "query";
    }
    if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    }
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.

    if (c === 37 &&
      (!isASCIIHex(this.input[this.pointer + 1]) ||
        !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.buffer += percentEncodeChar(c, isPathPercentEncode);
  }

  return true;
};

URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
  if (c === 63) {
    this.url.query = "";
    this.state = "query";
  } else if (c === 35) {
    this.url.fragment = "";
    this.state = "fragment";
  } else {
    // TODO: Add: not a URL code point
    if (!isNaN(c) && c !== 37) {
      this.parseError = true;
    }

    if (c === 37 &&
        (!isASCIIHex(this.input[this.pointer + 1]) ||
         !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    if (!isNaN(c)) {
      this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
    }
  }

  return true;
};

URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
  if (isNaN(c) || (!this.stateOverride && c === 35)) {
    if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
      this.encodingOverride = "utf-8";
    }

    const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead
    for (let i = 0; i < buffer.length; ++i) {
      if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 ||
          buffer[i] === 0x3C || buffer[i] === 0x3E) {
        this.url.query += percentEncode(buffer[i]);
      } else {
        this.url.query += String.fromCodePoint(buffer[i]);
      }
    }

    this.buffer = "";
    if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    }
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.
    if (c === 37 &&
      (!isASCIIHex(this.input[this.pointer + 1]) ||
        !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
  if (isNaN(c)) { // do nothing
  } else if (c === 0x0) {
    this.parseError = true;
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.
    if (c === 37 &&
      (!isASCIIHex(this.input[this.pointer + 1]) ||
        !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
  }

  return true;
};

function serializeURL(url, excludeFragment) {
  let output = url.scheme + ":";
  if (url.host !== null) {
    output += "//";

    if (url.username !== "" || url.password !== "") {
      output += url.username;
      if (url.password !== "") {
        output += ":" + url.password;
      }
      output += "@";
    }

    output += serializeHost(url.host);

    if (url.port !== null) {
      output += ":" + url.port;
    }
  } else if (url.host === null && url.scheme === "file") {
    output += "//";
  }

  if (url.cannotBeABaseURL) {
    output += url.path[0];
  } else {
    for (const string of url.path) {
      output += "/" + string;
    }
  }

  if (url.query !== null) {
    output += "?" + url.query;
  }

  if (!excludeFragment && url.fragment !== null) {
    output += "#" + url.fragment;
  }

  return output;
}

function serializeOrigin(tuple) {
  let result = tuple.scheme + "://";
  result += serializeHost(tuple.host);

  if (tuple.port !== null) {
    result += ":" + tuple.port;
  }

  return result;
}

module.exports.serializeURL = serializeURL;

module.exports.serializeURLOrigin = function (url) {
  // https://url.spec.whatwg.org/#concept-url-origin
  switch (url.scheme) {
    case "blob":
      try {
        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
      } catch (e) {
        // serializing an opaque origin returns "null"
        return "null";
      }
    case "ftp":
    case "gopher":
    case "http":
    case "https":
    case "ws":
    case "wss":
      return serializeOrigin({
        scheme: url.scheme,
        host: url.host,
        port: url.port
      });
    case "file":
      // spec says "exercise to the reader", chrome says "file://"
      return "file://";
    default:
      // serializing an opaque origin returns "null"
      return "null";
  }
};

module.exports.basicURLParse = function (input, options) {
  if (options === undefined) {
    options = {};
  }

  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
  if (usm.failure) {
    return "failure";
  }

  return usm.url;
};

module.exports.setTheUsername = function (url, username) {
  url.username = "";
  const decoded = punycode.ucs2.decode(username);
  for (let i = 0; i < decoded.length; ++i) {
    url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
  }
};

module.exports.setThePassword = function (url, password) {
  url.password = "";
  const decoded = punycode.ucs2.decode(password);
  for (let i = 0; i < decoded.length; ++i) {
    url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
  }
};

module.exports.serializeHost = serializeHost;

module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;

module.exports.serializeInteger = function (integer) {
  return String(integer);
};

module.exports.parseURL = function (input, options) {
  if (options === undefined) {
    options = {};
  }

  // We don't handle blobs, so this just delegates:
  return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
};


/***/ }),

/***/ 1180:
/***/ ((module) => {

"use strict";


module.exports.mixin = function mixin(target, source) {
  const keys = Object.getOwnPropertyNames(source);
  for (let i = 0; i < keys.length; ++i) {
    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
  }
};

module.exports.wrapperSymbol = Symbol("wrapper");
module.exports.implSymbol = Symbol("impl");

module.exports.wrapperForImpl = function (impl) {
  return impl[module.exports.wrapperSymbol];
};

module.exports.implForWrapper = function (wrapper) {
  return wrapper[module.exports.implSymbol];
};



/***/ }),

/***/ 5659:
/***/ ((module) => {

// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}


/***/ }),

/***/ 9207:
/***/ ((module) => {

module.exports = eval("require")("encoding");


/***/ }),

/***/ 2613:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 290:
/***/ ((module) => {

"use strict";
module.exports = require("async_hooks");

/***/ }),

/***/ 181:
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ 5317:
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ 4236:
/***/ ((module) => {

"use strict";
module.exports = require("console");

/***/ }),

/***/ 6982:
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ 1637:
/***/ ((module) => {

"use strict";
module.exports = require("diagnostics_channel");

/***/ }),

/***/ 4434:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 9896:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 8611:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 5675:
/***/ ((module) => {

"use strict";
module.exports = require("http2");

/***/ }),

/***/ 5692:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 9278:
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ 7598:
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ 8474:
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ 7075:
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ 7975:
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ 857:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 6928:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 2987:
/***/ ((module) => {

"use strict";
module.exports = require("perf_hooks");

/***/ }),

/***/ 4876:
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ 3480:
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ 2203:
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ 3774:
/***/ ((module) => {

"use strict";
module.exports = require("stream/web");

/***/ }),

/***/ 3193:
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ 3557:
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ 4756:
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ 7016:
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ 9023:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ 8253:
/***/ ((module) => {

"use strict";
module.exports = require("util/types");

/***/ }),

/***/ 8167:
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ 3106:
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ 2597:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {

"use strict";

var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getTokenizer = exports.countTokens = void 0;
const lite_1 = __nccwpck_require__(6315);
const claude_json_1 = __importDefault(__nccwpck_require__(5915));
function countTokens(text) {
  const tokenizer = getTokenizer();
  const encoded = tokenizer.encode(text.normalize('NFKC'), 'all');
  tokenizer.free();
  return encoded.length;
}
exports.countTokens = countTokens;
function getTokenizer() {
  return new lite_1.Tiktoken(
    claude_json_1.default.bpe_ranks,
    claude_json_1.default.special_tokens,
    claude_json_1.default.pat_str,
  );
}
exports.getTokenizer = getTokenizer;
//# sourceMappingURL=index.js.map


/***/ }),

/***/ 1615:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const WritableStream = (__nccwpck_require__(7075).Writable)
const inherits = (__nccwpck_require__(7975).inherits)

const StreamSearch = __nccwpck_require__(5365)

const PartStream = __nccwpck_require__(1359)
const HeaderParser = __nccwpck_require__(800)

const DASH = 45
const B_ONEDASH = Buffer.from('-')
const B_CRLF = Buffer.from('\r\n')
const EMPTY_FN = function () {}

function Dicer (cfg) {
  if (!(this instanceof Dicer)) { return new Dicer(cfg) }
  WritableStream.call(this, cfg)

  if (!cfg || (!cfg.headerFirst && typeof cfg.boundary !== 'string')) { throw new TypeError('Boundary required') }

  if (typeof cfg.boundary === 'string') { this.setBoundary(cfg.boundary) } else { this._bparser = undefined }

  this._headerFirst = cfg.headerFirst

  this._dashes = 0
  this._parts = 0
  this._finished = false
  this._realFinish = false
  this._isPreamble = true
  this._justMatched = false
  this._firstWrite = true
  this._inHeader = true
  this._part = undefined
  this._cb = undefined
  this._ignoreData = false
  this._partOpts = { highWaterMark: cfg.partHwm }
  this._pause = false

  const self = this
  this._hparser = new HeaderParser(cfg)
  this._hparser.on('header', function (header) {
    self._inHeader = false
    self._part.emit('header', header)
  })
}
inherits(Dicer, WritableStream)

Dicer.prototype.emit = function (ev) {
  if (ev === 'finish' && !this._realFinish) {
    if (!this._finished) {
      const self = this
      process.nextTick(function () {
        self.emit('error', new Error('Unexpected end of multipart data'))
        if (self._part && !self._ignoreData) {
          const type = (self._isPreamble ? 'Preamble' : 'Part')
          self._part.emit('error', new Error(type + ' terminated early due to unexpected end of multipart data'))
          self._part.push(null)
          process.nextTick(function () {
            self._realFinish = true
            self.emit('finish')
            self._realFinish = false
          })
          return
        }
        self._realFinish = true
        self.emit('finish')
        self._realFinish = false
      })
    }
  } else { WritableStream.prototype.emit.apply(this, arguments) }
}

Dicer.prototype._write = function (data, encoding, cb) {
  // ignore unexpected data (e.g. extra trailer data after finished)
  if (!this._hparser && !this._bparser) { return cb() }

  if (this._headerFirst && this._isPreamble) {
    if (!this._part) {
      this._part = new PartStream(this._partOpts)
      if (this.listenerCount('preamble') !== 0) { this.emit('preamble', this._part) } else { this._ignore() }
    }
    const r = this._hparser.push(data)
    if (!this._inHeader && r !== undefined && r < data.length) { data = data.slice(r) } else { return cb() }
  }

  // allows for "easier" testing
  if (this._firstWrite) {
    this._bparser.push(B_CRLF)
    this._firstWrite = false
  }

  this._bparser.push(data)

  if (this._pause) { this._cb = cb } else { cb() }
}

Dicer.prototype.reset = function () {
  this._part = undefined
  this._bparser = undefined
  this._hparser = undefined
}

Dicer.prototype.setBoundary = function (boundary) {
  const self = this
  this._bparser = new StreamSearch('\r\n--' + boundary)
  this._bparser.on('info', function (isMatch, data, start, end) {
    self._oninfo(isMatch, data, start, end)
  })
}

Dicer.prototype._ignore = function () {
  if (this._part && !this._ignoreData) {
    this._ignoreData = true
    this._part.on('error', EMPTY_FN)
    // we must perform some kind of read on the stream even though we are
    // ignoring the data, otherwise node's Readable stream will not emit 'end'
    // after pushing null to the stream
    this._part.resume()
  }
}

Dicer.prototype._oninfo = function (isMatch, data, start, end) {
  let buf; const self = this; let i = 0; let r; let shouldWriteMore = true

  if (!this._part && this._justMatched && data) {
    while (this._dashes < 2 && (start + i) < end) {
      if (data[start + i] === DASH) {
        ++i
        ++this._dashes
      } else {
        if (this._dashes) { buf = B_ONEDASH }
        this._dashes = 0
        break
      }
    }
    if (this._dashes === 2) {
      if ((start + i) < end && this.listenerCount('trailer') !== 0) { this.emit('trailer', data.slice(start + i, end)) }
      this.reset()
      this._finished = true
      // no more parts will be added
      if (self._parts === 0) {
        self._realFinish = true
        self.emit('finish')
        self._realFinish = false
      }
    }
    if (this._dashes) { return }
  }
  if (this._justMatched) { this._justMatched = false }
  if (!this._part) {
    this._part = new PartStream(this._partOpts)
    this._part._read = function (n) {
      self._unpause()
    }
    if (this._isPreamble && this.listenerCount('preamble') !== 0) {
      this.emit('preamble', this._part)
    } else if (this._isPreamble !== true && this.listenerCount('part') !== 0) {
      this.emit('part', this._part)
    } else {
      this._ignore()
    }
    if (!this._isPreamble) { this._inHeader = true }
  }
  if (data && start < end && !this._ignoreData) {
    if (this._isPreamble || !this._inHeader) {
      if (buf) { shouldWriteMore = this._part.push(buf) }
      shouldWriteMore = this._part.push(data.slice(start, end))
      if (!shouldWriteMore) { this._pause = true }
    } else if (!this._isPreamble && this._inHeader) {
      if (buf) { this._hparser.push(buf) }
      r = this._hparser.push(data.slice(start, end))
      if (!this._inHeader && r !== undefined && r < end) { this._oninfo(false, data, start + r, end) }
    }
  }
  if (isMatch) {
    this._hparser.reset()
    if (this._isPreamble) { this._isPreamble = false } else {
      if (start !== end) {
        ++this._parts
        this._part.on('end', function () {
          if (--self._parts === 0) {
            if (self._finished) {
              self._realFinish = true
              self.emit('finish')
              self._realFinish = false
            } else {
              self._unpause()
            }
          }
        })
      }
    }
    this._part.push(null)
    this._part = undefined
    this._ignoreData = false
    this._justMatched = true
    this._dashes = 0
  }
}

Dicer.prototype._unpause = function () {
  if (!this._pause) { return }

  this._pause = false
  if (this._cb) {
    const cb = this._cb
    this._cb = undefined
    cb()
  }
}

module.exports = Dicer


/***/ }),

/***/ 800:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const EventEmitter = (__nccwpck_require__(8474).EventEmitter)
const inherits = (__nccwpck_require__(7975).inherits)
const getLimit = __nccwpck_require__(9796)

const StreamSearch = __nccwpck_require__(5365)

const B_DCRLF = Buffer.from('\r\n\r\n')
const RE_CRLF = /\r\n/g
const RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/ // eslint-disable-line no-control-regex

function HeaderParser (cfg) {
  EventEmitter.call(this)

  cfg = cfg || {}
  const self = this
  this.nread = 0
  this.maxed = false
  this.npairs = 0
  this.maxHeaderPairs = getLimit(cfg, 'maxHeaderPairs', 2000)
  this.maxHeaderSize = getLimit(cfg, 'maxHeaderSize', 80 * 1024)
  this.buffer = ''
  this.header = {}
  this.finished = false
  this.ss = new StreamSearch(B_DCRLF)
  this.ss.on('info', function (isMatch, data, start, end) {
    if (data && !self.maxed) {
      if (self.nread + end - start >= self.maxHeaderSize) {
        end = self.maxHeaderSize - self.nread + start
        self.nread = self.maxHeaderSize
        self.maxed = true
      } else { self.nread += (end - start) }

      self.buffer += data.toString('binary', start, end)
    }
    if (isMatch) { self._finish() }
  })
}
inherits(HeaderParser, EventEmitter)

HeaderParser.prototype.push = function (data) {
  const r = this.ss.push(data)
  if (this.finished) { return r }
}

HeaderParser.prototype.reset = function () {
  this.finished = false
  this.buffer = ''
  this.header = {}
  this.ss.reset()
}

HeaderParser.prototype._finish = function () {
  if (this.buffer) { this._parseHeader() }
  this.ss.matches = this.ss.maxMatches
  const header = this.header
  this.header = {}
  this.buffer = ''
  this.finished = true
  this.nread = this.npairs = 0
  this.maxed = false
  this.emit('header', header)
}

HeaderParser.prototype._parseHeader = function () {
  if (this.npairs === this.maxHeaderPairs) { return }

  const lines = this.buffer.split(RE_CRLF)
  const len = lines.length
  let m, h

  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    if (lines[i].length === 0) { continue }
    if (lines[i][0] === '\t' || lines[i][0] === ' ') {
      // folded header content
      // RFC2822 says to just remove the CRLF and not the whitespace following
      // it, so we follow the RFC and include the leading whitespace ...
      if (h) {
        this.header[h][this.header[h].length - 1] += lines[i]
        continue
      }
    }

    const posColon = lines[i].indexOf(':')
    if (
      posColon === -1 ||
      posColon === 0
    ) {
      return
    }
    m = RE_HDR.exec(lines[i])
    h = m[1].toLowerCase()
    this.header[h] = this.header[h] || []
    this.header[h].push((m[2] || ''))
    if (++this.npairs === this.maxHeaderPairs) { break }
  }
}

module.exports = HeaderParser


/***/ }),

/***/ 1359:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const inherits = (__nccwpck_require__(7975).inherits)
const ReadableStream = (__nccwpck_require__(7075).Readable)

function PartStream (opts) {
  ReadableStream.call(this, opts)
}
inherits(PartStream, ReadableStream)

PartStream.prototype._read = function (n) {}

module.exports = PartStream


/***/ }),

/***/ 5365:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


/**
 * Copyright Brian White. All rights reserved.
 *
 * @see https://github.com/mscdex/streamsearch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation
 * by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool
 */
const EventEmitter = (__nccwpck_require__(8474).EventEmitter)
const inherits = (__nccwpck_require__(7975).inherits)

function SBMH (needle) {
  if (typeof needle === 'string') {
    needle = Buffer.from(needle)
  }

  if (!Buffer.isBuffer(needle)) {
    throw new TypeError('The needle has to be a String or a Buffer.')
  }

  const needleLength = needle.length

  if (needleLength === 0) {
    throw new Error('The needle cannot be an empty String/Buffer.')
  }

  if (needleLength > 256) {
    throw new Error('The needle cannot have a length bigger than 256.')
  }

  this.maxMatches = Infinity
  this.matches = 0

  this._occ = new Array(256)
    .fill(needleLength) // Initialize occurrence table.
  this._lookbehind_size = 0
  this._needle = needle
  this._bufpos = 0

  this._lookbehind = Buffer.alloc(needleLength)

  // Populate occurrence table with analysis of the needle,
  // ignoring last letter.
  for (var i = 0; i < needleLength - 1; ++i) { // eslint-disable-line no-var
    this._occ[needle[i]] = needleLength - 1 - i
  }
}
inherits(SBMH, EventEmitter)

SBMH.prototype.reset = function () {
  this._lookbehind_size = 0
  this.matches = 0
  this._bufpos = 0
}

SBMH.prototype.push = function (chunk, pos) {
  if (!Buffer.isBuffer(chunk)) {
    chunk = Buffer.from(chunk, 'binary')
  }
  const chlen = chunk.length
  this._bufpos = pos || 0
  let r
  while (r !== chlen && this.matches < this.maxMatches) { r = this._sbmh_feed(chunk) }
  return r
}

SBMH.prototype._sbmh_feed = function (data) {
  const len = data.length
  const needle = this._needle
  const needleLength = needle.length
  const lastNeedleChar = needle[needleLength - 1]

  // Positive: points to a position in `data`
  //           pos == 3 points to data[3]
  // Negative: points to a position in the lookbehind buffer
  //           pos == -2 points to lookbehind[lookbehind_size - 2]
  let pos = -this._lookbehind_size
  let ch

  if (pos < 0) {
    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool
    // search with character lookup code that considers both the
    // lookbehind buffer and the current round's haystack data.
    //
    // Loop until
    //   there is a match.
    // or until
    //   we've moved past the position that requires the
    //   lookbehind buffer. In this case we switch to the
    //   optimized loop.
    // or until
    //   the character to look at lies outside the haystack.
    while (pos < 0 && pos <= len - needleLength) {
      ch = this._sbmh_lookup_char(data, pos + needleLength - 1)

      if (
        ch === lastNeedleChar &&
        this._sbmh_memcmp(data, pos, needleLength - 1)
      ) {
        this._lookbehind_size = 0
        ++this.matches
        this.emit('info', true)

        return (this._bufpos = pos + needleLength)
      }
      pos += this._occ[ch]
    }

    // No match.

    if (pos < 0) {
      // There's too few data for Boyer-Moore-Horspool to run,
      // so let's use a different algorithm to skip as much as
      // we can.
      // Forward pos until
      //   the trailing part of lookbehind + data
      //   looks like the beginning of the needle
      // or until
      //   pos == 0
      while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) { ++pos }
    }

    if (pos >= 0) {
      // Discard lookbehind buffer.
      this.emit('info', false, this._lookbehind, 0, this._lookbehind_size)
      this._lookbehind_size = 0
    } else {
      // Cut off part of the lookbehind buffer that has
      // been processed and append the entire haystack
      // into it.
      const bytesToCutOff = this._lookbehind_size + pos
      if (bytesToCutOff > 0) {
        // The cut off data is guaranteed not to contain the needle.
        this.emit('info', false, this._lookbehind, 0, bytesToCutOff)
      }

      this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff,
        this._lookbehind_size - bytesToCutOff)
      this._lookbehind_size -= bytesToCutOff

      data.copy(this._lookbehind, this._lookbehind_size)
      this._lookbehind_size += len

      this._bufpos = len
      return len
    }
  }

  pos += (pos >= 0) * this._bufpos

  // Lookbehind buffer is now empty. We only need to check if the
  // needle is in the haystack.
  if (data.indexOf(needle, pos) !== -1) {
    pos = data.indexOf(needle, pos)
    ++this.matches
    if (pos > 0) { this.emit('info', true, data, this._bufpos, pos) } else { this.emit('info', true) }

    return (this._bufpos = pos + needleLength)
  } else {
    pos = len - needleLength
  }

  // There was no match. If there's trailing haystack data that we cannot
  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing
  // data is less than the needle size) then match using a modified
  // algorithm that starts matching from the beginning instead of the end.
  // Whatever trailing data is left after running this algorithm is added to
  // the lookbehind buffer.
  while (
    pos < len &&
    (
      data[pos] !== needle[0] ||
      (
        (Buffer.compare(
          data.subarray(pos, pos + len - pos),
          needle.subarray(0, len - pos)
        ) !== 0)
      )
    )
  ) {
    ++pos
  }
  if (pos < len) {
    data.copy(this._lookbehind, 0, pos, pos + (len - pos))
    this._lookbehind_size = len - pos
  }

  // Everything until pos is guaranteed not to contain needle data.
  if (pos > 0) { this.emit('info', false, data, this._bufpos, pos < len ? pos : len) }

  this._bufpos = len
  return len
}

SBMH.prototype._sbmh_lookup_char = function (data, pos) {
  return (pos < 0)
    ? this._lookbehind[this._lookbehind_size + pos]
    : data[pos]
}

SBMH.prototype._sbmh_memcmp = function (data, pos, len) {
  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) { return false }
  }
  return true
}

module.exports = SBMH


/***/ }),

/***/ 1608:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const WritableStream = (__nccwpck_require__(7075).Writable)
const { inherits } = __nccwpck_require__(7975)
const Dicer = __nccwpck_require__(1615)

const MultipartParser = __nccwpck_require__(5719)
const UrlencodedParser = __nccwpck_require__(8426)
const parseParams = __nccwpck_require__(8814)

function Busboy (opts) {
  if (!(this instanceof Busboy)) { return new Busboy(opts) }

  if (typeof opts !== 'object') {
    throw new TypeError('Busboy expected an options-Object.')
  }
  if (typeof opts.headers !== 'object') {
    throw new TypeError('Busboy expected an options-Object with headers-attribute.')
  }
  if (typeof opts.headers['content-type'] !== 'string') {
    throw new TypeError('Missing Content-Type-header.')
  }

  const {
    headers,
    ...streamOptions
  } = opts

  this.opts = {
    autoDestroy: false,
    ...streamOptions
  }
  WritableStream.call(this, this.opts)

  this._done = false
  this._parser = this.getParserByHeaders(headers)
  this._finished = false
}
inherits(Busboy, WritableStream)

Busboy.prototype.emit = function (ev) {
  if (ev === 'finish') {
    if (!this._done) {
      this._parser?.end()
      return
    } else if (this._finished) {
      return
    }
    this._finished = true
  }
  WritableStream.prototype.emit.apply(this, arguments)
}

Busboy.prototype.getParserByHeaders = function (headers) {
  const parsed = parseParams(headers['content-type'])

  const cfg = {
    defCharset: this.opts.defCharset,
    fileHwm: this.opts.fileHwm,
    headers,
    highWaterMark: this.opts.highWaterMark,
    isPartAFile: this.opts.isPartAFile,
    limits: this.opts.limits,
    parsedConType: parsed,
    preservePath: this.opts.preservePath
  }

  if (MultipartParser.detect.test(parsed[0])) {
    return new MultipartParser(this, cfg)
  }
  if (UrlencodedParser.detect.test(parsed[0])) {
    return new UrlencodedParser(this, cfg)
  }
  throw new Error('Unsupported Content-Type.')
}

Busboy.prototype._write = function (chunk, encoding, cb) {
  this._parser.write(chunk, cb)
}

module.exports = Busboy
module.exports["default"] = Busboy
module.exports.Busboy = Busboy

module.exports.Dicer = Dicer


/***/ }),

/***/ 5719:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


// TODO:
//  * support 1 nested multipart level
//    (see second multipart example here:
//     http://www.w3.org/TR/html401/interact/forms.html#didx-multipartform-data)
//  * support limits.fieldNameSize
//     -- this will require modifications to utils.parseParams

const { Readable } = __nccwpck_require__(7075)
const { inherits } = __nccwpck_require__(7975)

const Dicer = __nccwpck_require__(1615)

const parseParams = __nccwpck_require__(8814)
const decodeText = __nccwpck_require__(8506)
const basename = __nccwpck_require__(5033)
const getLimit = __nccwpck_require__(9796)

const RE_BOUNDARY = /^boundary$/i
const RE_FIELD = /^form-data$/i
const RE_CHARSET = /^charset$/i
const RE_FILENAME = /^filename$/i
const RE_NAME = /^name$/i

Multipart.detect = /^multipart\/form-data/i
function Multipart (boy, cfg) {
  let i
  let len
  const self = this
  let boundary
  const limits = cfg.limits
  const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => (contentType === 'application/octet-stream' || fileName !== undefined))
  const parsedConType = cfg.parsedConType || []
  const defCharset = cfg.defCharset || 'utf8'
  const preservePath = cfg.preservePath
  const fileOpts = { highWaterMark: cfg.fileHwm }

  for (i = 0, len = parsedConType.length; i < len; ++i) {
    if (Array.isArray(parsedConType[i]) &&
      RE_BOUNDARY.test(parsedConType[i][0])) {
      boundary = parsedConType[i][1]
      break
    }
  }

  function checkFinished () {
    if (nends === 0 && finished && !boy._done) {
      finished = false
      self.end()
    }
  }

  if (typeof boundary !== 'string') { throw new Error('Multipart: Boundary not found') }

  const fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)
  const fileSizeLimit = getLimit(limits, 'fileSize', Infinity)
  const filesLimit = getLimit(limits, 'files', Infinity)
  const fieldsLimit = getLimit(limits, 'fields', Infinity)
  const partsLimit = getLimit(limits, 'parts', Infinity)
  const headerPairsLimit = getLimit(limits, 'headerPairs', 2000)
  const headerSizeLimit = getLimit(limits, 'headerSize', 80 * 1024)

  let nfiles = 0
  let nfields = 0
  let nends = 0
  let curFile
  let curField
  let finished = false

  this._needDrain = false
  this._pause = false
  this._cb = undefined
  this._nparts = 0
  this._boy = boy

  const parserCfg = {
    boundary,
    maxHeaderPairs: headerPairsLimit,
    maxHeaderSize: headerSizeLimit,
    partHwm: fileOpts.highWaterMark,
    highWaterMark: cfg.highWaterMark
  }

  this.parser = new Dicer(parserCfg)
  this.parser.on('drain', function () {
    self._needDrain = false
    if (self._cb && !self._pause) {
      const cb = self._cb
      self._cb = undefined
      cb()
    }
  }).on('part', function onPart (part) {
    if (++self._nparts > partsLimit) {
      self.parser.removeListener('part', onPart)
      self.parser.on('part', skipPart)
      boy.hitPartsLimit = true
      boy.emit('partsLimit')
      return skipPart(part)
    }

    // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let
    // us emit 'end' early since we know the part has ended if we are already
    // seeing the next part
    if (curField) {
      const field = curField
      field.emit('end')
      field.removeAllListeners('end')
    }

    part.on('header', function (header) {
      let contype
      let fieldname
      let parsed
      let charset
      let encoding
      let filename
      let nsize = 0

      if (header['content-type']) {
        parsed = parseParams(header['content-type'][0])
        if (parsed[0]) {
          contype = parsed[0].toLowerCase()
          for (i = 0, len = parsed.length; i < len; ++i) {
            if (RE_CHARSET.test(parsed[i][0])) {
              charset = parsed[i][1].toLowerCase()
              break
            }
          }
        }
      }

      if (contype === undefined) { contype = 'text/plain' }
      if (charset === undefined) { charset = defCharset }

      if (header['content-disposition']) {
        parsed = parseParams(header['content-disposition'][0])
        if (!RE_FIELD.test(parsed[0])) { return skipPart(part) }
        for (i = 0, len = parsed.length; i < len; ++i) {
          if (RE_NAME.test(parsed[i][0])) {
            fieldname = parsed[i][1]
          } else if (RE_FILENAME.test(parsed[i][0])) {
            filename = parsed[i][1]
            if (!preservePath) { filename = basename(filename) }
          }
        }
      } else { return skipPart(part) }

      if (header['content-transfer-encoding']) { encoding = header['content-transfer-encoding'][0].toLowerCase() } else { encoding = '7bit' }

      let onData,
        onEnd

      if (isPartAFile(fieldname, contype, filename)) {
        // file/binary field
        if (nfiles === filesLimit) {
          if (!boy.hitFilesLimit) {
            boy.hitFilesLimit = true
            boy.emit('filesLimit')
          }
          return skipPart(part)
        }

        ++nfiles

        if (boy.listenerCount('file') === 0) {
          self.parser._ignore()
          return
        }

        ++nends
        const file = new FileStream(fileOpts)
        curFile = file
        file.on('end', function () {
          --nends
          self._pause = false
          checkFinished()
          if (self._cb && !self._needDrain) {
            const cb = self._cb
            self._cb = undefined
            cb()
          }
        })
        file._read = function (n) {
          if (!self._pause) { return }
          self._pause = false
          if (self._cb && !self._needDrain) {
            const cb = self._cb
            self._cb = undefined
            cb()
          }
        }
        boy.emit('file', fieldname, file, filename, encoding, contype)

        onData = function (data) {
          if ((nsize += data.length) > fileSizeLimit) {
            const extralen = fileSizeLimit - nsize + data.length
            if (extralen > 0) { file.push(data.slice(0, extralen)) }
            file.truncated = true
            file.bytesRead = fileSizeLimit
            part.removeAllListeners('data')
            file.emit('limit')
            return
          } else if (!file.push(data)) { self._pause = true }

          file.bytesRead = nsize
        }

        onEnd = function () {
          curFile = undefined
          file.push(null)
        }
      } else {
        // non-file field
        if (nfields === fieldsLimit) {
          if (!boy.hitFieldsLimit) {
            boy.hitFieldsLimit = true
            boy.emit('fieldsLimit')
          }
          return skipPart(part)
        }

        ++nfields
        ++nends
        let buffer = ''
        let truncated = false
        curField = part

        onData = function (data) {
          if ((nsize += data.length) > fieldSizeLimit) {
            const extralen = (fieldSizeLimit - (nsize - data.length))
            buffer += data.toString('binary', 0, extralen)
            truncated = true
            part.removeAllListeners('data')
          } else { buffer += data.toString('binary') }
        }

        onEnd = function () {
          curField = undefined
          if (buffer.length) { buffer = decodeText(buffer, 'binary', charset) }
          boy.emit('field', fieldname, buffer, false, truncated, encoding, contype)
          --nends
          checkFinished()
        }
      }

      /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become
         broken. Streams2/streams3 is a huge black box of confusion, but
         somehow overriding the sync state seems to fix things again (and still
         seems to work for previous node versions).
      */
      part._readableState.sync = false

      part.on('data', onData)
      part.on('end', onEnd)
    }).on('error', function (err) {
      if (curFile) { curFile.emit('error', err) }
    })
  }).on('error', function (err) {
    boy.emit('error', err)
  }).on('finish', function () {
    finished = true
    checkFinished()
  })
}

Multipart.prototype.write = function (chunk, cb) {
  const r = this.parser.write(chunk)
  if (r && !this._pause) {
    cb()
  } else {
    this._needDrain = !r
    this._cb = cb
  }
}

Multipart.prototype.end = function () {
  const self = this

  if (self.parser.writable) {
    self.parser.end()
  } else if (!self._boy._done) {
    process.nextTick(function () {
      self._boy._done = true
      self._boy.emit('finish')
    })
  }
}

function skipPart (part) {
  part.resume()
}

function FileStream (opts) {
  Readable.call(this, opts)

  this.bytesRead = 0

  this.truncated = false
}

inherits(FileStream, Readable)

FileStream.prototype._read = function (n) {}

module.exports = Multipart


/***/ }),

/***/ 8426:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";


const Decoder = __nccwpck_require__(8871)
const decodeText = __nccwpck_require__(8506)
const getLimit = __nccwpck_require__(9796)

const RE_CHARSET = /^charset$/i

UrlEncoded.detect = /^application\/x-www-form-urlencoded/i
function UrlEncoded (boy, cfg) {
  const limits = cfg.limits
  const parsedConType = cfg.parsedConType
  this.boy = boy

  this.fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)
  this.fieldNameSizeLimit = getLimit(limits, 'fieldNameSize', 100)
  this.fieldsLimit = getLimit(limits, 'fields', Infinity)

  let charset
  for (var i = 0, len = parsedConType.length; i < len; ++i) { // eslint-disable-line no-var
    if (Array.isArray(parsedConType[i]) &&
        RE_CHARSET.test(parsedConType[i][0])) {
      charset = parsedConType[i][1].toLowerCase()
      break
    }
  }

  if (charset === undefined) { charset = cfg.defCharset || 'utf8' }

  this.decoder = new Decoder()
  this.charset = charset
  this._fields = 0
  this._state = 'key'
  this._checkingBytes = true
  this._bytesKey = 0
  this._bytesVal = 0
  this._key = ''
  this._val = ''
  this._keyTrunc = false
  this._valTrunc = false
  this._hitLimit = false
}

UrlEncoded.prototype.write = function (data, cb) {
  if (this._fields === this.fieldsLimit) {
    if (!this.boy.hitFieldsLimit) {
      this.boy.hitFieldsLimit = true
      this.boy.emit('fieldsLimit')
    }
    return cb()
  }

  let idxeq; let idxamp; let i; let p = 0; const len = data.length

  while (p < len) {
    if (this._state === 'key') {
      idxeq = idxamp = undefined
      for (i = p; i < len; ++i) {
        if (!this._checkingBytes) { ++p }
        if (data[i] === 0x3D/* = */) {
          idxeq = i
          break
        } else if (data[i] === 0x26/* & */) {
          idxamp = i
          break
        }
        if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
          this._hitLimit = true
          break
        } else if (this._checkingBytes) { ++this._bytesKey }
      }

      if (idxeq !== undefined) {
        // key with assignment
        if (idxeq > p) { this._key += this.decoder.write(data.toString('binary', p, idxeq)) }
        this._state = 'val'

        this._hitLimit = false
        this._checkingBytes = true
        this._val = ''
        this._bytesVal = 0
        this._valTrunc = false
        this.decoder.reset()

        p = idxeq + 1
      } else if (idxamp !== undefined) {
        // key with no assignment
        ++this._fields
        let key; const keyTrunc = this._keyTrunc
        if (idxamp > p) { key = (this._key += this.decoder.write(data.toString('binary', p, idxamp))) } else { key = this._key }

        this._hitLimit = false
        this._checkingBytes = true
        this._key = ''
        this._bytesKey = 0
        this._keyTrunc = false
        this.decoder.reset()

        if (key.length) {
          this.boy.emit('field', decodeText(key, 'binary', this.charset),
            '',
            keyTrunc,
            false)
        }

        p = idxamp + 1
        if (this._fields === this.fieldsLimit) { return cb() }
      } else if (this._hitLimit) {
        // we may not have hit the actual limit if there are encoded bytes...
        if (i > p) { this._key += this.decoder.write(data.toString('binary', p, i)) }
        p = i
        if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
          // yep, we actually did hit the limit
          this._checkingBytes = false
          this._keyTrunc = true
        }
      } else {
        if (p < len) { this._key += this.decoder.write(data.toString('binary', p)) }
        p = len
      }
    } else {
      idxamp = undefined
      for (i = p; i < len; ++i) {
        if (!this._checkingBytes) { ++p }
        if (data[i] === 0x26/* & */) {
          idxamp = i
          break
        }
        if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
          this._hitLimit = true
          break
        } else if (this._checkingBytes) { ++this._bytesVal }
      }

      if (idxamp !== undefined) {
        ++this._fields
        if (idxamp > p) { this._val += this.decoder.write(data.toString('binary', p, idxamp)) }
        this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
          decodeText(this._val, 'binary', this.charset),
          this._keyTrunc,
          this._valTrunc)
        this._state = 'key'

        this._hitLimit = false
        this._checkingBytes = true
        this._key = ''
        this._bytesKey = 0
        this._keyTrunc = false
        this.decoder.reset()

        p = idxamp + 1
        if (this._fields === this.fieldsLimit) { return cb() }
      } else if (this._hitLimit) {
        // we may not have hit the actual limit if there are encoded bytes...
        if (i > p) { this._val += this.decoder.write(data.toString('binary', p, i)) }
        p = i
        if ((this._val === '' && this.fieldSizeLimit === 0) ||
            (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
          // yep, we actually did hit the limit
          this._checkingBytes = false
          this._valTrunc = true
        }
      } else {
        if (p < len) { this._val += this.decoder.write(data.toString('binary', p)) }
        p = len
      }
    }
  }
  cb()
}

UrlEncoded.prototype.end = function () {
  if (this.boy._done) { return }

  if (this._state === 'key' && this._key.length > 0) {
    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
      '',
      this._keyTrunc,
      false)
  } else if (this._state === 'val') {
    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),
      decodeText(this._val, 'binary', this.charset),
      this._keyTrunc,
      this._valTrunc)
  }
  this.boy._done = true
  this.boy.emit('finish')
}

module.exports = UrlEncoded


/***/ }),

/***/ 8871:
/***/ ((module) => {

"use strict";


const RE_PLUS = /\+/g

const HEX = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

function Decoder () {
  this.buffer = undefined
}
Decoder.prototype.write = function (str) {
  // Replace '+' with ' ' before decoding
  str = str.replace(RE_PLUS, ' ')
  let res = ''
  let i = 0; let p = 0; const len = str.length
  for (; i < len; ++i) {
    if (this.buffer !== undefined) {
      if (!HEX[str.charCodeAt(i)]) {
        res += '%' + this.buffer
        this.buffer = undefined
        --i // retry character
      } else {
        this.buffer += str[i]
        ++p
        if (this.buffer.length === 2) {
          res += String.fromCharCode(parseInt(this.buffer, 16))
          this.buffer = undefined
        }
      }
    } else if (str[i] === '%') {
      if (i > p) {
        res += str.substring(p, i)
        p = i
      }
      this.buffer = ''
      ++p
    }
  }
  if (p < len && this.buffer === undefined) { res += str.substring(p) }
  return res
}
Decoder.prototype.reset = function () {
  this.buffer = undefined
}

module.exports = Decoder


/***/ }),

/***/ 5033:
/***/ ((module) => {

"use strict";


module.exports = function basename (path) {
  if (typeof path !== 'string') { return '' }
  for (var i = path.length - 1; i >= 0; --i) { // eslint-disable-line no-var
    switch (path.charCodeAt(i)) {
      case 0x2F: // '/'
      case 0x5C: // '\'
        path = path.slice(i + 1)
        return (path === '..' || path === '.' ? '' : path)
    }
  }
  return (path === '..' || path === '.' ? '' : path)
}


/***/ }),

/***/ 8506:
/***/ (function(module) {

"use strict";


// Node has always utf-8
const utf8Decoder = new TextDecoder('utf-8')
const textDecoders = new Map([
  ['utf-8', utf8Decoder],
  ['utf8', utf8Decoder]
])

function getDecoder (charset) {
  let lc
  while (true) {
    switch (charset) {
      case 'utf-8':
      case 'utf8':
        return decoders.utf8
      case 'latin1':
      case 'ascii': // TODO: Make these a separate, strict decoder?
      case 'us-ascii':
      case 'iso-8859-1':
      case 'iso8859-1':
      case 'iso88591':
      case 'iso_8859-1':
      case 'windows-1252':
      case 'iso_8859-1:1987':
      case 'cp1252':
      case 'x-cp1252':
        return decoders.latin1
      case 'utf16le':
      case 'utf-16le':
      case 'ucs2':
      case 'ucs-2':
        return decoders.utf16le
      case 'base64':
        return decoders.base64
      default:
        if (lc === undefined) {
          lc = true
          charset = charset.toLowerCase()
          continue
        }
        return decoders.other.bind(charset)
    }
  }
}

const decoders = {
  utf8: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.utf8Slice(0, data.length)
  },

  latin1: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      return data
    }
    return data.latin1Slice(0, data.length)
  },

  utf16le: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.ucs2Slice(0, data.length)
  },

  base64: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }
    return data.base64Slice(0, data.length)
  },

  other: (data, sourceEncoding) => {
    if (data.length === 0) {
      return ''
    }
    if (typeof data === 'string') {
      data = Buffer.from(data, sourceEncoding)
    }

    if (textDecoders.has(this.toString())) {
      try {
        return textDecoders.get(this).decode(data)
      } catch {}
    }
    return typeof data === 'string'
      ? data
      : data.toString()
  }
}

function decodeText (text, sourceEncoding, destEncoding) {
  if (text) {
    return getDecoder(destEncoding)(text, sourceEncoding)
  }
  return text
}

module.exports = decodeText


/***/ }),

/***/ 9796:
/***/ ((module) => {

"use strict";


module.exports = function getLimit (limits, name, defaultLimit) {
  if (
    !limits ||
    limits[name] === undefined ||
    limits[name] === null
  ) { return defaultLimit }

  if (
    typeof limits[name] !== 'number' ||
    isNaN(limits[name])
  ) { throw new TypeError('Limit ' + name + ' is not a valid number') }

  return limits[name]
}


/***/ }),

/***/ 8814:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

"use strict";
/* eslint-disable object-property-newline */


const decodeText = __nccwpck_require__(8506)

const RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g

const EncodedLookup = {
  '%00': '\x00', '%01': '\x01', '%02': '\x02', '%03': '\x03', '%04': '\x04',
  '%05': '\x05', '%06': '\x06', '%07': '\x07', '%08': '\x08', '%09': '\x09',
  '%0a': '\x0a', '%0A': '\x0a', '%0b': '\x0b', '%0B': '\x0b', '%0c': '\x0c',
  '%0C': '\x0c', '%0d': '\x0d', '%0D': '\x0d', '%0e': '\x0e', '%0E': '\x0e',
  '%0f': '\x0f', '%0F': '\x0f', '%10': '\x10', '%11': '\x11', '%12': '\x12',
  '%13': '\x13', '%14': '\x14', '%15': '\x15', '%16': '\x16', '%17': '\x17',
  '%18': '\x18', '%19': '\x19', '%1a': '\x1a', '%1A': '\x1a', '%1b': '\x1b',
  '%1B': '\x1b', '%1c': '\x1c', '%1C': '\x1c', '%1d': '\x1d', '%1D': '\x1d',
  '%1e': '\x1e', '%1E': '\x1e', '%1f': '\x1f', '%1F': '\x1f', '%20': '\x20',
  '%21': '\x21', '%22': '\x22', '%23': '\x23', '%24': '\x24', '%25': '\x25',
  '%26': '\x26', '%27': '\x27', '%28': '\x28', '%29': '\x29', '%2a': '\x2a',
  '%2A': '\x2a', '%2b': '\x2b', '%2B': '\x2b', '%2c': '\x2c', '%2C': '\x2c',
  '%2d': '\x2d', '%2D': '\x2d', '%2e': '\x2e', '%2E': '\x2e', '%2f': '\x2f',
  '%2F': '\x2f', '%30': '\x30', '%31': '\x31', '%32': '\x32', '%33': '\x33',
  '%34': '\x34', '%35': '\x35', '%36': '\x36', '%37': '\x37', '%38': '\x38',
  '%39': '\x39', '%3a': '\x3a', '%3A': '\x3a', '%3b': '\x3b', '%3B': '\x3b',
  '%3c': '\x3c', '%3C': '\x3c', '%3d': '\x3d', '%3D': '\x3d', '%3e': '\x3e',
  '%3E': '\x3e', '%3f': '\x3f', '%3F': '\x3f', '%40': '\x40', '%41': '\x41',
  '%42': '\x42', '%43': '\x43', '%44': '\x44', '%45': '\x45', '%46': '\x46',
  '%47': '\x47', '%48': '\x48', '%49': '\x49', '%4a': '\x4a', '%4A': '\x4a',
  '%4b': '\x4b', '%4B': '\x4b', '%4c': '\x4c', '%4C': '\x4c', '%4d': '\x4d',
  '%4D': '\x4d', '%4e': '\x4e', '%4E': '\x4e', '%4f': '\x4f', '%4F': '\x4f',
  '%50': '\x50', '%51': '\x51', '%52': '\x52', '%53': '\x53', '%54': '\x54',
  '%55': '\x55', '%56': '\x56', '%57': '\x57', '%58': '\x58', '%59': '\x59',
  '%5a': '\x5a', '%5A': '\x5a', '%5b': '\x5b', '%5B': '\x5b', '%5c': '\x5c',
  '%5C': '\x5c', '%5d': '\x5d', '%5D': '\x5d', '%5e': '\x5e', '%5E': '\x5e',
  '%5f': '\x5f', '%5F': '\x5f', '%60': '\x60', '%61': '\x61', '%62': '\x62',
  '%63': '\x63', '%64': '\x64', '%65': '\x65', '%66': '\x66', '%67': '\x67',
  '%68': '\x68', '%69': '\x69', '%6a': '\x6a', '%6A': '\x6a', '%6b': '\x6b',
  '%6B': '\x6b', '%6c': '\x6c', '%6C': '\x6c', '%6d': '\x6d', '%6D': '\x6d',
  '%6e': '\x6e', '%6E': '\x6e', '%6f': '\x6f', '%6F': '\x6f', '%70': '\x70',
  '%71': '\x71', '%72': '\x72', '%73': '\x73', '%74': '\x74', '%75': '\x75',
  '%76': '\x76', '%77': '\x77', '%78': '\x78', '%79': '\x79', '%7a': '\x7a',
  '%7A': '\x7a', '%7b': '\x7b', '%7B': '\x7b', '%7c': '\x7c', '%7C': '\x7c',
  '%7d': '\x7d', '%7D': '\x7d', '%7e': '\x7e', '%7E': '\x7e', '%7f': '\x7f',
  '%7F': '\x7f', '%80': '\x80', '%81': '\x81', '%82': '\x82', '%83': '\x83',
  '%84': '\x84', '%85': '\x85', '%86': '\x86', '%87': '\x87', '%88': '\x88',
  '%89': '\x89', '%8a': '\x8a', '%8A': '\x8a', '%8b': '\x8b', '%8B': '\x8b',
  '%8c': '\x8c', '%8C': '\x8c', '%8d': '\x8d', '%8D': '\x8d', '%8e': '\x8e',
  '%8E': '\x8e', '%8f': '\x8f', '%8F': '\x8f', '%90': '\x90', '%91': '\x91',
  '%92': '\x92', '%93': '\x93', '%94': '\x94', '%95': '\x95', '%96': '\x96',
  '%97': '\x97', '%98': '\x98', '%99': '\x99', '%9a': '\x9a', '%9A': '\x9a',
  '%9b': '\x9b', '%9B': '\x9b', '%9c': '\x9c', '%9C': '\x9c', '%9d': '\x9d',
  '%9D': '\x9d', '%9e': '\x9e', '%9E': '\x9e', '%9f': '\x9f', '%9F': '\x9f',
  '%a0': '\xa0', '%A0': '\xa0', '%a1': '\xa1', '%A1': '\xa1', '%a2': '\xa2',
  '%A2': '\xa2', '%a3': '\xa3', '%A3': '\xa3', '%a4': '\xa4', '%A4': '\xa4',
  '%a5': '\xa5', '%A5': '\xa5', '%a6': '\xa6', '%A6': '\xa6', '%a7': '\xa7',
  '%A7': '\xa7', '%a8': '\xa8', '%A8': '\xa8', '%a9': '\xa9', '%A9': '\xa9',
  '%aa': '\xaa', '%Aa': '\xaa', '%aA': '\xaa', '%AA': '\xaa', '%ab': '\xab',
  '%Ab': '\xab', '%aB': '\xab', '%AB': '\xab', '%ac': '\xac', '%Ac': '\xac',
  '%aC': '\xac', '%AC': '\xac', '%ad': '\xad', '%Ad': '\xad', '%aD': '\xad',
  '%AD': '\xad', '%ae': '\xae', '%Ae': '\xae', '%aE': '\xae', '%AE': '\xae',
  '%af': '\xaf', '%Af': '\xaf', '%aF': '\xaf', '%AF': '\xaf', '%b0': '\xb0',
  '%B0': '\xb0', '%b1': '\xb1', '%B1': '\xb1', '%b2': '\xb2', '%B2': '\xb2',
  '%b3': '\xb3', '%B3': '\xb3', '%b4': '\xb4', '%B4': '\xb4', '%b5': '\xb5',
  '%B5': '\xb5', '%b6': '\xb6', '%B6': '\xb6', '%b7': '\xb7', '%B7': '\xb7',
  '%b8': '\xb8', '%B8': '\xb8', '%b9': '\xb9', '%B9': '\xb9', '%ba': '\xba',
  '%Ba': '\xba', '%bA': '\xba', '%BA': '\xba', '%bb': '\xbb', '%Bb': '\xbb',
  '%bB': '\xbb', '%BB': '\xbb', '%bc': '\xbc', '%Bc': '\xbc', '%bC': '\xbc',
  '%BC': '\xbc', '%bd': '\xbd', '%Bd': '\xbd', '%bD': '\xbd', '%BD': '\xbd',
  '%be': '\xbe', '%Be': '\xbe', '%bE': '\xbe', '%BE': '\xbe', '%bf': '\xbf',
  '%Bf': '\xbf', '%bF': '\xbf', '%BF': '\xbf', '%c0': '\xc0', '%C0': '\xc0',
  '%c1': '\xc1', '%C1': '\xc1', '%c2': '\xc2', '%C2': '\xc2', '%c3': '\xc3',
  '%C3': '\xc3', '%c4': '\xc4', '%C4': '\xc4', '%c5': '\xc5', '%C5': '\xc5',
  '%c6': '\xc6', '%C6': '\xc6', '%c7': '\xc7', '%C7': '\xc7', '%c8': '\xc8',
  '%C8': '\xc8', '%c9': '\xc9', '%C9': '\xc9', '%ca': '\xca', '%Ca': '\xca',
  '%cA': '\xca', '%CA': '\xca', '%cb': '\xcb', '%Cb': '\xcb', '%cB': '\xcb',
  '%CB': '\xcb', '%cc': '\xcc', '%Cc': '\xcc', '%cC': '\xcc', '%CC': '\xcc',
  '%cd': '\xcd', '%Cd': '\xcd', '%cD': '\xcd', '%CD': '\xcd', '%ce': '\xce',
  '%Ce': '\xce', '%cE': '\xce', '%CE': '\xce', '%cf': '\xcf', '%Cf': '\xcf',
  '%cF': '\xcf', '%CF': '\xcf', '%d0': '\xd0', '%D0': '\xd0', '%d1': '\xd1',
  '%D1': '\xd1', '%d2': '\xd2', '%D2': '\xd2', '%d3': '\xd3', '%D3': '\xd3',
  '%d4': '\xd4', '%D4': '\xd4', '%d5': '\xd5', '%D5': '\xd5', '%d6': '\xd6',
  '%D6': '\xd6', '%d7': '\xd7', '%D7': '\xd7', '%d8': '\xd8', '%D8': '\xd8',
  '%d9': '\xd9', '%D9': '\xd9', '%da': '\xda', '%Da': '\xda', '%dA': '\xda',
  '%DA': '\xda', '%db': '\xdb', '%Db': '\xdb', '%dB': '\xdb', '%DB': '\xdb',
  '%dc': '\xdc', '%Dc': '\xdc', '%dC': '\xdc', '%DC': '\xdc', '%dd': '\xdd',
  '%Dd': '\xdd', '%dD': '\xdd', '%DD': '\xdd', '%de': '\xde', '%De': '\xde',
  '%dE': '\xde', '%DE': '\xde', '%df': '\xdf', '%Df': '\xdf', '%dF': '\xdf',
  '%DF': '\xdf', '%e0': '\xe0', '%E0': '\xe0', '%e1': '\xe1', '%E1': '\xe1',
  '%e2': '\xe2', '%E2': '\xe2', '%e3': '\xe3', '%E3': '\xe3', '%e4': '\xe4',
  '%E4': '\xe4', '%e5': '\xe5', '%E5': '\xe5', '%e6': '\xe6', '%E6': '\xe6',
  '%e7': '\xe7', '%E7': '\xe7', '%e8': '\xe8', '%E8': '\xe8', '%e9': '\xe9',
  '%E9': '\xe9', '%ea': '\xea', '%Ea': '\xea', '%eA': '\xea', '%EA': '\xea',
  '%eb': '\xeb', '%Eb': '\xeb', '%eB': '\xeb', '%EB': '\xeb', '%ec': '\xec',
  '%Ec': '\xec', '%eC': '\xec', '%EC': '\xec', '%ed': '\xed', '%Ed': '\xed',
  '%eD': '\xed', '%ED': '\xed', '%ee': '\xee', '%Ee': '\xee', '%eE': '\xee',
  '%EE': '\xee', '%ef': '\xef', '%Ef': '\xef', '%eF': '\xef', '%EF': '\xef',
  '%f0': '\xf0', '%F0': '\xf0', '%f1': '\xf1', '%F1': '\xf1', '%f2': '\xf2',
  '%F2': '\xf2', '%f3': '\xf3', '%F3': '\xf3', '%f4': '\xf4', '%F4': '\xf4',
  '%f5': '\xf5', '%F5': '\xf5', '%f6': '\xf6', '%F6': '\xf6', '%f7': '\xf7',
  '%F7': '\xf7', '%f8': '\xf8', '%F8': '\xf8', '%f9': '\xf9', '%F9': '\xf9',
  '%fa': '\xfa', '%Fa': '\xfa', '%fA': '\xfa', '%FA': '\xfa', '%fb': '\xfb',
  '%Fb': '\xfb', '%fB': '\xfb', '%FB': '\xfb', '%fc': '\xfc', '%Fc': '\xfc',
  '%fC': '\xfc', '%FC': '\xfc', '%fd': '\xfd', '%Fd': '\xfd', '%fD': '\xfd',
  '%FD': '\xfd', '%fe': '\xfe', '%Fe': '\xfe', '%fE': '\xfe', '%FE': '\xfe',
  '%ff': '\xff', '%Ff': '\xff', '%fF': '\xff', '%FF': '\xff'
}

function encodedReplacer (match) {
  return EncodedLookup[match]
}

const STATE_KEY = 0
const STATE_VALUE = 1
const STATE_CHARSET = 2
const STATE_LANG = 3

function parseParams (str) {
  const res = []
  let state = STATE_KEY
  let charset = ''
  let inquote = false
  let escaping = false
  let p = 0
  let tmp = ''
  const len = str.length

  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var
    const char = str[i]
    if (char === '\\' && inquote) {
      if (escaping) { escaping = false } else {
        escaping = true
        continue
      }
    } else if (char === '"') {
      if (!escaping) {
        if (inquote) {
          inquote = false
          state = STATE_KEY
        } else { inquote = true }
        continue
      } else { escaping = false }
    } else {
      if (escaping && inquote) { tmp += '\\' }
      escaping = false
      if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
        if (state === STATE_CHARSET) {
          state = STATE_LANG
          charset = tmp.substring(1)
        } else { state = STATE_VALUE }
        tmp = ''
        continue
      } else if (state === STATE_KEY &&
        (char === '*' || char === '=') &&
        res.length) {
        state = char === '*'
          ? STATE_CHARSET
          : STATE_VALUE
        res[p] = [tmp, undefined]
        tmp = ''
        continue
      } else if (!inquote && char === ';') {
        state = STATE_KEY
        if (charset) {
          if (tmp.length) {
            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),
              'binary',
              charset)
          }
          charset = ''
        } else if (tmp.length) {
          tmp = decodeText(tmp, 'binary', 'utf8')
        }
        if (res[p] === undefined) { res[p] = tmp } else { res[p][1] = tmp }
        tmp = ''
        ++p
        continue
      } else if (!inquote && (char === ' ' || char === '\t')) { continue }
    }
    tmp += char
  }
  if (charset && tmp.length) {
    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),
      'binary',
      charset)
  } else if (tmp) {
    tmp = decodeText(tmp, 'binary', 'utf8')
  }

  if (res[p] === undefined) {
    if (tmp) { res[p] = tmp }
  } else { res[p][1] = tmp }

  return res
}

module.exports = parseParams


/***/ }),

/***/ 4807:
/***/ ((module) => {

"use strict";
var __webpack_unused_export__;


const NullObject = function NullObject () { }
NullObject.prototype = Object.create(null)

/**
 * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
 *
 * parameter     = token "=" ( token / quoted-string )
 * token         = 1*tchar
 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
 *               / DIGIT / ALPHA
 *               ; any VCHAR, except delimiters
 * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
 * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
 * obs-text      = %x80-FF
 * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
 */
const paramRE = /; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu

/**
 * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
 *
 * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
 * obs-text    = %x80-FF
 */
const quotedPairRE = /\\([\v\u0020-\u00ff])/gu

/**
 * RegExp to match type in RFC 7231 sec 3.1.1.1
 *
 * media-type = type "/" subtype
 * type       = token
 * subtype    = token
 */
const mediaTypeRE = /^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u

// default ContentType to prevent repeated object creation
const defaultContentType = { type: '', parameters: new NullObject() }
Object.freeze(defaultContentType.parameters)
Object.freeze(defaultContentType)

/**
 * Parse media type to object.
 *
 * @param {string|object} header
 * @return {Object}
 * @public
 */

function parse (header) {
  if (typeof header !== 'string') {
    throw new TypeError('argument header is required and must be a string')
  }

  let index = header.indexOf(';')
  const type = index !== -1
    ? header.slice(0, index).trim()
    : header.trim()

  if (mediaTypeRE.test(type) === false) {
    throw new TypeError('invalid media type')
  }

  const result = {
    type: type.toLowerCase(),
    parameters: new NullObject()
  }

  // parse parameters
  if (index === -1) {
    return result
  }

  let key
  let match
  let value

  paramRE.lastIndex = index

  while ((match = paramRE.exec(header))) {
    if (match.index !== index) {
      throw new TypeError('invalid parameter format')
    }

    index += match[0].length
    key = match[1].toLowerCase()
    value = match[2]

    if (value[0] === '"') {
      // remove quotes and escapes
      value = value
        .slice(1, value.length - 1)

      quotedPairRE.test(value) && (value = value.replace(quotedPairRE, '$1'))
    }

    result.parameters[key] = value
  }

  if (index !== header.length) {
    throw new TypeError('invalid parameter format')
  }

  return result
}

function safeParse (header) {
  if (typeof header !== 'string') {
    return defaultContentType
  }

  let index = header.indexOf(';')
  const type = index !== -1
    ? header.slice(0, index).trim()
    : header.trim()

  if (mediaTypeRE.test(type) === false) {
    return defaultContentType
  }

  const result = {
    type: type.toLowerCase(),
    parameters: new NullObject()
  }

  // parse parameters
  if (index === -1) {
    return result
  }

  let key
  let match
  let value

  paramRE.lastIndex = index

  while ((match = paramRE.exec(header))) {
    if (match.index !== index) {
      return defaultContentType
    }

    index += match[0].length
    key = match[1].toLowerCase()
    value = match[2]

    if (value[0] === '"') {
      // remove quotes and escapes
      value = value
        .slice(1, value.length - 1)

      quotedPairRE.test(value) && (value = value.replace(quotedPairRE, '$1'))
    }

    result.parameters[key] = value
  }

  if (index !== header.length) {
    return defaultContentType
  }

  return result
}

__webpack_unused_export__ = { parse, safeParse }
__webpack_unused_export__ = parse
module.exports.xL = safeParse
__webpack_unused_export__ = defaultContentType


/***/ }),

/***/ 6315:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {

const wasm = __nccwpck_require__(8439);
let imports = {};
imports["./tiktoken_bg.js"] = wasm;
const path = __nccwpck_require__(6928);
const fs = __nccwpck_require__(9896);

const candidates = __dirname
  .split(path.sep)
  .reduce((memo, _, index, array) => {
    const prefix = array.slice(0, index + 1).join(path.sep) + path.sep;
    if (!prefix.includes("node_modules" + path.sep)) {
      memo.unshift(
        path.join(
          prefix,
          "node_modules",
          "tiktoken",
          "lite",
          "./tiktoken_bg.wasm"
        )
      );
    }
    return memo;
  }, [])
candidates.unshift(path.join(__dirname, "./tiktoken_bg.wasm"));

let bytes = null;
for (const candidate of candidates) {
  try {
    bytes = fs.readFileSync(candidate);
    break;
  } catch {}
}

if (bytes == null) throw new Error("Missing tiktoken_bg.wasm");
const wasmModule = new WebAssembly.Module(bytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, imports);
wasm.__wbg_set_wasm(wasmInstance.exports);
exports.Tiktoken = wasm["Tiktoken"];

/***/ }),

/***/ 8439:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/* module decorator */ module = __nccwpck_require__.nmd(module);
let wasm;
module.exports.__wbg_set_wasm = function(val) {
    wasm = val;
};
const lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;

let cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

let cachedUint8ArrayMemory0 = null;

function getUint8ArrayMemory0() {
    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8ArrayMemory0;
}

function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
}

const heap = new Array(128).fill(undefined);

heap.push(undefined, null, true, false);

let heap_next = heap.length;

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

function handleError(f, args) {
    try {
        return f.apply(this, args);
    } catch (e) {
        wasm.__wbindgen_export_0(addHeapObject(e));
    }
}

function getObject(idx) { return heap[idx]; }

function dropObject(idx) {
    if (idx < 132) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

let WASM_VECTOR_LEN = 0;

const lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;

let cachedTextEncoder = new lTextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length, 1) >>> 0;
        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len, 1) >>> 0;

    const mem = getUint8ArrayMemory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;
        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
        ptr = realloc(ptr, len, offset, 1) >>> 0;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

let cachedDataViewMemory0 = null;

function getDataViewMemory0() {
    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {
        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);
    }
    return cachedDataViewMemory0;
}

let cachedUint32ArrayMemory0 = null;

function getUint32ArrayMemory0() {
    if (cachedUint32ArrayMemory0 === null || cachedUint32ArrayMemory0.byteLength === 0) {
        cachedUint32ArrayMemory0 = new Uint32Array(wasm.memory.buffer);
    }
    return cachedUint32ArrayMemory0;
}

function getArrayU32FromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return getUint32ArrayMemory0().subarray(ptr / 4, ptr / 4 + len);
}

function passArray8ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 1, 1) >>> 0;
    getUint8ArrayMemory0().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}

function passArray32ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 4, 4) >>> 0;
    getUint32ArrayMemory0().set(arg, ptr / 4);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}

function getArrayU8FromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);
}

const TiktokenFinalization = (typeof FinalizationRegistry === 'undefined')
    ? { register: () => {}, unregister: () => {} }
    : new FinalizationRegistry(ptr => wasm.__wbg_tiktoken_free(ptr >>> 0, 1));

class Tiktoken {
    /**
     * @param {string} tiktoken_bfe
     * @param {any} special_tokens
     * @param {string} pat_str
     */
    constructor(tiktoken_bfe, special_tokens, pat_str) {
        if (wasm == null) throw new Error("tiktoken: WASM binary has not been propery initialized.");
        const ptr0 = passStringToWasm0(tiktoken_bfe, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);
        const len0 = WASM_VECTOR_LEN;
        const ptr1 = passStringToWasm0(pat_str, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);
        const len1 = WASM_VECTOR_LEN;
        const ret = wasm.tiktoken_new(ptr0, len0, addHeapObject(special_tokens), ptr1, len1);
        this.__wbg_ptr = ret >>> 0;
        TiktokenFinalization.register(this, this.__wbg_ptr, this);
        return this;
    }

    /** @returns {string | undefined} */
    get name() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.tiktoken_name(retptr, this.__wbg_ptr);
            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);
            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);
            let v1;
            if (r0 !== 0) {
                v1 = getStringFromWasm0(r0, r1).slice();
                wasm.__wbindgen_export_3(r0, r1 * 1, 1);
            }
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }

    __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        TiktokenFinalization.unregister(this);
        return ptr;
    }

    free() {
        if (wasm == null) throw new Error("tiktoken: WASM binary has not been propery initialized.");
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_tiktoken_free(ptr, 0);
    }

    /**
     * @param {string} text
     * @param {any} allowed_special
     * @param {any} disallowed_special
     * @returns {Uint32Array}
     */
    encode(text, allowed_special, disallowed_special) {
        if (wasm == null) throw new Error("tiktoken: WASM binary has not been propery initialized.");
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);
            const len0 = WASM_VECTOR_LEN;
            wasm.tiktoken_encode(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(allowed_special), addHeapObject(disallowed_special));
            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);
            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);
            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);
            var r3 = getDataViewMemory0().getInt32(retptr + 4 * 3, true);
            if (r3) {
                throw takeObject(r2);
            }
            var v2 = getArrayU32FromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_3(r0, r1 * 4, 4);
            return v2;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }

    /**
     * @param {string} text
     * @returns {Uint32Array}
     */
    encode_ordinary(text) {
        if (wasm == null) throw new Error("tiktoken: WASM binary has not been propery initialized.");
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);
            const len0 = WASM_VECTOR_LEN;
            wasm.tiktoken_encode_ordinary(retptr, this.__wbg_ptr, ptr0, len0);
            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);
            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);
            var v2 = getArrayU32FromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_3(r0, r1 * 4, 4);
            return v2;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }

    /**
     * @param {string} text
     * @param {any} allowed_special
     * @param {any} disallowed_special
     * @returns {any}
     */
    encode_with_unstable(text, allowed_special, disallowed_special) {
        if (wasm == null) throw new Error("tiktoken: WASM binary has not been propery initialized.");
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passStringToWasm0(text, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);
            const len0 = WASM_VECTOR_LEN;
            wasm.tiktoken_encode_with_unstable(retptr, this.__wbg_ptr, ptr0, len0, addHeapObject(allowed_special), addHeapObject(disallowed_special));
            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);
            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);
            var r2 = getDataViewMemory0().getInt32(retptr + 4 * 2, true);
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }

    /**
     * @param {Uint8Array} bytes
     * @returns {number}
     */
    encode_single_token(bytes) {
        if (wasm == null) throw new Error("tiktoken: WASM binary has not been propery initialized.");
        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_export_1);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.tiktoken_encode_single_token(this.__wbg_ptr, ptr0, len0);
        return ret >>> 0;
    }

    /**
     * @param {Uint32Array} tokens
     * @returns {Uint8Array}
     */
    decode(tokens) {
        if (wasm == null) throw new Error("tiktoken: WASM binary has not been propery initialized.");
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            const ptr0 = passArray32ToWasm0(tokens, wasm.__wbindgen_export_1);
            const len0 = WASM_VECTOR_LEN;
            wasm.tiktoken_decode(retptr, this.__wbg_ptr, ptr0, len0);
            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);
            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);
            var v2 = getArrayU8FromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_3(r0, r1 * 1, 1);
            return v2;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }

    /**
     * @param {number} token
     * @returns {Uint8Array}
     */
    decode_single_token_bytes(token) {
        if (wasm == null) throw new Error("tiktoken: WASM binary has not been propery initialized.");
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.tiktoken_decode_single_token_bytes(retptr, this.__wbg_ptr, token);
            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);
            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);
            var v1 = getArrayU8FromWasm0(r0, r1).slice();
            wasm.__wbindgen_export_3(r0, r1 * 1, 1);
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }

    /** @returns {any} */
    token_byte_values() {
        if (wasm == null) throw new Error("tiktoken: WASM binary has not been propery initialized.");
        const ret = wasm.tiktoken_token_byte_values(this.__wbg_ptr);
        return takeObject(ret);
    }
}
module.exports.Tiktoken = Tiktoken;
module.exports.__wbg_parse_def2e24ef1252aff = function() {
    return handleError(function (arg0, arg1) {
        const ret = JSON.parse(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    }, arguments) };
;
module.exports.__wbg_stringify_f7ed6987935b4a24 = function() {
    return handleError(function (arg0) {
        const ret = JSON.stringify(getObject(arg0));
        return addHeapObject(ret);
    }, arguments) };
;
module.exports.__wbindgen_error_new = function(arg0, arg1) {
    const ret = new Error(getStringFromWasm0(arg0, arg1));
    return addHeapObject(ret);
};
;
module.exports.__wbindgen_is_undefined = function(arg0) {
    const ret = getObject(arg0) === undefined;
    return ret;
};
;
module.exports.__wbindgen_object_drop_ref = function(arg0) {
    takeObject(arg0);
};
;
module.exports.__wbindgen_string_get = function(arg0, arg1) {
    if (wasm == null) throw new Error("tiktoken: WASM binary has not been propery initialized.");
    const obj = getObject(arg1);
    const ret = typeof(obj) === 'string' ? obj : undefined;
    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_export_1, wasm.__wbindgen_export_2);
    var len1 = WASM_VECTOR_LEN;
    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);
    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);
};
;
module.exports.__wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
};
;



/***/ }),

/***/ 4777:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

"use strict";

// EXPORTS
__nccwpck_require__.d(__webpack_exports__, {
  Y: () => (/* binding */ Blob)
});

;// CONCATENATED MODULE: ./node_modules/web-streams-polyfill/dist/ponyfill.mjs
/**
 * @license
 * web-streams-polyfill v4.0.0-beta.3
 * Copyright 2021 Mattias Buelens, Diwank Singh Tomer and other contributors.
 * This code is released under the MIT license.
 * SPDX-License-Identifier: MIT
 */
const e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol:e=>`Symbol(${e})`;function t(){}function r(e){return"object"==typeof e&&null!==e||"function"==typeof e}const o=t;function n(e,t){try{Object.defineProperty(e,"name",{value:t,configurable:!0})}catch(e){}}const a=Promise,i=Promise.prototype.then,l=Promise.resolve.bind(a),s=Promise.reject.bind(a);function u(e){return new a(e)}function c(e){return l(e)}function d(e){return s(e)}function f(e,t,r){return i.call(e,t,r)}function b(e,t,r){f(f(e,t,r),void 0,o)}function h(e,t){b(e,t)}function _(e,t){b(e,void 0,t)}function p(e,t,r){return f(e,t,r)}function m(e){f(e,void 0,o)}let y=e=>{if("function"==typeof queueMicrotask)y=queueMicrotask;else{const e=c(void 0);y=t=>f(e,t)}return y(e)};function g(e,t,r){if("function"!=typeof e)throw new TypeError("Argument is not a function");return Function.prototype.apply.call(e,t,r)}function w(e,t,r){try{return c(g(e,t,r))}catch(e){return d(e)}}class S{constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(e){const t=this._back;let r=t;16383===t._elements.length&&(r={_elements:[],_next:void 0}),t._elements.push(e),r!==t&&(this._back=r,t._next=r),++this._size}shift(){const e=this._front;let t=e;const r=this._cursor;let o=r+1;const n=e._elements,a=n[r];return 16384===o&&(t=e._next,o=0),--this._size,this._cursor=o,e!==t&&(this._front=t),n[r]=void 0,a}forEach(e){let t=this._cursor,r=this._front,o=r._elements;for(;!(t===o.length&&void 0===r._next||t===o.length&&(r=r._next,o=r._elements,t=0,0===o.length));)e(o[t]),++t}peek(){const e=this._front,t=this._cursor;return e._elements[t]}}const v=e("[[AbortSteps]]"),R=e("[[ErrorSteps]]"),T=e("[[CancelSteps]]"),q=e("[[PullSteps]]"),C=e("[[ReleaseSteps]]");function E(e,t){e._ownerReadableStream=t,t._reader=e,"readable"===t._state?O(e):"closed"===t._state?function(e){O(e),j(e)}(e):B(e,t._storedError)}function P(e,t){return Gt(e._ownerReadableStream,t)}function W(e){const t=e._ownerReadableStream;"readable"===t._state?A(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")):function(e,t){B(e,t)}(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")),t._readableStreamController[C](),t._reader=void 0,e._ownerReadableStream=void 0}function k(e){return new TypeError("Cannot "+e+" a stream using a released reader")}function O(e){e._closedPromise=u(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r}))}function B(e,t){O(e),A(e,t)}function A(e,t){void 0!==e._closedPromise_reject&&(m(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}function j(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}const z=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)},L=Math.trunc||function(e){return e<0?Math.ceil(e):Math.floor(e)};function F(e,t){if(void 0!==e&&("object"!=typeof(r=e)&&"function"!=typeof r))throw new TypeError(`${t} is not an object.`);var r}function I(e,t){if("function"!=typeof e)throw new TypeError(`${t} is not a function.`)}function D(e,t){if(!function(e){return"object"==typeof e&&null!==e||"function"==typeof e}(e))throw new TypeError(`${t} is not an object.`)}function $(e,t,r){if(void 0===e)throw new TypeError(`Parameter ${t} is required in '${r}'.`)}function M(e,t,r){if(void 0===e)throw new TypeError(`${t} is required in '${r}'.`)}function Y(e){return Number(e)}function Q(e){return 0===e?0:e}function N(e,t){const r=Number.MAX_SAFE_INTEGER;let o=Number(e);if(o=Q(o),!z(o))throw new TypeError(`${t} is not a finite number`);if(o=function(e){return Q(L(e))}(o),o<0||o>r)throw new TypeError(`${t} is outside the accepted range of 0 to ${r}, inclusive`);return z(o)&&0!==o?o:0}function H(e){if(!r(e))return!1;if("function"!=typeof e.getReader)return!1;try{return"boolean"==typeof e.locked}catch(e){return!1}}function x(e){if(!r(e))return!1;if("function"!=typeof e.getWriter)return!1;try{return"boolean"==typeof e.locked}catch(e){return!1}}function V(e,t){if(!Vt(e))throw new TypeError(`${t} is not a ReadableStream.`)}function U(e,t){e._reader._readRequests.push(t)}function G(e,t,r){const o=e._reader._readRequests.shift();r?o._closeSteps():o._chunkSteps(t)}function X(e){return e._reader._readRequests.length}function J(e){const t=e._reader;return void 0!==t&&!!K(t)}class ReadableStreamDefaultReader{constructor(e){if($(e,1,"ReadableStreamDefaultReader"),V(e,"First parameter"),Ut(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");E(this,e),this._readRequests=new S}get closed(){return K(this)?this._closedPromise:d(ee("closed"))}cancel(e){return K(this)?void 0===this._ownerReadableStream?d(k("cancel")):P(this,e):d(ee("cancel"))}read(){if(!K(this))return d(ee("read"));if(void 0===this._ownerReadableStream)return d(k("read from"));let e,t;const r=u(((r,o)=>{e=r,t=o}));return function(e,t){const r=e._ownerReadableStream;r._disturbed=!0,"closed"===r._state?t._closeSteps():"errored"===r._state?t._errorSteps(r._storedError):r._readableStreamController[q](t)}(this,{_chunkSteps:t=>e({value:t,done:!1}),_closeSteps:()=>e({value:void 0,done:!0}),_errorSteps:e=>t(e)}),r}releaseLock(){if(!K(this))throw ee("releaseLock");void 0!==this._ownerReadableStream&&function(e){W(e);const t=new TypeError("Reader was released");Z(e,t)}(this)}}function K(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_readRequests")&&e instanceof ReadableStreamDefaultReader)}function Z(e,t){const r=e._readRequests;e._readRequests=new S,r.forEach((e=>{e._errorSteps(t)}))}function ee(e){return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`)}Object.defineProperties(ReadableStreamDefaultReader.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),n(ReadableStreamDefaultReader.prototype.cancel,"cancel"),n(ReadableStreamDefaultReader.prototype.read,"read"),n(ReadableStreamDefaultReader.prototype.releaseLock,"releaseLock"),"symbol"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamDefaultReader.prototype,e.toStringTag,{value:"ReadableStreamDefaultReader",configurable:!0});class te{constructor(e,t){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=e,this._preventCancel=t}next(){const e=()=>this._nextSteps();return this._ongoingPromise=this._ongoingPromise?p(this._ongoingPromise,e,e):e(),this._ongoingPromise}return(e){const t=()=>this._returnSteps(e);return this._ongoingPromise?p(this._ongoingPromise,t,t):t()}_nextSteps(){if(this._isFinished)return Promise.resolve({value:void 0,done:!0});const e=this._reader;return void 0===e?d(k("iterate")):f(e.read(),(e=>{var t;return this._ongoingPromise=void 0,e.done&&(this._isFinished=!0,null===(t=this._reader)||void 0===t||t.releaseLock(),this._reader=void 0),e}),(e=>{var t;throw this._ongoingPromise=void 0,this._isFinished=!0,null===(t=this._reader)||void 0===t||t.releaseLock(),this._reader=void 0,e}))}_returnSteps(e){if(this._isFinished)return Promise.resolve({value:e,done:!0});this._isFinished=!0;const t=this._reader;if(void 0===t)return d(k("finish iterating"));if(this._reader=void 0,!this._preventCancel){const r=t.cancel(e);return t.releaseLock(),p(r,(()=>({value:e,done:!0})))}return t.releaseLock(),c({value:e,done:!0})}}const re={next(){return oe(this)?this._asyncIteratorImpl.next():d(ne("next"))},return(e){return oe(this)?this._asyncIteratorImpl.return(e):d(ne("return"))}};function oe(e){if(!r(e))return!1;if(!Object.prototype.hasOwnProperty.call(e,"_asyncIteratorImpl"))return!1;try{return e._asyncIteratorImpl instanceof te}catch(e){return!1}}function ne(e){return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`)}"symbol"==typeof e.asyncIterator&&Object.defineProperty(re,e.asyncIterator,{value(){return this},writable:!0,configurable:!0});const ae=Number.isNaN||function(e){return e!=e};function ie(e,t,r,o,n){new Uint8Array(e).set(new Uint8Array(r,o,n),t)}function le(e){const t=function(e,t,r){if(e.slice)return e.slice(t,r);const o=r-t,n=new ArrayBuffer(o);return ie(n,0,e,t,o),n}(e.buffer,e.byteOffset,e.byteOffset+e.byteLength);return new Uint8Array(t)}function se(e){const t=e._queue.shift();return e._queueTotalSize-=t.size,e._queueTotalSize<0&&(e._queueTotalSize=0),t.value}function ue(e,t,r){if("number"!=typeof(o=r)||ae(o)||o<0||r===1/0)throw new RangeError("Size must be a finite, non-NaN, non-negative number.");var o;e._queue.push({value:t,size:r}),e._queueTotalSize+=r}function ce(e){e._queue=new S,e._queueTotalSize=0}class ReadableStreamBYOBRequest{constructor(){throw new TypeError("Illegal constructor")}get view(){if(!fe(this))throw Be("view");return this._view}respond(e){if(!fe(this))throw Be("respond");if($(e,1,"respond"),e=N(e,"First parameter"),void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");this._view.buffer,function(e,t){const r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t)throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream")}else{if(0===t)throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");if(r.bytesFilled+t>r.byteLength)throw new RangeError("bytesWritten out of range")}r.buffer=r.buffer,qe(e,t)}(this._associatedReadableByteStreamController,e)}respondWithNewView(e){if(!fe(this))throw Be("respondWithNewView");if($(e,1,"respondWithNewView"),!ArrayBuffer.isView(e))throw new TypeError("You can only respond with array buffer views");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");e.buffer,function(e,t){const r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t.byteLength)throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream")}else if(0===t.byteLength)throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");if(r.byteOffset+r.bytesFilled!==t.byteOffset)throw new RangeError("The region specified by view does not match byobRequest");if(r.bufferByteLength!==t.buffer.byteLength)throw new RangeError("The buffer of view has different capacity than byobRequest");if(r.bytesFilled+t.byteLength>r.byteLength)throw new RangeError("The region specified by view is larger than byobRequest");const o=t.byteLength;r.buffer=t.buffer,qe(e,o)}(this._associatedReadableByteStreamController,e)}}Object.defineProperties(ReadableStreamBYOBRequest.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),n(ReadableStreamBYOBRequest.prototype.respond,"respond"),n(ReadableStreamBYOBRequest.prototype.respondWithNewView,"respondWithNewView"),"symbol"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamBYOBRequest.prototype,e.toStringTag,{value:"ReadableStreamBYOBRequest",configurable:!0});class ReadableByteStreamController{constructor(){throw new TypeError("Illegal constructor")}get byobRequest(){if(!de(this))throw Ae("byobRequest");return function(e){if(null===e._byobRequest&&e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek(),r=new Uint8Array(t.buffer,t.byteOffset+t.bytesFilled,t.byteLength-t.bytesFilled),o=Object.create(ReadableStreamBYOBRequest.prototype);!function(e,t,r){e._associatedReadableByteStreamController=t,e._view=r}(o,e,r),e._byobRequest=o}return e._byobRequest}(this)}get desiredSize(){if(!de(this))throw Ae("desiredSize");return ke(this)}close(){if(!de(this))throw Ae("close");if(this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");const e=this._controlledReadableByteStream._state;if("readable"!==e)throw new TypeError(`The stream (in ${e} state) is not in the readable state and cannot be closed`);!function(e){const t=e._controlledReadableByteStream;if(e._closeRequested||"readable"!==t._state)return;if(e._queueTotalSize>0)return void(e._closeRequested=!0);if(e._pendingPullIntos.length>0){if(e._pendingPullIntos.peek().bytesFilled>0){const t=new TypeError("Insufficient bytes to fill elements in the given buffer");throw Pe(e,t),t}}Ee(e),Xt(t)}(this)}enqueue(e){if(!de(this))throw Ae("enqueue");if($(e,1,"enqueue"),!ArrayBuffer.isView(e))throw new TypeError("chunk must be an array buffer view");if(0===e.byteLength)throw new TypeError("chunk must have non-zero byteLength");if(0===e.buffer.byteLength)throw new TypeError("chunk's buffer must have non-zero byteLength");if(this._closeRequested)throw new TypeError("stream is closed or draining");const t=this._controlledReadableByteStream._state;if("readable"!==t)throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be enqueued to`);!function(e,t){const r=e._controlledReadableByteStream;if(e._closeRequested||"readable"!==r._state)return;const o=t.buffer,n=t.byteOffset,a=t.byteLength,i=o;if(e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek();t.buffer,0,Re(e),t.buffer=t.buffer,"none"===t.readerType&&ge(e,t)}if(J(r))if(function(e){const t=e._controlledReadableByteStream._reader;for(;t._readRequests.length>0;){if(0===e._queueTotalSize)return;We(e,t._readRequests.shift())}}(e),0===X(r))me(e,i,n,a);else{e._pendingPullIntos.length>0&&Ce(e);G(r,new Uint8Array(i,n,a),!1)}else Le(r)?(me(e,i,n,a),Te(e)):me(e,i,n,a);be(e)}(this,e)}error(e){if(!de(this))throw Ae("error");Pe(this,e)}[T](e){he(this),ce(this);const t=this._cancelAlgorithm(e);return Ee(this),t}[q](e){const t=this._controlledReadableByteStream;if(this._queueTotalSize>0)return void We(this,e);const r=this._autoAllocateChunkSize;if(void 0!==r){let t;try{t=new ArrayBuffer(r)}catch(t){return void e._errorSteps(t)}const o={buffer:t,bufferByteLength:r,byteOffset:0,byteLength:r,bytesFilled:0,elementSize:1,viewConstructor:Uint8Array,readerType:"default"};this._pendingPullIntos.push(o)}U(t,e),be(this)}[C](){if(this._pendingPullIntos.length>0){const e=this._pendingPullIntos.peek();e.readerType="none",this._pendingPullIntos=new S,this._pendingPullIntos.push(e)}}}function de(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableByteStream")&&e instanceof ReadableByteStreamController)}function fe(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_associatedReadableByteStreamController")&&e instanceof ReadableStreamBYOBRequest)}function be(e){const t=function(e){const t=e._controlledReadableByteStream;if("readable"!==t._state)return!1;if(e._closeRequested)return!1;if(!e._started)return!1;if(J(t)&&X(t)>0)return!0;if(Le(t)&&ze(t)>0)return!0;if(ke(e)>0)return!0;return!1}(e);if(!t)return;if(e._pulling)return void(e._pullAgain=!0);e._pulling=!0;b(e._pullAlgorithm(),(()=>(e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,be(e)),null)),(t=>(Pe(e,t),null)))}function he(e){Re(e),e._pendingPullIntos=new S}function _e(e,t){let r=!1;"closed"===e._state&&(r=!0);const o=pe(t);"default"===t.readerType?G(e,o,r):function(e,t,r){const o=e._reader._readIntoRequests.shift();r?o._closeSteps(t):o._chunkSteps(t)}(e,o,r)}function pe(e){const t=e.bytesFilled,r=e.elementSize;return new e.viewConstructor(e.buffer,e.byteOffset,t/r)}function me(e,t,r,o){e._queue.push({buffer:t,byteOffset:r,byteLength:o}),e._queueTotalSize+=o}function ye(e,t,r,o){let n;try{n=t.slice(r,r+o)}catch(t){throw Pe(e,t),t}me(e,n,0,o)}function ge(e,t){t.bytesFilled>0&&ye(e,t.buffer,t.byteOffset,t.bytesFilled),Ce(e)}function we(e,t){const r=t.elementSize,o=t.bytesFilled-t.bytesFilled%r,n=Math.min(e._queueTotalSize,t.byteLength-t.bytesFilled),a=t.bytesFilled+n,i=a-a%r;let l=n,s=!1;i>o&&(l=i-t.bytesFilled,s=!0);const u=e._queue;for(;l>0;){const r=u.peek(),o=Math.min(l,r.byteLength),n=t.byteOffset+t.bytesFilled;ie(t.buffer,n,r.buffer,r.byteOffset,o),r.byteLength===o?u.shift():(r.byteOffset+=o,r.byteLength-=o),e._queueTotalSize-=o,Se(e,o,t),l-=o}return s}function Se(e,t,r){r.bytesFilled+=t}function ve(e){0===e._queueTotalSize&&e._closeRequested?(Ee(e),Xt(e._controlledReadableByteStream)):be(e)}function Re(e){null!==e._byobRequest&&(e._byobRequest._associatedReadableByteStreamController=void 0,e._byobRequest._view=null,e._byobRequest=null)}function Te(e){for(;e._pendingPullIntos.length>0;){if(0===e._queueTotalSize)return;const t=e._pendingPullIntos.peek();we(e,t)&&(Ce(e),_e(e._controlledReadableByteStream,t))}}function qe(e,t){const r=e._pendingPullIntos.peek();Re(e);"closed"===e._controlledReadableByteStream._state?function(e,t){"none"===t.readerType&&Ce(e);const r=e._controlledReadableByteStream;if(Le(r))for(;ze(r)>0;)_e(r,Ce(e))}(e,r):function(e,t,r){if(Se(0,t,r),"none"===r.readerType)return ge(e,r),void Te(e);if(r.bytesFilled<r.elementSize)return;Ce(e);const o=r.bytesFilled%r.elementSize;if(o>0){const t=r.byteOffset+r.bytesFilled;ye(e,r.buffer,t-o,o)}r.bytesFilled-=o,_e(e._controlledReadableByteStream,r),Te(e)}(e,t,r),be(e)}function Ce(e){return e._pendingPullIntos.shift()}function Ee(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0}function Pe(e,t){const r=e._controlledReadableByteStream;"readable"===r._state&&(he(e),ce(e),Ee(e),Jt(r,t))}function We(e,t){const r=e._queue.shift();e._queueTotalSize-=r.byteLength,ve(e);const o=new Uint8Array(r.buffer,r.byteOffset,r.byteLength);t._chunkSteps(o)}function ke(e){const t=e._controlledReadableByteStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function Oe(e,t,r){const o=Object.create(ReadableByteStreamController.prototype);let n,a,i;n=void 0!==t.start?()=>t.start(o):()=>{},a=void 0!==t.pull?()=>t.pull(o):()=>c(void 0),i=void 0!==t.cancel?e=>t.cancel(e):()=>c(void 0);const l=t.autoAllocateChunkSize;if(0===l)throw new TypeError("autoAllocateChunkSize must be greater than 0");!function(e,t,r,o,n,a,i){t._controlledReadableByteStream=e,t._pullAgain=!1,t._pulling=!1,t._byobRequest=null,t._queue=t._queueTotalSize=void 0,ce(t),t._closeRequested=!1,t._started=!1,t._strategyHWM=a,t._pullAlgorithm=o,t._cancelAlgorithm=n,t._autoAllocateChunkSize=i,t._pendingPullIntos=new S,e._readableStreamController=t,b(c(r()),(()=>(t._started=!0,be(t),null)),(e=>(Pe(t,e),null)))}(e,o,n,a,i,r,l)}function Be(e){return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`)}function Ae(e){return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`)}function je(e,t){e._reader._readIntoRequests.push(t)}function ze(e){return e._reader._readIntoRequests.length}function Le(e){const t=e._reader;return void 0!==t&&!!Fe(t)}Object.defineProperties(ReadableByteStreamController.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),n(ReadableByteStreamController.prototype.close,"close"),n(ReadableByteStreamController.prototype.enqueue,"enqueue"),n(ReadableByteStreamController.prototype.error,"error"),"symbol"==typeof e.toStringTag&&Object.defineProperty(ReadableByteStreamController.prototype,e.toStringTag,{value:"ReadableByteStreamController",configurable:!0});class ReadableStreamBYOBReader{constructor(e){if($(e,1,"ReadableStreamBYOBReader"),V(e,"First parameter"),Ut(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");if(!de(e._readableStreamController))throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");E(this,e),this._readIntoRequests=new S}get closed(){return Fe(this)?this._closedPromise:d(De("closed"))}cancel(e){return Fe(this)?void 0===this._ownerReadableStream?d(k("cancel")):P(this,e):d(De("cancel"))}read(e){if(!Fe(this))return d(De("read"));if(!ArrayBuffer.isView(e))return d(new TypeError("view must be an array buffer view"));if(0===e.byteLength)return d(new TypeError("view must have non-zero byteLength"));if(0===e.buffer.byteLength)return d(new TypeError("view's buffer must have non-zero byteLength"));if(e.buffer,void 0===this._ownerReadableStream)return d(k("read from"));let t,r;const o=u(((e,o)=>{t=e,r=o}));return function(e,t,r){const o=e._ownerReadableStream;o._disturbed=!0,"errored"===o._state?r._errorSteps(o._storedError):function(e,t,r){const o=e._controlledReadableByteStream;let n=1;t.constructor!==DataView&&(n=t.constructor.BYTES_PER_ELEMENT);const a=t.constructor,i=t.buffer,l={buffer:i,bufferByteLength:i.byteLength,byteOffset:t.byteOffset,byteLength:t.byteLength,bytesFilled:0,elementSize:n,viewConstructor:a,readerType:"byob"};if(e._pendingPullIntos.length>0)return e._pendingPullIntos.push(l),void je(o,r);if("closed"!==o._state){if(e._queueTotalSize>0){if(we(e,l)){const t=pe(l);return ve(e),void r._chunkSteps(t)}if(e._closeRequested){const t=new TypeError("Insufficient bytes to fill elements in the given buffer");return Pe(e,t),void r._errorSteps(t)}}e._pendingPullIntos.push(l),je(o,r),be(e)}else{const e=new a(l.buffer,l.byteOffset,0);r._closeSteps(e)}}(o._readableStreamController,t,r)}(this,e,{_chunkSteps:e=>t({value:e,done:!1}),_closeSteps:e=>t({value:e,done:!0}),_errorSteps:e=>r(e)}),o}releaseLock(){if(!Fe(this))throw De("releaseLock");void 0!==this._ownerReadableStream&&function(e){W(e);const t=new TypeError("Reader was released");Ie(e,t)}(this)}}function Fe(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_readIntoRequests")&&e instanceof ReadableStreamBYOBReader)}function Ie(e,t){const r=e._readIntoRequests;e._readIntoRequests=new S,r.forEach((e=>{e._errorSteps(t)}))}function De(e){return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`)}function $e(e,t){const{highWaterMark:r}=e;if(void 0===r)return t;if(ae(r)||r<0)throw new RangeError("Invalid highWaterMark");return r}function Me(e){const{size:t}=e;return t||(()=>1)}function Ye(e,t){F(e,t);const r=null==e?void 0:e.highWaterMark,o=null==e?void 0:e.size;return{highWaterMark:void 0===r?void 0:Y(r),size:void 0===o?void 0:Qe(o,`${t} has member 'size' that`)}}function Qe(e,t){return I(e,t),t=>Y(e(t))}function Ne(e,t,r){return I(e,r),r=>w(e,t,[r])}function He(e,t,r){return I(e,r),()=>w(e,t,[])}function xe(e,t,r){return I(e,r),r=>g(e,t,[r])}function Ve(e,t,r){return I(e,r),(r,o)=>w(e,t,[r,o])}Object.defineProperties(ReadableStreamBYOBReader.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),n(ReadableStreamBYOBReader.prototype.cancel,"cancel"),n(ReadableStreamBYOBReader.prototype.read,"read"),n(ReadableStreamBYOBReader.prototype.releaseLock,"releaseLock"),"symbol"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamBYOBReader.prototype,e.toStringTag,{value:"ReadableStreamBYOBReader",configurable:!0});const Ue="function"==typeof AbortController;class WritableStream{constructor(e={},t={}){void 0===e?e=null:D(e,"First parameter");const r=Ye(t,"Second parameter"),o=function(e,t){F(e,t);const r=null==e?void 0:e.abort,o=null==e?void 0:e.close,n=null==e?void 0:e.start,a=null==e?void 0:e.type,i=null==e?void 0:e.write;return{abort:void 0===r?void 0:Ne(r,e,`${t} has member 'abort' that`),close:void 0===o?void 0:He(o,e,`${t} has member 'close' that`),start:void 0===n?void 0:xe(n,e,`${t} has member 'start' that`),write:void 0===i?void 0:Ve(i,e,`${t} has member 'write' that`),type:a}}(e,"First parameter");var n;(n=this)._state="writable",n._storedError=void 0,n._writer=void 0,n._writableStreamController=void 0,n._writeRequests=new S,n._inFlightWriteRequest=void 0,n._closeRequest=void 0,n._inFlightCloseRequest=void 0,n._pendingAbortRequest=void 0,n._backpressure=!1;if(void 0!==o.type)throw new RangeError("Invalid type is specified");const a=Me(r);!function(e,t,r,o){const n=Object.create(WritableStreamDefaultController.prototype);let a,i,l,s;a=void 0!==t.start?()=>t.start(n):()=>{};i=void 0!==t.write?e=>t.write(e,n):()=>c(void 0);l=void 0!==t.close?()=>t.close():()=>c(void 0);s=void 0!==t.abort?e=>t.abort(e):()=>c(void 0);!function(e,t,r,o,n,a,i,l){t._controlledWritableStream=e,e._writableStreamController=t,t._queue=void 0,t._queueTotalSize=void 0,ce(t),t._abortReason=void 0,t._abortController=function(){if(Ue)return new AbortController}(),t._started=!1,t._strategySizeAlgorithm=l,t._strategyHWM=i,t._writeAlgorithm=o,t._closeAlgorithm=n,t._abortAlgorithm=a;const s=bt(t);nt(e,s);const u=r();b(c(u),(()=>(t._started=!0,dt(t),null)),(r=>(t._started=!0,Ze(e,r),null)))}(e,n,a,i,l,s,r,o)}(this,o,$e(r,1),a)}get locked(){if(!Ge(this))throw _t("locked");return Xe(this)}abort(e){return Ge(this)?Xe(this)?d(new TypeError("Cannot abort a stream that already has a writer")):Je(this,e):d(_t("abort"))}close(){return Ge(this)?Xe(this)?d(new TypeError("Cannot close a stream that already has a writer")):rt(this)?d(new TypeError("Cannot close an already-closing stream")):Ke(this):d(_t("close"))}getWriter(){if(!Ge(this))throw _t("getWriter");return new WritableStreamDefaultWriter(this)}}function Ge(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_writableStreamController")&&e instanceof WritableStream)}function Xe(e){return void 0!==e._writer}function Je(e,t){var r;if("closed"===e._state||"errored"===e._state)return c(void 0);e._writableStreamController._abortReason=t,null===(r=e._writableStreamController._abortController)||void 0===r||r.abort(t);const o=e._state;if("closed"===o||"errored"===o)return c(void 0);if(void 0!==e._pendingAbortRequest)return e._pendingAbortRequest._promise;let n=!1;"erroring"===o&&(n=!0,t=void 0);const a=u(((r,o)=>{e._pendingAbortRequest={_promise:void 0,_resolve:r,_reject:o,_reason:t,_wasAlreadyErroring:n}}));return e._pendingAbortRequest._promise=a,n||et(e,t),a}function Ke(e){const t=e._state;if("closed"===t||"errored"===t)return d(new TypeError(`The stream (in ${t} state) is not in the writable state and cannot be closed`));const r=u(((t,r)=>{const o={_resolve:t,_reject:r};e._closeRequest=o})),o=e._writer;var n;return void 0!==o&&e._backpressure&&"writable"===t&&Et(o),ue(n=e._writableStreamController,lt,0),dt(n),r}function Ze(e,t){"writable"!==e._state?tt(e):et(e,t)}function et(e,t){const r=e._writableStreamController;e._state="erroring",e._storedError=t;const o=e._writer;void 0!==o&&it(o,t),!function(e){if(void 0===e._inFlightWriteRequest&&void 0===e._inFlightCloseRequest)return!1;return!0}(e)&&r._started&&tt(e)}function tt(e){e._state="errored",e._writableStreamController[R]();const t=e._storedError;if(e._writeRequests.forEach((e=>{e._reject(t)})),e._writeRequests=new S,void 0===e._pendingAbortRequest)return void ot(e);const r=e._pendingAbortRequest;if(e._pendingAbortRequest=void 0,r._wasAlreadyErroring)return r._reject(t),void ot(e);b(e._writableStreamController[v](r._reason),(()=>(r._resolve(),ot(e),null)),(t=>(r._reject(t),ot(e),null)))}function rt(e){return void 0!==e._closeRequest||void 0!==e._inFlightCloseRequest}function ot(e){void 0!==e._closeRequest&&(e._closeRequest._reject(e._storedError),e._closeRequest=void 0);const t=e._writer;void 0!==t&&St(t,e._storedError)}function nt(e,t){const r=e._writer;void 0!==r&&t!==e._backpressure&&(t?function(e){Rt(e)}(r):Et(r)),e._backpressure=t}Object.defineProperties(WritableStream.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),n(WritableStream.prototype.abort,"abort"),n(WritableStream.prototype.close,"close"),n(WritableStream.prototype.getWriter,"getWriter"),"symbol"==typeof e.toStringTag&&Object.defineProperty(WritableStream.prototype,e.toStringTag,{value:"WritableStream",configurable:!0});class WritableStreamDefaultWriter{constructor(e){if($(e,1,"WritableStreamDefaultWriter"),function(e,t){if(!Ge(e))throw new TypeError(`${t} is not a WritableStream.`)}(e,"First parameter"),Xe(e))throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream=e,e._writer=this;const t=e._state;if("writable"===t)!rt(e)&&e._backpressure?Rt(this):qt(this),gt(this);else if("erroring"===t)Tt(this,e._storedError),gt(this);else if("closed"===t)qt(this),gt(r=this),vt(r);else{const t=e._storedError;Tt(this,t),wt(this,t)}var r}get closed(){return at(this)?this._closedPromise:d(mt("closed"))}get desiredSize(){if(!at(this))throw mt("desiredSize");if(void 0===this._ownerWritableStream)throw yt("desiredSize");return function(e){const t=e._ownerWritableStream,r=t._state;if("errored"===r||"erroring"===r)return null;if("closed"===r)return 0;return ct(t._writableStreamController)}(this)}get ready(){return at(this)?this._readyPromise:d(mt("ready"))}abort(e){return at(this)?void 0===this._ownerWritableStream?d(yt("abort")):function(e,t){return Je(e._ownerWritableStream,t)}(this,e):d(mt("abort"))}close(){if(!at(this))return d(mt("close"));const e=this._ownerWritableStream;return void 0===e?d(yt("close")):rt(e)?d(new TypeError("Cannot close an already-closing stream")):Ke(this._ownerWritableStream)}releaseLock(){if(!at(this))throw mt("releaseLock");void 0!==this._ownerWritableStream&&function(e){const t=e._ownerWritableStream,r=new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");it(e,r),function(e,t){"pending"===e._closedPromiseState?St(e,t):function(e,t){wt(e,t)}(e,t)}(e,r),t._writer=void 0,e._ownerWritableStream=void 0}(this)}write(e){return at(this)?void 0===this._ownerWritableStream?d(yt("write to")):function(e,t){const r=e._ownerWritableStream,o=r._writableStreamController,n=function(e,t){try{return e._strategySizeAlgorithm(t)}catch(t){return ft(e,t),1}}(o,t);if(r!==e._ownerWritableStream)return d(yt("write to"));const a=r._state;if("errored"===a)return d(r._storedError);if(rt(r)||"closed"===a)return d(new TypeError("The stream is closing or closed and cannot be written to"));if("erroring"===a)return d(r._storedError);const i=function(e){return u(((t,r)=>{const o={_resolve:t,_reject:r};e._writeRequests.push(o)}))}(r);return function(e,t,r){try{ue(e,t,r)}catch(t){return void ft(e,t)}const o=e._controlledWritableStream;if(!rt(o)&&"writable"===o._state){nt(o,bt(e))}dt(e)}(o,t,n),i}(this,e):d(mt("write"))}}function at(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_ownerWritableStream")&&e instanceof WritableStreamDefaultWriter)}function it(e,t){"pending"===e._readyPromiseState?Ct(e,t):function(e,t){Tt(e,t)}(e,t)}Object.defineProperties(WritableStreamDefaultWriter.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),n(WritableStreamDefaultWriter.prototype.abort,"abort"),n(WritableStreamDefaultWriter.prototype.close,"close"),n(WritableStreamDefaultWriter.prototype.releaseLock,"releaseLock"),n(WritableStreamDefaultWriter.prototype.write,"write"),"symbol"==typeof e.toStringTag&&Object.defineProperty(WritableStreamDefaultWriter.prototype,e.toStringTag,{value:"WritableStreamDefaultWriter",configurable:!0});const lt={};class WritableStreamDefaultController{constructor(){throw new TypeError("Illegal constructor")}get abortReason(){if(!st(this))throw pt("abortReason");return this._abortReason}get signal(){if(!st(this))throw pt("signal");if(void 0===this._abortController)throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");return this._abortController.signal}error(e){if(!st(this))throw pt("error");"writable"===this._controlledWritableStream._state&&ht(this,e)}[v](e){const t=this._abortAlgorithm(e);return ut(this),t}[R](){ce(this)}}function st(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_controlledWritableStream")&&e instanceof WritableStreamDefaultController)}function ut(e){e._writeAlgorithm=void 0,e._closeAlgorithm=void 0,e._abortAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function ct(e){return e._strategyHWM-e._queueTotalSize}function dt(e){const t=e._controlledWritableStream;if(!e._started)return;if(void 0!==t._inFlightWriteRequest)return;if("erroring"===t._state)return void tt(t);if(0===e._queue.length)return;const r=e._queue.peek().value;r===lt?function(e){const t=e._controlledWritableStream;(function(e){e._inFlightCloseRequest=e._closeRequest,e._closeRequest=void 0})(t),se(e);const r=e._closeAlgorithm();ut(e),b(r,(()=>(function(e){e._inFlightCloseRequest._resolve(void 0),e._inFlightCloseRequest=void 0,"erroring"===e._state&&(e._storedError=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._resolve(),e._pendingAbortRequest=void 0)),e._state="closed";const t=e._writer;void 0!==t&&vt(t)}(t),null)),(e=>(function(e,t){e._inFlightCloseRequest._reject(t),e._inFlightCloseRequest=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._reject(t),e._pendingAbortRequest=void 0),Ze(e,t)}(t,e),null)))}(e):function(e,t){const r=e._controlledWritableStream;!function(e){e._inFlightWriteRequest=e._writeRequests.shift()}(r);b(e._writeAlgorithm(t),(()=>{!function(e){e._inFlightWriteRequest._resolve(void 0),e._inFlightWriteRequest=void 0}(r);const t=r._state;if(se(e),!rt(r)&&"writable"===t){const t=bt(e);nt(r,t)}return dt(e),null}),(t=>("writable"===r._state&&ut(e),function(e,t){e._inFlightWriteRequest._reject(t),e._inFlightWriteRequest=void 0,Ze(e,t)}(r,t),null)))}(e,r)}function ft(e,t){"writable"===e._controlledWritableStream._state&&ht(e,t)}function bt(e){return ct(e)<=0}function ht(e,t){const r=e._controlledWritableStream;ut(e),et(r,t)}function _t(e){return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`)}function pt(e){return new TypeError(`WritableStreamDefaultController.prototype.${e} can only be used on a WritableStreamDefaultController`)}function mt(e){return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`)}function yt(e){return new TypeError("Cannot "+e+" a stream using a released writer")}function gt(e){e._closedPromise=u(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r,e._closedPromiseState="pending"}))}function wt(e,t){gt(e),St(e,t)}function St(e,t){void 0!==e._closedPromise_reject&&(m(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="rejected")}function vt(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="resolved")}function Rt(e){e._readyPromise=u(((t,r)=>{e._readyPromise_resolve=t,e._readyPromise_reject=r})),e._readyPromiseState="pending"}function Tt(e,t){Rt(e),Ct(e,t)}function qt(e){Rt(e),Et(e)}function Ct(e,t){void 0!==e._readyPromise_reject&&(m(e._readyPromise),e._readyPromise_reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="rejected")}function Et(e){void 0!==e._readyPromise_resolve&&(e._readyPromise_resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="fulfilled")}Object.defineProperties(WritableStreamDefaultController.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),"symbol"==typeof e.toStringTag&&Object.defineProperty(WritableStreamDefaultController.prototype,e.toStringTag,{value:"WritableStreamDefaultController",configurable:!0});const Pt="undefined"!=typeof DOMException?DOMException:void 0;const Wt=function(e){if("function"!=typeof e&&"object"!=typeof e)return!1;try{return new e,!0}catch(e){return!1}}(Pt)?Pt:function(){const e=function(e,t){this.message=e||"",this.name=t||"Error",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)};return e.prototype=Object.create(Error.prototype),Object.defineProperty(e.prototype,"constructor",{value:e,writable:!0,configurable:!0}),e}();function kt(e,t,r,o,n,a){const i=e.getReader(),l=t.getWriter();Vt(e)&&(e._disturbed=!0);let s,_,g,w=!1,S=!1,v="readable",R="writable",T=!1,q=!1;const C=u((e=>{g=e}));let E=Promise.resolve(void 0);return u(((P,W)=>{let k;function O(){if(w)return;const e=u(((e,t)=>{!function r(o){o?e():f(function(){if(w)return c(!0);return f(l.ready,(()=>f(i.read(),(e=>!!e.done||(E=l.write(e.value),m(E),!1)))))}(),r,t)}(!1)}));m(e)}function B(){return v="closed",r?L():z((()=>(Ge(t)&&(T=rt(t),R=t._state),T||"closed"===R?c(void 0):"erroring"===R||"errored"===R?d(_):(T=!0,l.close()))),!1,void 0),null}function A(e){return w||(v="errored",s=e,o?L(!0,e):z((()=>l.abort(e)),!0,e)),null}function j(e){return S||(R="errored",_=e,n?L(!0,e):z((()=>i.cancel(e)),!0,e)),null}if(void 0!==a&&(k=()=>{const e=void 0!==a.reason?a.reason:new Wt("Aborted","AbortError"),t=[];o||t.push((()=>"writable"===R?l.abort(e):c(void 0))),n||t.push((()=>"readable"===v?i.cancel(e):c(void 0))),z((()=>Promise.all(t.map((e=>e())))),!0,e)},a.aborted?k():a.addEventListener("abort",k)),Vt(e)&&(v=e._state,s=e._storedError),Ge(t)&&(R=t._state,_=t._storedError,T=rt(t)),Vt(e)&&Ge(t)&&(q=!0,g()),"errored"===v)A(s);else if("erroring"===R||"errored"===R)j(_);else if("closed"===v)B();else if(T||"closed"===R){const e=new TypeError("the destination writable stream closed before all data could be piped to it");n?L(!0,e):z((()=>i.cancel(e)),!0,e)}function z(e,t,r){function o(){return"writable"!==R||T?n():h(function(){let e;return c(function t(){if(e!==E)return e=E,p(E,t,t)}())}(),n),null}function n(){return e?b(e(),(()=>F(t,r)),(e=>F(!0,e))):F(t,r),null}w||(w=!0,q?o():h(C,o))}function L(e,t){z(void 0,e,t)}function F(e,t){return S=!0,l.releaseLock(),i.releaseLock(),void 0!==a&&a.removeEventListener("abort",k),e?W(t):P(void 0),null}w||(b(i.closed,B,A),b(l.closed,(function(){return S||(R="closed"),null}),j)),q?O():y((()=>{q=!0,g(),O()}))}))}function Ot(e,t){return function(e){try{return e.getReader({mode:"byob"}).releaseLock(),!0}catch(e){return!1}}(e)?function(e){let t,r,o,n,a,i=e.getReader(),l=!1,s=!1,d=!1,f=!1,h=!1,p=!1;const m=u((e=>{a=e}));function y(e){_(e.closed,(t=>(e!==i||(o.error(t),n.error(t),h&&p||a(void 0)),null)))}function g(){l&&(i.releaseLock(),i=e.getReader(),y(i),l=!1),b(i.read(),(e=>{var t,r;if(d=!1,f=!1,e.done)return h||o.close(),p||n.close(),null===(t=o.byobRequest)||void 0===t||t.respond(0),null===(r=n.byobRequest)||void 0===r||r.respond(0),h&&p||a(void 0),null;const l=e.value,u=l;let c=l;if(!h&&!p)try{c=le(l)}catch(e){return o.error(e),n.error(e),a(i.cancel(e)),null}return h||o.enqueue(u),p||n.enqueue(c),s=!1,d?S():f&&v(),null}),(()=>(s=!1,null)))}function w(t,r){l||(i.releaseLock(),i=e.getReader({mode:"byob"}),y(i),l=!0);const u=r?n:o,c=r?o:n;b(i.read(t),(e=>{var t;d=!1,f=!1;const o=r?p:h,n=r?h:p;if(e.done){o||u.close(),n||c.close();const r=e.value;return void 0!==r&&(o||u.byobRequest.respondWithNewView(r),n||null===(t=c.byobRequest)||void 0===t||t.respond(0)),o&&n||a(void 0),null}const l=e.value;if(n)o||u.byobRequest.respondWithNewView(l);else{let e;try{e=le(l)}catch(e){return u.error(e),c.error(e),a(i.cancel(e)),null}o||u.byobRequest.respondWithNewView(l),c.enqueue(e)}return s=!1,d?S():f&&v(),null}),(()=>(s=!1,null)))}function S(){if(s)return d=!0,c(void 0);s=!0;const e=o.byobRequest;return null===e?g():w(e.view,!1),c(void 0)}function v(){if(s)return f=!0,c(void 0);s=!0;const e=n.byobRequest;return null===e?g():w(e.view,!0),c(void 0)}function R(e){if(h=!0,t=e,p){const e=[t,r],o=i.cancel(e);a(o)}return m}function T(e){if(p=!0,r=e,h){const e=[t,r],o=i.cancel(e);a(o)}return m}const q=new ReadableStream({type:"bytes",start(e){o=e},pull:S,cancel:R}),C=new ReadableStream({type:"bytes",start(e){n=e},pull:v,cancel:T});return y(i),[q,C]}(e):function(e,t){const r=e.getReader();let o,n,a,i,l,s=!1,d=!1,f=!1,h=!1;const p=u((e=>{l=e}));function m(){return s?(d=!0,c(void 0)):(s=!0,b(r.read(),(e=>{if(d=!1,e.done)return f||a.close(),h||i.close(),f&&h||l(void 0),null;const t=e.value,r=t,o=t;return f||a.enqueue(r),h||i.enqueue(o),s=!1,d&&m(),null}),(()=>(s=!1,null))),c(void 0))}function y(e){if(f=!0,o=e,h){const e=[o,n],t=r.cancel(e);l(t)}return p}function g(e){if(h=!0,n=e,f){const e=[o,n],t=r.cancel(e);l(t)}return p}const w=new ReadableStream({start(e){a=e},pull:m,cancel:y}),S=new ReadableStream({start(e){i=e},pull:m,cancel:g});return _(r.closed,(e=>(a.error(e),i.error(e),f&&h||l(void 0),null))),[w,S]}(e)}class ReadableStreamDefaultController{constructor(){throw new TypeError("Illegal constructor")}get desiredSize(){if(!Bt(this))throw Dt("desiredSize");return Lt(this)}close(){if(!Bt(this))throw Dt("close");if(!Ft(this))throw new TypeError("The stream is not in a state that permits close");!function(e){if(!Ft(e))return;const t=e._controlledReadableStream;e._closeRequested=!0,0===e._queue.length&&(jt(e),Xt(t))}(this)}enqueue(e){if(!Bt(this))throw Dt("enqueue");if(!Ft(this))throw new TypeError("The stream is not in a state that permits enqueue");return function(e,t){if(!Ft(e))return;const r=e._controlledReadableStream;if(Ut(r)&&X(r)>0)G(r,t,!1);else{let r;try{r=e._strategySizeAlgorithm(t)}catch(t){throw zt(e,t),t}try{ue(e,t,r)}catch(t){throw zt(e,t),t}}At(e)}(this,e)}error(e){if(!Bt(this))throw Dt("error");zt(this,e)}[T](e){ce(this);const t=this._cancelAlgorithm(e);return jt(this),t}[q](e){const t=this._controlledReadableStream;if(this._queue.length>0){const r=se(this);this._closeRequested&&0===this._queue.length?(jt(this),Xt(t)):At(this),e._chunkSteps(r)}else U(t,e),At(this)}[C](){}}function Bt(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableStream")&&e instanceof ReadableStreamDefaultController)}function At(e){const t=function(e){const t=e._controlledReadableStream;if(!Ft(e))return!1;if(!e._started)return!1;if(Ut(t)&&X(t)>0)return!0;if(Lt(e)>0)return!0;return!1}(e);if(!t)return;if(e._pulling)return void(e._pullAgain=!0);e._pulling=!0;b(e._pullAlgorithm(),(()=>(e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,At(e)),null)),(t=>(zt(e,t),null)))}function jt(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function zt(e,t){const r=e._controlledReadableStream;"readable"===r._state&&(ce(e),jt(e),Jt(r,t))}function Lt(e){const t=e._controlledReadableStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function Ft(e){return!e._closeRequested&&"readable"===e._controlledReadableStream._state}function It(e,t,r,o){const n=Object.create(ReadableStreamDefaultController.prototype);let a,i,l;a=void 0!==t.start?()=>t.start(n):()=>{},i=void 0!==t.pull?()=>t.pull(n):()=>c(void 0),l=void 0!==t.cancel?e=>t.cancel(e):()=>c(void 0),function(e,t,r,o,n,a,i){t._controlledReadableStream=e,t._queue=void 0,t._queueTotalSize=void 0,ce(t),t._started=!1,t._closeRequested=!1,t._pullAgain=!1,t._pulling=!1,t._strategySizeAlgorithm=i,t._strategyHWM=a,t._pullAlgorithm=o,t._cancelAlgorithm=n,e._readableStreamController=t,b(c(r()),(()=>(t._started=!0,At(t),null)),(e=>(zt(t,e),null)))}(e,n,a,i,l,r,o)}function Dt(e){return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`)}function $t(e,t,r){return I(e,r),r=>w(e,t,[r])}function Mt(e,t,r){return I(e,r),r=>w(e,t,[r])}function Yt(e,t,r){return I(e,r),r=>g(e,t,[r])}function Qt(e,t){if("bytes"!==(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamType`);return e}function Nt(e,t){if("byob"!==(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamReaderMode`);return e}function Ht(e,t){F(e,t);const r=null==e?void 0:e.preventAbort,o=null==e?void 0:e.preventCancel,n=null==e?void 0:e.preventClose,a=null==e?void 0:e.signal;return void 0!==a&&function(e,t){if(!function(e){if("object"!=typeof e||null===e)return!1;try{return"boolean"==typeof e.aborted}catch(e){return!1}}(e))throw new TypeError(`${t} is not an AbortSignal.`)}(a,`${t} has member 'signal' that`),{preventAbort:Boolean(r),preventCancel:Boolean(o),preventClose:Boolean(n),signal:a}}function xt(e,t){F(e,t);const r=null==e?void 0:e.readable;M(r,"readable","ReadableWritablePair"),function(e,t){if(!H(e))throw new TypeError(`${t} is not a ReadableStream.`)}(r,`${t} has member 'readable' that`);const o=null==e?void 0:e.writable;return M(o,"writable","ReadableWritablePair"),function(e,t){if(!x(e))throw new TypeError(`${t} is not a WritableStream.`)}(o,`${t} has member 'writable' that`),{readable:r,writable:o}}Object.defineProperties(ReadableStreamDefaultController.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),n(ReadableStreamDefaultController.prototype.close,"close"),n(ReadableStreamDefaultController.prototype.enqueue,"enqueue"),n(ReadableStreamDefaultController.prototype.error,"error"),"symbol"==typeof e.toStringTag&&Object.defineProperty(ReadableStreamDefaultController.prototype,e.toStringTag,{value:"ReadableStreamDefaultController",configurable:!0});class ReadableStream{constructor(e={},t={}){void 0===e?e=null:D(e,"First parameter");const r=Ye(t,"Second parameter"),o=function(e,t){F(e,t);const r=e,o=null==r?void 0:r.autoAllocateChunkSize,n=null==r?void 0:r.cancel,a=null==r?void 0:r.pull,i=null==r?void 0:r.start,l=null==r?void 0:r.type;return{autoAllocateChunkSize:void 0===o?void 0:N(o,`${t} has member 'autoAllocateChunkSize' that`),cancel:void 0===n?void 0:$t(n,r,`${t} has member 'cancel' that`),pull:void 0===a?void 0:Mt(a,r,`${t} has member 'pull' that`),start:void 0===i?void 0:Yt(i,r,`${t} has member 'start' that`),type:void 0===l?void 0:Qt(l,`${t} has member 'type' that`)}}(e,"First parameter");var n;if((n=this)._state="readable",n._reader=void 0,n._storedError=void 0,n._disturbed=!1,"bytes"===o.type){if(void 0!==r.size)throw new RangeError("The strategy for a byte stream cannot have a size function");Oe(this,o,$e(r,0))}else{const e=Me(r);It(this,o,$e(r,1),e)}}get locked(){if(!Vt(this))throw Kt("locked");return Ut(this)}cancel(e){return Vt(this)?Ut(this)?d(new TypeError("Cannot cancel a stream that already has a reader")):Gt(this,e):d(Kt("cancel"))}getReader(e){if(!Vt(this))throw Kt("getReader");return void 0===function(e,t){F(e,t);const r=null==e?void 0:e.mode;return{mode:void 0===r?void 0:Nt(r,`${t} has member 'mode' that`)}}(e,"First parameter").mode?new ReadableStreamDefaultReader(this):function(e){return new ReadableStreamBYOBReader(e)}(this)}pipeThrough(e,t={}){if(!H(this))throw Kt("pipeThrough");$(e,1,"pipeThrough");const r=xt(e,"First parameter"),o=Ht(t,"Second parameter");if(this.locked)throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");if(r.writable.locked)throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");return m(kt(this,r.writable,o.preventClose,o.preventAbort,o.preventCancel,o.signal)),r.readable}pipeTo(e,t={}){if(!H(this))return d(Kt("pipeTo"));if(void 0===e)return d("Parameter 1 is required in 'pipeTo'.");if(!x(e))return d(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));let r;try{r=Ht(t,"Second parameter")}catch(e){return d(e)}return this.locked?d(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")):e.locked?d(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")):kt(this,e,r.preventClose,r.preventAbort,r.preventCancel,r.signal)}tee(){if(!H(this))throw Kt("tee");if(this.locked)throw new TypeError("Cannot tee a stream that already has a reader");return Ot(this)}values(e){if(!H(this))throw Kt("values");return function(e,t){const r=e.getReader(),o=new te(r,t),n=Object.create(re);return n._asyncIteratorImpl=o,n}(this,function(e,t){F(e,t);const r=null==e?void 0:e.preventCancel;return{preventCancel:Boolean(r)}}(e,"First parameter").preventCancel)}}function Vt(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_readableStreamController")&&e instanceof ReadableStream)}function Ut(e){return void 0!==e._reader}function Gt(e,r){if(e._disturbed=!0,"closed"===e._state)return c(void 0);if("errored"===e._state)return d(e._storedError);Xt(e);const o=e._reader;if(void 0!==o&&Fe(o)){const e=o._readIntoRequests;o._readIntoRequests=new S,e.forEach((e=>{e._closeSteps(void 0)}))}return p(e._readableStreamController[T](r),t)}function Xt(e){e._state="closed";const t=e._reader;if(void 0!==t&&(j(t),K(t))){const e=t._readRequests;t._readRequests=new S,e.forEach((e=>{e._closeSteps()}))}}function Jt(e,t){e._state="errored",e._storedError=t;const r=e._reader;void 0!==r&&(A(r,t),K(r)?Z(r,t):Ie(r,t))}function Kt(e){return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`)}function Zt(e,t){F(e,t);const r=null==e?void 0:e.highWaterMark;return M(r,"highWaterMark","QueuingStrategyInit"),{highWaterMark:Y(r)}}Object.defineProperties(ReadableStream.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),n(ReadableStream.prototype.cancel,"cancel"),n(ReadableStream.prototype.getReader,"getReader"),n(ReadableStream.prototype.pipeThrough,"pipeThrough"),n(ReadableStream.prototype.pipeTo,"pipeTo"),n(ReadableStream.prototype.tee,"tee"),n(ReadableStream.prototype.values,"values"),"symbol"==typeof e.toStringTag&&Object.defineProperty(ReadableStream.prototype,e.toStringTag,{value:"ReadableStream",configurable:!0}),"symbol"==typeof e.asyncIterator&&Object.defineProperty(ReadableStream.prototype,e.asyncIterator,{value:ReadableStream.prototype.values,writable:!0,configurable:!0});const er=e=>e.byteLength;n(er,"size");class ByteLengthQueuingStrategy{constructor(e){$(e,1,"ByteLengthQueuingStrategy"),e=Zt(e,"First parameter"),this._byteLengthQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!rr(this))throw tr("highWaterMark");return this._byteLengthQueuingStrategyHighWaterMark}get size(){if(!rr(this))throw tr("size");return er}}function tr(e){return new TypeError(`ByteLengthQueuingStrategy.prototype.${e} can only be used on a ByteLengthQueuingStrategy`)}function rr(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_byteLengthQueuingStrategyHighWaterMark")&&e instanceof ByteLengthQueuingStrategy)}Object.defineProperties(ByteLengthQueuingStrategy.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof e.toStringTag&&Object.defineProperty(ByteLengthQueuingStrategy.prototype,e.toStringTag,{value:"ByteLengthQueuingStrategy",configurable:!0});const or=()=>1;n(or,"size");class CountQueuingStrategy{constructor(e){$(e,1,"CountQueuingStrategy"),e=Zt(e,"First parameter"),this._countQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!ar(this))throw nr("highWaterMark");return this._countQueuingStrategyHighWaterMark}get size(){if(!ar(this))throw nr("size");return or}}function nr(e){return new TypeError(`CountQueuingStrategy.prototype.${e} can only be used on a CountQueuingStrategy`)}function ar(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_countQueuingStrategyHighWaterMark")&&e instanceof CountQueuingStrategy)}function ir(e,t,r){return I(e,r),r=>w(e,t,[r])}function lr(e,t,r){return I(e,r),r=>g(e,t,[r])}function sr(e,t,r){return I(e,r),(r,o)=>w(e,t,[r,o])}Object.defineProperties(CountQueuingStrategy.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof e.toStringTag&&Object.defineProperty(CountQueuingStrategy.prototype,e.toStringTag,{value:"CountQueuingStrategy",configurable:!0});class TransformStream{constructor(e={},t={},r={}){void 0===e&&(e=null);const o=Ye(t,"Second parameter"),n=Ye(r,"Third parameter"),a=function(e,t){F(e,t);const r=null==e?void 0:e.flush,o=null==e?void 0:e.readableType,n=null==e?void 0:e.start,a=null==e?void 0:e.transform,i=null==e?void 0:e.writableType;return{flush:void 0===r?void 0:ir(r,e,`${t} has member 'flush' that`),readableType:o,start:void 0===n?void 0:lr(n,e,`${t} has member 'start' that`),transform:void 0===a?void 0:sr(a,e,`${t} has member 'transform' that`),writableType:i}}(e,"First parameter");if(void 0!==a.readableType)throw new RangeError("Invalid readableType specified");if(void 0!==a.writableType)throw new RangeError("Invalid writableType specified");const i=$e(n,0),l=Me(n),s=$e(o,1),f=Me(o);let b;!function(e,t,r,o,n,a){function i(){return t}function l(t){return function(e,t){const r=e._transformStreamController;if(e._backpressure){return p(e._backpressureChangePromise,(()=>{if("erroring"===(Ge(e._writable)?e._writable._state:e._writableState))throw Ge(e._writable)?e._writable._storedError:e._writableStoredError;return pr(r,t)}))}return pr(r,t)}(e,t)}function s(t){return function(e,t){return cr(e,t),c(void 0)}(e,t)}function u(){return function(e){const t=e._transformStreamController,r=t._flushAlgorithm();return hr(t),p(r,(()=>{if("errored"===e._readableState)throw e._readableStoredError;gr(e)&&wr(e)}),(t=>{throw cr(e,t),e._readableStoredError}))}(e)}function d(){return function(e){return fr(e,!1),e._backpressureChangePromise}(e)}function f(t){return dr(e,t),c(void 0)}e._writableState="writable",e._writableStoredError=void 0,e._writableHasInFlightOperation=!1,e._writableStarted=!1,e._writable=function(e,t,r,o,n,a,i){return new WritableStream({start(r){e._writableController=r;try{const t=r.signal;void 0!==t&&t.addEventListener("abort",(()=>{"writable"===e._writableState&&(e._writableState="erroring",t.reason&&(e._writableStoredError=t.reason))}))}catch(e){}return p(t(),(()=>(e._writableStarted=!0,Cr(e),null)),(t=>{throw e._writableStarted=!0,Rr(e,t),t}))},write:t=>(function(e){e._writableHasInFlightOperation=!0}(e),p(r(t),(()=>(function(e){e._writableHasInFlightOperation=!1}(e),Cr(e),null)),(t=>{throw function(e,t){e._writableHasInFlightOperation=!1,Rr(e,t)}(e,t),t}))),close:()=>(function(e){e._writableHasInFlightOperation=!0}(e),p(o(),(()=>(function(e){e._writableHasInFlightOperation=!1;"erroring"===e._writableState&&(e._writableStoredError=void 0);e._writableState="closed"}(e),null)),(t=>{throw function(e,t){e._writableHasInFlightOperation=!1,e._writableState,Rr(e,t)}(e,t),t}))),abort:t=>(e._writableState="errored",e._writableStoredError=t,n(t))},{highWaterMark:a,size:i})}(e,i,l,u,s,r,o),e._readableState="readable",e._readableStoredError=void 0,e._readableCloseRequested=!1,e._readablePulling=!1,e._readable=function(e,t,r,o,n,a){return new ReadableStream({start:r=>(e._readableController=r,t().catch((t=>{Sr(e,t)}))),pull:()=>(e._readablePulling=!0,r().catch((t=>{Sr(e,t)}))),cancel:t=>(e._readableState="closed",o(t))},{highWaterMark:n,size:a})}(e,i,d,f,n,a),e._backpressure=void 0,e._backpressureChangePromise=void 0,e._backpressureChangePromise_resolve=void 0,fr(e,!0),e._transformStreamController=void 0}(this,u((e=>{b=e})),s,f,i,l),function(e,t){const r=Object.create(TransformStreamDefaultController.prototype);let o,n;o=void 0!==t.transform?e=>t.transform(e,r):e=>{try{return _r(r,e),c(void 0)}catch(e){return d(e)}};n=void 0!==t.flush?()=>t.flush(r):()=>c(void 0);!function(e,t,r,o){t._controlledTransformStream=e,e._transformStreamController=t,t._transformAlgorithm=r,t._flushAlgorithm=o}(e,r,o,n)}(this,a),void 0!==a.start?b(a.start(this._transformStreamController)):b(void 0)}get readable(){if(!ur(this))throw yr("readable");return this._readable}get writable(){if(!ur(this))throw yr("writable");return this._writable}}function ur(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_transformStreamController")&&e instanceof TransformStream)}function cr(e,t){Sr(e,t),dr(e,t)}function dr(e,t){hr(e._transformStreamController),function(e,t){e._writableController.error(t);"writable"===e._writableState&&Tr(e,t)}(e,t),e._backpressure&&fr(e,!1)}function fr(e,t){void 0!==e._backpressureChangePromise&&e._backpressureChangePromise_resolve(),e._backpressureChangePromise=u((t=>{e._backpressureChangePromise_resolve=t})),e._backpressure=t}Object.defineProperties(TransformStream.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),"symbol"==typeof e.toStringTag&&Object.defineProperty(TransformStream.prototype,e.toStringTag,{value:"TransformStream",configurable:!0});class TransformStreamDefaultController{constructor(){throw new TypeError("Illegal constructor")}get desiredSize(){if(!br(this))throw mr("desiredSize");return vr(this._controlledTransformStream)}enqueue(e){if(!br(this))throw mr("enqueue");_r(this,e)}error(e){if(!br(this))throw mr("error");var t;t=e,cr(this._controlledTransformStream,t)}terminate(){if(!br(this))throw mr("terminate");!function(e){const t=e._controlledTransformStream;gr(t)&&wr(t);const r=new TypeError("TransformStream terminated");dr(t,r)}(this)}}function br(e){return!!r(e)&&(!!Object.prototype.hasOwnProperty.call(e,"_controlledTransformStream")&&e instanceof TransformStreamDefaultController)}function hr(e){e._transformAlgorithm=void 0,e._flushAlgorithm=void 0}function _r(e,t){const r=e._controlledTransformStream;if(!gr(r))throw new TypeError("Readable side is not in a state that permits enqueue");try{!function(e,t){e._readablePulling=!1;try{e._readableController.enqueue(t)}catch(t){throw Sr(e,t),t}}(r,t)}catch(e){throw dr(r,e),r._readableStoredError}const o=function(e){return!function(e){if(!gr(e))return!1;if(e._readablePulling)return!0;if(vr(e)>0)return!0;return!1}(e)}(r);o!==r._backpressure&&fr(r,!0)}function pr(e,t){return p(e._transformAlgorithm(t),void 0,(t=>{throw cr(e._controlledTransformStream,t),t}))}function mr(e){return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`)}function yr(e){return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`)}function gr(e){return!e._readableCloseRequested&&"readable"===e._readableState}function wr(e){e._readableState="closed",e._readableCloseRequested=!0,e._readableController.close()}function Sr(e,t){"readable"===e._readableState&&(e._readableState="errored",e._readableStoredError=t),e._readableController.error(t)}function vr(e){return e._readableController.desiredSize}function Rr(e,t){"writable"!==e._writableState?qr(e):Tr(e,t)}function Tr(e,t){e._writableState="erroring",e._writableStoredError=t,!function(e){return e._writableHasInFlightOperation}(e)&&e._writableStarted&&qr(e)}function qr(e){e._writableState="errored"}function Cr(e){"erroring"===e._writableState&&qr(e)}Object.defineProperties(TransformStreamDefaultController.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),n(TransformStreamDefaultController.prototype.enqueue,"enqueue"),n(TransformStreamDefaultController.prototype.error,"error"),n(TransformStreamDefaultController.prototype.terminate,"terminate"),"symbol"==typeof e.toStringTag&&Object.defineProperty(TransformStreamDefaultController.prototype,e.toStringTag,{value:"TransformStreamDefaultController",configurable:!0});

// EXTERNAL MODULE: ./node_modules/formdata-node/lib/esm/isFunction.js
var isFunction = __nccwpck_require__(6755);
;// CONCATENATED MODULE: ./node_modules/formdata-node/lib/esm/blobHelpers.js
/*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank */

const CHUNK_SIZE = 65536;
async function* clonePart(part) {
    const end = part.byteOffset + part.byteLength;
    let position = part.byteOffset;
    while (position !== end) {
        const size = Math.min(end - position, CHUNK_SIZE);
        const chunk = part.buffer.slice(position, position + size);
        position += chunk.byteLength;
        yield new Uint8Array(chunk);
    }
}
async function* consumeNodeBlob(blob) {
    let position = 0;
    while (position !== blob.size) {
        const chunk = blob.slice(position, Math.min(blob.size, position + CHUNK_SIZE));
        const buffer = await chunk.arrayBuffer();
        position += buffer.byteLength;
        yield new Uint8Array(buffer);
    }
}
async function* consumeBlobParts(parts, clone = false) {
    for (const part of parts) {
        if (ArrayBuffer.isView(part)) {
            if (clone) {
                yield* clonePart(part);
            }
            else {
                yield part;
            }
        }
        else if ((0,isFunction/* isFunction */.T)(part.stream)) {
            yield* part.stream();
        }
        else {
            yield* consumeNodeBlob(part);
        }
    }
}
function* sliceBlob(blobParts, blobSize, start = 0, end) {
    end !== null && end !== void 0 ? end : (end = blobSize);
    let relativeStart = start < 0
        ? Math.max(blobSize + start, 0)
        : Math.min(start, blobSize);
    let relativeEnd = end < 0
        ? Math.max(blobSize + end, 0)
        : Math.min(end, blobSize);
    const span = Math.max(relativeEnd - relativeStart, 0);
    let added = 0;
    for (const part of blobParts) {
        if (added >= span) {
            break;
        }
        const partSize = ArrayBuffer.isView(part) ? part.byteLength : part.size;
        if (relativeStart && partSize <= relativeStart) {
            relativeStart -= partSize;
            relativeEnd -= partSize;
        }
        else {
            let chunk;
            if (ArrayBuffer.isView(part)) {
                chunk = part.subarray(relativeStart, Math.min(partSize, relativeEnd));
                added += chunk.byteLength;
            }
            else {
                chunk = part.slice(relativeStart, Math.min(partSize, relativeEnd));
                added += chunk.size;
            }
            relativeEnd -= partSize;
            relativeStart = 0;
            yield chunk;
        }
    }
}

;// CONCATENATED MODULE: ./node_modules/formdata-node/lib/esm/Blob.js
/*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank */
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Blob_parts, _Blob_type, _Blob_size;



class Blob {
    constructor(blobParts = [], options = {}) {
        _Blob_parts.set(this, []);
        _Blob_type.set(this, "");
        _Blob_size.set(this, 0);
        options !== null && options !== void 0 ? options : (options = {});
        if (typeof blobParts !== "object" || blobParts === null) {
            throw new TypeError("Failed to construct 'Blob': "
                + "The provided value cannot be converted to a sequence.");
        }
        if (!(0,isFunction/* isFunction */.T)(blobParts[Symbol.iterator])) {
            throw new TypeError("Failed to construct 'Blob': "
                + "The object must have a callable @@iterator property.");
        }
        if (typeof options !== "object" && !(0,isFunction/* isFunction */.T)(options)) {
            throw new TypeError("Failed to construct 'Blob': parameter 2 cannot convert to dictionary.");
        }
        const encoder = new TextEncoder();
        for (const raw of blobParts) {
            let part;
            if (ArrayBuffer.isView(raw)) {
                part = new Uint8Array(raw.buffer.slice(raw.byteOffset, raw.byteOffset + raw.byteLength));
            }
            else if (raw instanceof ArrayBuffer) {
                part = new Uint8Array(raw.slice(0));
            }
            else if (raw instanceof Blob) {
                part = raw;
            }
            else {
                part = encoder.encode(String(raw));
            }
            __classPrivateFieldSet(this, _Blob_size, __classPrivateFieldGet(this, _Blob_size, "f") + (ArrayBuffer.isView(part) ? part.byteLength : part.size), "f");
            __classPrivateFieldGet(this, _Blob_parts, "f").push(part);
        }
        const type = options.type === undefined ? "" : String(options.type);
        __classPrivateFieldSet(this, _Blob_type, /^[\x20-\x7E]*$/.test(type) ? type : "", "f");
    }
    static [(_Blob_parts = new WeakMap(), _Blob_type = new WeakMap(), _Blob_size = new WeakMap(), Symbol.hasInstance)](value) {
        return Boolean(value
            && typeof value === "object"
            && (0,isFunction/* isFunction */.T)(value.constructor)
            && ((0,isFunction/* isFunction */.T)(value.stream)
                || (0,isFunction/* isFunction */.T)(value.arrayBuffer))
            && /^(Blob|File)$/.test(value[Symbol.toStringTag]));
    }
    get type() {
        return __classPrivateFieldGet(this, _Blob_type, "f");
    }
    get size() {
        return __classPrivateFieldGet(this, _Blob_size, "f");
    }
    slice(start, end, contentType) {
        return new Blob(sliceBlob(__classPrivateFieldGet(this, _Blob_parts, "f"), this.size, start, end), {
            type: contentType
        });
    }
    async text() {
        const decoder = new TextDecoder();
        let result = "";
        for await (const chunk of consumeBlobParts(__classPrivateFieldGet(this, _Blob_parts, "f"))) {
            result += decoder.decode(chunk, { stream: true });
        }
        result += decoder.decode();
        return result;
    }
    async arrayBuffer() {
        const view = new Uint8Array(this.size);
        let offset = 0;
        for await (const chunk of consumeBlobParts(__classPrivateFieldGet(this, _Blob_parts, "f"))) {
            view.set(chunk, offset);
            offset += chunk.length;
        }
        return view.buffer;
    }
    stream() {
        const iterator = consumeBlobParts(__classPrivateFieldGet(this, _Blob_parts, "f"), true);
        return new ReadableStream({
            async pull(controller) {
                const { value, done } = await iterator.next();
                if (done) {
                    return queueMicrotask(() => controller.close());
                }
                controller.enqueue(value);
            },
            async cancel() {
                await iterator.return();
            }
        });
    }
    get [Symbol.toStringTag]() {
        return "Blob";
    }
}
Object.defineProperties(Blob.prototype, {
    type: { enumerable: true },
    size: { enumerable: true },
    slice: { enumerable: true },
    stream: { enumerable: true },
    text: { enumerable: true },
    arrayBuffer: { enumerable: true }
});


/***/ }),

/***/ 1365:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

"use strict";
/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ File)
/* harmony export */ });
/* harmony import */ var _Blob_js__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(4777);
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _File_name, _File_lastModified;

class File extends _Blob_js__WEBPACK_IMPORTED_MODULE_0__/* .Blob */ .Y {
    constructor(fileBits, name, options = {}) {
        super(fileBits, options);
        _File_name.set(this, void 0);
        _File_lastModified.set(this, 0);
        if (arguments.length < 2) {
            throw new TypeError("Failed to construct 'File': 2 arguments required, "
                + `but only ${arguments.length} present.`);
        }
        __classPrivateFieldSet(this, _File_name, String(name), "f");
        const lastModified = options.lastModified === undefined
            ? Date.now()
            : Number(options.lastModified);
        if (!Number.isNaN(lastModified)) {
            __classPrivateFieldSet(this, _File_lastModified, lastModified, "f");
        }
    }
    static [(_File_name = new WeakMap(), _File_lastModified = new WeakMap(), Symbol.hasInstance)](value) {
        return value instanceof _Blob_js__WEBPACK_IMPORTED_MODULE_0__/* .Blob */ .Y
            && value[Symbol.toStringTag] === "File"
            && typeof value.name === "string";
    }
    get name() {
        return __classPrivateFieldGet(this, _File_name, "f");
    }
    get lastModified() {
        return __classPrivateFieldGet(this, _File_lastModified, "f");
    }
    get webkitRelativePath() {
        return "";
    }
    get [Symbol.toStringTag]() {
        return "File";
    }
}


/***/ }),

/***/ 7501:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

"use strict";
/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   f: () => (/* binding */ isFile)
/* harmony export */ });
/* harmony import */ var _File_js__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(1365);

const isFile = (value) => value instanceof _File_js__WEBPACK_IMPORTED_MODULE_0__/* .File */ .Z;


/***/ }),

/***/ 6755:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

"use strict";
/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   T: () => (/* binding */ isFunction)
/* harmony export */ });
const isFunction = (value) => (typeof value === "function");


/***/ }),

/***/ 5915:
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"explicit_n_vocab":64739,"pat_str":"\'s|\'t|\'re|\'ve|\'m|\'ll|\'d| ?\\\\p{L}+| ?\\\\p{N}+| ?[^\\\\s\\\\p{L}\\\\p{N}]+|\\\\s+(?!\\\\S)|\\\\s+","special_tokens":{"<EOT>":0,"<META>":1,"<META_START>":2,"<META_END>":3,"<SOS>":4},"bpe_ranks":"! 5 IQ== Ig== Iw== JA== JQ== Jg== Jw== KA== KQ== Kg== Kw== LA== LQ== Lg== Lw== MA== MQ== Mg== Mw== NA== NQ== Ng== Nw== OA== OQ== Og== Ow== PA== PQ== Pg== Pw== QA== QQ== Qg== Qw== RA== RQ== Rg== Rw== SA== SQ== Sg== Sw== TA== TQ== Tg== Tw== UA== UQ== Ug== Uw== VA== VQ== Vg== Vw== WA== WQ== Wg== Ww== XA== XQ== Xg== Xw== YA== YQ== Yg== Yw== ZA== ZQ== Zg== Zw== aA== aQ== ag== aw== bA== bQ== bg== bw== cA== cQ== cg== cw== dA== dQ== dg== dw== eA== eQ== eg== ew== fA== fQ== fg== oQ== og== ow== pA== pQ== pg== pw== qA== qQ== qg== qw== rA== rg== rw== sA== sQ== sg== sw== tA== tQ== tg== tw== uA== uQ== ug== uw== vA== vQ== vg== vw== wA== wQ== wg== ww== xA== xQ== xg== xw== yA== yQ== yg== yw== zA== zQ== zg== zw== 0A== 0Q== 0g== 0w== 1A== 1Q== 1g== 1w== 2A== 2Q== 2g== 2w== 3A== 3Q== 3g== 3w== 4A== 4Q== 4g== 4w== 5A== 5Q== 5g== 5w== 6A== 6Q== 6g== 6w== 7A== 7Q== 7g== 7w== 8A== 8Q== 8g== 8w== 9A== 9Q== 9g== 9w== +A== +Q== +g== +w== /A== /Q== /g== /w== AA== AQ== Ag== Aw== BA== BQ== Bg== Bw== CA== CQ== Cg== Cw== DA== DQ== Dg== Dw== EA== EQ== Eg== Ew== FA== FQ== Fg== Fw== GA== GQ== Gg== Gw== HA== HQ== Hg== Hw== IA== fw== gA== gQ== gg== gw== hA== hQ== hg== hw== iA== iQ== ig== iw== jA== jQ== jg== jw== kA== kQ== kg== kw== lA== lQ== lg== lw== mA== mQ== mg== mw== nA== nQ== ng== nw== oA== rQ== ICA= ICAgIA== aW4= ICAg IHQ= ZXI= ICAgICAgICA= b24= IGE= cmU= YXQ= c2U= aGU= b3I= c3Q= ZW4= ICAgICAgIA== YWw= IHRoZQ== aXQ= IGM= YW4= bGU= ID0= ZGU= YXI= CiAgICAgICA= IGY= IHA= CiAgICAgICAg IG8= IHM= IHc= bWU= CiAgIA== cm8= aW9u aW5n aXM= IGlu IGI= aWM= c2Vs b3U= c2VsZg== ZWQ= LS0= bmQ= ZXM= IG0= IHJl Y3Q= IG4= YXM= IGQ= IG9m IHRv ZW50 ICc= ZXQ= ZWw= IGg= dXQ= IGk= dXI= IGw= bXA= ICI= IGFuZA== CiAgICAgICAgICAg b3Q= IyM= aWw= IHNlbGY= aWQ= cmE= IHRo IGU= b2w= aWc= IGRl Y2U= YWQ= ICg= KTo= YW1l Jyw= dWU= IGc= Y2g= IGZvcg== IFQ= YXRl bG8= IDE= YWc= dmU= LS0tLQ== b3J0 YXRpb24= cGU= dWw= IHU= aXN0 IGlz dmVy IFM= dGg= IHN0 KCk= cmk= b20= IEk= MDA= dW0= Y2s= YWI= bnQ= ICM= IEE= ICAgICAgICAgICAgICAgIA== IEM= YXk= dGU= IGlm c3M= aW50 b2Rl bHk= aWY= b3c= IGJl aXI= YXA= PT0= b25l aXRo cm9t dXJu c2Vy dGVy CiAgICAgICAgICAgICAgIA== IDA= IHY= IyMjIw== IHNl b3A= aW0= KSw= dW4= IGNvbg== YW0= aWxl CgogICA= X18= IHk= IiI= CQk= b2Q= a2U= IDI= dHVybg== YW5k IGRlZg== IFA= Jzo= IHRoYXQ= IE0= KCc= IE4= eHQ= aHQ= bXBvcnQ= YXRh IFs= dXA= Iiw= cXU= IHdpdGg= IG9u ZW5k YWdl IGFz IGl0 YW5n Y29u ZXJz Cgo= IHJldHVybg== bmFtZQ== IEY= ICs= IHI= cHQ= CiAgICAgICAgICAgICAgICA= KSk= YXNz ZWN0 Kio= IGFs aXo= Z2V0 YXRo IC0= IHdo aW1l Y2w= IG5vdA== b3Jl IEI= IGFu cGw= dWx0 dXM= b3M= bWVudA== 4oA= b3Vy ZXc= IEQ= YXJ0 ZXJl IHBybw== Jyk= LS0tLS0tLS0= IG9y IFI= IGV4 IGhl ZXN0 eXBl Y3Rpb24= IEw= IG1l aW5l KCI= YWlu IEg= YXNl dWI= cmVz J10= IHs= IHdhcw== b3Jt IFc= bGQ= ZW0= YWJsZQ== aWdodA== c2V0 aXY= IGF0 b2M= cmludA== IEc= YWM= b3V0 YWNr YWxs CgogICAgICAg IEU= YW50 aXR5 b3Jk cnVl aWxs b2c= IFRoZQ== Wyc= ZGVm IGltcG9ydA== b2RlbA== aWVs dG8= dmFs IGNv Y2Vz aWFs dXJl aXA= PT09PQ== IGZyb20= aWVsZA== ICIiIg== IGJ5 Iik= cXVl XSw= ID09 YXZl ZnJvbQ== IHJlcw== c3Ry CiAgICA= cGVy cHJv amVjdA== aXZl IGVs YXJl J3M= IGNo IyMjIyMjIyM= IF8= cHV0 cnk= aW5k CiAgICAgICAgICAgICAgICAgICAgICAgIA== IGFyZQ== c2M= IHNo YXJn aWVz ZmY= IE8= YXN0 MDE= IGxl ICo= b21l YXJk IHlvdQ== IHRoaXM= CgkJ aWN0 b3VudA== bWE= IGs= YXBw IGo= YXRlZA== aXJl CiAgICAgICAgICAgICAgICAgICA= b2I= b3N0 IDo= b3J5 dWc= Cgk= CiA= ZGF0YQ== aXpl aWNl IDM= aWI= Zm9ybQ== Li4= IHdl Ijo= aW9ucw== ZXg= ICU= dXN0 cGFy YW5z aXRl dHI= b3VsZA== PSc= IHBs a2V5 Ll8= ZXA= dHlwZQ== c2Vk cm9y YWNl b2s= ZXh0 IG1h cGF0aA== aWRl YW5jZQ== ZmlsZQ== bXBsZQ== IHByaW50 IFU= IE5vbmU= cGg= IGFy XSk= c2g= IGNs b21t YWN0 YmVy IG91dA== v70= 77+9 aWdu aW1wb3J0 IHZhbA== b3Jr PSI= IHN0cg== YWxzZQ== YXJ5 IGVu cXVlc3Q= YXY= bG93 IGhhdmU= ZWxs IEo= ZHU= IHByZQ== YW5nZQ== IFw= aWNo IGNvbnQ= cHJl KS4= Y2VwdA== DQogICAgICAg dGV4dA== Y2xhc3M= IGdldA== IHg= Zmln IGFk IG5hbWU= YWRk aWU= IHJv Y28= dWQ= DQo= IGNhbg== b25n IHVu VHJ1ZQ== bGlzdA== 77+977+9 DQogICA= cG9ydA== IGRhdGE= IGFi IGVsc2U= LS0tLS0tLS0tLS0tLS0tLQ== CiAgICAg Y2Vzcw== YWs= IHRpbWU= IGRv cmli Ly8= IGhpcw== aWNhbA== IDw= bGw= ZW5jZQ== IDQ= c2lvbg== aGVu aWVudA== dHk= IG5l Y3Jl cG9u cG8= IHRlc3Q= aXNl IGFw LiI= IGFsbA== aWNr aXRpb24= ZmVy bXM= SW4= cmVl aWE= ICQ= eXM= c2VydA== RVI= YWls ZnQ= IFRo aW5ncw== dGhlcg== YXRpb25z Z2U= IFY= Ym8= Y2hl SU4= MTA= b3du IHVw YXRjaA== dXJs IGJ1dA== bGVu ZGV4 Zm8= YXVsdA== IDU= IEs= ZGVk IGZpbGU= IGxv aWxk dGVzdA== YWJlbA== b3Vz bWlu IHBhcg== b2RlbHM= IHJh dW5k VGhl IGhhcw== ZXJ0 YXBwZW5k IElu 4oCZ IHNv aWV3 c28= IHNldA== IGNvbXA= aXg= T04= YXJncw== cm93 dmVudA== AAA= ZW5lcg== amFuZw== IHNh dGltZQ== PT09PT09PT0= cmVhZA== IDE5 IG9i d2U= YWNo IF9f Y29s IHdpbGw= IGdv IG5ldw== IGNvbA== b250 Y2M= MTI= ZWFy UmU= aGVy bGVk IG9uZQ== dmVs aW5r cmFpbg== c2Vz IHdoaWNo ZGF0ZQ== dHA= dXNlcg== ICgn U1Q= YXNzZXJ0 dXRl cm91cA== IGhhZA== J3Q= IHdlcmU= IHZlcg== IiIi b2xk YXRvcg== ZW5z bG9n Tm9uZQ== amFuZ28= IyMjIyMjIyMjIyMjIyMjIw== QVQ= b3VuZA== IG5v YXU= IG51bQ== dWFs IOKA IHRl dWxl IHBlcg== cHJpbnQ= bW8= ZGljdA== cXVhbA== c3A= IGxpc3Q= IGRpcw== cnJvcg== IGFzcw== UkU= Y29udA== YXRlZw== IGhlcg== IGxlbg== IH0= aW5pdA== CiAgICAgICAgICAgICAgICAgICAgICAg RmllbGQ= YXJp dWVz IGludA== cGVj cmlwdA== IHNj IFRydWU= YXRlcw== c2l6ZQ== aXJzdA== cmF5 bmRlcg== ZWM= RXJyb3I= cGFyYW0= MjA= IHNlcg== IHRoZXk= cHk= Y29t ZGI= ICAgICA= Zm9y ICk= XS4= IG5w IGlt Jyc= IHNvbWU= dXJyZQ== IHJlc3VsdA== dXRo IHBv ID4= bGVjdA== IFN0 bnVt c29u IDY= dWxs IHRy YXJr Z2Vy cmVzcw== IHlvdXI= dW1lbnQ= IG9z WyI= IG9w IHN1 IG1vcmU= MTE= IHBhcnQ= b3VyY2U= IG1hbg== Z3Ro bWw= IHRoZWly YXNr bnM= IGFn YXRlcg== dmFsdWU= bGlj cGVjdA== IFk= cG9uc2U= Y29kZQ== IHZhbHVl bGluZQ== dW5jdGlvbg== bmU= U3Q= ZXNz MTk= YW5r aWVk b3Jz aWtl Jyks Oi8v KCk6 IHF1 IHdobw== MjU= ZGVy Y291bnQ= ZXJyb3I= cml0 cml0ZQ== IHw= Z3Jh X18o T1I= IG15 bWF4 YXBl QVI= YW5u bXBs IHdoZW4= IEA= IGludGVy IHNoZQ== YXRlZ29yeQ== d29yZA== YXg= IGNvbW0= IG90aGVy RU4= IEZhbHNl IHN1Yg== IHVz cG9z bG9hZA== aWFu dmljZQ== aXNo IG92ZXI= YWdlcw== ICoq ZGly IGFueQ== bWVy bGVz bWI= ICs9 ZnRlcg== IHJhbmdl IGFyZw== IHdvcms= IHN1cA== IGxvZw== ZmllbGQ= YXJjaA== dXJyZW50 RmFsc2U= YXlz Q2g= dGhvZA== IHdvdWxk U0U= DQogICAgICAgICAgIA== dmVu IENo IGJv ICAgICAg IHNw IHRoZXJl IHVzZXI= Zm9ybWF0 TEU= SVQ= IGJlZW4= aWZpYw== IGludG8= d28= KioqKg== c3RhbmNl IGFib3V0 c2VudA== IGNyZQ== IGFkZA== c3RhdA== ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= LCI= IFtd aW8= aXJlY3Q= SUQ= bG9jaw== MzI= ICw= MDAw IHsn b2lu b3Vn IHJlYw== Il0= IHVzZQ== YWtl IG1v aW5hbA== UHJv IC8= aW5mbw== Zmls IGtu aXRz bmVjdA== bWFu MTU= IGtleQ== ZWx5 ZW5j MTY= YW1wbGU= dmVk ZXJ5 bmluZw== aGVk Q29u aW5kZXg= d29yaw== aGVjaw== IDIwMQ== IHR5cGU= eXN0 dG9u bWF0 c3RhcnQ= IHRyeQ== IGxpbmU= IGFsc28= IGVsaWY= IGZpcnN0 aWdo XVs= dGE= ZXJu bGFiZWw= IGV4Y2VwdA== IGlk bWVk aXRlbQ== IG9ubHk= c2NyaXB0 IDEw MzM= IFRoaXM= dWRl TmFtZQ== bG9hdA== b2JqZWN0 QU4= IHBl cmFtZQ== ZWY= YXllcg== IG9mZg== bGVtZW50 IGFjdA== ZGphbmdv IHRoZW0= IEl0 c3NhZ2U= dGVycw== MTg= IGNsYXNz YXJnZXQ= YWxl bW9kZWxz Ynk= aXRsZQ== bG9j Zmw= YXc= b2R1bGU= VGg= b3Nl QUw= cm91bmQ= b3B0 IC4= IHN0YXJ0 RXF1YWw= IDg= IGVuZA== Q2F0ZWdvcnk= ZW5zZQ== IGhpbQ== IG9wdA== KFs= IHJlcXVlc3Q= IEhl aW5lcw== Y29uZmln IGZl c3Vi IHNhaWQ= IDc= IGJ1 SUM= aWVy X3s= cmVm 77+977+977+977+9 MzA= dWN0 IHRoYW4= ZGQ= IGJldA== IFE= bHA= IGA= aW5wdXQ= IGFj IGZs IHVuZGVy dmlldw== YXRpbmc= aHR0cA== b3B5 Ll9f IGxpa2U= cmV0dXJu IGJhY2s= Li4u bmc= d3c= eXN0ZW0= MjI= IHBhc3M= NTA= IHJlZw== YmFjaw== IGJlYw== aWNz IHBhdGg= KCkp RVM= IHo= IG1pbg== IG1vZGVs OTk= IHRyYQ== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IGVudA== IGl0cw== Y29uZA== eW4= cmlk dWdo RXg= dXRpb24= YXR0 IHNwZWM= IHdoYXQ= IHt9 IHNlZQ== AAAAAA== NjQ= MDAwMA== YXVzZQ== c3Npb24= MTQ= IGRpc3Q= dW1w IFJl IGZpbA== IHNob3VsZA== YXRpdmU= IHllYXI= IG1vZGVscw== VHlwZQ== w6k= aWNlcw== cmVn Y29tcA== bm90 IHJlbA== IGRpZg== YXNzZXJ0RXF1YWw= cGxpdA== IHR3bw== dW1u cmlnaHQ= IGFzc2VydA== d3JpdGU= dXRpbA== IG1heQ== DQoN am9pbg== aXNz IGF0dA== Ymw= b3BsZQ== IGZpZWxk bWFpbg== ZWU= YXR0ZXI= YXNo IG9wZW4= ICE= SWQ= cmVxdWVzdA== cmFjdA== d2FyZA== IGFmdGVy CgkJCQ== ZW50cw== YXR1cmU= YWRlcg== d2FyZQ== IHRoZW4= aXJlZA== IHVzZWQ= dGhl dmVyeQ== cmF3 cHI= IG51bWJlcg== IHB5 ZW5hbWU= CgogICAgICAgICAgIA== aWJsZQ== ICY= IHRyYW5z IDIwMA== TUU= IGNvdW50 c3RhdGU= IHJhaXNl IGZ1bmN0aW9u bGVuZ3Ro CgkJCQk= aWs= IGV4dA== YnU= YW5kb20= MjAx bW9kZWw= IGRlZmF1bHQ= dGhvbg== bmVy YWly MTc= cHM= bG9i LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= ZGE= bmV0 TGlzdA== YWxseQ== IGNvbQ== PC8= ZGVmYXVsdA== IFVu REU= IGp1c3Q= MTM= dGluZw== b3Ro IGNvdWxk ZHVjdA== aWR0aA== Zm9yZQ== IHBvcw== dXJlcw== cGxpYw== IGxvYw== ZXk= IG9iamVjdA== YWN0aW9u YW1w ZmU= IHdoZXJl IDk= IGluY2w= IGlucHV0 bm9kZQ== dWJsaWM= YW1i bm8= aWZ5 IHBo cG9pbnQ= KCg= dWxhcg== cmVk Y29tbQ== YXJlbnQ= fn4= MjQ= b2R5 U2V0 dmVycw== cmVzdWx0 bWVudHM= Y2VudA== dGVk bGVjdGlvbg== c3RyaW5n ZnVs IG1heA== aWRk VVQ= aW91cw== aW5z YWxz YXJyYXk= d2FyZ3M= KCks J30= IHdoaWxl J10s RGF0YQ== IElm Ymxl Y2Vk IGFjYw== cHA= IGhvdw== IGdlbmVy 4oCd IHN0YXRl IHRleHQ= PT09PT09PT09PT09PT09PQ== b3VnaA== b29s cGxheQ== IHJ1bg== Q1Q= Jywn dHJhaW4= IGhlbHA= Uk8= ZmllbGRz bWFw ODA= Cgog bG9zZQ== bmV3 YXNlZA== ZGY= b2Y= aXplZA== IG91cg== aXNpb24= IGNvcg== b2xsb3c= YmU= d2g= IG1ha2U= ZGlz IHByaQ== IENvbg== dHM= cGxhY2U= IGRpZA== YXJz Y3Vy Z3JvdXA= ICE9 aW5kb3c= cmVu IGFt IHBvbA== IG91dHB1dA== aWxpdHk= c3BsaXQ= YWNoZQ== b3RoZXI= IGl0ZW0= IGhhbmQ= cm9s d2l0aA== b3dlcg== KCku IHBlb3BsZQ== NDA= cm91Z2g= YXV0aA== IGVhY2g= IHN0YXQ= IHNpZ24= cm9vdA== SU9O dmFsaWQ= ZXJzb24= dGluZ3M= IHJlYWQ= bXk= aWRlcg== b2xvZw== IFdl Ymlu aW1hZ2U= Y2xl aXN0cw== IGNhbA== IGh0 dGhpbmc= bWJlcg== cGVz IHJpZ2h0 VmFs Y2VwdGlvbg== a2Vu IGNoZWNr bWQ= bGVy CiAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IGluZA== bnA= 44E= IHBvaW50 VGVzdA== aWNlbnNl b3V0cHV0 aW5zdGFuY2U= c3Vt IGNvbmZpZw== CiAgICAgICAgIA== b2Nr IGN1cnJlbnQ= IGxvb2s= YXo= IG1ldGhvZA== IHdhbnQ= cnVu YXJpYWJsZQ== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= KTs= d2Vlbg== NjA= dHJhbnM= Q2w= INA= aXRpZXM= c2NyaXB0aW9u aXRlZA== dWNo d24= c2hhcGU= IGtub3c= IHNob3c= IGdyb3Vw cmVhdA== b29k IEV4 IGJs 5Lg= Wzo= cmFwaA== cGVydHk= NTU= Jy4= IGV2ZW50 YXNvbg== IG5lZWQ= IHByb3Y= IHJlc3BvbnNl IGFnYWlu dm9s cmVs QVM= aXRlcg== Y3M= IG5vdw== IGZvcm0= YXV0 UmVz IHRoZXNl RmlsZQ== ZG9j IFsn e1w= IGRvd24= aHRtbA== cGVuZA== MjM= IGRpZmZlcg== YWdz d2F5 IHRocm91Z2g= aWRnZXQ= b3JsZA== YW5uZWw= IHVybA== e30= IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyM= YW55 cmlidXQ= IEFy IFBybw== b3Rl IGNhc2U= IGNhbGw= IGxvbmc= aWx5 IGV2ZW4= VVI= bW92ZQ== IHN0dWQ= cmFu Ii4= IGRhdA== YW1z YWRl IHN5cw== YXJu aWZl IGhlcmU= IFg= IGZvbGxvdw== IGRpY3Q= IHN1Y2g= ZXRpbWU= bGli YWl0 IGZpbmQ= aWZpZWQ= IOKAkw== NjY= 4oCU IGRvZXM= cGxvdA== YXRpb25hbA== IG5vZGU= IG1vc3Q= Liw= IGJldHdlZW4= IHNt cGFyYW1z dXBkYXRl Z2luZw== Y2hlY2s= dW5j Y3JlYXRl IGluc3Q= MTAw cHJp dHQ= T1Q= b3Jn IGluZGV4 IOKAnA== c3RhdHVz YXBp MjAw aGF0 IHJlcXU= IGxhc3Q= IGJlZm9yZQ== c2VhcmNo ZW52 YmFzZQ== IGRvbg== cmVhaw== IGZvdW5k IGltcA== IHN0cmluZw== RUQ= J10p IGltYWdl aXN0ZXI= IFtdLA== c2lnbg== IGVycm9y bXBsYXRl IHNhbWU= XFw= cGFydA== dWM= ZW5jZXM= eGY= cm9u IDIw IHVzaW5n Ym94 Mjk= U3Ry IGRlYw== IENv ZGF5 IGRpcmVjdA== a3dhcmdz SW50 bGV0ZQ== ZmZlY3Q= NzU= IGdpdg== YW1iZGE= IDE4 bGk= bmFs fX0= Mjg= IHdvcmQ= dXJpbmc= DQogICAgICAgICAgICAgICA= T2I= b3Zl c2c= IGhlYWQ= IGFyZ3M= 0L4= VGV4dA== IHBsYXk= ZmFjZQ== IGJlY2F1c2U= QUM= aXplcg== b3JkZXI= IHN1cg== IGNvbnM= bGVzcw== IG9yZGVy PVs= dGl0bGU= IGNvbnRpbg== aW50ZXI= cmlw dW1l IHRlcg== dGVtcA== IGVk dGFibGU= VG8= IHNpemU= cGVjdGVk CiAgICAKICAg Zm9ybWF0aW9u cHJvY2Vzcw== eWxl Jykp YXJlZA== YXRoZXI= IHdheQ== Y2Fs Q08= bG9iYWw= ZWs= aWRz 0LA= Q29s IGxhYmVs IGV2ZXJ5 PyI= bGF5 Ojo= QUI= IGF2 IGRi IHF1ZQ== c2w= dXNo anNvbg== c3RydWN0 QVA= b3VzZQ== IG1vbg== NDU= IGV0 IG1hdA== IGh0dHA= ZXR1cm4= YWxr b2Jq dGVu NzA= eGI= IG11c3Q= R2V0 cmM= IHdlbGw= YnVn bWVzc2FnZQ== bWF0aA== IHRm IHRyYWlu bW9u b2Rpbmc= Mzg= IGxh aWdy dmVz IGFwcA== KioqKioqKio= ZGF0 IExpY2Vuc2U= cGFzcw== dWk= YW50cw== YW1ldGVycw== Y2xpZW50 IHJvdw== ZmluZA== Z3JhbQ== bWV0aG9k YXR0cg== cGFjaw== QUc= 0LU= dXR0b24= aXphdGlvbg== aW5jZQ== cml4 NjU= IHZlcnNpb24= IHJldA== IHN5c3RlbQ== bWFyeQ== VGltZQ== IGNvbnRhaW4= cm9w SU5H U2U= IGNvZGU= ZXRh IG93bg== IG9wZXI= MzU= Y29udGV4dA== aXNoZWQ= 4oCT cmVj Qm8= IHRhcmdldA== Y29ubmVjdA== bGVhc2U= ICcnJw== IGZhY3Q= QUQ= YWg= OTA= ZmxvYXQ= bGV0 IC0t Q0g= Nzg= aWRlbnQ= IHZhbHVlcw== dXRpbHM= IHNlY29uZA== IGRqYW5nbw== c3k= IFlvdQ== b3Y= IHZpZXc= IGNvdXI= IHNr IEFs fSw= dG9w IGN1cg== b2ljZQ== U2Vy RVQ= IGJlbA== IGFjdGlvbg== dW1weQ== IGluaXQ= eGM= IGVzdA== cmVzaA== IGNoYXI= c3c= dGxl fSk= dW50 ZnJhbWU= dmVyc2lvbg== IG1hbnk= IGNhcA== IG1lc3NhZ2U= SVM= cGxpY2F0aW9u TkE= Q2hhcg== SUc= b2Np UGFy ZGk= IHRlbXA= b3JtYWw= ZmVyZW5jZQ== IHllYXJz IG1hZGU= IERl Y2tldA== cmVxdQ== bWl0 IEZvcg== aGVhZA== cmlidXRl Ki0= IGNlbGw= ZXZlcg== Q29udA== IGV4cA== IG5leHQ= c2lkZQ== aWRkbGU= c3RvcmU= IGJlaW5n IHNs bWVyaWM= aWNhbGx5 dGFs IF0= b2xl cmVjdA== Mjc= b2Zm cWw= Pj4= IGNvbnN0 YW5j YWdlcg== IGRvYw== NDg= Z2Vu dXRm IHZlcnk= MjY= SGU= bXNn IEFu bWFpbA== IHRoaW5r dmVydA== ZHM= IGNsZQ== dmFsdWVz aXNzaW9u IGNyZWF0ZQ== IGhpZ2g= SUw= cGk= ZGl0 b3Zlcg== IG1haW4= aG9zdA== dHJh Xns= S2V5 KSks IGJhc2U= b2ludA== eGE= dGFpbA== IHN1cHBvcnQ= YXJnZQ== dWFsbHk= bGVmdA== YnI= IDE1 IGNhcg== Y2FsbA== dmVsb3A= ZmlsdGVy IHBy ZW5jeQ== T0Q= IGNoaWxk IGRpZmZlcmVudA== IGJ1aWxk OTU= dXJhdGlvbg== IGNvbXBsZQ== bW9kdWxl IGF4 QWw= W0A= AAAAAAAAAAA= Y2xvc2U= IHByb2Nlc3M= Y29udGVudA== IHdpdGhvdXQ= dXNl IGdvb2Q= IGVz TE8= Jyk6 Z2lu IHBvc3Q= IG11Y2g= cGFyc2U= Iiwi IE5ldw== CiAgICAgICAgICAgIA== ZW5zaW9u IG1vZA== aXJvbg== Y3Rvcg== Q28= IGNvbnRleHQ= QXI= MDQ= d3d3 eGU= ZXJy 0YI= YnM= Z2Fu TVA= IGJvdGg= aW5nbGU= Ij4= XTo= b3Blbg== IGNvbW1hbmQ= Y29sb3I= IGNlbnQ= cmVhbQ== IHByb3ZpZGU= ZXZlbnQ= IHN1cGVy dmFy MzQ= cmVlbg== cm9zcw== cmVzcG9uc2U= Y2hlcw== IGdpdmVu aW9uYWw= KF8= IHNvbA== dWZm dXN0b20= MzY= bmVzcw== aW1n ICRc IHRvcA== ICks IEFuZA== cmFuZ2U= b3Ju T2JqZWN0 d2lkdGg= UE8= c2s= bWFyaw== b3Vu Zml4 b25z cmlj TW9kZWw= IH0s MjE= IFo= IEJ1dA== IC0qLQ== KSkp YmFy aWxlZA== V2U= IGxlZnQ= IGdyYQ== KC0= IGdhbWU= IHRhYmxl MDU= VW4= IHJlcG9ydA== fVw= IHBlcnNvbg== IHRob3Nl ICgi SVA= OTg= IGVtcA== IGJyZWFr IGRheQ== ZmlsZW5hbWU= IGtl Iiks IGZsb2F0 NzQ= ZW5zb3I= ZXJv cGhh OTY= VFQ= c3BhY2U= X19fXw== cG9zdA== VVM= IGF1dA== bm93 dGFyZ2V0 IFNoZQ== SEU= 0Lg= MDI= YW5l b2g= ZW51 cXVlcnk= IHJlZg== IHdyaXQ= cmVhdGU= KV0= IHJlYWw= b3Rz cm9sbA== Z2Vk IGNvbm5lY3Q= dWxhdGlvbg== IGluZm9ybWF0aW9u RU5U IHZhbGlk IHByb2plY3Q= IDEwMA== VUw= bGFuZA== aGFuZA== IG9sZA== ZG8= DQoNCiAgIA== RGU= Z3I= Y29udHJpYg== IGxldmVs cGFnZQ== IHNp b2xz IGZpbGVz aXZlZA== aW1pdA== dmluZw== aWdodHM= dHJ5 LiIiIg== fSQ= IHJhbmRvbQ== c3RlcA== Z3M= IFNo b3RhbA== IHJlc3VsdHM= c2hvdw== dXBsZQ== b3Bl cHJlc2VudA== eGQ= IHE= YW5ndQ== IG5ldA== YGA= CiAgICAgICAgCiAgICAgICA= ZW50aWFs IEludA== bWFnZQ== IHN0aWxs IHN5 IHBhcnRpYw== IC0+ IGF1dGg= VEU= aXRlbXM= YXJseQ== YXR1cmVz REk= VGhpcw== Mzc= Z2FtZQ== IFZhbA== IG1vZHVsZQ== IHRocmVl ZXRz VXNlcg== YWNlcw== IHBhdA== Y2k= ZW5l aXRoZXI= IFNl ZGVs Q2hhckZpZWxk IGpzb24= ZGlzdA== Y3VycmVudA== b3R0 ZnJh IEFtZXJpYw== IHRha2U= IHN1bQ== Njg= IGVsZW1lbnQ= Z28= IGxldA== IGxpbms= IHByb2R1 IMM= bGluaw== U3RyaW5n IG1hcms= IG11bHQ= IG5vbg== IENs NDQ= aXF1ZQ== IGV4cGVy CgoK IHRyaQ== b2xkZXI= IGNvbWU= dWlk QUE= IGV4YW1wbGU= IEdlbmVy c2F2ZQ== IHBsdA== YWJhc2U= aXN0b3J5 ZG93bg== YXJt ICcv IGFwcHJv bGluZw== VmFsdWU= eHk= IGRlbA== IHRhaw== IGZhbQ== ZmlsZXM= ZW1w YW1ldGVy IGNvcHk= YWx0aA== IG1lZA== aWVudHM= 77+977+977+977+977+977+977+977+9 aWZm Y29y b290 IGJybw== IENvbA== bnVtYmVy IGR1cmluZw== dGVt YWlsYWJsZQ== IGZpbmFs IGFsbG93 IHR1cm4= IHBvcnQ= dmVyc2U= aWN5 IGNvbnRlbnQ= IHRvbw== IGNvbmY= IDE2 LC0= IGlzaW5zdGFuY2U= Vmlldw== Y29yZQ== Rm9ybQ== dWJs IHNvdXJjZQ== aXZlcnM= dGFn YXNzZXM= XSg= IHRvdGFs IGVudg== IGZpZWxkcw== RkY= cG9s aG8= IHR5 b21haW4= IGluY2x1ZGU= c2Vzc2lvbg== cml2ZXI= IExl IDEy eW5j IHJlY29yZA== IHZl dHh0 dmlvdXM= UEU= IGluY3Jl IEFz ZnR3YXJl IHNheQ== IHN0ZXA= SXQ= Wy0= IGZ1bGw= cnQ= c2V0dGluZ3M= dGVz dW1lbnRz dG9rZW4= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= J3Jl IGFydA== Z24= cmlz cmVhZHk= IHZpcw== IHdvcmxk c2Vydg== IHJlY2U= ZXhlYw== Z21lbnQ= YXN0ZXI= YmxvY2s= bW9kZQ== aXZlcw== IGNoYW5n QWRk VXA= Nzc= DQoJ bGVjdGVk d2F5cw== dHlwZXM= Mzk= bGluZXM= IG51bXB5 w6E= aXNt IGFub3RoZXI= IGhvbWU= IG9yaWc= c2VydmVy MzE= bGFzdA== a2V5cw== IHVudA== WW91 Jycn Y29sdW1u fn5+fg== aW5lZA== IGFjdGl2 Y3JpcHQ= Y3Vs c29s IGluc3RhbmNl IFNv 44I= LCc= IGxpZmU= IHBsYWNl U2g= IGJy b3J0aA== Rm9y V2lkZ2V0 IGJlc3Q= aW9y IGV4cGVjdGVk cmVwbGFjZQ== CiAg IGFyb3VuZA== cmFw IHB1YmxpYw== IElO cG9zZQ== CQkJCQ== ZW5kcw== cmllcw== IHBvc3M= c2hpcA== IGxvY2Fs bG95 ZGlt IGVmZmVjdA== bGFtYmRh IHBhY2s= YW5ndWFnZQ== b2xvZ3k= Y3k= aXRhbA== c2NvcmU= YXJuaW5n IHBvcA== IGdvdA== IGNvbnRpbnVl PSg= Q1I= IFJldHVybg== b2JqZWN0cw== Y2hlZA== J20= Y29tbWFuZA== Z3JpZA== IGRldmVsb3A= aWR4 cXVlbmNl c29y b3VnaHQ= IHByZXNlbnQ= MDM= 0L0= bGV2ZWw= IG1lYW4= IHJlcXVpcmVk c291cmNl YWN0ZXI= IHF1ZXN0 U1M= YXZpbmc= J30pLA== Y2Nlc3M= VU4= cmFt IGNvbnRyb2w= IHNtYWxs b3JjaA== Tm8= Zmxvdw== IHNpbQ== Tm90 TnVt YWJpbGl0eQ== dXJhbA== IGFuYWw= IGZvcm1hdA== MDg= aXRpdmU= YmF0Y2g= cGFzc3dvcmQ= IGFzaw== Y2hvb2w= IGFnYWluc3Q= IGJsb2Nr b2lk IGRlc2M= KSk6 IE9u IGdvaW5n IG9wdGlvbnM= b25k OTQ= LS0t ZGVsZXRl IHBhcmVudA== cmFuZG9t IGNvbG9y IG1haw== dW5r dGY= YXRvcnM= IGdy IGxpdA== SU0= cHJvamVjdA== Ym9zZQ== b3Vycw== IGd1 dGVtcGxhdGU= bW9k IHByb2dyYW0= UGw= ZnVuY3Rpb24= IHBhZ2U= Y29uZg== aW9k Z3JvdW5k Ym9vaw== c2Vu IHBhcnNlcg== OTc= c3Rk YmI= IG1hdGNo Njc= IHN0YW5k IGRp IGxhdGVy Iikp cmFucw== IHNhbXBsZQ== c3lz cGVu IHZhcmk= ZGVidWc= IHNvcnQ= cGFyZW50 ODg= IG1vZGU= ZXNzYWdl Ym9keQ== IHBvc2l0aW9u IHF1ZXJ5 0YA= 55o= VFk= 5Y8= IGNoYW5nZQ== ZGl2 IGZvbGxvd2luZw== TGU= bGVlcA== aHR0cHM= aWZpY2F0aW9u T1A= IG1pZ2h0 XSkp IGxvYWQ= IMI= eWw= b3JpZXM= Z2VuZXI= IEFO IFRoZXk= IGpvYg== b3Bz Z2Vz c2VuZA== b3B0aW9ucw== YXJy Ymxhbms= YWY= bmFtZXM= c3RyaXA= 55qE bmV4dA== IG1vdmU= IGluaXRpYWw= b3V0aA== dXRlcw== ZXRo cGVk IHRpdGxl ZmZpYw== dWRpbmc= CiAgICAgIA== bG9jYWw= CiAgICAgICAgICAgICA= YW5jZXM= IFBs IG1zZw== IGds ZmFjdA== IGRpdg== dmVzdA== IHN0YXR1cw== In0= IGFwcGU= bm4= IGxlbmd0aA== MDY= J10u dGlvbg== KSo= UGF0aA== ZXhw IGlkZW50 b3VyY2Vz aWRlbw== aXR1ZGU= IHVwZGF0ZQ== IFRoZXJl 0YE= IFdo aWRkbGV3YXJl cmVx RGF0ZQ== IGNhcmU= IGJlaA== IGZpbg== IHNwZQ== IHByb2JsZQ== Y2hu Y2hhbm5lbA== c2FtcGxl IGRhdGV0aW1l IGJvZHk= IE5v IHZhcmlhYmxl IGNhbGxlZA== bXBsZW1lbnQ= emU= IHNpZGU= cGVydA== IEFkZA== IHNpbmNl aGFz ZGV2 IG9jYw== RW4= IDEx bHM= c3BlYw== aXN0cg== IHB1dA== IyMj IG1ldA== IDI1 VEg= Tm9kZQ== KFw= IHdoZQ== dXR1cmU= aWZpZXI= IHJlcHJlc2VudA== dmlz aW11bQ== IDE0 IHNlbnQ= IGxhdw== IGxpYg== IGZy Q0E= IGBg Y29weQ== TG9n IGtlZXA= dWNr IGdsb2JhbA== ZnVuYw== IGRhdGU= IHN0cnVjdA== c3NhZ2Vz IGFycmF5 aXNlcw== ZWxzZQ== aWNsZQ== aWVuY2U= IHN3 ZGlyZWN0 YWludA== aGVz IGdvdmVy Zmc= cmlkZQ== IHByb2I= cG9zaXRpb24= Ym9hcmQ= Q29uZmln IHVudGls TUw= IG5ldmVy aXRvcg== SXRlbQ== IGV4aXN0 RW50 IG51bGw= bWlzc2lvbg== IHBvd2Vy dXg= Z3Jlc3M= c3Vw Y3N2 aXRjaA== Lic= IFsi aW1hbA== IFRlc3Q= IHNvbWV0aGluZw== IGVpdGhlcg== Z3k= IGFscmVhZHk= Y2Vy Li4uLg== XV0= J2Q= bGVn aXRpb25hbA== QVRF YXRz aXZlbHk= IGFudA== IENvbW0= IHN0b3A= IFBhcg== IFNlZQ== MDc= IEhvdw== IGxvZ2dpbmc= bmE= IFxb cG9w IHdlZWs= IGhhcHA= dGVjdA== dW5n 44M= IEFsbA== 0L7Q dXJjaA== Rkk= KXs= IGVuYw== IGh1bQ== IHdhdGVy YWN5 YXlvdXQ= emVy IGNtcw== IGNsaWVudA== TUE= eyc= aWFz aXJk aXJj IG9iag== aXVt 5Yg= IGRm IGxlYWQ= w6Q= IE9y bWVhbg== IG1vbnRo IFF0 b3k= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== cHJvcGVydHk= YnVpbGQ= Y29uc3Q= IFB5 IHNpdA== IGZldw== Il0s cHl0aG9u Y2VsbA== YWk= U2l6ZQ== IGNvbnNpZGVy IHBhcmFtcw== YWRtaW4= dG90YWw= IGJvb2s= c3RhdGlj IGxpdHRsZQ== Jyku Y3A= Y3Rpb25z Zmlyc3Q= IGV2 ID49 SE8= bGlu IGRlcg== T24= dXJlZA== ZW1haWw= Q09O IGZpbGVuYW1l ZGVzY3JpcHRpb24= cGFyc2Vy Y3JldA== IGRlc2NyaXB0aW9u Y2x1ZGU= YXR0ZXJu dGFzaw== ICAgICAgICAgICAg YXRlbHk= YWJseQ== Y21k eXNpcw== Qm94 aW5j cmV0 YXJndW1lbnQ= dW5pYw== VFI= eG1s IHZvbA== d2FpdA== IDMw ICAgICAgICAgICA= IHJlbmRlcg== aWZ0 ZmZlcg== IHBheQ== dW5l aXJ0 IGlzcw== aWV0 dXJ5 Xygn UEk= IGRpc2M= b3JlZA== REI= KCo= ZW50aW9u dWl0 dXNz IHNpbmdsZQ== aGVpZ2h0 IGRlc3Q= IHByb2R1Y3Q= YWxwaGE= b3Blcg== c29ydA== cGVydGllcw== Qnk= IHRydWU= ZnM= Z2VzdA== IEdldA== DQogICAgICAgICAgICAgICAgICAg YWRhdGE= ZWxz c3RhbmQ= IGV4ZWM= Njk= IHJvb3Q= b3Vw aW1lbnQ= Z3JhcGg= bW9zdA== IC8v NDc= IHNlcnZlcg== cmFs dXJv dGFpbg== Wzos ZWxlbWVudA== YWlsZWQ= TWVzc2FnZQ== aW5h Y2hpbGQ= 4pY= cHJlc3Npb24= eWVhcg== IEJl YXBz ZmVyZW5jZXM= w6M= ODU= IDE3 CgoJ IGxlc3M= RGVz J2xs dmVyYWdl KS8= ZWFk IGN2 IHRhc2s= b2dyYXBo RGljdA== eyI= IGF2YWlsYWJsZQ== CgogICAgICAgICAgICAgICA= IGhvc3Q= QU0= ZGluZw== IGNoZQ== IFJlcw== IHJlbWFpbg== Ym90 SXM= YWJsZWQ= bG93ZXI= b28= IGFsd2F5cw== aWRlbmNl dW1ucw== bGF0ZQ== Y2F0 dG9j ZXJhdGU= IDw9 aXNlZA== aW5zdA== c2V0cw== IOKAlA== IHRoaW5ncw== YW5nbGU= cGs= IGRlcw== IGVudW0= cHJlc3M= SWY= SW1hZ2U= IHNldmVy YWx0 RUw= YXJkcw== b2hu IHBhcw== bG9zcw== aW5lc3M= IGFsb25n YXRlcmlhbA== bGV2 IGh0dHBz aXZlcnNpdHk= IGNvbHVtbg== IHN1Y2Nlc3M= cmF0ZQ== w60= IGNlcnQ= ZW5kZWQ= Q29tbQ== aWVycw== IHJlYXNvbg== TG8= IHdpdGhpbg== CiAgICAgICAgICAgICAgICAgICAg NDM= aXBsZQ== IC4uLg== dGQ= w6Nv YWJz IHdvbg== IHdvbQ== IHN1cmU= V2hhdA== b25lcw== cm0= aWdyYXRpb25z cmVtb3Zl IGJ1cw== bGV5 ID4+Pg== YWxm bWlzcw== PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0= IGNvbW1vbg== U3Vi IHdpZHRo IFBo IHNob3J0 bWF0Y2g= IDEz UmVxdWVzdA== IGludGU= IGZvdXI= SW5mbw== UXQ= IHx8 IHJlc3Q= QmFzZQ== b3JlaWdu VGU= IHB5dGhvbg== IHNlYXJjaA== IAo= IHNldHRpbmdz RFM= TlU= IGZyZWU= IFtA 4YA= Q0M= QWQ= dmFsdQ== YmFsbA== IG5ldHdvcms= dGFpbHM= IGF3YXk= IGdlbg== IGhhcmQ= YWRkcmVzcw== YmVycw== dW5pdA== NjM= CiAgICAgICAgICA= am9y IENvbXA= Z2luZQ== IGxpbmVz U3RhdGU= QW5k TkFNRQ== IGluY2x1ZGluZw== IGNvZGluZw== IHRvcmNo cGluZw== IFNlcg== IGRlcGVuZA== 5pU= YWN0aXZl b3JkaW5n IGRpZG4= IHN0dWR5 c2VsZWN0 IFdoZW4= aWR1YWw= ZW50bHk= IGRvbmU= IEV4Y2VwdGlvbg== IHJlYWxseQ== T3I= aW5hdGlvbg== IEF0 dHJlZQ== aWRkZW4= IF0s RkE= IFRl IGxpZ2h0 IFZhbHVl YXRpYw== IGlkZQ== c3Y= cmFjaw== YXV0aG9y IGludGVyZXN0 ISI= QXM= IGxhcmdl YWJs IGFjY291bnQ= IGxlZw== ICcl IGlucw== IGZyYW1l IGZpbHRlcg== dW5pdHk= R3JvdXA= IE5vdA== Y2hhcg== aGVhZGVy IGNy c3RydQ== dXN0ZXI= IGdvdmVybg== IGdyZWF0 aXRpb25z ZGlzcGxheQ== IEJv IGJhc2Vk dXNy IHBpY2s= IHNlcnZpY2U= ZGF0ZXRpbWU= QW4= aXJvbm1lbnQ= b25lbnQ= Ukw= IGF1dGhvcg== IGRvY3VtZW50 NDI= IGJpZw== QWxs RnJhbWU= Q29tcA== IHNlcmlhbA== c3RhY2s= YXBlcg== IHN0eWxl QnV0dG9u cmFuZA== IHBvc3NpYmxl RXhjZXB0aW9u b3VibGU= YnQ= dXNlcm5hbWU= ODY= IG1lbg== IGRlc2lnbg== ZGVu Y2FjaGU= IHdyaXRl IHsi cHJvZHVjdA== c3R5bGU= IExpc3Q= IGRy dGltZXM= bWFzaw== b25leQ== UnVu IGJldHRlcg== YWZm bWV0 YXNlcw== aXJlY3Rpb24= dWdpbg== w7M= IFRv IHRob3VnaHQ= dHg= IE9S VEk= IGtub3du IGNvdXJzZQ== ZWdlcg== aWFsbHk= IEdlbmVyYWw= IGRyYXc= Z2V0aGVy KCcv SGFuZA== IEFtZXJpY2Fu YWxlcw== cml0ZXI= IHVy IGZlZWw= IHRpbWVz T0w= cmlidXRlZA== bGFiZWxz IGtpbmQ= IGRldGVy cmlidXRlcw== eHg= LT4= TWFu aWx0 ICcs Q2xhc3M= dXJz YW1lbnQ= bnVsbA== Q291bnQ= bWF0cml4 ICAgICAgICAg IGJhdGNo IGFib3Zl IHdoZXRoZXI= ZGV2aWNl c2VyaWFs Y2Fw IEFk SW5kZXg= IGxvdw== cmVzdA== IHNlbmQ= dmljZXM= c2Vj IGRheXM= aWxhcg== NzM= IGRpZmY= ZXhlY3V0ZQ== ZW5kZXI= NzI= cmFyeQ== X3tc b2dsZQ== IGZhbWlseQ== IFVzZXI= cmVzc2Vk TGFiZWw= dXNlZA== IGJveA== IGV5 IHJlZHU= U0k= Q0w= ZXR5 bWJlcnM= ICJc NDk= IHR3 YWNoZWQ= IFN0cg== IGxlYXN0 V2luZG93 YWRv IHNwZWNpZmlj CgoKICAg VVJM IHVuaXQ= ZGVwZW5k J3Zl ICcn IG1hcA== IG1vY2s= bmV0d29yaw== aXZpbmc= IGxpbWl0 XSks IHJlc3Bvbg== CiAgICAgICAgICAgICAg IHV0Zg== ZXhjZXB0 ZXJh IGZpZw== IFJldHVybnM= aHk= IHRlYW0= IHN1Zw== b2du TGluZQ== dXJ0aGVy ZXJuZWw= IHByZXZpb3Vz aW9uYXJ5 VkVS RVg= IHRocmVhZA== IGZhY2U= aWNvbg== IHRhZw== IG1lYXM= IHNjb3Jl dmF0ZQ== YnV0dG9u Y2hhbmdl IGFzc29jaQ== c2E= KioqKioqKioqKioqKioqKg== IGRpc3BsYXk= NTM= IGRyaQ== Y2Fu ICIs NjE= cmVnaXN0ZXI= IGN1c3RvbQ== IGZhcg== IHBhcmFtZXRlcnM= YXhpcw== S0U= YWRlZA== IHNhdmU= IG1lcg== UVU= IENhbA== IG9mZmlj RXZlbnQ= IG9yaWdpbmFs IHdvcmRz IGltZw== YWE= ICcu IGRlbg== IGh5 DQoNCiAgICAgICA= IGZyaQ== IHBvdA== IGRlc2NyaWI= bG9jYXRpb24= bXVsdA== b3Rv YXJpbmc= cG9pbnRz UGg= IGNoYW5uZWw= VEVS Zml0 IExldA== Zm9udA== IGJlY29tZQ== IGJlbGll w7w= aW5zZXJ0 5Ls= IHdpbg== IHZlcmJvc2U= OTI= IGhlaWdodA== 5YU= AAAAAAAAAAAAAAAAAAAAAA== LuKAnQ== IHNoYXBl b21z CiAgICAgICAgICAgICAgICAgICAgIA== RElS aXJlcw== 5pY= JyksXygn aWNybw== c3Jj YWNjb3VudA== IFVT IHByZWRpY3Q= IGNhbWU= IG1lbQ== UmVzcG9uc2U= ICdc ZWRlZA== Q2hlY2s= IHB1Ymw= d2lu d29yZHM= ZG9jcw== dGs= ICdfXw== IHBlcmZvcm0= Xy4= IFBlcg== cmVzdWx0cw== IGl0ZXI= IHJ1bGU= cGx0 b3Jkcw== YXJndg== IGNlbGxz IHF1ZXN0aW9u bWVtYmVy ZXRpbmc= QXV0 VE8= XSgj ZXJlZA== RGVm IGZhaWw= Yml0 IGluZg== CiAgICAgICAgICAgICAgICAgIA== aXBz bG9naW4= YW1tYQ== cHRo d2hlcmU= IHNpZ25pZmlj IGNsbw== IGRpbQ== Jzon IFZhbHVlRXJyb3I= Zm4= cGF0Y2g= bXQ= IGludmVzdA== dXNpYw== IHRlbGw= T3V0 SFQ= YWlt IGFyZWE= YXBwaW5n VFRQ IGxheWVy IGFjY2Vzcw== Lik= d2FyZHM= ZGVsdGE= Q2FzZQ== 5pw= dmFyaWFibGU= ZW50cnk= OTM= cmFuY2g= YWNj IHRlY2hu TGF5b3V0 cmlzdA== Iik6 IG1vdA== cmluZw== TU8= IGFkZHJlc3M= MjU1 YmVk IHRyZQ== IGRh 5ZA= IHNheXM= 5pWw IG9yZ2Fu aXJt aG9tZQ== ZXRjaA== UEw= IGluZm8= bm93bg== Y2xz UG9z dWs= IGRpZQ== IGdpdmU= IHRva2Vu Y29tZQ== cG9vbA== IGdyb3c= NDY= aXZpZHVhbA== aXhlZA== IHNlZW0= ZG90 c3RhbXA= b3JhZ2U= IGltcG9ydGFudA== QVNF XVsn IFVuaXRlZA== w6c= IE9G aW5hcnk= IHNjaG9vbA== ZXNzaW9u IEdl IGNsb3Nl IHZhcg== dWdodA== IHdpbmRvdw== cmVlZA== MDk= d2luZG93 QWc= V2l0aA== YXR1cw== bWJvbA== U3A= UGVy IFNldA== LiIp b2NpYWw= c2ln IGVhcw== dGhlcnM= IG5hbWVz d2VpZ2h0 TU0= IGxpaw== YXRmb3Jt IHVuZA== IG9wdGlvbg== IHBvaW50cw== IGludg== Kyc= ZW5jb2Rl am9i IHNlc3Npb24= IHBsb3Q= dG9jb2w= cmlidXRpb24= aGVs IEVuZw== IGxvc3M= YWlucw== OmA= ODc= RUM= b2xlYW4= IFB1YmxpYw== dWlsZA== c2NhbGU= ICIi dGVybmFs dWVk YWxpZ24= IHBhcnRpY3VsYXI= Q3JlYXRl IEpvaG4= IGNyZWF0ZWQ= IHNwYWNl NDE= Y3JlZW4= IEdlcg== IDUw LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IGJhcw== KVw= b25seQ== R3Vp bGF0 ZGVzdA== IFdoYXQ= aWRlZA== dW5jaA== dXJscw== c2NoZQ== UHJl YWRh J11bJw== IGNoYXJhY3Rlcg== IGluZGlj IGVxdQ== IFNw IGVudHJ5 YXJyaQ== IHRyZWU= b3B0aW9u IHByb20= XVw= IGVub3VnaA== UXU= IGZvbnQ= Y20= VHJlZQ== IyE= IHRob3VnaA== KVs= CiAgICAgICAgICAgICAgICAg IGhpZw== IGhvbGQ= c2VydmljZQ== cmVzaWRlbnQ= IGJpdA== IFRoYXQ= ICAgICAgICAgIA== ZW5kaW5n IGxvZ2dlcg== IGFkbWlu QXQ= YXV0bw== IGRpcmVjdG9yeQ== IGNoaWxkcmVu Ol0= Y2FzdA== IEdvZA== IG9uY2U= b2No QVJU IG1hZw== c2VydmVk IG5vcm1hbA== YW5kcw== b3R0b20= JCQ= IHlpZWxk c2Vx OTE= IHNu aW5pdGlhbA== Rmls IHBsYXllcg== 0Ls= IGNvc3Q= IHNlbg== aWFsb2c= bGF5ZXI= TVM= c3E= IGFuc3c= ZHJhdw== IGRldmljZQ== ZGVj IG1lYW5z c3RvcA== T3B0 cHJlZGljdA== bGV4 emVyb3M= IHRvb2s= CiAgICAgICAgICAgICAgICAgICAgICAgICA= IElz IGRvZXNu cmVzcG9u fXs= 44A= bWFrZQ== d2lzZQ== b2Rlcg== IGNvbGxlY3Rpb24= IGF4aXM= ZXF1YWw= IFVuaXZlcnNpdHk= IEluZA== IHRhbGs= dWRlZA== dGhpcw== dWFyeQ== aWFucw== CgoKCg== IHRoaW5n dG1w c2Vzcw== XCI= ZnJhYw== IHBk dXN0cg== IG9mdGVu RnJvbQ== IFVSTA== IG1vbQ== aWxsaW9u IDI0 c2k= IHByb2JsZW0= UmV0dXJu IHNvZnR3YXJl aXNr IGNvcnJlY3Q= IHRyYWNr ZXJzaW9u SW5wdXQ= cmVzb3VyY2U= Z2E= cG9zZWQ= JSg= NTg= SW50ZWdlcg== IHNjaGU= IG1pZ3JhdGlvbnM= DQog NzY= IGhhdmluZw== dHJ1ZQ== Y2xpY2s= YWlycw== NTY= IHNldmVyYWw= aXNvbg== IGV4dHJh b3B5cmlnaHQ= IHdlbnQ= IDwv IGFkdg== VVA= Pjw= VkU= IGNvdXJ0 b3JpZw== c3Bhbg== IGh1bWFu NTk= aGluZw== Y3I= IGNtZA== IHJlc291cmNl Y29udg== cG5n bG9nZ2Vy bG9uZw== UG9s ZW5lZA== IGhvdXNl c3Rlcg== UHk= IE1hcg== IGhlYWRlcg== IGNscw== bm9ybWFs IG9idGFpbg== aWdoYg== IGNvbXBhbnk= IEFw Li4v cmVldA== b3Vk IHBhdGllbnRz CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IHRlcm1z IHNlYXNvbg== Y3VyaXR5 Nzk= YWN0aW9ucw== IGdvdmVybm1lbnQ= IHRvZ2V0aGVy RFI= RWxlbWVudA== IGVtYWls IGRlYXRo aGE= b255 IEJs IHZpZXdz R2VuZXI= IGdyYXBo IFN0YXRl cHJlZml4 IG1hdGg= aWdyYXRpb24= SVRZ QVRJT04= IGxhbmd1YWdl IHByb3ZpZGVk IGVtYg== IElE aWk= ZXJj IFRpbWU= IG1ldGhvZHM= bXB0 IE1hbg== cm93cw== c3Fs QlU= IHBvbGl0 ZGF0YXNldA== cmFk RE8= IHJlY2VpdmVk dG9vbHM= aXN0aWM= cmVsYXRlZA== UEFU IFN0YXRlcw== T05F UkFO UmVn IGFkZGVk Y2hv ODQ= c20= cmll IG5lZw== IGFtb3VudA== NTQ= IHRyYWluaW5n dW1i c3lzdGVt ZXhpdA== dmlld3M= IE1l dXNpb24= IGR0eXBl IGt3YXJncw== VGFibGU= YWRkaW5n IGNvbm5lY3Rpb24= IG1pbnV0ZXM= UmVzdWx0 ZXhpc3Rz IHNpZ25pZmljYW50 T2Y= IHN0b3Jl c2hl ICMj anVzdA== VFlQRQ== aXZpdHk= RVNT IOw= IHF1YWw= bGlrZQ== IGNvbXB1dA== IHJlcXVlc3Rz RlQ= IGVsZWN0 Y292ZXI= 6K8= d2Vi ODk= IGV4cGw= IGFibGU= YWNlZA== cHg= IHBhcmFtZXRlcg== IFdBUg== SWRlbnQ= QXR0 cGM= IGxhbmQ= IFlvcms= 4oCc YXR0ZXJucw== cGxheWVy w7Y= Iiku IHNpdGU= KyI= U2hl IHN1Z2dlc3Q= IHBlcmlvZA== JC4= aGlw IHBhcnNl UE9TVA== UFM= IHRvbGQ= IENvdW50 IGxhbWJkYQ== bW0= DQoJCQ== ICct ZW5jaWVz IGVhcmx5 IGNsZWFy cGx5 CgkJCQkJ 55Q= IHJhdGU= IFJlcA== Il0p ZWx0 IERlZg== ZGl0aW9u cnlwdA== IGJvb2w= IE15 Q29sb3I= UFJP cm9z IGN5 aXZlcg== dHJpYw== IExv IGxhdGU= IGJp Lio= IGhlYWx0aA== IGFuZw== IAogICA= YXZvcg== IHdvcmtpbmc= IGdlbmVyYWw= bXU= IHRyZWF0 dWVzdA== Y29tcGxl IHBhc3Q= YXBwbGljYXRpb24= X18nOg== Q0U= d2Q= IHdoeQ== IGFnZQ== TGV0 IGN1dA== VHJhbnM= IERhdGE= IGRhdGFiYXNl Y2xlYXI= bGF5ZXJz KCJc IFN1cA== IHlldA== dGhvdWdo TEk= NTc= NjI= IE1heQ== IHBhc3N3b3Jk IFNj TG9j bnRpYw== cmw= IGVhcg== dmE= bGVt c2xlZXA= X19fX19fX18= b3JkaW4= IHNlZW4= ZXRlcg== IGluZGl2aWR1YWw= IGhhbGY= IHNhdA== IEZs IGNobw== YW5nZWQ= 6L8= DQoNCg0= dGhyZWFk IGRpc3RyaWJ1dGVk IG9iamVjdHM= IGRldGFpbHM= IHJvb20= cmVzaG9sZA== ZW5zaW9ucw== IGdyZQ== aWxlcw== IGludm9s IEhvd2V2ZXI= IHJlbW92ZQ== ZHQ= ICAgICAgICAgICAgICAg ZGl0aW9ucw== IHJvbGU= IHB5Z2FtZQ== IyEv MDAx IGdl aXRlcw== IGNh IHdhaXQ= IHNlcmllcw== IENPTg== IGNvdW50cnk= IGR1ZQ== ZHVtcA== IHJldHVybnM= Zm9v QUdF ISE= IGVycg== IGlnbg== MjAxMQ== IGluc3RlYWQ= IHJlc2VhcmNo IGFpcg== IHNpeA== IG5ld3M= YmV0YQ== dGFi IFRIRQ== IGZlYXR1cmU= b21i IElT IFN0ZQ== IHJlc3BlY3Q= IGxvd2Vy IGl0ZW1z aGVhZGVycw== aGVudGlj cm93bg== Y29udHJvbA== YW5rcw== LS0tLS0tLS0tLS0t IHdhcg== IG1hdHJpeA== dXJn J1w= IG1lbWJlcnM= IERhdg== Licp cmFn aXZhbA== bWVzc2FnZXM= CiAgICAgICAgICAgICAgICAgICAgICA= IHBsYW4= TmV3 IGJhZA== ZG9tYWlu UHJvcGVydHk= b3Bybw== bWVudQ== IGJlZ2lu ZHJpdmVy ODI= IHJldHVybmVk ZW5u IGxhcmc= TnVtYmVy aW5m IGNsZWFu Zm9ybWVk dWF0aW9u bm9kZXM= IHJhdw== ZXJhbA== QUJMRQ== IGVudW1lcmF0ZQ== Q29kZQ== UmVmZXJlbmNlcw== IFdlc3Q= cHJpY2U= Y3VsYXRl IGNpdHk= IGhvcg== IGJhcg== IGNvbnRhaW5pbmc= IGFubg== IHByb3Rl IENvcHlyaWdodA== VmFsaWQ= Ijoi b2Vz KCdc IHN0ZA== IDQw Rmln JCw= d2lkZ2V0 SGFuZGxlcg== U2M= aW1hZ2Vz IG1ham9y IFdhcg== cmFmdA== QnV0 b2xvZ2ljYWw= ODM= YWlzZXM= IGRpcg== aWZpZXJz IFdpbGw= IGpvaW4= IHdlaWdodA== 5a4= IENvbnQ= cGF5 IENhcg== b3JlaWduS2V5 Z3A= IGVt cGFyYW1ldGVycw== IGhpc3Rvcnk= IGZvb3Q= IHNwZWNpZmllZA== SU8= IHNpbWlsYXI= ZXJpbmc= bG9vZA== IFRoZXNl bW9jaw== c2luZw== aW52 IG1vcg== IG5u IGRlbQ== QVk= IGRpZw== bWVkaQ== c2VjdGlvbg== IHR1cGxl RGlz IHByb3BlcnR5 YXB0ZXI= ZnVsbA== cm93c2Vy Z2xvYmFs aW1hdGU= Kys= Y29ub20= ZnVsbHk= YmY= IHN1YmplY3Q= b3VuZHM= bmV5 IG5vdGhpbmc= IGNlcnRhaW4= aGFzaA== IGxvY2F0aW9u YWdlbWVudA== aWJpbGl0eQ== ICIl IHB1cg== IGxvdA== c3RydWN0aW9u JykpLA== IHNpbXBsZQ== VUxU bGE= IHVuZGVyc3RhbmQ= YWluZWQ= b3Vyc2U= Tk8= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg Y2FzZQ== bGlt bWFy 5a0= IGV2ZXI= LOKAnQ== YW5lbA== IHNlcXVlbmNl IDIx UG9pbnQ= cGxpZWQ= J11b OiU= IGFuYWx5c2lz IGNhbm5vdA== IFJlZw== Q29yZQ== IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== ZGF0ZWQ= IGFjY2VwdA== YXRpbw== IEFwcA== IGltcGw= IGNl IHJp IEVu IAogICAgICAg CgkJCQkJCQ== eW5hbQ== RU5E IGltcHJv YWdlZA== IHdlYg== Y2VudGVy IGFza2Vk aW5v ODE= IGhvdXJz NTE= Y2Q= IGZlYXR1cmVz IG1vbmV5 cm9uZw== IHJ1bm5pbmc= IGltYWdlcw== IGF0dGFjaw== IHBlcmNlbnQ= IGltcGxlbWVudA== Q0s= IGNpcmM= dXJyZW4= IG1ha2luZw== IGdyb3Vwcw== IHNlbA== QXBw IGNoYW5nZXM= bWM= aWxpdA== IHBpZQ== IHNlcGFy ZXhhbXBsZQ== cm9sbGVy IHdob2xl cmV2 VGhlcmU= IE1pbg== IGFueXRoaW5n IE9uZQ== IHNpbA== cWE= IGVtcHR5 IGZyZXF1 bWVz IEdOVQ== UUw= IENhbg== IGVw YmE= IEFzcw== fn5+fn5+fn4= aWRlcw== IGRldg== aXF1 YWxsZW4= bGlnaHQ= YW5kaWQ= aWNvZGU= IHJlbGF0aW9u IHByaW1hcnk= IGV4Yw== XSs= aWo= cXVhcmU= Rm9yZWlnbktleQ== IG5pZ2h0 IFBvbA== dXJvcGU= b2Zmc2V0 c2Vjb25k IG90aGVycw== IHNhZ2U= VGVzdENhc2U= IEZl c3RyZWFt cG9ydHM= NTI= Zm9ybXM= IHNlbGVjdA== dWx5 IGZ1cnRoZXI= IGZyb250 IGVudmlyb25tZW50 ICdf IGJ1c2luZXNz IFF1 IHRlbXBsYXRl c3RpdA== DQogICAgICAgICAgICAgICAgICAgICAgIA== IHBsYXllcnM= IHJvdW5k cmFpbnQ= IEZy UmVw aXJ0aA== cGhp aWRh ZG9t YXR0bGU= IENvcg== 0YM= IGFtb25n IE5l IHZpZGVv a2Vy IENoZWNr 0Lo= YW5h dWNjZXNz ICov dmFz c2lt cm95 IGxpbmtz R0VU JFw= ZWxpZg== Y29tbW9u IHNwZWNpYWw= IGF0dHI= SUk= ICIv aW1lcg== Xyg= IGRhdGFzZXQ= bm9u YW1lcw== IHNpZ25hbA== Y2hhbg== IHR5cGVz aXNpbmc= aWVm J106 cG9y eno= IHByYWN0 IGFjdHVhbGx5 Y2xhc3Nlcw== c2NyZWVu IGRvaW5n IFxbW0A= b2tlbg== S0VZ c3FydA== YnVt IFB5dGhvbg== Kig= IENyZWF0ZQ== IG5lY2Vzcw== U2VydmljZQ== c24= YWRkcg== U28= V2g= IHNlY3Rpb24= IG1pc3M= Z29y 5aQ= IHNyYw== IHJhdGhlcg== a25vd24= IGFjcm9zcw== bGFi IG1vbWVudA== IHNlbnM= IEhhcg== d2hpbGU= IG5lZWRlZA== IGNvb2s= T1JU IGNvbmRpdGlvbnM= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== bWlzc2lvbnM= YXNzZXJ0Ug== dGV4 Z2w= TWFw c29sZQ== cm9pZA== IGluZmw= DQoNCg== IGZpcmU= c2NvcGU= IGxhYmVscw== IGVzdGFibA== IHByZXNz d3g= IG11bHRpcGxl ICk6 c2l0ZQ== IGFyZ3VtZW50 IGdyb3VuZA== IGVuZXI= ZmVhdHVyZXM= IGhpbXNlbGY= XSku IHByb2Y= IG1hdGVyaWFs IGJlbG93 Y3V0 IHdvbWVu UGFyc2Vy Q09M IHdhbGs= YWd1ZQ== IGhlYWRlcnM= ICAgICAgICAgICAgIA== IEFOWQ== XXt9 IE9i YW1h a3M= IFdvcmxk PSU= cmln IHdvcg== YnVm IEhpcw== ZGlj IG1pbmQ= cGVlZA== IHNjYWxl YXZh c3RhcnRz IEdlcm1hbg== IGNhc2Vz REFU IEludGVybg== IGVy aWxp ZXRob2Q= RVNU cHBlZA== TWF4 Q29udGVudA== Q00= TmV0 b21ldHJ5 ZW5ndGg= KF9f IGZsb3c= ZWZvcmU= PVsn cm91dGU= IGJlbg== TWlu ZmxhZ3M= aW5pdGlvbg== IHN0YXJ0ZWQ= ICIt IHBhc3NlZA== dmVjdG9y 5Lo= IGJsYWNr NzE= cmlkZ2U= bWlkZGxld2FyZQ== ZW50ZXI= ZGlmZg== ZGphbmc= dGVybg== IHN0cm9uZw== IEJ5 ZWRpdA== IHZp ZGVjb2Rl IG5lYXI= ZXhwZWN0ZWQ= cXVldWU= IGZvcndhcmQ= IDs= ZGVzYw== QUxM dm9sdXRpb24= bWk= IHByb2R1Y3Rpb24= IGFyY2g= IGFyZ3VtZW50cw== LFw= IGZpdmU= TWFuYWdlcg== IGFsbW9zdA== IGZvcmU= b2x1dGlvbg== IHBoeXM= UFU= ZHJvcA== IGFwcGxpY2F0aW9u VGFn IG9mZmVy cmVhbA== YWxsZQ== ICIp MDAwMDAwMDA= IGNvdmVy IE5PVA== KS5fXw== IGFzc29jaWF0ZWQ= cnVsZQ== QmU= TWlkZGxld2FyZQ== IEFmdGVy IGV5ZXM= dWRpbw== IHJlbW8= b3Byb2plY3Q= IG1hc2s= IGVtcGxveQ== DQogICAg cGF0 IGRlZmluZWQ= IGJlY2FtZQ== IFdJVA== IFByZQ== Ynl0ZXM= Rk8= IG1lZGlh CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IGF3YWl0 IHd4 IGV4cHJlc3Npb24= IHVzZXJz aWxpdGllcw== dHJhY2s= ZGphbmdvcHJvamVjdA== IGZ1bg== IGhpc3Q= Rkw= T25l IERF IFN0cmluZw== IHRvZGF5 ZWN0aW9u IHB1Ymxpc2hlZA== SU5F IHVuaXF1ZQ== Y2VydA== ICUo IDYw Ym9vbA== Y2F0ZWdvcnk= IGZhaWxlZA== R2U= IGRvbWFpbg== IGhvd2V2ZXI= dmFscw== IGV2aWRlbmNl U1A= IGRlYWw= IGNhcmQ= IHRha2Vu ID8= 5L0= IHVwb24= IG5vcWE= IHNxbA== IGRpc3RhbmNl ZW52aXJvbg== cnM= IHNsb3c= bWFuYWdlcg== IGNvbnY= Y2luZw== IHR1cm5lZA== c2VnbWVudA== IFBhcnQ= IGV2ZW50cw== J30s dWJl Q2xpZW50 IEFS IG1ha2Vz IDIy c2V0dXA= IGNsYWlt IHRheA== cHJvZmlsZQ== IGVxdWFs ICIu KClb IGxvb2tpbmc= KCk7 aGli YmVnaW4= RmU= IHN0b3J5 IGV2YWx1 Z29yaXRo bWV0YQ== NTAx IHBhaW4= IHNjcmlwdA== Rmw= YWNjZXNz IGNvcnJlc3Bvbg== IGxvb2tlZA== U3RhcnQ= SW50ZXI= Y2Vs IGJlaGF2 IHByaW9y b2N1cw== IG1lbWJlcg== ZmlsbA== IGRpY3Rpb25hcnk= IHlvdW5n IGluc2lkZQ== ZGln dWVs QWNj IE9Q ICgo YXNzZXJ0VHJ1ZQ== IHJlcXVpcmU= IFJv IHBvdGVudGlhbA== c2VsdmVz IGhhbmRsZQ== IGZ1dHVyZQ== aXplcw== fTs= TXk= aWN1bHQ= IFdpdGg= cmVxdWlyZWQ= cmV3 cGFja2FnZQ== IGNoYW5nZWQ= IGZhYw== cmVjb3Jk IG1hc3M= IGdlbmVyYXRl QUNL YWluZXI= dXNlcnM= IGRldmVsb3BtZW50 IDIz c2VtYg== dXJp RklMRQ== IHNjcmVlbg== IGhlYXJ0 IHRlbnNvcg== QU5H YXNzZXJ0UmFpc2Vz IHJlbQ== 57s= dmll IGV4Y2VwdGlvbg== RU0= IGRldGVybWlu b25lbnRz IGZsYWdz IHJlbGF0ZWQ= IGFjY29yZGluZw== Y29sdW1ucw== U0g= aW1w IG1pcw== IDMy b3VjaA== IE1j IHRtcA== IHBhcmFt IGVudGlyZQ== Y3JlYXRlZA== IGF0dGVtcA== ZXBvY2g= IHRybw== IGxpbQ== 6KE= 5og= IG51bWJlcnM= Q2Fs IEJyaXQ= IERlcw== Y2xlYW4= aG9y UGFnZQ== U3RhdHVz IGxvdmU= IFxc RW50cnk= IHNvcnRlZA== IGZhbGw= bHQ= IHNob3du c3RhdHM= Y2E= Z3Q= QWN0aW9u IGhvcGU= c3RhcnRzd2l0aA== IGNvbW1lbnQ= IGVuZ2luZQ== YXZlcw== WkU= Zm9sZGVy bWV0YWRhdGE= SGVs IHJlZmVyZW5jZQ== IHBhdHRlcm4= IHRlcm0= IGZ1bmM= ZGVz RGVzY3JpcHQ= SG93 IEtleQ== IGFuc3dlcg== dGlj IFR5cGU= IGZ1bmN0aW9ucw== IGFmZg== IGNvbWJpbg== IHJlZA== IGdyaWQ= IENocmlzdA== Olw= Q2FsbA== IGVsZW1lbnRz aXN0aWNz c2VuY2U= Y29ubmVjdGlvbg== ZWxsb3c= 4oE= IHNvbg== YWo= IHN0YW5kYXJk ZnV0dXJl 5Zs= IEZPUg== IGxpdmU= YXJuaW5ncw== RW5k IMOg YXJpZXM= IHRoaXJk ZW1wdHk= dm9sdW1l YXZlZA== IG1vbnRocw== IHV0aWw= ZmFpbA== bWVt emlw QXV0bw== RWRpdA== IEdv cHJvYg== VEM= IGNvbW1pdA== Lyg= VkFM YWtlcw== ICcnLA== aWNrcw== IEFQSQ== IGp1ZA== KS0= dGVuc29y T0RP IGV4cGVjdA== cmY= IEFjdA== NDAw IGZvcmNl IGlzc3Vl cmllZA== IERv IFNvbWU= IGhpZ2hlcg== IGhlbGQ= IGJvdA== IHNvY2lhbA== dnY= dW1teQ== ZW5zZXM= QXA= IHBhY2thZ2U= 5pg= ZmQ= em9uZQ== KX0= IGRlY2w= b3Nw d2VpZ2h0cw== IHRyeWluZw== YnV0 RGly IERlcA== YXNpbmc= ZmVycmVk b3VydA== aGVscA== IFdBUlJBTg== LSU= IGdldHRpbmc= IE5hdGlvbmFs bWluZw== c3RyYWN0 Z3JlZQ== Z3JhZA== IEV1cm9wZQ== IGZsYWc= Zmlu bGVnZQ== IGJlZ2Fu YXJlcw== IE1vbg== IHN0cnVjdHVyZQ== Y2FyZA== ZGVlZA== Y29tcGlsZQ== aWxscw== IHZvbHVtZQ== bWl0dGVk IFBhdA== b3VybmFs aW5jbHVkZQ== 0LDQ Q29sdW1u IHZhcmlhYmxlcw== Lycs dGFncw== RXh0 aXN0cnk= Pjwv bGxpYg== IHRlbg== IGF0dHJpYnV0ZQ== IGlkZWE= IHRlc3Rz IFNvdXRo IGNhbXA= YXRvcnk= cnVw c3Vy c2VxdQ== cm90 cmlhbA== CiAgICAgICAgICAgICAgICAgICAgICAgICAg IGZpdA== IFJvYg== IHNldHVw IGNlbnRlcg== Z2c= NTAw SEVS IG1hdHRlcg== IGVuZXJneQ== aWxvbg== cmVwb3J0 IG1pbGxpb24= IGZvcm1z ZGlybmFtZQ== ZWZm IG5lZWRz cGFk IHF1aWNr Q1RJT04= bm9ybQ== ZWRz c3RlcHM= 4oGE U0VS bWluZQ== cm9kdQ== IHJlbGVhc2U= UEFUSA== aXppbmc= dXVpZA== aGFuZGxlcg== IFF0R3Vp QVJF U08= bWVu Z2I= aW9z RVJS IGJvYXJk ZXh0ZW5k bGVkZ2U= IE1lZA== ZmVhdHVyZQ== IGNvbnRhaW5z IGJlaGluZA== IGVjb25vbQ== IGFwcGxpYw== IG9mZnNldA== IG1lc3NhZ2Vz IE9wdA== aWRpbmc= ZW5zaXR5 aWFt cGc= IGhlYXY= TWU= IHNvY2tldA== IGNvbmZpZ3VyYXRpb24= IHdyaXRpbmc= Jys= IGxvb3A= aWxsZQ== IHNhdw== c2Vl YWtpbmc= Zm9ydA== SUdIVA== IHdoaXRl IGF2ZXJhZ2U= YXJpbw== IGRlbGV0ZQ== IGhpdA== IHJlZ2lvbg== 5Yw= aG9vZA== cHJlZA== ZGl1cw== aXBl b2xs dGls IGZpbmFsbHk= IHdhbnRlZA== ICAgICAgICAgICAgICA= IGJ1dHRvbg== SU5U Q29ubmVjdA== 0Y8= dXBwZXI= IFVw IHByb2JhYmx5 Y29tbWl0 c2Vucw== fV57 YWxsb3c= IGRhcms= IFNvZnR3YXJl aXJ0dWFs UmVhZA== IGRlYnVn IGRvb3I= MTI4 c29ja2V0 WFg= IHNlY3JldA== IHJlcGxhY2U= XSo= Q0Q= IHBvbGljeQ== RmlsdGVy RGF0ZVRpbWU= eXBlcw== ZnI= IGludmVzdGln TW9kdWxl c2hvdA== IHppcA== a2Vucw== PXs= IG9wZXJhdGlvbg== KSQ= IGh0bWw= IG11c2lj IHdvcmtz IEJhcg== ZGVycg== YnNpdGU= KHs= IEF0dA== IGluY2x1ZGVk IGZvb2Q= IGFjdGl2ZQ== aW5u b2dyYW0= YmluZA== IHVzZXJuYW1l IGFzc2lnbg== IGZpbGw= JSU= CgogICAgIA== IGFkZGl0aW9uYWw= IGl0c2VsZg== 6K4= IGNyb3Nz IGZpbG0= cmVuZGVy ZW5pbmc= IGlw IGVycm9ycw== IERpcw== IHF1YW50 IGRhbQ== MTAwMA== IHNwbGl0 IGFjdHVhbA== ZmxhZw== IHVzZWZ1bA== cGlk IGZhbHNl bnVtcHk= IHJhZA== IGRpcmVjdGlvbg== IGFwaQ== bWVkaWE= aGFuZGxl IG1lbW9yeQ== IHN1cw== TUI= YXRhbA== d2Vy dWxhdGU= IEFi IGFsaWdu Y2hpbmU= J14= SW50ZWdlckZpZWxk MzAw IGluc3RhbGw= IGN1cA== IHBhcmE= PS0= IG9yZA== bG9z ZXZhbA== YXB0 IG9wdGlt YWlk IHBhcGVy IGRlc2NyaWJlZA== bGVj KFsn Q1M= U1RS cG9zaXQ= IG9wZXJhdGlvbnM= ZWFyY2g= IEZvdW5k IGlkeA== dWxh IHN1cmZhY2U= bG9hZHM= IG5hbWVk IEltYWdl IHJpc2s= ZXY= IGtlcm5lbA== IGJ1aWx0 IHN0YXRlcw== YmFuZA== IHJldmlldw== IFJ1c3M= IGZlbHQ= IGpl Q29tbWFuZA== YWxpdHk= aW5wdXRz IGNvbXBsZXg= IGRlZXA= YnVyZw== dHRw IHJlc3A= VUk= IHdyb25n aXJh RVc= cm9vbQ== ZmZpY2llbnQ= IDIwMTE= V2hlbg== IGZ1bmQ= IEphbg== YXR1cmFs IHZpYQ== IGtleXM= ZmluYWw= IGV2ZXJ5dGhpbmc= QXJyYXk= IHByaXZhdGU= IGxpa2VseQ== IDo6 IHJlcG9ydGVk IOU= CiAgICAgICAgCiAgIA== dHJhbnNmb3Jt IGNvbXBsZXRl Y2Fy IFRoZW4= IDI4 aXNvZGU= U09O 55So Z3JvdXBz c29sdXRl SVI= cGFn a2luZw== IHZhcmlvdXM= IHJvdA== IGFwcGx5 aXN0cmF0aW9u dmw= ZWN0b3I= bGF0aW9u IGZhY3Rvcg== Y2FsbGJhY2s= YmFs IGZyYQ== DQogICAgICAgIA== cHJvdG8= Y29z emVu IFRyYW5z IHBhcnRz aGFt IE5hbWU= MjU2 IGZyaWVuZA== IHJldmVyc2U= IGFsbG93ZWQ= YmFzZWQ= IHNlbnNl IHRoZXI= RkFVTFQ= ZXJhdHVyZQ== dGltZW91dA== Zm9yY2U= IGVkZ2U= Y3Y= QlVH IHBhZA== Y29sbGVjdGlvbg== IHByb3BlcnRpZXM= IGNvdW50ZXI= IGNyaXQ= YWxlZA== IHRyZWF0bWVudA== IGZhdGhlcg== QWN0 YXVy IGV4dGVuc2lvbg== Y2Zn dGVtYmVy IGNhY2hl IHBvcHVsYXRpb24= IGN1bHQ= IHN0YWNr c3RyaWN0 KSg= IOI= cGFyZQ== IEFORA== IG1pZA== Z3U= cHVibGlj U3Vw IAogICAgICAgICAgIA== IGNhcHRpb24= IHJlZ2lzdGVy Z3Jl U1U= IGJhY2tncm91bmQ= ICctLQ== IEhlcg== ZmM= Q29udGV4dA== bGlzaA== IHNlbGVjdGVk Y3Vyc29y XSk6 CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IHNvbmc= Q09ORg== aW5nZXI= IGJ1aWxkaW5n YW5jZWQ= IMOp bGVhc2Vk T1M= IGV4aXN0cw== IERhdmlk bGltaXQ= cGxvdGxpYg== emE= IGVuY29kaW5n IGJpcnRo IGZhc3Q= cm9tZQ== T2Zm UFI= KCkpKQ== IGxlYXJu IFJF Qmw= ZXB0ZW1iZXI= ZXhjZXB0aW9u dGhldGE= Uk9N IGRpZmZpY3VsdA== ZHR5cGU= IHdyaXR0ZW4= IGtuZXc= Y3VzdG9t VHJh IGJvdW5k IHJlbGF0aXZl SVY= b3g= IG5vdGU= IHNpbXA= IHNvbHV0aW9u IFNjaA== IHJldg== IGZvcm1lcg== IHN0cmVhbQ== MTIz IHJpZ2h0cw== 5LiA T0I= YXVs cmFwcGVy IGxheQ== QXV0aA== aWVu aWNh IGxvcw== dmVudGlvbg== IENpdHk= Y291cnNl KSs= Iik7 aW50ZQ== d2VldA== IGluYw== dW1iZXI= ICJfXw== IG9mZmljZQ== b29scw== VVNF IGFkZGl0aW9u QVBJ KCIl IGluZHU= R1I= QU9E aGlnaA== bGVhcm4= IHhtbA== YW5hbA== IGNob2ljZQ== IGJsYW5r IGNvbW11bml0eQ== c3ljaA== aXZlbg== aXhlbA== 5pc= IDI1NQ== YXJ0bWVudA== enk= KScs IENP IG91dHNpZGU= IG1lYXN1cmU= YWdpbmc= IGxvc3Q= IGN0eA== aG93 IHF1aXRl w6U= YW1vdW50 IGFwcGVhcg== b3Bo IC09 VVRI U3Rl IFByaQ== b2dyYXBoeQ== Z29yaXRobQ== ZXR0ZQ== b3VuZGVk Q3Jl IGZlZWQ= IHByZWZpeA== IHNlZW1z IGhyZWY= IEFjYw== IHN0ZQ== YW1lcmE= T0s= bW9udGg= VVNFUg== bWluYWw= RG93bg== dHR5 Q1JF dGVybQ== c2hvcnQ= 0Ys= TlM= IGRldGVjdA== IGltbQ== IDI2 ZmV0Y2g= IGNvbmRpdGlvbg== IGV4cHJlc3M= eWluZw== YW5ub3Q= IHZpc2l0 ZXE= Iis= Z2FtbWE= T1JE dWdl c2FtcGxlcw== ZXJyb3Jz IFRy b21pbg== IGxvbmdlcg== IGFjdGl2aXR5 IC4u IGV4dHJhY3Q= IGV4YWN0 IFJlZA== IGF1dG9t IGFmZmVjdA== bG9vcg== UFJF IGJhbA== IHN0YXRpYw== bG9vaw== U1RBVA== IOKAmA== SU9OUw== Y29ubg== TWVt bmVz Y29tbWVudA== IHNpZw== IGV4cGVyaWVuY2U= aXh0 RmFjdA== YWdn c3Rkb3V0 YWdlbnQ= IGJsb29k IHB1c2g= VURT ZHI= bG9vcA== YWN0aXY= IGRpc2U= YWN0ZXJz IOs= IGNvbnN0cnVjdA== IHJlY29nbg== b3Rh c29mdA== bW9yZQ== U2VyaWFs VGhhdA== IG5vZGVz IHBhcnRpY2lw dXN0cmFs IHBr IGFscGhh IHBvc2l0aXZl ZG9jdW1lbnQ= SFRUUA== IHR5cA== dW5pcXVl YWRz IHNvbWVvbmU= bWlj dmVj IEltcG9ydA== RGlzdA== IENvdXJ0 YWU= IExvZw== cG9jaA== IGxhYg== IGFncmVl IGNvbnNpZGVyZWQ= 4pU= aWNsZXM= ZGVwZW5kZW50 IG1vdGhlcg== XSxb VGV4dEZpZWxk cmVt R0c= IHJlcQ== cHJpbWFyeQ== YmVzdA== IHNsZWVw ICcp Y2hvaWNl dWVzcw== IDIwMDk= IHRha2Vz Y291bnRlcg== anM= d3JpdGVy IGdlbmVyYXRlZA== IGlucHV0cw== Tk9ORQ== YWZ0ZXI= Y29wZQ== IHVuaWNvZGU= c3VjY2Vzcw== IGFuYWx5 bGFw TWV0YQ== YW8= IFN1Yg== IHByaWNl Qkw= IHN0dWRpZXM= IGV4ZWN1dA== QnVpbGQ= SWRlbnRpZmllcnM= aW5ndG9u YXNj cHJvdA== SUY= ZGF0ZXM= IG5laWdoYg== Ymx1ZQ== ZGF0YWJhc2U= 5qA= emVybw== IHRha2luZw== ZWRnZQ== aWZvcm0= YXNpYw== QU5E ZGlyZWN0b3J5 IHJlbGF0aW9uc2hpcA== IGVmZg== IEF1Zw== ZmVjdA== IFtb cHJvcGVydGllcw== IHByb2dyZXNz MDAwMDAw U0E= dHJhbnNsYXRl Ym91bmQ= TWF0 c2lnbWE= T3V0cHV0 Llw= Xyw= TmU= IHBhcnR5 IM4= T3Blcg== c2VydmF0aW9u Y2hhbm5lbHM= IHRoZW1zZWx2ZXM= cmljdA== IFBl dGVzdHM= ZW5naW5l IGNzdg== PXsn KSI= cHU= IHsj TEVDVA== fS8= dW91cw== b29r IGNvbHVtbnM= Ly8vLw== QU5U Il0u KHsn IHRyaWFs Y2hpZQ== X18p IE5vcnRo cmQ= 0Lw= b2Jlcg== IGN1cnNvcg== KCctLQ== IE9jdA== TW9kZQ== IGRpc3RyaWJ1dGlvbg== IGNvbm4= IGNvbnRhY3Q= aWNrZXQ= IHNvb24= bG9nZ2luZw== cGhvbmU= cmVzaGFwZQ== IHdhbGw= dmFsaWRhdGlvbg== IGlzbg== aWxsZWQ= IE1B IDIwMTA= AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA= IHNleA== YnJlYWs= IDI3 cmVtZQ== 77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9 IGdpcg== IHVzZXM= IENvbmZpZw== IHJvd3M= IGRlYWQ= IHNlY29uZHM= ZHVsZQ== X18iOg== aGVzdA== IHJlcGU= IENoYXI= IFJlYw== IGxldmVscw== dXJyZW5jeQ== aGFwcw== bG9hZGVy eW0= IG9mZmljaWFs VUU= b2U= IHNwZWVk IHBob3Q= Li8= IFRPRE8= IDEwMDA= IGVkdWM= b3Nz 5bo= aGlzdA== KCcl IHNhbXBsZXM= V2lkZ2V0cw== XVxdLg== cGF0dGVybnM= aWdnZXI= LyU= 4KQ= IE1y TWV0aG9k IGltcGxpZWQ= YWNpbmc= IHNob3dz IGNyaQ== aWtp IEJhc2U= YW5nZXI= IGV4aXQ= IEd1 YUk= aGlkZGVu bnk= YWJsZXM= IHdhdGNo U2VydmVy YC4= YW5nZXM= bmI= 5Yo= IExP Y2Y= dmV5 IE1hcms= a2E= U0laRQ== UmVj IDIwMTI= XTs= 5Yc= IHdhc24= IGNvbnNpc3Q= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IGNvbWVz IHByZWM= YXJyb3c= IGJyZQ== YnVmZmVy aG9sZA== cnU= IHN0dWRlbnRz RGVmYXVsdA== IEhvdXNl bGF5b3V0 c2tpcA== IGNhbGxiYWNr dWxhdGVk SE9VVA== IHBhZGRpbmc= IEZvdW5kYXRpb24= 0Yw= IG1pY3Jv IFNlcHRlbWJlcg== dG9vbA== IGhvdA== IGJlbGlldmU= c3Rl IHJlZGlyZWN0 Qk8= aXNoaW5n YXJnaW4= IFso IHZpb2w= YWxsZWQ= IGhhbmRz R0k= IGFwcHJvYWNo IGFzeW5j CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IGRlbGk= Lyc= IHByb2ZpbGU= IGluY3JlYXNl RG9j 0LI= cHJlYw== cG90 IGNhdXNl ZHk= c2VydmU= QkM= cm90ZQ== bWlk Tk4= QkFTRQ== IG5lY2Vzc2FyeQ== IGJhbmQ= cmVzZXQ= KCct IGNvbnZlcnQ= c2NyaXB0b3I= IGJyaW5n dW5kZXI= IEZpbGU= IHN1cHBvcnRlZA== dHVwbGU= 7J0= b25kb24= IGJlbmVm b250YWw= QVNT Xntc IGNhdQ== cmVwcg== aXBlbA== IG1pc3Npbmc= ZW1iZWQ= IG1hcmtldA== ZnJlcQ== IGFjY3Vy Y2hpbGRyZW4= IHN0YXk= dW50aW1l IHN5c3RlbXM= QXNz IHdob3Nl IHZlY3Rvcg== U0VU TXU= TUlO IHF1YWxpdHk= Plw= J30p RGVj YWlseQ== VXBkYXRl IHNldHRpbmc= IHByb3Blcg== IGludGVnZXI= IHRpbWVvdXQ= ZW5kYXI= b3Jpbmc= KV0p TGluaw== IExh cG0= IGxlcw== KSku 0LQ= IHVybGxpYg== IHNvdW5k IGNvbnN0YW50 IDIwMTU= TXVsdA== c3VtbWFyeQ== 5Liq YXNzd29yZA== IDIwMTM= IENvdW50eQ== IFdJVEhPVVQ= IGNhdGVnb3J5 cmVuY2g= IGVucw== IHNwZWNpZXM= b2x2ZQ== IGxlYXZl aWNv IChb IHBlcnNvbmFs ZWRlcmFs IHNhbA== SUxJVFk= Qm9vbGVhbg== bXV0 IGNhbmRpZA== IGdhbWVz 4paI IG1hdHBsb3RsaWI= c3RhbnQ= YW1pbHk= IEVY IGhhc2F0dHI= UEM= IGRyb3A= IGludGVncg== MDMz IGJvdHRvbQ== IEZyZWU= IGNsYXNzZXM= QmFjaw== QmFy ZG91Ymxl Q29t IGlsbA== bXBsYXRlcw== IG5hdGlvbmFs IGFnZW50 IGNvcA== b3Rlcw== IHNlcQ== Y29zdA== IHRyYW5zZm9ybQ== bmVn IGV0Yw== IEFyZ3M= c3VwZXI= IHJlZ3VsYXI= dGltZXN0YW1w QXJn dXN5 ZGs= ICgt IGV4aXN0aW5n IHBvbGl0aWNhbA== cGljaw== Y3R4 YXJh ZXBz 5Y4= dXNpbmc= IHByb2JsZW1z ZmFrZQ== bWFzdGVy CgkJCQkJCQkJ dW5pdHRlc3Q= IEFtZXJpY2E= IGRpYWc= IEZpcnN0 5ok= dmFyaQ== cGVjaWFsbHk= IHdvbWFu IHV0aWxz IGRlbW9u IyMjIyMjIyMjIyMj dmlkZW8= YWNpdHk= Y29taW5n cmI= dXJi Y29ycmVjdA== IHBlcnM= UGFydA== IGZpZ2h0 IE5vdw== IG1lY2hhbg== IHByZXY= IGludGVyZmFjZQ== b3Jlcw== dHJhaW5pbmc= XS8= IGdhdmU= IGhhcg== cGVyc29u cGF0dGVybg== YW50aWM= IGNvbXBldA== QXV0b0ZpZWxk b3o= IFNU YXRlZ3k= IHNpbXBseQ== bWF0aGJi ZWxp ZW5zaXZl SW5zdGFuY2U= 5Zw= IAog w6fDo28= cmVsZWFzZQ== IEhUVFA= IHF1ZXN0aW9ucw== IENvbQ== IE5ldA== IEJyaXRpc2g= IG1vZGlmeQ== b3B0aW0= IC0tLS0tLS0t IHBsYXllZA== SVBU cG9uZQ== ZXJpYw== IG1vdmVk IEFE dmFycw== IGZlbQ== RXh0ZXJuYWw= UmVm IGdldGF0dHI= QWI= Y29ucw== IDIwMTQ= c2hlZXQ= IG11dA== UG9saWN5 RG8= IHNvbGQ= cmF0aW9u cm9sZQ== IG51 IHBvb2w= IGxpbg== aXZpbA== dmVyYm9zZQ== cHJlYWQ= aGk= dm0= aXR0ZXI= IGF3 cHJpbA== aXJjbGU= IGNvbnRyYWN0 aXRodWI= b2NpZXR5 aWZ1bA== Y29vaw== MTAx w6g= c2VxdWVuY2U= IGNvbWluZw== cmVzc2lvbg== IGRpcmVjdGx5 IE9wZW4= IHBsYXRmb3Jt bGV0ZWQ= IFVzZQ== U291cmNl IGRybw== YWxhcg== U0Q= IEluYw== IHNwZWN0 IGJhbms= YXJlYQ== fSg= VGl0bGU= IC0tLS0= IHNraXA= aHI= IGNvbnZlcg== 5o0= dXRlcg== TGVuZ3Ro Ym4= dHJpY3M= dWY= IEp1bHk= ZmFjZXM= IG1haW50 ICc8 IGFsYnVt IHJlc3BvbnM= IFBvc3Q= RGV0 IG9ubGluZQ== V04= aWxpdGFyeQ== bmVycw== IG1hcg== CgkK IFRyYQ== IGJhbGw= IHNlY3VyaXR5 IGNvdXA= YW5kZWQ= VHJhY2s= IGludHJvZHU= IE5vdGU= IHBlcmZvcm1hbmNl IHNlcnZpY2Vz Lz4= IFN5c3RlbQ== bGllcg== IGluZmx1 RnVuY3Rpb24= 5bw= YXV0b20= b2JpbGU= IHN0cmk= U3Vt ZXh0ZW5zaW9u bm9uZQ== IGN1cnJlbnRseQ== b3JnZQ== IGNvbmR1Y3Q= U0lPTg== KCIv IHN0YXRlbWVudA== RGF0ZVRpbWVGaWVsZA== b25hbA== IFZlcnNpb24= dWludA== IG93 c3BlZWQ= dm8= VUxM V1M= w6o= IFdlYg== IHJlbWVtYmVy YWluaW5n IGFycmk= SW1wbGVtZW50 c2V0VGV4dA== Q1JJUFQ= Rk9S U2Vl IFN3 Y2VtYmVy aXpvbnRhbA== IERqYW5nbw== IEVk IExpYg== b3ZlbWJlcg== IHJlYWRpbmc= IEFt Y2Vzc2Vk IHNoaXA= dHJp IGRlcHRo IHBhaXI= IGluc2VydA== fTt7 6YA= c2V0T2JqZWN0 cHJvdg== IGluY3JlYXNlZA== UkE= dXRpb25z bGljZW5zZXM= IGF0dGVudGlvbg== b3Jh IEVs TWFpbg== IGxldHRlcg== IHBvbGljZQ== IGNvbXBhcmVk YWRlcw== dGVjdGlvbg== b3RlZA== IGNvbnRyYQ== IGVzdGlt IHdpZGdldA== REY= TWFueQ== bWF0aGNhbA== IG9ic2VydmVk bWFj Y2I= ZW50aXR5 R0I= IGNvbXBhbg== ZXJhcw== IGF2b2lk IGNvbGxlY3Q= IEF1c3RyYWw= Y3B1 YW5v ZXh0cmE= IE1hcmNo 44CC ZnJlZQ== IGFycg== IGF1dG8= IHdyb3Rl IGxlZA== UHJvY2Vzcw== cGFpcg== IGFuaW0= IHByb3RlY3Q= Li4uLi4uLi4= YXB5 U3BlYw== YXph cmFz aXRpYWw= IHBsZWFzZQ== Um93 IGJ5dGVz ZGVudGlhbA== IHRr IG9r aW50ZXJmYWNl IG11bHRp REE= YXRpdmVz IHRlYWNo PVw= IHBlcmZvcm1lZA== TGV2ZWw= ID0+ IE91dA== dHc= IFN5 aW5uZXI= IGF0dHJpYnV0ZXM= IHdpZGU= IGRydWc= XV0p eW5hbWlj IGFjaGll IHN0ZXBz IDIwMTY= T3Blbg== IEtpbmc= c3VwcG9ydA== Q09MT1I= IGly IHVpZA== IHN0YXRpb24= IHVzdWFsbHk= fV8= ZGlzdGFuY2U= IGdvYWw= YnRu Ym9u aW5jaXA= ZGVwdGg= IGxpdmluZw== RVJST1I= IGhhc2g= YWxpbmc= cG9saWN5 IDY0 ICMjIw== LCk= VG9rZW4= YWlnbg== IGRlcA== IDgw cHJvZHU= SUI= cmFpc2U= IGxvY2s= IHRvb2w= dGhhdA== IGV4cGVyaW1lbnQ= IGVhc3k= KD8= aGVudGljYXRpb24= OiIs cGV0 UFVU IDIwMDg= IHRyYWNl IHJlY2VudA== IGRlY2lzaW9u Oi0= T3Zlcg== ZGF5cw== IGZpeA== IGtpbGw= 5Lit YXN5bmM= IGFydGljbGU= IGJyYW5jaA== QXR0cmlidXRl IGNoYWxsZW4= IHNlZW1lZA== IGxvZ2lu IHNob3dlZA== dXBsaWM= IEp1bmU= IG5vdGljZQ== IFJlbQ== IEF1Z3VzdA== cmFuaw== IGFjdGlvbnM= QmxvY2s= aXN0cmljdA== IG1lZGk= SU5E IGZvbGxvd2Vk IGltbWVkaQ== dXJpdHk= ZWNhdXNl IGVzcGVjaWFsbHk= bWF0aGJm IHZvaWNl IElQ Ilw= UmVt IG90aGVyd2lzZQ== Xnst IHplcm8= Z3JlZW4= IHJlbGVhc2Vk aWF0aW9u cmVkdQ== IGhpZGRlbg== UmVzb3VyY2U= amE= IHBob25l R1A= IG1heGltdW0= IGZpZ3VyZQ== cGRm VEVTVA== IEdyb3Vw IHRlc3Rpbmc= IHBhdGhz IG9wdGlvbmFs IExvbmRvbg== IHN0YXRz TW9u Y2x1c3Rlcg== IHBvcg== b3Rpb24= IHNoYWxs Z2VuZXJhdGU= IG1hcnJp aXBlbGluZQ== IHB1bA== b2NhYg== dHJhY2U= IFBhcms= IGJsdWU= IHRvd24= cmllZg== IGNvb3JkaW4= IGNsaW4= IGRpZmZlcmVuY2U= IGNsdXN0ZXI= IHJ1bGVz IEVhc3Q= IGNoYXJhY3RlcnM= IGlnbm9yZQ== SW5k IFByZXNpZGVudA== aWN0dXJl OTk5OQ== IHBoYXNl ZHJv VGhyZWFk IHNoZWxs YW5uaW5n IG1vdmluZw== UkRC a3c= QUJJTElUWQ== RUNU RGVs IGNhbGN1bA== IG1pZGRsZQ== Y2VlZA== IGZyaWVuZHM= RkM= aW1lZA== cm9hZA== QWRkcmVzcw== IG1vdW50 c2NoZW1h 5piv IHN0YXJ0aW5n cHJldg== ZW5jZWQ= bXVsdGk= IGVmZm9ydA== IGxpYnJhcnk= IGJlZA== d2VsbA== dGVl X18s ICQkXA== cGx1Z2lu Y2Vzc2Vz IGZhdm9y IG5vcm0= aW5zdGFsbA== IGRyaXZlcg== IEFydA== QWRtaW4= IFBy aWdub3Jl c2VjdXJpdHk= aWxpbmc= IDMx ZGF0YUlkZW50aWZpZXJz IHRyaWVk UkRCSQ== IG1lZXQ= IHNwZWFr IGRpc3RyaWN0 IDI5 Jylb bHlpbmc= YXV0aWZ1bA== VmFsaWRhdG9y a3k= cmVsYXRpb24= TWVudQ== IHZpY3Q= c2VlZA== IFNt aW5kaWNlcw== QWZ0ZXI= IHdvcmtlZA== VmFyaWFibGU= RGlhbG9n ICIr IGFuZHJpcw== IHN0YWdl SW52YWxpZA== IHZlcnM= RU5TRQ== VmVy TEw= c2V0T2JqZWN0TmFtZQ== c2VsZWN0ZWQ= IGZpeGVk 5Y0= IGFubm91bg== IG1vcm5pbmc= IG1lYW5pbmc= IGluZGVlZA== b3JnYW4= dGF1 U2VsZWN0 IGdyZWVu IDUwMA== aGV4 IHZvaWQ= IEVudA== IGFnbw== Il1bIg== c3ltYm9s w7Nu IGZ1bA== ZmlsdGVycw== IHN1cnY= IGludm9sdmVk aXNpb25z IHVuaXR0ZXN0 Q3VycmVudA== IGRlY3Jl IE9jdG9iZXI= IEFn IGNvbXBvbmVudA== Y3RvcnM= cHJvY2Vzc29ycw== 6L4= IHN0b2Nr IGRvdWJsZQ== cG93ZXI= IGRvdQ== REVCVUc= ICJf fV97 Q29udHJvbA== TG9nZ2Vy IEVuZ2xpc2g= IGJpbmQ= YW5kYXM= IEZST00= VElNRQ== 6Yc= 570= IHRvd2FyZA== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= b3VyYQ== dHlsZQ== aG9s cmVzc2Vz IEphbnVhcnk= IHJlZ2FyZA== dmFsaWRhdGU= IGRpdmlzaW9u IEp1c3Q= ZGV0YWls IGltcHJvdmU= IFNjaG9vbA== ZXhj aW5jdA== 4oCi L3s= MjAxNQ== ICIn IGJlaGF2aW9y IHByZXNpZGVudA== SUNBZw== IGNvcmU= IElJ IGlzc3Vlcw== cXVpcmVk IGNvbXBhcg== REVT IEhvbA== dmFu IGxlYXJuaW5n IHdlaWdodHM= YW5jeQ== aGlzdG9yeQ== IEhpZ2g= UG9zaXRpb24= IHJlbW92ZWQ= XF0= ZHVtcHM= Uk9PVA== bnU= Ijp7Ig== KSIs b21hbg== dWdpbnM= Y292ZXJ5 VU0= YmFja2dyb3VuZA== IHVt IGV4YW0= DQogICAgIA== IGRlZmluaXRpb24= IGRlZmVuZA== ZGVmaW5l IHJlYWNo IGR1 IGJpbmFyeQ== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== U3VzeQ== aHM= Y2hhdA== UHJp IG1lbnRpb24= IGJ1cg== cGI= IHBlbg== IE1h IHByZXZlbnQ= IHNrbGVhcm4= Z2l0aHVi TVQ= IGVmZmVjdHM= IEFwcmls dWRh c2ltcGxl IE1ha2U= IHJhbms= YXN0ZQ== ZW50eQ== IHJlZmVy aXplcnM= Y2FwZQ== IHNlYw== CgoJCQ== RWQ= IDIwMTc= Y2l0eQ== YWRpbmc= T1VU YmxhY2s= QUdT IHZvdXM= Q0FG IGNvbmNlbnQ= UHJvamVjdA== IHdlcg== UkVH 0Yc= INC/ IHN0cmlkZQ== IGZvb3RiYWxs cGh5cw== UXVlcnk= IGVwb2No c3RhdGVz IGhlYXJk Q1A= IGVudGVy c29tZQ== SUNFTlNF Y2FsbGVk VmVyc2lvbg== IGdsb2I= IEF1dGg= bGFuZ3VhZ2U= b2RheQ== IE5vdmVtYmVy T3B0aW9ucw== IGJvcmRlcg== UEVS IHByZXR0eQ== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IGdyZWF0ZXI= IEdyYQ== IG1lZXRpbmc= IFZlcg== TGF5ZXI= IFBvaW50 44Gu fS4= cHJvcA== Oics dWdodGVy IGNmZw== IH4= IGxvY2F0ZWQ= ZG93bmxvYWQ= IGFjdGl2YXRpb24= U1FM bGlmZQ== bG9y IHBzeWNo IHBhdGNo IHNjaWVudA== YWxpZ25lZA== 5bg= ZW15 YXR0cmlidXRl KCkpLA== b2Ny IGludGVybg== ZmFjdG9y IGJyb2Fk IHNoYXJl PVtd IERlY2VtYmVy TU9ERQ== IHF1ZXVl RFA= eGlt IGhvdXI= Y2hhaW4= YXRlZ29yaWVz IHByb3ZpZGVz IGJpbg== IHdvbmRlcg== IGRlbW9uc3Ry OiI= Z3JhZGU= aXNj cHJveHk= b3VzbHk= YnJh dG4= IHJldmU= IDIwMTg= IHJlc291cmNlcw== JCcs U2Vj IGNvbmM= aWxsYQ== YXBwZWQ= IGNhcHQ= SVRF IHdlZWtz IEZpZWxk IEh0dHA= TE9H IG1lbnU= UE9SVA== aXR0 XT0= IERy RGlyZWN0 YXRhYmFzZQ== IGZvY3Vz IGZhY3RvcnM= IGR0 cGVhaw== CiAgICAgICAgICAgIAogICAgICAgICAgIA== IHRhZ3M= cHVzaA== dW5kcmVk IGFncmVlZA== IGNvbW11bmlj IFNlbg== IHdpZmU= R3JhcGg= iJI= U2VhcmNo b3JpZ2luYWw= bHN0 IGRpZWQ= Wzot IGJyYWlu b2Jz b3Jhcnk= aWxlcg== bWs= IG5hdHVyYWw= IGNvbXB1dGU= YWNjZXB0 cGFydGlhbA== enI= Y29scw== dHJl IGZh bWFz ZXh0cmFjdA== IGFwcHJvcHJp IG1ldGFkYXRh IHdheXM= U3lzdGVt IHJlcGw= Kiou YXBwbHk= IGVkaXQ= aG91c2U= c3RhdGljbWV0aG9k Lyo= aW5p IHN0YXI= aXJpbmc= bWV0cmlj eW5jaA== IGZyZXF1ZW5jeQ== QXBwbGljYXRpb24= Y29tcGFueQ== Y2ls d2FybmluZw== bnRheA== IHZlaA== VEE= YXRv IGFybQ== c3RvY2s= YnJ1YXJ5 cHNpbG9u U3VzeUNBRg== YXN1cmU= c2dp T3JkZXI= INGB c3RkZXJy YmVydA== c2VyaWFsaXpl In0s cmVh bG9hZGVk IEhvcg== IHByb2R1Y3Rz IG1hc3Rlcg== dWRlbnQ= IGFicw== IGZv R0U= IHNjaA== dWZmbGU= Kz0= Ymk= IEJlcg== Ymli IGVuZw== IGFic29sdXRl Y29udmVydA== YmVmb3Jl SUNG d2hpY2g= IGRvd25sb2Fk UmVk IHVwZGF0ZWQ= IGxhdA== MzMzMw== IG1hY2hpbmU= cmVuZ3Ro IH0p IE9yZGVy bWFs ZXZlbnRz aW1wbGU= IHRlbXBlcmF0dXJl IG5lZ2F0aXZl YWNoZXM= Xlw= bW9kdWxlcw== IG1vdGlvbg== U0w= c3U= YW1waW9ucw== IFNP VGhleQ== IGluY2x1ZGVz bGFz IHRoZXJlZm9yZQ== aXh0dXJl Y24= TUM= IHN0cmluZ3M= UmVjdA== Rm9udA== aG9sZGVy YXRpdmVseQ== aXJpdA== aXNm IGxpdGVy bGFu aGFu TklORw== YXR1cg== IHdpbmQ= YWRvdw== IGxhY2s= U2Vzc2lvbg== YW50ZWQ= Y292ZXJlZA== IE1hdA== Oi8= IHJlcXVpcmVz REFUQQ== Rm91bmQ= IEZpZw== R0w= TVBMRQ== IGNvcnJlc3BvbmRpbmc= UGFjaw== IE1vcmU= ZmVlZA== IHRodXM= aWRlcnM= b3JpY2Fs IGFueW9uZQ== Z2Vycw== IHN0dWZm IGdyb3d0aA== Q2Fu YXV0b21hdGVk 5bA= IFBSTw== YXR0cmlidXRlcw== IE1vZGVs 0LXQvQ== IGNvbGxlY3Rpb25z aW55 b21h Ymln IHVwcGVy IERvbg== b3NwaXRhbA== PSIi UG9ydA== cnR5cGU= IHNlbGVjdGlvbg== IEludGVybmF0aW9uYWw= IGdvbGQ= TUFY bm90ZQ== ZmFzdA== Y2xhc3NtZXRob2Q= b3V0cHV0cw== IGVtZXI= KCdf Y2x1cw== IEphcA== IHZz dmFyaWFibGVz aXN0YW5jZQ== IHN1YnByb2Nlc3M= REVGQVVMVA== IENvbHVtbg== RmxvYXQ= IOY= YXNzaWdu ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IHNlc3M= IGJ1ZmZlcg== DQoJCQk= dGhyZXNob2xk ZW5jb2Rpbmc= U0M= ZmE= IGFsdGhvdWdo dW5p dnM= IGluag== DQogICAgDQogICA= IGRvY3VtZW50YXRpb24= IGNsdWI= IHJvbGw= IGNsb3NlZA== aXRhdGlvbg== YXBzaG90 KSoq ZG0= a2VybmVs IHN1bg== YXN0aWM= IElkZQ== IHdlYnNpdGU= IGtub3dsZWRnZQ== QUFBQQ== ZWNo ICgp YXZlbg== Y29tcHV0ZQ== SEw= Z29vZ2xl IElzcmE= IHByZXM= c2hpZnQ= IG9yaWdpbg== IHVuaXRz UFQ= IERlYw== VVJF fScu IHdyaXRlcg== IGFzdA== KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKio= cXVlc3Rpb24= bGVycw== CgogICAgICAgICAgICAgICAgICAg cGll VElFUw== IFNpbQ== IGRvZw== PT0n bWFn ZXhwb3J0 IGJlZ2lubmluZw== IHNlcXU= IGV4ZWN1dGU= IFRP IGNvbWI= QW1lcmlj YmxvZw== cm9weQ== aXNzdWU= IHBvbHk= U1Y= aWdlbg== IG9wZXJhdG9y IGRldGVybWluZQ== Q29ubmVjdGlvbg== ZGVzY3JpcHRvcg== IFNF IHJlY29yZHM= ZnJpYw== YW5jZWw= cmVsdQ== c2lnbmFs IGVtYmVk d3M= cGVyaW9k IHNheWluZw== YWVs Y2hhbmdlZA== IHJvYWQ= b2xhcg== IG1hbmFnZXI= IHZpbGw= dXNlcw== IHNtbw== b3B0cw== X1w= IG5h IGhlYXQ= cmFuZGludA== YW5kbw== IDIwMDc= Q2hpbGQ= b21lbg== b3NpdGlvbg== IGhlYXI= Oiw= IGNlbnR1cnk= Z2F0ZQ== am95 cGlj IEFj IFVuaW9u cHVibA== IG9wZW5lZA== IHNvdQ== IG5hdHVyZQ== IGFsb25l aXB5 bmFu IEtl VGFzaw== IGVzdGFibGlzaGVk IGNvbW1hbmRz IGNhcmVlcg== IGFuZ2xl IGFyZWFz KV0s 6Zc= IEZyb20= ZGw= IHtc IENodXJjaA== IGdvZXM= IFdvcms= b2NpdHk= UmVs JSk= IDM1 SUNF UXRDb3Jl b2NhbA== IHBhcmVudHM= IGdsYXNz 5b0= IGZvbGRlcg== YW5jaWFs 8J8= LiIs IHBhbg== b3Npcw== UHI= cGtn Tk9U c3RvcmFnZQ== IHJlYWNoZWQ= dW1hbg== IGltYWc= IEZvcm0= cmVnaW9u IGljb24= KSc= YXN5 IE1pY2g= IGRlcGVuZGVuY2llcw== IG11 IG11cw== ICItLQ== IGJhc2lj IHZlcnQ= Z3JhbXM= c2VsZWN0aW9u bGluZWFy c2VseQ== IGFsdGVybg== cG9zaXRvcnk= c2luZ2xl ICIiLA== IGFwcGxpZWQ= IGVhcmxpZXI= d3NnaQ== ZGVw IG1hdGNoZXM= QVVUSA== cHVz IEFueQ== IGNvbXBhbmllcw== IChc IGdldHM= aWJseQ== UEg= ZXJhdGlvbg== Qm9vbGVhbkZpZWxk IHBsYXlpbmc= ZG9uZQ== ZmxpY3Q= c2lu IHdhcm5pbmdz b3NwaA== 77+977+977+9 IHNvbWV0aW1lcw== UGU= IHNpdHVhdGlvbg== eGZm IG9uZXM= cGxhdGZvcm0= IGd1bg== UkM= IHN1ZA== IHN0YWZm IGZpbmU= aW1lbnRz IFF0V2lkZ2V0cw== IGxhcw== IHRydXN0 IHNjb3Bl aW5pbmc= dXBsZXM= IHNhbHQ= YXZhaWxhYmxl IENlbnQ= IHBsdXM= T0Y= X18oKQ== V29yaw== d3JpdA== IGRpc2Vhc2U= aGo= KCoq IHByb2R1Y2Vk IGlkcw== U2NoZQ== In0pLg== IElzbA== ZnRpbWU= TWV0 IGNsaWNr bGV2YW50 5paH aW50ZXJ2YWw= QUNU IFJlcHVibGlj TW9jaw== ZW5hYmxlZA== ZmlndXJl IHJlY29tbQ== b3Zlcm4= IHNlbnRlbmNl dWZhY3Q= YWJj RXhw U3R5bGU= IDkw IEludGVy IGJvb2tz U29tZQ== aXNhdGlvbg== U1RBUlQ= IHN5bWJvbA== IFBoaWw= IERlbA== IGNvdWxkbg== IGNhbGxz UG9zdA== cHJvdG9jb2w= aWZvcm4= dG9waWNz UHl0aG9u c2VjcmV0 IGV4cGxv cmliZQ== IHJlYWR5 IGltcGFjdA== YXNzZXJ0RXF1YWxz VG9vbA== IHByb3RlaW4= IGdhcw== Y29udGlu U2NyaXB0 c2VyaWVz IFN0cmVldA== YXdu aW5ldA== IE1heA== PXt9 IGxhcmdlcg== aXN0ZWQ= RW50ZXI= IGNpdA== SEVSRQ== IG1vdmll YnJhbmNo IHByb2Zlc3Npb24= aXVz dWVy cmhv 7ZU= IHBpY2tsZQ== ZmFsc2U= IG5vbmU= IGRldmVsb3BlZA== LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t TEE= eW91 IHRoZW9yeQ== IGRlbHRh IGRlY2lkZWQ= IG1pbGl0YXJ5 d29ybGQ= IGhhYg== cnlpbmc= IHhyYW5nZQ== IGdyYWQ= YXVzcw== YXNoaW5ndG9u U0VMRUNU SmV0 IGFucw== YWJ5 IERlZmF1bHQ= YXN0eXBl b3VuY2ls b2dlbg== IGJyb3VnaHQ= IEhU cmFpZ2h0 ZXN0ZWQ= IGNvbXB1dGVy V0FSRQ== dWxlcg== dGVhbQ== c2NvcmVz YCw= IGJ1Zg== YWRvcw== dWxhdGlvbnM= Pic= RVY= Ym90dG9t Y29udGFpbmVy IHN0dWRlbnQ= bmM= IEFudA== YmluYXJ5 WFQ= IHByZXNlbmNl b3BlcmF0b3I= YXZn IGRhcw== IE1v IHNhZmU= IHBlcm1pc3Npb25z IHRvdXI= IGFkanVzdA== IHNvdXJjZXM= IGxlYWRpbmc= IG9pbA== SW1wbGVtZW50ZWQ= cGF0aHM= IGNvbnRlbnRz anBn IHt9Ii4= IGNhdA== IG1hYw== dW1z Zm91bmQ= IFRleHQ= 5Li6 IEZlYnJ1YXJ5 IHBsYWNlcw== fSwi aWxr IGNlbnRyYWw= IGNodW5r SXRlcg== IGls YW5kZXI= fSQk YWRvcg== YW1s 55s= YXJkZWQ= aXhpbg== IGRyaXZl U2VyaWFsaXplcg== IHRoaW5raW5n XS0= IHVua25vd24= KSoo U2w= IGJ1bA== IHNvZnQ= IGludGVycHJl LF8= aXRlY3Q= IFNhbg== TWVk X18u fSIu TE9X a3Q= IGRlcGFydA== IGFiaWxpdHk= bGln ICcnKQ== IGNvbnN0aXQ= IE1ldGE= IGFudGk= VXJs V2lkdGg= 5o2u IGFyZ3BhcnNl dXJjaGFzZQ== IGJhc2lz Ukk= IFdBUlJBTlRJRVM= IHByb3A= ZXJuYWw= aWZvcm5pYQ== IHN1aXQ= IGFsbG93cw== IHJlbW90ZQ== bG9u Pyc= IGxvb2tz Lics Z2l0 IHJlc3RyaWN0 IGZhaWx1cmU= IENsYXNz TW9k UHJvZHVjdA== IGVuc3VyZQ== IHBpZWNl T2Jq ZW5zZWQ= IHBvcHVsYXI= TUQ= IERlbQ== YXR0cnM= ICcr IGxpY2Vuc2U= dG9s Q29udg== IFNwZWM= IGhhbmRsZXI= VG9w b2tl IERlcGFydG1lbnQ= c3RydW1lbnQ= b2tpbmc= IHNlcmlvdXM= IHBoeXNpY2Fs IGh1bmRyZWQ= IEV4YW1wbGU= IG9idGFpbmVk YXR0ZW4= IHRocmVzaG9sZA== IGNob29zZQ== SGlzdG9yeQ== 5YY= cm9uaWM= IGVpbg== IHJhaXNlZA== IEJ1aWxk V3JpdGU= dXJ0 IFBlbg== VVY= IDIwMDA= SE9TVA== IHNoYXJlZA== IHNvdXRo 5paw IGJyb3dzZXI= c3BlY3Q= RmFjdG9yeQ== QEA= IGJvcm4= IGdlbmU= IGRlZmluZQ== IGtlcHQ= amV0 IHdhcnI= IHN0b3JhZ2U= IHJlY2VpdmU= INCy IHRhYg== aG91cg== aWNodA== IGNvbXBs IG1lZGljYWw= IHByZXZpb3VzbHk= Wyg= Z3Vp PT09PT09PT09PT09 IERlbg== aW5kZXI= IG91dHB1dHM= IGNvbXBsZXQ= dm9pZA== Ijs= Z2xl IHBlcmZlY3Q= IGhvbg== cGFydHM= IHF1aWNrbHk= dWxlcw== Zm9yd2FyZA== IFdoaWxl IGZu MTI3 XCc= Zm5hbWU= IG1ldGE= ZnJp bHI= Q0k= KCc8 IHZhbGlkYXRpb24= IGJn dXN0ZXJz Q2xl IG5z cmV2ZXJzZQ== IGd1ZXNz IHJhbg== IERpc3RyaWN0 dWE= IHRlY2hub2xvZ3k= aWxh IFBhbA== IHlvdXJzZWxm bGFuZw== 5a8= IGNvbmNlcHQ= QUNF U2lnbg== cGhpbg== c3RyeQ== IGludGVybmFs 5b4= IGNhc3Q= 5Y+W IENvbmc= dW5pY29kZQ== bWVzaA== R3JpZA== cG4= dGljaw== aWZlc3Q= PT09 IF8oIg== IFBhcmFtZXRlcnM= IGJ1eQ== UmV0dXJucw== IDw8 IHZpc3VhbA== UHJvZmlsZQ== YWludGlmZg== wrA= IGNob2ljZXM= IFF1ZQ== Y250 IGZha2U= IHdvcnRo IEVtcA== ID4+ ICYm IDIwMDY= bGV0aW9u Li4uIg== QlM= IGZlYXI= ZW5hYmxl QUY= aWNrZW4= IExlYWd1ZQ== YXVk IHNxdWFyZQ== IHByZXNzdXJl aXJz IGxpdmVz b3JpdHk= YXBlcnM= b3Jyb3c= IHNldHM= ZW50YWw= VHVwbGU= IE1hZw== IHNxdQ== TkQ= dW5wYWNr 5Y6/ IEdvb2dsZQ== VUlE b3BlcmF0aW9u YWlscw== MTUw IGZpbmlzaGVk ZGM= dXJh IHRyYW5zcG9ydA== IGNvbnRpbnVlZA== IGV2ZXJ5b25l XyU= fFw= IGJ1Zw== aXNoZXI= cGxhbg== cnVt IHBhbmRhcw== cGxlbWVudA== IMKx 5L8= IDQ1 SU5GTw== VGVuc29y dHo= IGhvcA== U3RlcA== IGVudGl0eQ== IGdvbmU= YWJzcGF0aA== 4pQ= cmFkaXVz IEVycm9y IEdlb3JnZQ== ZW5v IEFmcmlj RVJT aW52YWxpZA== IHNlcnZlZA== IGNob3Nl dW5kbGU= IHJlbWFpbmluZw== bW4= YWxsZWw= Q2FsbGJhY2s= IHBhZ2Vz bWF0aWM= Tm93 cnc= YXJ0ZXI= IGNoYXJn IGhhcHBlbmVk IFdpbGxpYW0= ZnJhbWV3b3Jr aXNv IHNvbGlk IGVwaXNvZGU= dmlsbGU= Y29tcGxleA== VGVtcA== IHNlZw== IGluY3JlYXNpbmc= IGZlZXQ= QWM= IE1lbQ== IGNhcw== MTIw IG15c2VsZg== IGxpbWl0ZWQ= IGNoYXJnZQ== aG9vaw== IHBsZQ== IFBBUlQ= IEhlcmU= VmFy IGJyYQ== IGNvbGw= PV8= YmFk IGRpc2s= IHBsdWdpbg== IGRpc2FibGU= VUxBUg== IElucHV0 cmFzZQ== IE90aGVy Q29tbW9u IGRlc2lnbmVk YW5kYXJk IGZsYXNr b2NpYXRpb24= d2Vlaw== dHdv ICAgICAgICAgICAgICAgICAgICA= IEphbWVz IG1hbmFnZW1lbnQ= MDAwMQ== YXBwcm8= IHBlcmhhcHM= IDIwMTk= b3ZpZXQ= cmlldmU= IFByZXNz cmVmZXJlbmNl UE9TRQ== X19fX19fX19fX19fX19fXw== IHNpbmc= IGRlYg== IHBhcnRpY3VsYXJseQ== IGFwcHJvcHJpYXRl WWVz IHByaW1l IHN0aWNr ZGV0YWlscw== IFNjaQ== IEFSRw== 44CB RW51bQ== IG9wcG9ydA== IE9ubHk= Rmlyc3Q= aXJv IHJhdGlv YW50ZQ== IG3DoQ== YWJldA== aWNlZA== dXJyZWQ= bWVyZ2U= VUQ= IGRlZ3JlZQ== IGhlbA== UGxlYXNl IGV4YWN0bHk= IE51bWJlcg== IGNhbGM= RGVw IHByb2R1Y2U= Y29tcG9uZW50 IGdpdmVz YWRkV2lkZ2V0 IHBvb3I= Ym9ybg== IENyZQ== 4pWQ IExpbmU= cXVhbnQ= bmFtZXNwYWNl IGV5ZQ== KCIi IG11cg== IGFsbGU= c2FmZQ== ZGVudGlhbHM= 5p0= b21hcw== Y291bnRyeQ== IHByYWN0aWNl TkVTUw== Y2hvcg== bWFr CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IGxldHRlcnM= RGVzY3JpcHRvcg== Q0Y= bGV2aXNpb24= IG51bWVy NjAw Ymc= aWNlbnNlZA== ICAgICAgICAgICAgICAgICAgIA== IFRI aW5ndQ== aWxz Y2h1bms= Y3Nz Y29uY2F0 IENvZGU= IEZyZW5jaA== IHJlY3Q= IGlubmVy IEhUTUw= dmk= IGFsZ29yaXRobQ== IHBhdGllbnQ= INc= IEF1dA== IGJlbG9uZw== IHRyYXZlbA== SVNU IG5vcg== b3JpYWw= IHRocmVhdA== d2hpdGU= dG90 IENhbGlmb3JuaWE= TGFzdA== YXJ0aA== YWdv IEV4dA== MjAxNg== ICI8 dXNhZ2U= ZWRnZXM= aW5lc2U= Y29sb3Jz IG1vdmVtZW50 cmVwbw== IElk fn5+fn5+fn5+fn5+fn5+fg== IElkZW9ncmFt IHRhYmxlcw== c2Vt TG9jYXRpb24= ICgq YWJpbGl0aWVz S2U= IHBvdw== IChbQA== KCIt IHN3aXRjaA== IGNhbmNlcg== YXJj IGJhdHRsZQ== IFBVUg== U2lt IHRob3Vz cmlm bWFueQ== IDIwMjA= IGhhcHBlbg== IHNob3Q= ZXhpc3Q= b3RoaW5n TWlncmF0aW9u UGFzc3dvcmQ= IHJlZHVjZQ== IFJvYmVydA== IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= IFBvcnQ= cGFyYW1ldGVy UEE= IHRydXRo aWZ5aW5n IGZvbGxvd3M= VG90YWw= IEZyYW4= YmVyZw== IHBvdXI= Y291bnRz IGRpcmVjdG9y IGNvdXBsZQ== IHByb3RvY29s IDQy IGRyaW5r IGNvbXBsZXRlbHk= IFBhdWw= YmVu IHNjcmE= IGRldGVybWluZWQ= ZXdz RVhU IHN0b3JlZA== ZGlzaw== c3luYw== IEZJVA== 6KGM ZWxm cG9zZXM= IFJP Z2VuZXJhdG9y UmFuZ2U= IHN2 cmF5cw== IENsZQ== SGVhZGVy IHB1bGw= ICd7 IE1FUg== NDA0 IHNlcGFyYXRl TUVOVA== 57o= IGNvbXBvbmVudHM= ZmFjdG9yeQ== IF8o IFNpbmNl IGNoYW5jZQ== Y2hlbXk= 5YWl IHV0 IGxheWVycw== RUU= IGdpcmw= IGNvbnRhaW5lcg== IGpvYnM= IGhhaXI= IHRvd2FyZHM= IGNoYWlu bWc= IGJpYXM= IG1lcmdl IEppbQ== IHdpbGQ= c3RydWN0dXJl c3RpdHV0ZQ== bGl0ZXI= IG9udG8= K1w= YXRldmVy dGF4 IGJ5dGU= bmVs LVw= eHBhdGg= IFBP IGRldmljZXM= a2lu cmF0aW8= IHBlYWs= IFRW bWVtb3J5 eW5jaHJvbg== IGhpZ2hlc3Q= aXRh IGJldGE= c2Q= 5Lk= IFdhc2hpbmd0b24= IG5vaXNl cHJpdmF0ZQ== TWF5 IEV2ZW4= MTI1 YXJhbmdl KCld IENE YXJpbHk= cmFi IG5vcnRo J10pKQ== aWZpZXM= IGtlcmFz SUdO QkdQ IHRlbGU= IGNoYW5uZWxz Li4vLi4v dG9rZW5z IFBVUlBPU0U= IGVsZWN0aW9u IFdpbmRvdw== U3RvcA== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg RW5n IGdhcg== bGVnZW5k TkU= 5p4= b3JkZWQ= IE1pc3M= IHBlcm1pc3Npb24= cGxpY2l0 IHB1cnBvc2U= IG1vbGVj cnI= UmVwb3J0 IGltbWVkaWF0ZWx5 IHZlbA== d29ya2Vy PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ== Y2hh UGFyYW1ldGVy IHByb2NlZA== IFdoaXRl Y29uc3RhbnQ= IGZhaXI= IHdlc3Q= YXZpZw== IGVuY29kZQ== IHN1ZmZlcg== ZnA= IHBldA== IHNlZWQ= IHRyYWRl IFR3 cGVyY2VudA== IEJybw== IGJleQ== IGxlZ2Fs XV0s IHdvdWxkbg== Q0hBTlQ= Q29y ZGl0aW9uYWw= ZHVtbXk= amU= IEFybXk= Y21z YW5uZWQ= IHByZXNlbnRlZA== YW1iZXI= IGVuam95 IFNlcnZpY2U= dGM= IG1hcHBpbmc= IGVx b25nbw== IG1heWJl IE9T IHdhcnJhbnQ= bGlr cmVhZGVy 5pWw5o2u IVs= IGJleW9uZA== IE5vZGU= IGdlbmVyYWxseQ== ZnVu bG9zZWQ= IHVsdA== IGZsb29y IGRlc3A= IGFzcGVjdA== IHRyYW4= b215 YW5kYQ== IE1hYw== U3RyZWFt Zm9sZA== IEJlbA== Y2lp c3VicGxvdA== 8KE= QlI= IHJvdXRl IHByaW5jaXA= TnQ= IHNjaWVuY2U= LCkp IHBheWxvYWQ= IHdvcmtlcnM= IF8s IG1vZGVybg== IHBhbA== Xyoq IHNwbw== IGNvb2w= IHJlc3BlY3RpdmVseQ== YWlz 8KA= cmV0dXJucw== Ki4= UG9vbA== CgoKICAgICAgIA== IHNpdGVz IG1lZGl1bQ== cG93 IGVuYWJsZQ== VUxF ZHVyYXRpb24= IGR1cmF0aW9u 4paI4paI 8KM= IFJ1bg== aWFuYQ== aWRv dG9yY2g= IERpY3Q= CgkJCgk= YXJpYW4= IGNvbm5lY3RlZA== IFBBUlRJQw== IHNpZ25hdHVyZQ== TUFU IFR5cGVFcnJvcg== IEZpbA== IFJpY2g= ZWZmZWN0 8Kg= IHdlYWs= IGxpc3Rz IGF1ZA== IG1pbmltdW0= IGVkdWNhdGlvbg== Q0hBTlRBQklMSVRZ ISIp Y29tcGxldGU= IGFwcGxpY2FibGU= b3RpYw== IHN1Y2Nlc3NmdWw= IFRlcg== IGxlYWRlcnM= IEV2ZW50 c3RyZnRpbWU= YWN0b3I= cGhpbng= IGFwcGVuZA== bWFwcGluZw== cXVvdGU= cmVzb3VyY2Vz IGhlcnNlbGY= TGljZW5zZQ== Z2k= IHNhdGlzZg== IEJvYXJk RmlndXJl aWZpY2F0ZQ== cGF5bG9hZA== dW5pdHM= IFBBUlRJQ1VMQVI= U3c= IGxheW91dA== YXBlcw== TWF0cml4 UXVl TmV0d29yaw== TEVE IHRyYW5zZmVy REVTQ1JJUFQ= 8KQ= bWF6 d2hhdA== IHRvdWNo YnVz VGFyZ2V0 IHNldFVw TVBM IHRocmVhZGluZw== IGluZGVwZW5kZW50 ICJb IEFpcg== IEhvbWU= IGNhbXBhaWdu 8Jc= IFBldA== IGZpbmFuY2lhbA== IHJvY2s= IHJlY2VudGx5 IGNvbXBsZXRlZA== Y2xvdWQ= UEY= IG5lYXJseQ== IHNhZg== IGdpdmluZw== LyI= REFURQ== IGRlbGF5 IHNlZ21lbnQ= Y2x1ZGVk cmVnYXRl IGdyYWR1 ZXJjaXNl 5Yy6 REQ= R28= ICkp IHNhdmVk IE92ZXI= IGxpbmVhcg== aW5pdGlhbGl6ZXI= IGZybw== IDcw IGNhcGl0YWw= IGF0dGVtcHQ= IGtpbGxlZA== IEZJVE5FU1M= d29vZA== bG95bWVudA== IGVhc2lseQ== Xyk= aWRlbnRz ICgl w7xy IHN0cmFpZ2h0 Y2lz 8K0= IGxp IDQwMA== IGN1cnI= 8Kc= Y2hpbg== IGNyZWF0aW5n IGVmZmVjdGl2ZQ== a2luZA== dW1lZA== IGljZQ== IEl0YWw= IHJlYWRlcg== IE5P IERpdg== IGhlYXZ5 IEplcw== bnVtcw== YnVja2V0 TlQ= IFNvdmlldA== 5pyJ b21pYw== IC8q 5o4= c29ydGVk bWJvbHM= IHN1bW1hcnk= IFBhdGg= IHNpZ25pZmljYW50bHk= dmVyaWZ5 IC8+ 5rM= dXBsb2Fk cmVlaw== UkVBRA== c3lt IHNjaGVtYQ== TXNn IGFzc3VtZQ== aXhlbHM= w61h IG1lYW50 Ol0p SUE= IGZlZGVyYWw= IFRleA== IENvbGxlZ2U= 0YHRgg== U00= 8KU= IGJ1cm4= T1JT IHByaXY= IEh0dHBSZXNwb25zZQ== IHdob20= 8Kk= Y2hp aXBwZWQ= TmFtZXM= dXp6 MjAxMg== cmlidXRpb25z IHRlbnNvcmZsb3c= IGludmFsaWQ= IHNsaWdodA== ZWc= IGNhbGxpbmc= IGV4cGVyaQ== dXY= cmVzcA== IEVuZ2xhbmQ= IHdvb2Q= cmFpc2Vz aWZpY2F0aW9ucw== d2lkZQ== YXdz 8Ko= YXRpY2FsbHk= b3duZXI= Ym94ZXM= IHJlZHVjZWQ= YW1pbg== V2Vi IGV4cG9ydA== IHByb2Nlc3Npbmc= IDIwMDU= bWFya3M= aGVt IEJlbg== T2g= fSI= b2xpYw== eWE= a2VlcA== TU9E V09SRA== IHRocm91Z2hvdXQ= b29t bWV0aA== dGFza3M= cXQ= b21pYWw= IGJlZw== cGhhc2U= IGxpbWl0YXRpb25z 8KI= IGZ1bGx5 IERpcmVjdA== VGVtcGxhdGU= ZHN0 c3ViamVjdA== IGVhcnRo QXY= IG5hbWVzcGFjZQ== IGNhbGN1bGF0ZQ== IGFtYg== IHNpbg== c2Vw IEdlcm1hbnk= QkU= U3k= YWdnZXI= IEpTT04= IHJ1bnM= 5Lu2 IGZpbHRlcnM= 5a2X IGNvbG9ycw== VXNlcnM= a2w= SkVDVA== cHRy Ynl0ZQ== IGNvbW1lbnRz IE1pZ3JhdGlvbg== IEhlbA== cGVyaW1lbnQ= IENvbXBhbnk= Y2VpdmVk IFlvdXI= IGRz IGNvbmNlcm4= PScs c2V5 U2hvdw== Q3Vy cGxpbmc= RGVzY3JpcHRpb24= cGVycw== SEE= IGRlbGl2ZXI= aG90 IENlbnRlcg== MDEx IFRodXM= Y29udGFjdA== IHNtYWxsZXI= TWFyaw== IGNvcw== IE9mZg== cmVudA== c2Vn IFst Y3JldGU= IGVzc2VudA== IGFjY3VyYWN5 IGRldA== IFBldGVy YW5lc2U= IEJsYWNr IHNwcmVhZA== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IGV2YWw= IHZhbGlkYXRl IHNvdXA= IGNvdW50cmllcw== c2x1Zw== c3Bs IHNjb3Jlcw== IHR4 IF8oJw== IG9jY3Vw IGludGVydmFs RW5j Y29uc29sZQ== aW50ZWdlcg== IENoaW5h b3B0aW9uYWw= IHRhc2tz Zm9yZA== IEFyZw== QW1lcmljYW4= d2FsbA== dXNoZWQ= IHNldHQ= IDMwMA== 5YA= 8Kw= IHByb2dyYW1z U1k= UFk= YXBhY2hl Y3VkYQ== ZHg= c2lnbmVk 6KGo TWl4aW4= RGV2aWNl IE1FUkNIQU5UQUJJTElUWQ== RElU d2lraQ== IGxhdGVzdA== c3VtZXI= Pj4+ JyU= c3RydWN0aW9ucw== VHJhaW4= V2VsbA== IFBhcnR5 d2Fz IEluZGV4 IGZlZWxpbmc= XVsi IHRpbWVzdGFtcA== YnVs IERhbg== Zm9vdA== cHlwbG90 Zml4ZWQ= IHJlc2V0 TEM= 8KY= IEdyZWVu MjAxNw== R0Y= eXI= IGJvdw== IE11bHQ= 5bc= aW1z cGVybWlzc2lvbg== IGNoZW0= bW91bnQ= d2I= IGJveQ== TFM= IHRhbGtpbmc= SVg= cnVubmluZw== IENvbmdyZXNz Il06 YXp5 IC0tLS0tLS0tLS0= IHZlcmlmeQ== IHNjZW5l 5LiN MjAxMw== INC9 Ymlhcw== IHJlcHJlc2VudGF0aW9u 8Ks= aXBoZXI= IHJlcG9ydHM= UmVzdWx0cw== IHByb2JhYmlsaXR5 IGZsYXQ= b3JkZXJz ZGljdGlvbg== Y29uZmlndXJl IHRvcGlj IHRpdA== IHN0cmU= Rm9ybWF0 Y3U= IHBpZWNlcw== VmVjdG9y IHVzYWdl ZW50cmllcw== KSwo ZXhwYW5k IGZw cmVkdWNl VFA= c29jaw== IENhbGw= UkVRVQ== aWxpZXM= IGRlc3Ryb3k= R0E= IHBsYWNlZA== IGRlbnNpdHk= IGVudHJpZXM= IGFwcGVhcnM= JyIs aXJtZWQ= aWN0aW9u Y2x1c2lvbg== IHZhbg== MTEx IHNwZW50 KCkpOg== ICAgICAgICAgICAgICAgICAg YmFu IGFwcGVhcmVk Z21haWw= Ym9vdA== ZGVsYXk= IGluZHVzdHJ5 d2M= IHN1ZmY= IEltcG9ydEVycm9y c3RydWN0b3I= RHJhdw== w7E= IHRyaXA= c2V0dGVy ZHA= IGVpZ2h0 IE1ldA== IFZvbA== IGNvbXBsaQ== IHBhcnRuZXI= 0LXRgg== aWNyb3NvZnQ= MjAwMA== acOzbg== Kiw= UEFS IC0tLS0tLS0tLS0tLS0tLS0= Oic= dmFyZQ== IE5vcg== c2FnZQ== Z3JlZXM= IG9idmlvdXM= c2VydmF0aW9ucw== 0L7Qsg== PiI= TUVUSA== ZW51bQ== IHJhY2U= R2VvbWV0cnk= Q2VsbA== IHBhaW50 IGNhdXNlZA== IGNhbmRpZGF0ZQ== IEFuZw== PScnLA== IGNsaW5pY2Fs IGludGVybmF0aW9uYWw= c3I= YXJlc3Q= IG1hbnVmYWN0 YmFzaWM= IGZvcmVpZ24= cHRvbg== IERldA== IGFjcXU= dG9waWM= dW50dQ== IFByb2plY3Q= IG5vdmVs eXQ= 56w= IHBw IHBhdHRlcm5z IGdyYW5k ZmFtaWx5 IHBhaWQ= IG1pdA== Q29uZmlndXJhdGlvbg== IG5pY2U= IGJsb2Nrcw== T1BU SUNBZ0lDQWc= MTEw aXZv dWZmaXg= IHN0aW0= IDMz IHRoaWNr aXN0YW50 bmVpZ2hi IGRlcml2 Y3VycmVuY3k= c2V0ZGVmYXVsdA== YXNzZXJ0SXM= IHRlbmQ= IHBvc2l0aW9ucw== bGlua3M= Vm9s YW5uZXI= IHN0ZG91dA== IFJlcXVlc3Q= eWxhYmVs IGR1bXA= IGVkZ2Vz Vmlz MjUw bGF0aXR1ZGU= IG1hbGU= IENI IEluc3Q= XF8= YW1pbmc= IFJveQ== dW5pdGllcw== IGNvcHlyaWdodA== IE5vdEltcGxlbWVudGVk LyM= bmlnaHQ= YXNzZXJ0RmFsc2U= YWNjdXI= IG93bmVy bWlncmF0aW9ucw== dWJ1bnR1 eGk= RGF0YUZyYW1l IGZpYg== YW5naW5n MTAyNA== KScp RVA= CiAKIA== ZXhwcg== c2Vjb25kcw== Oi4= IEdvdmVybg== UmlnaHQ= Y2hlbg== IGluZw== dWNl IHZvdA== IEFwYWNoZQ== bng= dGVybWlu IE9m IHRlYW1z d2Fsaw== dXRlZA== IGF0dHJz VGVy IHR1bQ== IHNodXQ= IHRyaWdnZXI= IG9waW4= IDM2 IFJlYWQ= IGltcGxlbWVudGF0aW9u bG9va3Vw IElzcmFlbA== ZGlyZWN0aW9u bWF0ZXJpYWw= d3JhcA== IFdhdGVy IGlkZW50aWZpZWQ= KFsi Z2xvYg== dmVudG9yeQ== Q09ERQ== d2VzdA== bXBsaW5n T3RoZXI= IHt9Jy4= b3JpZ2lu b3JyeQ== IHBsYW50 UkVT 4pWQ4pWQ SU5URVI= IHRhcmdldHM= cmlh YXZlcg== IE1vc3Q= IEFsdGhvdWdo W10= IDEyOA== d2Fy IGV4YW1wbGVz IHVuYQ== T3A= IGZpcm0= dGVlbg== IEVhY2g= IHNjZW4= IHNpZ25lZA== 6rA= IHRvb2xz IEV1cm9wZWFu dGlsZQ== IHB5dGVzdA== ZWxjb21l YW50YWdl IHJlYXNvbnM= UXRHdWk= IHRva2Vucw== IGpvdXJuYWw= IGxpZg== b2xpZA== IFdBUlJBTlRZ bWFnZXM= ICAgICAgICAgICAgICAgICAgICAg eXNxbA== RW1haWw= IGFubm91bmNlZA== YmV0 am9pbnQ= IFdIRVJF IHByZXA= IHRlcm1pbg== ZW5kc3dpdGg= IGRyYQ== IGpvaW50 IGNyZWRpdA== IGdlbmVyYXRvcg== IGxhcmdlc3Q= ICAgICAgICAgICAgICAgICA= IHBob3Rv IHdhaXRpbmc= cGx1cw== TGVmdA== aXphdGlvbnM= Y2x1ZGluZw== cXVlZQ== IGNvbnN0cmFpbnQ= RU5H NjY2Ng== Ymlucw== YXNpb24= cmltaW4= Q2hhbmdl U3RydWN0 IHRyZWF0ZWQ= IGNpdmls MjAxMA== aGVzaXM= IEdy IEdlbmVyYXRlZA== IHNlcmlhbGl6ZWQ= bm90aGVy ZWxlbWVudHM= IGNvbnZlcnM= IERC dWRnZXQ= 6L0= IExhYmVs dWRv IGJlY29tZXM= ICcj dXBkYXRlZA== KFtb IGJvdHRsZQ== Y29tbWFuZHM= IGRpbWVuc2lvbg== IG9wdHM= IGJpbGw= cG9seQ== IHp1 eGxhYmVs c2VjdA== bGVx IHByb3Bvc2Vk IGZpbmRpbmc= IEZyYW5jZQ== IHJlbWFpbnM= IHRlbGV2aXNpb24= IGNvbnRyYXN0 IHJlc3RvcmU= IHNldmVu Kipf IHJhZGlv 54k= IG5k VHlwZUVycm9y IGRlY29y IFJpdmVy Z29pbmc= bG9uZ2l0dWRl IHJhZGk= IGxhd3M= cmVhZGxpbmU= IHNlcnZl RGVsZXRl IG1vZHVsZXM= eHh4eA== ICIj VkVSU0lPTg== MDAy IFRhYmxl Y2FudmFz IEZpbmQ= IEtleUVycm9y IGZldGNo IG1t IEFsc28= IEtJTkQ= IE5ld3M= dGVtcw== IExlZQ== aGVscGVy IEZyYW5r 5Zyo aWFudA== c3dpdGNo YXNjaWk= bGlzdHM= UklHSFQ= IGNhbWVyYQ== Jyld IDIwMDQ= cHJvY2Vzc2luZw== IGluc3RhbGxlZA== bGF0ZXN0 IGJveGVz IERhdGU= MjIyMg== cGFja2FnZXM= ZXNl IHNwb3Q= IDI1Ng== dWluZw== IFJlc3BvbnNl SWNvbg== UGxheWVy IG9jY3Vy IHN1ZGRlbg== IGRhdWdodGVy IGJhbGFuY2U= IGV4dGVybmFs IHt9LA== IGFwcHJveGlt IFVTQQ== Y2xvY2s= SWRz U2luZ2xl cGE= IGluc3RhbmNlcw== IGNvbGQ= aGV0 QmF0Y2g= IGRhaWx5 Y2hlcg== IGFkZGluZw== aW5hbGx5 CgkJCQkJCQk= w7o= IGlkZW50aXR5 IFNr IHN0b29k YWR2 LS0tLS0t IHNlcnY= c3Rvbg== IG1pc3Q= Y29udHJvbGxlcg== IHJlY29yZGVk IGluZGljZXM= c3FsaXRl bXVs ZWxsZQ== TGli IGNhdGNo b3JhbA== ICR7XA== IHNlcmlhbGl6ZQ== dmlzaW9u 0L8= IHZvbg== UmVmZXJlbmNl RXhlYw== IGRlc2lyZWQ= IG9yZ2FuaXphdGlvbg== NDU2 IGhhcHB5 IHJhZGl1cw== J3s= aXRpbmc= IGRldGFpbA== ZXJpZXM= IGJyaWVm YXBwcw== IGVhc3Q= IG1pbnV0ZQ== IG1ldGFs IGRhbmdlcg== IHN0cmF0ZWd5 CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== ZW5h IEJF ZnJhbWVz 56c= IG1pbGw= am8= IHNx U2V0dGluZ3M= VGVzdHM= RmlsZXM= TmV4dA== IHByb2Nlc3Nlcw== IEphY2s= IG1lZGlj IFJ1c3NpYQ== IHJlcGVhdGVk b3NzaWJsZQ== VEVYVA== cGFnZXM= b3JpYw== SVRJ dWNhcw== IHJlZGlzdA== IHJlbGln QW5hbA== QUk= dGhpYQ== YXRjaGVz cHJvZ3Jlc3M= YW5zd2Vy IDQ4 IGZpbGxlZA== IGVzdGFibGlzaA== IE9wdGlvbmFs KT8= IHdhbnRz Q01H Q29tcG9uZW50 IG1vdXRo IHNlYQ== cHJvYw== TElTVA== TkM= IGNvbXBhcmU= QXJndW1lbnQ= RUI= MDAz IExvcmQ= IE91cg== IGRpZmZlcmVuY2Vz IGNvbXBsaWFuY2U= Tm90ZQ== IGNoYWly cHBpbmc= IG1vbml0b3I= 5oiQ SU5HUw== Pics ZWFo cmljaA== IGNoYXJ0 IHNoaWZ0 4pc= QVJH Z29vZA== 4YM= IGRzdA== IGluZGl2aWR1YWxz a2l0 6aE= IGluaGVy cHVi IGZpZg== IE1hcnQ= Z290 IGRlc2s= IGZvcm1lZA== IGNvbnN0cnVjdGlvbg== c2Nhbg== IGNvbGxlZ2U= QVJZ dmVudWU= aXF1ZXM= V29yZA== IG1peA== IHRlYXI= YWx0eQ== IE9o REVTQ1JJUFRPUg== 5pe2 IENhcA== IHNwaXJpdA== b3VwbGluZw== cGFyaw== IGV4cGFuZA== RW1w IFNRTA== bWVtYmVycw== cmllcg== JycnJw== UGFyYW1ldGVycw== NTEy aGVyZQ== cGQ= YnJvd3Nlcg== IEhlbg== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IGhpZ2hseQ== IGN1bHR1cmU= RG9u cGFkZGluZw== aGFyZA== bGVhcm5pbmc= IGZvbA== IGV4dHJlbWU= bG9jYWxob3N0 IG5laWdoYm9y ZGV0 ZWxsaWc= IE1haW4= IHVuZQ== cmFja2Vk IEJvb2s= Vkk= cmVw J10pLA== IGluc3RpdA== IHJlbGV2YW50 IERvYw== SW5zdA== IHNoZWV0 cmlhbg== Z2V0TG9nZ2Vy c3Rhcg== IHBpY3R1cmU= IGluaGli b3No PSIj cmVwZQ== IGh1cw== Y2FydA== Z29u IHByZWQ= Y2xpcA== IHRyb3Vi IE1lcg== IGNyeQ== aWVuY3k= cGFu IHBhaXJz YmVs IA0= IExvdQ== aGVhbHRo KCgn IFNhbQ== IHdlYXA= IHN1YnN0YW50 RkxBR1M= ZGVt UElP OiIp U0lN bHU= IG92ZXJhbGw= YXR0YWNo U2VsZWN0aW9u IG1vZGlmaWVk aG4= b3JwaA== IHN0b3BwZWQ= IHNob3A= dmFyZXBzaWxvbg== IG9yaWVudA== IFR3bw== b255bQ== QVJE dmlzaWJsZQ== IEdhbWU= c21hbGw= IGZsZQ== IHNob3dpbmc= cmF0aW5n IGVjb25vbWlj 5a6a KCItLQ== aGVybg== UHJvZHU= RGVsdGE= ICJ7 IGNvcm5lcg== eWVz VHlwZVN1Yg== IGVkaXRvcg== IG9sZGVy IGRlc3RpbmF0aW9u YmFja2VuZHM= MjAxNA== IG51bXM= YmxlbQ== VmFsdWVFcnJvcg== ZWVz IGh5cGVy c2Vzc2lvbnM= Q09ORklH aHJlZg== b2RpZXM= IG9wZW5pbmc= IGVudGVyZWQ= IENvbm5lY3Q= TElDRU5TRQ== xLE= IHVtYQ== dGVzdGluZw== TG9hZGVy cmVtb3Rl YXNoZWQ= ICQo IGludGVyZXN0aW5n VGVW IGRhbWFnZQ== UGx1Z2lu ZXJjaWFs YWJvdXQ= cmVzaXpl IG1hdGVyaWFscw== bmk= 6Zk= IHdhcm0= IE9iamVjdA== ZGVjbA== cGx1Z2lucw== ZXhjZXB0aW9ucw== cGFydG5lcg== T25seQ== IFdpbA== IGp1bXA= IGNpcmN1bQ== ZmFsbA== bWV0cmljcw== IFNhbA== IGFkag== TXVsdGk= UGFuZWw= cG9zaXRpb25z VmFsdWVz cml2ZQ== fSc= 5rU= aXp6 dGlw IDM3 dW5pZm9ybQ== IGFueA== dGhlcm4= IGFwcGFyZW50 IEVuZA== IGZpbG1z ODAw IHN1Yw== QlQ= RmFpbGVk UmFk c2lk dHJs IHNjcmU= ZXZhbHU= IGZyZXNo IGdvdmVybmluZw== U1RBVEU= IHBt RmVhdHVyZQ== 5Lw= IERP ZGVsZXRpb24= IHByb3h5 IHN1bW1lcg== IHRpY2s= ZGVmaW5lZA== IDk5 IGNvbmZsaWN0 Y2FsYw== d3Q= IGNsYWltcw== IG5vdGVk Y29udGVudHM= Q2hhbm5lbA== IGdvb2dsZQ== IG1hcnJpZWQ= IHNjaXB5 Q29uc3Q= IFVwZGF0ZQ== MTMw IGJlcw== IHN0cmVzcw== IHBpY2tlZA== IFdpbmRvd3M= VGFi IG1hcmdpbg== IGRyeQ== b2NrZXQ= T2Zmc2V0 IHRleA== IFBsZWFzZQ== IE5VTEw= SU5TVA== R0M= IHllcw== IDY1 R2FtZQ== ZXF1 cmVwbHk= IHN0cmVldA== IGFzc2Vzcw== IGpvaW5lZA== WW91cg== IHdpc2g= IEdyZWF0 V1I= IHdh aXJyb3I= IMKn IGRpdmlkZWQ= cmV2aXNpb24= CgogICAg IFByb2R1Y3Q= IGNsZWFybHk= R2Vu Zm9sbG93 Tm9ybWFs b3NlZA== IERheQ== IGJyb3RoZXI= U2F2ZQ== Q0FT IGZvcmNlcw== IGdlbmVyYXRpb24= IHN1cnByaQ== In0pLA== IFN1bQ== cGVybQ== MzMz IG51bGxhYmxl IGtt ZG4= IHdhcnJhbnR5 U1I= WFA= 6Kc= IExpbg== IENoaW5lc2U= IEplc3Vz aWNpcA== IHN0cmVuZ3Ro IGFjdGl2aXRpZXM= MTgw cnVwdA== fXtc KF8oIg== IG5ld3Nw IEF0dHJpYnV0ZQ== IG1pbGVz IExJ YXVyYW50 IHNhbGU= IDE5OTk= AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== ZXhl IEluZGlh QWNjb3VudA== TWF0Y2g= IG5hdGlvbg== 5Ye6 UHJpbnQ= IGNyZWF0aW9u IGZsYXNo cXVhZA== IGFyY2hpdGVjdA== 64s= IGFjaGlldmU= w6I= ZHVj IGFwcG9pbnQ= Y29uZmlndXJhdGlvbg== IGFjaWQ= IG1hbA== IExpY2Vuc2Vk IFZhbGlk IHBhY2thZ2Vz IHZpbGxhZ2U= YXRpbg== IGRlZmluaXQ= UHJvdg== TGE= Kioq IExhdw== SUxM IGNt aW5kZW50 IHZlaGljbGU= ZGVlcA== cmVnZXg= ZGltcw== bWFzcw== IGVsZW0= b21lZ2E= IGNhcnJpZWQ= TEQ= IGRvdA== IGVuY291cmE= QUg= IFJ1c3NpYW4= aWF0ZQ== IGJvbg== IGJyaWdodA== IHJlcG8= IEhpbGw= IHZpcnR1YWw= IHNraW4= 5q0= IGFwcGxpY2F0aW9ucw== VFM= cHNp IGluZmx1ZW5jZQ== YXJjaGl2ZQ== IExhYg== IEV2ZXJ5 IGtleXdvcmQ= Y3JpcHRpb24= IE5vdEltcGxlbWVudGVkRXJyb3I= Ym9sZA== aXBtZW50 IFVr Il1b c2VtYmx5 VXRpbA== SFRNTA== IGdhdGU= IGRpc2N1c3M= TUFQ RmluZA== Ymlk IGFsdGVy 5YiG Ym9yZGVy c3Rvcm0= YWR5 aWNpYWw= IGRvY3VtZW50cw== IGN5Y2xl w6lz YXRhcg== cG9zYWw= ZGltZW5zaW9u 5bk= bW92aWU= cHl0ZXN0 YXhlcw== IHJlcA== dW1wdGlvbg== Y3Vycg== JyI= KCcnLA== CgkgICA= IHN1YnNlcXU= IGh5ZHJv cGY= IG1n IGlzdA== IG91dGNvbWU= IG9jY3VycmVk c3VibmV0 YXVzc2lhbg== IEJyYQ== IHJvYm90 Y29sbA== Pj0= b3JhdGlvbg== IGxlYXZpbmc= IHByaXNvbg== KCcs TFI= YnJv IEluaXRpYWw= IGJ6cg== IHJlcHI= IG5ldXQ= c3B5 IHVuZGVyc3RhbmRpbmc= aW1wbA== IGhvc3BpdGFs IGlzb2w= IE1vZA== DQogICAgICAgICAgICAgICAgICAgICAgICAgICA= U2VxdWVuY2U= V2h5 W1w= Y29uZGl0aW9u IFdlc3Rlcm4= dXRpbmc= b3J0aGVybg== dmVydGljYWw= IG9kZA== IC0tLS0tLS0= TUk= dGFnZQ== YWxp ZXJlc3Q= IHF1aWV0 IHBh bGludA== IGRvcw== dGVtcGxhdGVz IGJsb2c= KSIp IG5vdGVz IE1pY2hhZWw= 44KS IFBoeXM= ZWxl YXNrZXQ= IEF1c3RyYWxpYQ== Q2FjaGU= 6aI= IENoYW1waW9ucw== RXhhbXBsZQ== dGlsZGU= IHJpY2g= IHBsYW5z IDIwMDE= IGxhdW5jaA== IGNlcnRhaW5seQ== KT0= IGh1Z2U= 0LXRgA== RFQ= dGltZXI= YWxjaGVteQ== IFJhZA== cmVxdWVuY3k= IGFoZWFk dWx0cw== UkVDVA== IHV1aWQ= YmFja2VuZA== 5bE= IHN0YXRlZA== dmVsb3BtZW50 IHBrZw== c3F1YXJl RW52 bmFtZWQ= REVG T08= aXJnaW4= IFJlbA== IDM0 IGludGVydmlldw== QkI= 4qw= cmVxdWlyZQ== YWxpbg== IG1vdXNl Y29tcGF0 Q0FM IHJpbmc= ZWxsaW5n IHByb2plY3Rz d2Fybg== U2s= IExvbmc= ZmlyZQ== SU1JVA== IG9wdGltaXplcg== VXNl IGNhcnQ= IHdoYXRldmVy dXBsaWNhdGU= IHByb2Zlc3Npb25hbA== IG1ldHJpYw== 0LDQvQ== KCcu IFJlc2Vy cmVlZG9t Q2xvc2U= c2FtZQ== dXJscGF0dGVybnM= UmVjbw== IFN0YXJ0 cG9zdXJl SGVpZ2h0 IGlkZWFz dmllcw== IF0p IHJhcmU= W14= cmFjdGlvbg== IHJlc3VsdGluZw== UmVjb3Jk IGNvcnBvcg== SGVyZQ== IFNlYw== IHVubGVzcw== IGJhY2tlbmQ= cmFuZQ== IGhvbGRpbmc= IGFncmVlbWVudA== cmljaw== aXN0ZW50 MTky Ly8vLy8vLy8= VklE ZXNzb3I= dWVzdGlvbg== IEFjY29yZGluZw== Uk5B IGNwdQ== dXRz IHJhdGVz IEhhbmQ= IGNvbXBhdA== bmV3cw== Y29ubmVjdGVk IHpvbmU= RGF0YXNldA== c3Ns IEJlY2F1c2U= R2FtbWE= IHJlamVjdA== aWdtYQ== IFtdKQ== b3Nj ZmVk IGVuYWJsZWQ= LCg= MDA1 IHJhbmQ= IEplZmY= IG9yZGVyZWQ= IGRpZ2l0YWw= IGxhYm9y IEFsZXg= YXppbmU= fC0= IHB1bg== YXJ0aWNsZQ== c2V0dGluZw== ZW5jaW5n IGJpcnRocw== Y29tcG9uZW50cw== INC6 VkFMSUQ= RElT IG9mZmljZXI= IGNvbWJpbmVk 5Yk= IHJhdA== YXJndW1lbnRz IGZlYXQ= RlI= ZGlhbG9n UEFTUw== IHdhdmU= IENvdW5jaWw= Y2xp cGhw bGV0dGVy TFU= Y21w IFRvcA== aGFs IFpl 54I= IGNvbWJpbmF0aW9u IGNpdGl6 IGFubm90 IG92ZXJyaWRl IHJlcGx5 c2hhcmVk LCks IGRpc3RpbmN0 IFNlY29uZA== YWNjdXJhY3k= IHJlZGlzdHJpYnV0ZQ== aGFy 5ZCN Y29udHJvbHM= Q3JlYXRlZA== amk= IFN0dWQ= MjAwNw== IGF1dG9tYXRpY2FsbHk= VHlwZXM= IGNvbnNvbGU= IG1haWw= IDIwMDM= c2VydmljZXM= Zm9s bGV0cw== IHRocm93 IHNodXRpbA== dGFy IFRleGFz c2VsaW5l PVtdLA== TE9DSw== 0Lc= ZGVjb3I= IHNwbA== IGJ1ZmY= IGF1dGhvcnM= QWdlbnQ= IHdyYQ== IHRvdA== IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj bGFyZ2U= IERp c2NlbmU= Y29vcmRz IHJlcHJlc2VudGluZw== c2FsZQ== Klw= SXRlbXM= c3VmZml4 YXNw c2hvdWxk QXV0aG9y SVo= IHVwbG9hZA== YXV4 IGtub3dz Iic= Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= Zm10 U2FtcGxl 4oiS IDo9 TXVvbg== CiAgICAgICAgICAgIAogICAgICAg IHNwZWVjaA== IGhvbQ== b2xh TG9jYWw= IExPRw== TlA= cm9ib3Q= IFRoZXJlZm9yZQ== IG5lcg== dXR5 IGF0dGFjaA== dHJhbnNhY3Rpb24= IGluc3RhbnQ= Q0FERQ== RUE= VlA= IGZvcmNlZA== IG11cmRlcg== QkE= IEROQQ== IFVubGVzcw== ZmluZGFsbA== IGZhbWlsaWVz dm9jYWI= aW1h YWNlYm9vaw== IHRoZXJhcHk= INE= IGJyb3du IFJvY2s= IFVO IDE5OTg= Y2xlcw== IHJlcGxhY2VtZW50 w6ll IGNvbmZpcm0= IG1ham9yaXR5 a2k= c3VicHJvY2Vzcw== am9icw== aXZhbGVudA== Ym9y aWFuY2U= YWRkZWQ= c2NhcGU= eXk= ICku IGNvbmNlcg== IE5h IEJBUw== cGxpZXM= Pi4= UmF0ZQ== YXJw IHdhdA== IEN1cA== IEpl ICQk YXNzZXJ0SW4= IHJlZ2lvbnM= YmxvY2tz IHJlY29u UFA= IEFmZg== QVRB IGhleA== IHF1aQ== IFJlc2VhcmNo YmFzZW5hbWU= IEludGVybmV0 XX0= aGlkZQ== IHJlY2lw bWlzc2luZw== IHN3ZQ== SVZF YmM= IAogICAgICAgICAgICAgICA= aWVyYXJjaA== IGNvdW50cw== IG1hcmtlcg== QW55 c2Y= QURFUg== IGxlZ2lz ZnJvbnQ= RHJvcA== b2xm IGNyaXRpY2Fs aGV0aGVy IFRob21hcw== dHJhbnNwb3Nl U2NyZWVu IEFT IGFycmVzdA== MjAxOA== ZnJpZW5k IHBhcnNlZA== IDEwMjQ= Q29sbGVjdGlvbg== IGdlbmVz DQoNCiAgICAgICAgICAg IHN1ZmZpY2llbnQ= Z251 ZW5n VlY= 57E= IGF3YXJl IE1lc3NhZ2U= YWNpb24= IGV4cGxpY2l0 IEFzc29jaWF0aW9u IT0= IGxpZQ== Mzg2 c3BlY2lmaWM= IGNvdmVyZWQ= IHBhbmVs IG1pY2U= KSk7 QkFDSw== IER1cmluZw== IHN1cHBvcnRz IHBoZW4= IGdvZA== IDc1 IENvbG9y IENvbW1pc3Npb24= IGZlbWFsZQ== IEl0ZW0= IEVzdA== aWxsaW5n YW5jZXI= Q1Y= IGZlbGw= IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== IGp1ZGdtZW50 QU1F RG9jdW1lbnQ= aHU= cmVhc29u ZGlycw== UHJveHk= 0LDRgg== QWxpZ24= IHN0YW5kaW5n IGNvb3JkaW5hdGVz ICIiKQ== b3NpdHk= YXZ5 IHBhcnRpZXM= IHZlcnNpb25z IGNodXJjaA== eWxlcw== IFNpZ24= IFdlbGw= Q2hhbmdlZA== Yml0cw== IGRvbGw= cmVxdWVzdHM= IHNsaWdodGx5 YWdyYXBo IHJlZmxlY3Q= IEZ1bmN0aW9u IGFkZHI= IGJyZWF0aA== cmFtcw== aWZpY2FsbHk= YWN0aXZpdHk= IE91dHB1dA== I1w= KCU= c2NyaXB0cw== eWU= IENhbXA= Y29tYmlu IGd1eQ== cnVsZXM= IGdhdGhlcg== IGFyZW4= IEJhY2s= KCI8 IEhhbQ== YWNsZQ== 5YiX IE5ldHdvcms= UVA= IG9yZw== IGFnZw== RlRXQVJF SW50ZXJmYWNl Y3Jvc3M= IHR3ZW50eQ== U3RvcmU= IGV4dGVuZGVk IGNlbGU= Q0FTQ0FERQ== d2F0ZXI= IGNhcGFjaXR5 IEhvcnNl cGhlbg== J11d Z2lm IFNvbHV0aW9u YXBwZQ== IGxlYWRlcg== cmF0 IGNyb3c= IHdhcm5pbmc= ZWxpc3Q= 4oCy c3RpdHV0aW9u U2NvcmU= cGxl MjAwOQ== IGh1c2JhbmQ= dWx0dXJl YW50cnk= IGZuYW1l dW1pbg== IHNlbGw= Z20= aW1zaG93 IEluc3RpdHV0ZQ== IEhlYWx0aA== U20= c2Fs IFNvY2lldHk= IEdlbg== cGVjdGl2ZQ== IExvYWQ= IENoZQ== c2J1cmc= IGRlZmVuZGFudA== IEF1dGhvcg== IHN1cHBvc2Vk YW5jaW5n emVk IENsaWVudA== YW5kcm9pZA== IGxvYWRlZA== UGVvcGxl ZXhwcmVzc2lvbg== IDU1 IHJlc3BvbnNpYmxl dGlnaHQ= IEZpbg== IE9wZXI= IHRyYW5zYWN0aW9u DQogICAgICAgIA0KICAgICAgIA== cm9waA== IGVuaA== Q29tcGxl IG1vdG9y a2VyYXM= IHB1cnM= IFdoeQ== IENhbmFkYQ== IG1lbnRpb25lZA== IHJlc2VydmVk b3N0b24= IHBhcnRpYWw= IGV2ZW50dWFsbHk= Y29ycG9y cHJvamVjdHM= aG9yaXpvbnRhbA== QWNjZXNz UXVldWU= bWlz IEJpZw== T3JpZw== WWVhcg== bWFya2Vy IHdpbmU= dXBz IGRvdWJ0 IHBp IGJpdHM= IHN1cHBseQ== U3RhY2s= bm90ZXM= Z3JpZExheW91dA== YXRhbG9n TFk= IGVuZW15 IHN1Y2Nlc3NmdWxseQ== ZWxlZA== IHJpZA== Lzw= YWtlbg== IGJyb2tlbg== 544= b2Nv IHNwZWNpZnk= IERlbW9jcg== cGlw IDUxMg== YnVpbHQ= Y29uc3RyYWludA== Q29udHJvbGxlcg== RW5hYmxlZA== aG93dG8= bGlmZWxlc3M= aWFtcw== 6Z0= ZXRpYw== YXZlbA== cHJvZ3JhbQ== IE1hcnk= VkE= cmdi dG9r IHN0YXJ0cw== IGdhaW4= aGVsbG8= IGNyaXRlcg== U2Vx IGNvbXBhcmlzb24= ZGlhZw== UmFuZG9t IGNoYXQ= IDQ5 IGNvbW8= INC4 Um9vdA== 5pQ= IGNvZ24= IHdpdA== PT0i cGxpZXI= c2VudGVuY2U= IGV4cGVyaW1lbnRz c3RvbmU= cmV0Y2g= IGV2ZW5pbmc= dW50cmFja2Vk IGVsZQ== IEVt U0VSVA== IGxlYXJuZWQ= Sm9i IEZyZQ== IEplcg== ZmlsZXBhdGg= QWg= 6KY= IHZvdGU= Y29kZXM= QURE IGV4cHJlc3NlZA== IG1lYXN1cmVk YW5p IFNjaWVuY2U= dG9kYXk= 8K4= IG1vc3RseQ== IGd1aWRl IScp ICR7 QUJBU0U= YWltZWQ= Z2Y= IF4= IHJlc29sdXRpb24= IGxlYXZlcw== ZGVzdHJveQ== a28= IDE1MA== Q09NTQ== QnVpbGRlcg== IGNob3Nlbg== SW1wb3J0 dXRpbmU= IEFyY2g= Tm90Rm91bmQ= IENvbW1hbmQ= RGphbmdv aXR6 IFsoJw== IHByb3Blcmx5 RElUSU9OUw== KCIiIg== Q3M= aGl0 IGJh dGFyZ2V0cw== IG9mZmVyZWQ= IDIwMDI= IG7Do28= VHI= VUI= IHN5bg== ZW5kb3I= Zmx1c2g= IHN5bXB0 IG9s MjAyMA== dW1ibg== LS0tLS0tLS0tLS0tLS0= U2NhbGU= IE1vcg== cXVpdA== UHJvdG9jb2w= b25lZA== c3No IGNsaWVudHM= IEF2 ZW1vbg== XSxbQA== IGF1 IHRoZXRh IGRpcmU= IHJlcHJlc2VudHM= KS8o T3BlcmF0aW9u KCkuX18= IGRlbWFuZA== IGltcGxlbWVudGVk a2c= IGZhdA== cml6 dXNldW0= IGlkZW50aWZ5 cGF5bWVudA== QXg= cmFuZ2xl TG9hZA== IHZv DQogIA== IFZBTA== eWx2YW4= SUNBVElPTg== IGFuaW1hbHM= U2NoZW1h IGdyb3dpbmc= IHNhZmV0eQ== IGZyZXE= VW5pdA== 5a2Y YWtlZA== IFByb3Y= IHRlc3RlZA== c2xpY2U= 4paS IENPTkRJVElPTlM= bmV0aWM= IGJlaGF2aQ== IFJlbW92ZQ== IHJlcGxhY2Vk U3BhY2U= IHNlcXVlbmNlcw== cm9rZQ== c3VyZmFjZQ== IHNvY2lldHk= NjY3 IHN1Z2dlc3RlZA== Rmlu IFRvbQ== IHZpc2libGU= IHNhbGVz IFJvbWFu IGV2YWx1YXRl 5LiA5Liq IFBlb3BsZQ== IGRlc3BpdGU= c3VibWl0 IERpdmlzaW9u IEJBU0lT In0p RnVuYw== IE1hbA== UGFyYW1z TUFJTA== IGNsb2Nr IEFjdGlvbg== ICAgICAgICAgICAgICAgICAgICAgICAg IEp1ZA== IDUx DQoNCiA= MjAwOA== PVsi cGhvdG8= IENhbGN1bGF0ZQ== QXR0cg== b25h bGVuZQ== IHRyaWc= V2luZG93cw== IGF0b20= VEY= UmF3 IG1hbmFnZWQ= cmVxdWlyZXM= fV97XA== IGlkZW50aWZpZXI= 44KL IHJlbWFpbmVk Um9i w7U= IElP cmVkaXJlY3Q= LS0tLS0tLS0tLS0tLQ== dW5kZWQ= fX1c VU5E ZGlm IGVhdA== cHJlZg== IHNwaW4= IFN1cGVy IGNhdWdodA== IHR5cGluZw== IFNtaXRo 57G7 eHM= IChf dWxhdG9y CgoKCgo= IGF1ZGlv IHBheW1lbnQ= U3RhdA== ZGV2aWNlcw== UmVnaXN0ZXI= MTAwMDA= VUVT YXVkaW8= IHRoYW5rcw== TWFpbldpbmRvdw== IHByZWRpY3Rpb24= IHRyZWVz b3JpZW50 IGFybXM= INC+ IHN0cnVjdHVyZXM= IM68 IHRhaWw= IGFuaW1hbA== c3R1ZGVudA== IDQ0 dHlzYnVyZw== fScp ZW50aA== IFVL dmlydA== aGV0aWM= IEZ1cnRoZXI= Y2FuY2Vs IGhlbHBlZA== IGNhbGN1bGF0ZWQ= 564= IFJveWFs bHltcA== IFNlY3JldA== ZW5hdGU= Jyko b3NpdGU= IGRlZmF1bHRz RElSUw== V2hpbGU= IDos IHRyYW5zbA== IHR5cGljYWxseQ== UmVtb3Zl IHNlZWluZw== aWRlbnRpZmllcg== IHR1bg== IG1pbm9y IFRlY2hu ZGlnaXRz cXVlZXpl LiU= YW5pbQ== IGNvc3Rz ZWxk Q2hhcHRlcg== Y2VudHVyeQ== Qm9vaw== IGluZGljYXRl Q3VzdG9t aWFibGU= bG9wZQ== MjAxOQ== IHByZXBhcmVk IiU= UGxheQ== IEp1bA== c2lnbmF0dXJl Lls= b2Rv IGNhcnJ5 eXA= IHNob290 IHRyYW5zaXRpb24= cmVhdGVzdA== Kn4= b2x5 aG9zdG5hbWU= 6LQ= IEJldA== IEVhcnRo UHJvZ3JhbQ== QXJlYQ== SW52 fScs IGTDqQ== T1JZ c2VjdXQ= 5Zue IGRldGVjdGVk Kyg= DQogICAgICAgICAgICA= aGVw IE9O QVRFRA== IGZpbmlzaA== c2l2ZQ== IEJhbms= cHl0aGlh IG9yZGVycw== IGxpdmVk c3RhbmNlcw== IGVjb25vbXk= WE1M IHdvcmtlcg== YGAu 5Yiw QmxhY2s= Li4uIik= IyMjIyMj IHN0cnVn Zmk= IGluY29tZQ== IHByb3ZpZGluZw== IGNvbnN0YW50cw== VHdv IHJld2FyZA== aWxhdGlvbg== IEdhbA== IGV4ZWN1dGlvbg== bG4= ZW5kcG9pbnQ= IGludGVuZGVk cGxhY2Vob2xkZXI= Q2xpY2s= Q0I= Jyk7 bGlzdGRpcg== UGVyc29u ZGFzaA== IGtpbmc= IDM4 IHJlc3BvbmQ= IG3DoWo= IFNFQw== IFNPRlRXQVJF IHB0 aWNpYW4= YW1lZA== IFRyYWlu aW50ZXJuYWw= INC0 Qmlu IFN1cg== IGV4cGxhaW4= IGhv IGNoaWVm aW1i IENvb2s= IEpvc2U= dmFycGhp IHB1bGxlZA== TElORQ== ZWR1 aWxvYw== dGFpbGVk IGZvcnQ= cmVhZGxpbmVz IG9wcG9ydHVuaXR5 RkU= IGRvbWlu IEJheQ== bGlicmFyeQ== aWxsZXI= Y2xhaW0= bGVnYWw= 57Q= aWRhZA== IGVzY2FwZQ== IENoYXJsZXM= V0U= ZGluZ3M= IHN0b3JpZXM= IHBlYWNl Jy8= XCI6 dGI= b3B0aW1pemVy IHJldmVhbGVk IGJlYXQ= CQkJ IGRlZmU= bnN5bHZhbg== YW5ndWFnZXM= RGlyZWN0b3J5 V2FybmluZw== IHNhYw== IGRpYWxvZw== IHZhcmlldHk= IGFudGli U1RSSU5H UGFyZW50 IEhhbGw= IG1hdGNoaW5n 44O8 IHR3aWNl IG11bHRpcA== ZXhhbXBsZXM= IGVuZHM= IFhNTA== VU5U ZWxpaG9vZA== IHNsaWM= IFR1cg== IEltcA== IHByZWZlcg== b3Rpbmc= IHBlcA== IFN1bg== aHA= c2hh T0xE IGRlc2NyaWJl IHNlbnNvcg== U3Vy IGxzdA== YW5zaW9u IHJlZ2lzdGVyZWQ= IHN1ZmZpeA== cXVlbnRpYWw= IFByb2dyYW0= IE9iYW1h IGltcGxpYw== REM= aW5pdHk= IHRhcg== IGNybw== IHJhcGlk IG9waW5pb24= Tm9ybQ== IHNreQ== cmVzZW50 IGludHJvZHVjZWQ= b2tlZA== IDk1 RGlt Z2Fs aXNtcw== aXNoZXM= IDQx c3RpYw== IGluZm9ybQ== IGV4ZXJjaXNl T05H IHRyYWRpdGlvbmFs SUU= c3RhdGlvbg== 8Jg= SG9zdA== fV4= IGhhcHBlbnM= Z3JheQ== MDAxMDA= UGFyc2U= IHN5bnQ= RGVzYw== Ins= IHRpbGU= IHRpcA== eW5vbWlhbA== Y3V0cw== 6L6T 5L4= YXRpYWw= Y29vcmRpbg== dHJhaW5lZA== QVBQ IGFkdmFudGFnZQ== 77g= YXVz IFRyZWU= IExlcw== RGVzdA== aXRybw== IGludGVyZXN0ZWQ= IFRpbWVz IGFsdGVybmF0aXZl c2VtYW50aWM= 5oA= QW5n IHB1cmU= ZGVmYXVsdHM= b21icmU= IGNoYWxsZW5nZQ== U2VjdXJpdHk= aXBw IGluZGVudA== IENocmlzdGlhbg== QnVmZg== Y2lyYw== YWxk YXRpb25FcnJvcg== UlI= UmVxdWlyZWQ= b25jZQ== IHBpeGVs cXVpcmU= UG9w IGJlYXV0aWZ1bA== ZXBvY2hz YXZlcmFnZQ== IGZhY2Vz b3R5cGU= IHVuaWZvcm0= 5LiL bWF0aHJt SlNPTg== IGFyYw== bnN5bHZhbmlh IGNyaXM= ZXN0ZXI= b2tlcw== IHNub3c= IHdpcmU= IGluc3A= ZW50ZQ== IHB5bGludA== Q2Fy VmVydA== IHRoaW4= YWNoaW5n UmV0 IFRvcg== IFNh c2Npb3Vz Y29udGFpbnM= T00= IDEyMA== U0VDUkU= bG9jYXRpb25z IE1pbmlzdGVy c2NhbGFy IFZpZXc= IENvbW1pdA== IERhdGFiYXNl Q3JlYXRlTW9kZWw= d2hlbg== aW1pbmc= IHByZXBhcmU= dGk= YXRvbQ== IFJldA== KHsi TFA= wqs= IGxpc3RlZA== IG9mZmljZXJz dHY= IHJlcXVlc3RlZA== cmVjb3Jkcw== U1RBVElD b3VzZXM= IHNjYW4= aXRlcml0ZW1z RmlsZU5hbWU= eWFu IFNpdA== VXRm ZGFs IGdybw== IDE4MA== YWdlbg== aXhtYXA= bGFuZHM= Y29uc3RhbnRz 5Lul IFdBUk5JTkc= ZWxlbQ== cnBj IGNvbXBsaWM= cGlja2xl LSg= ZXNo UkVRVUVTVA== YWxvZw== IGxs IGRpcmVjdGVk IHJlZHVjdGlvbg== QU9EU0lN YWRpYW4= b2Nj IFRlYW0= IFBhdHN5 PDw= bnI= YWxzbw== YWxpYXM= aWN0dXJlcw== IG1p IHJlbGF0aXZlbHk= IG1vcnQ= cGVvcGxl IEhpc3Rvcnk= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg R0VS IGV2b2x1dGlvbg== YWdlcnM= IHJhaWw= IGZhaXRo aGFi IGtpdA== IHN1cnZleQ== IHNjaG9vbHM= ZW5jb2Rlcg== R1Q= 0YY= cmV2aWV3 IFBhZ2U= YmQ= dXk= bnVtYmVycw== Z3Bmcw== TkVU Z3o= IHJlYWN0aW9u IEphdmE= SGVsbG8= 5paH5Lu2 TElO IG9wcG9z IC0tLQ== U2VyaWVz IGlnbm9yZWQ= IGd1ZXN0 ICAgICAgICAgICAgICAgICAgICAgICA= IEFubg== YW5hbHlzaXM= Y29va2ll IGNoYXJz IGNvbnRyb2xsZXI= b2dyYXBoaWM= YW5pc2g= VHJhbnNmb3Jt UElQ ZXJ0YWlu IHN5bQ== Y2hvaWNlcw== U2ltcGxl d2FybmluZ3M= Y2tz Z3B1 5qCH dW50aW1lRXJyb3I= Y2x1Y2Fz IGRlcGVuZHM= RE9XTg== ICAgICAgICAgICAgICAgICAgICAgIA== IE11cw== SU5T fSIp IGNz IHN0YXJz bWFuYWdlbWVudA== ISEhIQ== TU9ERUw= bm92 bW9kaWZpZWQ= aW52b2ljZQ== IGNvbG9u dGFnZ2Vk dW5kYXk= cHJvdmlkZXI= 77iP YWNoaW5l IGZpbmRpbmdz IGp1ZGdl IHZlbG9jaXR5 aGF2 IHRz LS0tLS0= IGV4aGli IHBsYWlu IHJvYg== IFNob3c= 5Zu+ IHNjaWVudGlmaWM= V3JpdGVy IFF0Q29yZQ== IHNpdHU= bmFtZW50 IG1ldHJpY3M= aXRv IHZlbnQ= IGhlYXJpbmc= IExhbmd1YWdl dG0= b2xv SW5pdGlhbA== IHVwZGF0ZXM= IFllYXI= IEFwcGxpY2F0aW9u YWxsb3dlZA== aWF0 IGxhbmc= Y29tbWVudHM= c2NyYQ== Y29tcGFyZQ== IG9mZmljaWFscw== VEVNUEw= 0L7Quw== IGNvbmNlbnRyYXRpb24= IGVpbmU= IHJlZ2FyZGluZw== IHByZXBhcg== IGNvbWZvcnQ= IHRleGluZm8= IGluc3RydWN0aW9ucw== UkVE MTQw TWFy YWJh QXJ0 IGFtcGw= aXB2 IGFwcHJl IGNoZWNrcw== anU= IFBS ICo9 IGFzc2lnbmVk ZXBzaWxvbg== Vm9sdW1l UmlkZXI= aWxvcw== IFdpbGxpYW1z IHJlcHJlc2VudGVk aW9uZQ== IGRlY29kZQ== UGxvdA== IGRlcml2ZWQ= aWNpYW5z IGRlbGV0ZWQ= IGludGVudA== IFNjb3R0 d2F0Y2g= IDop IFZpcmdpbg== IEFtZXJpY2Fucw== IGhvbGRz TU9EVUxF 6I4= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IFByb2Nlc3M= 5biC IERpc3Q= IGNhbnZhcw== IHNvbHZl IGRlYXRocw== RGlzcGxheQ== IHJlc3BvbnNlcw== ICUu aW5nbHk= dXRhYmxl IENh IEZhY2Vib29r IEhpc3Q= IGNoYW5naW5n IHRzcA== YWxv IG5vZA== IGR4 YWN0dWFs IGFydGlzdA== IGRpYWdu IGJyb2FkY2FzdA== IGFybXk= YmFsYW5jZQ== IDM5 cmVndWxhcg== U2hhcGU= TGluZWFy IGJlbGlldmVk IERlbnZlcg== U0VDUkVU cGlu Q29uZg== cmVmcmVzaA== RGln TVc= YWx0ZXI= amVjdG9yeQ== IGJvbmU= IHByb2M= IE1lbg== 5Y+v IGVzdGltYXRlZA== Q1VS cmVjZQ== dXJlcg== IGZvcmdldA== IGRpc2NvdmVyZWQ= IHByZWRpY3RlZA== T0ZG b25pY2Fs IGNpcmNsZQ== IFJlcG9ydA== IHJpc2U= IHZpcg== Z2VvbWV0cnk= dW1ibmFpbA== cGFjZQ== IHJlcG9zaXRvcnk= IE1leA== IGJvb2xlYW4= IGRw dW5pY2lw bGc= c2hvcA== MTY4 IGNvbW11bmljYXRpb24= w58= IGVuZGVk IGZvYw== IE1hbnk= CgogIA== c2Vlaw== IHJ1 c2NhdHRlcg== Wzpd IEhvcnNlUmlkZXI= IGNvbGxlY3RlZA== IGFjY2VwdGVk IGNpcmN1aXQ= IGZhYg== T2s= IHBsYW5l IHNlY29uZGFyeQ== YWJsYQ== IFdJVEg= bGl0ZXJhbHM= Y2VlZGVk Y29vcmQ= UGFyYW0= IGNyaXRpYw== IG1haXM= aW50ZWdy TWFn TnU= IEJpbGw= MTYw IHNlcmlhbGl6ZXI= IGVudGlyZWx5 572R KCc6 UGF0 U291cA== IHBsYWludGlmZg== IHVuaW9u d2lkZ2V0cw== dGhlbg== IE1hc3M= IDE5OTA= IEFuYWw= IGRlY2ltYWw= Q29udGFpbmVy IDAw IEN1c3RvbQ== IFN0YWxpbg== RG9lcw== IGRpc3BsYXllZA== JSUlJQ== dWFu IFVuZGVy c3RhdGVtZW50 aWV0eQ== IHdhbGtlZA== Y2llbnQ= Y3dk IEZM IHJlZ2V4 44Gr IHBhY2tldA== aWNhZ28= RklY ZXRv IFZlY3Rvcg== IGJlbmVmaXQ= 54K5 44GE IGJlbmVmaXRz RGk= Z2Fy IGFkb3B0 IHByZWRpY3Rpb25z RE0= dHJpZ2dlcg== IG91dGZpbGU= IGJpZ2dlc3Q= bGljaA== IGZhdg== IGJpbGxpb24= IHN0cmFpbg== CiAgICAKICAgICAgIA== IG91dGVy IHVucw== V2FpdA== IEdvb2Q= IHBhcnRpY2lwYW50cw== Ym0= IGFnZW50cw== QWx0ZXI= IHBvc3NpYmx5 QXBp Y2Ft ZW5pdW0= IGZvbw== IGdvYWxz IEFkbWlu IGVtb3Q= IGV2YWx1YXRpb24= cGxlbWVudGFyeQ== VGhlbg== cnd4 Y3RybA== IEhlbnJ5 Pz8= IGJ1Y2tldA== REVW Q2Fw 5Z0= IGRhbnM= QUdFUw== IExvdWlz ICcq IGhhdmVu IE1hZA== SUNU IEphcGFuZXNl IGZhcm0= IGRvY3Q= IGRpbWVuc2lvbnM= IHdpbmRvd3M= Q291bGQ= cGFuZWw= IGhvb2s= dWxm IE1vdW50 c3BhY2Vz 0L7RgA== dW5rbm93bg== YXNpcw== IGNhbGxhYmxl fSQs YWFhYQ== c2Vhc29u c2hlbGw= IGV4cGxhaW5lZA== b3Vuc2Vs IHJlcXVpcmVtZW50cw== PVwi Z2VuZQ== IHZpc2l0ZWQ= 5YC8 L1w= d3JhcHBlcg== aWNpZXM= IFN1cHBvc2U= a2Vybg== bGF3 0Lk= c2VwYXI= dXJhbmNl IGFsdA== IHJlY29tbWVuZA== Qml0 IGRldGVjdGlvbg== IE51bQ== IHZhbHM= RmllbGRz Y2hlY2twb2ludA== 5p6c aW5zdGFuY2Vz IEVuZ2luZQ== RFJNRVRI R2xvYmFs IE1ldGhvZA== cG9uZW50 VEhFUg== IEZyYW5jaXM= IHRoZW1l ICdb IFBv IG1lcw== Qmln cHRz cmlkYXk= IGxvY2F0aW9ucw== QkY= dWxv IHBvd2VyZnVs V0lE fTo= YXBlZA== IFllcw== IGludGVycHJldA== ZWFjaA== fSQu ZmFpbGVk IHBoaQ== IGRlY2F5 YWJpbA== IEJvc3Rvbg== IExpa2U= IG1pc3Npb24= IHNpdHRpbmc= IG9mZmVycw== IGhhdA== dW5nZW4= IGp1cg== aWRlb3M= IHRlcnJvcg== c2xvdA== Z29hbA== QXV0aGVudGljYXRpb24= IGNhYg== IGluamVjdA== IGxpcXU= IHJlc29s cm93c2U= IGV4dGVuc2lvbnM= b2xvZ2llcw== IHJlZmxlY3Rpb24= QWN0aXZl IHBsYXRl WVBF cGFz IGRlZ3JlZXM= IGtpZA== Y29tYg== SEI= IHRpbGw= IG9wcm90 IHNjaGVkdWxl IGdyZWF0ZXN0 ZnVuY3Rpb25z IHNpZGVz IGNhdXNlcw== IFNjaGU= IHdlYXRoZXI= IG9jY3Vycw== IEdlb3Jn IEF0dHJpYnV0ZUVycm9y SExU XV4= IGVmZmlj IG5ldXJv T05U IHBhc3Npbmc= c2VxdWVuY2Vz IGludHI= IEJyb3du bGljZW5zZQ== IGNvcnJlY3RseQ== VEFCTEU= aW50cw== IGNvbnRhaW5lZA== YW1lbnRl dmlu IHRhbA== IHBpbg== IGdseQ== IERpZQ== aW5kcw== UmVhZGVy IFBlbm5zeWx2YW5pYQ== IAogICAgICAgICAgICAgICAgICA= YWJzdHJhY3Q= IEZvcnQ= ZmlsdGVyZWQ= IGF1dGhvcml0eQ== IENB IHNtYXJ0 IG93bmVycw== c3VwcG9ydGVk bW91c2U= TlVN ZXJjZQ== IHF1b3Rl IGN1c3RvbWVy Z292 b3Jlcg== cGhlcg== IFBsYWNl IGVhc2llcg== IGNhcnM= IGVsaW0= IGJpbmRpbmc= UGljaw== IGNhdGVnb3JpZXM= IGdyYW50ZWQ= IHJldmlzaW9u JC0= 5rE= aWxseQ== dGVyeQ== IExhc3Q= YXR0ZXJ5 aWxpYXI= QnI= TG9uZw== eWVy IGluc3RydW1lbnQ= dWxhdGluZw== IyMjIyM= IGVuZHBvaW50 IHRpZ2h0 IGRpYw== IGlv IHNjaGVtZQ== bWV0aG9kcw== UEFTU1dPUkQ= IGNlbGVicg== IGVxdWl2YWxlbnQ= IHJvdGF0aW9u SnVzdA== YW50YQ== ZWxsZXI= IHNleHVhbA== IGZyb3plbg== Y2hhcnQ= IFZpcw== Z2VuZXJpYw== 4Lg= IHBlcm0= aXR0bGU= IjpbIg== IGZsdQ== IHRvdw== IEpvaG5zb24= IHZhYw== IFByaW50 IHRyYWZmaWM= R2VuZXJhdG9y IFJpY2hhcmQ= oIE= bWVnYQ== IGxvc2U= RWw= aW5hdGU= dmVyc2Vk IERhbQ== YWtlcg== IGNyYQ== IGV4Y2x1ZGU= YXZhcg== SGVhZA== IGZvbGQ= Y2tub3c= IG1lYXN1cmVz IFw8 aW5mdHk= SU1F ZGlzYWJsZQ== bWVs IEpvbmVz ZHVsZWQ= IDUy CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IG1hcmtlZA== IHN0cmlw IHJlc2lzdGFuY2U= IGFkbWluaXN0cmF0aW9u IG9ic2VydmF0aW9u dmxj IHNwb2tl d2E= ZmVhdA== eEY= IHRlY2huaXF1ZXM= Z2Zk IHdyYXBwZXI= ICIk IFdhbGw= IEluZGlhbg== bW9s cm9udA== IGV4dGVudA== IGVudmlyb24= IGFwcGVhbA== KCQ= IGZsZXg= IGRyZWFt Y29tcGw= ZWVr IGFycml2ZWQ= Y3c= IFJo ZHJvcG91dA== REFUQUJBU0U= bmlj dHVwbGVz IEdvbGQ= IFNlcnZlcg== IE5PVEU= IGxpbWl0cw== VGltZXI= IG9wZXJhdGluZw== IGNvbm5lY3Rpb25z IGluc3BlY3Q= IE9QVFlQRQ== RlA= IGludmVudGlvbg== IGluZGljYXRlcw== bmF2 IHRt dW5z IGZhY3Rz IChcWw== 5rOV Qkk= R1JP IGF1Zg== QVNL IHB1cnBvc2Vz IExpYnJhcnk= IGV4Y2hhbmdl QVJDSA== U2Vjb25k IGxpbmtlZA== CgogICAgICA= IG1hbm5lcg== IGZvcm1hdGlvbg== 572u 6KaB IG1hbmQ= aWRhZGU= IFNlY3Rpb24= Y2x1c2l2ZQ== 6I63 aGQ= b3V0ZQ== IEFyZQ== J10iLA== IGNvbnNpc3RlbnQ= IHRpc3N1ZQ== ICd7fQ== 5pa5 VkFMVUU= aWF0ZWQ= IHNpY2g= IGtpY2s= cHJldmlvdXM= IEdvdmVybm1lbnQ= IHNlYXQ= ZGlzYw== IE9uY2U= IGVsZWN0cmlj U1RBVFVT QU1QTEU= YWdyYW0= IHJj IE9L IGpvdXI= Z2Vv IGV4Y2VwdGlvbnM= Ij48 RGF0YWJhc2U= UlQ= Xio= IG1hcHM= IGtpZHM= IG1peGVk QUlO IGVyYQ== WFk= IG1k Y29tbXVuaXR5 U2V0cw== IGRpc2N1cw== dXNzaW9u IEJZ IHJlbGllZg== 44GX IEFwcGxl TWlzcw== c2l6ZXM= IFZhcmlhYmxl IEFERFJNRVRI Y29udGludWU= 5ow= LyIs NzAw bmVk 44GZ IHN0dWRpZWQ= 5a+5 IHNwYWNlcw== QUND IHJpdmVy aXJhdGlvbg== IHJ1Yg== cmVjdg== IGludmVzdGlnYXRpb24= IGNsb3Vk Y2xpY2tlZA== YWxsZXN0 ISc= cGl4ZWw= IHF1YXJ0ZXI= ZGVsZXRlZA== IG5pbmU= IHNpZ25hbHM= cHJpbWU= IHRyb3VibGU= IGVmZmljaWVudA== IEJvdGg= V0FS IGh5cG90 aXRpdml0eQ== IGNhcmRz IEVsZW1lbnQ= ZnJvbVV0Zg== IHBhcnRuZXJz IGJvb3Q= R1M= IGlwcm90 KFtdKQ== bm9vbg== IGluaXRpYWxpemU= IHNtb290aA== Sm9obg== 0LE= IEds c2Ny TEVGVA== Y2VsbHM= IE9mZmljZQ== R0lO TUY= cnN0cmlw IHBvcnRpb24= IFJvYWQ= ZGVhbA== b3VzaW5n IEJsdWU= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IHByb3BvcnQ= aXBlZA== IDU2 IGF2Zw== IEphcGFu w7Vlcw== IHR1cg== IFNwcg== IE1P ZXhjbHVkZQ== a2V5d29yZA== MTExMQ== Zm9ydHVu ZHVjYXRpb24= ZXNjYXBl aWRlbg== bG9ncw== IHB1Ymxpc2g= eGlj IHByb3BhZw== MTA1 IHVybHBhdHRlcm5z T3B0aW9u 15U= dG9jaw== IHt9KQ== bmljaw== IGR5bmFt dWNreQ== dGVpbg== XXt9LA== b3NpdA== ZmZmZg== cHlnYW1l IFN0YXI= UGhp b3Nh cHJvZA== cHJvcHM= YmxvYg== IO0= IGdhbW1h IHJvdWdo aXZlcnNl IDQz IGVmZm9ydHM= IHN0ZGVycg== IHByb3Zl IEtvcmU= SGlzdA== VFY= Y2FyZQ== IEly IFdI IGxlYWRz IGluZGljYXRlZA== IHdvcnNl dXN0cmlhbA== cmFpbmU= aXZhdGlvbg== dGFibGVz IMK7 IENhcm9s IHByZWNpc2lvbg== IGNvdw== IGVsZXY= cGhlcmU= c3RhbmRpbmc= IEFjY291bnQ= S2V5cw== IGVzc2VudGlhbA== TWFwcGluZw== cGlwZWxpbmU= 56g= IG5hcnJvdw== IGRlYnQ= IGNoZWNrZWQ= IGVzdGltYXRl CQkJCQkJCQk= Rml4ZWQ= ZGF0YXNldHM= IG9ic2VydmF0aW9ucw== IEV4ZWM= cmlt U3RvcmFnZQ== IHNwaWRlcg== IGNvbnN1bHQ= IEludGVnZXI= IEJlYXV0aWZ1bA== IGNvbmR1Y3RlZA== ZmI= aXNmaWxl IG1pbmU= IDEwMQ== IFNs ZXN0aW0= IE9USEVS YXNoaW9u IHN0YXRpc3RpY3M= IHBpdGNo aXN0YW4= VVRG Q29vaw== IGxlZ2VuZA== Z2F0ZXdheQ== c2VydmVycw== YnVpbGRlcg== TUlOSQ== aGlz 0YU= ZGVncmVl dXRj dGltZXpvbmU= YmVsbA== dmlydHVhbA== cmljYWw= IGlyb24= RmxhZw== dXo= c2NoZWQ= aWN0b3I= eHl6 SGVscGVy IHRyYWNlYmFjaw== b3Rvcg== ZXdpZHRo IHNpZ21h IGNvcGllcw== b2xhcnNoaXA= b3JuZXk= IGNvbW1lcmNpYWw= IGNvbnRyb2xz IFNpdHVhdGlvbg== IEhpdA== IGt3 Y29sbGVjdA== PD0= ZXBlcg== c25hcHNob3Q= UHJpY2U= Z2VuY3k= YWNlcg== IC0tPg== DQoJCQkJ IHN0cmljdA== TW92ZQ== Q2hvaWNl QUs= bGll dnk= cmFuY2hlcw== wrs= ZWRpcnM= IGRlZmVuc2U= cGhhYmV0 IHNsaWNl b3VuY2U= 5rI= IGVhcm4= IExvdw== IHBvZXQ= bGVnYXRl TWluaW11bQ== cGllY2U= IHNpZQ== IE9VVA== IGFjY3Vt cGFydGl0aW9u aW5hbGc= 5o6l SXA= IDU5 cng= IFNvY2lhbA== IEJsb2Nr IGxpc3Rlbg== YmFja3Vw ZGlzYWJsZWQ= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== VVJJ U1c= 56Q= IGxlYWd1ZQ== QVJN Y2FwaXRhbA== IENPTkY= IEF1c3RyYWxpYW4= YXJkZW4= YWN0aXZhdGlvbg== O1w= b21lcg== IG1vdmVz bWFubg== YW5ld3M= IGZyZQ== IEJlc3Q= J109 J10ifSks IHBhcnRpdGlvbg== IGRlY2lkZQ== IEZsb3I= YWN0aXZhdGU= aXRhdGl2ZQ== c2VsbA== c2t5 Rmxvdw== IHByb3Rv IExvcw== IHRlbGxz IGZvcmVzdA== IEh5 cHJvY2Vzc2Vk Tm9kZXM= Q1U= IGZlbGxvdw== IHByYXk= IGFwYXJ0 IGd1YXJk KysrKw== IEpvdXJuYWw= cG9ydGFs bGVjdHJvbg== IGZyZWVkb20= IENvdXBsaW5n NTA5 IHJlYWxpdHk= Y2hpbmFuZXdz IGNpdGllcw== IGZhc3Rlcg== IG51cg== IGhhbGw= MDAwMDA= IFwi IG1hbmFnZQ== IHN1Z2dlc3Rz IGluanVyeQ== 6Ze0 V1c= bm0= IFRoZWly IHJvc3B5 IEdldHR5c2J1cmc= IEVudg== IG1lY2hhbmlzbQ== IFdyaXRl IFVzaW5n IFBhcmlz IGZhdWx0 IGlubg== IHJlZmVycmVk MzYw IHN0aXI= IHBvbGw= Y2xlYW5lZA== Oioq ICI6 IEJp IDQ3 bWVkaWF0ZQ== IGJhYnk= dXB0 c3RyYQ== c2hhcmU= IGZpbGVk Zmx1 IHVyaQ== IHNxbGFsY2hlbXk= dWl0ZQ== c3RyaWRl LS0tLS0tLS0tLQ== c2NoZWR1bGU= QmVmb3Jl Y2Vhbg== IGF4ZXM= aGF2ZQ== SU5TRVJU U0VUVA== ZGVjYXk= IGhlYWx0aHk= IERFRkFVTFQ= IG5vYg== ICIo cmlv IHZlbg== IFBlcnNvbg== IHJlY2FsbA== bXVsdGlw IHNhbg== IGJ1ZGdldA== b3Vs IFBsYW4= TWFj IHJlY2VwdA== IHByb29m Q2xhc3NpZmllcg== IFZpcmdpbmlh aW1pdGVy IHJlYWRz IGRlcGVuZGluZw== IEFmcmljYQ== 4paS4paS Q3RybA== ZXRj Y2F0ZWdvcmllcw== aXN0ZXJz IEZpcmU= YWNraW5n Xnso RmFpbA== UUFwcGxpY2F0aW9u fHw= IGNhbQ== c2hpcmU= IHBhcmFsbGVs bG9naWNhbA== IHNwcmluZw== c3ViY2xhc3M= aXNzdWVz IGZhaWxz IG5ld3NwYXBlcg== bnV0 IE1vY2s= 0L7QtA== Y2F0YWxvZw== IGZvdXJ0aA== IGFwcHJveGltYXRlbHk= XCI6XCI= Ljw= 8JA= IHNy IFNQ IHBsYXlz IHBhcms= IHN1Z2Fy IHNpbHZlcg== U3VwcG9zZQ== YmFuaw== bmFt IG5pY2h0 d2l0aG91dA== IHBlcmNlbnRhZ2U= ZGg= YWJzb2x1dGU= KCJb IHRpbWVkZWx0YQ== IGZhY3Rvcnk= 5a2Q IGdpcmxz g70= IHdhcm4= IFRhZw== bW9pZA== IGF0dHJhY3Q= aWRlbnRpdHk= IHZpcnQ= IHByZWdu IGFkdmFuY2U= IHByb3RlaW5z IG5laXRoZXI= c2F2ZWZpZw== IHNvbmdz IGVuY29kZWQ= dmlk IFRhc2s= c3RyaW5ncw== IHRob3VzYW5kcw== IGRlcml2YXRpdmU= VkVOVA== ZWg= IGJhcmU= IHJlbnQ= U3RhbmRhcmQ= IFJlZg== IEl0cw== Y2FsZW5kYXI= Z2VuZXJhbA== dGlk ZXJpb3I= IGJsb3c= IGR5 IGRyYWc= cGVybWlzc2lvbnM= IE1hcnRpbg== IHB1cmNoYXNl IERlc2NyaXB0aW9u IE1lZGlh IENvbW1pdHRlZQ== KSld IEJ1dHRvbg== IHNvY2s= bm90aWZ5 dmlzaXQ= IG51Y2xlYXI= cmVjaXA= IGRyb3BwZWQ= RXN0 dWl0cw== IGdhbA== IGFnZW5jeQ== IGZo ICcnLg== IGZvcm11bGE= IGVxdWF0aW9u IENvcnBz IHNsb3dseQ== IGRlcGFydG1lbnQ= ZGV0ZWN0 IHByb2NlZWQ= IHBsYW50cw== ZXh0ZW5zaW9ucw== cmVnaXN0cnk= Lioq IGNvbmZpZGVuY2U= V0lO eGVm IHByb2Nlc3NlZA== MTAy 5oi3 IHByb2NlZHVyZQ== Ii8+ IHRocg== bG9wZW4= IHN0cmF0ZWc= IHNwZW5k IGN1cnZl cm9sbGluZw== IGhvcnNl IHdhdGNoaW5n QWNjZXB0 aWg= c3RyYXA= IGRyaXZpbmc= bWtkaXI= IHNxcnQ= JSw= ZW1pdA== IENlbnRyYWw= RlM= dG9y 7J4= dmFsaWRhdG9ycw== IGNvbmZpcm1lZA== aG9w IGJ1aWxkaW5ncw== SWRlbnRpZmllcg== IGNvbnZlcnNhdGlvbg== U2VjdGlvbg== dW1pbmc= IGNvbG91cg== IHNxbGl0ZQ== TVI= c3RyZWV0 IHB1cmNo IHNlY3Rpb25z b3V0dWJl cmV5 IHRoYW5r dWVzZGF5 Rm9sZGVy R29vZA== IGN0eXBlcw== b3V0ZXI= JS4= IHR4dA== IGRpcA== Y2hhcmdl LS0tLS0tLS0t IGFjY291bnRz IGRyYXdu IHN5bXA= cHJlZGljdGlvbg== IGNwcA== YXNhcnJheQ== IEpv IHByZW0= YWNjb3VudHM= UnVsZQ== c3F1 dGl0 IGFza2luZw== KV4= MzUw c3R1ZA== IHNhbmQ= IFNlYXJjaA== bm9pc2U= IGVxdWlwbWVudA== Y2RvdA== IERvd24= IDU0 bW9uaXRvcg== IGNhcmJvbg== IGluZmVjdA== IGZhdm9yaXRl 5oE= IHRvcg== IHNvdW5kcw== ZW1z IGNvbnRpbnVvdXM= QmVnaW4= QmFk aG9zdHM= YW5hbHk= IElzbGFuZA== bWFwcw== bGFuZ2xl IGNudA== IHdz IEluZm9ybWF0aW9u YcOnw6Nv aG91cnM= bGM= IE11cg== aXphcmQ= IGF0b21z IEVsbA== IGNoYXB0ZXI= IGFueXdheQ== Y29k IGRyYWZ0 IHNlbQ== Z2VyeQ== ZGlnaXQ= c2V4 ZXNzZWw= IEhhdw== IHBhcnRpY2xlcw== IHNlbmlvcg== IHBhZw== IGluY3JlYXNlcw== Y3ljbGU= QWJzdHJhY3Q= Li4uLi4uLi4uLi4uLi4uLg== cHc= cmV3YXJk IGhh aWth 0LjRgg== LS0tLS0tLQ== IGFyYml0 IG9jaA== IGRpc2N1c3Npb24= IHN0b3Jlcw== KCIiKQ== bWFrZWRpcnM= UkdC IHNvbQ== TGFiZWxz CgoKCgoKCgo= IGV4cGxhbg== IGltcHJvdmVk IGNhbmRpZGF0ZXM= 5q8= IFBvcA== bWFjaGluZQ== IDUz VGhlc2U= IGJvdHQ= IFBvd2Vy IGNyZWRlbnRpYWxz IGFmZmVjdGVk IGlj ZXh0ZXJuYWw= IHRpbWV6b25l IGNoZWVzZQ== IGN1c3RvbWVycw== KSsi IHN1Ym1pdA== IHByb3ZpZGVy IE9yZ2Fu w7Zy dG9saXN0 UUVE IGFkbWluaXN0cg== IEZsYXNr IERlZQ== TWV0YWRhdGE= IGZk SURE IGNyaW1l eGNl Ol0s IGltcG9zc2libGU= 77+977+977+977+977+977+977+977+977+977+977+977+9 TGk= IFJpZ2h0cw== IG1lbWI= IHByaW9yaXR5 UmVuZGVy dWtl 6Ic= ZXhwZWN0 IG5lYXJlc3Q= IGNyZWF0ZXM= bmVnYXRpdmU= IHZlcnRpY2Fs Izo= Lycp IGVn IENPUA== TG9naW4= V0g= IHN0aWNreQ== IHBpbA== aWdlcg== MDEw bG9naXRz YnVudA== d2hv IENvbnN0cnVjdA== IENvbnRyb2w= MTEy IHNpZ2h0 IGFkYXB0 MTA0 eGZh IG51Y2xl aXB0 Ij48Lw== IHR1cm5pbmc= UG9pbnRz cGFs aXNlcg== ZmZlZQ== IGFic2VuY2U= IGdlbmVyaWM= YXR1cmRheQ== IGR5bmFtaWM= ICci dGw= kow= IHN0YXRpb25z IGV4cG9zdXJl c2h1ZmZsZQ== IGJ1dHRlcg== n6U= IHJhaW4= bWF0Y2hlcw== IDE5OTc= 5Y+3 U2E= YXVn c2NyaWJl IFVTRQ== IFJlZ2lzdGVy aW90 c291cmNlcw== IHNvcnJ5 IG1vYmlsZQ== IGVjaG8= IGludGVsbGln IGRlbGl2ZXJ5 Y3JpdA== ZG90cw== IFRvd24= aXJkcw== IG1hZ24= IHByb3RlY3Rpb24= IHN5bXB0b21z IGJweQ== YXBwYQ== XSI= IF97 aXZlbmVzcw== VmVydGV4 emg= 560= IHJlbWFyaw== dXRlbg== b2NhdGlvbg== IHNodWZmbGU= ZW5lcmd5 IHBvZA== IHNpc3Rlcg== IGxlYWY= IHh5 IGNyZWQ= IGlzc3VlZA== IHNvbGRpZXJz IEFjYWRl w7Q= IHBpeGVscw== IHJlbGF0aW9ucw== IHRyYW5zbGF0aW9u U1NM SGlz IGZhbg== IHRvbQ== IExhbmQ= IGFkdmVydA== IHBvc3Rz YnA= cmFyaWVz aWx0b24= IFJ1bnRpbWVFcnJvcg== ZXBpc29kZQ== eGVi UHJlZg== amF2YQ== IFNI IHZvY2Fi IHNlbmRpbmc= ZmV0Y2hhbGw= YnVudHU= QVY= SGlnaA== Y29w IGbDvHI= IHBoaWxvcw== dW50ZQ== 5byP eWFtbA== IHNwb24= IGJ1aWxkZXI= REo= IGZpbmdlcg== IHBz ZW1i IGNvdmVyYWdl OTk5 U0VSVkVS TUJFUg== IE1lbA== IGF0dGVuZA== IHNldmVyZQ== IENvbXB1dGU= IGNhbmNlbA== 5ZCO YXZpZ2F0aW9u IHN1ZGRlbmx5 TWVy Z2M= eGFk IFNpbXBsZQ== IEFuZ2U= UmVzdA== b3ZpZQ== IGludGVyZXN0cw== IG5pbA== IGh1cg== IEVy dGVuYW50 eGFl TG9vaw== IHBpcGVsaW5l IHNvYg== IHZlcnRleA== bGlhbWVudA== IGV4aXN0ZW5jZQ== IFRvdGFs dGltZWRlbHRh Y2FwdA== cHJlcGFyZQ== IEluZg== Y2FsbHM= 4paR aGFsZg== ZXJpYWw= IHNob2Nr eGJh IGV4cGVydA== cGFyYQ== IEtlbA== MTE1 bG9jYWxl IHN1cnJvdW5k eGJm 7Jc= c2Vlbg== b3J0ZWQ= IFBN IEJy IGFmdGVybm9vbg== IGtlZXBpbmc= IGdyYWRpZW50 IHRvbGVy IHJlc2lkZW50cw== IGNvb2tpZQ== Y2lyY2xl aWdl IGNvbnZlbg== aW1lcw== IGFkZHM= RW1wdHk= SHo= IHNoaWY= T1BUSU9OUw== IG9wcG9zaXRl amFy bW9z aXRhcg== IFBB IFdlZA== Y29uZmlybQ== cHJvdG9idWY= IFByb2Y= IGZpZ2h0aW5n IFdvb2Q= IG5lY2s= IHByaWNlcw== IHRh ZXJyeQ== aXNh IG5i IFBvdA== IGhvdXNlaG9sZA== 6I635Y+W IGRpc2N1c3NlZA== dG9nZXRoZXI= IGxvZ2lj QVU= IGd0aw== IGxhdWdo U3RyaW5nRmllbGQ= IEJlYXV0aWZ1bFNvdXA= fShc PiIs IHJldHVybmluZw== cmFpbmVk QW5pbQ== IGNhcHR1cmU= bXlzcWw= YXJhdGlvbg== YXJpdHk= IHBlbA== IGNvbmZlcmVuY2U= IE1hbGw= IDE5ODA= IHNraWxscw== dGhyZWFkcw== ICIsIg== cmlibGU= IGNvbGxl IGZyYWN0aW9u b3BwaQ== YWdncmVnYXRl ZWdy dmVyYg== KSkpKQ== ZWxsYW50 IHNlY3VyZQ== IGNpcmN1bXN0YW5jZXM= Y3R4dA== IElNUA== Q29ucw== c29sdXRpb24= IGxvYWRpbmc= Q29weQ== TGVu IHBsYW5uaW5n IHNlcnZpbmc= IHNwZWNpZmljYWxseQ== 0LXQvA== IGVsZWN0cm9u dmFyaWFuY2U= Tm9u IG51dA== IFN1bmRheQ== 5pyA RmlsZW5hbWU= cGl0ZQ== eGVk IE11c2lj IGNob3A= IHdlYWx0aA== Ym9vbGVhbg== IElOVE8= IGFzc29jaWF0aW9u R2VuZXJhbA== IGlsbHVzdHI= IGNvZ25pdGl2ZQ== TWFrZQ== UFc= fF8= IG94 YW1vcw== UkVF IHVzdWFs ZmxhdA== VGVhbQ== IGNj Y2xvbmU= cmVwZWF0 dXJpZXM= X18uX18= b2dyYQ== IGltcG9ydGFuY2U= dGFu IGJhZw== IENvbnM= bGludXg= eGZl IHNrZQ== dGhlcmU= IDpd IGNvbnZlcnRlZA== ZGFt 56CB IDQ2 cGlvcHBp 5YmN Xyc= ICg/ IGJlY29taW5n 2Kc= IGN1 YXR0cmli ZG9u eGFj KCkpLg== IEhhbA== SURz IGtub2Nr IHNtaWxl IHdyaXRlcw== QXJl Qm90 RnJlZQ== Zmg= aW1pemU= IE5vdg== IGFycmFuZ2U= TEVURQ== IGZhbW91cw== IHdhbGxz cmVjdGlvbg== IGxy IEN5 MTAz Qlk= bGlm IGZvcnRo dGVjdG9y cGFja2V0 IGNvcnJlc3BvbmQ= bnB5 IFRlbnNvcg== IEFU IGFjY2lkZW50 IHN0YXRlbWVudHM= cHJvY2Vzc29y IGJyZWFzdA== cGxhY2Vz cmVzb2w= IikpLA== IDcy 44Gn IGZyYW1lcw== IGluZGljYXRpbmc= IGF0dGFja3M= V0lEVEg= bGluYWxn b3Vkcw== IGRhdGVz IGx5 b2dnbGU= IHR1cm5z IHRocmVhZHM= 6YeP IGF1eA== c3Rvb2Q= ICcnOg== IGdhcA== aXN0aWNhbA== IHByb21wdA== eGJk IOKIkg== IG1hcnJpYWdl dGhyb3VnaA== KCcuLw== ZXN0aXZhbA== IHRlbGxpbmc= 5L+h IExJTUlU SW5pdA== IHNhdWNl TEFORw== IGNvZQ== dW50aWw= 0YDQsNA= IG9yaWdpbmFsbHk= SGVscA== IFRydW1w IGNvbmNlcm5lZA== IGxhdHRlcg== ZXhwZXJpbWVudA== IGNvbnRyaWJ1dA== eGNi CiAgCiA= RU8= U3BlZWQ= b25pYw== IEZJ IE9sZA== RHJpdmVy IGZ1bmN0aW9uYWw= VVJJVFk= IGRyYXdpbmc= IG5vcm1hbGl6ZQ== 7J20 SHR0cA== 5ac= IGNvbHM= QXJncw== U0Y= YmJveA== cHJvYnM= bXBsZXI= cm9vdGQ= eGNm RW50aXR5 UElQRQ== TWVtb3J5 aXBwaW5n IENoaWNhZ28= ZXhpc3Rpbmc= IGdlbmRlcg== IGNsYWltZWQ= Z3JhZGllbnQ= U0VUVElOR1M= LCU= ZWxtZXI= aXJ0eQ== IFBhbGVzdA== 4pSA QlA= eHJvb3Rk IEdyYXBo YWN0cw== aGF1c3Q= b25hbGQ= IDEyMw== IGluZmVjdGlvbg== IENoYW5nZQ== QWxsb3c= ICcvJw== IGJyYW5k TWVzc2FnZUJveA== bWF5 5ps= 6Zs= IExpZmU= Y2VudHJhbA== IGZtdA== IGJsZQ== cHVibGlzaGVk b255bW91cw== TGl2aW5n dWg= IEpldw== Y2lwbA== IENsdWI= UGhvbmU= cGF0Y2hlcg== Y29uY2F0ZW5hdGU= KT09 QmluZA== XltA cXM= IG1pbGs= IHNoZWw= IGFkZHJlc3Nlcw== IGZsYXZvcg== XVxd UFNldA== IGFja25vdw== IG1hbnVhbA== XXs= 0Y4= IHBpdA== Y2hy IEN1cnJlbnQ= IGZydWl0 IG5ldHdvcmtz IHBob3RvZ3JhcGg= IGxpYw== IEZlZGVyYWw= YWNz OiM= IGhhcm0= IEVkaXQ= Iilb cmVsYXRpdmU= eGZk IGl0ZXJ0b29scw== IENodXJjaGlsbA== 4qyb IFNFQ1VSSVRZ TW9yZQ== cmFuY2U= eGRi IHNjYWxhcg== MjAwNg== IHNvbHV0aW9ucw== IGd1eXM= IGl0ZXJhdGlvbg== IDE5OTY= VW5rbm93bg== IGdyZXc= IEZpZ3VyZQ== 5qg= IFJhbmRvbQ== IHNoYWRvdw== IGludGVyYWN0aW9u Q0xVRA== c2VtYmxl IG1haW50YWlu QXJndW1lbnRQYXJzZXI= IERvY3VtZW50 ZnVtZQ== e3s= b25lc3Q= IE9mZmlj IHVuYWJsZQ== Q04= IGdyYXk= IGZyYW1ld29yaw== Q0xVRElORw== Y2FuZGlk IElG cGFpcnM= IGJyaWRnZQ== IHJlcHJvZHU= IERhcg== IHN1aXRl IGd1YXI= IGRydWdz ZWxlcg== IHJhdGluZw== cGxhaW4= U1RFUg== KCcvJyk= ZW1iZWRkaW5n Qk0= U04= aHc= IGdpdA== IGp1 Ll0= IGJhdHQ= dGhyZWU= IHllbGxvdw== bmVyZ3k= 6L+U IHBlcHBlcg== a2lucw== IElsbA== IHJlY2lwZQ== dXJyZW5jZQ== IGluZ3JlZA== Q21k IHN1c3Q= 4YC6 Q2FzdA== T2N0 IGhlbGw= IiUo UHQ= IGN1bQ== IGFycmF5cw== IHJlcGVhdA== ZXJvcw== IG1peHR1cmU= Y3R5cGVz IGFuY2llbnQ= IGhhZG4= IGlkZWFs aGVhdA== dXJhY3k= dWxpbmc= IE5heg== aW5kdQ== IGFzc3VtZWQ= IENvbmZpZ3VyYXRpb24= IEZsb3JpZGE= S0VO IGJyZWFk dmVydGV4 IGtuZQ== cHJpdg== IGNvbXBsYWludA== TmE= bWFk w6A= c2VuZGVy aXRvcnM= bmRhcnJheQ== IHZhcnk= IFJU Y2xhc3NpZmllcg== IGxvZ3M= c2NyaXB0aW9ucw== IGNoZWNrcG9pbnQ= 5aSn IGZhbnM= IERhdmU= b3ZlcnJpZGU= aGVudGljYXRlZA== 5Yqg IGV4cGVyaW1lbnRhbA== Y2FyZHM= c2I= 4oCU4oCU IHJlYXNvbmFibGU= UHJvZHVjZXI= IENPUFk= JCg= MjEy TG9jaw== XC4= 55A= IGFpZA== bWFrZXI= UkVTUw== cmlzb24= IGRpZ2l0cw== 0LM= dXRlbHk= IDI1MA== YWxsZXJ5 Y29ob2w= IGNvbW1pc3Npb24= IGF0dGFjaGVk IGxpcXVpZA== c2Nyb2xs eGZi IFNlY3VyaXR5 QnVmZmVy V09S IHBlcm1hbg== VXNhZ2U= dXRjaA== IGNvbnZlbnQ= IHJlc29sdmU= IHVuY2VydA== cnlwdG8= SGl0cw== Wkg= bW9t c3RhZ2U= Y3JlZGVudGlhbHM= IGNoZWNraW5n MjAwMQ== ZW1wbG95 Y2lk JyldLA== IEV2 IGFwcHM= bmNl 5L2/ cHJlY2lzaW9u Um9sZQ== IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t YWlsYWJpbGl0eQ== 5L2c IGNvbmNlbnRy ZmFj bWl4 dWx1cw== cHJvag== c2VyaWFsaXplZA== bWl0aXZl IHJlbWFpbmRlcg== IHByaW5jaXBhbA== IHN0YWJsZQ== IHBlcm1pdA== YmxpdA== TUVESQ== IERlbGV0ZQ== eGFh IGVtcGxveWVlcw== IEluc3RlYWQ= IGRlYmF0ZQ== U2NhbA== 15k= IOo= aXNpdGlvbg== Y2hhbmdlcw== b21hbA== Y2NjYw== IHBvaW50ZWQ= YXpl Ym9va3M= RFU= TGFtYmRh eGRm eGJl IG1lbnRhbA== IHJlY2VpdmluZw== IEl0YWxpYW4= IHN1YnN0YW50aWFs IFNpcg== dXNpbmVzcw== bWFqb3I= d2VldHM= IFN0b3A= IGhlbHBz IGhpZ2hsaWdodA== bWFyZ2lu d2lsbA== ZWREaWN0 IEFyYWI= QWx0ZXJGaWVsZA== Q3Jvc3M= UVNpemU= 6ZQ= IHVpbnQ= dmVydGVy IGFwcGVhcmFuY2U= ZGVwbG95bWVudA== WVk= cHVy eGNj IGFsaXZl IHBsYXM= UHJvcGVydGllcw== IGNsb3Nlcg== IGFueGlldHk= RXF1 IGJib3g= IEJVVA== IFNlbGVjdA== R2VuZXJhdGVk RG91Ymxl IGZ1ZWw= cm9sZXM= IFBhY2s= IEludmFsaWQ= YWNoZXI= IG1lZGlhbg== IHN0b3BwZXI= IGN1cHM= V1NHSQ== RG9uZQ== IGNvYXN0 IHRob3VnaHRz SFA= Z2VuY2U= bG90 IHR1cGxlcw== b2JieQ== ZGljdGlvbmFyeQ== aGFuZGxlcnM= bm9ybWFsaXpl c29uZw== IGluY29ycG9y IG5lc3RlZA== IGFwcHJlY2k= Jzs= bWg= b2F1dGg= IE1vZHVsZQ== IDU4 ZnJlcXVlbmN5 5oo= IGhpZGU= YWRq IE9seW1w IGNhbGVuZGFy RU1BSUw= Y29pbg== IHdoZXJlYXM= L3t9 IEFN CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= eGZj Q291bnRlcg== U0s= emls IFRyZQ== CiAgICAKICAgIA== IG9jY2FzaW9u dXJzZGF5 IG1lcmVseQ== aW5lcg== ZW5kYQ== IHVuaXZlcnM= IGNsYXNzaWZpY2F0aW9u IGFsbG93aW5n IGh1bWFucw== 56S6 Ym93 IENpdmls IGRvY3Rvcg== IFJldg== PXsi Tkc= cmVuYW1l YWxh IExpbms= aXZvdA== IFN0YW5kYXJk IHF1aXQ= IGFjdG9y V2VpZ2h0 IGNvbXBldGl0aW9u eGVj IEZyaWRheQ== IGV4Y2Vzcw== IGF0dGVtcHRz UGFja2FnZQ== IFZBTFVFUw== cmFkaQ== IDU3 bWVkaWFu IFBsYXllcg== IGZpbmc= YWhvbw== cG9zdHM= IEpvc2VwaA== IGNhc2g= IHBpZA== IDEwMDAw RGVjaW1hbA== IHdpbm5pbmc= IGN1cnJlbmN5 IHZpc2lvbg== IGRlZmlj IHN5bWJvbHM= IExlZw== ZGVzdGluYXRpb24= aGg= IEdyZWVr Ymxpbmc= SGFuZGxl bXV0YXRpb24= Q2FyZA== aGx0 cmluaw== IGNvdW5zZWw= IG5hbg== IENhdGg= Z2V0YXR0cg== Y292 bG9jYXRlZA== IGJydXNo RmlsbA== ICIpKQ== KCldKQ== LS0tLS0tLS0tLS0= IEVORA== 5pys LS0tLS0tLS0tLS0tLS0t IHJlbGlnaW91cw== Z3Jlcw== eGRh cmllbnQ= YWtz ZmxhdHRlbg== IFdoZXJl IGNoZW1pY2Fs ZWNobw== IEdQSU8= YWNlbnQ= YXVj IG1hZ2F6aW5l 6L+b c3VwZXJtb2Q= R2Vy 55k= IHR3ZWV0 bGVhZg== bXBo IiIs aWFsZWN0 IHRlcm1pbmFs IGNvbnRyb2xsZWQ= KXsj TW9uaXRvcg== IEFM IGFwcGFyZW50bHk= IFNlY3JldGFyeQ== IHBpcA== IHNpemVz IGFuY2hvcg== IExJQ0VOU0U= MjAwMw== c3VjaA== IEJlcw== c3BlY2lhbA== IFNlcmllcw== IGZyZXF1ZW50bHk= bGl2ZQ== MDA2 dGVybXM= IE1vbnQ= KCcj cG9vbg== IENoYW5uZWw= RElSRUNU Z3Jlc3Npb24= 5o8= IGFsaWFz IEJ1cg== IFdpbg== QVRU IDYwMA== RGV0YWls 5oGv XT09 bXVzaWM= YWxidW0= IHZhcnM= aW50ZXJmYWNlcw== bXNncw== 5b2V bWV0cnk= IGRldGFpbGVk MDA0 IFN0YXR1cw== IHZhcmlhbnQ= IGltbXVu 5omA RGF5 IHdpbnRlcg== IGxvdmVk IGhhbmRsaW5n Y3NyZg== IGVudmlyb25tZW50YWw= Picp d2luZA== IGV4cHI= IHJlY29nbml6ZWQ= MjEw V2lsbA== ICAgICAgICAgICAgICAgICAgICAgICAgIA== IFBhbg== IEpvZQ== eGRj IHRlY2huaXF1ZQ== U2hlZXQ= IHNwZWN0cnVt 6aG1 aWVyYXJjaHk= U2luY2U= ICgk INC3 5LiK IHF1ZXJ5c2V0 Y2F0Y2g= ZHc= poI= dWxp IHLDqQ== V3RhZ2dlZA== Ym1j IG5hdGl2ZQ== IGJlYXI= Q2FsY3VsYXRl IHRvdQ== IG5vbQ== IGNvYWNo IFByb2R1 ZGVlcGNvcHk= dm91cw== fVxc IFNvdXJjZQ== IGVsZWN0cm8= IGhhYml0 UHJvdmlkZXI= U3RhdGlj Y2FzZXM= cXE= aXNkaXI= b3N0ZXI= IGxvYW4= IEluZGVlZA== IHNlZWs= QWRkRmllbGQ= b3Jp b2Rk IHVwZA== YXp6 IGRlY2FkZXM= IGRpZ2l0 U3VtbWVy cXVhbnRpdHk= IHR1bW9y MjIw YXNhbnQ= IE1hcA== ZmxpcA== IHF1YW50aXR5 Y2xvc2Vk bGVl IG1hZA== VEVHRVI= bmVzZGF5 UG8= V29ybGQ= dHJv cmVwb3NpdG9yeQ== IFNpbA== cmlmdA== IFBhc3N3b3Jk IHJpZw== IENvbW1vbg== c2F0 IGZ1cm4= IGRyZXNz IEZyYW1l IHJvdXRlcw== IGNoYXJhY3RlcmlzdGljcw== 0LvQuA== IGZ1bmRz bmdlcg== RXhwb3J0 IHNob3VsZG4= IHJlbGF4 TWVtYmVy SFM= ZGVn IEFub3RoZXI= Oicp IHNhdg== IHdpbGxpbmc= UkVBTQ== MTY3 V0k= IFN1Y2g= Zm9ybWF0cw== T2JqZWN0cw== YW1lbnRv SUFM 5bs= IGludmVzdG1lbnQ= IGludm9sdmU= IGdlb21ldHJ5 Rk9STUFU RVZU XCIs c2No INC8 IG1hdGNoZWQ= IHN5bnRheA== IGZhbWlsaWFy IEFmcmljYW4= UGF0dGVybg== U2lnbWE= IHBwcmludA== ZXNpcw== IGRlYnV0 IFRlbXA= IGFjdHM= IElOUw== c2Vuc29y 56ym IS0t R3U= TlY= eGRk IEF1c3Q= dGhlbWU= IHJlY29yZGluZw== IGdyYW50 IGhlbHBlcg== ZWI= cmFudA== INGC IGVuY3J5cHQ= 5bqm MDY0 IGljaA== IGVsZWN0ZWQ= IGFjYWRl IG5laWdoYm9yaG9vZA== eGRl IHRvbg== aGVtYXQ= YWxn IHNwb3J0cw== IGxvdHM= dW5jaGVk IGludGVycG9s IHRlbXBvcmFyeQ== Q09OVA== VmlkZW8= IFNvbA== IElJSQ== IEZvcmU= b3V0cw== IG5vdmE= NjUwMDA= IHByb3RlY3RlZA== QVNU IGJlYW0= IFdobw== b3V0ZmlsZQ== cGhyYXNl e1xc TE9BRA== IGVtcGhhcw== IGZvY3VzZWQ= aWxhcmx5 IEdsb2JhbA== RVNQ IGRlbW9uc3RyYXRlZA== MTY2 IHRpbWVy IHJlZmVyZW5jZXM= IGxhcA== aXRlcmF0b3I= IENvbXBsZQ== IHNsdWc= 6Z2i RVk= Y2hhcnM= IDY3 Rm9ybWF0dGVy dHlw IE9wdGlvbnM= eGVl IHN0b25l bWludXRl RmllbGREZXNjcmlwdG9y IG1hZ2lj 6K+3 IE1heWJl anVk cm9vbXM= IE1hdHQ= IG1lc2g= IEtpbQ== QWNjb3JkaW5n IGV4dHJlbWVseQ== TnVsbA== 0Kc= c3RhbA== YXJ0ZXJz IHNpY2s= IGJhY3Rlcg== IHJhaXNlcw== IHJldHJpZQ== Ulk= ZWRpdG9y IGV4cG9zZWQ= aWxhcml0eQ== IHRpbnk= cmFj Z2V0aXRlbQ== c2Vzc2Vk 44Go IGNvbWJpbmU= bW9zcGg= IFBsYXk= IEh1bWFu IDY4 bGF6eQ== aWd1b3Vz YWJi IG1lYXQ= ZXJuZXQ= IHN1YnNlcXVlbnQ= b3JvdWdo c3RhZmY= IEltYWdlcw== IFB1dA== dmlzb3I= Pyk= cnA= aW5hdGVk IHBlcnQ= KCIj IGFkdmljZQ== Nzg5 5L2N Zml4dHVyZQ== 0Yg= IEJhZA== IG91 bG9vc2U= IElM cHRpbWU= YXN0ZWQ= IHNtYWxsZXN0 U2hvcnQ= dHJhbnNsYXRpb24= IGNvbnRpbnVlcw== IFB5UXQ= IGZ1bmRhbWVudA== Q29tbWVudA== YXNzZXJ0Tm90 aW91c2x5 44Gv IGJlZ2lucw== IGRvbGxhcnM= IGFic29s bGluc3BhY2U= IGV4ZWN1dGl2ZQ== Y2VzdA== aXZh eGJi IGpzb25pZnk= IHNlcGFyYXRlZA== 7IQ= IG1z aXN0YQ== YW1t Z2Fw YXRvZXM= IExha2U= IHNjYXR0ZXI= IHZlZ2V0 cHJvZHVjdHM= IFJlcHVibGljYW4= ZW5jcnlwdA== IHNpbXVsYXRpb24= V2lu IFNvbg== cmlzZQ== MTA3 IG93bmVk IHRob3VzYW5k NjUw IHRoZW9yZQ== ZW52aXJvbm1lbnQ= IGFuc3dlcnM= IHN1YmplY3Rz IHBn IHF1YWQ= YnJhbmQ= IGZpZ3VyZXM= Ymdw ZWE= c3BoaW54 IHB1Yg== IHNoYXJlcw== MjA1 ZG9n YWdvbg== c2F2ZWQ= IFRpbQ== IFNE IGFydGljbGVz IGRldmVsb3Bpbmc= Y2hhcmFjdGVy IGRvbWU= aWdhbg== IE5vbg== IGNoaWNrZW4= IFN1cHJlbWU= cmljZXM= IFNvdQ== IGp1cnk= IGNvbW11bml0aWVz RGVidWc= IFZhbGxleQ== IGxhcmdlbHk= QU5HTw== IGJvdW5kYXJ5 IHdhdGNoZWQ= SGFy 5Z4= IGNyb3M= IHN0cmFuZ2U= IHRydWx5 MTQ3 IGFkdmFuY2Vk Qm9keQ== IGR1dHk= IGRpc2NvdmVyeQ== IGRlc2NyaWJlcw== IERhdmlz YXNjYWRl IE5Z IHVuZGVybHlpbmc= IGZpbHRlcmVk IGJvd2w= IG5pY2s= IENpcg== IEJhdHRsZQ== IFdoZXRoZXI= CgogICAgICAgICAgICAgICAgICAgICAgIA== IGRvbQ== dW5jdA== IHNldGF0dHI= IFRISVM= TW8= cmVwcmVzZW50 aGVn IEphYw== RVJU IHJldHJpZXZl IENPTlRS Ols= QW0= 4KU= IG1hcw== IHNlY3Rvcg== d29ya2Vycw== IG1haW5seQ== IHB1dHRpbmc= UG93ZXI= U29ja2V0 eWVsbG93 RXhpc3Q= IGluaXRpYWxseQ== 5ZCI Rm9yZQ== WEM= YXZhcw== IFN0YXRpYw== bWJlZA== OTAw UE0= IGxpc3Rh QUU= T3Vy Y2xv xI0= dW5h MjA0 IHBvaW50ZXI= IGZyYWdtZW50 YXJtYQ== IGZz cG9ydGVk cG9sbA== IFNwYWNl IENvcnBvcg== ZmluaXNoZWQ= w6hyZQ== IGFsbGVnZWQ= IEFuZ2VsZXM= IHJpZGU= IGJpbnM= IGRpc2FibGVk IGNhcGFibGU= R2VuZXJpYw== KV8= bGI= CgkJICAg Y3JlZA== IHJlYWRlcnM= MjAwNQ== IHRyYWNrcw== dnZ2dg== Sm9pbnQ= IG5lZ290 IFR3aXR0ZXI= VE9O VGlja2V0 IHBhc3Nlcw== IHN5bmM= IEFsZQ== KCcuJyk= bGF1bmNo TWFzaw== YnVuZGxl ZW5hbmNl IHdlbGNvbWU= aXphYmxl RXhpdA== c3RhbmRhcmQ= bXVsdGlwbGU= IHRyb29wcw== IEhpdGxlcg== cmlnZ2Vy IGJnY29sb3I= Y291cg== IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IEdhcg== IGFubnVhbA== c2Vuc2l0aXZl PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ== IGNyaXNpcw== OyI= Q3Vyc29y eGFm IElPRXJyb3I= IHRhbGw= ZXJn IENhbWI= IHBlcnNvbnM= IHBhcnRpY2xl 55CG Um8= b250bw== IHN3ZWV0 YW5ndWxhcg== V2hlcmU= VHViZQ== XF0p cXR5 c21v eGNk IGJyb2tl IHdhbGtpbmc= SEg= SGVy VkFS bGlz 5ZKM IGJvZGllcw== YXlsb3I= IEZvdXI= ZmVyZW50 IGJveXM= c3RkaW4= IHJlc3RvcmVk bWlkZGxl IEdpdmVu VVJDRQ== IHRlcnJpdA== ZmFjdHM= IENvc3Q= cmVuY2U= TGVn IFdoaWNo IGRpc2NyaW1pbg== YWxsZW5nZQ== cHJlY2F0ZWQ= S2l0 IGZpc2g= IGNvbnZlcnNpb24= dWRk cG9zaXRpdmU= Z3lwdA== IHRyZW5k IGJpZW4= ZXZhbHVhdGU= eGFi IEVkdWNhdGlvbg== IGFic29y cHJlZGljdGlvbnM= IG1hc3NpdmU= IE1vbmRheQ== IHR5cGljYWw= IG9rYXk= YXJ0aXN0 d2VhdGhlcg== YW5lb3Vz dHBs IFNhdmU= IGludGVyYWN0 IENoYW1iZXI= IGNoYXJnZWQ= ZGltZW5zaW9uYWw= cHJvbXB0 IHRydWNr QUxMT1c= IERldmVsb3BtZW50 TWVhbg== IGxpdGVyYXR1cmU= Y2FwaXRhbGl6ZQ== YmFjaA== IGV4Y2VsbA== YXJnbWF4 IDYz QXR0cmlidXRlcw== KT4= ZWFzdA== IGJz Y3Rvb2xz IExvY2Fs YWNpw7Nu IHdoZWVs IHBsYW5ldA== aHVtYW4= dnQ= d3Jh IGJhbg== bHlh aXpvbg== ZGVjaW1hbA== IGZseQ== cGVyZm9ybQ== cGVuZGluZw== cHJpb3JpdHk= eGVh RWRnZQ== IHN1aXRhYmxl IHNjZW5hcmlv QU1QTEVT IEVudmlyb25tZW50 cmVtbw== IENhcmQ= c2V0R2VvbWV0cnk= IGF1cw== IGNyYWNr IGd0 IG1pbmk= c2VyaWFsaXplcg== IGRlbmllZA== RXh0ZW5zaW9u IHdlcmRlbg== eGxz IENhc3Q= IE1hcmc= YXZpZA== QU5O IHNpbGVudA== IG5lY2Vzc2FyaWx5 IGNvbmNlcm5z 6L+U5Zue UkY= aGw= dGhhbg== IEFQ IG1lc3M= IG1hbmlw IGhvbWVz Zng= 8JE= IDE5NzA= YXh5 IGNsb3Nlc3Q= MjMw QVRFUw== IDY2 IHRoZWFubw== IGxvbg== bnRlc3Q= IHZ1bA== Y29tYm8= IGV4dGVuZA== 5YyW Y29sbGVjdGlvbnM= RGVt RGl2 V3JhcHBlcg== cm9n YXBzZWQ= IFdvcmQ= IG9wcw== 56iL Q3JlZA== SG9y dHJhY3Q= em8= IEF3YXJk IEZlZA== IGFsYXJt c3Ryb25n aHlwZXI= ZXN0ZXJkYXk= IGNocm9t IGRlc2lyZQ== IFJPT1Q= LFs= IGZsbw== bWVudGU= IGNvb3Jk IGRpc3Rpbmd1 IGV0aA== IEJyaXRhaW4= UGF5 IGxhbmd1YWdlcw== cmFjZQ== IGFic3RyYWN0 IDE5OTQ= IGluY2lkZW50 4pe8 Y2FjaGVk IGdh IE1Q IGV4cGFuc2lvbg== bW9uZA== IHJlYWxpemVk IG51bWVyb3Vz IGFyY2hpdGVjdHVyZQ== 4pe877iP RklM XFs= b21w aWxsZXJ5 eGJj IHBvc3NpYmlsaXR5 IGNpdGl6ZW5z IGVwcw== SU1BR0U= QkQ= YnJpZA== IGdyYXY= w6Fu Qnl0ZXM= IHdvcnN0 IFR1cm4= IEN1cg== IEhv IGRpc2FwcGU= IG1vdmllcw== IDg1 OTA1 TXM= ZXZlcnk= bGFpbg== bmw= d2luZw== bWVldGluZw== JyldKQ== MTA4 IHNob3VsZGVy Qm9hcmQ= c3Zu IGFjaGlldmVk bGVwdG9u IHBpY3R1cmVz aWNhbg== IGV4aGF1c3Q= IHJvc2U= IGNvZGVz aW5pdGU= aW5mb3JtYXRpb24= b2N5 IFZpY3Rvcg== IGRlY2lzaW9ucw== IHBvbGl0aWNz IHJlc2VhcmNoZXJz IHVuZGVyc3Rvb2Q= U2VxdWVudGlhbA== RXZlbnRz VW5kZXI= IHRi IHNraWxs IHZpY3Rvcnk= IFR1ZXNkYXk= IEpvaA== IG5ldXI= bWF4aW11bQ== IGNvbW1pdHRlZA== IGRlY2xhcmVk IE1vcmVvdmVy TXI= IHRocm8= IHN0ZW0= dHJhbnNwb3J0 R2V0cw== IGNvbmo= IHByb3Rlc3Q= IGNvZmZlZQ== YXBwb2ludA== c2VsZWN0b3I= TVNH 5pel IHBlcnNwZWN0aXZl IGNlcmU= IGNvbmNl IE1pY3Jvc29mdA== IFJlc291cmNl XCk= IGFtYXo= IGV1 IEFucw== IERpZA== IHJlY3Vycw== aWdyYXRl IHdvcnJ5 cm90YXRl IFRva2Vu IEFwaQ== cmVzb2x2ZQ== dXRpb25hbA== UXVhbnQ= IGNyaW1pbmFs IGFzcGVjdHM= eGw= IFNhdHVyZGF5 IDE5OTU= IGhlYWRz IFBhcnNl IGNvb3JkaW5hdGU= IGFv YXN0eQ== JykpKQ== IG9yZ2FuaXphdGlvbnM= IERhbmllbA== Zm9ydHVuYXRlbHk= IGNhdGFsb2c= IHVp IGFwcHJvdmVk IFBlcnJ5 IENoYW1waW9uc2hpcA== YmVj IHJlcGxpZWQ= aXJ5 ZW5kYW50 fX0s cGFwZXI= YXRp IHJnYg== MjQw SUxE c29mdG1heA== Q0c= UXVlc3Rpb24= cm5u IElyYW4= IFdT IHNvbWV3aGVyZQ== IFJlYWw= RkZGRg== Y2FtZXJh 5qw= IGRpc2NvdmVy aWdodGVy ZG9vcg== YWludHk= aWdv cXVldA== IHRlbXBmaWxl IHN0YW5kYXJkcw== IMKr IGtpdGNoZW4= VGlw ZnR5cGU= cmc= IGRhbmdlcm91cw== IGZn IGxpcA== IFBhYw== IFJlc3Q= IGNlbnRyZQ== IExvb2s= X1s= IHNpcg== aW1vbnk= 44Gm Y29udGVudHR5cGVz IENhcm9saW5h REpBTkdP 5L2/55So Ymlhbg== eW91cg== aXNpbnN0YW5jZQ== Y29udHJhY3Q= IHBob3NwaA== IGF1dGhlbnRpY2F0aW9u ZnJhaWQ= 57uT a2Vz b25uYQ== IERvZXM= Y3JlbWVudA== c2xvdHM= Oig= SnNvbg== cmVhbXM= IE1ycw== MTU0 VFlQ IG1ldGFi IGNoZXN0 IGFzc2lnbm1lbnQ= R0VO U3VjY2Vzcw== YnJvd3Nl IHB1bXA= aWNpbmc= IHdpdGhkcmF3 IGRlZmF1bHRkaWN0 UlM= 66E= aW1hdGVseQ== Wydf IGRhdGFmcmFtZQ== QVRVUkU= Y3VzdG9tZXI= dmFyaWFudA== IE1vdmU= CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg RklFTA== aXJjcmFmdA== TUVESUE= IGluZGVwZW5k b3Npbmc= TG9vcA== c2hvcnRjdXRz 55uu YXZhc2NyaXB0 Y2F0ZWc= bGFzcw== w6Y= IHB1c2hlZA== IG1s IG5vdGljZWQ= SUNFUw== dmVyc2lvbnM= 0L7QvA== IENhbmFkaWFu Lis= IGNlbA== IHNlcA== QVRUUg== RU5BQkxF UE9JTlQ= IG1lYXN1cmVtZW50 bGFwc2U= RmxvYXRGaWVsZA== LDpd eWllbGQ= IGNvbnRybw== TGlu c2l0 IHNpZ25z TEFOR1U= IGJvdWdodA== IFRFU1Q= 5Z6L RG9tYWlu TGluZXM= Z2x5 IG5s IHJ2 IG1lbA== c2NyaWI= d2Vic2l0ZQ== Q09VTlQ= 5Y+C RW5naW5l KSM= IGxvb2t1cA== IGF1ZGllbmNl dmV0 ICAgIAogICA= IG5ld2x5 0L3Qvg== RGlyZWN0aW9u 56s= IG1hcmtz IGNvbnN1bWVy IGNocm9uaWM= IENoaWVm REVM 44Gf IGtpbmRz QXBwZW5k SGFz Xyk6 ZHluYW1pYw== aWx0eQ== IHByZWZlcnJlZA== IGFidW5k IDYx ZGVjb2Rlcg== IHN0cmlkZXM= YWxhcm0= IHJlaW4= ICk7 IGV4ZWN1dGVk Y3VsYXI= IGJvbmQ= IGdyYW4= Y2x1c3RlcnM= J10pOg== IG9icw== MTE0 SW50ZXJ2YWw= RGlzdGFuY2U= IGFwcG9pbnRlZA== TUFO aGFk dXNldA== IGZvdW5kZWQ= ICAgICAgICAgICAgICAgICAgICAgICAgICA= dXNhbA== IEdyYW5k KF8oJw== IGRlY3JlYXNl IG9yaWVudGF0aW9u cGl4 IGJhc2tldA== ICgqKg== ICAgICAgICAgICAgICAgICAgICAgICAgICAg cHJvYmxlbQ== QVJL aGVudGljYXRl Piw= aW5oZXI= IGZhbnQ= IG54 IFNpbmc= IE1E IGNvbGxhYg== Y29ycHVz IGNyaXRlcmlh UVJlY3Q= XyI= YW5nbGVz UG9zaXRpdmU= Vk0= cHJvZg== Y3VydmU= IHJlZnJlc2g= IMKj SG93ZXZlcg== IEtpbmdkb20= VG9vbHM= IGNw IGZ0eXBl IGRj aW50b24= IEhvdA== IGFib3J0 IHZlcmI= IDYy YXR0YWNr Q2hhcmFjdGVy CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg TElOSw== QnU= VmFyaQ== bmFibGE= IERldg== YXZlbGVuZ3Ro SUg= 6IA= IHdyYXA= IGdlc3Q= IFB1Ymw= IFJvZw== IFdvbA== IHBlcm1pdHRlZA== RU5DRQ== d29ya2luZw== ZG9z Zmxvb3I= dGFrZQ== ZGVzaWdu IHNvbWV3aGF0 ZGlyZWN0b3I= SW5wdXRUYWc= JHs= d2lr Y2hpbmVz IHlvdXRo ZW5zdXJl IHNwZW5kaW5n bWFuYWdl cGFydHk= IENvdmVy IG1ldGF2YXI= 6L+H cm90YXRpb24= IGVwb2Nocw== UmVkaXJlY3Q= IGp1cmlz 5bu6 fS0= ZGV0ZWN0aW9u IFRyeQ== TG9zcw== IHBlZA== IGRpbm5lcg== eGNh IHNuYXBzaG90 IHN0cm9uZ2x5 QW50 RXZlcnk= d2Fu cmFjeQ== IENyb3Nz Zm9vZA== Q2VudGVy TGltaXQ= YWdu KCdb IFsq IEZhcg== IGFsZXJ0 IGJhY2t1cA== IGVudHJl IHBocmFzZQ== IGxpa2Vk K14= UHRy aXJhbA== IHNlYXI= IGFyZ3Y= 64uk dHU= IGhvdXNpbmc= YWJl IGNvbnRlbXA= IEJyZQ== IGxpc3Rpbmc= IHNwZWFraW5n IFRlbXBsYXRl bWY= IGlzbGFuZA== IGtub3dpbmc= Ym91bmRz IFNldHM= cXVhbGl0eQ== MjU0 IGF0dGl0dWRl b3JkZXJpbmc= IHN1cmdlcnk= bWFya2V0 IHZhbGlkYXRvcnM= IEF0bA== TElFRA== Qmk= ZXZlbg== IGJyYW5jaGVz SW5zZXJ0 Z2Vx IDY5 IG1hdHRlcnM= Q29uc3RyYWludA== b3VyZWQ= IG1hbmlmZXN0 IGhpc3RvcmljYWw= IHdpZGVseQ== dHJpcA== YWxpdmU= IEJvdA== 0LjRgQ== PSgn RGVuc2U= YWRqdXN0 IE11c2V1bQ== IFJhaWw= Zmx1eA== T0JE IG5vcm1hbGx5 KX1c bXVzdA== IGZlcg== IFRUeXBl IFNhdA== MTE4 IGFjcXVpcmVk IEZvcmNl bGF0ZXg= IGhhcmR3YXJl IOCk YW5jaA== IHJlYXI= IGFzaWRl IEtlbnQ= VE9LRU4= Y3JvcA== aW5saW5l IGZhc2hpb24= ICco IGh1cnQ= dXRvcmlhbA== dW5ncw== Y2xm IEJlZm9yZQ== YWRlbA== IHRlYWNoZXI= IGNyb3dk XSc= dW5pb24= IHN1cHBsaWVk IGFjY29tcGw= b2xvZ2lzdHM= VXRpbHM= TWE= bmY= X19f Li4uJyk= cGxhY2VtZW50 IHRyYWluZWQ= aW5jaXBsZQ== Kycv IFNwZWNpYWw= VlM= IHBvY2tldA== c2VydmF0aXZl SG9tZQ== aW5lbnQ= dW1tZXI= IENhbQ== IGZpbmRz IHNlbGVuaXVt IG1lYXN1cmVtZW50cw== 566X 5b8= ICIiOg== IHVuaXZlcnNpdHk= IHNwYW4= Q2Fubm90 IGNvbnN1bQ== c3ViZmllbGQ= U2V0dGluZw== IDQwOTY= IGNob3BwZWQ= RXZlbg== 6Zg= cmVtYWlu IHBkZg== IG1pcnJvcg== IGFiYW5k YWxhbmQ= IEZpbmFsbHk= IDE5OTI= TUVU aXRlc3BhY2U= 15XX bW9udA== gqw= IHNlbmRlcg== MTU3 IHt9KSw= b2xvZ2lzdA== 5YaF IHBvd2Vycw== 6L6T5YWl Zm91cg== Z2g= 5Z8= Zm94 IHRyYW5zZm9ybWF0aW9u eGZvcmQ= c25hcA== Q2xlYW4= IHRp IG5vc2U= IGNlcnRpZmljYXRl 5Zyw IHNhbXBsaW5n IFNob3VsZA== IHBob3Rvcw== cG9zcw== dXNlcGFja2FnZQ== aW5pdGlhbGl6ZQ== QVc= RmFzdA== d2F2ZQ== IGF2ZXI= dXR0ZXI= b3RoZXM= IHdlYXBvbg== IEhF c2hhcGVz MTU1 b3Zpbmc= IGludm9pY2U= ZW5kZQ== IGludmVyc2U= dWxhdGl2ZQ== IEhhbg== YXN0ZXJz c3BvdA== IENoaWxk IGJyaWc= eWxpbQ== INC/0YA= IGltYWdpbmU= bWVhbnM= IG1vbA== IEJlcm4= MjAwNA== IE9oaW8= 5aeL IHBhcGVycw== ZWxsZWQ= dWxpbg== UFJPVE8= IGV4cGVyaWVuY2Vk b2ly ICc6 IGNvb3Jkcw== YW5uYQ== IGNyZWFt IHRyYW5zZm9ybXM= fX1e IEFzc2VydA== IGFjY3VyYXRl cHVibGlzaA== IEFjYWRlbXk= 5qih Kik= aXk= IHNhZA== IEhvbg== IHhz IDk2 aXJp IHJvbQ== IHRvbmU= aXRhYmxl IGZsaWdodA== 44GM IHN2bnRlc3Q= QW5hbHlzaXM= JiM= V2hv bXE= DQogICAgICA= IGRlZGlj cGxhbmU= MzMwOA== VG9NYW55 IFdpbHNvbg== IGhpdHM= IGVuY291bnQ= U0VT Ym90aA== cnY= aW5jbHVkaW5n c3Ryb24= PSIl b2xsb3dpbmc= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IHNlcmlhbGl6ZXJz IHByb21vdGU= IHRraW50ZXI= UGFk IG5pYw== Y2htYXJr IHlhcmRz bmVlZA== YXVkaXQ= IEdlb3JnaWE= UHVibGlj b2Rlcw== dWJz IGNsaW1hdGU= IHRyYWRpdGlvbg== IG5vcm1hbGl6ZWQ= IENy ZW5zdXM= YnVmZg== TUFJTg== Y21n T2Zmc2V0cw== Lz4u IHBoZW5vbWVu VkQ= YWlyZQ== IEl0ZXI= bG9nb3V0 IHN1cHBvcnRpbmc= RW5hYmxl V2hpdGU= IGV2YWx1YXRlZA== IAogICAgIA== dmVsb2NpdHk= 0L3Riw== IGhvcml6b250YWw= IFByaW1l 0LXQvdC4 IFNFTEVDVA== JyUo ICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== PScnKQ== IFN0YXQ= IGVuZGluZw== U2VuZA== xaE= IGFmcmFpZA== IHJlc2M= U1RSRUFN QVRDSA== IHNjcg== UHJvamVjdHM= aGlwcw== 5os= 6Lc= aXRsZWQ= cm91dGVy IGR1bW15 IGNvbmQ= dGhleQ== IGluZHVzdHJpYWw= RmxhZ3M= IGhlYXZlbg== b3JnYW5pemF0aW9u IGJlaGF2aW91cg== ICfi IFJheQ== SU5QVVQ= IG9ibGln IHN1YnN0cg== bG9hZGluZw== YXdheQ== IHN1cnZpdmFs Zm9jdXM= bXg= IGNvbmNsdXNpb24= bGV0ZXM= VFRUbw== IHB1YmxpY2F0aW9u IGFuYWxvZw== IGNvbnNpZGVyaW5n IGNoYXJnZXM= TlVMTA== IHZhY2M= IFBvcw== aXNobWVudA== IGxvY2FsZQ== YXJyaWVy IERlZmluZQ== PSY= Q0FD TGlrZQ== IGF3YXJk YW50bHk= VVRD cmVjb2du IHRlbXBlcg== IHNsb3Q= Y29va2llcw== IG11bmljaXA= IHZhc3Q= IHNjaWVudGlzdHM= cmljcw== IGZyYWc= IHNwb3J0 IEVz Y29tbXVuaWM= Y2hlY2tlcg== IGJpZ2dlcg== cHVzaEJ1dHRvbg== b3NpdG9yeQ== PSM= 5ZE= bGV0b24= IENvbnY= ZnJhY3Rpb24= RnVsbA== dmlh IENpcmM= IERpZw== U2V0dXA= IGJhc2Vz cG93aGVn T1U= xIc= IERldGVy IEhhcmQ= IHN1YnNldA== cXVlcnlzZXQ= IGNvbmZ1c2lvbg== QmFuZA== aW50bw== KCJ7 IEh1bnQ= IHdlYXI= dWFsaXR5 ICxfKCc= RWxlbWVudFR5cGU= bG9zdXJl Xz4= YXNlcg== MDE1 IHJvbGVz IHZlY3RvcnM= UGFzc3dvcmRWYWxpZGF0b3I= IEpld2lzaA== IHJlcGxpYw== cmFnZQ== IEZhbGw= YWRkaXRpb25hbA== IE1hbmFnZW1lbnQ= IE1hdHJpeA== IHNvdXRoZXJu Ly4= cm9i IHRvZG8= c2VudHJ5 IDcz REVMRVRF QEBAQA== cmV0cnk= IGRlY29tcA== IEJvdw== 4oCQ IGNoYW1waW9ucw== VVBEQVRF Ly0= MTMz U0c= aXRpcw== IGJpZA== IGNvbnRlc3Q= ZW5kbw== IGRhdGFzZXRz ZWFybmluZw== QVBQUw== IGFydGlzdHM= ICJ7fQ== IEJh IGltcG9ydGVk UmVhbA== UHJvbXB0 WFhYWA== IGh1bmRyZWRz IEZ1cnRoZXJtb3Jl IE1hbGxvcnk= IEx5 aWduZWQ= IEFycmF5 SEVBREVS IGZvbnRzaXpl IG5lYXJieQ== RXh0cmFjdA== Iy0= VEhF dGNw ZW50aXRpZXM= IHJhYw== IHBvbGljaWVz RUNL 5Y2V YXR0ZW50aW9u IHZpb2xlbmNl cGF1c2U= d29ydGg= YW1p cGxheXM= 4oCdLg== IGFyY2hpdmU= VVNU oIA= aGVhc3Q= IHRlbXBsYXRlcw== cm9hZGNhc3Q= V2VzdA== cHJlc3NlZA== IGhvbGU= IGVzdGF0ZQ== ZWxscw== aXNob3A= IGNvbnNpc3Rz QXhpcw== bWF6b24= IEVneXB0 IGxlZ3M= UG9seQ== IHNpbGVuY2U= IEJlcmxpbg== IHdyYXBwZWQ= Q0FQ IHRpZQ== YXNzb2Np IEJpdA== b21lcw== IHVucGFjaw== IFRocmVl IG9ic3Q= U3RhdHM= c2tp IGZhbGxpbmc= bmJzcA== WENVSQ== 7Jo= IGFsaWdubWVudA== IHJlc3BvbnNpYmlsaXR5 Jywp IExp YXJlbg== UmVMVQ== cHJpc2U= cHJvZHVjdGlvbg== PSIiLA== IGZhYnJpYw== SHk= ICAK YWRhcw== IEhh cHJvZw== 0L7Rgg== XCIsXCI= Q1NT cnVn aWNNb2Nr ZWxsYQ== UE9T 4pSA4pSA ZXU= Zml2ZQ== dmM= IEhlYWQ= IG9yZGVyaW5n Q09NUA== ZGlzdHJpYnV0aW9u VG9NYW55RmllbGQ= WENVSUVsZW1lbnRUeXBl LCoq amFt dmFyZA== IGZlZQ== Y21zdA== IERFQlVH IGV4cGxhbmF0aW9u IGZpZA== dmVo IFJpZ2h0 d29ya2Zsb3c= b2NrZXI= IHN5bmQ= Kydf IGZ1bmRpbmc= YmV0d2Vlbg== IGNvbnZlbnRpb25hbA== w7g= c2VjdGlvbnM= IGxlYW4= YXRlcmFs cmVsYW5k 0LXQuw== U29ydA== bWVsbA== IFNhbmQ= IENhc2U= IHNoYQ== IGpldA== cmF3bGVy Zm9yY2VtZW50 MzMzMzMzMzM= cnN0 YW56 ZGV2ZWxvcA== cGFyc2Vk bmV1dA== IFlvdW5n IG1lcmdlZA== 6L+Z Vk8= XF0u IGhp IGFsY29ob2w= RWxlbWVudHM= IGhpc3Rvcg== ZmluaXNo T3JpZ2lu IFNhcg== aW5kZXhlcw== IENvbnN0 TEFOR1VBR0U= DQogICAgICAgICA= IGFzYw== IEJ1bA== IHlvdW5nZXI= YW5zYXM= MDAwMDAwMA== IENvbnZlcnQ= R1JPVVA= Rk4= 7Kc= MTc1 RklMRVM= IGRlY3JlYXNlZA== Q2xlYXI= eW5jaHJvbm91cw== RW5nbGlzaA== IFVrcmFpbmU= bWFucw== IFBhc3M= KCcnKQ== cm93dGg= IGNsYXNzaWZpZXI= IGNyYXNo 5byA MzIw VXNpbmc= 6YE= IAoJ MTA2 UmVsZWFzZQ== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= KSQu Qk9U Z2VuZGVy IGFkZQ== IGxpZXM= YXllcw== IE5F IERBTQ== IG1hZ25ldGlj cGF0VHVwbGU= IGRlcGxveQ== IFplYWxhbmQ= cmVoZW4= IGJj IGV2b2w= IEdFVA== MjIy IGFwcHJvYWNoZXM= bmV0d29ya3M= bWFyaWx5 TWFueVRvTWFueUZpZWxk IHRpZA== cGx1cmFs c3RyYXRlZ3k= bGVjdHJpYw== IG1vbGVjdWxhcg== IHdlYXBvbnM= Y21ndG9vbHM= IHByb24= IGJpbw== PScv IHByZXNlcnZl IFVuaXQ= cGxheWVycw== ZGlzcA== IGV4cGVuc2l2ZQ== 5Y+R dmxhbg== IGhvdGVs IGZpbmdlcnM= IAogICAgICAgICAgICAgICAgICAg IGluY29ycmVjdA== IGNsdXN0ZXJz IHZvbHRhZ2U= IGRlc3Ryb3llZA== VFo= dmlsYQ== IGZ1Y2s= IGhvbmVzdA== IFRS Y2tlcg== IHBsYW5uZWQ= IGFkdWx0 IGFidXNl ICoqJA== ZGVuc2U= cmVsbA== c3R5bGVz IHByb2ZpdA== ZW5zb3Jz SUJVVA== IFNlbmF0ZQ== aG9yaXpvbnRhbExheW91dA== fT0= 64o= IG1pZ3JhdGlvbg== IGNvbXBvc2l0aW9u YW5ueQ== c3Vic2V0 Li4uLA== IGNvdW50eQ== IGFsb25nc2lkZQ== IGVtcGxveWVl 55So5oi3 Y2lu ZGVycw== cmVjdXI= IGJvbGQ= dXJsb3Blbg== IFdpcw== IGhlcm8= IFlldA== IGRlc2t0b3A= c3lu dHJpYWw= IHZt IHZvYw== IHByb3Bvc2Fs IGNvYWw= IDE5MzA= Q29udGVudHM= OmBg QWJz aW5jaA== IHs6 IGF0bW9zcGg= IHVuZXhwZWN0ZWQ= RGlk IOKAog== YXp1cmU= dHJhbnNmZXI= IGxhdW5jaGVk IGNydWM= Y2hyb20= Y2hhbnQ= bW92ZXM= cmVncw== w6fDtWVz IHByb2Zlc3Nvcg== IHZlaGljbGVz IElNUExJRUQ= Q3Q= IGJsbw== dXNoaW5n w6Ry IGNsb3NlbHk= KCIs MjI1 IHR2 aXZpZA== IGNvcnJlbGF0aW9u 5rWL RHVyaW5n RmluYWw= aGRm c3o= YXRvbXM= IHdhdmVz IG1pbGU= YWNodXNldA== IGludGVuc2l0eQ== IGxvd2VzdA== 0LrQsA== IHJlY29nbml0aW9u bmV4 c2ls ZGV0ZXJtaW4= IFRocmVhZA== IHJlZnVzZWQ= bGVuZWNr aXBlZGlh IHRyaWI= IGluc3RydWN0aW9u IG1w SW5mb3JtYXRpb24= IFRodXJzZGF5 IFN0cmluZ0lP IE1lZGlj IHNvdWw= IHJlY29tbWVuZGVk YnJpZGdl bUFo IHJldm9sdXRpb24= IHBsYXN0aWM= IGNsaXA= Mzc1 Q3V0 SGl0 IHByZXNzZWQ= IGdlbnQ= IE1pbA== PT09PT09PT09PT09PT09PT09PT0= cGlwZQ== IG1vbWVudHM= UFJFU1M= Q29va2ll U2l0ZQ== a20= cm91dGluZQ== IFJlbg== IDE5NjA= VW5pY29kZQ== c3RhdGljZmlsZXM= IHRlY2huaWNhbA== IE1leGljbw== YWNodXNldHRz Z2Vs Y3JldGlvbg== Y29sb3Vy QVBQTA== fVwo IHJlbmRlcmVk QXNzZXJ0 IHRpdGxlcw== IHJvb21z b2xkcw== YXRlcm4= QU5DRQ== Z29yaXRobXM= QWNjdXJhY3k= IG5laWdoYm9ycw== MTMy UHJlc3M= IGhhdGU= 4oCY IHNvaWw= MjI0 QmFzaWM= 0L7Qsw== IHR3aXN0ZWQ= IHNuYXA= IFJlZ2ltZW50 IGNvbnN0cnVjdGVk IHJlbGF0aW9uc2hpcHM= IERpcmVjdG9y QWN0aW9ucw== a3RvcA== dGhyZXNo cmlnaHRhcnJvdw== Mzg3 IEFuZHJldw== IMO8 IGF1dGhvcml0aWVz SURETEU= SW1w IHByb3ZlZA== IEhP IFN0b3Jl c3RlaW4= IGNhbGN1bGF0aW9u 6Ieq TE0= Z21lbnRz IGZvcm1hbA== IGRpcmVjdG9yaWVz IHNlbnRlbmNlcw== UExBWQ== IGltcHJvdmVtZW50 IGVtYmVkZGluZw== Zm9saW8= TW9zdA== amQ= IHZlc3NlbA== IFsqKg== b21ldHJpYw== Y29tcGFu Y29ycg== c2VuZ2Vy IGRlcGVuZGVudA== bWlh YXNoZXM= c3RydW1lbnRz R3JvdXBz UG9wZW4= VHc= Z29sZA== IGVj IHRyYW5zbGF0ZQ== Q2VudA== IERhdGFGcmFtZQ== 4qyb4qyb aXNjYWw= IFBJTA== c3Vic2NyaXB0aW9u U2VsZWN0ZWQ= aWV0Zg== dXBsaWNhdGVz IGRlbGl2ZXJlZA== IGV4Y2VsbGVudA== TWFzcw== b3VyaWVy dXJhdGlvbnM= aWN0ZWQ= IHJlc3VsdGVk b3ppbGxh RGI= dGc= c2Vh IGluZnJh aWRm IFBh cmFpbnM= cHJpb3I= IE9yaWc= cGts IGZlZWxpbmdz IE1lYW4= MDAwMDAwMDAwMDAwMDAwMA== RkI= ZWx2ZQ== IGh1bmc= IGRlZmluaXRlbHk= IGh1bnQ= IE9w IGFwYXJ0bWVudA== IGludGVyYWN0aW9ucw== IGFjdGluZw== UGhpbA== IHBvdGVudGlhbGx5 RGF0 66U= IHRvcm4= bGlzdGVu 44Oz IHdpbm5lcg== QmFja2VuZA== 5L+h5oGv VGs= aGVlbA== aXJs Z2V0Y3dk IFJhbQ== MDE3 Y2VkaW5n IG91cnNlbHZlcw== IGRlY2FkZQ== IGNvbW1pdHRlZQ== IFdlZG5lc2RheQ== aHVz d2FydA== iJg= IGluZmVy IHJldmVyc2Vk IExFVA== b3N0aWM= IFRydXN0 U3BsaXQ= YXNzZXQ= b3BoeQ== IG11c2NsZQ== IEl0YWx5 eGllcw== YWRkbGU= IGFyZ3VlZA== Q29uc29sZQ== KFso MzAz w6lu cHJpc2luZw== IGRvY3M= IHBvcnRz Z2VuZXJhdGVk 5YWD IGFuaW1hdGlvbg== UGVu c2VydmluZw== IGFscw== IHJlc2lkZW50 IGxvYWRlcg== QU5Z b3ZlcmxpbmU= IGZpbGVuYW1lcw== UGh5cw== RGV0YWlscw== AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA= bW9iaWxl 6IO9 IENQVQ== IDcx IDk4 5LqG IHNjcmFweQ== IGV4cGVyaWVuY2Vz IG1pbGxpb25z IE1pZGRsZQ== IHt7 IHNlZWtpbmc= IHF1YW50dW0= IGRvdWI= IEphdmFTY3JpcHQ= IENhdGhvbGlj IGhhbA== IGhhY2s= IEZvb3Q= c2Nlbg== IENvbmZlZA== IHRyaWdyYW0= KSIiIg== IGhvdXNlcw== ZGVmaW5pdGlvbg== c2hvdHM= IHVwZ3JhZGU= IGVudGl0aWVz IGRyaWZ0 IGdyb3du IGVtcGxveWVk IEVkd2FyZA== IHNldHRsZW1lbnQ= IHN0cnVnZw== Q2FuY2Vs YnVy IHRvcnQ= Y2hkaXI= IHdoaXM= IEhJVg== IDE5OTE= MjAwMg== U2lnbmFs IE11bHRp dWx0dXJhbA== MTIx QVNI IHN0ZWVs UFJFRklY RXhwYW5k IHBldGl0aW9u Wlg= cmluZQ== ZW50cm9weQ== IFdvbWVu IFJlcHJlc2VudA== c3VpdGU= TGlicmFyeQ== UEc= IFBheQ== IEVO YW1waW9u IGRpZXQ= RmFjdG9y IE1ham9y Q2hpbGRyZW4= IGJlbG9uZ3M= IEluZGV4RXJyb3I= IHN1cnByaXNl 5YiX6KGo J1xc NTEx a2lsbA== 6LU= aXRhbg== c2VydmVz IHByb3NwZWN0 IHRyaWVz b3Blcw== IG1pbmltYWw= b3JkZXJlZA== 0LXQtA== bXNnaWQ= IGNvb2tlcg== JycnJycnJyc= RmFj SXNv Y3Bw aWdh b2RpdW0= IHJpc2luZw== IGNvbXBvdW5k IENvbnNvcnQ= IGNhcnJ5aW5n IHdyaXRlcnM= IGd1aWx0eQ== IGNhcmVmdWxseQ== UHJlcA== IHRhY3Q= IHRhbms= IGN1Yg== IHNzbA== IHRyYW5zbWlzc2lvbg== IGVkaXRpb24= IHByb21pc2U= QmFja2dyb3VuZA== T21lZ2E= WWVhaA== b29u IHB1eno= dmVydGVk IFJOQQ== T1JN IHByaW5jaXBsZQ== IGRvZ3M= c3Bl aW9uRXJyb3I= YW1pbmU= UnVubmluZw== IFNjb3Q= IGFzeW5jaW8= Y291cnNlcw== QW5vdGhlcg== SW1hZ2Vz IENS CgoKIA== IHNpbXBs Tm90ZXM= IG1vZGVz dGVjdGVk IGFuYWx5c2Vz IGltbWVkaWF0ZQ== 56ys IVw= RkQ= U2l6ZXI= IHJlc2lk bWludXM= ZmFpbHVyZQ== fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn4= Lyoq PiU= Ynpy cmlu cmVzdHJpY3Q= IHJlY292ZXJ5 IFBhaw== IGZsdWlk e30nLg== IGVmZmVjdGl2ZWx5 IHJlc3RhdXJhbnQ= cmFkaW8= IGNvbXB1dGVk 5L6L IGNvbnRyb3ZlcnM= REVS c291bmQ= IGFpcmNyYWZ0 YWxtb3N0 cm92ZQ== IGludmVudA== b3Rvbg== aXJr aW1t dG9v MjA3 aWFubw== IGNyZXc= MTU2 RXhpc3Rz IG9wZXJhdG9ycw== IHByb2plY3Rpb24= IGNvbW1vbmx5 IGJhdGg= IGludHJh 44Gq IFN0ZXZl IGxvc3Nlcw== IGFuYWx5emVk IG1lZGljaW5l IERJ b2t1 IGRpc3B1dA== IHBlZXI= IEZMQUdT XScs dW5pb3I= IFJvbQ== Q01E IFBhbGVzdGlu Ons= ZXVy aW5kYQ== MTk5OQ== aWlp Y2RvdHM= IE9yZGVyZWREaWN0 MzMwODIw UGFzcw== dHdlZXQ= aWNpZW50 IFR5 ZW5kbWVudA== bWFkZQ== aW50ZXJwcmU= dXNoQnV0dG9u IGRlbGltaXRlcg== IGNsb3Npbmc= IGtpbGxpbmc= IGVtZXJnZW5jeQ== IGd1bnM= YWxsZXQ= c3RycHRpbWU= YXJldA== aWJpbGl0aWVz bWFudWFs 77+977+977+977+977+977+9 QWxtb3N0 IGNvbnN0cnVjdG9y QWJvdXQ= IGNvbnN0cmFpbnRz QmVs dXRvcg== YWd1ZXM= IFNV 5Lq6 IEFydGljbGU= UGk= ZGVwcw== IGlzb2xhdGVk ZXJ0YWlubWVudA== IGFuZHJvaWQ= IGNvbmNsdWRl X18pKQ== dWx0eQ== IHN1Ym1pdHRlZA== IGVuY29kZXI= b21pbmF0b3I= IGhhc2hsaWI= 66Gc IFRvdXI= IFBM a2V5d29yZHM= IDc4 IFJldmlldw== cGVuZGVk Q0xJ IGZlZWRiYWNr IExJTUlURUQ= LC0t SGFzaA== dng= xZ8= IGNyb3A= IGJvbWI= IGluaXRp IENvdW50ZXI= 6YCa NDAx IGdkYWw= IDE5ODk= UHJvcGVydHlUeXBlU3Vi IHByYWN0aWNhbA== IGxlZ2lzbA== Pyw= cmVzdG9yZQ== IHVudXM= UHJvZ3Jlc3M= IFBsYWludGlmZg== V0E= bGJs cm9j dXJsbGli Y29uc3RydWN0 IExpZ2h0 IENoYXB0ZXI= IHJlZ3Jlc3Npb24= c2tpbg== IGdyYXNz IHNpZ25pZmljYW5jZQ== d2luZG93cw== IGNhcHR1cmVk 4pWQ4pWQ4pWQ4pWQ UUI= YXJvbg== IG1j IGxz IEJD IEdyZWc= IHhibWM= IGluc3VyYW5jZQ== IGluZ3JlZGllbnRz QmVjYXVzZQ== W1s= ZG9zZQ== bm9t fV0= aGVldA== dW5pc3Q= IERJUw== MTIzNA== dW1uaQ== IFBsb3Q= RGljdGlvbmFyeQ== IHZlcnRpY2Vz IHdlc3Rlcm4= IEluaXRpYWxpemU= IGV4cGxpY2l0bHk= Um90 Ym91cg== bGFt MTEz IHJlZmVycw== 0L3QsA== IGhhcHBlbmluZw== ZGFyaw== aWNvbA== IFdheQ== CgkJCg== IHRlbXBsZQ== IGl0ZXJhdG9y IHN1cnJvdW5kaW5n dXRkb3du PSIv aXNlbWVudA== bG9nbw== aW5lc3Nlcw== Q0hFQ0s= QWx0aG91Z2g= QXJjaA== IMOk IENvbnRlbnQ= YXBwcm94 bmVpZ2hib3Jz IGVmZmljaWVuY3k= aG9sZQ== IFByb2ZpbGU= SEVJR0hU IGFzc2Vzc21lbnQ= IExFVFRFUg== RmFrZQ== Z2lhbg== veaVsA== IGNvZA== IFVJ Zm9ydW0= UGVybWlzc2lvbg== aW1lZGlh IFJlc2VydmVk JiY= U29s VE9Q YWRpdW0= b3BlcmF0aW9ucw== 5ZCm IG1vdW50YWlu IHN1ZmZlcmVk IHNvdWdodA== dWJibGU= IC89 IHVybHM= Q1JFQVRF ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IGxlYWRlcnNoaXA= am91cm5hbA== bW9uZ28= aW5w cXVlcw== YXJpb3M= dmVydGljZXM= eHlnZW4= IGludm9sdmluZw== w6hz IE90aGVyd2lzZQ== Liks eW91dHViZQ== aXRjaGVz IHNhdmluZw== IHdldA== IG9uaW9u Ly8v Q0xBU1M= IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyM= IHZvbHVtZXM= WmVybw== IAoK IHdpbnM= IGRhc2g= IEFjY2Vzcw== IE5vcnRoZXJu IERyYXc= IGludGVybmV0 c3dhcA== c2hpcHM= IHZpY3RpbQ== 4pk= IFBD VGhldGE= bW92aW5n IHN1Ym5ldA== bm90aWZpY2F0aW9u TU1NTQ== IGFtcGxpdHVkZQ== KXw= RXJy YWxlcnQ= IGJpcmQ= IiIiLA== IERlcg== IERFUw== IGVuenk= IGNvbXBvc2Vk Y29uZmlncw== IGdsdQ== RW5jb2Rlcg== Wk9ORQ== Y2h0 IGRpdmlkZQ== IGJpb2xvZ2ljYWw= 5LqO PS09LQ== QUxMT1dFRA== VWk= YWxlcg== IHBpcGU= IGludGVnZXJz VkVM bW9y 5Zk= dWxzZQ== IHN0ZWFk IGNvbnNjaW91cw== IDE5OTM= MDAwMg== IGRpdmlz 5py6 IGFtb3VudHM= ICIvIg== IFdpdGhvdXQ= U09VUkNF IGRyb3BvdXQ= IEF1dG8= IE9TRXJyb3I= UUxhYmVs ZHJhZnQ= 56k= bGV0aW5n IHBkYg== IHNjaGVk IGhhbmc= IGdj MDA0MDA= b21ldGVy ZXhwbA== YXR0aWNl MjM1 IE1hc3NhY2h1c2V0dHM= KCY= Y2Vycw== bmF0aXZl emk= IOS4rQ== c2Vjcw== cm9jZXNz aXNvbnM= IFN0YW4= IG1hbnVhbGx5 IGhlbHBpbmc= IHJlcG9ydGluZw== IEJvb2xlYW4= U3VtbWFyeQ== IGJ1cmllZA== IHN0cmVldHM= Y29vcmRpbmF0ZXM= QW5nbGU= TkI= IHRw IHBsdWc= XSld IGNsb3RoZXM= SUNBTA== IHJlZ2lvbmFs IENvbnN0aXR1dGlvbg== 55Sf IGNi bGVhdmU= IGJvdW5kcw== IGZsb3Vy QVVU emluZw== IGJhbmtz IHByb3RvdA== ZW5jaWE= QUFB bGltaXRz IENvcnBvcmF0aW9u Ljwv cm9p Q0hP IGdvb2Rz IHRyaWFscw== IG1vcnBo QmluYXJ5 IGxleA== IEtFWQ== IGxvb3Nl IC8qKg== IGtleXdvcmRz 6K6+ REw= xIM= IEZvcmQ= KSkq IGhlYXA= IG1ldGg= cXVlc3Rpb25z dW5kbw== c3Bpbg== fn5+ YmVhdA== IGl0ZXJhdGlvbnM= TUlERExF cnVudGltZQ== YXJpc29u ICIq b3Rvcw== dXBpZA== Q2x1c3Rlcg== CiAgICAgICAgICAgIAogICA= IHJlcXVpcmVtZW50 VFlQRVM= KC4q TWFjaGluZQ== IG9t IG1vYg== Y3Rs IGZvcmdvdA== IHByaW1hcmlseQ== Y2FsY3VsYXRl IGlkZW50aWNhbA== IGNoYWxsZW5nZXM= IEV4YW1wbGVz VE9ETw== XuKIkg== ICcpKQ== IExpZQ== UmVhc29u ZmlsbGVk IGJsaW5k Mjk0 IGJhc2VsaW5l IHd3dw== IHN0cm9rZQ== IGNhdXNpbmc= IGV4cHJlc3Npb25z aXR1cmU= IGJi cXVhdGU= c3RhdGlzdGljcw== IDc0 REVE c3ludGF4 IMOX IHN0cmlrZQ== SmFu bWljcm8= cGl0Y2g= dHVy IFJvc2U= IFBvbGljZQ== IExvZ2lu aXR0aQ== bmVpZ2hib3I= IGFpbQ== IFNlc3Npb24= MDA3 IHJ1bQ== IG5vdGlmaWNhdGlvbg== IGFueXdoZXJl fX0k IEdlbmVyYXRl Q2hlY2tlZA== IHNlbnNpdGl2aXR5 IGdseXBo IENvbnNvcnRpdW0= Lygt bm9y bWVhc3VyZQ== YXVzZWQ= IH07 MTQ0 IGRpc3RhbmNlcw== Q29udGFjdA== IHZhcmlhbmNl ZGljYXRl TXVsdGlwbGU= IExhYm9y aWFj ICNA cmVzb2x1dGlvbg== dHJ1bmM= IFVzZWQ= IHN0cnVjaw== QUJJQw== IHBhY2tlZA== OmB+ IGJ1dHRvbnM= 6K6h dGVybWluYWw= U1VC TWVkaWE= IGZ0 IG1lbnQ= IFJvdW5k c3BpZGVy bG9ja2Vk QUxMRUQ= IGF0dG9ybmV5 IEFkZGl0aW9uYWw= UmVnaW9u IHN1cnByaXNlZA== ZGlmZmVyZW5jZQ== aWFyeQ== c3Vu 5ZM= IHRhc3Rl IGRlc2NyaXB0b3I= IFNwYW5pc2g= YmF0Y2hlcw== c2luY2U= DQogICAgICAgICAgICAgICAg cHRpZGU= IGxpc3RlbmluZw== IHJlZ2ltZQ== IHRlbmFudA== UGFja2V0 TWF0ZXJpYWw= ZXJhdG9y IGF1Y2g= IGlubGluZQ== IElyZWxhbmQ= IE1pYw== Y29lZmY= IDc3 IHNsaW0= b3Njb3c= IHJpYg== IG5lc3Q= Z2V0ZW52 XSkpLA== IGtleWJvYXJk IFNlcnZpY2Vz bmVzc2Vz IG5ldXRyYWw= IHNhY3JpZg== U1BF Z2ltcA== IExvdmU= c2V0RW5hYmxlZA== Y3JlYXRpb24= IENvbHVtYg== IFBlcmlvZA== IHJvdGF0ZQ== X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18= eW8= IHNwYXRpYWw= TkFN aGFzZXI= aGF2aW9y S04= UEFDSw== IGFkbWl0dGVk MTQ1 IHNtaWxlZA== IGZsb2F0aW5n TlVNQkVS IG1vbWVudHVt c2NyYXB5 QW1vdW50 ZG5z 5rg= YXJvdW5k YXNt dWxhcnk= Y3JlZGl0 Y2hlc3Rlcg== IDgwMA== SUNL IHNlZ21lbnRz IEFmZmVybw== TkVX IHRlbQ== IFNN CiAgICAK PT09PT09PT09PQ== OTk0 ZG9tYWlucw== IE1jQw== T3ZlcnJpZGU= ZGFzaGJvYXJk QlVU c3Rvcnk= IG9kZXI= Kydc IGltcGxpZXM= IEFic3RyYWN0 U2VsZWN0b3I= IEluZmFudHJ5 U0lURQ== IGdpZnQ= b2Nh bW92 IGludGVudGlvbg== REVY IENPUFlSSUdIVA== IEx0ZA== bWVkeQ== ZmFjZWJvb2s= VEhPTg== IHNtb2tl IGZ1bmRhbWVudGFs 4Lc= YW1pYw== YWNsZXM= bXBsZW1lbnRz c3BhY2luZw== IFJlY29yZA== 5pe26Ze0 KCcsJyk= dHBsaWI= 5Y+C5pWw ZHJp dGljYWw= YXNh MTY1 IDg0 IG9iamVjdGl2ZQ== IDkx IHdlZWtlbmQ= IG1lbWJyYW5l IMw= bXNnc3Ry IHBlcmlvZHM= IGVuY291cmFnZQ== YW5jaG9y IGZhY2lsaXR5 IHN1c3BlY3Q= UEFSQU0= MDA4 IGxvZ2dlZA== TEVT SVRI IDc2 IGhlbHBlcnM= IFdTR0k= Li0= LyQnLA== XV1b YXRyZQ== c3RyaQ== YXJnbw== MTI5 IHNjb3JlZA== IG9wcG9zZWQ= IGZhaXJseQ== IEZpbHRlcg== dmVydGljYWxMYXlvdXQ= U0I= IEpvbg== IG1pbmlzdGVy VW5pdHM= IHZlcnN1cw== 5a2X56ym IFVrcmFpbg== IGFic29sdXRlbHk= Rml0 ZmFy IGVpZ2Vu IHNldmVudA== IGNvbnRy IE1JVA== IGFsaQ== IHdlYXJpbmc= MTA5 ZXll cmVjaXBl IHBvc3RlZA== Iics Z3Vlc3M= b2k= aXp6YQ== bWF0bXVs 4oCdLA== IGhlYWRpbmc= aGVhZHM= IGxvc2luZw== RU5HSU5F Ljo= QW5z cHVyY2hhc2U= 5p+l YWxnb3JpdGht IGFkdWx0cw== IGxvY2Fscw== VEc= ZGxs aXNp IEdyaWQ= IDE4NjM= IHV0aWxpdHk= MTIzNDU2 IGpvdXJuZXk= ICos IGNsYXVzZQ== IGZlZWxz IGJ1c3k= c2VjdXJl QmF0Y2hOb3Jt VEw= Z3Vu aW52ZW50b3J5 IE5T IEZpbmFs IEZsb2F0 IHRlYXM= INCx YXV0eQ== IGV0cmVl IG1pc3NlZA== IGRpZmZpY3VsdHk= MjMy aGV3 IGRlcHJlc3Npb24= b2NyYWN5 IHVuaXZlcnNl IGFzc2lzdA== w6lt YnV0dG9ucw== IHNlbnNpdGl2ZQ== IHJlYWNoaW5n VGFncw== IEZJWA== IHByb2ZpbGVz SU5URUdFUg== IGlsbGVnYWw= c2l0ZXM= IE1BWA== Rk9STQ== IHdpZGdldHM= 5bCP IHNn IGlucGxhY2U= IGRlbnNl YXBo IG5vdGlmeQ== Q0NFU1M= IGxpcHM= IGNvbnNlbnQ= IEJ1 IEJvbg== IHRlc3RpbW9ueQ== IFRob3Nl IGNvbXBpbGU= IGFzc2F1bHQ= c2NoZW1l IHRheGVz IGZyaWVuZGx5 5bqP dW5kZXJsaW5l IHJlc3RyaWN0ZWQ= IFRlY2hub2xvZ3k= IFRyYWluaW5n 57w= IHBpYw== IENJ IGRlZmluZXM= IyMjIyMjIyMjIw== IHNob29r Z2VicmE= IHNvbWVob3c= IHNjcmlwdHM= U09DSw== VkM= cm96ZW4= IGJlbmU= IGRlc2VyaWFsaXplZA== IFRBQkxF IERD aXRleHQ= IGxpa2VsaWhvb2Q= IGN1dHM= IEp1ZGdl IGNvbmNlbnRyYXRpb25z Q29weXJpZ2h0 aW5qYQ== IGF1Zw== IE11c3Q= IEJvYg== IEJyaWc= IENocmlz VE9PTA== IElQdg== IEZyYW5rbGlu YWRlbHBo IGNhY2hlZA== IHN0b3Jt aWZlcg== IExldw== MTI2 MTcw IGFjY29yZA== IGludGVncmF0aW9u IERlbW9jcmF0aWM= wrE= aGVhcnQ= IGRlZmVjdA== IGNoYW1iZXI= IHNoYXJw Wzo6LQ== IGluaXRpYWxpemVy IG1vY2tlZA== IHdlcmVu YXNzaWdubWVudA== IFF1ZWVu Q1VSUkU= IEZyYW5jaXNjbw== IENhbWJyaWRnZQ== bWlzYw== c291cA== IHRvdXQ= ICAgICAgICAKICAgICAgIA== Y3JldHM= bWluaW11bQ== IGp1c3RpY2U= IGNvcnB1cw== IGV4cGFuZGVk IGJyZWFraW5n cG9wdWxhdGlvbg== IGhvc3Rz SW5zdGFsbA== b3JpZW50YXRpb24= aHo= IGVsc2V3aGVyZQ== VGltZW91dA== VW5sZXNz ZW5jb2RlZA== bWFjcm8= Q29zdA== e3tc IGJlcg== IGlp IDE2MA== IGxvZ2ljYWw= UFJPSkVDVA== Q0VQVA== IGN1bHR1cmFs 7ZWY Kycu aWF0aW9ucw== IDEyNQ== IGltcG9ydHM= IHNvbGU= IGNvbXBvc2l0ZQ== UkVG Y29uZGl0aW9ucw== IGRpYWJldA== IGhhcmRseQ== IEp1c3RpY2U= T1VUUFVU IHRvbW9ycm93 XSkpKQ== aG9ydA== c2F5 IGJhbmRz ZWxlcmF0aW9u IHRoaXJ0eQ== KCIu IGZpbml0ZQ== IEFkZHJlc3M= IERlc2lnbg== IGFmZmlsaQ== IHZpY3RpbXM= IHByaXZpbGU= aGludA== fSIs IHR6 IGF6 IGd1aWQ= IDE5MjA= cmVhdG1lbnQ= ZG9jdA== IFF1aWNr cm9kdWN0aW9u IE9wdGlvbg== IHN0YWdlcw== IGNsb25l IHRyaWNr IGNsZWFuZWQ= IG5vZGRlZA== IHBlcm1hbmVudA== 6YM= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IE5ldmVy IHN1cHBsZW1lbnQ= MTU4 Zmxhdm9y IGJ1c2luZXNzZXM= 5qyh QmVzdA== cHVsbA== IGNvdQ== IEls bmV1cg== MTUy Q29udmVydA== IHRyYWls eWVhcnM= 6K+V IGN5Y2w= IGxvY2tlZA== IHNpdHVhdGlvbnM= UGFpcg== VE0= c3BhcnNl 6rg= IHDDpQ== YXNp IFRha2U= IGhlbmNl IG9wdGljYWw= Z3JvdXBieQ== IGdyYWRl ZGVwZW5kcw== NDUw TUlT IEVx YWRkZXI= IDgx IGRlcGVuZGVuY3k= cGh5 IGNvbnRyaWJ1dGU= IGRvc2U= MjI2 IHJlZ2lzdHJhdGlvbg== c3BsaXRsaW5lcw== cHJvbQ== dm90ZQ== IHByYQ== ICgh IHN0cmV0Y2g= IENhdGVnb3J5 YXBweQ== Y29tcHJlc3M= MTM1 IGNvdXJ0cw== IHNjaGVkdWxlZA== IGhvbm9y IGVtb3Rpb25hbA== QkxPQ0s= IGRhcg== dmVjdG9ycw== IENhcmU= aWZ0aA== IHRlYQ== IGFzc2lzdGFuY2U= JCRcXA== IGFuc3dlcmVk T1JERVI= IGZlZA== IGluZm9ybWVk IGJsb2I= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== cm9sbGVk IHN1cGVyaW9y IG1hcmtlcnM= IGd1aXRhcg== IGRpYW1ldGVy IElyaXNo UGhhc2Vy cmFpdA== IFR1cGxl IGFzc2V0cw== Zmlnc2l6ZQ== IEthdA== IG92ZXJsYXA= RU5URVI= IHN0YW5kcw== IHBvd2Rlcg== YnVsbGV0 V0FSTklORw== dXRlbmFudA== IGJhcnM= IEFtYXpvbg== IERBVEE= aW5kaWM= IGpveQ== IGFkbQ== IEthcg== YXVudA== SVRT cmVkaXM= IGdlbmVyYXRpbmc= cmVjdGFuZ2xl IGludm9sdmVz IHBlbmFsdHk= UHJvZ3JhbW1pbmc= TWlzc2luZw== QXVn aGVhcA== IHNlZXM= cHJvZml0 IHF1b3Rlcw== IGhhbmRsZWQ= e30iLg== 44OI IEFkYW0= MjEx TlI= Zml0cw== ZGVtbw== ICck IGNvbXBlbnM= cmVhZG9ubHk= b2Zz IGVzY2Fw IGl0ZXJhYmxl SUlJ aGlnaGxpZ2h0 ZW1iZWRkaW5ncw== IHRlYXJEb3du 64qU ICc9Jyw= KSxc Z2V0dGVy IFZhbg== MjAz IGNvcGllZA== ZHJpdmU= aHVt IGxpZ2h0cw== IGFzc2VtYmx5 ICwn IGNhcmVmdWw= IGF1dG9tYXRpYw== Ym9uZQ== bHY= IAk= YXJv cmF2ZWw= IENTVg== IHNoYXJpbmc= PScl IGxhaWQ= Y29ubmVjdGlvbnM= 0L7Qug== IG9mZmVyaW5n 5Yqo aW1wbGVtZW50 dGFicw== wrY= IGF0aA== KCgt aXNtYXRjaA== IFJvYmlu IGJyaW5naW5n IEVYQU1QTEVT dG9kbw== IHRvbWF0 IGxi IExpdHRsZQ== IGVudGl0bGVk MTM0 IHJlcG9ydGVy IHJlYWxpemU= bGV2ZWxz UGxhY2U= IGV2aWw= UXRXaWRnZXRz IENvbXBvbmVudA== c2VyaWFsaXplcnM= IHNlYXNvbnM= TWF4aW11bQ== IGZ1bmN0b29scw== IHZ1bG5lcg== dWJ5 IHdvcmtzaGVldA== IG9wdGltYWw= cGFyZW50cw== RGF0ZUZpZWxk IGF0dGVtcHRlZA== 5qC8 IEFyZ3VtZW50cw== c2VjdXRpdmU= IGNyYXp5 QmV0 UHVibA== U0lHTg== XF4= eHA= IHRpbWluZw== b2dlbmU= YXBwaW5ncw== CiAK IHByaW50ZWQ= IGNvbmZpZ3VyZWQ= ZGVwZW5kZW5jaWVz VHJhbnNhY3Rpb24= IHNldHRsZWQ= IG9idmlvdXNseQ== 5Zmo Q29tZQ== b3ZlZA== 0LY= IGRpbA== IFdhdGNo b3RoZXJhcHk= e30s IFN0ZXA= IGRvbWVzdGlj VmVj Xzo= cGRi YWxsb2M= IHlhbWw= IFJ1bGU= IEdyZQ== cGxheWxpc3Q= dHJhZGU= RWRpdG9y IEVudHJ5 IHNvYnJl QVBQTElDQVRJT04= Qk4= IHNzaA== b3Rlcg== Y2hhcmc= IGNvbmNsdWRlZA== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg Pj4+Pg== IHByb2R1Y2luZw== UVVF 5Luj IGZyZXF1ZW5jaWVz IGludmVzdGlnYXRl IFJlY29yZHM= IGRpYWdub3Npcw== V09SSw== YWRlbHBoaWE= R08= IHNvYw== IG9wcG9zaXRpb24= TUVTUw== IFNFVA== IGFzc3VtaW5n bGVzc2x5 IE1BVg== 5Ye95pWw IHRlYWNoaW5n IHRvdXJuYW1lbnQ= IGFkb3B0ZWQ= ZXJr IFRheWxvcg== IENvbWI= IEdpdmU= IEtlbm4= Zm9ybWF0dGVy DQoNCgk= IHBheWluZw== aW5uZWQ= d3JpdGVyb3c= IENvbWlzcw== IGJ1bGs= bGlrZWx5 YnVyeQ== IFdhbGs= IEVU IDQwNA== IHRlZXRo IGluY3JlZA== IGNvb2tpZXM= IGV4YW1pbmVk IGludGVycHJldGF0aW9u 5pu0 IFNvdXRoZXJu IHR1 IG5vcnRoZXJu IGFkYXA= IGFwcGxpZXM= IG1lY2hhbmlzbXM= IHNlc3Npb25z IFBPU1Q= UHJlZml4 IFNhZg== IHZpZGVvcw== YWRkb24= c3ByaXRl Mjk3 ZGVwZW5kZW5jeQ== IHJlY29nbml6ZQ== IHBsYXNtYQ== SUZU IHR1Yg== IDk3 44G+ IGVzdGltYXRlcw== IGhhbQ== IHN1YmNsYXNz IHBpY2tpbmc= 6Zmk IGFycmVzdGVk a2Vybndpbg== ZW1l IOWI Y2hlY2tlZA== IGluY3JlbWVudA== IGdyZXk= IGFkamFjZW50 SmV0cw== TWFzdGVy IGV4ZQ== YmFja3dhcmQ= Q0hBUg== VW5hYmxl IFRlbXBsZQ== OmAu IFF1ZXVl R3JlZW4= IGRlcHV0 IFNlbmQ= IGdlbmV0aWM= LicnJw== cmVlcw== IElW IE1haA== YWlsaW5n MTE2 bWF0b3J5 IGNsYXNzaWM= IHByb3ZpZGVycw== IHByb2R1Y2Vy b3BlcmF0aXZl IEJveA== IHRvdGFsbHk= KSQs TWljcm9zb2Z0 ZmF0aGVy IFNp Kiop IEdhbWVz IDM2MA== IHBsb3Rz IGNvbXB1dGluZw== IE1lZGljYWw= YmluZGluZw== Kycs YmlydGg= IEJhcw== IGxlY3Q= IDc5 Z2VuZXJhdGlvbg== U24= WUU= IEhhcw== ZWxsaXRl IFRoZXI= bGVuYW1l IDE5ODg= U2VydmljZXM= IGNoYXJzZXQ= RUxM YWZmZQ== YW5ub3RhdGlvbg== d3JpdHRlbg== IGludGVsbGlnZW5jZQ== TUlERExFV0FSRQ== IFdpbGQ= IHJvbA== IGFyZ3Vl IGZsdXg= IGltbXVuZQ== 77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9 RW5jb2Rpbmc= IENvbG9yYWRv IG1lbW8= IGNvbnRyaWJ1dGlvbg== MTE3 MTQ4 IHN1bW1hcg== IGZlYXR1cmVk ZGF0YWJhc2Vz YXR1cmFsbHk= IGluc3RpdHV0aW9ucw== IGNvcnBvcmF0ZQ== UHJvbXB0UmVjbw== QnRu UGl4bWFw XSIp IFVQ MjA2 Ymxhc3Q= IHRyYW5zcGFyZW50 NDA1 VVJO DQoNCg0KDQo= IEtlZXA= ZWZmZWN0aXZl IGluaGVyaXQ= PSIs SW1n Znc= IEJ1c2luZXNz U0VE MTM4 YW5lb3VzbHk= IC4uLik= IHNjaG9sYXJzaGlw 6L2s QkFDS0VORA== IHRpY2tldA== IGFtcA== IGx1bmNo IFNvYw== IEVuZXJneQ== aWJyYXRpb24= QVJBQklD SURF NjQw b2NrZXk= IGJyZWFrcw== cnVwdGlvbg== IENvbW1lbnQ= 5L+d VlBOdA== c2NoZWR1bGVy c3F1ZWV6ZQ== eWFyZA== YW5nZXJz IHJlc3VtZQ== MzAy IHJlY2VpdmVy IGRpcnM= CiAKIAogCiA= VEVNUExBVEU= Y3g= Z2Fz Z2F0aGVy IG9o CgoKCiAgIA== YXRoeQ== IHByb3Bz IHN1cHBvc2U= dGVtcGVyYXR1cmU= IGV4cGVydHM= c29sdmU= 6rCA ICIuIg== IElU IGNoYQ== UkVU IG92ZXJ3cml0ZQ== IGZhY2lsaXQ= b25pbmc= IGR1cGxpY2F0ZQ== aW1v IGFzc2V0 IEVw MTg3 CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg c3BlY2llcw== IE1hbmFnZXI= IFN3ZWQ= IGVzc2VudGlhbGx5 REVWSUNF Q1k= enc= YWdhaW4= IE5leHQ= IExF IHZhbHU= IDE5NTA= IGdsYWQ= KyJc IGRpcmVjdGlvbnM= cmFuZ2Vz Z2V0dGV4dA== IGNvbnRyaWJ1dGlvbnM= T1RF IHJldHJ5 IHZhcmlhdGlvbg== IFBhcmxpYW1lbnQ= c2lnbW9pZA== V0lORE8= PiIp P1w= Wlc= IDEyNw== YW5nbw== aXBwZXQ= RU5T Tm90RXhpc3Q= IFRlbGU= IHRhbGtlZA== cGF0aWVudA== SU5TVEFMTEVE VHJpZ2dlcg== IGlubm92 IEZyaQ== IFdhcw== ZGltZW5zaW9ucw== IHJlbW92aW5n IG51bWVyaWNhbA== eGxpbQ== IC4uLw== IHRpZWQ= IHdha2U= IG1r IE94Zm9yZA== IHF1b3Q= IHF1ZXJpZXM= IHJlbGF0 IGFkdm9j IHByaW5jaXBsZXM= IHNsb3Bl YXNzZXRz IGRhc3M= ZXR0 IDE5ODc= ZXJydXB0 ZmZpY2llbnRz KD86 IGFubm91bmNl RVZFTlQ= IHB1cmNoYXNlZA== Kycp ICMjIyM= ZGVsaQ== IGJvbQ== IElseWE= KS8oLQ== 5ZCM IGRlYWxpbmc= IGRlbW9uc3RyYXRl IHVsdGltYXRlbHk= eHh4eHh4eHg= Ll0o IHNpbms= IHNwYXJzZQ== IHZvcg== IHJobw== IHBhcmFncmFwaA== IFN0aWxs dHJhY2tlcg== IG1vbGVjdWxlcw== IExJQUJJTElUWQ== IHByb3BvcnRpb24= bXVz dGlja3M= 2YQ= INGH IFRhcmdldA== IGFwcHJvdmFs IHJhZGljYWw= IG1hZ25pdHVkZQ== Uk0= ZmFu IGNp IGdvbm5h VGhyZWU= IHBhc3Npb24= bW9ueQ== IHByYWN0aWNlcw== IHByb2NlZHVyZXM= IGR5bmFtaWNz IHNz IE1vbQ== Kioo b2dn IEtlbg== IGhlYXZpbHk= IEphY2tzb24= IHRhdWdodA== IHBhcnNpbmc= IGhlbHBmdWw= IEV4cG9ydA== Lyg/ PSgi RXA= Rkc= RmFtaWx5 VVVJRA== IHdhc3Rl IHJlYWN0 cGVn dGh1bWJuYWls Zm9ybXVsYQ== IDE5ODY= IHdoZW5ldmVy IDgz dGhlbGVzcw== IGltcHJlc3M= IG1vZGlmaWNhdGlvbg== ZnJhaw== QWRhcHRlcg== U29mdHdhcmU= IHBlcmZlY3RseQ== IGFtYXppbmc= RGlm cmVsb2Fk aWNpZGU= aWVjZQ== YWt5 dmVsb3Bl bnN1cmU= IGludGVyZmFjZXM= TE9D 44K5 IGJyaW5ncw== IHBvdGF0b2Vz IGVuZ2luZWVyaW5n IG1lZXRpbmdz IG1hY3Jv QlVUVE9O R3Jh UlVO b3JzZQ== IGFubm8= IG1hY2hpbmVz IGRpc2FwcG9pbnQ= c3RhcnRlZA== IHRyYWNraW5n IHNlbGxpbmc= amVsbWVy IHJlY292ZXI= dWxhdGVz ZmZp MTYz QUNI Q29sb3Vy IGVzYw== YnVyZ2g= TW9udGg= Y2x1c2lvbnM= IFJhZGlv IGNydWNpYWw= dGlvbnM= enU= ICcm IFRvZGF5 IHN0YWJpbGl0eQ== dGVyZWQ= ZXhjZWw= IGludGVybWVkaWF0ZQ== IHZvbHVudGU= IGFsYnVtcw== IHJhcGlkbHk= aXRp IHN0dWNr IENPTA== IE1hdGg= IEJhc2lj MjI3 c3ltYm9scw== IGxpYnJhcmllcw== T25jZQ== IGRyaXZlbg== IEFwcGU= Ly8vLy8vLy8vLy8vLy8vLw== cm9jZXNzaW5n IHNib3g= b3Jlc2M= IGRvb3Jz Ym95 IDg4 IG1hcmtldHM= IGV2aWRlbnQ= IEVhc3Rlcm4= IGVuaGFuY2U= U291bmQ= Xz0= Z3Rr a2Vs b29zZQ== 0Jg= IGZhc2M= IGxpdmVy YWJldGg= IFBzeWNo IE1vc2Nvdw== KCd7 dXBkYXRlcw== IGRpc3A= cmVjaXNpb24= b3Zh IGtlZXBz IHdvbmRlcmZ1bA== TWFrZXM= ZXo= IM8= IHdvdW5kZWQ= IGJhdHRlcnk= IENIRQ== U3RyaW5nSU8= IGhvcnNlcw== IGNvcnJlc3BvbmRz IGluc3RhbGxhdGlvbg== Qmx1ZQ== UHJvY2Vzc29y R1BJTw== amFu IHJlcHV0 IGVwc2lsb24= YWdh IE1pa2U= IEVWRU5U IGludGVydmFscw== MTUz cmF3bA== cnVucw== cmFtaWQ= IERlc3BpdGU= ZGVjb3JhdG9ycw== 57Sg SW1wbA== cnVpdA== dWl0eQ== IGNvbmNyZXRl IHllc3RlcmRheQ== IE5vcm1hbA== IDg2 IDg5 IDky Z2FtZXM= IEFsbGVu IGluY3JlYXNpbmdseQ== IHN1ZmZlcmluZw== dmlr 6LA= 6Zw= KCl9 IENM IE1hc3Rlcg== dHJ1dGg= MTQ5 RU5UUlk= dG9jb2xz IENvbnRpbg== IGVuZ2FnZWQ= Y2lvbg== dmVuZG9y c3RpY2s= IFNwaGlueA== aW50ZXJlc3Q= cXVpY2s= IEVSUg== Y29sb3JlZA== IHdvcmtmbG93 YW1ibGU= IGVzdMOh IG9jY2Fz RmVlZA== INC90LA= d2F2 YWxldHRl ZGVzZXJpYWxpemU= IGZp YW1tYXRvcnk= IFt7Jw== c2NhbGVk YXVzZXM= IHNlcnZlcw== IHBvc3Nlc3Npb24= IHRlcnJpYmxl RkxBRw== bG0= 0Yk= IHJldmlld3M= IGVtaXQ= IGVnZw== IEFyZWE= IEt1bHQ= IFVSTHM= IGVsZWN0cm9uaWM= aG9t DQoJCQkJCQkJCQ== ZGVhZA== IDAy IHVuc2lnbmVk NDAz IGNvbmZpZ3VyZQ== YGAs YWxpZ25tZW50 w6ptZQ== TGF0 bm9tZQ== IGNhbmQ= IGNvdW5jaWw= Y2VlZHM= Z3JhZHU= IEFuZGVyc29u IHNlcmlvdXNseQ== c3VicGxvdHM= U3VyZmFjZQ== QXV0aGVudGljYXRpb25NaWRkbGV3YXJl IENoYW1iZXJsYWlu LuKAmQ== IGRhbmNl dWxvdXM= IFJvdw== IFJhaXNlcw== IExpdmU= IEVtYWls IGludGVydmVudGlvbg== UHJvYg== Y29weXJpZ2h0 VEVSTg== IFF1ZXJ5 IGVxdWFsbHk= Rm9v cWRt c3RyZW5ndGg= IHBlbmRpbmc= IGR5cw== ZXN0eWxl IE9r MjAy Il0pKQ== 4paA IHNlYXJjaGluZw== IEFwcHJv cnVwdGVk R29vZ2xl 7JeQ IGFjYWRlbWlj dWlz IHRlbmRlcg== IGF6YQ== IG1pbWU= YXNzZQ== b21lZA== b2tlcg== IHRleHRz UFJQ 5q2j 4pe877iP4pe877iP IGp1cmlzZGljdGlvbg== xb4= IFNhbXBsZQ== XSkpOg== IGJhY2t3YXJk IHBvc3Nlc3M= IGNhbG0= fSx7Ig== CgoJCQk= IExpbnV4 IGVnZ3M= dG9nZ2xl IHNpbmQ= IHdydA== aWdz cXVlcg== YWth IHBhc3NhZ2U= 0LDQuw== c3dpZw== IGNvbXBsZXRpb24= VGVtcGxhdGVz IGNvbXBhdGlibGU= IHJlc29sdmVk IGRpcGxv RmlyZQ== UHVi 4bs= 7Is= dmVydHM= IFJhbmdl IGNoYW4= ZmZ0 IHZhbG9y IG1vb24= MTU5 b3VjaGVy VHVybg== dm9pY2U= IDExMA== c2V0VXA= MzA0 MTM3 Q2xvdWQ= IHZlYw== Z25vcmU= IEFib3V0 T3BlcmF0b3I= Y3Vw IGNlcg== IFNoZXI= cXVvdA== IHN0dWRpbw== 0L7QsQ== R2l2ZW4= ZGVuc2l0eQ== bnY= IGFxdQ== IG1hcHBlZA== IG5p IGR1c3Q= IGx1aQ== KSlb IEdP IGNvbXByZXNzaW9u bWJsZQ== IGFjdXRl DQoNCiAgICAgICAgICAgICAgIA== UlA= IGVzcw== cG9pbnRlcg== UFJPQw== IEplcnNleQ== NTM3 SWR4 RGVmaW5pdGlvbg== 57uE VHJhZGU= IGdhcmxpYw== IGNvbXBsaWNhdGVk 0YbQuA== Z3Vlc3Q= d2F0 8J0= IGxu IGFwcGFy RVJZ IHRoZXJlYnk= bm92YQ== c2Vuc2U= IGFmZm9yZA== IEJyb29r IE5hemk= MjMz dGVjaA== Z2V0dmFsdWU= IEJlbGw= YXJ0cw== IGphdmE= bG9jYWxz IENvbmZlcmVuY2U= IEFsZXhhbmRlcg== IGFyYml0cmFyeQ== TEFC cmg= IEFCQw== IEZB YnV5 IHNpbXVsdA== IHdlYmRyaXZlcg== UmVwb3NpdG9yeQ== QWxtb3N0RXF1YWw= Jzw= RGlmZg== IOGA IGd1aQ== IHJocw== cml0ZXM= dmlzdWFs IEZpZWxkcw== IElzcmFlbGk= bWF0ZXJpYWxz YXR0YWNobWVudA== T0ZGU0VU QU5ORUw= SVpF Ym9i bWdy IG1hcmc= YXNzZWQ= IFBvc2l0aW9u SURFTlQ= IHJlZ3VsYXRpb24= cHJlZGljdGVk 6ZuG aW5kdWNlZA== ISk= YDo= ICMjIyMjIyMjIyMjIyMjIyM= IEFVVEg= SGVhbHRo Qm94TGF5b3V0 dHdpdHRlcg== ZmFt cHY= IGFp ZGlzcGF0Y2g= 5YWz KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg== VGVybQ== RU5HVEg= Kl17fQ== QXZlcmFnZQ== Q291cnNl IHRvdWdo aW1yZWFk IFBZ IFB1cg== IEhvc3BpdGFs Z3Jlc3NpdmU= IG9yZ2FuaXplZA== U0VSVg== YXB0dXJl IGV4dHJhY3RlZA== IEFnYWlu NjU1 IHRvbmc= YXRoYW4= IFJh bGlzdGE= IFhYWA== XFxcXA== IGNvbmZpZGVudA== IHBzeWNob2xvZ2ljYWw= IEJyYXppbA== NTAwMA== QmVu U0lH Yng= aG9u IExB cHJldmlldw== dGlja2V0 ZW5uYQ== IHJlbHk= IGRyZXc= IGhpbnQ= IGx5aW5n Y29uZHVjdA== IFF1ZXN0aW9u IEFzaWE= IFNwYWlu IHN1Z2dlc3Rpbmc= IGFwcGx5aW5n IOKJ IGxpZmV0aW1l RG9lc05vdEV4aXN0 QXVkaW8= Y2Fk 0ZY= YXJpYQ== IG5hcnI= b3dudA== IHNoYXBlcw== IG1vb2Q= IHBvcHVsYXRpb25z IGdyYXBocw== IGZhY2lsaXRpZXM= IHBsYXRmb3Jtcw== IHRlYWNoZXJz IGZldA== ZW50ZWQ= IEFyaXo= IFBERg== IExhdA== dXJlYXU= IEpvYg== IGludGVyc2VjdGlvbg== cnVubmVy YGBg T3B0aW9uYWw= IHN0YXllZA== R1JF UGE= IGNm IGZ1cg== IGJpYg== IGxvdWQ= IFNldmVy IEJyYWQ= bGRw dWxlaXJv MTc4 IG9wZXJhdGU= IEd1YXJk LCo= Mjgw U2lkZQ== VHJp dGlsaXR5 YXR0ZW1w aXNs IG5vcw== IERvdWc= IEludmVzdA== UkVNTw== IFN0dWRlbnQ= fSxc IGZvcm1hdHRlZA== bm9uemVybw== UkI= cm9zZQ== IGNocg== ZXhhY3Q= IHByb2Nlc3Nvcg== bWFya2Rvd24= SEVBRA== IHBhdGNoZXM= UGVyaW9k IFBST1ZJRA== IGNvbmNlcHRz IGZpZnRo IENhcHRhaW4= IHNsaWNlcw== REFUQUJBU0VT aWVzdA== IGdlcg== YWdhbg== dW5saW5r YWxsY2xvc2U= cGVyZg== IGhhc24= IHJlY3Vy SEFWRQ== Y29kaW5n dGFz Y3RpbWU= IHZpbmU= IGluZGV4ZXM= IGRvbWFpbnM= aG9va3M= VklFVw== ZGlk ZnJlZA== DQ0= MTI0 IFN0b3J5 bWF0aGZyYWs= IENsb3Vk IGJlbGllZg== IHRoZXJhcA== IGJ1cm5pbmc= cmVy ZXJhdGVk ICIiLg== ZW1pZXM= IEtvbg== Li4uKQ== IHN1cnZl Q29udGFpbnM= IGdyYWI= 5YiZ VHJhbnNwb3J0 IERpc3BsYXk= IHJlamVjdGVk QnJ1c2g= WVg= 4LY= IHBj IEFzdA== YXBpcw== IE5vcm0= IEZ1bmQ= SW5m IG9wZW5lcg== IGJvb3N0 IGVxdWF0aW9ucw== VmFsaWRhdGlvbkVycm9y ZmVlZGJhY2s= T1JNQUw= Ol06 TmF0aW9uYWw= c3g= KTpf IGJlZXI= IGNvbXBvdW5kcw== IDg3 IEFuZHJvaWQ= IGxpYnZsYw== UGhvdG8= Qk9Y V1JJVEU= MjYw 6ZU= IHs6Lg== bWFraW5n IGFncmlj IHRyYW5zZmVycmVk IGNhcHRhaW4= bm9ybWFsaXplZA== ZW5uaXM= IGluZHVjZWQ= 7KA= IHRyaW0= RGVza3RvcA== Y2FwdGlvbg== VENQ TGlnaHQ= Um91bmQ= YmlkZGVu Y3Vt KSkv IHNjcm9sbA== MTk0 RU5W cG9zdGdyZXM= QkVHSU4= IFBhY2lmaWM= R0g= d2ljaA== IENU aWJy IGF0dGVuZGVk TnVtZXJpYw== IFN0cnVjdA== c2Vuc29ycw== IG9yZGluYXJ5 IHJlY2VwdG9y IGRlZGljYXRlZA== a2I= IFNu J119 b2NvbA== SW5saW5l cm93aW5n aWtv cnVuaw== IFBlcmZvcm0= c3BsaXRleHQ= IGlubm9j 66W8 QUNUSU9O Q2xvY2s= Y3JhZnQ= c2l4 ZWxsZWN0 IHJvb3Rz IGNvbXBpbGVy UmVjZQ== IGRpc3RyaWJ1dGU= IDk0 IHJlcHJlc2VudGF0aXZl TmV3cw== 6YCJ IGRyaW5raW5n VHJhaW5pbmc= IGFnZ3JlZw== TW92aWU= UEs= IG91Z2h0 IGRlY2s= b21hdGlj IHNob3V0 IFJlZmVyZW5jZQ== IHBvbHlub21pYWw= YmFzZXM= IHN1cnByaXNpbmc= cGljdHVyZQ== IGJ0bg== IEZveA== cHRpb24= cGxhdGU= KFtdLA== dm9sdGFnZQ== b2Jqcw== IHNvbGFy VHJhY2tlcg== IG5sdGs= VHVuZQ== CgogICAgICAgIA== IHNtZWxs dXRlcnM= IFJldm9sdXRpb24= 0LjQvA== IHByZXNlbnRhdGlvbg== QWR2ZXJ0 5oM= 6rM= ZW50aQ== dW5lcw== IGNvbnNlcXVlbmNlcw== dXNjcmlwdA== YWNrcw== IGNoYXA= Y29zZQ== bnVtZXJpYw== IHBvbGFy e30p VU5L eHh4 IG9wcG9ydHVuaXRpZXM= Sm9pbg== d2ljaw== b25pYQ== IG14 aWdncw== MDAzMDA= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IERyb3A= IHBsdWdpbnM= IGNvbnN1bXB0aW9u IHN0ZXBwZWQ= aW5zdGFsbGVk SE9TVFM= 54mH U0NP dmF0aW9u IHRocm93bg== aWxleQ== IHBsZW50eQ== cG9uZW50cw== IHJlZ2lzdHJ5 UmVnZXg= IGFuZ3J5 Y29tcGxldGVk IG1pc3Rha2U= IEFuYWx5c2lz NjI1 RElDVA== Rm4= b2N0 b25kZXI= YXlh IyMjIyMjIyMj IGNsaQ== IHNjb3Jpbmc= IEV4cA== IHBlcmZvcm1pbmc= IGRldmlhdGlvbg== RG93bmxvYWQ= IGF3YXJkZWQ= TW96aWxsYQ== Ync= YmlyZA== YXJjdA== IGJhdA== b3BpYw== TWVtYmVycw== 6YeN YmlhbA== IHRk IGNpZw== KCcnJw== dHJhbnNpdGlvbg== IGRlc2NyaWJpbmc= IGN1dHRpbmc= RW52aXJvbm1lbnQ= REg= XC8= c2Rr eWFs ekE= IGZhY2Vk ZWRh aXJtcw== ZmlsZU5hbWU= IFNlYQ== IGJhc2ljYWxseQ== aW5nZXJwcmludA== TUlOSUFPRA== Qm91bmQ= RGE= Y2Rm Z2l2ZW4= xYI= 6Kg= IFNhdg== IElN Y29uc3RydWN0b3I= IHByb2Q= IGZsaXA= VFJBTg== IGZhY2luZw== IGludGVncmFs IEtvcmVh 5rA= 66A= IGVhdGluZw== IGZhbGxz Ky0= Q0xP Rk0= a2FwcGE= IFNvcnQ= dW1h IEZlc3RpdmFs IEVV IGVsbGU= IFRoaXJk b3RoZXJz w6dh IG11c2ljYWw= IEh0dHBSZXNwb25zZVJlZGlyZWN0 cnd4cnd4 IHRvbGVyYW5jZQ== XyIr ZmlzaA== bW9uZXk= 6YU= IGZpcmVk IE1T IHJvdXRpbmU= IHNhdGlzZmllZA== IHN0cmF0ZWdpZXM= 15nX IGJlbmVhdGg= VmlydHVhbA== IEpy RU5V Mjg4 b3VuY2Vk YXJtYWM= IGFza3M= VFJBSU4= IOye IGdhdGV3YXk= IHdoaXNwZXI= YWtp IHNlcnVt 5aSa aGVscGVycw== aW5jaXBhbA== IGJlc2lkZQ== SUxMVVM= IGNpdGl6ZW4= P+KAnQ== QmFs U3Vu IGludmVudG9yeQ== IGRvbnQ= IENhcw== IEJ1ZmY= cGFyYWdyYXBo MzMw NjQ4 MTcy IHBvc2l0 IHN0YXRpc3RpY2Fs SVNI Z2VuZXM= IGxpbmV3aWR0aA== IGFuc2libGU= WENVSUVsZW1lbnRUeXBlT3RoZXI= RGlj UHJlZA== cmVkZA== IGN5bA== IHdpZQ== cmliZXI= IHJlc2lkdWFs CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IFN0YXRpb24= MTQ2 dHJhbnNs IFNob3J0 YmJlZA== IG1lbWJlcnNoaXA= QWN0aXZpdHk= IHByZWduYW5jeQ== UVNpemVQb2xpY3k= ZHVl cGl4ZWxz IHJldGFpbg== IG9wZXJhbmQ= IGRpc2NvcmQ= IGxpa2Vz IGVtcGxveW1lbnQ= IG1lY2hhbmljYWw= cGllY2Vz IGFja25vd2xlZA== ZXNpYW4= bHl3b29k IFt7Ig== IGhldGVy MTQz IGFjY3VzZWQ= IGZvcmV2ZXI= R0dFUg== QnVs TG93 aG92ZXI= IGZvb2w= IGJ1bmRsZQ== aWdhdGlvbg== IGdheQ== IE5p IFVudA== IHJvb2Y= IHNlcnZlcnM= dHJhag== IGJyb3RoZXJz IGFjdGl2YXRl IGFudGljaXA= IGNvbWJpbmF0aW9ucw== IFNUQVQ= IG1haW50YWluZWQ= Um93cw== Y2xhaW1lcg== IEZvb3RiYWxs Qm9vbA== 7Io= IHR0aw== IGxhZA== IEZvcmVpZ24= IER1bW15 UmVzZXQ= U3Rhcg== SW50ZXJydXB0 ZXhlY3V0aW9u IFBlcmhhcHM= Jz4= TWVzaA== ZW5lc3M= IHRvaw== IGhpbGw= aWdpYmxl YW5nZWw= dmFscnk= IGRpc2NpcGw= MzA1 Z2VucmU= YXV0aG9yaXplZA== 5piv5ZCm cnd4cnd4cg== 6LE= 648= bmRyd3hyd3hy IFNpemU= ZW1h IEVjb25vbQ== VGhhbmtz IGRpc3R1cmI= IHJldGlyZQ== IGNvbmZyb250 IHN3YXA= IHN1cnZpdmU= IHJlc3RyaWN0aW9u IHN5bmRyb21l LltA TGFuZ3VhZ2U= IAoKICAg IGN0 IGZ1dA== aXN0aWNhbGx5 IE1vcmdhbg== YXJ0aWNsZXM= IEdh c2NpZW5jZQ== dHJpY2Fs IGNsYXNzaWNhbA== SW50ZXJuYWw= Rm9yd2FyZA== IG1vcmFs Y29tcGF0aWJsZQ== IHJvYnVzdA== 56m6 Ol0u aGVsbA== IGhpcA== aWxpbmU= IENvdXJzZQ== IENvbW11bml0eQ== VG9waWM= XX0s 55w= dXRv Y2VpbA== IGNsaW0= IHRydW5j TGlzdGVuZXI= Y2tldHM= IGhvc3RuYW1l IGVtb3Rpb24= bW90 IiIp aXphYmV0aA== IG1hbmFnZXJz IG1hcmtldGluZw== dHJhY2tz d3JpdGluZw== TkVDVElPTg== IGFkbWluaXN0cmF0aXZl R1U= Wlo= 5aaC aW50aA== IHRob3JvdWdo IFN0b2Nr IEF2ZW51ZQ== IENQ MjUz Y29ubmVjdG9y IEVudGVy IGV4cGxvcmU= Y2FuZGlkYXRl Mjcw XF0s bmll IFRyaQ== IG9yYml0 Y29tcGV0 IG1hdGhlbWF0 IGFydGlsbGVyeQ== IGluc2VydGVk IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj IGZhdm91cg== 6Zo= IHBhdXNl b3Vi dmVyZQ== IHJhdGlvbmFs IGFscGhhYmV0 bWVudGlvbg== IER1 ZnRw IHByb2R1Y2Vz IFJlZGlzdA== IGRpc2Vhc2Vz RmFpbHVyZQ== 4paR4paR IEZJWE1F dmV4 aW1hZw== cG9uZW50aWFs IHJlbGF0ZXM= Z3JvdXBCb3g= QVNB IGV2ZXJ5Ym9keQ== IGhhcnZlc3Q= IHJlZ2FyZGxlc3M= IGxlZ2lzbGF0aW9u QklO RXZhbHU= UEFHRQ== YmVhcg== cnNz IGRpZXM= aWRpdHk= IHBlcmY= IHplcm9z IFVuaWNvZGU= bGV0dGVycw== IHBvcnRhbA== IHByb2dyYW1taW5n IG3DoXM= U3ltYm9s VEVNUExBVEVT KCgi RFY= RWZmZWN0 bXY= aW52ZXJzZQ== IFN1cw== IGNvbmNhdA== IE1F IEdp cG9zYWxz IHVybHBhcnNl Y2hlY2tsaXN0 IHRoaW5rcw== TGluZUVkaXQ= aG9sYmFjaA== dmFibGU= IHRpcmVk IGNtYXA= dXNlcmlk aXRlcmF0aW9u IGZvcm1hdHM= IGRyaXZlcnM= IG9yZ2FuaWM= ICctJw== IENvbm5lY3Rpb24= Z2lk c2FsZXM= 5qE= aW5hdG9y IGZseWluZw== YW1hbg== PT09PT09PQ== TUVE SE9NRQ== ZGlnZXN0 IENocmlzdG1hcw== IGludmVzdGlnYXRlZA== R1k= Z290bw== bWltZQ== 4qCA IGNyaWVk dWxw cXVhcnRlcnM= aWZpY2FudA== aXRlcmF0aW9ucw== dWl0YWJsZQ== IGFuZ2xlcw== IGRlY29yYXRvcg== QUNDRVNT RklFTEQ= IHJvbGxlZA== Zmxl IHNwYXJr IGd1ZXM= IDAx IGRlZmVy IGFuZ2Vy U1RFTQ== IHJlZHVjaW5n cGF0Y2hlcw== IGRldGVybWluYXRpb24= IHBlcnN1 KV0u SHNw SUVT IGF2ZWM= ZGVsbA== YWduZQ== MDA5 IENhYg== IHJ1bnRpbWU= YXBwbGU= bW92aWVz 44KM IE5vcndheQ== Ii8= V29yZHM= a2Fu cm91bmRlZA== IFNFUg== ZXhwZXI= U1RN IGFueW1vcmU= IG1pbmlt fS97 IMO8YmVy U2NvcGU= b3JhdGU= IFt7 ZW1hbg== IGZpbGVwYXRo IHNjYWxlcw== IHNjYWxpbmc= U29mdA== RmVhdHVyZXM= Q1NW UFY= UGl4ZWw= 0J4= ZXNvbWU= ICcsJw== IENvcmU= dW5zaWduZWQ= IEJM IGFycm93 IDgy IHBhZHk= RU1Q Z2Fpbg== 0JI= IGdhcmRlbg== IFNxdWFyZQ== Iild IGFzc2lzdGFudA== VGhhbms= MTc0 c3VydmV5 IEplZmZlcnNvbg== RmFjZQ== YmluZw== c2FsdA== IEFMTA== IENybw== IEZha2U= YWNxdWlyZQ== IHJlc2lzdA== IGNvbXByZWhlbg== cmVhZHM= fX0o 0YDQsA== cmFkaWVudA== IGVwaXNvZGVz aXp6bGU= IG93bmVyc2hpcA== PyIs QnJvd3Nlcg== SEM= 0J8= IGNhYmxl Y29uc3RydWN0aW9u Y29lZg== YXNzZXJ0QWxtb3N0RXF1YWw= IGRlY29kZXI= ZGF0YXM= IGVsZWN0cmljYWw= U2hlbGw= IHNob290aW5n T1VS UmljaA== VEFH eEFI b2xp IGJlZWY= IHZvdGVz IE1pbGxlcg== IGFsZw== IDE5NDA= IG15dGg= KCkpOw== NjQ3 aW1ncw== IFN0ZXBoZW4= IFJvc3M= aXh0dXJlcw== IHRoaWNrbmVzcw== IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== 5Y+v5Lul aW5oZXJpdA== bGlw IGJvcnJvdw== IG15c3Fs ICdcXA== IHZpdA== ZW5kaWY= IGFzc2VtYg== c2hhZG93 IFx8 Z2Vvbg== Y29sbg== IGJvc3M= IHBheW1lbnRz IFJFQlQ= 7J2E SXRlcmF0aW9u RGVjaW1hbEZpZWxk IHByb3RvdHlwZQ== QW5u ZGFu dXU= ICcuJw== IGRlc2VydA== IGJlYW5z KCcvLw== IEZpdmU= IGVudHJvcHk= ZGlzY29ubmVjdA== IHByb3Zpc2lvbg== IGluaXRpYWxpemVk dmlzaW9ucw== Qnl0ZQ== b3VyYWdl IHZhbHVhYmxl Pycs R2F0ZQ== IE5hdnk= IHByb2Jl IGNsYXNzaWZpZWQ= QUREUg== ZG9lcw== IENvbnRhY3Q= IGF0dGFjaG1lbnQ= U2No IHJlbmV3 dGhpcmQ= IEVxdQ== IEpzb24= bWludXRlcw== VVRF IGhhbmRsZXJz IGNvb2tpbmc= IGNvbWJhdA== IERpY3Rpb25hcnk= IG1vbml0b3Jpbmc= SGV5 TEVOR1RI WVc= dXVt IGFtaW4= IGJpcmRz IENyZWQ= IGFkdmVudA== YmVhbQ== IG1hdHJpY2Vz bW9kaWZ5 5Y+Y c29jaWFs IGR1cg== IHN0dXBpZA== IENyZWVr IHZldGVy dWdnZXN0 IGNsZg== MTg1 IHR3ZWx2ZQ== aW5mb3M= aGlzdG9ncmFt YXNzZXJ0SXNJbnN0YW5jZQ== NjY2NjY2NjY= KV57 IHR1cmI= IFRpdGxl Y29uag== IEJhbA== LiIu IEFzaWFu IGZydXN0cg== ZHR1cGxl IHB1c2hpbmc= Q29tYm8= IHN1Y2NlZWQ= IGRlZmluaXRpb25z IGh5cG90aGVzaXM= XV0u bXI= b2ljZXM= dHVu IGJyZWVk cmFx IE1pZA== Y2xhdXNl Zm9ybWVy UkVD QVJHRVQ= IGNvbWZvcnRhYmxl IE1vdW50YWlu UlU= IGNhdGVn IExvY2s= IHNoaXBz IGNvbXBhY3Q= IDE5ODU= MTIy MjA5 IG9mZmljZXM= KCgo c2lnbmFscw== IEhvd2FyZA== QlVJTEQ= IEtleWJvYXJk IHJldmVhbA== Kylc U1VQ dmly IGRlbGlj IExhdGlu MTY5 aWdodGg= IGRlZmVuZGFudHM= IEhhbWlsdG9u Pi8= bXNl bWF0ZQ== c3Vkbw== 6ao= IGJu dWdoZWQ= MjA4 ZG9jdW1lbnRz UnVubmVy bG9zc2Vz IGRlZXBseQ== c29tZXRoaW5n SWRlYWw= Xycr aXR6ZXI= cGFyYW1l MTk5 Mzg0 IHByaXZhY3k= IHNlcnZpbmdz IGF0bW9zcGhlcmU= TWM= Zmli YXR5cGU= YW1heg== IERhcms= IFdhdA== IHJvdW5kZWQ= IDkz cGxvdHM= aGVhZGluZw== KSooLQ== IHN0cnVnZ2xl RW1iZWQ= SGk= IGJvdGhlcg== aXZhcmk= MTkw IGFjY29tcGFu IHJlYWRvbmx5 VVJMQ09ORg== Q0tN MzAx Y3Jvcw== d2Vycw== IEZhbWlseQ== ZW1hbGU= dmFsZW5jZQ== Y3JlYXNl Y29sb2c= cmVnaXN0cmF0aW9u 4paE IGNvbXB1dGF0aW9u QU5HRQ== QXNzaWdu IGNodW5rcw== IFByb2R1Y3Rz IHJvdWdobHk= Y2Fwcw== IFByZXM= IEdyZWU= IFN0cmVhbQ== IHNwb2tlcw== bWFuaWZlc3Q= IERldmljZQ== IG11bHRpbWVkaWE= UGVyY2VudA== IGJ1cmRlbg== U21hbGw= Z2Q= IGNvcnQ= IFdhbA== IFdhaXQ= XSlb aXRpb25hbGx5 U2VnbWVudA== V2hpY2g= Y2xlYW51cA== IGFycml2ZQ== 6aKY c2VjdG9y IGx1Y2s= IGxhenk= IHZh IiIiKQ== IFdlZWs= IEdVSQ== c2h1dGRvd24= MjU3 cHJpY2Vz IGNvbnNpZGVyYXRpb24= c3Zn XVxdLA== IGRyb3Zl RFE= aWVuY2Vz zrE= IEF1ZA== IEphaA== bWxpbms= bG9jYXRvcg== IGdyYWNl IERhdGFzZXQ= IEhhcnZhcmQ= aXE= aXRpY2Fs IHJlZGlz YW50YWdlcw== IHRyYW5zZm9ybWVk IGV4dGVuc2l2ZQ== ZnVuY3Rpb25hbA== IHJlbW92YWw= dWFy d25lcg== 5pk= IGdpYW50 IFRlbg== IE5vdGhpbmc= cHJldHJhaW5lZA== QVRPUg== bGVuZ3Rocw== LS0tfA== 5p2l 5Lya RGF2aWQ= IFRG IExJTkU= XSk7 b21tb2Q= c3Bhd24= RXhwZWN0ZWQ= IGxhd3llcg== fV57LQ== cmVxdWlyZW1lbnRz Q2Ft bGFn IHNhYg== IExhdGVy IE9z Ijpb IDE5ODI= U3ViamVjdA== IGRpZ2VzdA== aWRhZQ== IEhhcnZlc3Q= 7J2Y IHN1YnNlcXVlbnRseQ== JSUlJSUlJSU= LDos U2Nhbg== YmFzaXM= b3JpYQ== IG9jZWFu IGlucXU= IHJlc3RhcnQ= IG5t IEJvb2w= IFdhbGVz IGJvYXQ= IGZ1bmN0aW9uYWxpdHk= IGNvcm4= IGhhbmRsZXM= SW50ZWdy IGV4cGVk TWluaQ== SW1wbGVtZW50YXRpb24= IEp1bGll IGRvY3Rlc3Q= IFNwcmluZw== 6YOo Kl4= c3Rhbg== IGNoaXA= MTc3 IHN0YXR1dGU= IENvYXN0 ICItIg== IHJlbWVtYmVyZWQ= IHdpdG5lc3M= TUFTSw== VFg= YmVz IHRlbnQ= ZXhjaGFuZ2U= TEVWRUw= IHByb21pc2Vk IGludGVncmF0ZWQ= 8J+U b2dlbmlj IEVtcGlyZQ== IEZpbG0= bGlnaHRz IFRybw== KCJ7fQ== c2V0TGV2ZWw= SU5FVA== IGZvcm1pbmc= IEFzc2VtYmx5 QWRhbQ== enpsZQ== IHN1c3BpYw== 5rGC bW9tZW50 Q0FU RGVy DQoJCQkJCQ== IHRxZG0= IGVudGh1cw== d3JpdGVGaWVsZA== IHByaWVzdA== IExlb24= IHByb21pbmVudA== IFN1bW1lcg== YnVpbHRpbg== Olxc U291dGg= U2VsZg== c3RhYmxl YXJzZQ== IG94eWdlbg== IGdlYXI= IGNvcnJlY3Rpb24= c29sdmVy 6K+B IEhhcnJ5 IGluY3Vi IGJ1cnN0 IHJhcmVseQ== IGxw IGVhc2U= IEpld3M= Y2VwdGlvbnM= Uk9Q IGxvbmdlc3Q= IHBvcnRpb25z UGVyZnVtZQ== IHNwZWFrZXI= Y3Vzc2lvbg== INGE IGVhcm5lZA== VUJM b3Nlcg== aW5jdGlvbg== cmVjZWl2ZWQ= IGJ1bmNo IFRyaWFs IDE5Nzk= IE11c2xpbQ== T2theQ== dGl0bGVz Lz8= R29k SUs= dmFsaWRhdG9y IGV2ZXJ5d2hlcmU= aW5vaXM= c2VxdWVudGx5 IEFtb25n IExpbmVhcg== Zm0= Y2hhbGxlbmdl IE1C cXVvdGE= aWNrZWQ= IHdvcmtzcGFjZQ== IGNvbWlj U3Bpbg== IGNyb3NzZWQ= IENpcmN1aXQ= Q0FO Xz0n aGF0dA== IEFDVElPTg== IFBobw== YXRoZXJz IHdlaXJk IH19 MTYy IElOQ0xVRElORw== c2ltdWxhdGlvbg== c2Vuc3Vz aXc= YW5uZQ== IGZlcnQ= b3BlZA== IGFyZ3Vlcw== T3JnYW4= 5bqU aG9sZGVycw== IGV4YW1pbmF0aW9u IGhvcGluZw== ZW1wbG95ZWU= aXNjaA== aWN1bGFy IGdhaW5lZA== Y2hyb21l IDE5ODQ= MTk1 ZW5jZXI= bWF0Y2hlZA== IHJhbmRvbWx5 w6Ru Y2FwYWNpdHk= U3BpZGVy IG5lcnZvdXM= dGhybw== IGphY2s= IHRvcGljcw== UGxhbg== w6R0 IHJlZ3VsYXJseQ== IE1pY2hpZ2Fu IEV4dHJhY3Q= IGltcGxpY2l0 IEVSUk9S ICc+ ICh7 IENvbWU= IDA4 IGxhdWdoZWQ= U2hhZG93 IHJlbmRlcmVy dG1s IAoJCQ== IA0KICAgICAgIA== m+W7ug== IGRldGVjdG9y IHN0b3Bz IENyaQ== IHByb3Vk cHN5 IGVtYmVkZGVk bm9tYnJl IHBlcw== YWRlcnM= cGVjdGlvbg== IHJhbmdlcw== IEx1Yw== b2NoZQ== XSwn IFNlcHQ= IGhpc3RvZ3JhbQ== IHNvbGRpZXI= Y29va2Vy IENsZW8= IGRlZmVhdGVk IExlc3Nlcg== IFRvcm9udG8= XS0t Z2VudA== bWlsbA== enQ= IEFr YW50aQ== IGpz Z2VvbQ== Q2hhaW4= IDEwMg== IENlbnRyZQ== IFJlcHVibGljYW5z Y2FtcA== IGltcGxlbWVudHM= Y29uc3VtZXI= IEhE c2hw IHNvbWVib2R5 MTk4 IEFybQ== VGltZXM= IGdvdHRlbg== bXB0b3RpYw== IOyd IGJhc2tldGJhbGw= IGVuY291bnRlcmVk RE5B TWFs U3VpdGU= a25vdw== IGluZmVyZW5jZQ== YWdyZWU= YWdlbnRz Y2tv X18nLA== b3JlbQ== IER1bg== IG9yYW5nZQ== bWlub3I= bW9sZWM= IGltYWdpbmc= KFsoJw== 44GL IGRlc3Blcg== IERlY2ltYWw= KTw= 2YU= IGdz IGNvbnNlY3V0aXZl MjM0 RVRIRVI= Q29va2luZw== RVhQ IGNvdmVyaW5n IG9jY3VwaWVk Q1VSUkVOVA== VW5z Zmx5 d2FudA== IGRpbg== IGxhbXA= YmVycnk= MTM2 IGNvZGVjcw== SVNJTkc= IGZld2Vy IFJlc3VsdA== U2NlbmU= IEVYUFJFU1M= IHZvdGVycw== RXhhbXBsZXM= d3A= 4og= IFNUUg== IHN0YW1w IFJlc3VsdHM= IGRlc2lnbnM= T0JKRUNU 55m7 V1Q= WVM= bmVzdGVk dmQ= IFRhaQ== IFRyYWNr aWZ0cw== aXBwaQ== IHJlc2l6ZQ== IFRob3VnaA== bW94 IG1hbnVzY3JpcHQ= IGxvZ2l0cw== RXhwcmVzc2lvbg== 0LDQug== Y2hvb3Nl SXRlcmF0b3I= IGRlZmVhdA== Rm9jdXM= amFja2luZw== IHNlbWk= X18oKg== MzA4 UGxhdGZvcm0= IGludHJvZHVjZQ== Q29tbW9uTWlkZGxld2FyZQ== Y2FwdHVyZQ== 6ZyA TFQ= bWVycw== bW90aW9u IGZpdHM= IFNhaW50 IEFo IE5U IFsl IG9uZ29pbmc= IExheWVy ZWxsYXI= IHVudw== NjA1 U3VwZXI= Q29udHJvbElkZW50aWZpZXJz cm91dGluZUNvbnRyb2xJZGVudGlmaWVycw== IHVudXN1YWw= 6bs= IHNm dGht IEJ1c2g= OTg5 T1BFTg== RGVzaWdu IG1vdW50ZWQ= U2Vzc2lvbk1pZGRsZXdhcmU= TWF5YmU= 0LDQvdC4 IHRlYXNwb29u IFBST1ZJREVE YnNw b3JuZQ== IGZhdGU= IHZpY2U= ZW5kYW50cw== YXdhcmU= SWRlbnRpdHk= aXNjaGVu IHJlbGlnaW9u R2w= IGNk IHJhdHM= IGRhdGFEaWN0 IFZhcmk= d29ya3NwYWNl IFNlcXVlbmNl Y2VydGlmaWNhdGU= IGZlbWFsZXM= 5b2T IERBTUFHRVM= IEJvbA== aWtlcw== IGdlbm9tZQ== IGxhbmRzY2FwZQ== IGZsZXNo Q3NyZg== SG9vaw== VnM= c3BlYWs= em9vbQ== IGZsb29k IG9k ZXRpZXM= cmVnb24= MjQz Y2xpZW50cw== MjYy cmFuZG4= IGJhcmVseQ== 6riw YmFzdA== ZWVu d2hlbA== eWM= ZGVhdGg= dXRhdGlvbg== IE5pZ2h0 cGxhbnQ= IGV4Y2x1ZGVk dHJhbg== IFsnLQ== c2FtcGxpbmc= cHJvYmFiaWxpdHk= dW5pcQ== RHJvcG91dA== aGl0cw== IGZvdWdodA== cHJlcHJvY2Vzc2luZw== MzA3 cmlzaw== QWdn IEZyb250 IGZyYXVk IGV4YW1pbmU= IFBoaWxhZGVscGhpYQ== dGlja2Vy IHJlY2lwaWVudA== bXVsdGlwbHk= IG1ldGFib2w= MDIw Q3I= Q0FMTA== cmVwbGlj IGNyYWZ0 IG9jdA== IGRvdWdo IGRlbGli dGh1cg== IEJyaWRnZQ== dXNpdmU= KCJf IFVUQw== cG9vbnM= IDE5MTg= bGlua2Vk IFBvbGljeQ== IG1haW50ZW5hbmNl aGFyZHdhcmU= Y3ViZQ== c3RlcnM= aWxpYg== MTk3 MTM5 Vmlld01pZGRsZXdhcmU= Nzc3 IHN3aW0= IFBhcmFtZXRlcg== cGt0 IGJlbGlldmVz IFNwaXJpdA== IFByb2Zlc3Nvcg== IENvbHVtYmlh aG0= 6YI= IFBpdA== cGFyYWxsZWw= IHVubGlrZWx5 U3RhdGlvbg== IHJldGlyZWQ= c3VwcGxlbWVudGFyeQ== 0LvRjw== IE15U1FM V2F0ZXI= aGFuZw== fSks cmVsZXZhbnQ= IEJhdGNo IFVidW50dQ== bWluZGVk d2VnaWFu IHBvbGl0aWNpYW5z IHBhZHg= UmFkaW8= T2xk Y3Vz IHBhbGU= IHNvY2k= aWRsZQ== IGNvbmNlcnQ= X3st IHBsYXlsaXN0 IGNvdXJzZXM= ICcuLw== IHRlYXJz 5aU= IFNpdGU= aWZheA== IEZhdGhlcg== J10pLg== cGhhbg== IGFjdGl2YXRlZA== VHJhY2U= IFByb3ZpbmNl Q3NyZlZpZXdNaWRkbGV3YXJl RWFjaA== SFI= Y3JpYg== IGxk IHJlc29u YXZvdXI= IGFkbWl0 IGNvbXByZXNz d2l0aGlu MjM4 VW5pdGVk TW9kaWZpZWQ= XScp YnVybg== cm4= d20= IHNsZQ== IElD ZW5zaW5n bGljZXM= IGludGVyaW9y d2ViZHJpdmVy IGRlbWFuZHM= 6LGh emV0YQ== IGR1YWw= ZXRyZWU= IDE0MA== IE11 IE1QSQ== IGFsZ29yaXRobXM= aGVycA== IEBA IGJ1eWluZw== IHB5bGFi IGFjY29tbW9k aW50ZXJwb2w= Q29sbGVjdA== 0LXQug== TWVzc2FnZU1pZGRsZXdhcmU= 5a65 U3RhcnRpbmc= IGFycml2YWw= IHByZXNpZGVudGlhbA== IE1lbWJlcg== IGNvbXBhdGliaWxpdHk= 5pa55rOV IG5vYm9keQ== JTs= Ol8= 8JI= aXNjaGU= IGluc3RydW1lbnRz dW5pdg== IGFsbGVn IGVub3Jt MTE5 bmVjZXNz IHNob3J0bHk= IHVyYmFu IEVuYWJsZQ== IE1pbmlzdHJ5 5Yqf IGNvbnN0aXR1 Q0xJRU5U IExld2lz TGlmZQ== IGNpcg== ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09 IHN3b3Jk dXRpdmU= IGFsdW1uaQ== IFws IH0pOw== IENocm9tZQ== SURT IHJldGFpbA== IEdlcm1hbnM= IGFjY2VwdGFibGU= c2Vjb25kYXJ5 IGF0dGVtcHRpbmc= IGludGVycG9sYXRpb24= 57M= aGVzZXM= cGVlcg== IHN0YXJlZA== dW1p IHRlbGVwaG9uZQ== QWR2ZXJ0aXNlbWVudA== YmFnZQ== IHRhbg== IHB0cg== IG1pYw== IEhhdmU= a2V5Ym9hcmQ= YWRkSXRlbQ== UmVSZWNv MTgy NTA0 cm9sbGVycw== IENvbW11bmlj IGNvbnZpbg== U1RSVQ== U1VDQ0VTUw== Mzcw QnJv RGVu RklO dMOp IGNldHRl IGdsbw== IFRlbGw= IE1PRA== IGZpbGVOYW1l IHJhcA== IG9ic2Vydg== ZXNzYWdlcw== MTk5OA== IHF1b3RlZA== dmlzaXRlZA== IHZpcnVz UmVuZGVyZXI= IikpKQ== b3BoZXI= IGtp PSIr IFZpbGw= QUJD Mzg4 IHByw6k= IHdvb2Rlbg== IFN0dWRpZXM= 15Q= aWZz IEZD c2NyaWJlcg== NjA5 YWhs IGVzdGU= QWxzbw== IGNvbGxpc2lvbg== aXZhcmlhdGU= Q2hl RWFybHk= emM= cmVmZXI= IElyYXE= cXVpcw== JykpOg== IDot dWdieQ== cHJldHR5 UHJvcA== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= fX1few== IFRlc3RDYXNl Q29tcGFueQ== dm9sdW1lcw== IG91dGNvbWVz IHByZXBhcmF0aW9u IGJyaWdhZGU= UE4= UmFzdGVy a2s= IHdvdW5k aWFscw== Z3JhbWE= ICoqKg== OTY3 IGJyaWxs Q0xBUw== 5o2i 6Kej ZG5leQ== ZW5ldA== IFBBUg== IERh IGluZmFudHJ5 IExvb3A= Z3VhcmQ= IFJvZ2Vy KyIu SGV4 Tk9STUFM XSIs ZW5lbXk= aXRhbHM= ZGVjaw== IG5hcmdz IGxhZHk= IGxpc3RlbmVy SVRJT04= MTc2 4paI4paI4paI4paI IGFnZ3JlZ2F0ZQ== ZGhjcA== Pi4q TXVzaWM= Y25u IGNvaW5j b2Jhcg== cHJlcA== IGFzc2F5 c3VibWlzc2lvbg== Q2hlY2tlcg== T3B0aW0= IEZPUk0= IGdsb2JhbHM= IGNvbGxlYWd1ZXM= 5omA5pyJ Q2VydA== aHVi IGN1c3Q= IGlucA== IG1hbGVz QVRPUlM= IGFjdG9ycw== 0L7QuQ== IEFkdg== IGRlbm9taW5hdG9y IHdhaXRlZA== IGFubm90YXRpb24= IFNIQUxM R1BM V3JpdA== CgogICAgICAgICA= IGJha2luZw== IEFnZQ== IHllYWg= KCIuLw== IEVsZQ== IFZFUg== IHN1YnNpZA== IFRlc3Rz IGZyZXF1ZW50 Q29tbWVudHM= IFZhbGlkYXRpb25FcnJvcg== ZGVjb3JhdG9y IERldGVybWluZQ== Wy8= c2V0U3R5bGU= b2NoZW0= YW50bw== MDE4 Q0hBTk5FTA== IENsaW50b24= IGNvbnNpZGVyYWJsZQ== IGZpbHRlcmluZw== UGhhc2U= R2VuZXJhdGU= 55u4 aWF0cmlj RUc= Z2llcw== c2xvdw== YWxpb24= cm91dGVz ZXRoZXI= IEFD IEhhcnQ= Zm9yY2Vk IGFnZW5jaWVz MTUx MTg4 IGluc3VsaW4= IGxhc2Vy 5b6X UmVwb3J0cw== IGNyeXN0YWw= PmA= VHVy ZGFpbHk= fXw= zrI= 6ZM= IGluc3RydWN0 IENyYQ== IE1pbGw= IEZpbGVz KiooLQ== IGFuY2VzdA== IGhlYWRlZA== IEhvdQ== MTg5 IGNhbGxlcg== Z3JhcGhz VHJhdmVs IFByaWNl UkVTVUxU SVpBVElPTg== IGRpYWJldGVz Q2FtZXJh IA0KICAg aW5pYw== b2xpcw== IE1lbnU= Y29uYw== IEZ1bGw= IERlbnNl cGxpY2F0aW9ucw== dG1wZGly IG11bHRpcHJvY2Vzc2luZw== 5oCn IGdseXBocw== UVdpZGdldA== VHJ5 aXNkaWdpdA== IGhpZXJhcmNoeQ== IHRocmV3 b2xlbg== aXphcg== UmV2aXNpb24= IGRpc3BsYXlz MTY0 IHRyYW5zYWN0aW9ucw== IEFsYmVydA== IGluaXRpYWxpemF0aW9u IHB1dHM= QnlOYW1l IFJvb20= IHBhbGV0dGU= 5oyH TUVTU0FHRQ== TEI= bGFuZQ== cmFuZw== IHNpbmdlcg== IHdpcmQ= IHZpZw== IE1z IEdQVQ== IGNvdmVycw== YWhu b2xlc3Rlcg== IEFkZGluZw== IGNoYXJhY3Rlcml6ZWQ= ZW5uZXM= IGNsZWFuaW5n IENsZWFu IHVsdGltYXRl IHVuc3VpdGFibGU= WEZyYW1l ZGlyZQ== cnVzdA== IHByb2hpYg== c2VudGVuY2Vz IGJhY2t3YXJkcw== fX1f IGNhcHM= IGJhc2ViYWxs ZXhlY3V0YWJsZQ== VXBsb2Fk ICdfJw== IGlwdg== IG1vbGVjdWxl UHJlY2lzaW9u XCg= bWV0ZXI= Y2hlbQ== IGNlbnRlcnM= IGV4Y2l0ZWQ= ZmluaXRl IGFycmFuZ2Vk IHRlcnJpdG9yeQ== Q0FDSEU= RHI= Ymlv Z2l2ZQ== 0JA= 6Io= IHB1cA== aWZhY3Q= aW1pdGVk IHJz IGFic2VudA== bWJpYw== IGNyZWF0aXZl cmVsYXRpb25z MDQz IGluc3BpcmVk cmVtb3ZlZA== IFBha2lzdGFu ODMz T0lO aXRhZ2U= ID09PQ== ZXRl ZWxvYw== IGhhbmRlZA== IDA5 IFdlbA== IDE5ODM= IHN1Ym1pc3Npb24= IG9mZmVuc2U= IGVudGVyaW5n aWdyYW50cw== Kysp Q2E= UEQ= dG93bg== IGdlbnU= JzpbJw== ZW5kZXJz IFwo IHRlZW4= IHBvZW0= IGZvdW5kYXRpb24= IGxpZmVsZXNz IFNldHVw UkFNRQ== dWVyaXRl IHRyYW5zbGF0ZWQ= IHN1YnN0cmF0ZQ== XS0tW0A= RnVydGhlcg== c2Nob29s IHJlc2VydmU= b3dh IHJn CiAgICAKICAgIAogICA= IHBhcmtpbmc= IHw9 ZmFjdG9ycw== c21hcnQ= IGluanVyZWQ= IFNpbW9u PV8oIg== IGhlbGxv IGh5ZHJvZ2Vu IENIRUNL Y3JpdGVy d3Jvbmc= IGJvbA== bG92 IG1lYWw= IGNvbnRyaWJ1dGVk bGluZW5v YmFzZWxpbmU= IHN1c3A= IGludHJvZHVjdGlvbg== UkFX T3B0aW9uc01pZGRsZXdhcmU= QW5hbHk= IGNvbmNlcm5pbmc= RGltZW5zaW9u IGNvZWZmaWNpZW50cw== IG1hc3Nlcw== ICM6 IGV4Y2VlZA== IFZpZGVv IEtvbmc= MjQ1 IEFydHM= IGNvbnRpbnVpbmc= 0YHRjw== emVjaA== IFN1cHBvcnQ= IHNwZWN0cmFs IGJ1Z3M= Q3k= VG9t a24= IGVtaXNzaW9u b3N2 b2JzZXJ2YXRpb24= ZXhwcmVzcw== MTYx IGZlZXM= MjM3 IGJsb2NrZWQ= Y2xpY2tqYWNraW5n IFByZW0= IG1hbmRhdG9yeQ== WEZyYW1lT3B0aW9uc01pZGRsZXdhcmU= YmF6 aG91 c3N1ZQ== IFJvZA== IGV4ZXJj IGti aWVudGlmaWM= aWNrbmVzcw== aW50ZXJw IHN0cm9uZ2Vy SG9yaXpvbnRhbA== amF2YXNjcmlwdA== IG5hdHVyYWxseQ== bG9w dWxhdG9yeQ== IHN0eWxlcw== IGNvbmZvcm0= DQogICAgICAgIA0KICAg bW5pc3Q= IGdyYWR1YXRl IFJob2Q= V0lTRQ== IE5D ZnRlbg== U1RPUA== IGFjdHU= 5Liy IGxvYWRz cmVzdGF1cmFudA== Jy0= U3luYw== c2h0bWw= IG1lcmU= ICoo IGphZw== IGFzc3VtcHRpb24= UkVHSQ== IFN0aW0= YXdh dHJhbnNmb3Jtcw== IGRvd25sb2FkZWQ= IHBvbGl0aWNpYW4= R2Vv IHJhbmRpbnQ= IGluZnJhc3RydWN0dXJl MDYw cmVjZW50 IG9hdXRo IGhvbGlk IEtlbGw= IGludGVsbGVjdA== IHBvc2U= aWdodGU= RmlsZVBhdGg= IGdyYW1z IGNsZWFudXA= IFNvbWV0aW1lcw== IGJ1bGxldA== Q0ZH TUVUSE9E IHJhZGlhdGlvbg== IGZpZnR5 44GZ44KL SUZJ amo= DQogICAgICAgICAgICAg IO+/ve+/ve+/vQ== aXNzZQ== IGRlcHJlY2F0ZWQ= Y2hr IHByb2c= IGV4Y2x1c2l2ZQ== Q29sbA== IHNvbHZlcg== IHdvcnJpZWQ= IHRyYW5zY3JpcHQ= IGxpYWJpbGl0eQ== Ym9sZHN5bWJvbA== 7KeA IHJlcHV0YXRpb24= Tmk= IG5vdXM= IFRZUEU= IDEzMA== dWdhcg== TW9kZWxBZG1pbg== IGRlbGlnaHQ= IGRpYXJ5 5Y+j IGZsb3dz Y2FsbGJhY2tz IGJvdW5kaW5n IHZpb2xlbnQ= OTEx IAoKICAgICAgIA== YW5lcw== ZGVzaw== IHBzeQ== bWV0cmljYWw= IEZvb2Q= IG9yYWw= IExhZHk= IG92ZXJ3aGVs IHJlbGlhYmxl REVGSU5F IEFuc2libGU= JyQ= VGFrZQ== IHR0 IHZpdGFs IHJpY2U= IHJhbmtz Kios IFZl IHJlZ2FyZGVk cGFzc3dk IGRldmVsb3BlcnM= IGlkZW50aWZpY2F0aW9u cmVzcG9uc2Vz IGN5Y2xlcw== TVRQ UGlja2xl IHJlY3Vyc2l2ZQ== c3RlbQ== IG1hcmk= IGR1dA== cmllbnRz IEFsaQ== YXBvbg== IE5vYg== c2V0YXR0cg== IDE5NDE= QWRkaXRpb25hbA== 5ZCR IHRhbGtz IHdvcnNoaXA= IGVsZWN0aW9ucw== IGdhdGhlcmVk cHdk ZXJ0eQ== aXRjaGVk IHJlZm9ybQ== YXRlcm5hbA== Q2hyaXN0 IHNwZWNpbQ== Y29tcHJlc3NlZA== IGdlbnJl IG9idGFpbmluZw== IHJlc3BlY3RpdmU= IGNsdWJz IHRyYW5zY3JpcHRpb24= YW1hem9u UVI= cmVzdGFydA== IHdlZA== IGRC IElt IHNoaXQ= IG92ZXJs IGV0aG4= IFF1YW50 IGFsaWduZWQ= Ym9vdHN0cmFw IGNyaXRlcmlvbg== IG1vcnRhbGl0eQ== T3JpZW50 IHRhcA== IHRhcGU= IGRlZmluaW5n IFBlcnM= IERvZw== IFRoYW5rcw== IGNvbXByb20= TElC IHN1Y2NlZWRlZA== IGp1aWNl 6YWN SE0= dW5v IERvcg== XSwi IHZpZXdlZA== IHNvbG8= IG1vdmVtZW50cw== aWxpYXRpb24= IHBhcnRpY2lwYXRl IGVkdWNhdGlvbmFs IEZvcm1hdA== aGpwaA== IHBlYWtz eGxzeA== cG9zc2libGU= TUVS ZWxlY3Ryb24= IHRpbA== IG9taXR0ZWQ= IFJpZA== IEVhcmx5 IE9s 77+977+9Jyw= IHJ1bm5lcg== b3Zp b2Zmcw== IE9SREVS IGZhaWxpbmc= IHF1YWxpZmllZA== IG1hc2tz IEFuZ2Vs IGdsdWNvc2U= SUFO dGJs aXTDqQ== IHByb3M= YXNzZXJ0QWxs dmlld2Vy IHRyYW5zbWl0 cGFyc2Vycw== d2Via2l0 IGZpbGxpbmc= aGptcw== aGpwcw== IHNwaXJpdHVhbA== IG5ldXRyb24= IE9yZ2FuaXphdGlvbg== w5c= IGFzdHJvbg== YW5kZQ== ZGVwYXJ0 IGRlc3RydWN0aW9u IFNvbmc= IElyb24= MjI4 IGRpY3Rpb24= XFxc IG9wZXJhdGVk Q0xV IGFmZmFpcnM= MTIzNDU= aGptaA== IHBsZWFzdXJl cGVyY2VudGFnZQ== Kyk= emll IHRhY2s= IGxvYg== bGRvdHM= aXZhdGVk IGpldw== ICV9 IHBsdXJhbA== YXZhdGFy IDE5Mg== IHF1b3Rh IHJldHZhbA== IHRlY2hub2xvZ2llcw== dGVuc29yZmxvdw== VElNRU9VVA== PSIiKQ== IG1hbnVmYWN0dXJlcg== U3RydWN0dXJl IGludHJpbnM= QklU bXRpbWU= cGFpZA== dGVs X18pLA== IEVyaWM= PScnKTo= IHByZXQ= SW5jbHVkZQ== IDE5ODE= IHBlcmlwaGVy IGdlbmVyYXRlcw== IERldmVsb3A= IE5ld3Rvbg== IHBlcnNvbmFsbHk= cG9vbGll IHNuYWtl IGdyb3VuZHM= IHBlcnNpc3Q= bHN0bQ== IExpbmNvbG4= IExJQUJMRQ== RmluaXNoZWQ= QkFE VFc= IHNvbnM= IHJlYWN0aW9ucw== IFNhYg== b2Ri IHJk b3Jkb24= IEluaXQ= IGRpc2NvdW50 IHNwZWNpZmllcw== cmVnaW9ucw== aXRlcmFibGU= IFBlcm1pc3Npb24= IEFSSVNJTkc= 5o+Q Iy0jLQ== Z3JhZHVhdGU= U2VudA== YCk= IHRhbWI= aWxsbw== IGNvbnNlcnZhdGl2ZQ== ZGVmcw== U2VwYXI= U0hB IGdvbGRlbg== bGl0ZXJhbA== IElsbGlub2lz Q0VM UGF0Y2g= VGlsZQ== 0YQ= bGVtYW4= ZWRpbmc= IDE3MA== YW5keQ== IDE5MTc= bG9naWM= IHNwaXI= IHNwYWNpbmc= IHJlZmxlY3RlZA== ZW50aWFscw== c3BlY3M= IENvcnA= b2NyYXRpYw== IGVuam95ZWQ= dXRjbm93 LyIp ZG9ja2Vy emVz X18pKSk= IGNobG9y NjY2 IFNldHRpbmdz IE1lYWRl IGRldGVybWluaW5n ZnJpZW5kcw== RGVwZW5k UVB1c2hCdXR0b24= IENPTlRSQUNU RlJPTQ== aW5lbA== YW50ZWU= IHBzZQ== IHdpa2k= IHdhdmVsZW5ndGg= ICgpLA== IENO IFJvbWU= YXN0aW5n ICUl IHh4 IFRocm91Z2g= cXVhbGlmaWVk MTk5Nw== bWVyZ2Vk YXV0aG9ycw== 0YLQvg== IFBsdWdpbg== IG9mZmljaWFsbHk= 5Zu9 ZmV0Y2hvbmU= IEFyZ2VudA== KX0p RXY= R20= YXRvbg== IFNlbQ== IEJCQw== IERhaWx5 YWN0aWM= YW5uaWU= MzI2 Y29uZHM= bGllc3Q= IHZhbGlkaXR5 IHdoZWF0 IGxlZ2l0 IGRyaWVk R1JBTQ== IEd1aWRl IEVsaXphYmV0aA== UVE= V00= eWVycw== ICAKICAg ZXJvcg== IGR5aW5n IHRvZG9z MDAyNQ== Y29uc2Npb3Vz IHJ0 IExMQw== b2tv cmVhZGluZw== IGRpc3BhdGNo bGljaGVu RXhjZWw= IGJvdW5kYXJpZXM= dHJhY2ViYWNr IHNxdWFk c2VnbWVudHM= IGFudGlib2R5 S1M= IFRvb2w= IEZpZnRo UmV2 IENvbmY= WzosOiw= IHV0dGVy IGJlaGF2aW9ycw== IEhpc3Rvcmlj IGdyYXZpdHk= IHRlbXBlcmF0dXJlcw== UXVlc3Q= aW9w IO2V IFNpZQ== ZWN0ZWQ= IGxldHM= YWRkcmVzc2Vz IG5ldXJhbA== UmVncmVzc2lvbg== bWFwcGVy cmFuZHJhbmdl IHlpZWxkcw== CgogICAgCiAgIA== Xl4= IGdhbmc= IGd5bQ== YXN0cw== IGFnZWQ= IHN1cHByZXNz IHBvbGxpbmc= VGVzdGluZw== IENvbG9u Q09OTg== IGdyZWF0bHk= IHJpc2tz ZXZpbg== bGFwc2Vk IGNhbGN1bGF0aW9ucw== IGFjcXVpc2l0aW9u YmVjYXVzZQ== 5YE= b21hY2g= dHJpZw== IGRpc29yZGVy IHNsYXZl IExlZnQ= ZXF1YWxpdHk= IHZvdHJl IGNvbnZpbmNlZA== U2Vuc29y V2M= bm9z IHRoZW9yaWVz aWNhdGlvbg== Y2xhc3NpZmljYXRpb24= IGVudHJhbmNl dHRsZQ== ZXF1YWxz IGxhbmRpbmc= Jlw= a2lzaA== IGRlZXBlcg== IFNpeA== IFNjcmlwdA== IHNwZWNpZmljYXRpb24= YXV0aGVudGljYXRlZA== bWV0aWM= IGludml0ZWQ= Z2xpc2g= 546w IFdIRVRIRVI= RXM= Vkw= b25saW5l cmVuZA== IG92ZW4= IHRvd2Vy IHRocm93cw== b3NvbWU= aXZ5 IEdpYg== IFVz MzI3 IGNvbXBsZW1lbnQ= UHJpbWFyeQ== Z3JpZExheW91dFdpZGdldA== UXVhbnRpdHk= aWFy IGluZXY= JywpLA== aWZp IEZhaXI= IEJhbmc= IHJhaXNpbmc= IEluc2VydA== IDIwNDg= b3ZlcmxhcA== IFBvbHk= IGZsb3dlcnM= Qml0bWFw IGFwcGFyYXR1cw== QVg= Um9vbQ== 56E= INGD IG9j IGJhc3M= b3Bh dmVyc2Fs IHNtb2tpbmc= IGNvbmZ1c2Vk Y29yZXM= IHZhcmlhdGlvbnM= IGJlZ3Vu ZnJpZW5kbHk= QWxpZ25tZW50 Y29uc3RyYWludHM= IGd1YXJhbnRl TWFydA== TkY= T0g= ZGFn 55U= c2VuZw== J10v IGFkdmlz IGRpc2NsYWltZXI= ODA4MA== NDA5 IGh5cA== IFNjaWVuY2Vz KysrKysrKys= YnJldw== IAogICAgICAgICAgICAgICAgICAgICAgIA== IGRhdGluZw== IGdyYWlu IGFzc2Vzc2Vk YWNh IGNhbm9uaWNhbA== c3ViZGly MTc5 bWFza3M= IEF0dHJpYnV0ZXM= IGxhdGl0dWRl 6Ze7 5rWL6K+V d3I= 7IiY IGdwdQ== IG1ldGVycw== IEhPTEQ= cmVzbmV0 IGNsaW1i IFZhcg== IDE5Nzg= U3RyaXA= ZmdoYW4= ISEh 6aqM aGF0dGFu LiQk PyIp QVE= TW91c2U= U3RvY2s= dGFsaw== YWx3YXlz aWZvbGQ= IGJlYXV0eQ== IFJvb3Q= dWJhcg== IGNoaXBz IG5ld2xpbmU= MzIz MjQy IGFwcHJveA== ZGlzcGxheXN0eWxl 5a6e dmVoaWNsZQ== PV8oJw== Y2Zm 5ZU= 6ZY= IGZvcnVt YWJhbWE= IGFuY2g= IHByaW50aW5n IGRpc2g= bGluZUVkaXQ= SVRMRQ== Y2hhcnNldA== c2ltcGxlZmlsdGVy anVtcA== 8JY= ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyM= aW5kaXZpZHVhbA== ZXh0ZW5kZWQ= SVRFTQ== IHBlcnNvbm5lbA== VU5DVElPTg== IHNvcnRpbmc= a3dkcw== IFR1cmtleQ== anVhbmE= Vk9M IGRo IGho IGh1Yg== IGx5cg== IFRic3A= cXVlcmllcw== IDE5MzM= ZWFybHk= c3ByaW5n MzA2 IGJlaGFsZg== 57uT5p6c Y2F0ZWdvcmljYWw= QkdS U0NI aWVydA== ams= dWFydA== aWxvZw== IFRlZA== IE1vdGhlcg== IExlbg== IE9BdXRo IGtpbg== UmVjYWxs MTk5Ng== Z3Jhdg== Zmxhc2g= dWZmaWNpZW50 IHByb2JhYmlsaXRpZXM= U2ltaWxhcml0eQ== VmlzaWJsZQ== IDA3 IGNvbnZlbnRpb24= IEJVUw== IExhcg== IEVM IGNvaW4= IGVsZGVy IHBhdGh3YXk= 0L7QvQ== ZmlsZW5hbWVz IHN0dWR5aW5n ZG9taW4= IHNldHVwdG9vbHM= IGRyYW1h U2luZ2xlTXVvbg== IGJhY3Rlcmlh KSsn Wm9uZQ== YmF0 IG1hcmNo IHJlcGFpcg== IE1hdGNo IGF1dG9z cmFwcGU= Y2VsbHVsYXI= IHNlbmRz 5aSE Q2FsZW5kYXI= YW5ub3RhdGlvbnM= IEhvbHk= U2NoZWR1bGU= IGVhc3Rlcm4= IEhhbGlmYXg= SlM= aXJ0cw== cXVpZXQ= IEdyb3VuZA== NTU1 IHByb3ZpbmNl Mjcz Njg4 IGludGVycHJldGVk Q29uZmlybQ== Rm9vdA== VklT aW5zdHJ1bWVudA== b3JhYmxl IGRt IGZvcnR5 bGRlcg== IHVubGlrZQ== IHBhcmFz UkVM IGFwcGVsbGFudA== VXNlcm5hbWU= IHN0cnVjdHVyYWw= IGxpbWl0YXRpb24= IHJlc3BvbmRlZA== IGRpcm5hbWU= IGFuYWx5emU= cmVwZWF0ZWQ= IE9mZmljZXI= TWF0aA== b2xlZA== IG9n IG5j IExlbQ== cHJvYmU= Y3JlYXRvcg== U3RhdGVz TEVBU0U= IGFkZHJlc3NlZA== IGNvcnBz IFBob3Rv ZW5ueQ== bmVzb3Rh IGNhc3VhbA== U1lT c2VwYXJhdG9y Ki8= ZXRhcnk= cmlzZXM= IFBlZA== IEdpbA== KS5c QVRI IHNjcmFw MjU4 IGZpbmFuY2U= OTk5OTk5OTk= Q2FudmFz IEludGVybmF0aW9uYWxpemF0aW9u IERlbW9jcmF0cw== IFNjaGVtYQ== UENS Z2VsZA== IGZpY3Rpb24= dGhyb3c= IENlbGw= IEd0aw== IGNvbXBhcmluZw== aW5raW5n J10sJw== IENhbGxlZA== IGJlbGllZnM= RE9D IHN0ZGlu Q1JFRU4= IHBzeWNob2xvZ3k= IHVuaXZlcnNhbA== IFNjb3RsYW5k IGlvbg== aXN5 IGJ1bGw= aWNoZQ== IGdw IHN0YWJpbA== IENFTw== IFdyaXQ= IE9yZWdvbg== U1RP c3BhbQ== Q29uZGl0aW9u Mjk1 aW50ZXJzZWN0aW9u aHlkcm8= IGNvbnN0YW50bHk= UVBhbGV0dGU= IG9jY2FzaW9uYWxseQ== SGF2ZQ== SW0= U2Fu 8JM= IHRoZW1lcw== CiAgICAgICAgCiAgICAgICAg IFRr IEJveQ== IHNoYWtl XSkv PSJc IFZN cmV0Y2hlZA== IGZvcmVjYXN0 IGxhYmVsZWQ= Mjc1 IGJpa2U= IG1pbGl0 aWdlc3Q= IHJt IHJ1bGluZw== YXNzYWRvcg== RVJF IFZlbg== IHRydW5r IHN1cHBsaWVz IFVuaXZlcnM= dHJhbnNhY3Rpb25z fX0p IExldmVs IHNlbnRpbWVudA== dXJzaW5n IGVuZ2luZWVy IHRvbmd1ZQ== Rm91cg== TWljaA== bGY= YWx5 IGR1cA== IENvdWxk IENOTg== IHNob3Rz aWduZQ== IGNvdW50aW5n IHNsaXA= cG9wdXA= IHJlbGVhc2Vz IGNvbXBsZXhpdHk= MjY0 QnJh VXNlZA== ZGFz IGNpZA== MDEwMQ== dWdz UkVTUA== IHNob3VsZGVycw== IGRlY2xpbmU= IFRyYWRl IE9seW1waWNz IGF1Z21lbnQ= U01T Z2hhbg== oOe6 IGZhdGFs YWRlbg== IEJhc2Vk IERhdA== IFVSSQ== IHByZWNp am9pbmVk IHN1cmZhY2Vz ZnJhZ21lbnQ= IGNoYXJhY3RlcmlzdGlj IElEcw== TmVn 5bCG w7ptZXI= IGxhYm9yYXRvcnk= 5pS5 QUREUkVTUw== IGNvbnRlbXBvcmFyeQ== IENvbWlzc8Ojbw== b2xlc3Rlcm9s QnJpdA== RW0= RnJp 4KY= IGFm IE1pdA== IG5vdGlvbg== IEhlbmNl Q2hhdA== MzI0 IHhtbG5z bXV0YXRpb25z IGVpbmVy cmVndWxhcml6ZXI= 6LCD IGFtaW5v Iicp YmFz c2lz dmVucw== IHRj IGZhbGxlbg== bmRpbQ== IHJlbmFtZQ== IGlr eHRpY2tz aW1wb3J0YW50 IGVuY291bnRlcg== IEluZm8= RXJyb3Jz ZGlzY291bnQ= TE9C IHBhdGVudA== ZXhwbG8= IFBvbGFuZA== UmVwcmVzZW50 IHBhbmlj IGFkanVzdGVk TU4= TWFyZw== Y291bGQ= c2F2 2YY= dGhyb3A= KCd7fQ== IEVsZWN0 IEVudW0= IGNvbWVkeQ== IGxldHQ= cGhpenpsZQ== IHJheQ== bG9jYXRl MjIx MjI5 aXNzaXBwaQ== IGxvY2FsbHk= Tk9XTg== IGF0dGFja2Vk IGZ1bm55 YXVyYW50cw== bmNpYQ== IGdvZHM= IGNvbnZlbmllbnQ= IEZJTEU= KVsn Pls= SGFyZA== TVk= TXVz dW9t KSkpLA== Z2V0Q3VycmVudA== aWJlcg== IEthbnNhcw== T05TRQ== IHBhcnRpYWxseQ== IDEwMw== IHRyYWlsaW5n Uk9X YnVpbGRpbmc= IG9wdGltaXphdGlvbg== c3VjY2Vzc2Z1bA== IGNvbnNpc3Rpbmc= IGltcHJvdmVtZW50cw== IFBhbGVzdGluaWFu 5pu05paw YmFn dG9z YWx0ZXJu IGRpYWxlY3Q= IFNpbmdsZQ== IEFsZWM= IEJpYmxl DQoNCg0KDQ== IHRlc3RpZmllZA== aWNrZXI= YXVkZQ== cHJpbnRz U3Rk MDAwMw== c3Vic2NyaWJl IMKw bm55 IGxpYmVyYWw= b2NjdXA= R1Y= ZGlh zrw= IGNhbnQ= IHNhbnM= YWJsaW5n IDI0MA== cGxhY2Vk IER1dGNo IFdpbmQ= IHJhYmI= IG92ZXJjb21l Il0pLA== OTkz IGNhcnJp cm9sbG1lbnQ= IEludGVyZXN0 bGV2YW5jZQ== IG94aWQ= IHRvbmlnaHQ= V0lORE9X SnVseQ== amVy bHZs dG91cg== aW5hdGlvbnM= Y2hpcA== IEZyYQ== IEJPTw== IHByb3Zlbg== YXN0YQ== IFlvdVR1YmU= IGNhcnJpZXI= IGNlbnR1cmllcw== IEFzc29jaQ== IGNvbnN0aXR1dGlvbmFs IHVuY2VydGFpbnR5 LyIr U2k= IG5n IEJhdHQ= 4oCL IFJvbg== IEdhdXNzaWFu YXN0cm8= aWNraW5n IHJlZ3VsYXRpb25z VW5pb24= IENvbGxlY3Rpb24= 44O844M= IE9USEVSV0lTRQ== IGdhdWdl UG9zaXRpdmVJbnRlZ2VyRmllbGQ= LScs Xite cWM= eHNs aW5hdGluZw== IEFtYg== IENvcm4= c3RyYW5k MDE2 IHsnJA== MzM3 IENvdW50cnk= 6L+b6KGM IFVrcmFpbmlhbg== TnM= UnVzcw== IO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vQ== aW5oYQ== IHNoZWV0cw== IGxvZ28= Li4uJw== IGV4dGVuZHM= IF0pLA== IFsiLQ== dGFibGVuYW1l fV57KA== IFByaW5jZQ== U2xpZGVy SmU= dG9t IHRpbGVz IGFpbWVk IGNhdHRsZQ== IHdyZXN0 IGlzbw== cmllbA== IE1D MDEyMw== cHJlZHM= IFN0aXI= YXBldXQ= c3RhcnRpbmc= ODA2 IGF2YWlsYWJpbGl0eQ== MjY3 IHNob3J0ZXI= IGhhcmRlcg== IHNlY3JldGFyeQ== Q0lBTA== IEplYW4= TUlOSUFPRFNJTQ== IENPTkZJRw== 5YWD57Sg IHNpbXVsdGFuZW91c2x5 bWF0ZXM= dWFyaW8= IHdpZA== IHJ1cmFs IGFsaWVu IG9ic2VydmU= dmVsdA== IDEwNA== Z3JleQ== c3VjYw== IHZvaWNlcw== IFdvbGZl Q0xBU1NFUw== RG90 Tk0= XT09Jw== Xi0= bWlycm9y w7s= IHJldXNl IG5vbWJyZQ== dWxz IGFzaA== KFst IGJsYW1l ZW1wdA== ZGVzY3JpYmU= IGVuZ2luZXM= IEphY29i MjE0 IEND IEJsbw== IHByb3NlYw== cHJvdGVjdGVk IHN1YnN0YW5jZQ== MTMx bG95ZA== 5pyf IGNoYWlybWFu IGtuZWU= 6ZSZ VEVE V0Y= b2xseQ== cGVt IEN1dA== IGNvbnNw Q1RZUEU= bGlicw== ZXJvaWQ= RGV2 IMO2 VGVY IFVTQg== IGNtZHM= U2Nyb2xs IEFnZW50 5bm2 U2tpcA== oOe6tw== RXVyb3Bl U2FsZXM= bnc= xIE= IGNyeXB0 IGxpZnQ= IGVsZWc= KCcuLi8= IHByaW50cw== aXNlY3Q= IDUwMDA= d2Vhaw== dmVseQ== Y29kZWM= d29ya3M= MTg0 MTg2 Ynll IENvbGw= IG1vbnRobHk= dHJhY2tpbmc= UmVhZGluZw== IFJFQUQ= IHdvbmRlcmluZw== SU5TVEFMTA== QXV0aG9yaXphdGlvbg== U3RhdGlzdGljcw== 57Si IHBvZXRyeQ== TWVyZ2U= TWlk V2F0Y2g= aUI= d2lsZA== IHdpcw== IG1u IG5hdGlvbnM= IEFC IGFybWVk bWluaQ== Q29uc3RhbnQ= ZWZl QUxJR04= IHJlbGk= IGJlbHQ= IGVzdGE= Zm9vdGVy IG11c2V1bQ== IFRPUlQ= IEx1 IGNvYXQ= 0LjQvQ== 77+977+977+977+977+977+977+977+977+9 IGF1dGhvcml6ZWQ= IFJlZ2lvbg== bGFiZWxlZA== bG9va2luZw== IE1hZ2ljTW9jaw== ZGV0YWNo IHNsaWNlZA== IHRocm9hdA== DQogICAgICAgICAgICAgICAgICAgIA== aXR1ZA== IG9zdGU= IEZvbGxvd2luZw== IERlc3Q= bWFuZGVk Nzg2 IG1vZGVyYXRl U1lTVEVN IGZsZXhpYmxl IGluZmVjdGVk IHN1c3RhaW4= 7ISc UFJPQ0VTUw== Pig= QmFuaw== Rk9OVA== ZGll YXJyYXlz IHRveGlj KCkt bHlu YXBvcg== IHZpYw== IFBDUg== IHVuZg== Q2hhcmdl IHNwZWxs b3NldmVsdA== YXphcmQ= IEFsbG93 cmljaHQ= In0u IGhvcnJvcg== IHNpZ25hbGluZw== TWVhc3VyZQ== 6K6k IFN5c3RlbXM= 5bi4 cGxhbmVz 57qg57q3 IEhlbHA= 56ew IGRpdmlzb3I= PiY= WyU= c2Fu IGNpdGVk IHdpc2U= IDExMQ== IHZpdm8= IHJlc2lkZW5jZQ== IFN5bWJvbA== IHBpbG90 ODAwMA== Q1BV TU9O 5rc= IHRhdQ== c3Ryb2tl YW1v IE9udA== c2hhcGVk IG15c3Q= IHN1YnN0aXQ= YXNoaW5n IHdlZWtseQ== IE5vdGVz IHByb21vdGVk IHJvbGxpbmc= IGJ1cm5lZA== IGFiZXI= aXNvbA== IG1N IG1pbGQ= dGh1bWI= IHBlcmNlcHRpb24= ZGljdHM= YXNrYQ== VGhyZXNob2xk MTQx T1RBTA== dW50bw== SVBW IGxlbmd0aHM= bGltaXRlZA== IHZpb2xhdGlvbg== IFBhcmtz UGFs U01C Y2c= ZGo= cnB0 cm9pdA== dmVydHk= IDA0 IGNvbnNlcXVlbmNl a2VsZXk= IGRvemVu d2VhbHRo aW5pdGlvbnM= MTk5NA== YXJzaW5n b3ZlcmZsb3c= IGJyZWFrZmFzdA== IHJlYWxt IHByZWNpc2U= IEppbW15 U3ludGF4 5bey RXhlY3V0aW9u IGVuaGFuY2Vk VkVE dGFyZw== b3RpbWVz Y2hpbmc= IHNlZWRz IEVFQw== IGNoYWlucw== IG9wcG9uZW50 IGFnZW5kYQ== MTk5MA== MzI5 dW1wdGlvbnM= Nzg0 cGlyZXM= TE9DQUw= IENvbWJpbmU= ZnVuZA== IHR1YmU= b25v IGNpcGhlcg== YXJs IGbDtnI= IHN5bmNocm9u ICIm IGNoYW1waW9u Y29udG91cg== bm94 IENvbnRleHQ= IHNsaWRl IHBoeXNpY3M= bWFnaWM= IGxpZnRlZA== IFZpc3VhbA== IHR1cnRsZQ== Q3Jvc3NSZWY= IGFkZXF1YXRl U0lORw== VEFC aWNvbnM= IFNB IGNvY2s= aXNlbg== bG9nZ2Vk MTk2 MTk5NQ== YnJhcw== RGlzYw== IGRlY2xhcmU= IHB1bHNl IGZvb3RiYWxsZXJz 5a2Y5Zyo IENvbnNpZGVy IEF0bGFudGlj ISIs c2FtcA== aW5wbGFjZQ== IHRpc3N1ZXM= IGZsb3dlcg== IGhvcm0= IGdob3N0 IHN0b21hY2g= IFJhdw== ZGVmZXI= IHBsYXRlcw== LiIpLA== IEtub3c= Il0v NzA1 bGluZXdpZHRo IHNlbGVjdG9y U3BlY2lhbA== c3F1YXJlZA== WUVT XCw= bGg= bGluZ3M= IOqw b3VyaQ== IFNjYWw= aWZhY2U= IyMjIyMjIw== b3BlbmVy cGhvbmVz QVJS MjIz ODA3 IMO6 aW5jb21l RkFJTA== IGV4cGxhaW5z IEZlYXR1cmU= J14kJyw= IGFwcG9pbnRtZW50 YW5pbWF0aW9u RUY= SXRhbA== cmluZ3M= wqc= YXRhYmxl IGNtcA== IHBvdW5kcw== IG9zYw== cmFkZQ== IGRlYWxz IERyYQ== IFJhdGluZw== CiAKICAg IDEwNQ== Li4uXQ== c2Vxcw== 0LvQsA== IHdhdGVycw== IEFkbWluaXN0cmF0aW9u WFla bGFyZw== dmluZQ== ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj aHRt IHByb2xpZg== IGNvbXBpbGVk IGNvbXByZXNzZWQ= Y29tZm9ydA== MDAwNA== IGtuaWZl IMOl IGFzc29jaWF0ZQ== CgkJCQkJCQkJCQkJCQkJCQk= bWV0aHls Tkk= UFVT UmF0aW8= cGl0dGk= aGVsZA== IGluY29taW5n IGJhdHRlcg== IERhbGw= IHByb3NlY3V0 IHNob2Vz ZWxsaQ== IDQwMQ== IHpp IHRyYXA= 5Yi2 Q291bnRyeQ== cmVlZHk= TGF1bmNo IGhvbGVz RFk= R00= UEFSRQ== U2Vs VG9kYXk= dnI= 6IE= c3RtdA== YWxvbmU= cm9jaw== dXJlcnM= IFRvbnk= aWV2 SU5ERVg= IHBoYXNlcw== aXRlcmFs TE9BVA== DQoJICAg 0YDQtQ== TG9hZGluZw== c2V0dXB0b29scw== IHJlZmVycmluZw== IGhvcGVz Q3VydmU= c2VjdHM= Q29tcGxldGU= IHRvd25z Q2hvaWNlRmllbGQ= VEFSR0VU aGRy IG3DqQ== IENhdA== IEJhbGw= IDE5NzQ= IHNwb2tlbg== IHNpemVQb2xpY3k= IGNvbm5lY3Rpbmc= ZG9v cmV0cmlldmU= ZGVzY3I= IGxpdGVyYWxseQ== IFBoaWxpcA== IGdyYWR1YWxseQ== 6K6+572u KClbJw== X18n IFJFU1Q= IHNjYWxlZA== bWF0dXJl IG9mZnNldHM= IGNvbW1l IMOJ IGJ1aWx0aW4= IEhvbGx5d29vZA== IEVtcHR5 IG1hbnVmYWN0dXJpbmc= R290 T2Nj dmF1bHQ= IOiOt+WPlg== IHdpbmc= IGNvbGxhcHNl IG51bWVyaWM= IGF1dGhlbnRpY2F0ZQ== DQogICAgDQ== U3VwcG9ydA== IGVuZ2FnZQ== IE9wZXJhdGlvbg== cmVjZWl2ZQ== IHJ1bGVk IGJvdHRsZW5lY2s= Y3JpdGljYWw= 5a2X56ym5Liy Q2l0eQ== TGFi Y3Jv bGluZWQ= IDExMg== IE1vZGU= IEJydQ== IFJHQg== T05MWQ== SVRJRA== cmVmcw== bmV3YXhpcw== IGVkaXRlZA== CQkJCQk= 5paw6Ze7 cG9seWdvbg== MzQ1 S0I= Tm9y Xyo= ZHR5cGVz aXRhcmlhbg== IGZyYXBwZQ== IGRk YW5kcmE= IFBvdXI= Kipde30s IG9ybQ== IHByZWZlcmVuY2U= IFRoYW5r IHpvb20= b3Rocw== ZXJybm8= Vmlld1NldA== w6Fz IGdvdmVybm9y IGluZmluaXRl IGFjY2Vzc2libGU= IC0tLS0t VmFyaWFibGVz IHB1bGxpbmc= RGphbmdvVGVtcGxhdGVz R2VybWFu KltA Q2FwdHVyZQ== VHk= kJw= IG11aXQ= ICMn b2Rh YWNhbw== IE90 IGNoZWFw IGRpcnR5 0LrQuA== VU1FTlQ= IGd1aWRlbGluZXM= IHBlcnR1cmI= bmV4dGg= IGFjY29yZGFuY2U= R3Jl U29ycnk= IEFSRQ== dGVjdGlvbnM= dXBncmFkZQ== IGVuZm9yY2VtZW50 IFplcm8= Q29tcHV0ZQ== IGdlbw== IGNvbnZpY3Rpb24= IHN0ZWFt IGVtZXJnZWQ= 6L29 IFNldmVyYWw= SEQ= eEZG IHdlbA== IFNvbHZl cHRpYw== IDE5NzM= MDAwNQ== IHByaW1lcg== c29saWQ= IE9ubGluZQ== IGJhZGx5 bWFrZXJz RUFmZw== IGRlY29kZWQ= YXRlcm5pb24= dHVw ZXJhbmNl IFNTTA== c2V0aXRlbQ== IEVuc3VyZQ== IFZp Y29ybmVy w6FyaW8= 5oiR IHBrdA== 4qyc IE1hcnlsYW5k ISEhISEhISE= IGFiYW5kb25lZA== IGVub3Jtb3Vz RGlzaw== Um91dGU= ZGFy IC5f aW5pY2Fs IGZhbA== IGVhZ2Vy cmlr IFdhbHRlcg== cHJvZmlsZXM= IENoYXA= IGNyZWF0b3I= ZGZz Mjg2 dW1lcw== IHRhcmdldGVk IHZhbGlkYXRlZA== IGV4aXN0ZWQ= bWV0YWNsYXNz Q2Fsbw== IC0tLS0tLQ== QXZn IERhdGVUaW1l IGFueGlvdXM= IGd1YXJhbnRlZQ== YnJvYWRjYXN0 c3VyZQ== dG9k IGNlbnN1cw== IHByYWc= IGJyb24= IDExNQ== IFNpbg== IFNQRQ== IEF6 IENsb3Nl IEZEUg== IEhvc3Q= ZnRz IFN0b25l IFByb3BlcnR5 IGNoaWxkaG9vZA== IGFwcHJvYWNoZWQ= IGRhcmtuZXNz IGNvbnN1bWVycw== IEFzc2VydGlvbkVycm9y IENvbmZlZGVyYXRl cGFyYW1ldHJp QWdl QnVuZGxl Z3Jv IGVhcnM= IE5FVw== c2hhbGw= IEphbmU= aWVzZQ== IHJvZGU= IHBvaW50aW5n IHJlbmRlcmluZw== IEhhcnJpcw== aG9yYQ== IEVuZ2luZWVyaW5n Q0FE RlJBTUU= dnN0cmluZw== IHPDpQ== IDE3NQ== cGVhdA== dWx1bQ== IGNoaQ== IyMjIyMjIyMjIyM= IGNvbnRyb2xsaW5n IDE5NzI= ZmlsZXI= KFte Ojo6Og== VVNC IHZhcmlhbnRz IHJvdW5kcw== Tm90Rm91bmRFcnJvcg== cGFzc2Vk JyIp Liku T3duZXI= aGV4ZA== aXRlcnM= IEFmZ2hhbg== YW1vbg== IHJ4 YXZvcnM= IEtu IHBvdmVydHk= IG9mZmVuc2l2ZQ== OTk1 MTcz Mjkw IHdoZWVscw== IGV4cGVjdGluZw== IGluZmx1ZW5jZWQ= TVU= TUVOVQ== ZWFzeQ== IGNvbnZvbHV0aW9u IHlh Jzpb IGNvbG9yZWQ= IGRpc29yZGVycw== ZXlvbmQ= aW5zaWRl IEFsYWJhbWE= IGxldHRpbmc= IE1jRw== TmVpZ2hi IE1hcmtldA== IHRvdWNoZWQ= IGNoYW1waW9uc2hpcA== Ijw= SmFtZXM= dG93 w4k= IGRpY2U= b2x1dGU= IFRhbA== b3Bpbmc= IHByb21w IHhs IGRpc2NyZXRl IHNjYXI= KioqKioqKioqKioq IGxlZ2FjeQ== IG1lbW9yaWVz IG1hZ25ldA== dXN0cnk= cmFnb24= IHJlcGxhY2luZw== ZXF1aXY= IEtvcmVhbg== IHBoaWxvc29waA== IGx5bXBo dGxz IHRpbQ== IHJlbg== IHJlbmQ= IFNvdW5k IENoZW4= IFBI IFZpcnR1YWw= IGNoZWVr IGFuZ3VsYXI= b3JkaW5hdGU= Q3JlYXRpb24= IFN5ZG5leQ== IEF1dGhvcnM= 57q/ YnVsaw== IExhd3JlbmNl cGhlcmljYWw= IGVudmlyb25tZW50cw== TGVnZW5k MjE1 RnJlbmNo SGlkZGVu U29sdmU= d2Vu xY0= IGhhbg== IHZhdWx0 IEJpbGx5 IEdM cGFycw== PScr PSdc bGlzdGVuZXI= YmVpdA== IENsYXJr bWFza2Vk VVJMRmllbGQ= Tk9ERQ== aWxpYXJ5 IHNhbGFyeQ== IHRocmVhdGVuZWQ= b2NvbGF0ZQ== U2Fs VEs= Z3BrZw== 7Jw= IEFiYg== IEhvbmc= b2Nz IDon Y2VkdXJl NDQ0 IGRlY2xhcmF0aW9u 5bqT IG11dGF0aW9u IFBvaW50Q2FzdA== QXZhaWxhYmxl IHNjZW5lcw== 44O844I= U2VjdXJpdHlNaWRkbGV3YXJl IGZyYWdtZW50cw== Kls= UkQ= 5YM= ZWR5 IFNlbGY= IFBvcg== ZXBpbmc= MTkz SUNT IGRpc3RhbnQ= IHJlcXVpcmluZw== IHJlY2VpdmVz IHNldmVyaXR5 IHRyZWF0bWVudHM= MTAxMQ== IHJlcGVhdGVkbHk= 6K6h566X JCk= Y2l0 cGl0 cGN0 2LE= ZGVncmVlcw== ZWxpbmc= IGxpZw== IGx1bmc= IGJlaW5ncw== dWRkeQ== IGxvYW5z IHt9XA== IGxvbmdpdHVkZQ== YnNpdGVz IGJlbmNo IGNhbXB1cw== UmVtb3Rl 4paS4paS4paS4paS b3Jlc2NlbmNl IEt1bHR1cg== ZHVwbGljYXRl ZWVudGg= a292 c3RpbQ== IGJheQ== IGJhZ3M= IEFicw== dGVyaW9y IFJvdA== IHJhY2Vz IHN1aWNpZGU= IGxvZ291dA== IGRpc3RyaWJ1dGlvbnM= NDg1 bWFya2Vycw== U3RhdGVtZW50 d2VpZ2h0ZWQ= IE1pbm5lc290YQ== IGRpYWdubw== IG5ld3NwYXBlcnM= IGluamVjdGlvbg== IG11bmljaXBhbA== VUFM V0lUSA== IGRyZXNzZWQ= aWRhZGVz IENMSQ== IGRlZmVuc2l2ZQ== b3JkaW5hcnk= IG91dGxpbmU= IDE5MTQ= aGVybw== 5YWo UmVndWxhcg== Y3Z0 IGNvbGxlY3RpdmU= IHByZWNpc2VseQ== UmFuaw== XHs= XHw= aXU= 5oQ= YXR6 ZWxhcHNlZA== IFRhcg== dGVtcGw= cmVzdW1l IGNsb3Vkcw== IHRyYWNlcw== YnVncw== IGRlbW9jcmFjeQ== IHNlcGFyYXRlbHk= IGNhbGxiYWNrcw== U2xvdA== IGFjY29tcGFuaWVk TkVYVA== UmluZw== fT1c 558= c3Rh ZGVl IHJlc2VtYg== IFRvaw== b21vcnBo Y29tcGlsZXI= IGdlbmVyYXRpb25z IGFwcGxl YWhvbWE= UmVnaXN0cnk= IGVycm5v cGVha3M= IGRlbGF5ZWQ= RXN0aW0= RklMVEVS IMyB cmVkZGl0 IEtleWJvYXJkSW50ZXJydXB0 Y2Fubm90 IGxha2U= IGx1Y2t5 IGF0b21pYw== IFZpbg== QU5L IGZsdXNo YmVpbmc= IGN1cnZlcw== VkVSVA== aW5zZXJ0aW9u IFByaXZhdGU= IGFmZmVjdHM= IGRpc3RyaWN0cw== IGluanVyaWVz ZnVuY3M= 0LDRgtGM 5Zu+54mH UUNE dWFudA== IMU= aW5naGFt IHJld2FyZHM= IEZlbA== CiAgICAgICAgICAgICAgICAKICAgICAgIA== IG5hbWVkdHVwbGU= bGlzdGVk IGludGVuc2U= Y2hlY2tvdXQ= IHNrdWxs IHFz IEFkZGl0aW9uYWxseQ== IGZyZWV6ZQ== Y2Fub25pY2Fs IGNvbXB1dGVycw== IHNob3BwaW5n IHByYXllcg== IHB1enpsZQ== IHN0ZWFkeQ== Q29tYm9Cb3g= IGdlbnRseQ== IERpZg== b3JkYW4= MDEz aWF6 IHNjYWw= aW94 IHBlYXM= bmd0aGVu NjA4 QVND fX17 IGRlc2NlbnQ= w6dv IEFtZW5kbWVudA== IGJlZHJvb20= IGJyaWVmbHk= Um9iZXJ0 5a+56LGh IHZhcnlpbmc= bGN0 dmlzZWQ= IG11bA== ZWxseQ== YWd1 cmVzaWQ= DQoNCg0KICAg IHBhcnRseQ== IHByb2dyYW1tZQ== bmFpcmU= IFJvb3NldmVsdA== cmVuZGVyZXI= Q3JlYXRlcw== RGlnaXRl 6ZW/ 57O7 QWly QU1Q bW90b3I= ICJ8 IGdhbQ== IHNoaXJ0 IDE5MTY= bW96 RURJVA== IGF2bw== IHRyaWFuZ2xl fV57Kw== IHJldmlld2Vk IFJob2RyeQ== NDQw U2ln ZWZmaWNpZW50 5rs= bWVhcw== IHRodW1ibmFpbA== IFJhdGU= YXJlaG91c2U= Y3JlZGVudGlhbA== IHNpZ25pbmc= NDU0 c3dhZ2dlcg== IGNsZWFyZWQ= TW9kZWxGb3Jt 4YC4 IGFubm90YXRpb25z IEVtbWE= IHBoaWxvc29waHk= TEFCRUw= c2VuZ2Vycw== YnJpZWY= d2lyZQ== kNc= IHB0cw== IFNT dW1icw== IEZCSQ== aWFo NzA2 S2V5Ym9hcmQ= bm9udW1iZXI= IG5vdGVib29r IGJyaWdodG5lc3M= bWFkZ3JhcGg= TWFpbA== bW9i 7JY= cmVhZGVk IGhvbGRlcg== IE11bg== IEJTRA== PVsoJw== IGNvbW1hbmRlcg== IHBhdHJvbg== bW9kZXM= Tm90aWZpY2F0aW9u IGZhaWx1cmVz JCRc SUNBZ0lDQWdJQ0FnSUNBZw== d2lraXBlZGlh UHViTWVk IEFyaXpvbmE= Li8o UHVy V1A= d2N0 w64= IHBhY2U= cmFjbGU= IEh1cg== IGFiaWxpdGllcw== CgkJCQoJCQ== IGltcG9zZWQ= IGJhc2VzdHJpbmc= MzYwMA== IEludGVncg== IHN1cmVseQ== w7xo VHJhamVjdG9yeQ== IEJvb2tz IHByaXNvbmVycw== Q09NTUFORA== 5Z2A 5q+P aGV4ZGlnZXN0 Jyg= SHVi W1sn eFI= b3Jhbmdl J11dLA== IHJvZA== UmVjZWl2ZWQ= IHByb3Zpc2lvbnM= IHdvcmxkd2lkZQ== IFBoaWxs IGdvdmVybm1lbnRz bGlrZWxpaG9vZA== IEZvcmVzdA== b21wc29u dmlhbA== IGZ5 IDExNA== dGVjaG4= IE5pY2s= IGthbm4= bWVkaXVt ODAzODY= IHRlbXBvcg== IHBsYWNlbWVudA== IGJpdHRlcg== IGVtYmFycg== IHNpbWlsYXJpdHk= RU1FTlQ= IGJpcnRoZGF5 aWVubmE= dHJlZXM= IG5lcnZl cGFyYW1ldHJpemU= NDgw Y29ybg== bWlncmF0aW9u 6ZI= 65M= aGVpbQ== aW9uZXM= IG1STkE= YXRlc3Q= IFNreQ== IENhcnQ= IEhhZA== cHJvcGFn IHByaW50Zg== cGhhbnQ= IHN1YnNjcmlwdGlvbg== XVst U2V0TGluZQ== NzA3 IGlkZW50aWZ5aW5n IEdlY2tv IG5vcm1hbGl6YXRpb24= IHBoeXNp IENyZWF0ZWQ= IENyZWF0ZXM= 5LmJ IGFsdGVyZWQ= c3R1ZGVudHM= IEJPT1NU NDEw U2F0 ZGhvbGJhY2g= bmlr aWxpbw== cHJvY2Vzc2Vz IGtpbA== IEpheQ== IHJvdXQ= IGFwcGw= 44GT c2xpZGVy IGdyYWJiZWQ= IGF1dGhvcml6YXRpb24= UHJlZGljdA== 5aSx IGRhbWFnZXM= RW1haWxGaWVsZA== b3dudG93bg== PS4= Tm9ydGg= a2g= dWo= 0J0= YW1lbA== IHlhaG9v IE5B IEJo ZWFycw== MjUy IFVuZm9ydHVuYXRlbHk= IGNyaW1lcw== IGxpdGVyYWw= IHJldHJpZXZlZA== RVBT YnJpZ2h0 b3JvdXM= IGluY2hlcw== aXBlcg== dWRnZQ== IDE5NzU= IFN0b3JhZ2U= MzA5 MjQ3 dWNoZXI= IGFzc29jaWF0aW9ucw== IE1pc3Npc3NpcHBp bWlzc2Vk IGFudGlib2RpZXM= IHJhaWx3YXk= QXJ0aWNsZQ== QVVD IGFycmFuZ2VtZW50 Y2dp ZnJvemVu dnN0YWNr fSs= aWxhdGVyYWw= IEltcGxlbWVudA== IDIyMA== IFd5 IHRyYXY= IGRpZmZlcmVudGlhbA== RGVsZWdhdGU= bGFzdGlj 44KJ b29zZXI= IGludmFzaW9u IEluZGlhbmE= 0LDQsg== RXhlY3V0ZQ== IFJlc2VydmU= U0NSSVBU YCIp ICdA IGRlZQ== IGFsZ28= IEJP YXR0bg== IHRleHR1cmU= Nzg5MA== b2Zmc2V0cw== dmlvdXNseQ== IGRpdm9y IHN3aW5n IGluc2lnaHQ= IHBsYW5lcw== IGRlY2xpbmVk QVBJVmlldw== dG9vbGJhcg== c3VwZXJ1c2Vy SW5kZW50 INC90LU= 5oiQ5Yqf IHJhdGluZ3M= IGNvZWZmaWNpZW50 6ZyA6KaB RHVyYXRpb24= IEltbQ== b3Jlbg== IFJ5YW4= MDEy IHJhbXA= YXhvbg== YWFh cmVhbHBhdGg= IGZhY3VsdHk= Y2h1bmtz INC+0YI= Q2FyZQ== TUFSSw== YnJl fSkp aW5mZXI= IG3Dqm1l YWRpcg== IDEzNQ== IEhhbXA= IGphbQ== IFw+ IGFueWJvZHk= IGJhY2tpbmc= IHRyYWplY3Rvcnk= IGFmdGVyd2FyZHM= Mjk2 IGNvbnNvbGlk SUdI IGV2dA== IGluc2lzdA== IGludmVzdG9ycw== IGNpcmN1bGFy cG9zaXRvcmllcw== IGRpYWdyYW0= Y29uc2lu IEdvdmVybm9y ZGlzY3JpbWlu IHJlc2N1ZQ== ZW5uZXNzZWU= REFZ ZHJh DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IGJvdG8= IEF5 aW1vcmU= cHRpZGVz IGRvY3RvcnM= cG9ucw== ZWZlbGxlcg== IHJlbGll MjMx YW5jZXJz IElOVEVS IGNpcmNsZXM= IG5laWdoYm91cg== IHJlc3RyaWN0aW9ucw== 5YaZ IGpvdXJuYWxpc3Q= IHByZWduYW50 IGFwcHJlY2lhdGU= bWFwcGVk IGxhbmU= aWxzdA== IGdhbGw= b2Rpbmdz IFBSRQ== IEZhYw== IFJvcw== IEdvdA== b2Ji aWJsaW5n bmVlZGVk cGFydGljaXA= Tm90SW1wbGVtZW50ZWQ= IGFjY2VwdHM= 5Lqk IGhpc3Rvcmlj IGV4cGVjdGF0aW9ucw== IGNvbnRhY3Rz U2FtcGxlcw== QW5pbWF0aW9u Jycs SEFORA== UkFURQ== bm9k 5ro= 6Ik= INg= IHRlbA== IGZyYWN0 IG5hY2g= IFND IFNwZQ== YWJp SU5DTFVESU5H IFlhbg== cmVmbGVjdGlvbg== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== SVNP IFNlcXVlbnRpYWw= dG9rZW5pemU= RXh0cmE= Q3JlYXRpbmc= 4qCA4qCA TW9iaWxl VG9y VGV4 Y2o= 66Y= IGF3YXJkcw== c3RhaXJz IHBhcmU= aW5nZQ== aXNw IGhpZXI= IFBhcw== IE1lcw== IEZvbw== YXZpZXI= U3RyZXRjaA== TUVN IGludml0ZQ== IGRlZXBjb3B5 IFNhbXVlbA== IE1ldGhvZHM= IGFkYXB0ZWQ= JF57 Xygp aGlt cHJlcw== fV57XA== IGFlcg== IHdvcmU= IGVuZGU= dGV4dHVyZQ== MzI4 cGxheWluZw== IGNhcGFiaWxpdGllcw== QXJy b3BlbmVk IGZvcm1hdHRlcg== IE5lZWQ= IHN1cnZpdmVk IExhYm91cg== dGVsbA== dW8= b25pbw== IG1pcg== cmFzdA== IHRodW1i IHZ4 b2RvbQ== Z2V0TmFtZQ== IFJ1cw== IGNvaG9ydA== dW1waA== TGlzdFZpZXc= IEludGVs 44KK cm10cmVl QU9Edg== QW1lcmljYQ== TWFya2Vy IFNraXA= IHNjaGVkdWxlcg== IEdyZWVjZQ== U2ltcGw= VU1F dW9u IGJ6dw== ICcuLi8= IGhpcmVk YW10 IFBvb2w= Y2xvdWRz IDE5NDU= IGFnZXM= 0LjQsg== IFNlYmFzdA== w610 dW1ibGVk U3VwcGxlbWVudGFyeQ== IHdvbmRlcmVk a2xhaG9tYQ== IHN5bnRoZXNpcw== IGV0aG5pYw== Rml4 Y29yZA== aGM= IG1hcnQ= YXNjdGltZQ== IFRF IGNvbmRpdGlvbmFs IEJyaWFu IGRpc21pc3M= ZGJ1cw== IGludGVyYWN0aXZl IGFjaWRz IGFjY29tcGFueQ== IHpl YmxlbXM= NDA4 IHN1cnJvdW5kZWQ= IHBvc3Rlcmlvcg== Z3Jw IHNwZWN0cmE= IG1vdW50YWlucw== IHN0aW11bGF0aW9u SVRJQUw= T3JpZ2luYWw= IHR1bm5lbA== IGluZGVwZW5kZW50bHk= UERG ZGFwcA== IGluaGFi cGxlcg== IGphaWw= Cgkg RVJO IHNwcmF5 b3RoeQ== 44Kk IElOUFVU IHBvcHVsYXRl YWpl IExhdW5jaA== IE1vb3Jl IGVzdGFibGlzaG1lbnRz aGF2aQ== ZGV2ZWxvcGVy IGNvbnRyYXJ5 ZGVsaXZlcnk= V2Fy IG9ydGg= IHRndA== c3R1ZmY= YXNwZWN0 IEN1Yg== PT0nLA== IHNlYXRz IEJS b3V0aGVhc3Q= IHNoYW1l IEp1bg== cHJlbG9hZA== dGV4dHM= IFZpZXQ= IHBvZW1z IGJ1bXA= IGJsYWRl NjU0 Nzg3 IEdlbmVyaWM= IERvY3Rvcg== INC/0L4= U3dpdGNo IHBoZW5vbWVub24= Z3VpZA== eyU= 5pM= IHJlY292ZXJlZA== MDAzMA== IE5BU0E= QWx0 Y29uc2lzdGVudA== TGVuZ3RoVmFsaWRhdG9y IHNjcmFwZXI= IGZvcmdvdHRlbg== Tm90aGluZw== cmFzZXM= IHN0aWZm IEFzaA== aXZvcw== c2hhbA== IHVwbG9hZGVk IHNha2U= d2VlcA== aGVybGFuZHM= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IHN0YXJ0cHJvamVjdA== MjQ4 DQoJDQo= IHByZXNlbnRz aW1lbnRv dHhu Zm9udHNpemU= YWN0aXZhdGVk 5bCx IGhvcGVk w7Fv IEZyZWRlcg== YXNzb2NpYXRlZA== IGJyaWxsaWFudA== IGR1dGllcw== Q0VOVEVS SnVs S2VybmVs ZmF1bHQ= aGc= IHRhbmc= IFRyaWI= IHZvdw== IERpY2s= IGFkdmVycw== NTA3 IGNvcm9u IHVuZGVydA== JCQkJA== IGhvcml6b24= IFNtYWxs IHF1aWV0bHk= U1RSVUNU IG1hcmlqdWFuYQ== IGJvbmVz Y2V1dA== cml1bQ== dGVsZQ== JykiLA== IEto U3R1ZA== bm90YXRpb24= QVBURVI= cGFja2Vk QURBVEE= IHNpbWlsYXJseQ== d2FpdEtleQ== IENPTU0= Ym91bmRhcnk= IGZvbGtz IGJvdHRsZXM= cmVtYWluaW5n U0lHTkFM Y3Z0Q29sb3I= SUlT UlBD ZWlu IE1hdGVyaWFs IERU PScj Zm9ybWF0dGVk IDEwOA== Y3Vycw== QWxhcm0= IGRpdmlzaW9ucw== IHR3aXN0 IGdlb20= VVNFRA== IFRyYWNl IE1heGltdW0= IHNhdGlzZnk= IEhhbmRsZQ== IEJvdHRsZQ== LC4= QnJlYWs= U29saWQ= b3Jybw== IG5hdmln IGRucw== IGR1cmNo ICc7 b3R5cGVz IGRlYXI= IGd1dA== IDIyNA== IERvbmFsZA== IExlYXJuaW5n b3duZXJz IG1vaQ== IGNvbW1h 0YLQpw== RGVjbA== Tk9SRQ== 57G75Z6L IGludm9sdmVtZW50 Ojw= QXVk U3VjaA== VElPTg== bmVzdA== IGNhdg== IGZj IG7Dum1lcg== dXJhYmxl IHlhdw== IERN IEVmZmVjdA== IDM1MA== aW5zcGVjdA== Y2FsY3Vs YW5ub3RhdGU= IM6x 5Yqh IGN1bXVsYXRpdmU= Ll0s SGlkZQ== TVVMVA== ZGdldA== a2xl DQogICAgICAgICAg YWRhbQ== b21pbmc= Y29uZmlkZW5jZQ== IHB1Ymxpc2hlcg== IGdyYXBoaWNz ZGVjbGFy IGJvbmRz IGluY29ycG9yYXRlZA== IHVwZGF0aW5n IGRpc3Rpbmd1aXNo MjY2 dGlsZXM= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IHRvbnM= IGFpbg== IFN1Y2Nlc3M= aW50ZW50 IGVuYWJsZXM= aW9sZXQ= VG9PbmU= IHZpc2l0cw== 4YCE bmVjZXNzYXJ5 IGludGVsbGVjdHVhbA== Kics MjE2 U2lkZW4= YmFuZHM= b25p YWRt IFRJTUU= IEFTQw== IENoZW0= IEJyeQ== cHJvcG9zYWw= IGVsaWdpYmxl IGVudGVydGFpbm1lbnQ= IGhhbmRmdWw= NDA2 IGdsYW5jZQ== V2l0aG91dA== IGZpdHRlZA== QXNzb2NpYXRpb24= IG5ldXJvbnM= IHNlYXJjaGVz IEhvdXN0b24= MjE3 U0NLTQ== cm1z YXJtcw== IGZm IHB5cw== IEJpbw== aWxsYXI= cHJvdGVpbg== IDE5MzI= U1RFUA== Il1d IHB5cmFtaWQ= IGJpYXNlcw== bXVvbg== IGVtZXJnaW5n INGN SG90 SHRtbA== YmFycw== aW90YQ== bW90aGVy IGZlc3Q= IHBI IGJlYWNo IHByb2o= MDE0 IEV4Y2hhbmdl c2xpZGU= bGVnYWN5 b21iaWU= IFN0ZXdhcnQ= cG90ZW50aWFs IGZvaQ== UmVsYXRpb24= IGFzc3VtZXM= 6L6T5Ye6 IFRyZWVOb2Rl IFZpY3Rvcmlh IEJyaWdhZGU= YXF1ZQ== ZHo= bmF0 IE1vbmdv IEdhbGw= YWNhY3M= dWRzb24= MjU5 Q29sb3Jz NDU3 RkZFUg== c2Vydmlj Rm9yY2U= Z2xpY2g= IGRlYnVnZ2luZw== IHNodXRkb3du IFNjb3R0aXNo IHJlZmxlY3Rpb25z IGRpc3B1dGU= U2lkZW5vdGU= UHM= cmVqZWN0 IEhlbmQ= IHJvYWRz Ym9vc3Q= IDE5Njc= IGRpc2FiaWxpdHk= UHJvdG8= MTAwMDAw 6K+v IGRlY2xhcg== IFNpbWlsYXJseQ== IGVuY291cmFnZWQ= VlZWVg== RU5BQkxFRA== IEhPTERFUlM= VEI= d2Y= 5rQ= ZGVtbg== b2xpdGFu IGdsb3c= IDE1NQ== IFJpY2s= IGNvbXBldGluZw== bGljaGU= TUVUQQ== 4oCUIg== IGNhcGFj dGhyZWFkaW5n IHZpc2l0b3Jz IHN2bg== IG9waW5pb25z SVRJU3RhdGU= IHRhbGVudA== bGlzZGFwcA== MzAwMA== cGFzdA== d2Vk IGN3ZA== ZGVicmE= ICd8 IGdlbA== IFNhbnRh IEljZQ== IGVsYXBzZWQ= IFV0aWw= IG1hbmFnaW5n Q09N IGNlbGx1bGFy IHVuZGVycw== UHJvY2Vzc2luZw== dW5zcXVlZXpl IHN5bXB5 IENoaWxkcmVu bmV1dHJvbg== IHRvcm5hZG8= SnVuZQ== bGFjZQ== c3RlZA== IGZ1 IHNsbw== ICcnKS4= dXJuYW1l dW51c2Vk IE51 ICIiIiw= IGNsYXI= IHBlcnNvbmFsaXR5 w7xu IFNjaG9sYXJzaGlw IEtlbGxleQ== IFJhaWx3YXk= SVRJRGlzdHJpY3Q= Q2FuZGlk ZGF0ZXI= ZmFyZQ== IHVs c3RyZQ== IHBvdW5k IHZpdHJv a2VlcGVy IEJyYW5k IHNoaWVsZA== IHVwc2V0 MzIx Q29uc3RydWN0b3I= bmV0dA== e31c IGNoZWVy IGV4dHJhY3Rpb24= Y2Zp IGNvbW11bmljYXRpb25z IElzbGFuZHM= aXRlY3R1cmU= 5a+G IHNpbmdsZXM= dmVyYm9zaXR5 c2NlbmFyaW8= 5oOF RnVuZA== wpQ= ZXJhdGVseQ== b3Ji YWxpc3Q= IHdy IHdhbmQ= b3R0b24= dmVsZWQ= IFNVQg== IHZpbQ== YW15 PScn ZWxsZW4= IFZlcnk= IG5vY2g= IGRhdGFz IGhlYWRhY2hl OTAy NDg3 TG9nZ2luZw== IHN0b3BwaW5n IGRyaXZlcw== IGRldGVybWluZXM= QmluQ29udGVudA== IERvdWdsYXM= IHJldGlyZW1lbnQ= Rks= anA= a3Y= YWxwaA== IHNvdW5kZWQ= IE1peA== KSkpOg== IFJvbA== IGVuZW1pZXM= bGlidmxj bGltcA== IGRpZmZlcmVudGx5 QWxjaGVteQ== UnVuSUlT IFVTRVI= IGFpcnBvcnQ= RU5ESU5H IFN0cmluZ0ZpZWxk cGFyZW4= IG11dHVhbA== IFN0dWR5 IEtlbGx5 cmFkaWFucw== YXBldXRpYw== V2VsY29tZQ== IGFr ZGVi IFNlbA== IE1hY2hpbmU= IHRyYWRpbmc= RXhwZXJpbWVudA== RVRQ IGJ1aWxkcw== c3VyZg== 5omn IHBsZWFzYW50 dHlwZW5hbWU= IEtlbnR1Y2t5 IGVuenltZQ== IExJTkVBUg== 5q4= IHdv YWRpYw== IFBvdw== IGl0ZXJhdGU= aWZpY2lhbA== IGN1cnNlcw== IGpvaW5pbmc= 5YyF IHZpc3VhbGl6ZQ== IG9kZHM= Q29tcGxleA== 546v IHRoZW9yZXRpY2Fs MjY1 QWxp SEk= aGluZA== IHB3 IHdpbmdz ZW50YQ== aWxsZXQ= IFBp IEZhc3Q= IEJhbHQ= IHNoYXI= IDE5NzY= aGVyZW5jZQ== ZW5zaXRpZXM= IFN0YWNr aWVyZW4= cmlidXRvcg== IGRpZmZlcmVudGlhdGlvbg== NzQ0 IHF0 RG9jdW1lbnRz IERlbHRh IE1vb24= Z2xvYmFscw== IHNoaWZ0ZWQ= Z2lz cG9k IHNvZGl1bQ== IGhhbmdpbmc= IENSRQ== YXBzZQ== IGV4cG9zZXM= cmVzYw== SU5WQUxJRA== ZmlsZW5v ZXJuYXRpb25hbA== IHNsYQ== IGJsb2NraW5n IG1lbW9wcw== IGNvbnNpc3RlbmN5 bXVsdGlwbGllcg== SW5pdGlhbGl6ZQ== c3R1ZHk= TWluaUFPRHY= RmluYWxseQ== SVJFRA== bWly cHByaW50 5rY= aXNuYW4= aWRvcw== aWdn IDAz IGNvbnNlbnN1cw== YW5kbGVy YWNjbw== IGvDtg== IHNwZWNpZnlpbmc= IHB1YmxpY2x5 QnlJZA== IGRlc2lnbmF0ZWQ= IHByb21vdGlvbg== IHRyYWNrZXI= U3dpZnQ= IGNhbWVyYXM= IHZlZ2V0YWJsZXM= Q0xF aW91 4bo= IF57 cmVwb3M= dXNi cHJpbnRm MzUxMQ== IGFudGVubmE= 5a6M IHByb2Zlc3Npb25hbHM= KCIiLA== IHRhYmxlc3Bvb25z 0LXRgtCn YmFzaWNDb25maWc= d2VzdGVybg== 54m5 IGlzb2xhdGlvbg== IHJpZGlj IG9saXZl IHdpcmVsZXNz 0LXRgtCn0LQ= SFY= dmlj IGRs IFRh YXBhdGg= bGRi YXJrcw== IGhlYWRxdWFydGVycw== Mjc3 Njg2 IGFuYWx5c3Q= 5pat VHJhbnNmZXI= IHJlbWluZA== IHBlcnNpc3RlbnQ= IENoYW1waW9uc2hpcHM= IENhbXBhaWdu Y29tYmluZWQ= wqss QXVzdHJhbA== Rlc= U3lz V2FsbA== aW5jaGVz IGJt IHZvdGVk IFBlYXI= IFBpZXI= IFVzYWdl IFVURg== IGlkYQ== NzA4 IMOq IG9jY3VycmVuY2U= bWF0Y2hpbmc= Zml0bmVzcw== ZXNzaW9uYWw= TnVtYmVyT2Y= dHJpYW5nbGU= IGNvbW11bmljYXRl YXNzaWduZWQ= b2dlbmVzaXM= IHNxdWFyZXM= IHN0cmVuZ3RoZW4= VkFMSURBVE9SUw== IGFkdmVydGlzaW5n YXJtYWNldXQ= ZXhwbG9yZXI= IGFsZQ== c3R1Yg== IHRoeQ== IE1hcw== IEZlcg== cHJvb2Y= cHJvdGVjdGlvbg== IHByZXNlcnZlZA== Y29jaw== IGRpc2NyZXRpb24= IH0pLA== Zm9yZWlnbg== Mjkz IERlYXRo IFNlYXNvbg== dmFzY3VsYXI= IGZvb2Rz QWN0aXZhdGlvbg== R1JBWQ== IHN0cmVhbXM= YWJzdHJhY3RtZXRob2Q= UmE= ZGV0ZWN0b3I= IHBlYw== IGJpbGxz IGRlcXVl dWxwdA== IFNwb3J0cw== IExhcw== IFdhcnM= dWRz IGFibm9ybWFs IGluY2x1c2lvbg== bWR6 5Li7 QWxwaGE= IHNhbXBsZWQ= 5LqM IGNyb3NzaW5n IGV4ZWN1dGFibGU= d3RhY2Fjcw== IHN5bW1ldHJpYw== bGF1bmNocGFk RWFzdA== bGFy b3h5 cGVs cml0aW9u YWRp Y29udmVydGVy c2V0Rm9udA== IEtpdA== MTk5Mg== ZGl2aXNpb24= IGxlc3Nvbg== UmVxdWVzdEhhbmRsZXI= UGVyZm9ybQ== c210cA== IHZpc2l0aW5n IHR5cGVuYW1l 5Y2X IHN1ZG8= IHRyYW5zcG9ydGF0aW9u IE1lbW9yeQ== IFZvbHVtZQ== Q29uc3RhbnRz RGFt Z2Vucw== amF4 cm5n c2l6ZWQ= CQo= IGRlbW8= YWJvdmU= IGFscGg= Y292ZXJhZ2U= NDU4 5rOo YXNzZXJ0SXNOb25l IGRlY29yYXRlZA== IGRvbWluYW50 IHZpcnR1YWxseQ== PSIiIg== RkFDRQ== YXRldXI= IGFub255bW91cw== IEROUw== IFJFUw== bmVlZHM= IGNoZWNrc3Vt c2xhdmU= cmlzaW5n IHJlcHJlc2VudGF0aW9ucw== 44Or 5a6J IOWw cmVsYXRpb25zaGlw IHByZXBhcmluZw== IE1leGljYW4= IHJlcHJvZHVjZQ== RmluZGVy csOp dm90ZXM= ZXJvbg== ZXJhbHM= IHBpdm90 IHJlYWNoZXM= IGxpY2Vuc2Vk IEV2YWx1 YXJkbw== dHJ1ZGU= ZnVsbmVzcw== IHN1cmY= b2xlc2M= IHZleg== IGh5YnJpZA== IHJlY3RhbmdsZQ== c3ltbWV0cmljYWw= IHBhaW50aW5n 5Lyg c2NyaWJlZA== U2ltcGxpZnk= d2VyZQ== IHJldm9s IGlwcw== ICIoJw== IHJpdA== IHJpZGluZw== IEJvbHM= IERhbA== IHByb3Bvc2Fscw== ZmlsZUlE IHN1cHJh Y2VudGVycw== IEFuZHk= IHBsYWNlaG9sZGVy IHF1YW50aXRhdGl2ZQ== IHN1c3BlY3RlZA== b3B0aW1pemU= IGJvbnVz IHN1ZmZpY2llbnRseQ== J18= U2FtZQ== U3Bs Y3J5cHQ= ZmluZ2VycHJpbnQ= 6rI= b3Jpb3Vz c3RhbGw= IGNhZGE= IG1pcmE= cmFkYQ== IHdoaXRlc3BhY2U= IEd1bg== IGpva2U= IHByZWxpbQ== SU5JVA== IHVwc3RyZWFt Y29sb24= IDEwNg== SUNPTg== RVNQcm9kdWNlcg== ICFb Uk9M IE1lZXRpbmc= IEZlZWQ= 6K6w IGRpZmZpY3VsdGllcw== TWV0aG9kcw== IHByZXNjcmli Q29ycmVjdA== IGluc3RpdHV0aW9u Y29tbXVuaWNhdGU= IFN0aW1zb24= QWZm R2xvYg== eEU= aXNzb24= IGhvbmV5 aWdoZXI= IElzYQ== a2VpdA== IFBE IEJydW4= bGxh IHB5cGxvdA== VXNlckF0dHJpYnV0ZQ== LicpLA== ICAgIAogICAgICAg bWVtbw== IFRp IHN0b2xlbg== c3Nvbg== b3V0aW5l SU5O IGRpc2FzdGVy IGN1cmlvdXM= IGV4cGVuc2Vz In1dLA== IGhvc3RlZA== 0LDQvw== ZmFzdGE= IEJldHR5 DQogICAgICAgICAgICANCiAgICAgICAgICAg aXRyb2dlbg== YWFhYWFhYWE= QW5zd2Vy UUZyYW1l YmlsbA== ZHY= Z3c= Z2ll IG5pbmV0 IGRlcG9z IEZ1dHVyZQ== IHJoeQ== IEJ1cm4= IFRoZWF0ZXI= IGNhbmFs aWVudGU= SUNP aXNzYW5jZQ== U2VjcmV0 IG1hcmt1cA== IFdoaXQ= 6L+e U2NvdHQ= IHBhcnRpY2lwYXRpb24= dG9ycmVudA== VUM= d291bGQ= IHRpY2tz IHBpbmc= b3RoZWQ= b2RnZQ== aXZhdGU= IDE5NjY= IDE5NjM= RU5BTUU= IHNwYXdu YXR0ZW5lZA== VVRJT04= IGdsb3J5 IHRva2VuaXplcg== IGdyYWRpZW50cw== IE1hZ2F6aW5l V2ViS2l0 MjIyMjIyMjI= TWluaW11bUxlbmd0aFZhbGlkYXRvcg== MzY1 Q292ZXI= SU1Q WG1s c2l6ZXI= IG5vbWlu aWRhcw== IFNvdXA= IFBpbA== CgkKCQ== IDE5NjQ= NjQ0 DQoNDQ== UmVzb3VyY2Vz IHZpZXdpbmc= Q29udGlu RW5lbXk= IGZvcmVncm91bmQ= YWpheA== Q29tbW9uUGFzc3dvcmRWYWxpZGF0b3I= IHNpbmdpbmc= IGZpZnRlZW4= IG1peGluZw== RGVzdHJveQ== SUJVVE9SUw== IGltcHJlc3NpdmU= TnVtZXJpY1Bhc3N3b3JkVmFsaWRhdG9y U2ltaWxhcml0eVZhbGlkYXRvcg== VXNlckF0dHJpYnV0ZVNpbWlsYXJpdHlWYWxpZGF0b3I= cHo= CSAgIA== IHR1cA== IHRlbnNpb24= dWx1 IHN0YWlycw== IE5hdGlvbnM= YWxsaW5n IHVudXNlZA== IHBlcmNlaXZlZA== IH0kJA== dGhvbnk= IGRpbWlu 57uP cGh5c2ljYWw= U2lnbmF0dXJl IHBhaW50ZXI= 6Lev IFJlZGlzdHJpYnV0aW9ucw== QnJpdGlzaA== MzEx SFE= UHV0 b2o= cnVz DQ0KDQ0= IHJlYg== IHN0dWI= YW5nYQ== IGNvZWZm IElucw== Y29udGFpbg== Y29udGFpbmluZw== IHJlY3J1aXQ= IEFubmE= IGZpbGVzeXN0ZW0= cmVzb3VyY2VJZA== IGhpdHRpbmc= VmVyaWZ5 UmVsYXRpdmU= UG9vbGluZw== IEdyYW50 cmVjZWl2ZXI= TUVUQURBVEE= QVVUTw== IFNhZmFyaQ== T0c= U2Vt U0hF YnVkZ2V0 ZWk= Zms= IGZ1c2lvbg== IGRyYWlu IFRFWFQ= IDExMw== IDA1 IEdvcmRvbg== dWdhdGU= Z3JhZGVz ZmlsdA== ZGFv 0YDRgw== SW1hZ2VGaWVsZA== SUZJQ0FUSU9O bXV0ZXg= INGB0YI= c3J2 b2N5dGVz TWFyY2g= aGI= 67M= cmVjb21t YXRvbWlj bGVhZGluZw== IHJlcG9z X186 IE5lbA== IFtbJw== IEhheQ== IEV0aA== YWto IGNvbG91cnM= JycnKQ== bmVhcmVzdA== IG92ZXJyaWQ= NTA2 IGluZGlyZWN0 IEFydGh1cg== Mjk4 Q2hlY2tCb3g= IHdlaWdodGVk IGVtcGxveWVy YXVyYQ== IGZlZWRpbmc= T3BlcmF0aW5n 5omT IG1haW50YWluaW5n IHZpbGxhZ2Vz IHN1YnN0YW50aWFsbHk= 64uI IERhdmV5 Y3J5cHRv anBlZw== aWNs IG1pbA== ICfvv73vv70nLA== IE1vdA== IHdlYnNpdGVz IHJvdXRlcg== dmVudGlvbnM= Zm9yZWdyb3VuZA== Q2xhc3Nlcw== IEV4cGVyaW1lbnQ= V2VpZ2h0cw== IENsYXJl IGdyYXRl Q0FTRQ== IGFkdmFudGFnZXM= IGN5dG9r IHJhbmtlZA== YnVzaW5lc3M= RmFjaWxpdHk= 56Gu R1VJ b25ldA== IG5hcw== ICcqLg== IGdsZQ== IGV4Y2x1cw== IEVD ICIiIik= IHNoYWxsb3c= aWVudG8= IDcwMA== aXN0cmF0b3I= IGhhcHBpbmVzcw== ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg Q0NDQw== IGlsbG5lc3M= IElkZW50 IHJvY2tz IGVsZWN0cmljaXR5 IGFja25vd2xlZGdl IHNlYXJjaGVk 5YaF5a65 dHVydGxl Iyw= Kygt IGZyaWdodA== IGZhaXQ= IHNweQ== IGRydW5r IGx1eA== IERvdWJsZQ== IGtpc3M= ZGF0YWZpZWxk IEphc29u IHBlcnBldA== Zm9yZ2V0 PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ== NTU1NQ== Y2hlY2tib3g= Mzg1 OTg0 VEVNUA== IHB1YmxpY2F0aW9ucw== dW5pY2FzdA== 5YW2 U3BhY2luZw== INCy0Ys= QURFUkE= Ym91cm5l IGNvbXByZWhlbnNpdmU= V2NmdA== Nzc4 R0FO UnVsZXM= Wmlw XT4= Znk= wrc= IGNyYW4= IHJlc2Vydg== IHJlbmFtZWQ= IHVi IFBpY2s= IFdU MDE5 IGpvZw== Q2hhcnQ= YmFja3M= cmFjdGljZQ== Mjc2 Njcy IGFkbWluaXN0ZXI= Q29kZXM= UHJpdmF0ZQ== 0L7Qu9GM 562J c21vb3Ro IGFidW5kYW5jZQ== LSc= RGll UGVycw== V2Fsaw== Wy4uLiw= ZmVl IC4uLi4= aW5qZWN0 IHRyb3A= IGxlbnM= b2xpbmU= IFN1cmU= IEFzaw== IHNlY3JldHM= IE5hdGlvbg== IEdhYg== Z3JhZGVk IGVuZG9yc2U= aXNzYQ== dGhlaXI= IHdhbnRpbmc= cHJlc3N1cmU= YWNjdW0= 0LDQuQ== IFByaXpl IGNvbnNpc3RlbnRseQ== YXN5bXB0b3RpYw== IEJ1aWxkaW5n Y29sbGlzaW9u IHJlY29uc3RydWN0aW9u SEJ3Yw== IERpZWdv IEhvdGVs bmVhcg== cmFy IO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vQ== gqg= luWMug== IGNvcmQ= IGNvdXM= IGJlYXJpbmc= YW5kYWw= IE5hdHVyYWw= IEh1bmc= MDEwMA== IGFjY2VsZXI= IGltcHJlc3Npb24= JykpLg== T1BFUg== aGVsaWFs IERlZmluaXRpb24= IGNob29zaW5n eW5hbWljcw== IG1pbmRz IEFmZmFpcnM= IG9sZGVzdA== IGtpbmdkb20= IGVtb3Rpb25z IFNhcmFo VHJpYWw= cmljZQ== 6LY= cmV0dA== IHBpbms= IFJvdXRl bWF0cGxvdGxpYg== IGNoZWNrZXI= UVVFU1Q= c2Vzc21lbnQ= cm93bmVk IGRhbW4= IGVzdGFibGlzaG1lbnQ= XV4u MjE4 Ojwv aGFzcw== IHR3ZWV0cw== ICc8Lw== IGRlZw== IFBhaW4= IExvYw== IGRpc2FncmVl NTA1 Mjg1 IENvbW11bmlzdA== IGluZGljYXRvcg== UmVwbHk= RW5kcG9pbnQ= IHRoZXJtYWw= QUNUSVZF IFBoaWxpcHA= IGZlYXR1cmluZw== IFNvY29ycm8= IFByZW1pZXI= IE9udGFyaW8= RGFu XX0p dGFw IHJlcGV0 aXJ1cw== IHZvY2Fs IHJuZw== IExlbmd0aA== IHdhc2hlZA== bGRhcA== IEdQTA== YWNyZQ== YXZp RXF1YWxz cmVuYQ== MjM2 IHRyYWlucw== IFRlc3Rpbmc= bWNSdW4= RXh0ZW5zaW9ucw== IE11bHRpcGxl UmFkaXVz IEhvb3Zlcg== IHZ1bG5lcmFibGU= QVo= am91cg== bW1h wpI= ZW50cmlj IGhvbHk= IFBL IExE IExhbWJkYQ== IGNsb3RoaW5n IEluY2x1ZGU= IG9ic2VydmVy MTk4OA== U0VD b2lucw== dWdodGVycw== ODA4 YXppbmVz IGhlcmVieQ== b2dyYXBoaWNhbA== IEFwcGx5 YXNjdWxhcg== UmVmcmVzaA== IGNvbXBhcmFibGU= IGVpbmVu IG5kYXJyYXk= IE1vZGVybg== YXNzZXJ0Tm90SW4= IEFsZW1iaWM= cXI= c3Vz eG1heA== IGJhdGNoZXM= IHRvZ2c= IGx4bWw= dmV6 IFNlbnQ= IEJ1bGw= IHN0cmF0 LiIpKQ== MzM0 MjY4 IE5laXRoZXI= bWlkaQ== IHdlcmdlbGQ= IGFjcXVpcmU= IHN0cmljdGx5 IGNvbXBsYWludHM= 5omn6KGM UEFSVA== dmI= d2hlZWw= IHN1cnJl IGJlbnQ= dW5peA== IE1haWw= IGFsZ2VicmE= ZXdhcmQ= dXN0cmllcw== IFN0YWZm TmFtZXNwYWNl ODA0 bG95ZWU= IGxpYnZpcnQ= ICIuLw== SUZZ IGRpYWdvbmFs IHBlbmV0 IENsZWFy IGluaGVyaXRlZA== IHN5bW1ldHJ5 Lycr Oycp RWxlY3Ryb24= em9uZXM= 56U= IG5y IGxhbQ== IENBUA== IGFsbG9jYXRpb24= IFx7 IHJhY2luZw== IGFzc3VtcHRpb25z MTk5Mw== dmVuaW8= MzM1 c2xpbQ== NzA0 IENvbGxlY3Q= IGV4cGxvcmF0aW9u dGFidWxlaXJv YmFsYW5jZXI= XSxbeyI= IGF3ZXNvbWU= IGJhbGxz IGFsbGVsZQ== IHZvdGluZw== IHdhcm5lZA== c3F1YXJlcw== 6ICF IFdpc2NvbnNpbg== ZW1ldGVyeQ== Y291 Y2FzY2FkZQ== dnA= eG1pbg== IHBhdXNlZA== IGV1cm8= IENT IENvdw== IHJubg== IGtn YXVlcg== MTMwMQ== fSkk YW5jZWxs IGVzcA== IENhcmw= RGlzdHJpYnV0aW9u KCIvIik= 4paI4paI4pU= IENhbXBiZWxs ZEc= IHRjcA== YXNzeQ== IEhvbGQ= ZmZm IHByZXZhbGVuY2U= NjA3 YXJyaWVycw== RE9NQUlO IGNvbW1pdG1lbnQ= IGRhbWFnZWQ= 6YeM IHVwZGF0ZXI= IERpZ2l0YWw= 5L+d5a2Y QVdT TWVu c3VnZ2VzdA== c3Rlbg== IGhvdmVy IER1cg== IExvY2F0aW9u IEhhbms= YWNv IGxlYXI= YW5zaWJsZQ== MTk5MQ== U0VTUw== w6llcw== IGp1c3RpZnk= aXZlcnNhcnk= TWVzc2FnZVR5cGU= IGVtYnJ5 VG9vbFRpcA== bGlrZXM= IEV2ZXJ5dGhpbmc= 5ZCN56ew SW52b2ljZQ== IFZhcmlhYmxlcw== IHJlbWFya2FibGU= aGx0RVNQ RnVu bmVu IGNhdGFs cm9k IEJhbmQ= IEV2ZXI= IE9pbA== b21teQ== UmV2aWV3 b2ZmZXI= VW5pdmVyc2l0eQ== IGZ1bGZpbGw= S2VlcA== IGRyYW1hdGlj Q1VFVFA= IG5hcnJhdGl2ZQ== VHVuZUNVRVRQ 0YLQp9C10YLQp9C0 UnVuSUlTdW1tZXI= SXI= DQogICAgICAgICAgICAgIA== hpI= cmV3YXJkcw== IG5hdmlnYXRpb24= IGR1Yg== IGRlcG9zaXQ= IENhcGU= IFByb20= aXph aW1ldGVy IFRob21wc29u IFlhbGU= IENob2ljZQ== Ij5c MzY4 IEFzc2lnbg== IGZpdG5lc3M= IHNraXBwZWQ= Y29udGFjdHM= 56eN IGZ1cm5pdHVyZQ== IGNvbGxhYm9y TElNSVQ= XSoq bUw= IHJpcA== aW5jcmVtZW50 b3R5 dGhhbA== IE1hcnM= IFJGQw== Z2VhbnQ= IG15c3Rlcg== IGRlY3J5cHQ= IG1vbnN0ZXI= 0L3QuA== IMK/ b3NwaXRhbHM= IHNsZWVwaW5n IHB1bmN0 RElTQUJMRQ== Y29wZw== IGRpc2FwcGVhcmVk KyIp ZWF0 cGFzdGU= IGx1bg== IFRyaXA= IFRDUA== aXJpcw== IDE5Njg= Il19LHsi IGVuZG90 IGRpdmVyc2U= d2FpdGluZw== w7ZnbGljaA== UHJvcGVydHlUeXBl aWppbmc= IGNvbXBsZXhlcw== cGVyaW9kaWM= IGNvbmZsaWN0cw== ZGFtYWdl b2dlbmVvdXM= Y3Jp eWF3 fiw= IHNvdXI= IHdj IGluZmlsZQ== aWNp IHJlY2VwdGlvbg== IFNX IFN1 aW1pdHM= ICtc YXZv IDE5Nzc= dGFpdA== IHBhdGhsaWI= IHN1cHBvcnRlcnM= OTg3 Mzk0 IGJyaWNr IHBhcnRpY2lwYXRlZA== IHNjaWVudGlzdA== IG1hY3JvcGg= RGVwdGg= IGNvcnBvcmF0aW9ucw== IE11cnJheQ== IGNvbnRyaWJ1dG9ycw== d3JhcHBlZA== IGV4cGVkaXRpb24= MjE5 Q0VT 6II= aW5lbHk= IGFwdA== c2V2ZXI= cm9zdA== IHJlbG9hZA== IGRlbGVn IFRlbm5lc3NlZQ== aWZhY3Rz aWxlcHRvbg== IE5hdHVyZQ== IEZsb3c= IEJhYg== bWFpbnQ= IGph IHdlaWdo ZmVhdHM= 0LDRgA== IC8vLw== RE9N IGluZmxhbW1hdG9yeQ== T25lVG9PbmU= IOuw IGZhaXJl 5p2D IHRpcG8= cmVjdXJzaXZl IHNwaXJpdHM= KSU= Q2lyY2xl TUs= VHJpcA== Z3JlYXQ= bGl2aW5n dGd0 0KE= aW5jZXNz ZXJtZA== IHJlYWN0b3I= IFRhYg== IDEyOQ== ICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t IHZlbmRvcg== IEZP IG5vdGlmaWNhdGlvbnM= aXZhcg== IEV1cm8= YWRkeQ== IHN1YQ== 44GV cmVjYWxs IFZhbHVlcw== ZmlsZXN5c3RlbQ== TnVtYmVycw== IHJlZHVjZXM= IHNoaXBwaW5n YWNpb25lcw== V2FpdGluZw== Y2VudHJhbHdpZGdldA== IGNvbGxhYm9yYXRpb24= VmFyaWFudA== Q09OTkVDVA== Q2FtcA== TG93ZXI= IHNvbnQ= IFNpZGU= cmlmZg== IHNlaW4= dW5nZXI= IFBT IE5hcA== ICop IHByZWp1ZA== IGFiYw== IHlvdXJz bGljaXQ= ZmlsbQ== MjQ0 U2V0VGl0bGU= 44GG IGV4cGVuc2U= IGRvY3N0cmluZw== IGdyYXZl 44Oq IGVhcmxpZXN0 IE5ldGhlcmxhbmRz IFBvcnR1Zw== IG9jY3VwYXRpb24= IGVsZXZhdGVk RXh0cmFjdG9y 57yW UkVTUE9OU0U= R04= eWV0 fTwv IHRpcHM= IGZ4 IEF4 CiAgICAgICAgICAgICAgICAKICAgICAgICAgICA= J119LA== IGFydHM= IHVuZGVmaW5lZA== IHNldHRsZQ== UkVTSA== TmFtZWQ= IEhlYXJ0 IHp1cg== YXV0ZWw= IGNydQ== RGlzYWJsZWQ= IGVuZ2luZWVycw== RGVjb2Rl IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj IHN1c3BlbnNpb24= Mjk5 Qm90aA== TEFO ZnJl ZWR1Yw== IENlbWV0ZXJ5 IEJvcg== IFdyaWdodA== IGtsYXNz IG9wcG9uZW50cw== IENoYWly IGJvYXJkcw== MjQ2 YXV0b2c= IFByb2I= Y2FsbGFibGU= Z3JhbnQ= IHNpbXVsYXRpb25z IEFkYW1z IGVtYWlscw== TG9jYXRpb25z IGNyaXRpY3M= Q2FsbGJhY2tz IGJ5dGVhcnJheQ== IGNvbmZpcm1hdGlvbg== Q0hPSUNFUw== NTUw aGFwZQ== bGhz ZW5o IGN1YmU= ZXRoZQ== IGhheQ== IHN0YXJpbmc= IENvcA== b3dza2k= IHlz IEZhY3Q= IHJhbmdpbmc= IGFub21hbA== IGVsYWI= IDE5Njk= aWZpY2F0ZXM= MzY3 5LuO UkFOR0U= IGRlYWxlcg== IGNsYWltaW5n IHJhZGFy IHB1bmlzaG1lbnQ= VmVydGljYWw= IFBhY2thZ2U= IENPTlRSSUJVVE9SUw== IHdpc2RvbQ== 5YOP R0Q= TWFyZ2lu UGF0dGVybnM= U29sdXRpb24= VHQ= ZGFsZQ== cHVyZQ== 2Yg= aW5mbA== IGluY29u ZXR5cGU= aWxv b2xhcnM= IFN1ZA== IEln dW5uaW5n IE1pbGl0YXJ5 IG9uaW9ucw== IEJ1cmVhdQ== IEVS b2dz YW5zd2Vycw== cGhvdG9z IGFiYg== IG9wZW5z IHJlbGF5 IGV4dHJhcw== IHN1cmc= Q09OU1Q= 5piO IGxpbmVubw== YWxhcmlh IFBPSU5URVI= IE5hTg== IEN1cnJlbnRseQ== Licu MzY0 Qm90dG9t TG9zdA== Tkw= UGV0ZXI= enM= emVucw== 7JU= YWxyZWFkeQ== dXRoZXI= aWRheQ== c29mdHdhcmU= Q2hpbmVzZQ== bWF0aWNhbGx5 IGZsYXR0ZW4= IHJlZ2ltZW50 MjQ5 IGJsYXN0 IHRyYWluYWJsZQ== QUdFTlQ= fSlc IGRlbnk= IGltcHJvdmluZw== 0LDQtA== 5bmz IGd1ZXN0cw== IEVkaXRvcg== IGluZGVwZW5kZW5jZQ== IGFsaWFzZXM= TGFuZA== TUFD 54o= IAogICAgICAgICA= IHJlY2s= IGxvYmJ5 IElS aWxkYQ== IFN0dWRpbw== IFJlc2V0 dWxhcml0eQ== IHJlYWRpbHk= IFByb3RvY29s Q0FMRQ== ZnNt IG1lYXN1cmluZw== IOyg IGNvb2tlZA== IEFjdGl2ZQ== IEdyYWhhbQ== IGZpYmVy IG51cnNl 7J6Q IE1hcmd1ZXJpdGU= Ij8= T1ZFUg== c2Fm eHI= cmVzZXJ2ZWQ= IFNW aXRobWV0aWM= IGNvbmdyZXNz IGFsbG9jYXRlZA== IFJhdGhlcg== IEV1 IE9rbGFob21h IGxlYXA= IDE5NzE= IG51bWVybw== IHBvaXNvbg== IFFV IHJlZ3JldA== IHJlbGF0aW5n Q1RSTA== IENvbnN0YW50 IGluZGl2aWQ= IEF0aGVu RU5EQVI= 0LDQvA== 0LXQvdGC UEhJ IGVsaW1pbmF0ZQ== IGVtcGhhc2lz MDI1 Mjc4 QmVy RXBvY2g= Z3VpbGQ= Z2F1c3NpYW4= eGh0bWw= cmVhY3Q= YXRpbGU= IGN0eHQ= IGluY2g= YXNpdmU= bG9vbg== cGVhcmU= IEF3YXJkcw== IFJB c2V0VmFsdWU= aWNob2w= IDE5Mjk= c2Vzc2Vz bXBsaXR1ZGU= NjA2 INCf IGNvbnRhaW5lcnM= IHB1Ymxpc2hpbmc= IHNpeHRo IHNpbGs= IGV4Y2l0ZQ== Li4vLi4vLi4v 5bGx ZXN0aW1hdG9y cGVyZm9ybWFuY2U= R1JFRU4= Ymo= YnN0 ZGVudA== IHBhcA== dXJpc3RpYw== ICg8 IFNwbGl0 IFNOUA== IE1FVA== dWJsZQ== IGp1bmlvcg== IEluc3RhbmNl Q2hyb21l VW5pcXVl YGBgYA== cnRu b3JkaW5hdGVz IGFyY2hhZQ== IFJvY2tlZmVsbGVy IGltcGxpY2F0aW9ucw== IHZvY2Fscw== IEtlbm5lZHk= T3JpZW50YXRpb24= Z2FnZQ== c3Rv ZGVwcmVjYXRlZA== aXNzZWQ= IHJldmVudWU= IG5vdGFibGU= IExpdmVy IGNoYW5jZXM= PT09PT09PT09PT09PT09PT09PT09PT09 b2xvZ2ljYWxseQ== IFByb2dyZXNz IGZvdW5kZXI= Mjg3 IHN5c3RlbWF0aWM= OTU4 SVB2 44OD IE1hbmhhdHRhbg== IGNpcmN1aXRz YWxvYWRlcg== SGVhZGVycw== IGF0dHJhY3RpdmU= VHJhZGVVbml0cw== cnB0dGM= bmV4dGhvcHM= IScs KX0s K10= ZmVycw== w7k= 5aI= 6KM= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= YXRpdml0eQ== IGZpcmluZw== IHBvdQ== IDA2 IE5paw== IFRoZW9yZW0= cHJvdG9j dHlwZWRlZg== IHByZWZlcmVuY2Vz aWNoaWVy cG9ydGlvbg== YXVm IG1pbmltaXpl ODAzODc= cmVscw== IEFsdGVybg== OTg1 5pW0 IHdpbm5lcnM= IE1hbmNoZXN0ZXI= UFVCTA== w6puY2lh YXVkaQ== ZWxmYXJl IHR1bW9ycw== IHRyaWdnZXJlZA== IE1haW5XaW5kb3c= cmVjaXBpZW50 VHJhdmVsVGltZQ== IGRpY3Rpb25hcmllcw== TWljaGFlbA== R3M= TFY= YnJhaW4= ZHVw dWVzZQ== dGVj ZW1lbg== IEVpdGhlcg== aXBo ICIiIlw= IGVudmVsb3Bl IGFnZ3Jlc3NpdmU= bmV1bQ== IERlY2w= MjY5 TW9kZWxTZXJpYWxpemVy SVBT Mzc5 cmVnaXN0ZXJlZA== IFBvbGlzaA== cmZj KHt7XA== IG11dGF0aW9ucw== IGlycml0 bWdtdA== c3BsYXNo IEFyZ3VtZW50 IExpZXV0ZW5hbnQ= RFg= R2Fs VXJp bGVldA== ICcnKSw= IGlo IGl2YWw= IGdyb3Nz cGxhbm5pbmc= IHNwaXRl Y2hlY2tz bmFsaWVzZQ== RGVzcGl0ZQ== IEludGVybmFs 5L2g YWtlc3BlYXJl IGJlaGF2aW9yYWw= Q291bGRu R3A= eEE= 6as= IGN4 bGVhZA== IG1pZGRsZXdhcmU= IGd6aXA= IGdhbGxlcnk= IENhY2hl IE1JTUU= Y29udmVy Y2Vzc2lvbg== IGludGVydmlld3M= IG1heW9y MTcx UmVzZXI= IHRlbXBvcmFs UGF0aHM= 5Yir IGdlbnVz RGVmaW5lZA== IGZvcnR1bmU= IHBhcnRuZXJzaGlw RU1QVFk= SUxFRA== TGl2ZQ== UEVOVA== c2xvcGU= cmV1c2U= c3Rvcg== aXRyZWU= IEZlbGxvdw== IFJlY3Q= IGRpc21pc3NlZA== dmVudg== IGJhY2tlZA== IGRpc3RpbmN0aW9u bGlidmlydA== YmFyYQ== IHBvcnRmb2xpbw== IHNlcGFyYXRpb24= IGVwaXQ= IHBhaW5mdWw= d2lkZXRpbGRl IHN0cmFpbnM= IHNhdmluZ3M= IMOkcg== IE1BVkxpbms= QlE= RmFy R2Rp Y2lm ZnE= bWlncmF0ZQ== c3RhdGlvbnM= IGNvdXBsaW5n IGZheg== IGJvdW5kZWQ= dXJiZWQ= aXJhdG9yeQ== IE5BTUU= IEZsb29y dXN0ZWQ= ZHVjdGlvbg== SU5L IEthbA== IFtdOg== IEhlYWRlcg== OTA3 IHppcGZpbGU= IGFwcGVhcmFuY2Vz VVNFUk5BTUU= bm90ZWJvb2s= Tm9ybWFsaXphdGlvbg== IGFkYXB0YXRpb24= IHJlc2lkZW50aWFs IGVzY2FwZWQ= Tk9O XCo= ZGVjZXNz IHBsZWFzZWQ= IHNhZw== IHNwaGVyZQ== IG1pbQ== IDExOQ== IEF2ZXJhZ2U= aXJscw== ICIiIjw= IE9jYw== XSkt cHJlZGljYXRl b3NleA== NTA4 TGlzdFR5cGU= REVQ IHN0YXRpc3RpY2FsbHk= IGhlcmVpbg== MzU3 IGdyYW1t cm9sbGJhY2s= ZGlzdGFuY2Vz IGRldmVsb3Blcg== cmV0cmllcw== 4YCv IGludmFyaQ== IERlZmF1bHRz IEhhd2Fp IEFwaUVycm9y QmFzZWQ= YnY= bGl0 DQoJCQkJCQk= IG92 Y2h1cmNo IERpbQ== IEdpdA== c2NvcHk= dW5kZXJz ZWFybg== U3RhbXA= aW5hbHM= dHJhaW5hYmxl IGNvbmZpZ3VyYXRpb25z IGJsdXI= VFJB w7xjaw== IFNjYWxl 5aSp IGF3aw== ZXZhbHVhdGlvbg== Q3VzdG9tZXI= 5aSE55CG T25lVG9PbmVGaWVsZA== RlU= YmF0dGxl xIU= IHBpZw== IG1pc21hdGNo IGNvbnZleA== IEJpbmFyeQ== IHByZXByb2Nlc3M= YWtvdg== IEt1cg== dW5keQ== MTQy ICY9 IHBoYXJtYWM= Mjg5 IEFsd2F5cw== QWxnb3JpdGht b3BlbnN0YWNr dGljYQ== IGZpdHRpbmc= IGNoYWxsZW5naW5n aWZlc3R5bGU= Y2hhZnQ= IG9jY3VycmluZw== cGFuaWM= KCc6Jyk= UEFSQU1T IFdhbGtlcg== Qmlk c2Ft dGllcw== b3J0aGVhc3Q= IHN0YWtl UHJvYmxlbQ== YXdzb24= ODA5 NjU4 IGxpZ2h0aW5n IG9wdGltaXpl IFRyYW5zbA== IGNvbnRyYWN0cw== IGNsaW5pYw== U29tZXRoaW5n UkVBRE1F IGhvdXNlaG9sZHM= Q2F0 TmNvbA== ZGlhbGVjdA== a2Y= IGdhemU= IHJ1c2g= IEJhdA== IGVsaXRl RVJP IFZlZw== U3R1ZGVudA== IGF0dHJpYg== Q2xvbmU= IHNvbHZlZA== QWRkcg== IHBvc3NpYmlsaXRpZXM= IHN3aWZ0 4YCs IHBlcmlvZGlj IGNvcHBlcg== IFZlcmlmeQ== IHJldmVhbHM= ZXh0cmFjdG9y IGFwcHJveGltYXRpb24= IGluaGliaXRpb24= Q0FMRU5EQVI= IFNpZ25hbA== IFJldHJpZXZl YXNzZXJ0Tm90RXF1YWw= Kigt R2VuZQ== dHdlZXRz ICAKICAgICAgIA== aW5maWxl cmVhY2g= ZW5peA== IHd0 ZXRvbg== IGxhbmRlZA== IGdvbGY= IHN0b3Jpbmc= IEFL IEZh b3Jlb2dyYXBoeQ== IER1ZQ== IGNvdg== bGlzdGluZw== IHF1ZWw= IHN1YnRyYWN0 bm90aGluZw== NDA3 YXV0aGVudGljYXRpb24= IElOVA== cHJvamVjdGlvbg== YWlybw== IHByb21pc2luZw== TnRHZGk= Y2FuZGlkYXRlcw== Y2NjY2NjY2M= T3B0aW1pemVy IEJvbHNoZQ== TW9uZXk= VUc= V3Jvbmc= ZGF2 a3I= IGZyYW5jaA== IFNwZWVk IHRlY2g= ICoqKA== U0VRVQ== cHBlcnM= bGl2ZXI= IGRlc2lyYQ== IHBsb3RseQ== IG5lZ2xpZw== ZHRj IGNlaWxpbmc= IFRyYW5zcG9ydA== IExhVGVY IHByZW1pZXI= IGlucXVpcnk= Rm9sbG93 XDw= bm9w cmls dnRr jeS9nA== IG1hdHVyZQ== IENvcHk= IFBF CgoKICAgICAgICAgICA= IHByb3RvY29scw== IG5hbWVseQ== dW5kbGVz c3Bpdg== IGRpc2NoYXJnZQ== cmF5ZWQ= bmluZ3Rvbg== YW1zdW5n U3RyYXRlZ3k= ZmluZGVy Mzc3 bGV2ZWxhbmQ= 6K+7 IGFjY2VwdGluZw== cHJvdmlkZXJz UmVsYXRlZA== bGF0aXR1ZGVz IEdvbGRlbg== IHN1c3RhaW5lZA== UG9pbnRlcg== 5ZWG O18= bXlz 66k= ICJg Y2hhcHRlcg== IFNjcmVlbg== dGhyaWZ0 IElvd2E= IENvcw== IER1a2U= IG9yYg== cml0aXM= YW5ub24= bWFpbmxvb3A= YW1iaWc= Y2Zw dXp6eQ== ICR7e1w= dGFuaA== 6K+35rGC TE9CQUw= Kykv IGJlbGw= IG11c2g= aWd1ZQ== IFNS YWJvcnQ= IHlhcmQ= IHJpbmdz IERvbWFpbg== IHByb3ByaQ== IG1lZXRz aWxsYW5jZQ== T1JJWg== IHBldXQ= MTgx VFJVRQ== IGNvcnJlY3RlZA== aWRlc3ByZWFk UGF5bWVudA== 7Iqk SmFw c3ByZWFk dG91Y2g= aXRlbGlzdA== IGZlc3RpdmFs IHNpZA== IGFsaw== IEJlcnQ= IHByb3Bvc2l0aW9u IGxlbW9u ODA1 IHNsb3Rz IEFuaW0= YXJyaW5n VE9N Y29udHJvbGxlZA== IGZhbGxiYWNr IGNvbW1lbnRlZA== Y29zeXN0ZW0= Z2FtbWFE IM6y IEFnZW5jeQ== eXRpY3M= YWxpYXNlcw== IHNpdHVhdGVk IHJlY29tbWVuZGF0aW9ucw== IGdlbnVpbmU= QnJpZGdl R2F1c3NpYW4= YWNs bWJveA== YXRhbg== aGVpdA== IGZpcm1z IGlyYw== bXBhdGg= IGdyaXA= IHZ0aw== YW1lbg== IFBFUg== 4oCs YW50ZXM= IGNvbXBvc2Vy cmlkZ2Vz IGNvbWJv IGluZGV4ZWQ= cGFydGljbGU= IGV4cGlyZWQ= Q29tbWFuZHM= IFdhcnJlbg== Q2FsYw== IFRyYW5zZm9ybQ== IHN0cmlraW5n dm9pcg== 6L6W5Yy6 IGRlcGFydHVyZQ== IEJlbGc= Y29vcmRpbmF0ZQ== Y29kZW5hbWU= SmFudWFyeQ== IHNhY3JpZmljZQ== IHByb2xpZmVyYXRpb24= NjEx Q05O S2luZA== V2Vlaw== ZHE= bHN0cmlw c3VpdA== 7IM= aW5zb24= ICJA cXVvdGVz Y2xpZGU= aXByb3Q= IHNocnVn IGFkdmVyc2U= cmVhZGFibGU= IGludGVycA== Mjg0 c2tpbGw= 4YCt IFNlcmlhbA== IG1hcHBlcg== bm9ybWFsaXphdGlvbg== IFByZXBhcmU= IEF0dG9ybmV5 IGNvbXBldGl0aXZl ICJfIg== UFlUSE9O bG9uZ2l0dWRlcw== IGRvbGxhcg== 5oCB 5biC6L6W5Yy6 Q09OVEVOVA== IHZhY2NpbmU= KC4= MzEy U09M Y2lh bGpldA== b29y ZW51bXM= IG1pZ3I= IGx1bQ== IGZvcmNpbmc= IEFJ c3Nh IEhvcA== IDEwOQ== b3Nlbg== IGV4dHJhb3JkaW5hcnk= 5L2T IGVxdWFsaXR5 IE1hcmtldGluZw== IEV4ZWN1dGl2ZQ== IERvY3VtZW50YXRpb24= 6ZSZ6K+v R3I= Y1Q= dmlkZW9z b3J1cw== IHNucw== IFNhdQ== IE1pY3Jv IG9wdHBhcnNl IGNvbnN1bWU= IHJldGFpbmVk U2VlZA== bGV2ZWxuYW1l QXR0YWNo IHN0YXlpbmc= YWJjZGVm 5p2h YXNzZXJ0SXNOb3Q= Q09NTUVOVA== IFRhaXdhbg== IERhbGxhcw== KiI= Pzw= RWxs Um9tYW4= VUs= W18= YmFt bGp1c3Q= d2FyZGVk 2Yo= IHdpZGVy IDEyMQ== IDE0NA== IE1JTg== IEZhYg== IFdvdWxk IEdyYW4= ZXhwaXJlcw== YWRkQWN0aW9u IFN0dWFydA== IGltcHJlc3NlZA== SW50cm9kdWN0aW9u IHRlcnJpZg== NzAy IEFsYW4= IFNldHRpbmc= aXJhY3k= IHNhZmVseQ== IHBob3RvZ3JhcGhz UFJPVE9DT0w= IGNvbXBlbnNhdGlvbg== IG11aXRv XTw= ZnBz IGdp IGNvbnZleQ== Y2xhaW1lZA== IEh1Zw== IEhvcGU= ZXh0cmFz IGNvbnRvdXJz bG9nZmlsZQ== IGNyZWF0dXJl UHJvZg== MzM2 IHpvbmVz SUdOT1JF IElOQw== Y29uc3RpdA== IGJlbG9uZ2luZw== IHRyaXBsZQ== cGhlbmU= IHBsYWludGlmZnM= UGhpbGlw aWFuZw== bWFuZA== dGFjaA== IHRpZXM= IHdvcm4= aWNhdGU= IGRlbWFuZGVk IHNlYWw= IFJhYg== IGNvbXBvcw== IFN0YW5k MTk3MA== cG9zaW5n IDEwNw== ZGFlbW9u IGZvcm1hdHRpbmc= QXBwbHk= IGhhcm1vbg== U2NyaXB0cw== IGNvbXBsaWNhdGlvbnM= IGxpY2Vuc2Vz Y3JlZGl0ZWQ= 0L7Qs9C+ rLg= 8Js= IHBpbGU= aXNhdGlvbnM= IFNZ c2V0V2luZG93 ZW5zaXM= IHBvbGU= IHBlcHRpZGU= IGJhc2VuYW1l b3BlbmluZw== IG1vZGVzdA== SE9MRA== cGNh V29ya2Vy IEludGVyZmFjZQ== IERhcndpbg== 55Sf5oiQ Sm8= SmFjaw== VEQ= ZWFnZXI= ICAKIA== cmVwb3J0cw== dWxlbnQ= IHN0ZXJl Y29udGVzdA== IG1lZGl0 YmVycmllcw== IGdldG9wdA== IDE5Mzk= IHZlcmlmaWVk Q29udmVydGVy IGlkZw== MzM4 QUxTRQ== Q09NUExF Y3lhbg== IGdyYXQ= ZGlyZWN0b3JpZXM= IGZpZ3VyZWQ= ZmFpbFVubGVzcw== IHN0cmVhbWluZw== 6YCB IHN1cnZpdg== cHVibGlzaGVy Oycs RkxPVw== Yms= bGltZQ== IHNk IGJyZWF0 IE1hc2s= ZWN0b3Jz Z2VvaA== IGFkZG9u IGZsdWN0 IHpvcGU= IGNvcm5lcnM= MjM5 NDg2 Z3JhbmQ= IG5vbmxpbmVhcg== QkxBQ0s= IGhhcnNo IHBhbmVscw== IGNvbnZlbmllbmNl SHlwZXI= IGJsb29keQ== ZG9jdHlwZQ== QXVndXN0 VlBOdFZQTnQ= RXI= TUlU bG9yZA== xJ8= IHB2 IHNvcGg= IHN1bGY= IGVsYXN0aWM= aWV1 RVJHWQ== YW1iZXJz INCw IGltcGVy Mjgx RGVhdGg= Mzcz IFBsYWNlcw== IENvbW1lcmNl IEJlYWNo IHBhc3NlbmdlcnM= IGNsb3N1cmU= IHNlcGFyYXRvcg== b2xsYXI= YXBwcm9wcmk= IGRlcml2YXRpdmVz IG92ZXJyaWRlcw== IGJvb3RzdHJhcA== IHdoaXNwZXJlZA== aXR6ZXJsYW5k IEJydWNl IHByZWxpbWluYXJ5 RGFyaw== RXE= RUVD SWdub3Jl 0KA= ICMjIyMj oOmZpA== IHR1bmU= YWxwaGFiZXQ= IGJk ICcuLg== YWdsZQ== IENyeQ== IGJlaQ== IE1vdmll b2JzdA== ZGF0YXN0b3Jl IGxvb3Bz MTk4MA== Il19 IGF0dHJpYnV0ZWQ= Q2x1c3RlcnM= IG5lZWRsZQ== Y2hlY2tzdW0= 5Y+q IGRpc2Nsb3NlZA== UHJlc2VudA== IGNvbnZlcnRpbmc= ZGVza3RvcA== TWFnZw== U2VwdGVtYmVy ZmVm IGVjZnA= IGRlcHJlc3M= IFRhbGs= IG5vdGF0aW9u ZW1v IDMwMDA= IGNsdWU= JywnJyk= IHByaXpl VW5leHBlY3RlZA== CQkJCQkJ IENPTk5FQ1RJT04= IGFjY2VwdGFuY2U= IGV4Y2l0aW5n IGVzdGltYXRvcg== IFF1ZWVucw== ZWxsaWdlbmNl IGdhbGF4eQ== IHNjcmF0Y2g= KCM= RE5T TVE= U29uZw== VkVO amFtaW4= bGFk dnBu d2k= wq4= aW5vcw== IGN1bA== aWN1dA== IFRJ IFRBQg== dWxhcw== YW1pbmF0aW9u IE5hcg== IFwn SW5jbHVkaW5n d2Vp IHBlcm8= IFlhbmc= IHJlY3J1 NDgz RU5USUFM 44Kv IHZhcmllZA== IGxlc3NvbnM= cGFnaW5hdGU= IGV4ZWN1dGluZw== IGNvbXBldGU= QUFBQUFB IHVsdHJh IGVmZmljYWN5 44GX44Gm 5rKh IHByb2NlZWRpbmdz IGZpbmdlcnByaW50 RWxl YmFzaA== IGluZXF1YWxpdHk= IGJhcnJpZXI= IFNjb3Jl YXllcnM= IEZlcm4= IEZpc2hlcg== ZGF0YWZyYW1l IFZlYw== IDE5MDA= IDE5MzE= IHZlcnNl aW5pdGVseQ== IHBhdGh3YXlz IEV4cHJlc3M= e1wi IHZhbGlkYXRvcg== IGxhdGVyYWw= RGlzYWJsZQ== IERpc25leQ== IHN1c2NlcHQ= 5qC3 IHByZWNpcA== IEFERA== VHJhY2tz IGFubm91bmNlbWVudA== IHdlZGRpbmc= Rk9MRA== IGx3 IGxocw== IGxhdHRpY2U= aWdoZXN0 IFRheA== aW50ZXJuZXQ= YWdlbQ== IEhhdA== IHJlc2lnbg== b2JveA== IHVuY2xl Ym9v IHJhbQ== IEluZGVwZW5kZW50 MzIy NjA0 T1RI IC0tKg== 5oiW IGZvY3VzaW5n IHBvbHltZXI= ZGVtYW5k IHNjYXR0ZXJpbmc= IGxlYW5lZA== 5ZOB KScpLA== T2ZmaWM= Ym90dA== ZWJl fSk7 Cgw= IDk5OTk= IGZmaQ== YXBvcmU= IHJo IExhbm5pZQ== IFdhcmQ= IEdS YXJlYXM= IGFkb2xlc2M= b3duZWQ= U2V2ZXI= MzQ3 IHByb2plY3RlZA== 44KC IG1hZ2F6aW5lcw== IE1haW5l IGdyYWR1YXRlZA== IHByZWZlcmFibHk= T0M= fVs= IHRlbnNvcnM= c3Rybw== IHdi IHdpZGVzcHJlYWQ= IG5vbWU= KCkpKSk= IE5GTA== IERpYWxvZw== b3V0Y29tZQ== IGthbg== aWV6 YWthbQ== Q2hvb3Nl IGJydXQ= SW1hZ2VGaWx0ZXI= ICclKA== IGNyaWNrZXQ= SU9T 0LDQtw== IGN1bHR1cmVz IGFncmVlbWVudHM= IGVkdWNhdGVk IGNvbnZlcnRlcg== KCItIik= IGdhdGhlcmluZw== aW50ZWdyYXRpb24= V2lsbGlhbQ== IE1lYW53aGlsZQ== QmE= Rm9ydA== U3Fs U3F1YXJl XH0k bGllcw== bmg= bmls dmF0 cmFp dmVjcw== IHVnbHk= Ym92ZQ== IDE5NjU= UHJvYw== ZmxpZ2h0 IHZpZXdlcg== IEFsZnJlZA== T0RT IFRyYW5zYWN0aW9u VGVtcG9yYXJ5 IEhpc3RvcmljYWw= IGRpYWdub3N0aWM= AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== 66Cl JyYj MzEw NzIw QWxleA== RmF0 UGlu 0Jo= IGNhdHM= IGZvdXQ= aWNoZXM= IGZvcms= b21p IGplbG1lcg== IHByZWNlZGluZw== IGRpc3M= IHN1Y2s= IHN1Y2M= IFFNZXNzYWdlQm94 ZHVjdG9y IGRpcmVjdG9ycw== U3ByaXRl IHBhc3Rl IGJhbGFuY2Vk IGNvdXBsZWQ= IE1lbW9yaWFs IGtuZWVz IEJlcm5hcmQ= LsKr SlA= VGVu Y21hcA== ZW1lbnQ= aWF0aW5n dGlm 6Ko= IGNhdmU= IHsl aXBhcnQ= aXRpb25lcg== IG1vaXN0 Q29ubg== IGNsYXNzaWZpZXJz RXhwcg== IFJlbWVtYmVy MjQx IGNvbnN1bWVk dWZmbGVk c29sdmVk Tm90aWZ5 UHJlY2VkaW5n IHNhdGVsbGl0ZQ== 5a2m Y3V0b2Zm IHRocm93aW5n RkVBVFVSRQ== Iyc= JSI= L34= QnJhbmNo RE9U SG91c2U= 0KI= 6KU= 7YQ= ZXJhYmxl IHJlbWFya3M= IGR3ZWxs KCkr IEF1 IG9uc2V0 IERheXM= IGFwb3B0 TEVUVA== IENvbnNvbGU= bGliZ2ltcA== YmxvY2tpbmc= cG9wdWxhdGU= QWR2 IFRlY2g= IGFjY291bnRpbmc= IE1lYXN1cmU= IENoYXJhY3Rlcg== IHRpdGxlZA== YmVsb3c= 5a6a5LmJ IHN5bnRoZXRpYw== IFN3ZWRlbg== QVJSQVk= IFNlYmFzdGlhbg== TW91bnQ= a3U= cmF0ZXM= dHVuZQ== bG9hbg== IFNO IGFzbGVlcA== IERyaXZl IE9jZWFu IGxlYWs= aXNlYXNl IEtldmlu IH1c U3RpbGw= cmV0dXJuY29kZQ== IEV4cGw= cmlidXRvcnM= bWFya3Vw IHZpc2l0b3I= dWtp IGludm9rZQ== IFVSTGNvbmY= 6K+N dGFiV2lkZ2V0 c2ltaWxhcg== Tk9URQ== IHdpdG5lc3Nlcw== ICcqJw== TGludXg= R3JhZGllbnQ= c21z b25vbXk= aXRvcmVk IGJhYg== b3VxdWV0 IE5L IEZpeA== aWJhdGNo IFZJ IGFjY2VsZXJhdGlvbg== INCz NjU3 IGhpZ2h3YXk= YWZrYQ== IHN1Z2dlc3Rpb24= UmVjb3Jkcw== cGVyc29uYWw= IGp1bXBlZA== IGNyaXRpY2lzbQ== bmlja25hbWU= IHN0aXJyaW5n YW1tYXRpb24= Rm9yZXN0 IFNFUlY= IFBpdHRz b2RvbW9y UG90 V1U= c2xpY2Vz d2VudA== IHRlbnM= c2Vhcg== ZW56 YWxhbg== IG5hdg== ICcpLA== IGh1bGw= IDExNg== YWdyYW1z IGNvbmNsdXNpb25z YXNzaXN0YW50 IEJsb2c= IEtuaWdodA== bWFuYQ== ZmxpeA== IGV4dGVuZGluZw== c3BlY2lmaWVk IGFuZ2Vs IGRldm90ZWQ= IHBoeXNpY2FsbHk= 5peg dHJlbmQ= TEFTVA== d2Vla2RheQ== IEluc3RhbGw= Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4= aW50ZXJwcmV0ZXI= IGlubm9jZW50 IGV4ZXJjaXNlcw== IGhvbGlkYXk= U0VTU0lPTg== SWw= bmF0dXJhbA== 6KI= IGNyeWluZw== bGVhc3Q= IHB1 IFRU cGV4 cGVlaw== IDIzMA== IEdSTw== IGFzc2Fzcw== IHN0YXJ0dXA= YXNoaQ== IHByaWRl NzU2 cm9wb2xpdGFu U2hvdWxk bGF0aW4= IHByb21vdGVy ZGVzaXJlZA== Um9ib3Q= RVhQQU5E UnVzc2lhbg== MzU1 RnJvbnQ= RkxPQVQ= VlQ= Ymxvb2Q= ZFQ= aXN0ZW5jeQ== IFdpbnRlcg== aXZhbg== IFRoZWF0cmU= bWFuYWdlZA== IGNvdW50ZWQ= IFVubGlrZQ== 44Gj ODg1OQ== IFdpdGhpbg== IFN3aXNz IE1pc3NvdXJp QnVja2V0 KTwv MzQw S08= bHRl d2FybQ== IG1lbnM= IGhvY2tleQ== IGdpZA== bG9zaW5n IGFzcA== IExhbQ== IDE5MTU= MTk4OQ== IGNvbW11bg== U0VBUkNI IGVudHM= d2hpdGVzcGFjZQ== IHNsYW0= IEFubmU= IHN3aXRjaGVz IGZlbWlu 5L+u IHh5eg== IHNwb25zb3I= IGNvbnRyb3ZlcnN5 IGNvbnNjaW91c25lc3M= IOS4reaWsA== IHBlcmlwaGVyYWw= SmF2YQ== VmVs ZHV0eQ== a2Fy IHRlbmRz IHRhYnM= cmVhY3Rpb24= IGZlbA== IHPDqQ== IENPUg== YW1pbA== IE5hbg== IEJpc2hvcA== IGtpdnk= QVJT IHRyYW5zaXRpb25z IEV4cGVy IHJlZnVzZQ== IHJlYXNvbmFibHk= Y2hhcmFjdGVycw== ICcsJy4= VmFsaWRhdGlvbg== CgkJCQkJCQkJCQ== IFBST0M= TG9va3Vw REVMQVk= QEBAQEBAQEA= IE1lZGljaW5l aW5kaWNhdG9y Qml0cw== b2RlZA== IHJ0bg== IEJ1Y2s= b2dyYW1z b2Jp UHJvag== 5LiO IHNtaWxpbmc= bGVzc25lc3M= IGZhbWluZQ== VFJZ 6K+l YXphYXI= 562+ IGFzY2VuZGluZw== Ky0rLQ== 7Ja0 5pON5L2c KS5f SEo= Z2hvc3Q= bno= IHltYXg= IE5PTg== aWdodGluZw== IFVs IHJvaQ== IHBhcmxpYW1lbnQ= IHNjYXJlZA== Ymxr IEV4Y2Vs cG9sYXI= Y3VsYXRpbmc= UGxhbmU= IEFkZGVk IEZlYg== U3RlcHM= IGxpbmVzdHlsZQ== eW5jaHJvbm91c2x5 IHB1cnN1ZQ== IENvbW1vbndlYWx0aA== IExFRlQ= TE9DQVRJT04= IG9jY2FzaW9ucw== 6IqC RnJlcXVlbmN5 U3Vz IGNzcw== IGRsZw== IGR1cGxpY2F0ZXM= dXJjaGVz Y2hhcm0= IDEyNg== IFNM IENpdA== IE9haw== YXJkb3du IHByZXZpZXc= UkVR bnVtZXJv IFlPVQ== bG9jcw== IGRpc3RvcnQ= REVD IFByb2JsZW0= OTA0 IHNvcnRz Il0sIg== IGRlbm90ZQ== 5YWs IHNlbnNvcnM= IERldHJvaXQ= UGVyc29uYWw= IHRyaWJhbA== R2F0ZXdheQ== OiUo UGV0 d3k= IGFh IHNi ICc/ bG92ZQ== IDE2OA== dGhpY2tuZXNz IENlcnQ= KCde IEJpYg== KCIuIik= dWJi b3JtYXA= IHVuaXF1 IG9ic2M= IENoYXQ= IHJlY3Y= ZXJuZXNz IC4v IHBhc3N3ZA== MzY5 TWVzc2FnZUZpZWxk c3FsYWxjaGVteQ== U1BBQ0U= bGFzZXI= PXt9LA== 55u0 IGV4aGliaXQ= IGZyb3plbnNldA== U2Vjb25kYXJ5 IHZvY2FidWxhcnk= Z2VvaGFzaGVk PS8= WVA= cGNp YW5vdGhlcg== IGZpc2NhbA== IHNsb3dlcg== aW50cmF5 dWRw IGFwb2xvZw== dW5kZW4= IGxpc3RlbmVk IGRpc3RyZXNz IENvb3Blcg== IHN1Z2dlc3Rpb25z IERlZmVuc2U= IENhcnRlcg== IGFjY29yZGluZ2x5 IGNvbGxlY3Rpbmc= IG1lYW5pbmdmdWw= fF98Xw== IENyZWRpdA== 6ZO+ NDIw QXNr Zndk cGl2b3Q= dm9y eGF4aXM= u+WKoA== 24w= KSkvKA== IExvd2Vy IHN0cmFuZA== IGNhbm4= U3RhbmQ= MTk0MA== ZGlzcGF0Y2hlcg== dGVtcG9yYXJ5 Mjc5 IG1lZGFs cG9sbHM= IHN1Y2Nlc3Nvcg== IHRyZW0= RWxlbWVudFRyZWU= 5aSN IHByb2ZvdW5k 5Zug IEhvbG9kb21vcg== IHNlcXVlbmNpbmc= aWxraW5z IFN1bW1hcnk= IGJyZWF0aGluZw== 6aG16Z2i U0NPUEU= 55m75b2V JCcp Kjo= MzE1 VHg= Zmlk ZW5raW5z IGJvcmRlcnM= c2Vscw== IHJldmVu IGRlc2NyaXB0 IChA IDEzMQ== IEN6ZWNo IERpeA== IEdlbmU= IGxvdmVseQ== IOKAnQ== IGRidXM= SEVMUA== RW50cmllcw== Z3JhcGhpY3M= IHF1YW50aXRpZXM= IGJhbmtpbmc= INeU IENvbXBsZXg= PS09LT0tPS0= IHRob3JvdWdobHk= 4qyc4qyc NDk1 RHluYW1pYw== TW9y UGFyc2luZw== UXVpdA== 54Q= ICI8Lw== IGNvbmRlbW4= IEZhcm0= IFJpY2U= IEdldHM= IHByaW50ZXI= PSJ7 aWNrcg== IGZsYW5r YnVr IDkwMA== aWRkaW5n IG1vbmtleQ== Nzg4 bG9jYWx0aW1l IGRvY3VtZW50YXJ5 ZGVjaXNpb24= IE1lZ2hhbg== IGxhYm91cg== U0FNUExF b3BlcmF0b3JuYW1l IGRpc2N1c3Npb25z IGZsdW9y IERJUkVDVA== IHRvbWF0bw== U0VSVklDRQ== IOS4reaWsOe9kQ== MzE2 RFJPUA== TGVzcw== TUc= eWFuZw== b256 aXRpb3Vz IHNwYXI= IG1vcw== KCko Iiwn J11dKQ== IEVsaQ== aWRlYWw= YWNodA== IG92ZXJuaWdodA== JywnLg== fX1eew== VGV4dHVyZQ== VGltZXN0YW1w IERlZXA= dHJhdmVs c2ltaWxhcml0eQ== aWFtaQ== bW9udGhz IHBhcnRpY2lwYW50 5om+ b3Zlcm5tZW50 Y2xpZGVhbg== PFw= TGVz 5qM= 6Is= aXR0aW5n IHBydW4= IG11ZA== IGRlY2VudA== IHN0YWluaW5n dW1hYmx5 IENhZA== IEJsb29k IEdhdGU= IikpOg== IHNob3Bz IEpvcw== IGV4dHJlbQ== VG9TdHJpbmc= bWFya2Vk IG1ldGFzdA== 5Lu7 IGZpcmV3YWxs IHNjcmVlbmluZw== Z3JhZGllbnRz IFN1YnNjcmlwdGlvbg== IGRlY3JlYXNlcw== ZGVwbG95 IHN5bWJvbGlj Y2lzY28= IHRlcm1pbmF0ZQ== UHJvZHVjdGlvbg== IFZhbGlkYXRl UmF3UmVzcG9uc2U= IHNrZWxldG9u IG5lZ290aWF0aW9ucw== IGV4aGF1c3RlZA== IHZlcmJvc2l0eQ== IHNvbGVseQ== 6aqM6K+B IHN1cmdpY2Fs Iy4= TGVhcm5pbmc= WUk= Y1FC IHRibA== IENoZXI= cXVpc2l0aW9u IEJyb2Fk IEhvbWVy IG91dHM= aWVmcw== IFRoaW5r Y29kZWQ= IHN1YnN0aXR1dGU= IG1vdg== dHRs U2hhcmU= c2VuZE1lc3NhZ2U= ZmZpY2llbmN5 aW5pdGlhbGl6ZWQ= IHRoZXJhcGV1dGlj IFNUQVRF IFN5bnRheA== IFNlbmlvcg== IGVtYmVkZGluZ3M= IE5vcndlZ2lhbg== cmVzb2x2ZWQ= IE9mZmljaWFs RmV0Y2g= U3By b25kZQ== IGhvbA== IHN0cmVhaw== bmFtZXNwYWNlcw== IEJBU0U= KCIvLw== c2NhbA== IGtvbW0= IEtpbmQ= U1RPUg== bGljaXR5 MTgz YXR0aW5n 5Lik YnJpcw== TE9HR0VS Y29sb3JiYXI= IGFydGlj 44Op IGxpZ2h0bHk= IHJpdmFs ZmlsbG5h IGNvbXBhcmlzb25z IHBhaW50ZWQ= ZW50aWV0aA== dG93YXJkcw== IEJvbHNoZXZpaw== KT1c Rm9sbG93aW5n Smlt ZmluZQ== bW9ycGg= b3Zlcw== Y2hhaW5z IFN0eWxl YWJpcw== b2Rz b2dh IEpPSU4= IDE5NDQ= MTk4Ng== NjQ1 cmFjdG9y Mjc0 ZGl2aWRl QnlUaWNrZXQ= QXJndW1lbnRz Y29uc2lkZXI= IFNtYXJ0 IHRydXN0ZWQ= IERlbGlh IGRpc2NyaW1pbmF0aW9u IGhpc3Rvcmlhbg== IGVudGh1c2k= IFZFUlNJT04= IGlkYWFwaQ== IGdyYXRlZnVs PCEtLQ== U2Ft eG8= cmV2aWV3cw== IHBpenph IHJlaWdu Y3Ry dXBwb3J0ZWQ= IC1c IHdhc2g= UkVX U3R1Yg== YXR0ZWQ= IHBvc3Nlc3Nlcw== IGNvcnJlbGF0ZWQ= IG1vbm8= Mzk3 IGxhd3llcnM= IGxpYmVydA== IGNydWVs IGF3ZnVs IGhvbm91cg== dGlwbw== 5bm0 IHJhdGlvcw== IGZhcm1lcnM= IGFjY3VtdWxhdGlvbg== eFJhdGVk ZWluZw== cmlucw== IGJpdGU= IGRhZA== cGxpc3Q= IGhlYXRpbmc= IGhlc2l0 IG1hY2hpbg== IGNvbmZpZ3M= 5LiJ c2xhc2g= Nzgy aGFuZHM= 0L7Qtw== IGluc2lzdGVk IFNjaWVudGlmaWM= aXZhbHVl TWFwcGVy IGJlbmNobWFyaw== IElzbGFtaWM= IHRlbmRlbmN5 IHNwb25z IHBlbG8= 6LCD55So QnV5 dWVu IHBpZXI= IGRyZWFtcw== IGRlbGV0aW9u dWxhdG9ycw== Y2twdA== cXVhcnRlcg== IEZJRw== cGVyYw== IFwr IGFicm9hZA== IGNoZWNrb3V0 IHBvc3Rlcg== IHN1bW1vbg== IGVxdWlwcGVk IE1hcmluZQ== IEJhcnJ5 IGluZHVjZQ== ZG9jdW1lbnRhdGlvbg== IHRocmVhdHM= IGNhbmNlbGxlZA== IHJpdHVhbA== XSoo Zm9yaw== dml6 IGZvc3M= IHNpdHM= IHdhcmQ= IG1pZ3JhdGU= IHRvbA== aXJpY2Fs IDIxMA== IFss IERWRA== IHByb2xvbmc= cmVzaWR1YWw= IFdpaw== IGVuY29yZQ== IGRhdGFzdG9yZQ== cG9vbHM= IDE5NjI= UmVwbGFjZQ== IGRpc2Fkdg== ZGVyaXZlZA== Y29tcG9zaXRl cHBhdA== cmNubg== Q29vcmQ= IGNvbm5lY3Rvcg== IHBhc3Nlbmdlcg== IEhhcm1vbg== IFRyYW5zZmVy IENPREU= 4KS+ RnVuY3Rpb25z IEVkZ2U= IGFuaW1hdGVk TE9HSU4= c3BlY3RydW0= ZGVjbGFyZQ== R2FtbWFE SUVx 5q+U IENvbXBsZXRl IGNlbGVyeQ== YmlhbGl4 IEFmZ2hhbmlzdGFu IE5lbHNvbg== IFZlZ2Fz RElH RGV0ZXI= U21v bmFscw== aW5yaWNodA== IGNvdXJhZ2U= IHBm IG90 cm9pZHM= IG1vbmdv ICIvLw== IEFtZXI= IE1pc3Npb24= c2V0SXRlbQ== XSkq IEphbQ== IEplcmU= UkVQTA== IGFjY2Vzc2Vk cHJvZHVjdGl2ZQ== IE1hcmlh IE1jSw== IHV0aWxpdGllcw== IHJlY2lwZXM= YW5hbHl0aWM= JycnJycnJycnJycnJycnJw== IHByb3NwZXI= U291cmNlcw== X1sn cHBl ZW5nbGlzaA== IGNhZA== YW50aA== IGZi IG55 IGRpdmVyc2l0eQ== aWxlcnM= IGdhaW5z IFRC IDE2Ng== MDAxMA== IHNocmluaw== IHByZWRpY2F0ZQ== OTA5 IGZpbmlzaGluZw== TUFW RkFJTEVE UVVFUlk= bWVudWl0ZW0= IGVxdWFscw== IFBhdHJpY2s= IGtpbGxlcg== IFN1cnZleQ== IE9VVFBVVA== ZWhpY2xl 6YCa6L+H IGluY3JlZGlibGU= ZmVmZWZl MTAwMDAwMDAwMDAwMDAwMDA= Z3Jvd3Ro cmF0ZWQ= d2Fs IA0KICAgICAgICAgICA= IHJldmVs IG50 IGRhZw== aW5lbWVudA== IHBsYWNpbmc= IHNwaW5l IHRyYWl0cw== IGV0YQ== IG9wZXJhdGVz NzQ2 YmFsbHM= IHBlcmZvcm1hbmNlcw== IGlnbm9y IGFtb25nc3Q= IOKI b3BoeXM= RGlzdFRyYWRlVW5pdHM= IEFudGFyY3Q= 5oyJ IHNoaWZ0cw== IHNoZWx0ZXI= cnB0dGNJVA== QkFUQ0g= RG9uYWxk U0NSRUVO VXM= aGY= bWlsZQ== 54g= IMQ= aW5jb21pbmc= IGFpbXM= YWRhcHRlcg== b3J0b24= ICgnPT0nLA== IHNwb3Rz c3VtbWFy aW50ZXJhY3Rpb24= NzA5 IHBvc3Rpbmc= IGRpdmVy IHN1c3BlbmRlZA== RUVF IGVpbmVt RGl2aXNpb24= 0LXQvdC40LU= UG9seWdvbg== IGxlZ2lzbGF0aXZl IG7Dum1lcm8= UElkcw== VG9r 4Lk= DQogICAgICAgICAgICAgICAgICAgICAgICA= IHNuZQ== IGdu IHNldQ== IEhhbnM= IHJlc29ydA== cHJlcHJvY2Vzcw== IGFiZG9t cG9sZQ== IHNjdWxwdA== IFJlcXVpcmVk RGF0YUlkZW50aWZpZXI= VGVzdElEcw== c2lnbmlmaWNhbnQ= ZmxvYXRpbmc= IFBsdXM= dmlzaWJpbGl0eQ== IHBsb3R0aW5n IGZvb3Rlcg== 57uD T0JEUA== IyMjIyMjIyMjIyMjIyM= IGRyb3BwaW5n d3JpdGVs IGF1ZGl0 TW9uaXRvcklkcw== T0JEVGVzdElEcw== T0JETW9uaXRvcklkcw== IGFjY29tcGxpc2g= IGRlcHV0eQ== dGFjaG9ncmFwaA== T0JEUGlkcw== RW5lcmd5 Yno= Y29n ZWxldg== IGZhaW50 IGhpbGxz IGxpZmVzdHlsZQ== b2xpc3Q= IHNlcw== IEJhcnQ= IGtv IGtpbmV0 IDE5NDI= QVNZ Mzg5 6K+i YXZvcml0ZQ== cHJvdG9z IGJyZWFjaA== TGlua3M= IFNlbmF0b3I= IERpcmVjdG9yeQ== IHR4bg== IE1lc3NhZ2VCb3g= IGZvbGRlcnM= T3JpZ2luSWQ= 5b2T5YmN IEJhdHRhbGlvbg== IFZpZXRuYW0= UGF1bA== U3BvcnRz YnB5 amlyYQ== bW50 IGZlbmNl IHN0cm8= IGRlZmVuY2U= IEZhaWw= dXNj IHNoYXBlZA== aXNlY29uZHM= IFll YXJjaGFy IGFjdGVk ZW1wbG95bWVudA== IEFzeW5j 5Y6f IFNUQVJU IGVkaXRpbmc= IFdvcmtz TWVtb3J5RW50cnk= IEZlZGVyYXRpb24= IEpzb25SZXNwb25zZQ== IHJlbGlhYmlsaXR5 RE4= Tkg= VW50 bGxlcw== xJk= 57U= YWxvbmc= IHBpc3Q= IEZvbnQ= aWJsZXM= IFZpY2U= IEtyYQ== IDE5NjE= IGludGlt IFF1ZXN0 VG9v 0LXRgdGC MzQ0 MzYx IEdlbmVyYXRvcg== 5Yib5bu6 w61u VGVjaG4= IGRvY3VtZW50ZWQ= cmVhbG0= IGluZHVjdGlvbg== IGFsdGVybmF0ZQ== UGlja2Vy IG9ic3RhY2xlcw== IGFja25vd2xlZGdlZA== cXVhbGlmaWVkTmFtZQ== LicpKQ== ODc1 V0M= XF0pLA== cGFpbnQ= IHBpeA== IHdpc2hlZA== IGVh aXN0cm8= b2Rkcw== IFJ5 IEppbm4= IDE5NDg= IHNjYW5uaW5n IENoYXJ0 ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg NTAz IHJlYWRhYmxl Y3VycmVudGx5 IGFwcGVhcmluZw== KCcvJyw= UGhvdG9u IG93bnM= IG11c2NsZXM= IGRyaW5rcw== IEFpcnBvcnQ= IFllYXJz Sm9pbnRz VkFSSQ== IGRlc2lyYWJsZQ== V0FZ ezo= ntc= YXRlcnM= IGNvbmU= IHdpcg== IGRpZ24= b21vbg== dGVlbnRo b3V0ZGly cHJveGllcw== cHJpbnRlcg== bG9hZGVycw== cmFuZXM= dHRp R2V0WA== ZG9jdG9y IGNvbHVtbnNwYW4= VkVWRU5U CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IEFwcGVuZA== SW5kaWM= IGZhdm9yYWJsZQ== IHNjaG9sYXI= IHRlcm1pbmF0ZWQ= IGluaGliaXQ= IHdlYWx0aHk= c3R5bGVzaGVldA== IHN0cnVnZ2xpbmc= IEFwcGVhbHM= IFlhbmtl PiIiIg== RVE= S0hUTUw= VW5k bGF0ZXI= d29tYW4= eWRr 6YO9 IGFyaXNl IG51cnNpbmc= IGxvcmQ= IGx1bWlu IDExNw== dWxzaW9u IFJlbmRlcg== dWJlcg== IEdsZW4= MTk4Nw== IGRpc3R1dGlscw== Q2xpcA== 5Lia NDUz ZmluZEFsbA== OTA4 IERlcHV0 bGVtbWE= IGRldmls IExPQ0FM IGJhbmtydXB0 w6p0cmU= 7ZWc IGF3YXJlbmVzcw== IGluZmVjdGlvbnM= IGV4Y2Vzc2l2ZQ== IExlZ2lzbA== bmV1dHJhbA== Q2VudHJhbA== IHRvbWF0b2Vz IGF1dG9zcGVj 5oSP 0YLQp9C10YLQp9C00YLQp9C10YLQp9C0 QXByaWw= QmF0dGxl RHU= R0ND TG9uZG9u bVN0b3A= 4qM= CgogICAgICAgICAgICA= ZGVsZWdhdGU= IGhvc3BpdGFscw== Y2VpdmU= IDEyMg== IFNVUA== IHN0eQ== dW5sb2Nr IGFzeW5jaHJvbm91cw== IFVp cml0aWNhbA== IHN1YnRsZQ== TGlzdHM= IHBob25lcw== RklS IENvbXB1dGVy d2lubmVy IGRhZW1vbg== UmVnaXN0cmF0aW9u Y29zdHM= R0VORVI= IGJhdGhyb29t 4paA4paA IGRpYWdub3NlZA== RnJlcQ== TGF0ZXI= UGllY2U= U29jaWFs Z3VudA== fCc= ICc6Jw== IGxpdg== IGx1Yw== IFNpbXA= IFBpbg== YW5nbGVk dXNoZXM= IEpvaW4= IHVuY2xlYXI= IG5lYXQ= bWluZXM= MTk4Mg== IHp1bQ== Y29tcHV0ZXI= IGNvbnRleHRz MjExMA== c2hpcHBpbmc= aWR4cw== IGd1aWx0 IENvbW1vbnM= UVVBTA== Q29udGVudFR5cGU= IGNoYXJ0cw== IGZvbGs= cmF0aW5ncw== IGNvbnRyaWJ1dG9y IGVzc2F5 IGd1YXJhbnRlZWQ= IFJ1c3NlbGw= MDc1 ZGc= 7Jg= bGVhZ3Vl IGhhc3M= IHlv IEJyZWFr IG91dHN0YW5kaW5n IHByZXRyYWluZWQ= IFRoaW5ncw== IHN1YnM= IHNwYW0= VHlwZUlk IGFwcGVuZGVk Nzg1 c2lkZWQ= IG1vZGlmaWNhdGlvbnM= ICRcew== ZW5leg== b3BzaXM= 6L+Q QnVpbGRpbmc= IGNvbnNpc3RlZA== IGNvcnBvcmF0aW9u IEFjY29yZGluZ2x5 IG5vYmxl IHRoZW9yZW0= IGRpc2FwcGVhcg== IGd1aWRhbmNl Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== JSks QU8= IHdm IGJsZXNz IGxhbmRz IGJlbQ== Li4uLi4= XSkr ZW5lcmF0ZWQ= U3RhZ2U= X18oKio= Q2hp cmVncmVzc2lvbg== dHJhZmZpYw== Nzc2 U2hhcmVk SU1BUlk= U3VibWl0 IHBlcmZvcm1z VGFnTmFtZQ== IGZ1bmRlZA== IGNvbnZpY3RlZA== QXBwcm8= IE1vbnRo YW5hbG9n IM6U IFBldGU= IG1pc3Rha2Vz IHJlY29uYw== IHJlZmxlY3Rz IHByb3BvcnRpb25hbA== cmVwcmVzZW50YXRpb24= Y29tYm9Cb3g= IHZlc3NlbHM= V0FJVA== 5Y+Y6YeP QkFS TEY= ZHJ5 a1RoaXM= d2l0 fCU= IHRn YWxnbw== IG1pZw== IGl4 IFNhbnQ= dGVhbXM= IiIiIg== IFBhcGVycw== IEhFUkU= ZnJvbXN0cmluZw== IGphcg== IG5vb24= MjA0OA== IHNoZWVw IGNsYXNzaWZ5 dmVyc2F0aW9u b2xvZ2lj IGFjdGl2ZWx5 IGdsYW5jZWQ= IGNvbnZlcmdlbmNl IHN0cmlwcGVk RGVsYXk= IGNhc2E= 5LmL REVGSU4= IFR1cmtpc2g= IGFsbGVnYXRpb25z TEVO WmE= cGluaw== cnNh eW1pbg== aXNhbg== IGRwaQ== ICIlKA== IFBJTk4= IEZhaWxlZA== IERBVA== IGV4cG9uZW50aWFs YWNrZWQ= IEVPRg== c2NhbGVz IGxlYXRoZXI= IEp1YW4= aWFv SU5BTA== IEtpbmdz IHJhcGU= IFN0YWRpdW0= aWVkZXI= Z3JhYg== UmVzcG9u QWxidW0= IHBhY2tldHM= IEFkZGljdGlvbg== IGFkdmlzZWQ= IGJpb2xvZ3k= IGdyZXA= IHByb2ZpdHM= IHBoeXNpY2lhbg== c2VnbWVudERpc3Q= c2VnbWVudERlc3Q= c2VnbWVudE9yaWdpbklk IGFjY3VyYXRlbHk= IG1hcnJ5 IHVuY2VydGFpbg== c2VnbWVudERlc3RJZA== RnV0dXJl R29sZA== Y2Fycw== aHN0YWNr bmJz c29j eW1heA== IGNvdWNo IG1hbQ== IGZvcndhcmRz IDEzOA== cmly IEJhcm4= IFRoZW9yeQ== IGp1bmN0aW9u IEth MTk4NA== YXdhaXQ= YXR0ZXJlZA== RGF0YVJlcXVpcmVk b3ZlcndyaXRl IGltcGxhbnQ= c2VnbWVudExvY2F0aW9u c2VnbWVudFNwZWVk c2VnbWVudERpcmVjdGlvbg== c2VnbWVudEZhY2lsaXR5 c2VnbWVudFRyYXZlbFRpbWU= 6K6t eW1tZXRyaWM= Q29tYmlu IHNhdGlzZmFjdGlvbg== bGF0aXR1ZGVPZmZzZXRz bG9uZ2l0dWRlT2Zmc2V0cw== 0YDQsNCy IGdyYW1tYXI= c2VnbWVudEZhY2lsaXR5VHlwZQ== Y2lwaGVy b2E= ZW56YQ== IG1hbGFyaWE= IGdlcw== IFRvbw== IEF1cw== IEFUVA== IENvdXI= cmVzYQ== ZXhwbGljaXQ= ICoqIg== IENoaWNrZW4= IFVuaXZlcnNl VmFsb3I= cGxvdGx5 RGV2ZWxvcG1lbnQ= Zmxvd3M= IMK2 IGRhdWdodGVycw== IFNvbWV0aGluZw== 5byV dHJpbQ== Zm9sZGVycw== IG5vdmVscw== IHJlY29uc3RydWN0 ZGlmZmVyZW50 SXB2 bWl4ZXI= Vk9MVU1F 6auY TGl0ZXJhbA== Umg= V291bGQ= emZpbGw= cmVmZXJlbmNlcw== IHBlbnM= IHJlZGU= IGRlbnQ= IGRhbXA= IGxhZw== YWRhcHQ= IChg IFR1bg== IFNheQ== KClg IGNvbnNlcnZhdGlvbg== Y29uZmxpY3Q= IEJyb24= IEhhc2g= IHt7XA== IEVtZXI= IHVwY29taW5n MTk4NQ== cmVnYXRpb24= fX19 MzUz b3Zv IEFubmFsaWVzZQ== IHJlZnVnZQ== Q29tbWl0 aXJlY3Rpb25hbA== QXBwbGU= U09D cGFnaW5hdGlvbg== RlJJTkc= IEF2YWlsYWJsZQ== IGZhbnRhc3k= IG1ldGFib2xpc20= IG92ZXJ3aGVsbWluZw== IuKAlA== RXQ= VExT VklS Y3o= b2lzZQ== IAogICAgICAgICAgICAgICAgIA== cmVjaw== ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ== IGRvd250b3du IDE2NQ== IE1vYmlsZQ== bWVudGVk IGhldA== c2NhbGw= IEpvc2g= cHlj IHJlY3VycmVudA== aWdodGVycw== IGFwcGVsbA== U2Vhc29u Vmlld3M= IENvbXBvbmVudHM= IFVzZXJz IHBhZGRlZA== IFN3aXR6ZXJsYW5k IHRyYXZlbGluZw== IGNvbnZlcnNhdGlvbnM= 4peP cGFsZXR0ZQ== IEZhbGxz IGFuY2hvcnM= L18= XF0pLg== YWxsb2NhdGlvbg== bGVhbnM= IHVwdA== b3dz b3dlZA== IFBhZw== IE5pYw== ICsvLQ== IEJ1bg== IGNvaW5z c2NhbGluZw== IEplc3M= IGFkYXB0ZXI= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg eW5vbGRz IHRyYW5zbWl0dGVk IGFydGlmaWNpYWw= IGVmZmVjdGl2ZW5lc3M= TUxN IHF1YWxpdGF0aXZl IGFubml2ZXJzYXJ5 IGVuZXJnaWVz Rk9VTkQ= IFNlbmhvcg== Pi4rKVw= IGZ1Y2tpbmc= 5paw6Ze7572R Skk= Uk5O U2ls V0VS dHJlcw== dGllcg== ZXNzZQ== IHN0YXRpbmc= IGV4ZW1w IEVwb2No c2hvb3Q= IHByZWNlZA== IHhp IGRvemVucw== IGludGVydmVu Y3VyeQ== fX17XA== IFBoYXNl IGF0dGFja2luZw== IGV4Y3VzZQ== IGV4cGVjdHM= IGludmVzdGlnYXRvcnM= IFByaW9y 5Lit55qE IGxpdGVyYXJ5 IG11eQ== IGVuY3J5cHRlZA== YW5jaG9ycw== IEFVVEhPUlM= IGNoYXB0ZXJz LS0tfC0tLXw= UHJvbQ== IHB4 IGJ1YmJsZQ== Y2hhaXI= IHVidW50dQ== IE1vdG9y IHJhbGx5 IExpdGVy IHZlcmlmaWNhdGlvbg== d29ya3NoZWV0 IGZsYXR0ZW5lZA== IHRyYWluZXI= w6RjaA== c3Zt XSksJw== ZHJvcGRvd24= IGNhbGN1bGF0aW5n IEF1dGhvcml0eQ== dWVydG8= IGFkanVzdG1lbnQ= IEVtcGVyb3I= IFBoeXNpY3M= c2FsYXJ5 IERpc3RyaWJ1dGVk TWFnaWNNb2Nr TWFqb3I= IG9ic3RhY2xl IFBsYWludGlmZnM= IERFU0NSSVBU KWA= YmF0ZQ== Z2Nj amlk dHV0b3JpYWw= d2w= IGF0ZQ== aXRr IGluY29tcGxldGU= IGR5bg== IGJlYXRpbmc= IExsb3lk IEhhdmluZw== PT09PT09 IGF2YXRhcg== VXBkYXRlcw== U2hpZnQ= Ym9hcmRz 0L7Qtg== cmV0dHk= w7NyaW8= IGluZmxhbW1hdGlvbg== IGJhbmR3aWR0aA== IHJlY2VwdG9ycw== IGNyZWRpdHM= IGxhdWdoaW5n IHJlc2lkdWU= IFBZVEhPTg== aWxpYnJpdW0= Y3JpdGVyaW9u IHRhbWLDqW0= Kic= QnJhbmQ= cnNw ICAgCiAgIA== aXRpY3M= IGNQaWNrbGU= IGJw IGh1Zw== bXBp IGVjb3N5c3RlbQ== IHl5 YWxsaWM= IEVtYg== IGFkb3B0aW9u IDE5NTg= Zmxhc2s= IGF0dGVuZGluZw== MzU4 NDg4 IGludml0YXRpb24= U0hJRlQ= YmluZGluZ3M= IENvbmZpZ1BhcnNlcg== IEFjY2VwdA== IEF1dGhlbnRpY2F0aW9u w7Fh IG1lZGljYXRpb24= Y2lkcg== IGJhY3RlcmlhbA== IGN5bGluZA== IHRlbXBvcmFyaWx5 Q2FydA== ZG9y amFjaw== ID0n ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09 IGJhbm5lZA== IGRhdGVk cmFoYW0= IFNhbWU= IFNub3c= IExJRw== IFVEUA== IFVVSUQ= IGRpc3BhdGNoZXI= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg eXN0ZXI= ODAz Q2x1cw== Ojov R2V0WQ== cmVjb3JkaW5n IDE1MQ== IGFudGVyaW9y IE1pc3Npbmc= IGhleGFncmFt IHRocnVzdA== IOqy IGluaXRpYXRpdmU= U1VQUE9SVA== Y2xvdWRzZGs= IEJhbHRpbW9yZQ== IGluZGl2aWR1YWxseQ== Y2libGU= a3A= bW91dGg= fStc IGJhc3Q= IG5hdA== YXN0aWth aW1wb3J0cw== SU5G IDE5NTk= Li4uIiw= IGV2ZXJ5ZGF5 IGJlaGF2ZQ== IHRvcmNodmlzaW9u IHRyZWF0aW5n IHByZXNzaW5n IHdhbGtz IGhlYXJ0cw== cHJvdG90eXBl ZmFsbGJhY2s= 6aKE IGtub2NrZWQ= IHF1YWRy Q3JlZGVudGlhbHM= IE5ldmVydGhlbGVzcw== IG9wZW5lcnA= LOKAmQ== QWJi TW90aW9u UGFkZGluZw== IFRpdA== IENMQQ== cXVlbmNlcw== IGFnaW5n Y291bnRyaWVz IGluc3RpbmN0 Q09QWQ== w6Fs TGVwdG9u aW5zdG9u cmVzcG9uZA== UEFUVEVSTg== IHNwZWFrcw== R0xV VmlzdWFs IFNhYXJr 6Imy RU1B VElQ ZHJhZw== cnE= cmV6 IHByYWlzZQ== IG1m b2Rp IFBhcmVudA== IE1BQw== dGFo INC7 IGZvbGxvd2Vycw== UGFyYQ== RGVsZXRlZA== IFNoYWtlc3BlYXJl IHN3aXRjaGVk UVVPVEU= aWpu IHN0b2Nrcw== cGVybWlzc2lvbkdyb3Vw IEJlc3VjaGVy IEpvaG5ueQ== 5Z+O fV57K31c cHJvdGVjdGlvbkxldmVs Sm91cm5hbA== cWg= cmhz dG1wbA== IHRtcGw= CiAgICAgICAgCiAgICAgICAgICAg IHJlbWluZGVk ICc9 dXRvcnk= cmFibGU= IFNwZWN0 IGFzeW5jaHJvbm91c2x5 IEZpeGVk dXNh IHByb3hpZXM= IG1ldGVy aWVsZGVk IFZh Zm9vYmFy ZGVyaXY= YXJlbnRseQ== IHByaW1pdGl2ZQ== SW50ZXJuYXRpb25hbA== IFNoYXBl Y29uZmlybWVk IGNvbnNpZGVyYWJseQ== IGRyYXdz KyJf b3B0aW1pemVk IEJlcmtlbGV5 YXJjaGl2ZWJvdA== bnV0cmllbnRz U2NhbGVy IHVuaXZlcnNpdGllcw== 5Zyw5Z2A IGFncmljdWx0dXJhbA== IGluY3ViYXRlZA== IGxkYXA= IEFyZ2VudGluYQ== VEFTSw== V2Fz Xykp c2xvYw== 56Y= IHRvYg== IGd5 IGFzeQ== cGx1Zw== IERhcw== IFJ1ZA== b2JhY3Rlcg== IGNsZXI= IHByZWRlY2Vzcw== IHJvdXRpbmc= IDE5MA== IDE5Mzc= IGFyZ3Vpbmc= IG1pbmluZw== IHRyYWlsZXI= IFJlYWdhbg== IGdyb3VwZWQ= IGRpY3Rz c3RkZGV2 IFJlc291cmNlcw== IGV4cGVjdGF0aW9u Z3JhZGF0aW9u IHByb2dyZXNzaW9u UHJvZHVjdElk V0hJVEU= IE1lbGJvdXJuZQ== IGRlcGxveWVk IFZpbGxhZ2U= QXVkaXQ= 6K6t57uD SVZFUg== THk= IHR1dG9yaWFs IGNhcmdv IGR6 IGRpYWw= IGRyYWluZWQ= IDE2NA== JzooJw== IEJ1ZGQ= c2hha2U= IGVuZm9yY2U= Y29vbA== YXRvcmlhbA== Y29tcGFyaXNvbg== aWthdA== d2h5 IGV4cGxvcw== IEFuaW1hbA== IGNhcnJpZXM= IGNlbnRlcmVk U0lY IHNuYXBwZWQ= 0LvRjA== IHN0YWNrZWQ= IGluY2lkZW5jZQ== IHN0ZWVw IHRpY2tldHM= aWVyYXJjaGljYWw= KCIiIiU= 2KfZhA== 4pSA4pSA4pSA4pSA IG15c3Rlcnk= IFRva3lv bWFkZ3JhcGhNTE0= R3JlYXQ= TE9ORw== UHVzaA== VUlOVA== WlM= bGFkZQ== d2l6YXJk IHBlbnQ= IG9saWc= IGRpdA== dXJzZQ== aW11dGg= IHZlcmRpY3Q= IHBlcm11dGF0aW9u YXpp IGltcG9zZQ== RVhDRVBU dG9vbHRpcA== IGJyYWNrZXQ= IGdhcmFnZQ== IENhcGl0YWw= ICd7fSc= VW5pY29kZVVURg== IGNvbnRyb3ZlcnNpYWw= cG9zdGdyZXNxbA== IHNwb2tlc21hbg== Q2VydGlmaWNhdGU= IGVsZGVybHk= Q2FyZWVy RlJJTkdFTUVOVA== TWVzc2FnZXM= TmV2ZXI= bW9uZw== IAogICAgICAgICAgICAgICAgICAgICAgICAgICA= b25vbQ== b3JhY2xl YWxvdXM= IHNhbQ== IHN0YWly IG9udA== IEZJTA== IEJV c2hvcmU= U1RZ c2VudHJvcHk= IHJlY2FsbGVk XVs6 Y29uZGl0aW9uYWw= YmVoYXZpb3I= IHNpemVvZg== OTA2 IEFsYnVt IMO+ emV1Zw== IEJlZ2lu IGtpbmRyZWQ= ZGVjcnlwdA== IE1ha2V1cA== 6Zeu IGdvb2dsZWNsb3Vkc2Rr IGRvY3RyaW5l IEJlc2lkZXM= IFB1Ymxpc2hpbmc= UFVTdW1tZXI= TXVzdA== c3R5 IEFsZA== IE1p IHByb3Bvc2U= IEh1bQ== IHNob3Jl IDMzMw== IGVuYWN0 IG5ld2Vy UkVMRUFTRQ== IHdoZXJlaW4= Q29sdW1ucw== IHNsaXBwZWQ= b2ZmaWNl OTU5 44OH IE9ybGVhbnM= IGV4cGxhaW5pbmc= IHBsYW5ldHM= IEFncmlj TnRVc2Vy IGFjY29tcGxpc2hlZA== IHN3aW1taW5n Pi4qKVw= MDEyMzQ1Ng== IG9zY2lsbA== IFBpdHRzYnVyZ2g= Q29z YmFubmVy Y2F0cw== ZEI= c2FuZA== emVs w7A= IAogIA== IGhw bXBv bXByZQ== ICJcXA== IDEwMDAwMDA= IE1hag== Z2V0RWxlbWVudHM= YXZpYW4= IGdldHRleHQ= Y3JlYXNpbmc= IEtyZQ== IHJhaWQ= IHB5bW9uZ28= ZG9jc3RyaW5n IG1lcmNoYW50 0YPQvQ== bW9udGhseQ== IHByb2dyZXNzaXZl IElzbGFt IGV2b2x2ZWQ= VU5LTk9XTg== bW9tZW50dW0= 54q2 OiIpKQ== Ymxv IGN0cmw= LS0i LS0+ IFRMUg== IEFDVA== IFdvcg== IFVuZA== IDE5NDk= Y2Np MjUx cmVnZXhw IHJlbGF0aXZlcw== IGRlcGVuZGVuY2U= Zm9udHM= 5YWI IGN1dG9mZg== IGRhdGFiYXNlcw== IFNjZW5l 0LLQsA== IGRyb3Bz 4oCyLQ== Zmx1ZW5jZQ== J1s= RHJhZnQ= TW9t ZHVwbGljYXRlcw== cHNl c291dGg= 7Yo= ZXJlbg== IGh3 IFRQ IHNlaXplZA== IERvbA== IERpcA== IFJhcA== IGRpc2Nvbm5lY3Q= IGFzc2lt QUxU IFJlbGVhc2U= IFJlYWRpbmc= R2V0QmluQ29udGVudA== c3ltbGluaw== Y2FwYWJpbGl0aWVz 5LuW YXJyaWFnZQ== 6K+t IGN5dA== IExvc3M= IHdlYnBhZ2U= 57uf IHNpbXBsaWNpdHk= U0FNRQ== IHN3aXRjaGluZw== IEhlbGxv IEJldHdlZW4= IGtpY2tlZA== IERvd25sb2Fk dXNhbGVt UkVUVVJO IGx5cmljcw== IExlbW1h IMOqdHJl Xycs 5aA= IENCTA== IEJlZA== IG1lbGFu IFdh IFdp LS0tLS0tLS0tLS0tLS0tLS0tLS0= IDwt UmVmZXI= IHdoZXJldmVy bGlvZ3JhcGh5 IEFudGhvbnk= ZGlzdGluY3Q= OTQ5 IGdyaW4= IGltcGxlbWVudGluZw== IE1lbWJlcnM= 5bGC IGZ1cm5pc2hlZA== IHZldGVyYW4= bG92YWs= R3JlYXRlcg== T1c= WEI= 5aE= IGRvbA== IGdt bG9pZA== IENTUw== IEZNQw== c2V0RnJhbWU= cHJvYmxlbXM= IEpvcmRhbg== IHN1aXM= IGBgYA== IHBhc3NpdmU= ZGlzY292ZXJ5 YXRoZXJpbmU= NDg0 dGVzeQ== IFBob3Q= IG1hc2tlZA== IGp1ZGljaWFs IGFmZmVjdGluZw== IE1BU1RFUg== IHNlY3VyZWQ= Y29udGludW91cw== IFRlbnNvckZsb3c= YXNzZXJ0QWxsQ2xvc2U= KSY= RGFpbHk= R1BV Um9t V2ls V0hFUkU= bXVuZA== fWA= IGZhbmN5 IHBpb25l ICch IGxpbmd1 ICgu IGZvcm1h IDEzNA== IGlzc28= IHZpZA== IFBU IE1vaA== IExhZw== IExpbmQ= IFdpbmU= YWNp ZW5zaXZlbHk= IGltbWVy IG9waW8= IHRoZXJlb2Y= Q29uc3RydWN0 d29ya2Jvb2s= ZWty VVNI IHBhdGllbmNl IENsdXN0ZXI= cG9seW5vbWlhbA== dWNrZXI= ZnVsbG5hbWU= IFVwcGVy Z3JlYXRlcg== IGNvbXBhbmlvbg== Zm9sbG93aW5n IFN0b3BJdGVyYXRpb24= IFNpbHZlcg== IFJlbmF1bHQ= IENvbG9uZWw= LCkpLA== S0c= pOaWrQ== IHRs b3Jv aXRpemU= YW5zZWE= IHJldmlzaW9ucw== dXRh b2xr IGRlc2VydmU= aXN0ZQ== IFNvbQ== IEF0aA== b3B0ZXI= IFBC YWNtZQ== IGNob2NvbGF0ZQ== b2JpYw== IDM2MDA= IGxvdmVz IHNjYW5uZXI= IFN0b3Jt IGlkbGU= IG1pbm9yaXR5 cm9vdHM= cmVsYXk= cHJpbWl0aXZl NzQ5 dG9rZW5pemVy SU1U c25ha2U= IHBvbHlnb24= IFRyZWFz IGVuY3J5cHRpb24= IG11bmljaXBhbGl0eQ== QnA= Rmk= TWl4ZWQ= WVU= aGJveA== dm4= IGN1cmw= IHdpbmVz ZXNhcg== IHZhc2N1bGFy KCd8 dG9vbg== IG1hemU= IDE5Mjg= IDE5Mzg= Ymxhcw== IGNvcnJ1cHRpb24= 44GP cm9waWM= cHJlc2VudGF0aW9u OTQ3 Y3B1cw== RkFDVA== XCJ9LA== bWVkaWF0ZWQ= 5pi+ IGV4cHJlc3Npbmc= IHN1cnZpdmluZw== IGVudGVycHJpc2U= IGNsaWNrZWQ= IHBvcHVsYXJpdHk= U3RlcGhlbg== a2xhc3M= IGV4aGliaXRlZA== IGNhYmlu IHNwb250 IFJpZGdl IGZyYW5jaGlzZQ== KVs6 RUg= T0F1dGg= UXVhbA== UU1lc3NhZ2VCb3g= aGFuZGVk c2tl dGVudA== eXg= 5Ys= 8J4= IG9kb28= IHNhaWw= IHN5bmNocm9ub3Vz IGd1c3Q= Y2xpc3Q= IGNvYWNoZXM= IGNvb3BlcmF0aW9u IGtvbg== IEppbGw= JyksKSIs MDAwNw== IGFjZXQ= NDU5 Z2luYQ== IGdyYXBoZW5l IGBgJw== aW5zdGVpbg== U0lNUExF IEFjdGl2aXR5 T3BlcmF0aW9ucw== Qk9PSw== IGNvbGxlY3Rvcg== 5pWw5o2u5bqT IGluaGliaXRvcg== c2NyYXBlcg== 5L2N572u IGFubm95 UkVHSVNURVI= 5rKh5pyJ QlNE RnJh TG4= TmVzdGVk UUg= IHdhcnJp IG10 IHJldmVy YXNpYQ== aWdpb3Vz IHVkcA== IFNvcg== IGV4cG9zZQ== IGpv cHJlZmVyZW5jZXM= IHVuY2hhbmdlZA== IHJhY2s= YXBwZW5kQ2hpbGQ= YXRvcmllcw== c29ucw== UHJvdGVpbg== IG1vZGVsaW5n dXRpbGl0eQ== UE9JTlRFUg== IFNlYXR0bGU= VU5D CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IGRlYWRsaW5l CgkJCQkJCQkJCQk= IGluZmx1ZW50aWFs IHBvb3JseQ== IG1hbnVmYWN0dXJlcnM= IGVkaXRvcmlhbA== 64uI64uk IExJR0FUVVJF XCJ9LHtcIg== JF8= QCI= UGlwZWxpbmU= XSQ= ZGF0aW5n ZGFuZ2Vy bmF2aWdhdGlvbg== IGF1c3M= aXNvdA== IFN1aXRl IENsZXZlbGFuZA== YXBvbGlz IE5pY2hvbA== IEVTUA== IGxpc3Rl MTkx IHRyYWN0 IFJlcGxhY2U= IENvbm4= INC1 YXV0aGVudGljYXRl Q29udHJhY3Q= IHJlcG9ydGVycw== ZW1haWxz SVZBVEU= IEF1dG9t YnJva2Vu IGVsaW1pbmF0ZWQ= IGFkbWluaXN0ZXJlZA== In19LA== OyIp QnVz U2F2ZWQ= ZWlnaHQ= cGFuZGFz YXRlbg== CiAgICAgICAgCg== ICcnKSk= IGl2 aWxpYQ== IFRN ZXJzaA== IEdlcw== IEdQUg== c2NpcHk= c2NvcGVz Y2xhc3NpZmllcnM= IHVubmVjZXNzYXJ5 UmVjZW50 Q2F0ZWdvcnlJZA== IHJlbGF0ZQ== NjY1 0L7RgQ== IF06 IGNhcmNpbg== IFBsYXRmb3Jt IGNhcmRpYWM= Q29ubmVjdG9y IGludGVncml0eQ== IC0tLS0tLS0tLS0t ZHdhbQ== IHJlbGF4YXRpb24= 5aaC5p6c IGV4Y2x1c2l2ZWx5 MjEz QUo= bmlz IHBvZGU= IHdyaXN0 IHdpc2hlcw== IGdpZw== IDEzMg== IEhB c2Nhcg== IGludGFjdA== YXhpZXM= cmVxdWVzdGVk IG9wZXJhdGlvbmFs IENsaWNr aWpr IHZpb2xhdGVk IHB1cnN1YW50 IE51bWVyaWM= IHByb3BhZ2FuZGE= T2N0b2Jlcg== 4oCU4oCU4oCU4oCU Pyw/LA== IOKJpQ== IHNob3V0ZWQ= SVNIRUQ= IeKAnQ== RHVtcA== SE4= SmVmZg== U3Bl VmFycw== Y2FudA== aGFp aGludHM= eG0= IAoJCQk= b3Jy YXJpYWw= aXNvZA== b3V2ZXI= IG5pZ2h0cw== IG9mcHJvdG8= IGdhcmQ= cGVw dGhpbms= IFBhcGVy IFBBVEg= IFJFVA== Y2hlc3RyYQ== UkVTT1VSQ0U= IGNyZWRlbnRpYWw= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= VGhvc2U= IGZsYW1l IHJlbHVjdA== IGRhdHVtcw== MzU5 dG9wb2xvZ3k= VXBncmFkZQ== MDYyNw== IGluZGljYXRpb24= IE1hcmll IOyV 57uZ IGp1ZGdlcw== IFJ1c3NpYW5z IHNpZ21vaWQ= 5omL IHJhbmtpbmc= VUJMRQ== IHNhY3JlZA== IFRvd25zaGlw IFByb2R1Y3Rpb24= 55uu5b2V IOydtA== 6KW/ Oyc6 Qkc= YXE= 574= IGluaw== IHJlbGV2YW5jZQ== IDEyNA== IHZveQ== cXVpcmVz IExleA== IFdPUg== YWRkTGF5b3V0 IGNvbXBhc3M= IFllYWg= IG92ZXJsYXk= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= MjIwMA== dGhlbQ== RGF0YVNldA== YWxreWw= Z2Vub21l YXJyaWVk IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== 5aS0 IGVzdGFibGlzaGluZw== cmlnYXRpb24= Y2FyYm9u IGZvcm1lcmx5 YmVuY2g= IHZlbnVl IE1hdHRoZXc= YXJldHRl IFN3ZWRpc2g= aWdodGVvdXM= QWN0b3I= QnVy S0Y= TEVS WFI= bWl4ZWQ= dml0 4K4= IGR1cGxpYw== ICg6 IHN0YWRpdW0= KCkn aW50b29scw== aWZpYWJsZQ== Z2V0cw== IHdoaWxzdA== IEhvb2s= dGVzdGluYWw= IHVuZGVyZ3JvdW5k IHJlZ3VsYXRvcnk= IEV4cHJlc3Npb24= IHNraWxsZXQ= S2V5d29yZA== NzQ3 IFNob3A= IFBhcmw= QlVGRkVS IHNpbGx5 IHRtcGRpcg== IG11c2ljaWFucw== IG1pZG5pZ2h0 IGNvbnN0aXR1dGlvbg== IHNpbmd1bGFy SVNUUw== IHNwcmVhZGluZw== IGVmZmljaWVudGx5 QWxsb3dz IENhc3RsZQ== IFJlcHJlc2VudGF0aXZlcw== c3BlZWNo IGRlc3BlcmF0ZQ== KiIs RnJhY3Rpb24= ZWxlY3Rpb24= ZWdn Z3Vlcw== c3BvcnQ= 0Jw= IGNueA== IHBi IGRlbGVnYXRl IGdhdXNzaWFu dW5hbWU= YW1pbm8= IER5bmFtaWM= IExQ PSdf IDE5NTY= ZGlydHk= dmVuYW50 UHJvcGFn IHBlZXJz IGZpbGluZw== 4YCx IHByb21vdGluZw== IFByaXY= IHN0cmlwcw== IHJhbmNo IFNRTEFsY2hlbXk= Kn4q IG11bHRpcGx5 IEh5cGVy IG1hbmlwdWxhdGlvbg== IGF3a3dhcmQ= Ll5bQA== Q3JvcA== Q2xvc2Vk R3VpZA== SEs= U2Np VkJveExheW91dA== ICJe ICI6Ig== Y2hsb3I= bG9zdA== dmVjdA== IFBsZQ== IE1vbmV5 IHJuZA== Kio6 IEVE IDE5MzY= IDE5NDM= UHJvcHM= RGF0YVR5cGU= IGRlY2lz Nzgz ZXhlY3V0b3I= UGxhaW4= IE9ydG9u QXN5bmM= UXVvdGU= XCJc IHJlc2VhcmNoZXI= IGpvaW5z bWNjbA== IENocmlzdGlhbnM= YWph ZmlyZXdhbGw= IEdhbGlsZQ== QVJDSEFS ZXBpc29kZXM= cHJpdmlsZQ== Q09OVFJPTA== c2NyaWJlcnM= IE9yaWdpbmFs 64+Z VUJMQVM= IGxlZ2l0aW1hdGU= ZXRoZWxlc3M= KVxc Q09S S2luZw== UUNvbG9y U2Nob29s VGFsaw== VXRpbGl0eQ== V0Q= IO+/ve+/ve+/ve+/ve+/ve+/vQ== IGNyYXdsZXI= IG1wbA== b2x2ZXI= IGdhcHM= KCdfXw== IEdFTg== IGNvdmFyaWFuY2U= ZXBjYWQ= IGVuYWJsaW5n IFwt WyJf IHBvbHlt 44GC NTU2 T1RIRVI= IHRhcmdldGluZw== IDEwMDAwMA== IHByb2R1Y2Vycw== 0YDQuA== w6Ro IGRpc2NhcmQ= IExpc3ROb2Rl 5Lu3 IHBhcmFtZmxhZ3M= WFhY Y29uc3VtZQ== IEVudGl0eQ== 6KeG cmVzb2x2ZXI= 7Jqp UkVNT1ZFRA== Z2V0RWxlbWVudHNCeQ== bWNjbGFpbg== Kl0= RGF5cw== RlVMTA== TWl4 UHJlc2lkZW50 a2ljaw== Y3R5cGU= IGRpcnQ= IGRlcHM= IFsoIg== IGhlYWxpbmc= IEhpbmQ= MDExMQ== IGxlYXNl IHByZXN0 IHhw IHNvdmVyZQ== IDE5NTU= UkVTVA== IG92ZXJmbG93 Q2h1bms= IEFyaw== YWhh MjYz QWRkaW5n c2VuZFRleHQ= YXV0aG9yaXphdGlvbg== RGVmaW5l IGludm9rZWQ= IGlnbm9yaW5n IGZhY2lhbA== w6Vy IGRlY3JlYXNpbmc= YWNjZXB0ZWQ= dGVybWluYXRl IENvbm5lY3RpY3V0 Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IGRvbWluYXRlZA== IGVsZXZhdGlvbg== RElSRUNUT1JZ KCIsIik= RHVtbXk= SG9sZA== Z2lj aGFwcHk= IGNha2U= ZWxh IEljaA== KSwn IHByZXByb2Nlc3Npbmc= IGNvbXBseQ== IGludGFrZQ== eXN0aWNr INCh IGF1dG9n 5pyq IGxhbmRtYXJr RU1Z 6LSl cmVzdHJpY3RlZA== YWdhaW5zdA== IGNhdGVnb3I= b2NoZW1pY2Fs U1RPUkFHRQ== Pns= RGFy TFNUTQ== Ym9s cHVuY3Q= IGZpc3Q= IHdk aXNpbg== ZWRlcg== IGdpZnRz dmVyaWZpZWQ= IFBvcGU= ICsi IEJ1ZA== IFJvbGw= bGxp IGxvY2F0ZQ== NTU3 SUdQ IERlYWQ= IHJlc3RhdXJhbnRz IGRlc2lnbmVy RVhFQw== IGVwaWM= IGFzc2lnbm1lbnRz IEd1eQ== IGNoZW1pc3RyeQ== ZXhwYW5kdXNlcg== IEFwcGxlV2ViS2l0 IGRlY29tcG9zaXRpb24= IGh1bmdyeQ== UkVNT1ZF IHBlYXNhbnRz Qm9sZA== SFU= TWlzc2lvbg== UmVuYW1l U0ZG VHVu Ym91bmRlZA== Y3Jhd2xlcg== aGs= c2luaw== c3RyZXNz IHNhdmVz cm91dGluZw== aWNpbw== IG1hdGU= IHRvb24= IEFncmVl IENydQ== JzooWw== IEZyZWQ= IERpY2tlbg== IFdlcg== IHNoYWtpbmc= IFVwb24= aWV2ZQ== IEty IHJhZ2U= YXNzZXJ0TGlzdA== IHN1cHBsaWVy Q0hBTkc= b3Z0 IEZvcndhcmQ= b3Zlcmw= IGRpdmluZQ== U3Vic2NyaXB0aW9u IGRldmFzdA== 5aSW TW9kdWxlcw== IGZlYXJz INC+0LE= aW1wbGVtZW50YXRpb24= IGZhY2lsaXRhdGU= Y3Jvc3NlbnRyb3B5 TWFnZ2lv 6KKr KCE= OyIs PV9f QXJpYWw= QnVzaW5lc3M= UmF5 Y2F1c2U= aGFsbA== aW9ycw== bGo= bWFsZQ== eHU= c3Rz IHPDsw== IENlbHQ= IE11dA== IHtcXA== YWN1bGFy IEVtYmVk IDE5NTI= IFlPVVI= IGludGVyY2VwdA== IGJvb3Rz NDAy IDIwNA== b2ZmaWNpYWw= IHJlY29yZGluZ3M= U3ViRWxlbWVudA== Q291bnRz IGxhY2tpbmc= IHNjZW5hcmlvcw== IGRlbWFuZGluZw== IGFycmFuZ2VtZW50cw== IE5vcm1hbg== 55yL IGF2b2lkZWQ= IGFwb3B0b3Npcw== Y2xvc3VyZQ== ZGlu ZmVu anVu c2hlbA== c3Bhcms= 15w= b3J1bQ== IGZpZXI= IG91bg== IHNvbWE= YXNu Y2Vr IDExOA== IE11Y2g= IHZhbGxleQ== IHJveWFs IEt5 cml0aWM= MzU2 YW5jaWVz IHNpbXVsYXRl aGVzaXplZA== UVVJVA== UGVybWlzc2lvbnM= IG1pc2M= IExvZ2dlcg== 5Ye7 TWVudUl0ZW0= IGltYWdpbmF0aW9u b2dlbm91cw== IGZsZXc= 5Z2X IExvdWlzaWFuYQ== ZmFjaWxpdHk= IHNjYXR0ZXJlZA== IFNpbmdhcG9yZQ== U3BpbkJveA== cGFyZW5jeQ== 66m0 a2Vycw== IGdyaQ== IEFDQw== aXZpdGllcw== c2hhZGU= IDE5NDc= IDE5NTQ= IDY1NQ== VVJBVElPTg== IEFscGhh YnJhbA== Njg0 IHByZXNlbnRpbmc= cGVkaWE= IFBhcmFt IGxhdGV4 Q2FsbGVk IGFmZmFpcg== DQogICAgICAgIA0= 5qC5 IGRlcGxveW1lbnQ= RWRnZXM= IGJlYXRlbg== IGFic29ycHRpb24= IHJhY2lhbA== IFN0YW5sZXk= IEhhcnZlc3Rpbmc= IHByb3NlY3V0aW9u Rk9MREVS U3VyZQ== U2NoZWQ= VGF4 d2FsbGV0 DQogICAgICAgICAgICAgICAgIA== IAogICAgCiAgIA== IHRhbnQ= cm9nYXRl IGluY2VudA== aWNpb3Vz ICIoKCc= aWd0 IFRvb2xz IEZ1bg== IExhdXJh IEdybw== CgkgICAgICAg IHByZWRvbWlu IDE5MTk= VGhyb3VnaA== OTkw IGNvcnJpZA== 5Lic R2V0Tg== IGVtcGlyZQ== w6RuZA== IG9yZ2FuaXNhdGlvbg== IENoZWNrcw== Ym91bmRpbmc= IHByZXZlbnRlZA== IGFjaGlldmVtZW50 SW52aXRhdGlvbg== bWF5YmU= IG5pY2tuYW1l IGRpc3Rpbmd1aXNoZWQ= WFhYWFhYWFg= U29sdmVy IHByaXZpbGVnZQ== a2VsdWFy d2F0c29u Mzgw Ozwv RXZhbA== UG9y XXw= IHdlbGZhcmU= ZW50ZXM= dWVkZQ== IE1pbmQ= IE1hY2g= IEJvdQ== IFJFRA== IGRvY2s= IGFsbGVy Ym9zcw== 4oCZLA== Y29udGlndW91cw== MTAwNw== NzU0 IGV4cGlyYXRpb24= IGNsZXZlcg== Y2FsbGVy Z2VkeQ== IGRpc3BsYXlpbmc= TWFya2V0 c3BsaXRz IFNvbm55 IHNpbXBsaWZpZWQ= IExhYm9yYXRvcnk= IHNjaG9sYXJzaGlwcw== CiAKIAogCiAKIAogCiAKIA== TWFk eHo= eWc= 67Y= CgogICAgICAgICAgICAgICAgICAgICAgICAgICA= YXJpdGg= IHBzaQ== IGR1Y2s= IGVtaXNzaW9ucw== IFNlcA== KCc9 IEZvbGxvdw== c2V0VGl0bGU= IEdC dG9TdHJpbmc= cnlz aW5kcm9tZQ== IHhtYXg= YWt1 IG5lb24= ICQt IHVwcmlnaHQ= IHRyYXNo ZXNzaW9ucw== IHF1ZXI= IHVzdWFyaW8= c3VidHlwZQ== IGRpc3RyYWN0 b290Qm90 cG9sbGluZw== IEFkZHM= CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICA= Q2xhc3NpZmljYXRpb24= IHJlZHVuZA== IENhbGN1bA== UEFUQ0g= IFByZWRpY3Q= ZXh0ZW5kYWJsZQ== Z29vZ2xlYXBpcw== IHNvZnRtYXg= cGxhbmF0aW9u IGpvdXJuYWxpc3Rz IHJlY2lwaWVudHM= UHJvdG9jb2xNZXNzYWdlVHlwZQ== IGZsdW9yZXNjZW5jZQ== R2VuZXJhdGVkUHJvdG9jb2xNZXNzYWdlVHlwZQ== IG9jY2FzaW9uYWw= UFJQUHJvZHVjdElk UFJQQ2F0ZWdvcnlJZA== IGFjdHVhdGU= IGluZXZpdGFibGU= OyI+ Tm92ZW1iZXI= Z2Ft 4oKs aGVtZXI= IHN6 YWR2ZXJ0 KCci IHJm IHJwYw== Y2xpbmc= ZXJ0eg== IDE5NDY= IGZsYW1lcw== aWto RGVjZW1iZXI= ZGVsYQ== IEJlaW5n KyIv IHJlc3BpcmF0b3J5 IGNvbnZlcnRz IERlY2lzaW9u IGdyYW5kZmF0aGVy U21pdGg= IGFyY3JvbGU= IGhpZ2hsaWdodGVk aWxpbmVhcg== SXRhbGlhbg== KHtc KV1b LT0= Q29tYg== VlI= ZmF2 dmFj 6Jk= IGFrdA== b3JhdG9y IGJyZXc= IGVtbw== IGdhbg== dWxseQ== aW13cml0ZQ== IE51dA== YXBwYWJsZQ== Ymxlcg== SWRsZQ== IGltcGFpcg== IG1ldHJlcw== aWVubmU= IGRlcHJlc3NlZA== cmVkdWNlZA== IEtleXM= 5b2i IGNvbnN0aXR1dGU= 5bee ZXhwZXJpbWVudGFs TkFNRVM= 5qC85byP YW1hem9uYXdz IGtpbG9tZQ== Mzk1 RnM= VElUTEU= V2hldGhlcg== WWV0 bGFuZ3VhZ2Vz dGFrZW4= 56o= IHRhbmtz IHdhcnM= IHJlc2VydmF0aW9u IGR1bGw= IGdyZWV0 dGhy KCldLA== MDAxNQ== dW1ibGU= IEFXUw== IERS IFJ1 IGNvbXBpbGF0aW9u c2VudGltZW50 IGVuZHBvaW50cw== ICZc 44GN UmVzaXpl T0RZ IGlkZW50aWZpZXJz 5YW4 IOyX IHByYWN0aWNhbGx5 IGV2YWx1YXRpbmc= 6YeR IHRvcnJlbnQ= IExpbmtlZA== IEl0ZXJhYmxl IHRyaWJlcw== RXN0aW1hdG9y JyY= SGFt SUo= UmVu UlVQ ZG9m Z29ucw== bGFtYg== cHBs IHNlY3RvcnM= X19bJw== IEJleW9uZA== IExFRA== IGNocm9tZQ== c2NhbGVy YXBwZW5naW5l IDMzMA== IG91dGJyZWFr IDQwMw== IEtheg== bG9hZHR4dA== NTU4 IHJlcHJlc2VudGF0aXZlcw== IGRmcw== IC4uLiw= IyMjIyMjIyMjIyMjIyMj YXBwcm92ZWQ= ICJ7ew== IHB1cmVseQ== XCI6XCIt IGJhdHRsZXM= IHRydW5jYXRlZA== LF0pLCc= RmxhdA== UUxpbmVFZGl0 queOrw== IGJ0 IGRhZG9z Y2xhbQ== IEJyYW5jaA== IFJpbmc= IEVsZWN0cmlj IHNocmk= IEtpcg== IG9iZXk= IGludHJv ZmxpYg== dm9sdmU= IHJldHJlYXQ= c2hvd3M= aWN5Y2xl IHBvcHVsYXRlZA== IGRlc2NlbmRpbmc= IGluc3VsdA== IGh1bWFuaXR5 UHJpb3JpdHk= IGxhdGVudA== IHN0aW11bHVz IEplcnVzYWxlbQ== IGJsZWVkaW5n IGFidW5kYW50 IHRhY3RpY3M= TUlTU0lPTg== UHJlZHM= R05V SmFy eWFsdHk= aW5jZXM= IHNwZXJt IGhpcmU= IDEzMw== IERi IExpbWl0ZWQ= IG9wY29kZQ== IGludGVycnVwdGVk TEVDVElPTg== aGVkcmFs IGFjcmVz aWtpbmc= cnVuZw== NjAz cGFydGljbGVz IFNoZWxs Y2l1bQ== UEVDVA== IHNob3J0Y3V0 IGluc3VmZmljaWVudA== IHBsb3R0ZWQ= IGVtYm9k IE1heW9y T0ZQ IHRvdWNoZG93bg== c3ltbWV0cmlj 6KGo56S6 YWR2YW5jZWQ= QU1FVEVS aXBwZXRz IGNvbGxlZ2Vz IHJpZ2lk IGxhcHRvcA== IG1ldGFib2xpYw== Ymll Y3J0 c3RyYWN0aW9u IGRhbmNpbmc= IEFQUA== aWZ0ZWQ= IE1pYW1p IEZhbA== IGt2 IGp1bg== IHByZWRz ZGlzY2FyZA== YXV0b3M= IGNhcGFiaWxpdHk= MzQ5 IFNvb24= QWRkZWQ= IHR3aXR0ZXI= c2hlZXRz IE5lZw== IHNwZWNpYWxpemVk IERFQUw= IGNvbWJpbmluZw== IE92ZXJyaWRl IFZvbHVudGU= IGVsZXZlbg== fTp7 5aSx6LSl Ymlh bWlnaHQ= bWluZA== 5p8= aW5lbg== IG5hcA== b3RpZGU= IFNL IHZhcw== IE1pcg== aHR0 XVtA c3VidHJlZQ== OTY5 IGF1dG90 bm5lbg== SE9X c2NoZWR1bGVk RmlsbXM= IFNjcmE= c2VnbWVudGF0aW9u IGludmVzdGlnYXRpb25z w7Fvcw== IDk5OQ== CgoKCgoKCgoKCgoKCgoKCg== IHBob3NwaG9yeQ== IEJyb29rbHlu IFBoaWxsaXBz 6L+e5o6l IHN1cnJlbmRlcg== Q2F0YWxvZw== RHk= SHVtYW4= UGll Um9jaw== YmFza2V0 c291cg== IO+/ve+/vQ== IHRlbm5pcw== cmV2ZXJzZWQ= IGRldXg= IGRlYnJpcw== Y2VwaA== IHZ5 IHZvbQ== IEZhbnQ= IFJOTg== IEdhcw== IGFyZW5h Y2hlbGw= dW5kYQ== IDE5NTE= Y2Nh IHF1YXJ0ZXJz IHVzdw== bGV0aWM= IFlvdXRo 5LqL aGlzdG8= IHNwZWN0cm8= IG1hcmluZQ== IGNoYWxsZW5nZWQ= IHNjaG9sYXJz IGNvbXBsYWlu IHNjcmFwZQ== c3RyaWRlcw== IHZpcnR1ZQ== 0LXQvdC40Y8= IE9wdGlvblBhcnNlcg== 44G+44GZ IEJodXQ= IGRpdm9yY2U= KHt9KQ== Q01T RnJhbg== R0FU aW90aWM= bmlh cnNwbGl0 neWniw== aXRhdGVk IGN1cmU= ID0iLA== IGZpcmVz aXNDaGVja2Vk IG5lcA== IGRlc2NyaXB0aW9ucw== IDEzNg== Y29uY2VwdA== IHByb2Jz YWNtYW4= aWJl IEtsZQ== IDE5MzU= IHNwYXJl IGtlZW4= VU5JVA== Zmxvd2Vy IE1vbnRl IGF1dG9tYXRlZA== UHJpdg== IGltYWdpbmVk YnVja2V0cw== Y2xpcHNl YnJva2Vy ZnJvbnRlbmQ= Y29tYmluYXRpb25z UmV0cmlldmU= 5rGf IHZhY3V1bQ== YWNlckl0ZW0= aW50ZXJwcmV0 YXJtYWNldXRpY2Fs IV0= UElE aUFn bmJy dGltaW5n 0JQ= 8JQ= IHRoZWF0ZXI= cm90cw== IGJvcw== dXJhbg== YXRhc3Q= IHJi IGFsdG9nZXRoZXI= IEJyb3dzZXI= IGV4cG9uZW50 IEV2YQ== dGV4dHJt IGFkbWlzc2lvbg== c3BhdGlhbA== YXJpdXM= IG5vd2hlcmU= bWF0aHNjcg== OTg4 IHN3YWdnZXI= aW5jZXRvbg== IGdvdmVybmVk IHR3aW4= IGJpb20= IEJ5dGVz eGltaXR5 IG1lZGljYXRpb25z IExvbmdzdHJlZXQ= IHJhaWxyb2Fk IGRlZmljaXQ= 6buY IGluaGFiaXQ= J2Bg UnVudGltZQ== VXI= YWlyZWQ= bVY= bXVu d2c= eGlh c3RpbGw= IGZ6 IHBuZw== IG1hdGVybmFs ZXRhbA== IElCTQ== IEh1dA== aWRlbA== IFVsdA== d2VhcG9u IGNvbGxhcHNlZA== IHBlcm1l IG1hbmlmb2xk ZmlsaW5n ZmlsdHI= OTk3 Uk9J YmVhbg== YmVjaw== IGltcGVyaWFs bW9uYXJ5 IERlYnVn U1NI QWRqdXN0 IGluZmFudA== IHNlbnNlcw== DQoJCQ0KCQ== QkxVRQ== IGRlcGljdA== IEhpZ2h3YXk= IGRlbW9uc3RyYXRlcw== 5qCH6aKY IEFuYWx5 IGF0dHJhY3RlZA== IHNoYWRvd3M= IGFiYW5kb24= IGh1bnRpbmc= 4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ IEVjb25vbWlj IGN1c3RvZHk= c2V0U3R5bGVTaGVldA== QW5hbHl6ZXI= IHNwZWNpbWVucw== Q3Jvc3NSZWZQdWJNZWQ= YXBwcm9wcmlhdGU= RklUUw== TWF0dA== TW9vdEJvdA== bG5n fS1c cmVuZQ== IGZ3 IGxhbWI= YWd0YWls cmlhdGU= b21hYw== KSkqKA== IGNsb3Ro IGNsYXVzZXM= YWtlcnM= aXRpb25lcnM= ZW5zZW1ibGU= IGh0dHBsaWI= KTtc IENvbGU= YXJtb3I= IGFydGlmYWN0cw== TG9ncw== YWlyZXM= IFBob25l TWFuYWdlbWVudA== IGdyYXBoaWM= ZnVsbGVybWQ= IHB1cnBsZQ== IEV4dHJh IEV4dGVuc2lvbg== eXRpY2tz INC40Lc= IGtpZG5leQ== 5b+F 4paE4paE 5L+u5pS5 IyUl VGF1 V2F5 Ym9uZA== Y2FzaA== Z3ppcA== c25vdw== xJs= IGFo YXRpdg== IGZpeHR1cmU= IGhy IGVlbg== Y2hhbmdpbmc= IGNvbmdy aWxldA== KCdcXA== Y29udmVyc2lvbg== IFdyZXN0 IDMyMA== IHVuY29uc2Npb3Vz IHNjYWZm IGZlYXM= NDQz Y3ljbGVz Z3Jlc3Nvcg== IGRlbW9jcmF0aWM= ZnJ1aXQ= IGRlbGl2ZXJpbmc= 546H 44GX44Gf 56uv IGFjY29tbW9kYXRl IFNQRUNJQUw= 5q61 U3BlY3Q= XV0pKQ== bmFw cGhl 2Ko= IF1b IHJld3JpdGU= aWRvbQ== IEFyYQ== IE5pZ2Vy dXBvbg== IEZyaWVk IEZpdHo= IHJhbmc= IERyYWZ0 aW5lbWE= IE9yYWNsZQ== IGNsaWZm IDwhLS0= IEtp IDE5MjU= IGRpc2NyZQ== UkVDVElPTg== UkVTRVQ= bmV2ZXI= cm9ucw== IGV0aGVy IGZsb2F0cw== IGRldmVsb3BtZW50cw== 0YDQvtCy eWxhbg== IGh1bW9y IEdldHRpbmc= UGVyaGFwcw== VkFMVUVT ZWxpdmVyeQ== IGF3cw== ZXh0cmFjdGlvbg== IHByZXZlbnRz IHByZXZlbnRpbmc= UEhB PXt9KTo= IGRpc2N1c3Npbmc= IGZyZWVseQ== IHN0cmF0ZWdpYw== IG1lbHRlZA== 7YSw IHRvYmFjY28= NzUw RHVwbGljYXRl TGll UG93 VmVyeQ== bGFj c3RlYWQ= aWNvcw== IGRvdHM= IGhpag== IGh3dGFjYWNz IGlQaG9uZQ== IFNyaQ== IHN0cmV0Y2hlZA== IE5hdGl2ZQ== IEZvc3Rlcg== IEhlbGw= b2Nhcg== aWJsaW5ncw== bWFpbHRv IHN1bXM= IMKp ZXhwYW5kZWQ= 5pyN IHByb21pc2Vz IHJpdmVycw== UmVhZHk= IGNvdXBsZXM= SUJMRQ== R3JpZExheW91dA== RGlhZ24= IHBoaU5hbWVz IGF0dGVuZGFuY2U= Q29uc2lkZXI= QWxsb3dlZA== RGV0YWlsVmlldw== KCcuJylb IHN1cnZlaWxsYW5jZQ== TWVhc3VyZW1lbnQ= VkVSVElDQUw= IHRvZ2dsZQ== RlBV TVY= T3M= UHVyY2hhc2U= dHJlYXRtZW50 emQ= 64I= IHB1bmNo IHPDo28= IG1pY2g= IHJlZGQ= IFNhbGU= IEZsbw== IExhbmU= IG1laHI= IEd1bGY= dmFsZW50 c2NyYXA= IEpT bXNyZXN0 IGNvbG9ueQ== Y2FsaWI= cm9wYQ== dW50YXJ5 IHN1bW0= c3VwcG9ydHM= ZGVubHk= IGV4Y2Vs IGluY2lkZW50cw== IGhhYml0cw== IEJyb3RoZXJz IHN3ZWF0 IGNlbGVicmF0ZQ== SHR0cFJlcXVlc3Q= IGhobGQ= IGRlZW1lZA== Z2F1c3M= IHBwZw== IGdhdGVz IEFyZW5h YW1vbmQ= IFJJR0hU IGNvb3Blcg== IFVTUw== IHJvc3Rlcg== dGltZWxpbmU= IDE5NTM= IHB5Zw== Zm9yZWNhc3Q= dGVtcHQ= IGV4cGlyZXM= IGNvcHlpbmc= IDE0MQ== IEJlYW4= IFN0ZXZlbg== IHJlbW92ZXM= UmVhZE9ubHk= QmFja3Vw IyMjIyMjIyMjIyMjIw== IEJlbmphbWlu R0ZS UmV0cnk= 0LjRgtGM d3JhcHM= Y2hhcmdlZA== IGFjY29tcGFueWluZw== PD8= TVNF Tlk= TkVS UVM= csOocw== 66c= DQogICAgICAgICAgICAgICAgICAgICAgICAg IGNr IHN0aXRjaA== IEJvcw== IG1lbHQ= IFVGQw== aWNoZXI= IGFkcw== IHVuZW1wbG95bWVudA== ICQu MTk4Mw== IHRyYXBwZWQ= dXRpbGl0aWVz IEFybWVu IGxhdWdodGVy NDQ3 IGdyYW50cw== IGFwcGVhbHM= QVRJT05T Z3VpZGU= 5b6E IERpTWFnZ2lv IGhvb2tz IGluamVjdGVk IE9seW1waWM= IFdpc2RvbQ== IERJU0NM IHZvbHVudGVlcnM= IG1hdGhlbWF0aWNhbA== IG1uaXN0 YXNzZXJ0SXNOb3ROb25l IG1hY2hpbmVyeQ== JSku Lys= QnVm SGE= U3F1 VGVsbA== aW5ncmVk IGJpc2VjdA== IGRlYWx0 dGhpbmdz IDAyMTEw cXVha2U= dXNpb25z YWNpZXM= YW50eQ== IFVucw== YXJpYW5z c2l6ZW9m IHVzZWxlc3M= IFF1YWw= IGF0dGVuZGU= IENvbnZlbnRpb24= IGJsZW5k IG1haW5zdHJlYW0= IGNvbXBsZXRpbmc= b2duaXRpb24= IHVuZG8= IFN0ZWVs RmxpcA== 5YyX cmJhbg== IHByb3RlY3Rpbmc= IGV4cGFuZGluZw== IGNhYmluZXQ= IGRpc2NpcGxpbmU= INeU1w== Z2V0RWxlbWVudHNCeVRhZ05hbWU= NDEx Pjo= R3JheQ== IGZsZWQ= IGJhcmc= IHN0ZXI= IHN0b25lcw== bnRoZXNpcw== IEFVVA== IENlbGU= YXBpbmc= aW1vcw== cXVpdm8= cGF0aHk= ZmlsZWxpc3Q= YXNzZXJ0Q29udGFpbnM= IHNlcnZv bmVhdGg= IG1pbnVz cGxheWVk IGRlY2lkaW5n VGV4dElucHV0 RGVlcA== c2FtcGxlZA== U3BhbmlzaA== IGNvbXB1dGF0aW9uYWw= b3NwZg== aG9sZGluZw== IGludGVycHJldGVy IGpvaW50cw== Q29sbGVjdGlvbnM= IFNjaGVkdWxl IHRyZW5kcw== cmVjb2duaXplZA== TU1NTU1NTU0= IEpvbmF0aGFu IGluaGVyaXRhbmNl KC4r Z3Jp DSAgICAgICAgICAg DQogICAgICAgICAgICAgICAgICAgICA= IGNvcmVz bWVzcw== aXNjbw== IHRocmVzaA== IFR5cA== YWdyYQ== IGlzbGFuZHM= IFNhdWRp dGVhY2hlcg== IEZhY3Rvcg== IHJoZXQ= IEhpbGxz YWxsYQ== IFN0YXRz IGludGVyc2VjdA== IHNoZWQ= aW50ZXJ2YWxz c29sYXRpb24= IGdsdXQ= TWFuYWdl TU9W IG9wdGlvbmFsbHk= IEdlcnRydWRl IEluZGl2aWR1YWw= IGJhZGdl IE5hbWVFcnJvcg== IGltbWlncmF0aW9u IGluc2VydGlvbg== IGZvb3RiYWxsZXI= 56e7 Ym9yb3VnaA== IGNvd3M= IEVsbGlz TmVnYXRpdmU= IGFiYnJldg== Q291cA== RnJhbms= R2E= TEFS UGFu UGxheWVycw== UkFE V0VC ZmF0 ZmV0 aGlsbA== aW5kZXBlbmRlbnQ= YXRpbGl0eQ== b3VzdGlj IG1waA== YXNnaQ== ICjigJw= IFRvYg== IDE0NQ== IHN0bXQ= YXBk aW1vbg== IE1vcw== KCIh b2NhcmQ= IEdyYW0= IEVhc3k= IHZhbHZl YW5rYQ== XVsv NjQ2 QWx0ZXJu b3JuYWRv IEFzc2lzdGFudA== Kig/ IGNvbnZpbmNl IE1vbml0b3I= IFN1Ym1pdA== IGNvbmR1Y3Rpbmc= IGV4cG9ydGVk IEV2ZXJ5b25l IE1hbGF5cw== IM68bQ== Qm9va3M= IHRlcnJvcmlzdA== 6ZSu IHRic3A= ZGV0ZXJtaW5lZA== IEVORVJHWQ== IFJvYmluc29u ZGlzY3JpbWluYXRvcg== 6buY6K6k LCQk MzAwMDA= Oyc= U2Vu bml0dWRl aGVh IGNvdHRvbg== IGZpc2hpbmc= IGluZmVycmVk IGx0 IElnbg== MDAyNg== IHZpZWw= IEdpcmw= IEVQ IGltcG9ydGxpYg== IDoiLA== bGlzdGU= IGRpc3Nl IFN0cmk= IGRpcmVjdGl2ZQ== dG9wbw== QXJt UEVH LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= UXVhZA== Kys6 aWptcw== ZGVjb2RlZA== IHV0aWxpemVk IOWv 6L65 IHNlcXVlbnRpYWw= IGV4cGxvc2lvbg== c2FsbQ== ZW5jcnlwdGVk enVvcmE= YXR0ZW1wdHM= IHBzZXVkbw== NTIw RXRh VGhlcg== ZnJlcXU= IHdlbm4= IGdlbnM= a2Vtb24= dXNr c2V0dA== YWNrZXI= IHJvY2tldA== SU5GUklOR0VNRU5U IDE5NTc= IG92ZXJ2aWV3 IG1pbmNlZA== eW5u Mjgy QUNDT1VOVA== c3RydWN0aXZl R2V0dGluZw== R2V0VmFsdWU= IGluaXRpYXRlZA== IGJyb2FkZXI= IGJyb2tlcg== IGZpZ3NpemU= 5Lus IGNhdmFscnk= dWVsYQ== IGludGVncmF0ZQ== IG11dGFudA== QVVUSE9S IERldGFpbHM= IM68TQ== IFByb2Nlc3Npbmc= cGhlcmVz IHByb3BhZ2F0aW9u U2FmZQ== IEF1c3Rpbg== YXR0ZW1wdA== IENMQUlN 5pi+56S6 LFxc LuKAiw== NDI5 VE9M Y2Fz ZWNvbm9t ZnBhdGg= Zml4dHVyZXM= bnRo fSY= 6aY= YWxsb2NhdGVk IHB3ZA== YXNpYW4= IHRvb3Ro IGhpZGluZw== IGlzY2hl IE1FRA== b3JtZA== YWNjdA== IEVkZA== cGFybQ== IEt1bHR1cmU= IDE5MjE= MDAwNg== IGVuZGxlc3M= NTU5 IGdyYXBl U2hvcA== SU1H IGRlcml2ZQ== IG1vY2tlcg== IHRhZ2dlZA== RnJvbUV4Y2Vs RGVjb2Rlcg== IENvbWJpbg== IGNvb2xpbmc= IENIQVI= IGxhd3N1aXQ= IHNlcnZhbnQ= INC00LvRjw== IGFyY3B5 IFNpbmdo KX0k Ljs= Smw= Vks= YWNvbg== YnJvd24= Ym1lc2g= cGVudA== dGlt dXc= INGP IHBpYW5v IGJyZWU= IG1hbnQ= dXJyYXk= IGzDpA== IHVk IFNwb3J0 YWJzZW50 IENhcHQ= IE1hc3RlcnM= ZW5kcG9pbnRz IExpdmluZw== IEhp IGNoZXI= IDMwMg== ZXhvbg== IGNsYW4= YXZhaWxhYmlsaXR5 U3Rvcnk= Z3JhZHM= w6ly IG1heGlt QVBF IGRpZXNl IHNlZW1pbmdseQ== IHN1YmplY3RlZA== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== ZWRpdG9ybWQ= IHN0ZWVyaW5n IGxpbnV4 IHBzeWNob2xvZ2lzdHM= U1JNRg== IENvb2tpZQ== PDw8PA== IGdlc3R1cmU= IGFncmljdWx0dXJl IGNsaW1iZWQ= IGxldHRyZQ== KVst MDIy Qmlucw== U3Jj U01UUA== WFM= Y29kZXI= ZmxleA== Z3Vl bXR4 ZW5vcw== bWVh IG5ha2Vk ZW50aW9ucw== IGdldw== aW1tZXI= IE5pY29s IFJ1Yg== IEdhbGxlcnk= c2NoZW4= IGFydGVy IGVuc2VtYmxl IDQ4MA== Z2VicmFz YXJnc29ydA== UmVxdWlyZQ== IHJlZ2FyZHM= YXR0ZW5k IFByb3RlY3Rpb24= c3RydWN0dXJlZA== Mjcy IGxvY2FsaXphdGlvbg== YWZp VHJhbnNsYXRl IENvbnRyb2xsZXI= YmVzdHBhdGg= IFBlYWNl PSIiKTo= cGVyaW9kcw== Li4vLi4vLi4vLi4v 5o6S RElTUExBWQ== IHB1Ymxpc2hlcnM= b2N5dGU= IGF2ZXJhZ2Vk IHNldmVudGg= ZG9jdGVzdA== IGluY3JlZGlibHk= IENSRUFURQ== IG5pbmV0ZWVudGg= TWlz UEVE VE9UQUw= c2lnaHQ= 67I= IHdpemFyZA== IGhhemFyZA== IFRY dmVyc2VseQ== IElnbm9yZQ== IENhc3M= IGRlZm9ybQ== J10ifSk= ZGVmaW5pdGlvbnM= IGFydGVyeQ== bm90aWZpY2F0aW9ucw== IENvaGVu IHNpeHQ= IHJhbmRvbWl6ZWQ= IHJlYXNvbmluZw== Q29tcG9uZW50cw== Y29tcGxldGlvbg== IGhvcnJpYmxl CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IENoYXJsaWU= 5bel IHVuaWZvcm1seQ== IERpc3RyaWJ1dGlvbg== a2VybmVscw== 0LXQu9GM IGNhdml0eQ== 5raI IGZsdWN0dQ== QmlsbA== anVuY3Rpb24= cno= ey0= YW5pbWFs ZWxsbw== IElzc3Vl IHll IGFsbG9j ZW1lcg== IGF0b2w= YXJkb24= Y2Npb24= MTk3OQ== IGFtaWQ= NjY4 IG1vbm9w Q0hBSU4= NDg5 IG1lcmNo ZHJhd2luZw== CgoKCgoK R2VuZXJhdGluZw== IGNvbXBldGVk VU1O TWV0cmlj UkVRVUlSRUQ= IGNvbnRyYXN0cw== 5oup 5byA5aeL QmV0d2Vlbg== IGRpcGxvbWF0aWM= IGFkdmVudHVyZQ== IFBob2ViZQ== 5rqQ KX17 Q2Q= UUljb24= cFQ= eHY= IGNlcw== IG5pdA== IGh1ZQ== IFNDb25z IElQeXRob24= IEZpdA== IG5vdGFibHk= IFJhY2U= IEdB YW5jZWxlZA== IEpPQg== PT09PT09PT09PT0= IDE5MzQ= c3Vicw== IGV2ZW5seQ== NzAz eGJtYw== IERlbGV0aW5n IGxpbmtpbmc= IHBvcHVw IGFudGFnb24= 5Yig6Zmk IHJlc3Rpbmc= VGVsZQ== QW5kUmV0dXJu Q29tcGFyZQ== c2F2ZXI= Lio/ IDsp IHJldmlzZWQ= IHBhcnRpY2lwYXRpbmc= IGVzdGltYXRpb24= IEV2ZW50cw== IHRpY2tlcg== IEdsYXNz SURERU4= U3RhdGljVGV4dA== IGNvbmp1bmN0aW9u UFVCTElD c2V0V2luZG93VGl0bGU= QkVSVA== Q0NU TFE= TGFyZ2U= ZnU= IHRvc3M= IGVjb2xvZw== IiIsIg== IG5vdGluZw== IHByb2dyYW1h IEdhcmQ= aWxsb24= IGxvdmluZw== bWluYXRpb24= IGludGVyZmVy SVRFUg== IHBocmFzZXM= Q09T QVBI MjYx cG9zdGE= Y29ycmVsYXRpb24= IGV2YWM= IEdlbw== IERlZmVuZGFudA== IGVwaWRl IERpc2FibGU= IGVuZ2FnZW1lbnQ= RVhURU4= IERldGVjdA== cHVycG9zZQ== RklMRU5BTUU= IGRpc2FwcG9pbnRlZA== 6YCJ5oup 7Yq4 Ol0pKQ== QW1i R3Rr Y2llcw== Y3VybA== bm9ydGg= c3lzdA== 67A= IG1vaW5z ICgoLQ== IGlzc3ViY2xhc3M= IFNhYw== IEN1 IHNlY3Vy IERvbWlu IFJvbGU= IHNob3dlcg== dHJ1bms= XSldKQ== aWdub3JlZA== YXZpYQ== IFZldGVy IG9uZW9mcw== QVRPTQ== YXdr IEhlYXQ= Mjcx VVNE bWF0Y2hlcg== UHljaGFybQ== IGFsdGVybmF0aXZlcw== TUFUQ0g= IEhlbHBlcg== IGNvbnRyaWJ1dGluZw== IG1pbWV0eXBl IGphY2tldA== IHViaXF1 IEFncmVlbWVudA== RHJpdmU= ZXVz aml0 cmF0aW9uYWw= dHVt aWN1cw== IG1vdGhlcnM= Y2htb2Q= IFNhbXN1bmc= IENZ IFBhZA== IE5hdA== IHJw YXNzaW5n YWNjaQ== SW52ZW50b3J5 IHNveQ== IDE5MTM= U1RE IHN1aXRz IHBlZWs= IFJlaWNo IGJyb3Ro IGRlc2Ny VEhSRUFE aW5jaWFs IGxvd2VyZWQ= aW5jbHVkZXM= bWVudWJhcg== IEFicmFoYW0= IGFwcHJvYWNoaW5n IGhhYmVu IGdhcmJhZ2U= c3BsaW5l IGZpcm1seQ== IE1vcnJpcw== UmVnaXN0ZXJNZXNzYWdl 0LjRgtC1 IGlsbHVzdHJhdGVk IGNvYWxpdGlvbg== IGRhc2hib2FyZA== IFBlcmZvcm1hbmNl IGN5bGluZGVy Y29uanVnYXRl IHNvcGhpc3RpYw== IEdST1VQ IEt1bHR1cmVpbnJpY2h0 JCIs MDMw QXJhYg== UG9k UGFnZXM= dGVuc29ycw== d2s= 2K8= c3TDvA== ZW5hcw== aWNpdA== IGR1bWI= IGRpbGF0aW9u IFRvbg== IGlzb3Q= IHZhZw== IFBlcA== IE11bA== YXNzbw== IGhlcGF0 IEhpbmR1 cHJvdGVjdA== IGNoYWlycw== b2Jl Zm9yZ2U= IFFBcHBsaWNhdGlvbg== IHt9Og== TGlzdGVu IGdlbmVyb3Vz YnJhc2th IMOi Nzc5 Q29uZmlnUGFyc2Vy w612ZWw= IGdyb3dz IHNjaGVtZXM= IEFwcGVsbGFudA== IFBhdGllbnRz QXNzb2M= IHJlZmVyZW5jZWQ= Ymlhc2Vz IHNwcmVhZHNoZWV0 IFdhbGxhY2U= IGNyb3NzZXM= IEVudmlyb25tZW50YWw= 5re75Yqg w610dWxv ZGVjbGFyYXRvcg== amI= DQogICAgICAgICAgICAgICAgICA= IGF5 bGV0ZXI= IGRsbA== IGVpZw== IEFB IEN1bHR1cmU= IFJVTg== IGNvbnRvdXI= YWRkSGFuZGxlcg== IHJvcGU= MTIwMA== IHF1YXI= YW5ubw== aWdodGVlbg== IGZldmVy NzU4 ZGlldA== IHR3ZW50aWV0aA== IHF1ZXN0aW9uZWQ= TmVlZA== 6ZmQ Klwq IEZ1bmN0aW9ucw== IGludGVsbGlnZW50 IHBpcGVz IHN0cnVnZ2xlZA== IGNoYW9z 7Iuc IERldmVsb3BlcnM= IHBoeXNpb2xvZ2ljYWw= IGvDtm5uZW4= IHJpZGljdWxvdXM= IG1hY3JvcGhhZ2Vz TWdy d2FuZw== xbw= IHRldA== IHRhbGU= bG92ZW4= IEFG IDIxNQ== IFByZWY= IHdoaXN0 IEJ1cw== IEJvZHk= IERyaXZlcg== IEh1 IEdsYXM= SU5JVElBTA== MzM5 IHBvbGxz NzU3 IDE4NQ== IGFwcHJvdmU= MDYy IHNlbnRlbmNpbmc= IGN1c3RvbWl6ZQ== 55S1 IC0tLS0tLS0tLQ== UHJpbWl0aXZl IGJlbG9uZ2Vk IHRyYW5zbGF0aW9ucw== IGFsdGl0dWRl IGVsZWN0cm9ucw== UHVibGlzaGVy Q2FuZGlkYXRl bXV0ZQ== bnJvd3M= cGxleA== c2Fy YWxpcw== aXRvb2xz IFBDSQ== IE7Do28= IEZU IFJhaW4= IEhleA== IGFic3Vy IEtvcg== OTky OTk2 IFVua25vd24= bm9vcA== IGdlbmVyYXRvcnM= IHN0YXR1dG9yeQ== IFsnXw== Z3JhbW1hcg== IHJldFZhbA== U2VxdWVuY2Vz ZGVsaW1pdGVy IHRyaXZpYWw= IHZpc2liaWxpdHk= IG9yaWdpbnM= IExldHQ= IHByb21vdA== IGNhbXBz UHJpbWU= IHRlcm1pbmF0aW9u IHJ1YmJlcg== cmVzb2x2ZXJz U2NhbGFy IGd1ZXNzZWQ= TGJs TGVl VG9nZ2xl VURQ V2lyZQ== YVc= ZWxlY3Q= eWNsZQ== cm9hZHM= cmF6 ICgoKA== IGlmYWNl aW50aGU= IHJzcw== IHJhdGVk bG93ZQ== IEp1bmlvcg== IHVuaW9ucw== UmVjb25zdHJ1Y3Rpb24= c2VudHM= IG9mZmxpbmU= RXhwcmVzcw== NjQ5 dHN2 NTUz S2V5RXJyb3I= IGVzc2VuY2U= VXBwZXI= IGRlbmlhbA== IGludmVzdG1lbnRz V2l0aENhbGxiYWNr ZWRpdGFibGU= 5Yqb IE1hdGlsZGE= IGNvbXBsYWluZWQ= ZWdncw== IGVuY291cmFnaW5n ZWxlbXM= IE9wZXJhdGlvbnM= 5pS+ IHJlbGF4ZWQ= IFNUQVRVUw== IGRlbGliZXJhdGVseQ== V3JpdGluZw== IGNhcnJpZXJz KSQk Q24= Tmljaw== Umlk U29jaw== VGk= Y291cnQ= ZnY= xZM= aGVuZA== ZXNpdHk= IG10aW1l YXN1cmVz IFN0bw== IFNwYXJr IHZlbmQ= IFB1c2g= IE1hY2s= IEpvaW50 aGVuZw== IHBhcmFk UmVtZW1iZXI= MTk3Ng== bWF4c2l6ZQ== IHN1cGVybg== IHJldHJv OTAz IHNsaWRlcg== aGFuZGxlcw== IGFjdGl2aXN0cw== OTQz aW5zdGFudA== QXNpYQ== IG1lcmdpbmc= UmVwbw== IGltbWlncmFudHM= UFJFQw== IGJpbmRpbmdz IGJlc2lkZXM= c2VwYXJhdGVk IGFsbGVnZWRseQ== RklFTERT IHNpbXBsaWZ5 IGRlZmVjdHM= IExlbmlu IHByYWdtYQ== JCc= Qm9u UnY= VUE= V0FSRA== Y2FuZA== ZGljZQ== c2Rh aW5mZXJlbmNl YW5pYQ== bWVhbA== aW5naW5n IHN0cmF3 IFBCUw== IERK ZXN0YWJs IGNsYXJpdHk= IHRpbWVsaW5l IGRvY2tlcg== dXJsZW5jb2Rl ZGJn IG92ZXJoZWFk MTg2NTA= Uk9MTA== IGRpY3RhdG9y Njc2 RW5jb2Rl c2VyaWFsaXphdGlvbg== QXR0YWNr S0VZUw== IFBhcnRpY2lw IGluZmx1ZW5jZXM= IHByb3RlY3RpdmU= IHByZXNjcmlwdGlvbg== IHdvcnRoeQ== 4pST IEZpcmVmb3g= IHJlYmVscw== U1RZTEU= Iz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0= SEY= aHN2 c3RlbGw= aXR1cw== IHNpZ2g= ZXNw IG5vdXI= IGhzcA== IFR1 IFNleA== b21lcnM= IE5hY2g= Z2V0VmFsdWU= IEJhbg== IDMyNw== IHRpbWVk IHVwd2FyZA== aW5rbGU= JycnLA== NDUy QURNSU4= ZGlhbWV0ZXI= LCcl 0YHRgQ== b2duaXRpdmU= IHRyb3U= IHRvb2xraXQ= IHN1bmxpZ2h0 IGNhc3Rpbmc= YmVuY2htYXJr IGFtYmFzc2Fkb3I= IHN3ZXB0 IGVsZWN0cm9kZQ== IG1hcmdpbmFs IGludHJpbnNpYw== IHJhYmJpdA== aGF2aW91cg== IEZyZWRlcmljaw== U3dpZnRVSQ== RExM SG8= TWVs VkNBTEVOREFS V29tZW4= WGl2 Ymlz YmF5ZXM= dnJm fXt9 IHdhcmVob3VzZQ== cmFkbw== IFNURQ== aWZyYW1l cm9tYWc= IHJhdGlvbg== IEJpbmQ= IEJyZXc= IExpYw== IEx1a2U= aW5lYQ== IEV2b2x1dGlvbg== dmFsb3I= cGVybXM= IGNoaw== KS4iIiI= IGltZ3M= MTk3OA== IHN1YmRpcg== MTUwMA== IGFjdHJlc3M= YXdlZA== bm92ZWw= U3RyaW5ncw== Q29scw== QUdH IHByZXJl MzQz IEFkdmVudA== c2Vzc2luZw== IHBoeXNpY2lhbnM= b3NwZWw= IGNvbnRyYWRpY3Q= IHNoZWxscw== cGVha2Vy U2x1Zw== IHNwb3R0ZWQ= IGluc3RhbnRseQ== RmluaXNo IGVudHJlcHJl IGFzc2VtYmxlZA== IOWwhg== QXo= Tlg= UG9zZQ== U3lu bms= d2F2ZWxlbmd0aA== ZGV6 IHBuZXVt IGRvcm0= ICgj KCkv IEF1ZGlv b3BsZXM= CgoJCQkJ IEZyZWVkb20= IFJpYw== IEdhcnk= b3V0Z29pbmc= IE9C ZXhjbHVzaXZl UmVzZWFyY2g= IHRyYXZlbGVk IGNvcnJlbA== IFByb3h5 QUNT IHN1cmdl cmljdWxhcg== UGx1cw== Y21kcw== IEF0b20= IG1pc3Npb25z IENocmlzdG9waGVy Q29ubmVjdGVk IHNpZ2hlZA== IExhdXJl cHJvdmlkZWQ= IFBvcnRsYW5k IHJhZGlhbnM= IHNwbGFzaA== IHJlbnRhbA== ZGV0ZWN0ZWQ= IGFwcHJlY2lhdGVk IFBlcnJ5dmlsbGU= dHJ1bmNhdGVk RXBpc29kZQ== IENhYmluZXQ= IG15c3RlcmlvdXM= 6ZO+5o6l IFBhcmxhbWVudG8= QmFz Qmli TWFsZQ== UUZvbnQ= 5pCc hOw= aGVhZGVk IGFsdW1pbg== IC0u IEdsb2I= UkVQT1JU IG9zbG8= c3Vic3Ry OTk4 IFJlYWRlcg== YW1wdG9u IG1heGltYWw= PVso IGZhY3Rvcmllcw== QWxlcnQ= OTg2 Tm9pc2U= IGRhbw== bGF0ZW50 IGxvd2VyY2FzZQ== QVlFUg== IHJpZmxl T0JK IFNpbWlsYXI= c2NyYXRjaA== IGNvbnRpbnVvdXNseQ== IGNlcmVtb255 IHByb3NwZWN0aXZl IGFuY2VzdG9y IGFwcHJveGltYXRl 7Jy8 OicpKQ== Um95 U1JD amFj cG9wZW4= c2JveA== zrM= c3RyZWFtcw== IGZvbmQ= CiAgIAogICA= IGJvcg== b2xpbg== ICgoJw== IGZvcmc= IENBTg== IE1hZGU= IGVsbGlw IHNobw== aWN0aW9uYWw= IHVuY29tZm9ydA== cm93YXZl IF9fXw== UmVjdXI= UkVDTw== VGh1cw== cmFubw== NjY5 dGFibGVXaWRnZXQ= IHNsYXZlcw== IENsaW5pY2Fs w6Rs d2lubmluZw== IFRpbWVvdXQ= IHNpbGVudGx5 IGludmVzdGlnYXRpbmc= RGlzdHJpYnV0ZWQ= R0dHRw== IHRyYW5zZm9ybWVy aXNvZm9ybWF0 YXZpZ2F0b3I= IHZlbnR1cmU= IGludGVudGlvbnM= IGNlbGVicmF0ZWQ= IHBlcm1pdHM= IEV4ZWN1dGlvbg== IG94aWRl ZHJpdmVu 5Luj56CB LSI= XyUo Ym1w ZFg= aGllcmFyY2h5 amF5 cGls cmlsbA== dGVuZGVy eXU= IHh0 YW5vbg== bGV0dA== IGRyZQ== IGxpZA== dW1t IDI3MA== IEJhYnk= IEdD IHZhbGlnbg== IHByZXZlbnRpb24= IEt1Yg== U3RvcmVz bWF0cmljZXM= IG1pbmVyYWw= IHRyYWo= NjQz IHRleHRv IENvbnNlcXVlbnRseQ== MzU0 b3BlcmF0b3Jz IHNldmVyZWx5 TG9hZGVk U3BvdA== dW5jaGFuZ2Vk RmlsdGVycw== Qk9PTA== IGJlbmVmaWNpYWw= IENyZWF0aW5n 5pS2 b3JpZW50ZWQ= IHJvYm90cw== MTExMTExMTE= IHNoZWxm IGZhbnRhc3RpYw== IGF0dGl0dWRlcw== bW9sZWN1bGVz SGVu T2Rk VGlnaHQ= ZGdl Z2Nh cWk= ZGVjb21w ZGV2ZWxvcG1lbnQ= cm9pcg== IGJhc2g= IGVo IHN0YXlz KClbLQ== IFB1ZXJ0bw== IE5hZw== KSldKQ== YXNzbWVudA== IGFubmU= aXBzZQ== IHJheg== IGhlcml0YWdl IHN1YnVyYg== IGZsYXZvcnM= KCkpWw== MDAwMDAx IHRyYW5zaXQ= YWlyeQ== IGJsaW5r IFhY IGxhc3Rpbmc= IGRvbmM= b3ZlcmxheQ== ZnJhcHBl NDQ0NA== IGNydXNoZWQ= aWNvbmR1Y3Rvcg== TG9jYXRvcg== IFBvbGw= Ymx1ZXByaW50 IENvbmZpZ3VyZQ== 5b6q546v IHRhYmxlc3Bvb24= cGFpcmVk IFRvcGlj bWVldGluZ29sb2d5 5qih5Z6L IFdheW5l 6ZqP IHJlc29uYW5jZQ== d3JpdGVsaW5lcw== PSUo QkxF Q2hlc3Q= TGV4 TGF3 TU9U UElORw== V2F2ZQ== amV0cw== eWFob28= IGlvbnM= bGVlbg== IHBpcg== IGJhbm5lcg== IFRvd2Vy IE1BTg== ZW5kZW4= IEh6 IFdpbm4= IEdyYXk= c2hpZWxk YWN0b3Jz IG5hbWVzcGFjZXM= IEthbQ== Y29sbGFwc2U= YmVlbg== 0L7RgdGC PVtdKTo= ZGF0YWxvYWRlcg== Q0hBTkdF Z3J1cA== ICAgICAgICAgICAgCiAgICAgICAgICAg UmVxdWVzdHM= IGNydXN0 Q29tcGFyaXNvbg== c2NoZW1hcw== UFJFVg== YXN5bmNpbw== RGlyZWN0b3I= IEFuZ2xv Zm9sbG93ZXJz 5qCH562+ IFBhbGVzdGluaWFucw== IHR6aW5mbw== IGFuY2VzdG9ycw== ZGVwYXJ0bWVudA== YnJpZ2h0bmVzcw== dmdn aXJlcg== IE1M IHJmZmk= IEJhZw== IEdPUA== IEdhcmRlbg== IFZpYw== Q29uZmxpY3Q= IHJlZ3VsYXRlZA== TGlzdEVudHJ5 c3Vtcw== IGltcGx5 dHJhamVjdG9yeQ== IHN1Y2Nlc3NpdmU= IENhbGVuZGFy TU9WRQ== IGhlYWx0aGNhcmU= ZGlnaXRhbA== IOWmgg== IGF2b2lkaW5n YmxhY2tsaXN0 5oql YWxnaWE= cmVjb2duaXRpb24= IHZvbHVudGVlcg== bWVudGlvbmVk IExlb25hcmQ= IGNvbnNwaXJhY3k= 6Lev5b6E IENlbHRpYw== IERFQUxJTkdT Q29uZw== TWljcm8= UXVhbGl0eQ== VWs= VkxD VmVjdG9ycw== dmlkZQ== d2ln d2lucw== IGFybw== aWNpb24= KCcuJyw= IGV4cG9ydHM= IFdhbmc= b3V0aW5n IGVucmljaA== dWRlcg== IEt1bg== IGRpc2c= MTk3NQ== YW5ub3VuY2U= IGludGVycnVwdA== VGhpcmQ= IEhlYXZlbg== IEhlYnJldw== IGFtZW5kbWVudA== IHBvbMOt IGJsb3Q= c3RydWN0dXJlcw== IG1vbml0b3JlZA== c3dhbnNlYQ== IHNvbHZpbmc= IFNoaXA= YmJpbmc= R3JvdXBOYW1l IG1lcmM= c2NyZWVuc2hvdA== IERlcHJlYw== IGNoYXJnaW5n 54mp 5q2k IHdyYXBz Y29tYmluZQ== IHBhZ2luYXRpb24= IFBvc2l0aXZl IHN1cnZleXM= IGNpZ2FyZXR0ZQ== IFBoaWxpcHBpbmVz IE5PTklORlJJTkdFTUVOVA== 0YPQvdC6 Lig= Pjs= TlBD UUk= U2l4 U2FsZQ== Zmlm aG9z xZs= DSAgICAgICA= ZGVzcw== Y3RpYw== ICcvLw== dXJpcw== IEFH IE1BREVSQQ== IERpYW0= IExhbmc= c2V0Q3VycmVudA== IEdU bWF6ZQ== b2JvZHk= cGhpbA== Y3JlYXRpbmc= SW52ZXN0 IDE5MjQ= UmVx U1RBTVA= IENocm9u cHJpbmNpcGFs Wzo6 IEFsZ29yaXRobQ== OTY4 IGlkZW50aWZpZXM= c3RhY2tvdmVyZmxvdw== RnJvbVN0cmluZw== IENPTVA= IHNvb25lcg== IFN5cmlh IFJlbW90ZQ== IGJpbmFzY2lp IE1vc2Vz IE1hZ2lj Y29tYmluYXRpb24= IENvbnN0YW50cw== IGlubm92YXRpb24= R2xvYmFscw== R0xPQkFM TmF0aXZl UE5H U3lzdA== 640= c3R5cGU= IGNhY2hpbmc= IHNsZWU= IHdvdW5kcw== IGluYWRl IGRjdA== b3RpdmU= IFRlbA== aXJ0ZWVu dXBsb2FkZWQ= ZXN0aW1hdGU= IEhhcnJp IFdhcm5pbmc= cGVybXV0YXRpb24= ZmZlbnQ= IHBhcnRl bG9naW5mbw== IGRpc2tz bnVtZXI= IHF1b3Rpbmc= IGludGVyZg== dGhlc2U= IHBoeQ== ODAy NjU2 IGhpZ2hsaWdodHM= Njgy IHN0cnVjdHVyZWQ= IGNoZXNz IHF1YWxpZnk= IGNhdXRpb24= ZGlmZmljdWx0 IGRldGVjdGl2ZQ== IHBvb2xpbmc= IENyZWF0aW9u IGF0dGFjaG1lbnRz IGluc3BpcmF0aW9u IG51Y2xldXM= IHNoaWZ0aW5n IEF1c3RyaWE= UGhhc2VyRA== IG1hdGhlbWF0aWNz Y2FtcGFpZ24= IG92ZXJsYXBwaW5n 6K6w5b2V cmVjb21tZW5k QVZB Rlg= R3Jvd3Ro VGljaw== dGJvZHk= IGZmdA== IHBheXM= IG9tZWdh IGJpcw== IGRq IGR3YXI= bG9zZXM= IHN0ZWxsYXI= IENGRw== aW50cm8= IFBhaXJz bWVudGlh IExhcA== IEhheWVz IEVkaXRpb24= IEVhcmw= dXJlbWVudA== PT09PT0= IFZlbA== YXJrZWQ= MTEwMQ== QVJR IFJleW5vbGRz IFVuaQ== dW5jYQ== Mjgz IHJlYWxpc2Vk IHJlYWxpc3RpYw== VXBkYXRlZA== Mzkz QnV0dG9ucw== aW52aXRl IGZsb3dpbmc= Q2FsbGFibGU= IE1lZGFs IENPTQ== IHN0cmlrZXM= YnJhY2tldA== IGhhYmU= w7xyZ2Vu 5bem QVJHUw== RGVzdGluYXRpb24= IGV4aGliaXRpb24= ZXN0aW1hdG9ycw== IG5ldXJvbg== b3JuZXlz PV8o QmF5 Xygi aGlk cnBu IGFq IHdhbGxldA== ZWRpdGVk IGxpbXA= IGRlcG90 ICgpKQ== IENyb3du IFJ1bGVz IGV4Y2x1c2lvbg== IGxldg== ZXhhbQ== IGxveWFs bWlucw== bWluaW1hbA== IFN0YWdl IHN1YmxpY2Vuc2U= IENob29zZQ== MDAwMDE= dmFsaWRhdGVk IHJldHJpZXM= IGF1dGhlbnRpYw== IGdsYXNzZXM= IGJpb3M= aW52b2tl IEhhcnJpc29u ICIpIg== IExPU1M= TWVkaXVt 5a2X5YW4 w7pu SU5TVEFOQ0U= IGZvY3VzZXM= dmlkaWE= Q2xlYW51cA== LSk= Q0lU RGF2ZQ== TWFyeQ== XS5f YcOnw7Vlcw== bGl0dGxl eWFrYW0= cm9pcw== Y2h5 IFRX IHN0YW5jZQ== IHN0YWluZWQ= IEFwb2w= IENoZXN0 b2RlcnM= IHJ1Z2J5 b3JkYg== b2JzZXJ2ZWQ= aWV2YWw= IFZhcw== IEtv c3RhcnR1cA== SUNB cHNm IGNhbGlicmF0aW9u IGxvbmdpdHVk IHRlbXBv RElTVA== IGRydW0= RXZlbnRQYXJzZXI= dHJhbnNmb3JtZXI= IHN0ZWFs IGV4cGxvaXQ= MTI1ODY= bWVtYmVyc2hpcA== IGFjY3VtdWxhdGVk IE1Qcw== QVRUUklCVVQ= ZGV0ZXJtaW5pc3RpYw== IGVsZWdhbnQ= 66as IHNsb3Blcw== IGNvdXNpbg== JyRc TXV0 VHJhbg== VmlsbA== Y290 Y29jbw== ZHBp bGl0ZQ== 4bk= IGNvcHM= IHRveQ== ICcpWw== aW1p IE1BUg== IEJyaWdodA== IExhYw== c2V0TWF4aW11bQ== IGNodXJjaGVz IGth IEtpcms= IGludHM= IGludGVyZmVyZW5jZQ== QUxL c3Vic2NyaXB0aW9ucw== IHB5dHo= IFdlaWdodA== c2lnbnVw IDIwNQ== w6FyaQ== YnVpbGRz IGRlc2lyZXM= IExvYWRpbmc= Qk9TRQ== IFRyYWls IGRlcHRocw== dHdpc3Q= IEV2ZW50dWFsbHk= aGVhbHRoeQ== IM68Zw== IFNhdGFu 5p+l6K+i IHBlc3Nv aW50ZXJwb2xhdGU= c2FmZXR5 RVU= V0s= Xycp ZmFi Z3g= aW9sb2d5 bGlmdA== cmZpbmQ= d29y IGZpZ2h0cw== IG/DuQ== IHNjbw== IGRlZ3JhZGF0aW9u ICgkXA== IGdk dWxlcnM= IE5CQQ== YXJ0ZW4= cmVzcGVjdA== IFVW IFZlcnM= IHNvYXA= c2l6ZVBvbGljeQ== JywnLQ== Q0hS IGdyYWRz YmJj 0YDQvtC6 IHNwZWVkcw== IEJlYXQ= ICclLg== IGxpbWl0aW5n Q2hlY2tz Lilf TU9VU0U= UHJlZmVycmVk QWN0dWFs ZWRnZXFs IFN3aXRjaA== IExpYnlh IGZvaWw= QUFBQUFBQUE= IEFudG9uaW8= IHdvb2Rz IGNpdmlsaWFucw== IE1vZGlmaWVk IGdyYXZpdA== U29mdERyb3A= 5oyH5a6a IGV4Y2l0ZW1lbnQ= U0VRVUVOVElBTA== 4YCt4YCv In1c KV57LQ== Kj0= UlBT V0I= Y3J5 Y2dt ZWNj cGxlYXNl cmRm cm91cw== IG1tYXA= bXBlZw== cmFpcw== IGRlZHU= IFRha2Vz IENhcnI= c3NpZA== IFBhc3Q= Y2x1Yg== KCI6Iik= IFdBWQ== c2V0U2l6ZQ== IE90aGVycw== IGRvc2Vz dHlvcGE= bW92ZWQ= IFtdOw== d2FyZWhvdXNl IGNsZWFyaW5n IHNpbXBsZXI= RElN IFNveA== CiAgCiAgIA== IGd1aWxk Ym9va21hcms= R3JvdXBJbnZpdGF0aW9u IHNuaXBwZXQ= QXNzb2Np IGlsbHVtaW4= dHdpc3RlZA== IFBhcmtlcg== IEdyYWNl IHZpc3VhbGl6YXRpb24= IE1lcmdl Ym9ybmU= IGRpYWxvZ3Vl cmVjaXBlcw== IERldmls IGF0aGxldGVz IFVQREFURQ== IHBlY3VsaQ== MzEz Qmlhcw== bm9zdA== eGl2 bGVhc2luZw== ICN+ aW1kYg== IFBVQkw= IEZVTkNUSU9O IERpcg== IERhbm55 IFJTQQ== IEhQ IEdF YWRkQ2FsbGJhY2s= IEluc3RpdA== IGludGVucw== IG92ZXJzZQ== U0VDT04= IEV4cGVjdGVk dHR0 IHZlcnNpb25hZGRlZA== IHJlZnJpZw== dWJsaW4= 5Y+w IFBsYW50 Q0FN 44OV NDc2 UHJldmlldw== IGludGVybmFsbHk= TWV0cmljcw== dHppbmZv IEZyYW5jZXM= UEZKZXQ= IEZpbmFuY2U= 5LiL6L29 IFdhdHNvbg== RGVzaWduZXI= SmFwYW5lc2U= dHlvcGFpa2F0 Il4= NzY4 T3Bz bHc= bWFyZw== cFo= cmFua3M= IGF1Yw== cmVjdGlvbnM= YWxhbQ== YW5vbnltb3Vz IHBpc2k= IGln IHZpbGE= IHllYXN0 IEJvdHRvbQ== b3NoaQ== IEhpbQ== J119KQ== IGVsZg== dWdn YWt0 Y3JlYXNlZA== UkVQTw== IGludGVydmVudGlvbnM= QUxJ c3VidHJhY3Q= YXR0cw== IENvbnN0cnVjdG9y IDE1MDA= QWxyZWFkeQ== IHN3YXN0aWth YWx0aWVz IGRlbm90ZXM= Q2hlY2tpbmc= Y21W IHF1YWxpdGllcw== IFJlZ2lvbmFs dXJyZW5jZXM= IExPR0dFUg== RGV0ZWN0 IFdvcmtlcnM= V29ya2Zsb3c= IGJyYXZl Zm9sZHM= QXhlcw== IFN1cmZhY2U= TkVUV09SSw== IGZvcmVzdHM= 4KWH IHJvbWFudGlj IHN1cnByaXNpbmdseQ== IGxhZGllcw== IGhvcm1vbmU= TmVpZ2hib3Jz Jyo= QUFD ZGFnZ2Vy dHJpZXM= dGlueQ== xZk= IGRhd24= IGlPUw== IE5X dXBlcg== cXVlbA== dXNhYmxl IEdN IG91dGdvaW5n IGVucm9sbGVk IDQ1MA== IHNhdmVy bmV0cw== c2xhbnQ= IGVzbw== IElORk8= IGFudGlnZW4= IG9ianM= b2dyYXBoaWNz Q29tcHV0ZXI= SW5wdXRz RE9VQkxF IGFmZmlybQ== ZmFpbGtlbHVhcg== IHJhZGlhbA== IFBoaWxvcw== IHRocmVhdGVuaW5n RW5jcnlwdA== Tm90ZWJvb2s= IEZpbmFuY2lhbA== IHZpcmFs bmF2YmFy IEh1bnRlcg== IFBheW1lbnQ= IGFnZ3JlZ2F0aW9u 5aW9 IG92ZXJyaWRkZW4= KV97 MDQ4 RHJhZw== SElHSA== a2Q= fCcs IHBpcw== IG9pZA== IFNvY2tldA== X19b KCck IGV4b24= IGNocm9u IF8sXw== c2NvcGlj IHNoYXJk IDM2NQ== IG1haW9y cHJlZmVyZW5jZQ== Y2hlc3Ry IHJhc3Rlcg== IEluc3RydW1lbnQ= Q29uZA== IGluZHVzdHJpZXM= IGZvcm1hbGx5 IFByb3BlcnRpZXM= IDIwMg== MzYz IHRvcG9sb2d5 Mzky IGd1YXJkcw== IGdsYWM= IHZhcmllcw== UHJldmlvdXM= IElTTw== IHZpYWJsZQ== QmVhbQ== IHByaW9yaXRpZXM= IG9wdGltaXplZA== IHJlcG9ydGVkbHk= cGlja2luZw== dG9sZXJhbmNl IEJlbG93 IGNvc2luZQ== IG11cmRlcmVk U1RBVElDRklMRVM= 5rK7 IHByb2NlZWRpbmc= IFBvdG9tYWM= NjU1MzU= IGNyYW5iZXJyaWVz RklSU1Q= KS8v TElHSFQ= V2luZA== Zno= ZmdyYXBo aWF0b3I= and0 emFw t7g= cmVhdGVk c3RhcnM= ZW5hcmlv YWxpbmU= c2VsbGVy IGhpbnRz IGxvdQ== IGxpbmVk ICgr IFRhbg== IENl IGFzY2lp IHJ1c2hlZA== IERT IFJG IExpbWl0 IG1lbG8= IFdpbnN0b24= aXBheQ== cHJvYmE= IGppbmph Y2xhc3NpZnk= IEthcA== IDE5MTI= aGVyZW50 cml0b3J5 Il09 CgogCg== IGRhdG9z Mzgx Q29udG91cnM= OTU3 Y2xvc2VzdA== IHRyaXBz IHBvc2l0aW9uYWw= TG9nRmlsZQ== aW5zdGl0 Q29tcGlsZXI= IHBvdGVudA== V2l0aGlu IGluZmxhdGlvbg== R2Vvcmdl IGZyaWVuZHNoaXA= IFJFRw== IHByZWNpb3Vz IEFydGlzdA== IFBldGVycw== cGVyc2lzdA== IHNlcnZhbnRz IGluaGVyZW50 IEltcGVyaWFs IFJhaWxyb2Fk Um90YXRpb24= UEFDS0FHRQ== RGFuaWVs U2V2ZXJhbA== KyknLA== NDMw RU9G Ulg= anc= bmF0aW9uYWw= zpQ= DQogICAgICAgICAgICAgICAgICAgICAg IAogICAgICAgIA== IGJvcmU= IEJPVA== ID09Jw== YXJncGFyc2U= IHF1YXJ0 QUxDSA== bm90aWNl IHBvc3Nlc3NlZA== ZGZyYWM= Qm9vc3Q= IHNsYXNo VXNlck5hbWU= ODg4 IGRpc2Nsb3N1cmU= Y2hpbGROb2Rlcw== IFJlc3Bvbg== IE5vdGljZQ== IG1lbW9y bG9uZ2VzdA== c25pcHBldA== SU5URVJWQUw= Z29vZHM= cm9waGlj aGFiaWxpdA== IGh1cnJpZWQ= IHNob2NrZWQ= IE5vdmE= IGdlbnRsZQ== 4qyb4qyb4qyb4qyb dHJ1bmNhdGU= U2VwYXJhdG9y 5a+G56CB IEdhbGlsZW8= Rml2ZQ== VmU= Y3Jvbg== Y3Jt ZG5h Zm9u ZmVtYWxl bWludA== eW1s ICAgIAo= IFRpcA== IENvbGQ= b2RvYw== IDIyNQ== IERpZmY= c2V0TWluaW11bQ== c2Np ZXhlcmNpc2U= ZmlsZVBhdGg= 0LXQuQ== SUdvdnQ= VEVDVA== ZGltdW9u aW5jaW5n SXNyYQ== IGluZnJpbmc= IHBhc3Rh IFBvbHlub21pYWw= IE5PVElDRQ== IHJlY29nbmlzZWQ= T3ZlcmZsb3c= IHBlYWNlZnVs 54K55Ye7 IHBvZGNhc3Q= Q0xPU0U= IGZhdm91cml0ZQ== aWNsaWVudA== cnB0dGNJVElHb3Z0 cnB0dGNJVElHb3Z0RGlzdFRyYWRlVW5pdHM= MTAwMDAwMA== NDU1 Qm9yZGVy UUE= UmF0aW5n bWFydA== bm9j dGhlZA== aW52ZXJ0 aW52ZXN0 cmVwbGF5 YW5pZXM= IGZ1bmc= IHBhbnQ= IGJ1c3Q= aWxkZQ== KToj IEZpbGw= IEZvcms= IHJlc2lnbmVk cGVybHk= Y2hlbmQ= IEluc2lkZQ== IH19Ig== YXdtY2NsYWlu IGVudGVycw== YXppbmc= IHRlbXBz IERlYW4= IGV4cGF0 b3BlbldpdGhDYWxsYmFjaw== IHRhYmxldA== aGFzYXR0cg== IG5ldmVydGhlbGVzcw== bGV4ZXI= IOyL IHRlbmFudHM= aXBlbGluZXM= U3BlY2lmaWM= IGFybWllcw== c2V5YW0= IFBoeXNpY2Fs IFJlbGF0ZWQ= IHNwbGl0cw== IGNyb3Bz IEhhbWlsdG9uaWFu P18= QnE= RHM= U2lu U0VORA== WU9V Y3Vi Y2Vybg== ZHVy Z2lybA== bm9zZQ== dGll fT4= IAogICAg ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== aW56 c3RvbmVz IGZhcmU= CiAgICAgICAgCiAgICAgICAgCiAgICAgICA= IG9hdGg= IHJldmVycw== IG5vdQ== bXBz YWdsZXM= IHN0cmE= IHZvdWNoZXI= IE5VTQ== IEJvdW5k IGhlbGlj ZHVsZXM= IHBvb2xz IHN1YmNsYXNzZXM= IENoYW5nZXM= IGZlYXJlZA== NTAy Ymx1cg== IGRlY29kaW5n IG1vZHVsYXRpb24= aWFzbQ== IGxlc3Nlcg== ZGlzcGxheU5hbWU= 5a62 IGZ1bmVyYWw= TWVldGluZw== 5peP dW5kZXJncmFkdWF0ZQ== IHN0cmFpZ2h0Zm9yd2FyZA== 5rW3 ZGlhZ29uYWw= IHRpZ2h0bHk= IGV4cGVydGlzZQ== YXNzb2NpYXRl XSkpLCkp IERyb3BvdXQ= JSUlJSUlJSUlJSUlJSUlJQ== 6IqC54K5 R2V0WWF4aXM= QUxDSEVNWQ== Pycp U1BM am9obg== dGlsaXRpZXM= IHdhZ2U= aXNudWxs IGRlbGV0aW5n dGhyaXRpcw== c2Vycw== dGVyaW5n IHZpbg== IHNlYWxlZA== IE1J IE1lbGw= Iixc aW1lbQ== IFJhbms= IExhbg== IEhhbGY= IHN0cmFuZ2Vy Ym95cw== IG5vaXN5 ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg Zm9yZXN0 YXplZA== IGRvd25zdHJlYW0= IGxhc3RlZA== Mjkx ZGF0YXR5cGU= IHNsaWRpbmc= IG1vZGFs IGNlbnRyb2lk Rm9ybXM= IHNpbXVsYXRlZA== IDE0OQ== CgoKCgoKCg== Lios dGFic3RvcA== IFN0ZXZlbnM= IENvbnRhaW5lcg== IE5lYnJhc2th cGFkZGVk IOKGkg== Z3Vpbg== IFN1YmplY3Q= IEJhc2ViYWxs b3JnYW5pc2F0aW9u IENlbnR1cnk= TW9kYWw= VGVtcGVyYXR1cmU= REVTQ1JJUFRJT04= Uk5Bcw== KycvJys= IGR5c2Z1bmN0aW9u IGFic3VyZA== MDI2 SWxs UEI= ZHluYW0= bk8= 2Yc= IHN1bA== IGluY29uc2lzdGVudA== dXJ1 IDEzNw== dGh5 IHJ1c3Q= IHJwbg== ZnJvbXRpbWVzdGFtcA== IGNvbXByaXNpbmc= RU5P IHN1YnRyZWU= d2hvbGU= YWNoZWxvcg== INCS MzQ2 bnVtYmVyT2Y= cmV0dmFs IEJlY2s= TWFudWFs 0YPRjg== UGFydGljaXA= IGJyYWlucw== dnNpbWVt IHByZXN1bWFibHk= U2ltdWxhdGlvbg== IHNhdGlzZmllcw== IGJhY29u YmVsbGlvbg== IEF0bGFudGE= 5Y+R6YCB d3JpdGVGaWVsZEVuZA== d3JpdGVGaWVsZEJlZ2lu IHByb21wdGVk SUNPREU= IGN5dG9raW5lcw== T2x5bXA= V2w= dWVudA== IGZwcw== IHJlc2VudA== ICde IGhhdGVk IGVhcm5pbmdz IFRhbGw= IFNJTQ== IFB1bGw= cXVpeg== ZW5kZW50 YXNzaXM= IEJldGE= IHByb3Rlc3Rz IHNoYWRl Li5c IFV0YWg= PSIuLi8= cG9ydGZvbGlv IEt1 IDE5MTA= Q2hhbmdlcw== Y2VudHJvaWQ= bGllcnM= cGFja2V0cw== IElOVEVHRVI= 5Y+z IHVybG9wZW4= bGF0ZW5jeQ== IGFkdmFuY2Vz VmFsaWRhdGU= IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj IGVuc3VyZXM= R3JhcGhpY3M= IGJyYWNrZXRz cGVyY2VudGlsZQ== IHNhdGlzZnlpbmc= IGZsZWV0 IFN0YXJ0aW5n 566h IG5pbFJlYXNvbg== IGV2b2x2ZQ== IHR1YmVz IEJsb29t Sm9l bGNk b2lycw== IGNyb24= IGZyZWVk IHBvcms= IHBlbnNpb24= IHBhZGRsZQ== Y3RyZWU= IFNxdQ== cmltZQ== dW5yZWdpc3Rlcg== IEhlcm8= IGNodWNr cGFyc2luZw== YmVydGE= YXZhaWw= dGltZXBhcnNl IHNwcml0ZQ== aWVydW5n IHt9KS4= IHByaW0= Mjky IGN1cnRhaW4= IGdyYWRlcw== cG9saWNpZXM= IGxvY2FsaXplZA== IHBvc2l0aW9uZWQ= IHByb2JhYmxl Q0tFVA== RmVicnVhcnk= IFByaW1hcnk= IGV4dHJhY3Rz ZnJlZXpl YWNjZXB0R3JvdXBJbnZpdGF0aW9u IHJvbGxz aWdlbm91cw== 8J+M 7ZW0 UGF0aWVudA== IFBhbGVzdGluZQ== IGRlZmljaWVuY3k= IHByaXZpbGVnZXM= Pj4+Pj4+Pj4= eHh4eHh4eHh4eHh4eHh4eA== 5pmC UXVlc3Rpb25z IGJhdHRlcmllcw== QmVydA== SG9u SXNzdWU= W34= YnVzeQ== ZmlzY2Fs aW5hcw== IGNvY28= YXJ1cw== IGJhaWw= IGJyb3c= IGRlZmVuZGluZw== IFBpbnM= b3NvbWVz IEhpZ2hlcg== ZXh0ZW50 IHN0cmZ0aW1l c3BlbGw= IGFzc3VyZWQ= bmV5cw== VGhvdWdo ZW5zZW4= YW1wcw== NDA5Ng== Y2lzZWQ= Njg1 Njc5 IDE0Ng== IHVyZ2Vk c3lzdGVtcw== NTcx IEZsYWc= IE1pbmk= IGZyb250aWVy dnZ2 ZW5naW5lZXJpbmc= UGFydGlhbA== SUJJTElUWQ== IGxvY2tz IHJldmVhbGluZw== VVJFTUVOVA== dWZhY3R1cmVy QUlNRUQ= UmVtb3ZlRmllbGQ= TmFO QmlvZ3JhcGh5 dG91cm5hbWVudA== IEhlbmRlcnNvbg== Rm8= Y2VuY2U= dWxvcw== dWV0bw== eEM= IOeahA== bWVtYg== IHJlYmVs ZWxvbmc= cmF2 IFNleQ== aW1hZ2Vu Z2V0QXR0cmlidXRl b2N5dA== IFxcXFw= IEluc3RpdHV0aW9u IDE5Mjc= Y29udG91cnM= IFlpZWxk IGxvZ2ZpbGU= TEVBTg== IGNyZWF0dXJlcw== IGF1dHVtbg== aGFzaGVz UHlPYmplY3Q= w7Zu IERhdGFMb2FkZXI= IHN0ZGRldg== 5Lqn IEVsc2U= IGVkaXRhYmxl RmxvYXRUZW5zb3I= 5bGe IHRyaWdnZXJz Zm9ydHVuYXRl IGdhbGF4aWVz IHNuYXBzaG90cw== Q0FOQ0VM IEF0aGVucw== IOWmguaenA== TWlsbA== XSsn ZGlw cG50 IHRpbg== ZXJhc2U= cmV4 IGludmVydA== IGludmlzaWJsZQ== ZXR4dA== IGhvbGxvdw== IGVjYw== YWdvbmFs IHV2 IEFxdQ== YW5nbGVtZW50 Y2xpYg== KCIuLi8= c2V0Q2hlY2tlZA== YWxscw== IGFsbGllcw== IHBhcnM= IHN1YnR5cGU= bG9ja3M= IHNwZWNz IFVuY2xl Mzgz UGx1Z2lucw== T25saW5l IHBpY2tz IGRlbW9s IHNlbGVjdGluZw== IEJhcmJhcmE= IHByZWZpeGVz IE1hdGhlbWF0 IFNwZWNpZmljYWxseQ== IFR3ZW50eQ== Y29waWVz IEphaGRv SW50ZWdyYWw= IFVzdWFsbHk= IGJyb256ZQ== IFZpbmNlbnQ= IGRpZ25pdHk= KX19 MDM1 SGFk SGludA== SWc= UG9zc2libGU= ZGZs bGs= IOi/lOWbng== ZGVzY3JpcHQ= CiAgICAgICAgCgogICA= dXJt cmFpZA== IGdyaWVm IGdhbWluZw== IEFTVA== dW5jaGVz IEZQ IHJy aXplbg== IEJMT0NL IERvZGQ= IEdNVA== ZXh0ZXJu PSJf Y29udHJvbGxlcnM= IHBvZXRz bmVx IHF1YW5k IHRyYW5zcG9zZQ== IHZpZXdlcnM= IGNvbnN0cmFpbmVk IEFuZHJl Njgx In1dKA== IENvbW1hbmRlcg== IENPTlNFUVVFTlRJQUw= Q29tbWFuZGVy IOKU Lyou IFBPU1M= Q2VsbHM= 4pe7 ZGVjbGFyYXRpb24= IGNvbnN1bHRhbnQ= IFdpbm5pbmd0b24= IEFwcHJvdmVk IDotKQ== MDAzMDQ4 Qm9i V2lsZA== ZGViaXQ= LS0nLA== IG1vbnQ= IGhhc3Q= IGxhcg== IGRlY2U= IFNG IFN0eQ== dGhpbg== YXBwbGljYXRpb25z KCdA IFtf IHJqZQ== aXZpYw== IGNhbmNlbGw= AAAA IDE5MjI= IDE5MjM= IHBlcm11dGF0aW9ucw== UkVN ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= X3so IHRyYWdlZHk= IHJlbGllZA== d2l0aGRyYXc= IHNob3dJbmRlbnQ= Q09PSw== Qm9vdA== RVRB IHNsYWNr IElORElSRUNU CiAgICAgIAogICAgIA== dWNrcw== c2FtcGxlcg== IEluZG9uZXM= TWF0Y2hlcw== IHJlcGxhY2Vz IHNxdWFyZWQ= IGNhc28= cmFuZWFu IE1hcmdhcmV0 VE9PTFRJUA== IENvbGxpbnM= YWNjZXB0R3JvdXBJbnZpdGF0aW9uQnlUaWNrZXQ= 4pe777iP QnM= Qm9ybg== RnJhbmNl VVg= XV06 ZnV0 cGFwZXJz dVo= d29ydA== c2V2ZW4= IGh1bmdlcg== b3J0ZXg= KSwi YW1vdXM= IFBJ IE1Gbg== IE5W Y2xlcg== cGxpZXJz IGtlcm4= IHByZW1p IFZpY2s= IEts XVs6LA== IFdlYnNpdGU= IHNtdHBsaWI= IDIwNg== b2ZmbGluZQ== b25kZXJz IExldHRlcnM= UHJldg== aG9yaXpvbg== IGFmZmluaXR5 IFJvYm90 IG1lY2hhbmljcw== SW5kaWFu IGRyYW1hdGljYWxseQ== VmFsdWVzRW51bQ== IEV2YW5z IEZvdXJ0aA== IHBvc2l0aXZlbHk= QXNzaWdubWVudA== RmxleA== RkFMU0U= R2l2ZQ== S0s= U3R5 Zmlj bGF0dGljZQ== bWFnZW50 ZXJpYQ== IG1vbGQ= IHZpZQ== YW1pZGU= IFBz IE1hcmk= IE51bGw= IFJD PSIt IHhl UmVwbGF5 U1RJVA== YW5uZXM= MDAwOA== IHVuZGVybmVhdGg= SVNB IFNlbGVjdGlvbg== Y3ls IGltcG9ydGFudGx5 IHNuYWNr IEluZGlj IHlvdW5nZXN0 YmFuZHdpZHRo IEhlcmJlcnQ= IFByZXNpZGVudGU= IGFwcHJvcHJpYXRlbHk= IHRvdWNoaW5n IENhbGxhYmxl IFplaXQ= Q3NTb2Z0RHJvcA== IGRyYWdnZWQ= IE1vdmVtZW50 0L3Ri9C5 IFN0YXRpc3RpY3M= IGludmVudGVk IEFTQ0lJ IHRyZW1lbmQ= bGFkZXNo dWV0b290aA== LCw= MDQ1 R2l0 Sm9zaA== Um91dGVy bmFz dHVi 654= IHJlcGxheQ== IGRhbg== aWdt IFRPUA== IFNhbGVz IFNNUw== IE11bmljaXA= IEZvcmVpZ25LZXk= IHByb2du IGVsdA== IDMwMQ== YWRkb25z MTUzNg== IHRyYWl0 IDE4NjI= IDE4NjUw cnRvbA== IGxvY2FsaG9zdA== IGdyYXNw IHNob3J0ZXN0 IE1hcng= VGFibGVz RXh0ZW5kZWQ= IMOpdMOp IFBST0ZJVFM= IG5haXZl PXt9Ii4= TW9kaWZpZXI= 4YOQ IHN3ZWVw IGhhYml0YXQ= IENvbnN0cmFpbnQ= bm9ybXBhdGg= IHR1aXRpb24= 6rOg Y29tcGV0aXRpb24= IEJVU1k= IHNocnVnZ2Vk Qm91bmRz Q20= bHVj bXc= CQoJ cmVjbw== IHRoZWF0cmU= YXJtZWQ= aWNhc3Q= IG1hcHBpbmdz IG51ZQ== aWdp IFRyZWF0 IFNpY2s= dW1hcg== aXRodWFu IHZhbXA= IHZhcmNoYXI= YW1hcg== IEZF IHNocmVk IHByZWZz IEAi aW5kZXhlZA== YWNoZWxkZXI= IGltcHVsc2U= IDE2MQ== Q09OVEVYVA== IFVzZXJQcm9maWxl QWdhaW4= IGVxdWl2YWw= IHNuaWZm IFRpbWVzdGFtcA== UmVhZHM= IHRyYW5zZm9ybWF0aW9ucw== IHNwZWFrZXJz IG1hbnVmYWN0dXJlZA== cmVkaXJlY3Rz RVNQQUNF UGh5c2ljYWw= IENvbmZlZGVy IHJlbGF0w7NyaW8= IEFwcGVhbA== IMO6bHQ= U3ByaW5n 5pyN5Yqh Sm9icw== UlNB U1E= VmVycw== ZHlu eGlu fF4= 4ps= ZW5uZQ== aXRpdmVz IGNhdGFzdA== IG1hc3Q= IG10Zg== b3Rk IGdsaW1w IHVnZXR0ZXh0 IHN0b2No dGVlcw== b3Bw IFBhcA== IFBvcGVu Y29udHI= Z2V0Vmlldw== IHJlc2l6ZWQ= IGNob2xlc3Rlcm9s IDpdLA== c2ht LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= ICQs ICR8 IFZlbmV6 bGVucw== IHpvbWJpZQ== cmVnYXJk ZmVlZHM= IFNlcQ== Njg5 VmFsdWVWYWx1ZXNFbnVt 44KI ODU3 Q29tcGF0 dHhz IHN0ZHNjcg== Y2Ru dGV4aW5mbw== IGplYWxvdXM= IGNvbnN0cnVjdHM= IGV4ZWN1dGl2ZXM= RGVjaXNpb24= IG1vdW50aW5n IGV4cGxvcmVk IHBhaW50aW5ncw== VmlzaXRvcg== IG9yaWVudGVk IHJlY29tbWVuZGF0aW9u IGV0aGljYWw= 6Ziz 6L+Z5Liq IOS4reWbvQ== ICNAKw== QmFsYW5jZQ== Y2h1cmNoaW50aGU= Y2h1cmNoaW50aGVwZWFr MDY1 Sk9C TWFkZQ== Ung= U1o= Y2luZQ== bW1hcA== 16g= IGNhZ2U= YXJhYg== IGZvZw== IHBpbGw= IG1hbGlnbg== IHN0bw== IE1R IEZyYWN0aW9u dG9zdHJpbmc= amVjdG9yaWVz b3N0bw== Y3JlZHM= ZWFydGg= bWJsaW5n IGZ1bmN0aW9uaW5n Y2hlY2tCb3g= IGZvdW5kaW5n fX0nLA== IGNvbnRpbnVhdGlvbg== SUdFTkNF IGxpdGlnYXRpb24= IMKT IGlkZW50aXRpZXM= IEFsbGlhbmNl UHJlZGljdGlvbg== Y2FzdGxl b2Nob25k IEluZHVzdHJpYWw= IGVtYnJh IFF1YXRlcm5pb24= RmVi IOun TmV1dA== IHNvZnRseQ== fFwu dGVybWluYXRpb24= IHBhaXJlZA== SGVpZ2h0Rm9y IHJlamVjdGlvbg== IEN1c3RvbWVy c2F0aXNm IGdyYW5kZQ== IFBzeWNob2xvZ3k= IENvbnRpbnVl SW5mb3M= QklOQVJZ KyIs MDI0 UGFuZQ== U0NBTEU= VE4= d2hldGhlcg== 4oY= b25lbg== YW5lZA== YXRleA== IFNtbw== IENG IHZj IE1vbA== IHByb2NlZWRz IExhcmdl IGNvdmVuYW50 PSc8 IEtoYW4= RXJyb3JSZXNwb25zZQ== IHBhc3N3b3Jkcw== dW1wcw== Y29tcHV0ZWQ= ZGZu IENvbnNlcnZhdGl2ZQ== IGluZHVs YXV0b2M= bGlicmFyaWVz IDIwNw== Ij4n IFpvbmU= RGVhZA== IGhvbWVwYWdl dGZpZGY= IG1ldGFsbGlj IHN0b3B3b3Jkcw== 4YCA IEluZGlhbnM= IHRyYWNrZWQ= IOyImA== IG5lY2Vzc2l0eQ== ID8s IHNwbGl0dGluZw== YmFsYW5jZWQ= IEVudGVydGFpbm1lbnQ= IHByaXNvbmVy ZmZmZmZm IENPUFlJTkc= WkhJ IHRpZW5l cm92ZW1lbnQ= IHBsdWdpbnRvb2xz IE15U1FMZGI= Q0xVREU= IFRyaWJ1bmU= IHBob3NwaG9yeWxhdGlvbg== 5pCc57Si Kl4q QXN0 UGFz Ym9ucw== YmlsbGluZw== ZHlz Z3Jvd2luZw== IGFyb20= cmVwbA== YXRoZXRpYw== aXRhcnk= IGNhdXQ= IG9ncmE= IGR2 IHRvbGw= ICIiKS4= IENN dW5zZXQ= IDI2MA== IE1ha2luZw== KCcnLg== Y29uY2VudA== IE9yYW5nZQ== b2JyYQ== IEp1 SU5FU1M= IG1pbmlzdHJ5 bm9jaw== c3RvcmVk IHZhcmlldGllcw== ZXRoeWw= IGFkZHJlc3Npbmc= U0hPUlQ= U0RL IGFjaGlldmluZw== IGRlbW9uc3RyYXRpb24= IFdvcmtpbmc= IHBhbmNyZQ== 5p6Q IFRlcnJ5 VmVjdG9yaXplcg== IHNtYXJ0cGhvbmU= VW5zdXBwb3J0ZWQ= IHBzeWNvcGc= IGNvbXByb21pc2U= T1JJWk9OVA== IEFudGFyY3RpYw== SGVpZ2h0Rm9yV2lkdGg= VGVs V2Vk XCl9 Ymlj ZWVy Z29t aG91c2Vz c3RhYg== IGN1ZGE= bGVhZGVy IHBvdXJlZA== IGRhcmU= IGVqZWN0 IFNxbA== ICMi IGJlYXN0 c2V0SWNvbg== b250b3du SVRBTA== IFF1YWxpdHk= cmF3bGluZw== IHB5cHk= b2xlb24= IGF1dGhlbnRpY2F0ZWQ= ZnJhZw== QWxsV2luZG93cw== IGRldGVyaW9y IGRpZmZ1c2lvbg== cG9vbGluZw== b255bXM= IEZsaWdodA== aW1wbGljaXQ= IGhvcGVmdWxseQ== b3hlbA== INC/0LXRgA== IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IGVuam95aW5n VklTRUQ= cm9waHk= IHB1cnN1aW5n IGNvbG9uaWFs IHNhdWNlcGFu TWVhbndoaWxl IEVneXB0aWFu b2NhaW5l Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8= IFBob2VuaXg= Iy0jLSMtIy0= U3BsaW5l SEJ3Y0hCd2M= IEJlbGdpdW0= IEFtZXJ5 MDkw Q0FS U3VpdA== Zm91dA== 4YE= IGZ1ZQ== IGdo IGdlbQ== IGdhc2Vz IFNy IHN0YXJl IENF dW5kZWZpbmVk YW5kYXI= IEZv IERR IERvbmU= IG1lYWxz cGhvc3Bo aWNoaQ== IGNvbXByaXNlcw== d2Vhcg== IGludGVuZA== Oi8vJQ== aXNoZXJz IENoYXJnZQ== ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== dW1wZWQ= YXNoYQ== IHN5c3RlbWlj OTU0 cmljaGVk KV0pKQ== IENvbG9tYg== ZXhwaXJlZA== IHNlbnRlbmNlZA== IHF1ZXN0aW9ubmFpcmU= 5pyI 7J24 IGVkaXRvcnM= 0L/QuNGB IHdhcm1pbmc= aXp6YXJk IG1pUg== IGNvbmNlbnRyYXRlZA== IGNocm9tb3NvbWU= IEJvd2w= IGhlYXBx IE1pdGNoZWxs IGF1c3Np R2V0TmJpbnM= IERJU0NMQUlNRUQ= IEJVU1lCT1g= Lyk= Qk9EWQ== T3Jhbmdl V1Y= WFBBVEg= ZmF4 aGxpbmU= 7IY= bGVw IGZhbWU= IHBpdg== IG5hbWluZw== IGxhZGRlcg== KCl7 dW5hcnk= IGRlZmVuZGVy KCc8Lw== IHJpZ2h0ZW91cw== IGFsaWtl IEx1Y2Fz IEhS c2V0TGF5b3V0 IE9GRg== cG9uZGVy IHBhcnRpdGlvbnM= MTk2MA== MTk4MQ== IHN1YnNjcmliZQ== IGp1c3RpZmllZA== cHJpb3Jz c3dhcHBhYmxl SUxT SVBQUk9UTw== IFNldmVu UGxhdGU= Q09OTkVDVElPTg== VHJlZU5vZGU= IE1hcmxvd2U= UG9pbnRTaXpl XSspLw== IHNlbnNpYmxl Rmxhc2s= IHJlZHNoaWZ0 IGZpeGluZw== fS4kJA== YmlnZw== IGNsaWNraW5n IGRlcGFydG1lbnRz T1BUSU9O VGVybWluYWw= QlRO IEFsZXhhbmQ= bXVsdGlwYXJ0 IElyYW5pYW4= QWJzb2x1dGU= IGV4ZW1wbA== IFVudGls IGFudGljaXBhdGVk IGZydXN0cmF0aW9u IHNsZXB0 SUZJRUQ= RElTQUJMRUQ= IENoYWlybWFu 4oCs4oCs IEVTUE4= MzI1 U2F2aW5n a21z bW9ydA== bWljcm9zb2Z0 eEI= emVr w70= IHBlYXI= IHB1ZWRl IHNxdWVl IHN1cm5hbWU= IGJpbA== IGRpY2g= IGxpbWU= ICsr Y2xr IExpeg== IEdQUw== IEVWRU4= aWxsaW5ncw== IGtlcg== ICQoXA== SU5W Z3JhYmVy aWFuY2Vz IGJ1Y2s= IFJlZmVy IEJlaWppbmc= IENvbXBhcmU= UmVjaXA= IFNwZWNpZmllcw== IGZvbGRlZA== IEJsdWVwcmludA== RkZGRkZG 6LW3 IEZyaWVuZA== SGV4YWdyYW1z IHVuZmFpcg== cmVzaWR1ZQ== UHljaGFybVByb2plY3Rz IHNvcGhpc3RpY2F0ZWQ= ZGN0 Z2Vt bWVucw== bmluZQ== dmlw YXRyYQ== IHNwaGlueA== IFNFTQ== IHN0aXA= IENW IFBhdHRlcm4= IFsuLi5d IEJlYXI= YXJ0aWZhY3Q= c3RyYXRlZw== ZXhwb3N1cmU= SW5zdHJ1bWVudA== IHNjYW5kYWw= Zm9yY2luZw== cmVzc29y Z3JhZGluZw== IHVuZGVyd2VudA== cmlnaHRz IFVuaXF1ZQ== VG9vbg== R2V0dHlzYnVyZw== bGV0YWw= IGV4cGlyZQ== IHBhdHJvbA== IENsYXI= IGxlZ2FsbHk= dWth cmV2b3I= c25tcA== IFByZXNlbnQ= Q2FsY3Vs IEFiaWxpdHk= bmVzc2Vk IFBlYWs= IGhhcm1vbnk= IGF3YWtl IGludHJvZHVjaW5n R0xJR0VOQ0U= IFNpbXVsYXRpb24= R0ZQ IGRvdHRlZA== Q29tcGxldGVk IHR1bmluZw== IEVsZW1lbnRUcmVl Y29sbGVjdG9y IFBBWA== Q3JlZGl0 IHJldm9sdXRpb25hcnk= dnhsYW4= IHRoZXJhcGllcw== 5rC0 6K+75Y+W QmVhcg== RUs= TG9z V3JhcA== XCI+ YWFj dmF0dXJl IHRlbmRlZA== IG96 IHJlYXNz IG5lbQ== IGlQYWQ= aWdhdGU= IEFCTw== IGNvbmc= KCcr dXB5 IFJhag== YWNldA== IHVuaXR5 dHlwaW5n IFZpdA== IGZpbGVvYmo= IG9ic2VydmluZw== UkVBTA== IHNoZWVy IHRyYWRpdGlvbnM= cm9uZXM= IGNhcnJvdHM= cmljYW5l c2Vydm8= bW9kYWw= IEJlZWY= R3JvdXBCb3g= Q3JlYXRlSGlzdG9yeQ== QXRvbQ== RE9VVA== IHNlbGxlcg== IEFjdGl2YXRpb24= IGZpeGVz dHJlYXRlZA== ZGVzdHJveUFsbFdpbmRvd3M= Y2hhcnRz IHZhY2F0aW9u IHZlZ2V0YWJsZQ== aW5saW5lQ2FsbGJhY2tz IEhFQUQ= IHByb25vdW5jZWQ= IGVuenltZXM= IFdlbHNo IHByb3NlY3V0b3I= IHJlbGlldmVk cmluc2lj UHJvcGFnYXRvcg== 6ZqP5py6 Q3JlYXRlSGlzdG9yeUZyb21FeGNlbA== QlVT T3Ru ZWxlY3RyaWM= c3Vj aXRhdGlvbnM= IG3DtmdsaWNo IGhvbWlj dXJicw== Y2hvc2Vu IFRSQU4= IDEzOQ== IHVtYg== KCkq IElhbg== IEFFUw== KCch IEZyaXQ= b3Jlbw== IEVxdWFs IHhtaW4= ZmlnaA== Y2hlc3M= UkVESVJFQ1Q= dWxsaXZhbg== TEVU IGFzc2VydGlvbg== aW5zcGVjdGlvbg== MTAwMQ== dGFibGVhdQ== QUdUQw== ZG9p IGZpbmVseQ== IGZpbmFuYw== IGluc2lnaHRz UnVucw== IGZhcm1z IGNsb3NldA== c3RvcHBlZA== Y2hhbmljYWw= T2ZmaWNl Qk9BUkQ= UGxheWluZw== IGxsdHlwZQ== IGluZ3JlZGllbnQ= ZW5jcnlwdGlvbg== Y29lZmZz 64+E IGRlbGljaW91cw== ZWR1Y2F0aW9u b3NleHVhbA== R2V0WGF4aXM= IFRyZWFzdXJ5 Kz8= QmxvZw== RmFsbA== SnM= THVj UEFZ Ukc= YmF0dGVyeQ== Y2lw Z3Bs c2Fi dm9j 7Zk= bGVhdmVz IGZpZ2h0ZXJz IGJvZA== c2VsZW5pdW0= IGR1bg== bXBw IFNsZWVw dGhvdWdodA== YW1lcg== IE1hbm4= IEZN IEZpbm4= IEJhcms= IExpbmRh YWNpb25hbA== b2dvbmFs ZXhlbXB0 IGFicnVwdA== YWlsYW5k c3ByaXRlcw== IGVudGVydA== YW5jaWE= IFppZWw= Mzc2 IGJyYXNz IGNsb3Zlcw== UFJPUA== KCctJyk= IFJvYmVydHM= IVtdKA== 6Z2e VmVydGljZXM= R1JPVU5E OyJ8 IHRvcnR1cmU= IHJlc2lkdWVz QWdncmVnYXRl IHJnYmE= LF0sWw== NDAwMA== RVBP UHU= UnNw Ymg= amY= cW4= d2Nm o7w= aW5jb3JyZWN0 aGV1bQ== aXRy IGhvdQ== aWRhbA== KCkiKQ== IEFW bHly IHNlbWlu b3BhdGg= b3BlbnM= b3BlbmM= IE1BUA== IERhbmNl VGhhbg== IGVuZEM= YWx0aG91Z2g= Y3ljbG8= IEJlaGF2aW9y aHlwb3Q= VkVSWQ== IHNpeHRlZW4= IE5ldg== IHNwZWNpYWxpc3Q= 5byC IGxhY2tlZA== IEZvcm11bGE= bnhPdG4= 5q2l IGxpcGlk IExpdmVycG9vbA== dGhlZG9jcw== SVVN SmFj Uks= Y2l0aWVz c2libGU= aXNtbw== IGluZXJ0 IG1i IHJlc2VydmF0aW9ucw== IGhhbHQ= IHN0YQ== YWJjZA== aW50ZW5zaXR5 IHNlaHI= b2RhbA== IE1pbGxz dXBsb2FkZXI= dXBkYXRlcg== YW5naGFp IEh1bGw= IEVBU1k= CgkgICAg dHJ1c3Q= IGNsaXBz 4oCZLg== IDE5OQ== IGNvbW11bmlzdA== IG92ZXJsb29r IHdvcmtib29r TmFtZU1hcHBpbmc= IENvYWw= IEZvcnVt 0LjRhw== IGNoZXF1ZQ== 5ZCr IGV4cGxvcmluZw== IHNhdHVy V05FUg== IGxhY2tz IG11amVy IFBhbGFjZQ== IGV4cGVyaWVuY2luZw== IHNjcmVlbnM= w7RyYQ== IGxpY2Vuc2luZw== L3t9Lw== Rm9yZWdyb3VuZA== IFJvZ2Vycw== IGNvbnRlbXB0 UHJvamVjdHNMb2NhdGlvbnM= 6YGT IE5FR0xJR0VOQ0U= 7KCV IGJhbmtydXB0Y3k= Q29pbg== TENE UEFO U2ly U2Vw VmE= WUE= YW1wbGl0dWRl c29t flw= tpw= 15DX YW5vcg== IHNpc3RlcnM= IG5pdHJvZ2Vu ZXRpY3M= IGxpZ2h0ZXI= YWRvcmVz IFRpbWVy dGhh IGJlYWRz IGNvbmN1cnJlbnQ= KSk/ Y2xpYw== IFJhbmQ= IFJBTQ== KCJ8 IEhBUw== IHBsYW50ZWQ= bG93bg== IHVuZm9ydHVuYXRlbHk= IHRlc3Rlcg== Y2hldA== IHJheXM= UmVwZWF0 IGhlcm9lcw== IHNjYW5z cHl3 MTkyMA== IGNvdW50aWVz RGF0YUxvYWRlcg== IGNvcnI= IGNhbGNpdW0= QUNDRVBU IHNsaWQ= IHNvbHZlbnQ= c2t1 IGNvbmZ1c2luZw== Y2VsbGFuZW91cw== R2VuZXJhdGlvbg== UFNL TElCUg== IGNlYXNlZA== IERlcHJlc3Npb24= IENPVU5U cHV6emxl IGFycml2aW5n IHB1bG1vbmFyeQ== IGNvbWJ1c3Q= U29tZXRpbWVz IHdpbGRjYXJk eXl5eQ== IGljb25z cGl4YnVm IHN1c3BpY2lvbg== IEplcmVteQ== VW50aWw= IOS4reWbveaWsOmXu+e9kQ== T0lE Z293 bWlzdA== dmNm 2LM= IFRvbW15 IFNTSA== IE1pcmk= J11dLg== IGNvZWY= aW5kYXI= ZmlsZW9iag== IG9ic2VydmVycw== ICgnLw== IGNvbW1hbmRlZA== IGNsYXNzcm9vbQ== IGZlZWRz MTQyOA== NzU5 IHZvbGNhbg== aG9tZXBhZ2U= cGh5c2ljcw== YXJjZWx5 UkVTSE9MRA== IHNjcmV3 7J6F IFN0YW5mb3Jk IHBsdXJhbGl0eQ== IHByZXNjcmliZWQ= IERlcHV0eQ== RGF2 Um9sbA== U09SVA== aGlnaGVzdA== bHVz eXRob24= wr8= aW5jcmVhc2U= IGNhYmxlcw== YW5pdW0= IHN4 IFNjcmU= b3BzeQ== IERhaw== IExM IExhbWI= IilbIg== CiAgICAKCiAgIA== IGRpc3Bhcg== Y29tbWE= IHdvcmtwbGFjZQ== IHN1cHByZXNzZWQ= IHBlcHRpZGVz dHJhbnNpdGlvbnM= b3ZlcmFsbA== IGNhcnBldA== IGVzY2Fs cmVwbGFjZW1lbnQ= Njcz ICctJzo= Y2VydHM= IGFmZmVjdGlvbg== ICcpJw== IGNvbnRhY3RlZA== IHNraXBwaW5n aG9saWRheQ== IGFzdHJv IERlbm1hcms= IGluc3RpdHV0aW9uYWw= IFN0dWRlbnRz IHB1cnN1aXQ= IENvc3Rhcw== TGlucQ== IHBoZW5vbWVuYQ== IGlubm92YXRpdmU= IHRoZXJhcGlzdA== IGZlcnRpbA== T3JnYW5pemF0aW9u IHRhY2tsZQ== w7t0 IG9yYml0YWw= Jy4i KCcsJw== NDc0 QUlG Q3A= RlVOQ1RJT04= TWV4 UGFn V2lraQ== Y3VzdA== Y25z ZnVzaW9u bnZpZGlh c3Rvdw== IDEyMDA= IDE3NA== IDIxMQ== IGp1bms= IEpveQ== IEplbm4= YXJpb3Vz IGFncmVlcw== bGVzc2Vk Zm9ybWF0aXZl IGBc IHJlZ3VsYXRl RXhjZXB0aW9ucw== IHNlZWtz IFVuaXg= cmVjaWQ= IEFsaWdu IERlYWw= V2Vic2l0ZQ== cG9zdGFs IExlbw== U2hpcA== ZXhwaXJl IEhhcnBlcg== cmVwb3J0ZXI= IE9wdGlt Qk9P 0LTQsA== VG9rZW5pemVy cmVkdWN0aW9u IGVuZ2FnaW5n SmV0VGFncw== IHNvbGlkaQ== IHJlY3Rhbmd1bGFy IHRlbGVncmFt IGNvc20= IGNvbW1pc3Npb25lZA== Y2xvc2luZw== IEpvc8Op T1JJWk9OVEFM JF4= QWZyaWM= R0lT acOz bWFwcGluZ3M= eWF4aXM= 4ok= IOOD aW5hY3RpdmU= b25pYW4= IHBpbnM= IFNjYW4= bnRzdHI= IEFhcm9u IENyb3c= IFJhdGlvbmFs b3V0b24= IFVyYmFu IGFycm93cw== IEludg== cHJpbnRlZA== IGFzc2F5cw== IGludHU= IENoaQ== Li4uJyw= T1RP PVtb IEZvcmNlcw== c2lkZXM= IGVzcGVj IHN3YWxsb3c= IEJlYW5z YXV0aG9yaXpl IGRyb25l U2NvdA== IFBvbGl0aWNhbA== IE9ic2Vydg== IGNvbnZpY3Q= IEFjdHM= IG1pZGZpZWxk Qmxhbms= IGVuc3VyaW5n IG1haW50YWlucw== IG11bHRpcGxpZXI= IGVtZXJnZQ== IGFzdG9u d3JpdGVycw== IERhbmlzaA== IHN1cHBvc2VkbHk= IG1vcnRnYWdl aW50ZWdyYXRl QmFkUmVxdWVzdA== IHBlbGE= QXJjaGl2ZQ== IHF1b3Rhcw== IE9rYXk= Y29udGFpbmVycw== MDEyMzQ1Njc4OQ== KEA= QXJj UVQ= UUdyaWRMYXlvdXQ= U0VOVA== V2hlZWw= Wmg= YmFieQ== ZG9udA== bHVu dms= IGNyb3du IGJvcmVk ZXNh YWRj IHN0w7RyYQ== IHNlZGlt YXRob24= IERyYWdvbg== IFJhYw== IExW KCIq b2N1bWVudA== IEdQ IGVsYQ== IGNoZXJyeQ== IGtz IGrDoQ== IHZhbG9yZXM= IFZlcnQ= IHNwYWM= XVs6LQ== aWVycmE= IHRyYWJhbA== IGNhbGli IHJvd3NwYW4= IHBhdHJp IENvbW1lcmNpYWw= IHVyZ2U= IG1vdGlm ZW5uYXM= IHNlbGVjdGl2ZQ== QXR0cmlidXRlRXJyb3I= INGB0Ls= IEFudG9ueQ== IFJ1bm5pbmc= IHBhcmtlZA== IEN5Y2xl ZXJuZXRlcw== IFRpbW90aHk= IGFkZXF1 IGF6dXJl IGxlY3R1cmU= IGFkdm9jYXRl IFN0cnVjdHVyZQ== IHNwZWNpbWVu TWFydGlu IFBZVEhPTlBBVEg= IGN5bGluZHJpY2Fs acOpbg== d2VsY29tZQ== 0JU= bGV6 IHNuZA== IHNwaGVyaWNhbA== IHdhZ2Vz IGdldmVudA== Y2hpZWY= IDE0OA== MDAyMA== IENhdg== KSkr IGV4Y2VlZGVk c2V0bWludXM= YXN0ZXM= c2hvcHM= cHJlZnM= IHVuZm9ydHVuYXRl bWluZW50 c29sZXRl IDE5MTE= UmVhY3RpdmU= c3BpY2U= IHF1YW5kbw== IFFQ 44Gg IGRlY2lkZXM= T2JzZXJ2ZXI= U2VydmU= Z2VuaWM= SUxBQkxF IGJyYW5kcw== OTQ2 IGRpdmluYXRpb24= QXV0aGVudGljYXRlZA== IHRlY2hub2xvZ2ljYWw= UG9sbA== KSQnLA== U3RldmU= ZnJlcXM= Y29uc2lzdGVuY3k= IEVkd2FyZHM= UkVHRVg= YWNjZXB0YWJsZQ== IHdpbmRz IHNtb290aGluZw== IENsaWVudFJhd1Jlc3BvbnNl KCcvJylbLQ== IE1pY2hlbA== RGFlbW9u IGNvcnRleA== IENvbW11bmljYXRpb25z SUZJRVI= IEhhbXBzaGlyZQ== QXVzdHJhbGlhbg== aW5mbGFtbWF0b3J5 TEVUVFJF IHNpeHR5 MzE0 QXU= Q1g= RU1QTA== TG91 TmF0dXJhbA== UGVuZGluZw== amc= dWF0ZWQ= eWk= IC0tLS0tLS0tLS0tLS0= INGA0LDQ aW5hcg== IGFlc3Q= IHBhbnRz IHNvcg== ZXNwZWNpYWxseQ== IGhvcm4= IGRldGVjdGlvbnM= Y2hpZWQ= IFRyYWQ= IEFjdG9y IENlbA== dW5hdGVseQ== IFBlbnQ= XSxc a2V5cG9pbnRz IGFib2w= aW5rcw== aWdodGVzdA== IHJlZ2ltZW50cw== YmxhaA== IGNvdW50ZXJz d2hpdGVsaXN0 IGV2ZW50dWFs Y3Ny Q09VTg== Q2hhcmxlcw== aGFuZGxlZA== IMOh IGdyaW5uZWQ= c3VwcGxpZXI= VGVjaA== IGNhdXNhbA== IGVycmVk aGlnaHZvbHRhZ2U= IExvZ2lzdGlj YnJlYWtz 0LLQvg== RG9vcg== IFN5c3RlbUV4aXQ= cmFpc2Vib3g= IEp1c3Rpbg== IGJhdHRsZWZpZWxk Tm9ybWFsaXpl IG5pY2VseQ== RGlmZmVyZW5jZQ== IENPTE9S UmVjZWl2ZXI= IHByZXRlbmQ= IFVTU1I= SG91cg== SUxF UHNp UGljdHVyZQ== Zmxv cG1hdHJpeA== dGF0 dGV0 fV5c cmVwcw== IGJlcnJ5 aWNhdGVk IHJlbmFs IHJlbGVhc2luZw== IG51dHM= IGxhdGVseQ== b21v aW50ZXJu aW1lbg== IFBhbmVs IExpbmVz IEdvcg== IGNvYXJzZQ== b2JzZXJ2YXRpb25z cHJlY2Vk IHVuYXZhaWxhYmxl Jycu IHVzcg== MTg5NA== b3B0aW1hbA== YXppb25l NjYx YmFzZWRpcg== IDIwOA== aW50ZXJhY3RpdmU= 0LXRgQ== ZXJvaWRz IGdycA== IGd1aWRlZA== Y29uZnVzaW9u bGluZXNz IGhvc3RpbGU= IHF1ZXN0aW9uaW5n c21pdGg= bGVtaW5n IGVtcGxveWVycw== KS0o UFJJTlQ= aHJlcg== IFRyYXZlbA== IFJlbGF0aW9u IEVzdGFkb3M= IHN5bXB0b20= IGV2b2x1dGlvbmFyeQ== VHJhbnNmb3JtZXI= IHBvbGx1dGlvbg== IGNvcnJlc3BvbmRlbmNl UE9JTlRT IOWIm+W7ug== IEJyYWR5 LDosOl0= IFRlbGxpcw== 6YWN572u cHJvcGFnYXRl IEhhd2FpaQ== SW5kaWNhdG9y c3TDvHJt w7xyZ2Vuc3TDvHJt KHt9LA== MDMy Pik= Q3Jv SGF0 TG0= TWk= TW9uZ28= Tlc= aW5q IHRhdA== ZGV0ZWN0aW9ucw== IGJvYg== IHN0YWxr IEFwcg== IENhbmNlcg== Z2V0QWxs IGFub255bQ== IG1lZw== b3V0bGluZQ== IGNoaW4= IE9I IE9saXZlcg== IFZhbmM= IGNvbXBlbGxpbmc= MTI4MA== ZGVybg== IHN1cHByZXNzaW9u Q2hpbmE= IGJvaWw= VGhvbWFz QUxT cmVmaW5l DQoNCiAgICAgICAgICAgICAgICAgICA= NjAy IFByb2M= IGNvbnNpZGVycw== IHRlcnJhaW4= IDE0Nw== QW5jaG9y IEFkanVzdA== IFN0cmF0ZWc= IHNwZWNpZmljaXR5 IE1hcnNoYWxs cmFkeQ== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IHJpZg== Rk9SRQ== IGlycmVsZXZhbnQ= IGRhc2hlZA== dXp6bGU= aG90ZWw= KT8kJyw= IHNjcmVhbWluZw== Y29ycG9yYXRlZA== IEF1ZGllbmNl IGluc3RydWN0ZWQ= IHBzZXVk IHJlY3J1aXRlZA== IFdyZXN0bGluZw== IHBlY3VsaWFy LDpdLA== Q2FzZXM= SGF2aW5n U3U= eEQ= IAkJ aW5kZQ== IHRlbmRpbmc= IGFxdWU= IGNhbnM= YW5pbmc= IHBvZGVy IHBvcmRi c2VsbGluZw== IHN0dW50 cmlxdWU= ZW11 IEdvbno= aWxsYXM= IHNoeQ== IGxlbW1h cGhhc2Vz IGFyaXNpbmc= ZHVpbm8= dGhlcnBz IHsnXw== Q29uY2VwdA== X3t7XA== IHRyYW5zaXN0 c3VtbQ== IGdyb3VwaW5n e30u IFByb3A= IGluZGV4aW5n YWh1 dG9wb3M= IGN1cmlvcw== UGFyYWxsZWw= ZGVsdGFz 44KT UFJPRFU= IGN5dG8= IFRIRU9SWQ== IGNzdmZpbGU= cHJvZHVjZXI= aG9sbQ== UmVjdGFuZ2xl ZG1n IGlsbGVn IHdlYWtuZXNz IHNlZ21lbnRhdGlvbg== IGF1Y3Rpb24= IHNlbWljb25kdWN0b3I= IGFkbWluaXN0cmF0b3I= IGNvYXN0YWw= IHNoYWZ0 VHdpdHRlcg== YnVyc3Q= IGJyZWVkaW5n Y29ybmVycw== IGZvc3NpbA== R2V0TmJpbnNY Rm9vZA== SVNF Vmk= YXF1 bWljcw== IHRvdXM= IHNhbmc= IGluZGVm IGdyZWVkeQ== dWxlbmNl IENlbnN1cw== IGJlYXJz YXBwZXI= IHZpZGE= aW1pcg== IE5lcA== IEJyYWlu ZXJleg== IHByb3hpbWl0eQ== Jyl9 IGVsbGE= IGtvbQ== IGpheno= SU5MSU5F bG9naXQ= QVRP QVRFUg== IHN1Ymdyb3Vw KioqKio= dW1wZXI= b3BsZXZlbA== IHJlYWRpbmdz b2Nrcw== IHJldHJvcw== b3ZpZXM= Qm94U2l6ZXI= IEJveXM= w7xz c2ltcGw= VHJhbnNsYXRpb24= Kys7 dGljbGVz IGVjb25vbWljcw== IGFycml2ZXM= IEdyb3Vwcw== U1ZN 6L2m IEdhbGF4eQ== UG9wdWxhdGVk IFNVQ0g= IE11c2xpbXM= 54m55b4= IV8= LSw= NjEw R3JvdW5k TkFM VGlt Yml6 YnJlYWQ= bmljZQ== 66o= IHRpcmU= IG12 ICciJw== IFNhbHQ= dW1ibGluZw== IGNvbmR1 IExpb24= KCI+ KCJ+ b2JzZXJ2ZXI= CiAKICAgICAgIA== IGNsZXJr cHl4bA== ZW5jb2Rpbmdz IEhlYXZ5 IHJlbGllcw== DQoNCgkJ IHRyYW5zaWVudA== YXJuZXNz IGRvbm9y Q29udG91cg== QWxn dXNldW1z cmljdWx1bQ== ZXhwaXJhdGlvbg== IHNpZGViYXI= w6RuZw== IGVtYnJhY2U= IFBhdHJp IOuL IE1haXM= YXR1cmE= IENsYXNzaWM= IGdpcmxmcmllbmQ= IG1pc3Rha2Vu IHdpdG5lc3NlZA== IGNyaXNw YW5hbHl6ZXI= IG9ibGlnYXRpb24= ZXhwZXJpZW5jZQ== UmljaGFyZA== IGRlbGljYXRl RnJpZW5k c2F2ZXR4dA== IFNFUlZJQ0VT Iio= RWxlY3Q= RlNN UUJydXNo ZmFudA== fSku CgogICAgICAgICAg IHB1ZmY= IGRpdmVycw== IGdpYg== IFNlbnM= IE1hbGU= KCd+ IGFuYXJjaA== dXN1YWxseQ== IGltcG9ydGluZw== IGNvYg== IGtpc3NlZA== IGNvbnRpbmc= cHJlZmVycmVk IDU1Ng== bnVtdQ== IENoYWxsZW5nZQ== c3VidGl0bGU= SUNBVEU= IHN0YXRpc3RpYw== IHNtdHA= IDIwMjE= NjU5 cmVjdXJyZW50 KV0pLA== Y2lwZQ== 0L7Qvw== w61z 4YC3 IGluc3BlY3Rpb24= IGRlbnlpbmc= IHdhcmZhcmU= IHNpbXBsZWpzb24= bGltcw== IHJlbWluZGVy c3VyYW5jZQ== IGRldGVjdGluZw== IFdlYkRyaXZlcg== IHRocmVzaG9sZHM= IGR1bXBlZA== 6aG5 IFB1cnBvc2U= IG5vbWluYXRlZA== IHRyb3BpY2Fs IHByZWp1ZGljZQ== 54S2 IFdpa2lwZWRpYQ== Lns= PTw= Q3U= Rm9sZA== SWs= a2Vk eWQ= 4pw= IHRoZWZ0 bWVzdGVy IGhpbmQ= IGxhbg== IGdyaW0= IFNvbnk= dGh5bA== YXB0aWM= IE1S IE1Z IERyZWFt IGhlYWw= IHJlc3BlY3RlZA== YXZvaWQ= IHByZWFtYmxl IHVuc3VwcG9ydGVk cmVhZHRoZWRvY3M= MTkwMA== IGZsaXBwZWQ= RXhj IFplbg== IDE0Mg== Z3lybw== IGNydWRl TWFuaWZlc3Q= UVVG IFBlcmZ1bWU= IGluZm9z RE9DVFlQRQ== X19fX19fX19fX19f IEFzc3VtZQ== TWF4UG9vbA== 5Y67 IGxpYWJsZQ== IGR1bXBz IGZpYmVycw== 5YiG57G7 IEVuZ2luZWVycw== 5rKz IG1vbGRlZA== IERFU0M= INGH0LjRgQ== IM+J IOKJpA== bW9sZWN1bGU= IExhcnJ5 bGFyZ2VzdA== 4peP4peP cHVuY3R1YXRpb24= U2x1Z0ZpZWxk IHVuY29tZm9ydGFibGU= OTYw REs= U2tpbg== VVU= WEw= amluamE= IGZvbg== IGJ3 dXJvcmE= IGVnbw== YXlhbg== IHZsYW4= IE5CQw== IHJs IEJvbmQ= IEdI IEdhemE= YW50aW5l bWFjaA== IHBsb25l PSIuLw== IGNvbnRyb2xsZXJz MjU2MA== MzMx IGRpcmVjdGl2ZXM= YnJ1c2g= UE9M IGNvbmZpbmVk Nzcx cHJvamVjdElk IGh1bWJsZQ== IE1hcmN1cw== DQoNCg0K IMOpbA== IOuq TXVvbnM= IHBvcnF1ZQ== 5paH5pys IGNhbXBhaWducw== IGFjcXVpcmluZw== W117 SW5zdGVhZA== Q2hhbm5lbHM= IE1PREVM cHVycGxl IGFic29yYg== dmV0aWNh 5riF UmFzdGVyQmFuZA== IGNhc3VhbHRpZXM= IFBlZHJv IElOQ0lERU5U IGluaGFiaXRhbnRz SEFT V29s Y291dA== emFy IGx5cw== ICI+ IFRhaw== IFNJ aW50ZXJz IHNlY3M= Y29udm9sdXRpb24= JykoKQ== c2V0QnJ1c2g= cHJvcG9ydGlvbg== YXJndHlwZXM= aWJv b2JqZWN0aXZl Y2hlY2twb2ludHM= IHF1ZWVu bW9ucw== Q0hBVA== IGNoYXJt MzQy cmljYW8= IHJlZmVyZQ== YWZz IGRydW1z Z2Fl IGNlbWVudA== 7J2A IGxlc2lvbnM= 57qn IE92ZXJhbGw= aW5kZW50YXRpb24= c3VibmV0cw== bGlmZXRpbWU= IEFsZXhh 6LWE VE9QSUM= YmVhcmluZw== QVNDSUk= LiQ= Mzkw OTAwMA== TW9kZWxz UkFN U2V4 V2FzaGluZ3Rvbg== a2V0 ICAKICAgICAgICAgICA= IHRu cmVzZXJ2YXRpb24= aXRhYmx5 IHBpbmU= Y2hhcmQ= PT0+ IHlsYWJlbA== IE1lc3NhZ2Vz YW5ncw== J109PQ== IFdpZGdldA== aXZhbHM= IG91dGxldA== Y2VwdG9y IHBhcmlzaA== IEludm9pY2U= IDE5MDg= IHRyYWJh dGVtcGRpcg== YWhy ZmxvYXRY U2VydmVycw== MDQ0 Njgz Z29hbHM= IGFjdGl2aXN0 IHZhcmlhYmlsaXR5 IGZyYW5r IHZvbHQ= RnJhbWV3b3Jr IFVzZXJFcnJvcg== IGludmVzdGVk NTYy VHJhbnNpdGlvbg== 0YPRhw== U2VyaWFsTnVtYmVy 7J28 IFNFQ1RJT04= IElkZW50aXR5 dGF4b24= IGluaGliaXRvcnM= IERlbW9jcmF0 IE1vcm5pbmc= IFRlY2hub2xvZ2llcw== bm92YXRpb24= IG9ibGlnYXRpb25z IGRvdWJsZWQ= 54q25oCB MDQw U2F5 YmludHJheQ== ZWln dG9uZQ== 6Ig= aW5zcA== ZGV2ZWw= IHNpcA== IGJlcmU= IG11c3M= IGhm IHRob3I= IFRMUw== IFNvbGQ= YXBvaW50 IHZvdQ== IHZpdg== IDI3OA== IEJ1Zw== IEJyaWVm bWVudGF0aW9u IGV4dGVyaW9y IGhlbQ== IGhlYXRlZA== aWRlYQ== Y29sZQ== IHVuaWM= IGFsbGlhbmNl IFRodW5kZXI= MTk3NA== aXRlbWdldHRlcg== IHBhc3NwaHJhc2U= IENvbmRpdGlvbg== SW50ZXJlc3Q= Q09E IGVtcGlyaWNhbA== IHF0eQ== IExlYXZl Y21kbGluZQ== ZGVwZW5kZW5jZQ== IGVxdWl0eQ== bGVtZW4= IFJlZ3VsYXI= IFBhdGVudA== IEVYSVNUUw== R29hbA== QXZhdGFy IEVzdGlt IG9yZ2Fucw== KCc6Jylb IGZsZXhpYmlsaXR5 IG51dHJpdGlvbg== IHByb3Rlc3RlcnM= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IHZpZ29y IFVuaXZlcnNhbA== IElOVEVSUlVQ IGZhemVy IHByb2xvbmdlZA== MjEwMA== NTYw QmVz TUFS VmFscw== c2VtaQ== IGRhbmc= IGx1Z2Fy aWdyZWU= IGRlbWVudGlh bG9yZQ== IFNJWkU= dGhv IGNvbnNlcnY= KSkpLg== IEJhY2g= ZXN0YXRl IExJU1Q= dWJh b2NvZGU= IFwv IHRpbWVseQ== aWFl IFZpZW5uYQ== IHVwc3RhaXJz IHBvb2xlZA== IHNwcmluaw== IHNwaXJhbA== YXdhcmQ= IHph IG9iamVjdGl2ZXM= IGNvcnJlbGF0aW9ucw== ZGlzY3JldGU= IFpa IHN5bGw= 44Ki YWRtaW5z T3Jn c3Zj T0xVVElPTg== cmVzdHJpYWw= c2FpZA== Q2hlY2twb2ludA== IGNvbXB1dGFibGU= IGZvb3RhZ2U= bWlkdA== cGlja2Vy VGFza3M= IGludGVydmlld2Vk IGRyYWdvbg== VFJBTlM= dHVubmVs IFNUUklDVA== ZXhwcmVzc2lvbnM= IEJVU0lORVNT VkFSSUFCTEU= IEFUVFI= Iig= Pi8nLA== RmF1bHQ= SFk= SElTVA== VElN ZG9jaw== YXR1bQ== IGJhcnJpZXJz IHJlYnVpbGQ= IHJlc2VydmVz ICdd cmFjdGlvbnM= ICMo IENlcg== IFBDQQ== IE1hcHBpbmc= IGFub3M= IHByb2NlZWRlZA== IFJ1dGg= cmlibHk= IHBhcmFtZQ== ICgnJQ== IHBlcmNlcHQ= YXhlZA== ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IFtdKTo= IHBlZGVzdA== IHRyYXZlcnNl RXhjaGFuZ2U= ZGlzY2lwbA== bW92ZVRv NjYy IDE4NjQ= OTU2 0YLQ IEludHJvZHVjdGlvbg== Njg3 OTc5 IMK3 IHBvd2VyZWQ= IGdlbmVyYWxpemVk IGNlaWw= IGltcGxlbWVudGF0aW9ucw== IOWc IHJvdGF0ZWQ= IGV4YW1pbmluZw== IGJ1eWVy w59lbg== Y2F0YWxvZ3Vl aW90aWNz IHBlcm1hbmVudGx5 Z2VsZHM= IG1lbnRpb25z VEVSTkFM 8J+UtA== 5aKe IHN1cnZpdm9ycw== QmFsbA== Q2lyYw== VG91cg== WWVsbG93 c3VsZg== emllcg== 55+l cmVzZXJ2ZQ== IHNq IHNpbmM= IHRvcG8= IGV1cm9wZQ== aWdlcnM= IGdhaW5pbmc= dmVybg== IFNIQQ== IHZpeg== dW5jcmVkaXRlZA== IE1lc3M= IE1VU1Q= IC0o IERB IGV4Y2VlZHM= IEhhYg== cmVzYW1wbGU= J10r IFdS dHJhcw== IGNsYW1w IHJvYw== IGxvdmVy IG9iZXNpdHk= 77+977+977+977+977+9 IGRpc3R1cmJlZA== cmVnYXRlZA== KCgoKA== IEFybg== IGNvbnRpbmVudA== IGV0dA== IHNrZXRjaA== IGluaXRpYXRpb24= b3ZlcnZpZXc= IGF1dG9y 77+977+977+977+977+977+977+977+977+977+9 aGFzaXM= IDE0Mw== bmFpdmU= IGdlbm90eXBl IGZhcm1lcg== IG1hZ2ljYWw= IGJhcmNvZGU= c3RyZWFtaW5n Z2xhc3M= IHZpYWJpbGl0eQ== cGF0aWVudHM= RGVmYXVsdHM= CgkJCQkJCQkJCQkJCQ== IEFEVklTRUQ= IFByaW5jZXRvbg== UmVkdWNl IHBsZWFkZWQ= IHRyYXZlbHM= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t IGFwcGVuZGl4 bG9va3VwRA== IHdhaXN0 6aKR 5pSv IHJlc3BvbmRlbnRz IGNyaXRpY2l6ZWQ= IGFjY3VtdWxhdGU= IG51cnNlcw== IGluY29ycG9yYXRl IGRyZXNzaW5n IENhbWVyb24= IEhhbmNvY2s= IGRoY3A= IHJvdXRpbmVseQ== IG1lZGl0YXRpb24= IFBPU1NJQklMSVRZ U1RJVFVURQ== Jygt MDI4 MzQ4 NDAwMDA= Q29n RWR1Y2F0aW9u Rm91cmllcg== TWFsbA== Tks= Vm8= Y3Vl ZWNl emFu eyg= wq0= IC0tLS0tLS0tLS0tLQ== aW5mcmE= aW5idXJnaA== IGRhbm4= IGxpbmc= IGVpbmVz IFRyZWF0bWVudA== IDE3OA== IFNJR04= YW1vdXI= IEZ1bmM= IEJyb2FkY2FzdA== IFdlcw== c2NyZQ== IG91dHJhZ2U= IGNvbnRhbWlu IG5vdm8= cmVmbGVjdA== IGNvcnJv bW92ZW1lbnQ= IOKAkyw= IEFsYg== IG1hcmtkb3du IHN0ZXBwaW5n IHdvcmxkcw== 44K/ TGVhZ3Vl IMKm YWlzZWQ= IGRlc2Rl 5YW3 UXVpY2s= IGZvbnRz RmlsbQ== cmFndWU= IE9QRU4= ZmFpbHM= IGNvbGxpc2lvbnM= 0YHRgtGM IEJldHRlcg== IGFkdmVydGlzZQ== IFNESw== IHdpdGhkcmF3YWw= ZW5zdXJlbWF0aA== IGxlYW5pbmc= IHN1c3BpY2lvdXM= IGZlcnRpbGl0eQ== IENyYWln U3ludGF4RXJyb3I= IGVsYWJvcmF0ZQ== YXNzZXJ0TGlzdEVxdWFs IElOQ0lERU5UQUw= Q3VycmVuY3k= RnJl S2Vu UnVudGltZUVycm9y U29u dGF0aW9u IAogICAgICAgIAogICAgICAg IGFpcmVk c3RyZXRjaA== ID1c ZXN1cw== IGR3 IElF IENJQQ== IGJlYW1z IDIxMw== IDIzNQ== IFBPUw== IE1SSQ== IGFzc2VtYmxl IEJha2Vy dXNhZ2Vz IFJT IGhleQ== aW5lZQ== IEhhbmc= IFdF b3JkZW4= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== RXhwZWN0 SUxZ S2V5YnVr IDE1Mw== IHN5bWxpbms= IHBvcnRhYmxl TGVhdmU= TGVhZg== IFRvZ2V0aGVy IGRpbXM= IG5lZ2xlY3Q= IHB1cnNl IGNlYXNl IGN1bHR1cmVk UGFydG5lcg== R0JU QmxvY2tz V29ya3M= IGdyYW5kbW90aGVy YXBwZWFy IGF1eGlsaWFyeQ== IGJsZXc= IHJldHJpZXZpbmc= IHN0cmV0Y2hpbmc= IGVudGh1c2lhc20= 44O844K/ Y2p3YXRzb24= IGx1eHVyeQ== Sko= TEFT 2Kg= 658= aW5xdQ== aWNoZW4= IGRzaQ== IGxha2Vz YXRpb25XYXJuaW5n IFNvbGFy IFNvbGlk IENoZWw= IHNldWxl IGNvbnRlbXBs IHly IFBhdGNo IE5ITA== aWxsYXJ5 cHJvZ3JhbWE= IHNob2U= c2hhcnA= IGdldGFyZ3M= dWRkZXI= IHVuc3VjY2Vzc2Z1bA== IFZBUg== dGVzdGNhc2U= ICgnJyw= IG1hbmFnZXM= Q29uc3VtZXI= IHR5cGVkZWY= dG9ucw== CgkJCQoJ ZmVjaGE= YXpvbA== Q2x1Yg== b3JkZXJpZA== c2th IEludGVsbGlnZW5jZQ== IHBvcnRyYWl0 VU5DVFlQRQ== YWbDqQ== 5pWw5a2X IGNhdXM= IGNpcmN1bGF0aW9u IHZpb2xhdGlvbnM= bXV0YWJsZQ== cmVsZWFzZXM= IGJhbmtlcnM= c3RvY2tz IG5hdmFs V29ya2luZw== IHNjcmVhbWVk IGVhdGVu IFBSSU1BUlk= IE1vbnRyZWFs IFN1c2Fu 65Oc IG5hdmlnYXRl YW5jZWxsb3I= aGVtZXJhbA== VkxDRXhjZXB0aW9u IFBVQkxJQw== Xy0= ZmFz Z3Rl d2FyZXM= 0Jc= YXRybw== aXRlbA== IGZvcw== IHN1ZQ== IHdva2U= IHJlcHJvZHVjdGl2ZQ== IG5hZGE= YXNmcmVx IGRpYQ== aWRuYW1l IGRlc2U= KCki IHZvcw== YW1hdA== IFdpa2k= IHBsdW4= YWN0aW5n cHJlc2VuY2U= cG9uc29y MTIxOA== IGRpc3BsYWNlbWVudA== RU5DWQ== YXdpbGtpbnM= IHJlZ2lzdGVycw== IG9wZW5seQ== U2V0VmFsdWU= IEV4cGVjdA== Y2hlY2tpbmc= cGFydGl0aW9ucw== IDE4OTA= IHNsaWRlcw== b2xlYw== QW5ub3RhdGlvbg== Y2VydGFpbg== IGltbXVuaXR5 IGFuYWx5dGlj TUVOVFM= IGJ1ZmZlcnM= IHRhY3RpY2Fs cXVvdGFz IFRyYW5zbGF0b3Jz IGFiZG9taW5hbA== neWni+WMlg== IHB5Z2xldA== Ils= QlY= TmF2 VFJFRQ== YmFp am1w a3pldWc= cnVi c2lj c3BoZXJl fSU= aW5zdHJ1Y3Rpb25z IHRhcGVy IGFwbGlj YXJsaWVy IGluYWN0aXZl IG1pbmVz IHRvcw== IE5V IEZhbWU= IEJ1eQ== IERpcmVjdGlvbg== IEdpcmxz IHVuc3RhYmxl IDE5Ng== UmVncmVzc29y IHNjZW50 cmF3bGVk JywnLS0= RmlsZURpYWxvZw== YWhhbg== IEFsaWNl IEFsb25n SGVhdA== IGNvbnRleHRsaWI= bGFuZG8= ZGlzdHJpY3Q= IHRyaXVtcGg= Y29yb3V0aW5l cGVydHVyZQ== 4YC9 IHJlc3BvbmRpbmc= VEVSTQ== IHBvbGl0aWNhbGx5 UmVnZXhw IE1lZXI= IGhvcml6 U2NyYQ== Y2VsYW5k Y2Vsb25h IGZhc3Rlc3Q= IGNyaW1pbg== IGZlbW1l TURNRQ== c3BlY3Rvcg== 5p6E IGFjcXVhaW50 IGNpdmlsaWFu IEhhd2tpbmc= IERBTUFHRQ== IHByYWlzZWQ= IGJvbWJz KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg== IHJlc2Vydm9pcg== RXJyb3JSZXNwb25zZUV4Y2VwdGlvbg== Q3J5cHRv RG9jaw== RmFjZWJvb2s= SGFs Tm9ib2R5 ZG9sbGFy ZmlybQ== Z2FsbGVyeQ== 650= aW5jbHVkZWQ= cmVwb3NpdG9yaWVz aGVl aGVpbWVy IHdw IGluYWJpbGl0eQ== ICIuLi8= aWRhc2U= cmF4 IGVtaXR0ZWQ= cGVwdGlkZQ== IFNJRw== IEl2YW4= IENpcmNsZQ== c2VyaWY= IHltaW4= IFBpcGVsaW5l IEZseQ== IEJ1cmc= IGJ5cGFzcw== IGxlc2lvbg== IGphdw== IEphbWE= bmVhbA== IHN1YnBsb3Q= IHBldQ== IGJhY2tz IHJlZ2V4cA== VGVzdEFsbA== IGNvbnRpbnVpdHk= dGVtcHM= c2xh VVNB bGFuZG1hcmtz bnVtYmVyZWQ= IHVudGVy IGdydXA= ODg5 IFBhcmE= IDE3Mg== b2dyYXBoZXI= IGNyYXNoZWQ= IGZhY2Vib29r RFJBTQ== IGhhbGZ3YXk= IHNlcGFyYXRpbmc= UmVwdWJsaWM= IEtleXdvcmQ= KSsnLg== IEFjY3VyYWN5 ZW1iZWRkZWQ= UkFJTg== IGNpdGluZw== IGpvdXJuYWxpc20= SW5zdGFuY2Vz IENvbW1pc3Npb25lcg== V0VWRVI= UG9wdWxhdGlvbg== Pz8/Pw== 0YXQvtC0 IHRydWNrcw== IGNvbnN1bWluZw== ICNALQ== U21hbGxJbnRlZ2VyRmllbGQ= 0LDQvdC40LU= IGJyZWF0aGU= Ym90dGxlbmVjaw== NDE2 SXRz U2VuZGluZw== aHE= bGlh b3p5 IHNxdWVlemU= IG1hc3RlcnM= IGR1Zw== IGhhY2Vy ICInJw== cmlhZA== b3BhY2l0eQ== IDI4MA== IEJpbg== IEhvYg== b3V0c2lkZQ== IEVT IHJlc2lzdGFudA== IE9ORQ== XSkqKg== IEph cHJlYW1ibGU= IFZvcg== YW5uZXJz IGNvbW1pdHM= bWJs ZW5jaWw= aWVyYQ== IFJlZ3Jlc3Npb24= IFVuY29tbWVudA== IEV4dGVybmFs IGRhdHVt IGNoYXJpdHk= VFRUVA== RGVmaW5lcw== IE1hbnVlbA== IENvcmludGg= IGZvcmVoZWFk IGNhcmRpbw== Q3JlYXRvcg== IGlycmVndWxhcg== PScsJyk= UEFSQU1FVEVS IEJhY2tncm91bmQ= 8J+UtQ== RGVwZW5kZW5jeQ== MDAyNTkwNQ== aW94aWRl IGRpc2NyZXA= 8J+MlQ== Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t KWBg NDIy Njk2 OiIr P3xcLg== TG9u TG92ZQ== TVg= bmlk b2FyZA== 7Zg= IHRyaWJl c3RyYWlu aXRvcw== IHBu cm92 dXJpb3Vz IGxpcw== Jyx7Jw== IFNhZA== IENvb2w= IE5K IEJNSQ== IERGQQ== IFJhdA== IHNoaW5pbmc= ZXh0ZXI= cGF0aG5hbWU= ZmVyZW50aWFs cm93RQ== IDE5MDU= cHlsYWI= YXJjaGl0ZWN0dXJl IENoYW5kbGVy SVRDSA== IHJlcXVlc3Rpbmc= IFJlYmFy IG91cnM= aXRlcmF0ZQ== aXRlcnRvb2xz UmVzb2x1dGlvbg== c2xhY2s= IDE1Ng== Rm9ybWVy IHN3dW5n SW5kZXhNYXA= QXV0b20= c3RvcHdvcmRz IEZsYXA= IGJhcnJlbA== IGZ1bmNpb24= IEF0dGVudGlvbg== U3VwcA== IFRydXRo IGFybW9y VG9vbGJhcg== aW5ndWlzaGVk IGRpbWVuc2lvbmFs IFR1cm5lcg== 5Z+6 c25hcHNob3Rz IHRpZW1wbw== 4pmO IG1vcnBob2xvZ3k= IHZpdGFtaW4= IGpld2Vs RE9DVU1FTlQ= RGFtYWdl IHJoeXRobQ== IHVuaXF1ZWx5 NzE0 PSIp Tnk= UEVORElORw== am9z bGlmeQ== bm9s c21i dGRz IH5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+ aGV0ZXI= IHBpeG1hcA== IGJlZHM= IGhwYXJhbXM= IGll IGl6 IENlcnRhaW4= IERyYWc= IGNvYXRpbmc= b2JpbA== SW5zaWRl IDE5MjY= Zm9yY2Vz IGJ1eno= cmV0dXJuZWQ= bW9kZWxpbmc= YmVn IGFtZW5kZWQ= IGl0ZW1saXN0 IFhZ IDE4MDA= dGVuc2lvbg== R2V0UmFzdGVyQmFuZA== IEFuYQ== IGNvbm5lY3Rz RElP ODg1 RnJhbWVz w7N3 IENhcmxv IG9yZGlu IGZhc3Rh IG93aW5n IHBsZWE= IGFtYmlndW91cw== 6aKd IGNyb3dkZWQ= U2FtcGxlcg== XClcXA== d29ydGh5 44Oz44M= 4pmT IFVrcmFpbmlhbnM= U25hcHNob3Q= IGNlcnY= bXlzaXRl IGFsdW1pbnVt U2NvdGxhbmQ= LSo= R3Vlc3Q= V2l6YXJk w6s= IGF1bnQ= IGNyYXds YXJi IHB1aXM= IHNvcnJvdw== IGRu IGRvcA== ZW50bGV5 ZWxhc3RpYw== IGxhdg== cmFpc2luZw== IHN0YWI= IENhbWVyYQ== YXBpY2xpZW50 IHdoaXNr IGFudGhyb3A= IFJ1Z2J5 IFdpbmc= aXZlbA== IGpvdQ== cGhvdA== aWVr LS0tLS0tLS0tLS0tLS0tLS0tLQ== IDU1MA== IEtvcw== QUxQSEE= IFJlYXNvbg== IG9wZW5hcGk= IGF4ZQ== IHBhY2thZ2luZw== IGdyYXRlZA== IGluZmFudHM= NDYy aG9yc2U= IGluc3RhbGxpbmc= Z3JlcA== IGNvb3JkaW5hdG9y dmlvbA== IFJPSQ== IHV0Yw== IHdlYWtyZWY= Zm9vdG5vdGU= IHNhbml0eQ== IHByZW1pdW0= IG51Y2xlaQ== Y3JpdGlj RU5TSU9OUw== IEJhbmdsYWRlc2g= TWFyZ2lucw== IFJFQURNRQ== IGJydXRhbA== 5qOA IGdyYXZpdGF0aW9uYWw= 4puO dG9wb3NvcnQ= 54m55b6B 8J+UtPCflLU= 8J+MleKZkw== 4pmO4puO 8J+UtPCflLXwn4yV4pmT 8J+UtPCflLXwn4yV4pmT4pmO4puO I34= Likp NDE3 SEFTSA== XT09Ig== Ymxk YmlzaG9w ZW9z aHlu 6IQ= ZW55 ID0nLA== YXJhdA== IGZvY2Fs IHdt bWV0YWw= IGluYXBwcm9wcmlhdGU= IGJhcm4= ZWRp ZXRpdGlvbg== MDAyMg== c3NpcA== IEJyZWFk IGV4ZXJ0 IGV4dGVybg== IGhlbWlz IEphcg== IGhhc2hlcw== MTk1OQ== YW5uYWg= IHVzZXJpZA== ZXllZA== Z3JvdXBlZA== IDE4NjE= bGV0aWNz c3RvcmVz YnNk IGdyYW0= YmJpZXc= dWNrZWQ= aGVzaXZl 4paQ IDE3OQ== RnJvbUZpbGU= VHJhbnNs QXBwQ29uZmln bm9uY2U= Q1JFQVRFRA== IEFydGlsbGVyeQ== IGxhdGVuY3k= IGltcGFjdHM= IGNhcGl0YWxpc20= IENhbGxiYWNr IERldGFpbA== ZWxsZWU= MTMwNw== VHJr IHJ1Ynk= 7JqU IFNNQUxM IGVuaGFuY2VtZW50 IGRpcGxvbWF0 ZGVmZXJyZWQ= 6KOF VG9rZW5z c2FuZGJveA== IEt1bHR1cmVpbnJpY2h0dW5n NjAx QXNj UHJlc3NlZA== V1g= bnVn DQoJCQkJCQkJ c3R1YnM= ZGVjb252 IHB5bg== IFRlcnJvcg== IFNH IEFTUw== IEFib3Zl dW5hbA== X18nKQ== IE1vcnQ= aHRhZw== KSkqKg== IEJhc2tldA== IEhpY2s= IGVsbGk= IGtpbGxz PSd7fQ== SW5j RU5VTQ== IHN1YnN0YW5jZXM= IGxvZ2lzdGlj Y29uZmlndXJlZA== bmV3bGluZQ== QUdD SGVhcnQ= Y2lhcw== IG1ha2Vy 55qE5pWw5o2u Lici Zmlyc3RuYW1l IGRpZmZlcnM= IGZhcnRoZXI= IG1vdGl2YXRlZA== 5pWw57uE IEZsYXNo IGRlY2xhcmVz IHN0cmlwZQ== IFBvaW50cw== bWFsbG9j IHJpZGdl ZGlzY29yZA== 0YDQsNC8 PT09PT09PT09PT09PT09PT09PT09PQ== IEhPV0VWRVI= bWVhc3VyZW1lbnQ= bmV1cm9ucw== IGV2aWRlbnRseQ== IEdPT0RT IOyehQ== IGZvb2xpc2g= UGVyY2VudGFnZQ== IFZhcmlvdXM= IExPQ0FMSVpBVElPTg== IEplc3NpY2E= RU1QTEFSWQ== QUVT Qm9s R1VJRA== SWFt VmF1bHQ= eWI= c2V0ZQ== aXTDpHQ= YW5pYw== YXJhbg== aXNmYWN0b3J5 IG1pbnQ= IHJlcG9zaXRvcmllcw== IGRpY2Vk ZWxv ICIiKSw= IGVpZ2h0ZWVu cm9teQ== b3Bjb2Rl dW5q IFBJRA== IE5hbQ== CgoKCQ== ZXN0ZQ== IExTVE0= IFdhdmU= c2V0VG9vbFRpcA== IEdyb3dpbmc= cHV0VGV4dA== c2Nhbm5lcg== PScu IEtpZA== IHNjaWVuY2Vz T1JJRw== UHJvdGVjdGVk Y29tcG9zZQ== IGFzc2VydGVk IGNvbmZpZ3BhcnNlcg== IGZvcm1zZXQ= IGhlYWRsaW5lcw== PVtdKQ== TVBJ b2hs NDQ5 SU1BTA== IHByb2R1Y3RpdmU= NDc5 c3RhY2tlZA== IGRlc2lnbmVycw== cHVibGljYXRpb24= IGRlYWRseQ== RGVmYXVsdFNpemU= IG1pdG9jaG9uZA== IE9iamVjdHM= IGluc3RhbnRpYXRl IE5hdmFs IHZlbnVlcw== IGFjY2lkZW50YWxseQ== IE5hemlz RGVtbw== IGludHJhY2VsbHVsYXI= 44GL44KJ IGNvaW5jaWRlbmNl IE1hdGVyaWFscw== IFF1ZWVuc2xhbmQ= NTIy OyY= T0E= U29kaXVt ZmFjZWQ= bHhtbA== bm91 cXA= dmVsbA== IC0tLS0tLS0tLS0tLS0t IGZpZ2h0ZXI= IGJ1cmVhdQ== IGRlcmU= IGRlcHJp YWR0 c3Nv IFBpYw== IGV4cGVuZA== IExPUkQ= ICou IFVzZXM= IHByZXk= bGVkZ2Vk IGludGltYXRl Q2hyaXM= Q2h1cmNo IENob3Jlbw== IFFMYWJlbA== IG51bWJlcmVk IGluY2x1c2l2ZQ== RmlsZVR5cGU= IHNtb2tlcg== IHN1cmdlb24= c3RkY2hlY2tlcg== XV0pLA== aHlw IGxhbmRsb3Jk IFJlZ2lzdHJhdGlvbg== IHN0cm9uZ2VzdA== IHJlbW90 IEFjdHVhbGx5 IEJhcnN0b3c= ZmluYWxseQ== U3VwcG9ydGVk UFJJ SFRUUEVycm9y IHNlcXM= cmFua2luZw== IFNwZWNpZnk= YXBwcm92YWw= RW51bVZhbHVl IGVhcnRocXVha2U= R0FNRQ== IHBoZW5vdHlwZQ== IGZhdHR5 IGNyZWRpYmlsaXR5 IGF2ZXJhZ2luZw== IFNVQlNUSVRVVEU= IEdhYnJpZWw= IFBST0NVUkVNRU5U c3VtbWFyaWVz IERBVEFCQVNF bW9uZ29kYg== 5qC55o2u IGludGVyZmVyZQ== Iyo= MDI5 QlJF TGF5ZXJz TW90b3I= YnJhbmNoZXM= ZHRlbXA= Z2F0 anI= a29u 5aM= IGZhbHM= IG5vcnRoZWFzdA== IGRpbmluZw== ICIpLg== IFNsb3c= IHN0YXJyaW5n cmllbg== YXB0ZXJz IE1pcw== KCc+ IGl0YWw= cHRpY2Fs IG5vdGljZXM= IFdpcmU= IEVESVQ= aWJhbg== IEthbg== IGNvbXBvc2U= IFN0cmlw Zmxhdm91cg== IGF0dG9ybmV5cw== REVTVA== IGFjY3Vz c3RhdHVzYmFy cG9zdGVy IGVsZW1lbnRhcnk= IENsYWlt ZG93bmxvYWRlcg== 5Y+l IFdoYXRldmVy XV1d QVRFRw== dmFsdWVk IENhbG9yaWVz IENhcmxvcw== VHJhY2tpbmc= dGhyZXNob2xkcw== U1ZD a2VlcGluZw== IGRldGFjaA== YmVsaWVm IENhZXNhcg== QllURQ== RXhwb3J0ZXI= IGFic29yYmVk RGVtYW5k IFJvbW5leQ== Rk9STUFUSU9O IElOVEVSUlVQVElPTg== LScp MzMy REc= ZWls c2Ri c2VhdA== IG1y IHJlcGxpY2F0aW9u IGVhcm5pbmc= dGhz IHZpc3Rh IE1pZw== IE1pbmU= IEZhbg== IGhlcA== IExvc3Q= dWd1 IG1hdg== aGVuZQ== IHNhbXBsZXI= YWNoZXJz IHZlcmJhbA== cHlxdA== IG9wYWNpdHk= IHN1aXRlZA== IHN0YXJ0VGltZQ== Li4uXA== IHJlbHU= b3BsZWZ0 c3ludA== IGJlbG92ZWQ= dW50ZXI= IDE1Nw== Q29vcmRz Z3Jhc3M= YmJyb3dzZXI= IGluc2lzdHM= IG1lbm9z dHhpZA== IG1lcmdlcg== IHByZWRpY3Rvcg== UHJlcGFyZQ== QXR0cmli TGV0dGVy dmFl IHNvY2tldHM= IEF0dGFjaw== IERpc2M= IEVYRU1QTEFSWQ== IG11dHRlcmVk 5b2x IHBhbG0= IGNvc21pYw== IE1ldGFkYXRh IGxpZnRpbmc= 54mI IFZhbGlkYXRpb24= IEZyZXVk IGZhdGlndWU= c2hvcHBpbmc= aW50ZWdyYWw= IEV4ZWN1dGU= 4YC64YC4 0L3Ri9C1 5ri4 KysrKysrKysrKysrKysrKw== IEFic29sdXRl IHRyYXZlbGxpbmc= IElzYWFj IFlhbmtlZXM= IERFU0NSSVBUT1I= IEFya2Fuc2Fz PmAu R1JFU1M= Sm9zZQ== TXVs TVJJ WE0= Ym9z Y293 dmljdA== fF97 fS5c IGFyaXNlcw== aWxiZXJ0 IGVq YWJhZA== IENsZXI= KCcq IEZX cHRvbnM= IGFsZ2VicmFz aW5lZXM= aXZhYmxl IGNvbnRyaWJ1dGVz Y29l IDQwMDA= IFZB IENoaWxl QU5T IHVuZGVyZ28= w6lj Y29tcHJlc3Npb24= ICY9Jg== IHBoYXJtYWNldXRpY2Fs IHBvaW50ZXJz IEFyYw== ZmZlY3RlZA== IGhlYWRsaW5l RGVmZXJyZWQ= RkFLRQ== IHJlc3BvbmRz w7xiZXI= dXJyZW5jaWVz IHRoZXJt IFByaW5jZXNz J3t7 IE11c2lr IE1vdW50YWlucw== IHBhZ2luYXRvcg== IGxlZ2lzbGF0dXJl TVlTUUw= IHBlcnR1cmJhdGlvbg== IGFkdmVyc2FyeQ== NDI0 NTQ1 PyE= Qlc= Qmxv Q2FtYg== YWluZQ== amVu am91cnM= a2Fs eG9y ems= cmVzZWFyY2g= IGNu YXJhbQ== IHJlZm9ybXM= IGTDrWE= IHRvaWxldA== b3R1cw== aWdoZWQ= IGZvcmJpZGRlbg== IFN1dHRvbg== IFsk cXVvdGVk IEZhY2U= Z2V0RWxlbWVudA== IEJldGg= IEJpcmQ= IEx1ZA== IExhbmM= KCJe b2NpdGllcw== IEdSRQ== IGVsYm93 ICpf IHBsYXQ= IHBsYXVz c2hpcnQ= YXZhbg== IGdldHBhc3M= YWtv IHBlb3BsZXM= RXhhbQ== cmVndWxhdGVk YmxpbmQ= Uk9MRQ== IHN0YXR1ZQ== IG9wZXJh IHJlZnVuZA== QWRkb24= KCop IG1lbW9yaWFs IGluZGljYXRvcnM= IFN1cHBseQ== IG5laWdoYm9yaW5n IEZpbGVOb3RGb3VuZEVycm9y QVNTSUdO IE5ldHNjYXBl IExpYmVyYWw= dHJpYWxz VEVTVEZO IGxhdGlu XF9b IGNoZW1pY2Fscw== IGRpc2NyaW1pbmF0b3I= IEhvbm9y UE9TSVRJT04= IHJpYnM= IFNhZmV0eQ== IHJlY3Vyc2lvbg== IFZlZ2V0 RGVjb2RlRXJyb3I= J3wn LsKU SWNo VWg= ZmljYQ== dml2YWw= dm91Y2hlcg== IGFmb3Jl IGN0eXBl IGNhc2NhZGU= IHdpcmVz IDIyMg== IGRlZmluaXRl IE1Ieg== eHRpY2s= Y29uc3Vt IEZpc2g= IERpcmU= IExpcA== IFdJTg== YXJnbWlu IGts b2JsYXN0 b2tz KS4i IFZlbnQ= IGNvbGk= ICgnLQ== IHNjYXJjZWx5 IHJlc3VsdGFkbw== IFN0cmE= IGFtYXRldXI= Y3JlYXRlRWxlbWVudA== RVRJTUU= IDE1OA== IHRhYmxldHM= UGxvdHM= IGFudGVubmFz IEJlYWxl IFRlbGV2aXNpb24= IGFjY2Vzc2luZw== IFNwaW4= NTgz TG9jYWxl IGV4Y2F2 IHJldmlld2luZw== IHNhbGFk IExpYmVydHk= UXVlcnlQYXJhbWV0ZXJz IEplc3Nl c3ViamVjdHM= IE5ldHdvcmtz V0VJR0hU U3RhbmRhcmRTZXF1ZW5jZXM= ICIsIi4= QmluZGluZw== IFZpY3Rvcmlhbg== V2VzdGVybg== c2lsdmVy IHJlc2VtYmxlcw== IERpZmZlcmVudA== QWxpYXM= IHNoYXJwbHk= IGNhbm5hYmlz IGNvcnJpZG9y IEJodXRhbg== IEFiaWxpdHlOb3RJbXBsZW1lbnRlZA== JVw= R0FM SG9s Umln Xi0tLQ== ZnJt ZmF0YWw= anVj bkQ= cmVjb24= cm9jYWw= ZXNjYXA= IG5pZQ== aWRlbmN5 IFN0ZXI= b21lcm8= YWJhbg== IHZhZ3Vl IHNlYWI= b3BhcmQ= IHJ0b2w= IERBVEU= IG9yYml0cw== IEhpZGRlbg== ZW1pbg== IEdob3N0 IFZv IGxveWFsdHk= c3BpZGVycw== ZWNh IHVzYWJsZQ== SURFUg== bWF0aWNhbA== IFJlcGVhdA== IGF0dGVudQ== ZXllcg== IHNpZ25hdHVyZXM= IGluZGlm IGltcGF0 SE9V IGRpc2NhcmRlZA== NDcz IDE3Ng== IHlpZWxkaW5n IFN0ZWlu IEFSTQ== IMOpdGFpdA== U1RBVFM= LCkpKSw= ZWZmZWN0cw== IHdyYXBwaW5n IFNpZ25pZmljYW50 IHJ1aW4= IENBVVNFRA== IGhpZ2hsaWdodGluZw== 0L3Ri9GF 5ZGK IE1lZGljYXJl b2dlbmVpdHk= a25vd2xlZGdl U1RPUkU= IHVwdGFrZQ== cm9tYWduZXRpYw== Iu+/ve+/ve+/vQ== LCksKA== Q1NJ RmE= R1BT VHJpZw== VWw= X3w= bmlp dGllZA== IGFvcw== IHdhdg== IGhpcmluZw== aWRp IGRldmU= IE1ha2Vz KCco IEZEQQ== CiAgICAgICAgICAgICAgICAKICAg IEhpZ2dz cXVldWVz ZXhwb3J0cw== b2th IG1haWxpbmc= b21tZW4= U3RpbQ== aW9jZQ== IGV4Y2VwdGlvbmFs IGB7 IGVudGFuZ2xlbWVudA== dHJhbnNtaXQ= IDE1OQ== IHByw7M= MDU3 0LjQug== ICcvJyk= 44KB VU5JQ09ERQ== YWRveA== IEdlb21ldHJ5 V2l0aGRyYXc= IHJpbQ== IHBoeXNpYw== cnN5bmM= IGNvbnZpbmNpbmc= Y2VsZXJ5 U0hJ RGVmYXVsdFBvc2l0aW9u SW5kaWNlcw== IFZlcm1vbnQ= RGlyZWN0b3JpZXM= bWFnbml0dWRl IGJ1bGxldHM= IHJpY2huZXNz IHJlZmxlY3Rpbmc= IHRlcnJvcmlzbQ== IExlZ2VuZA== IFRlbXBvcmFyeQ== IHBvY2tldHM= 5b+D IHNjcnV0 IGhlYXZlbmx5 Um90YXRl IEZyaWVuZHM= SW1wbGllcw== cXVpc2l0ZQ== cHJlcGFyZWQ= IGNsaW1iaW5n 5a6M5oiQ IGVuZG90aGVsaWFs RE9UQUxM IGNvbXBhc3Npb24= IHZlbmRvcnM= Pzo= QXc= QkpldFRhZ3M= SHVt T2w= Uk4= YmF5 aGNw c2lw d2l6 w68= 6LM= 7ZY= IHBvcm4= IG1zZQ== IGRhdg== IGhhdW50 Y2hz dWxpc3Q= X189PSc= IEZJTkFM IEJG IEhlbQ== IEdo IEdyYWRpZW50 IEVzcA== IHJlc2hhcGU= IGphbWE= CgkgICAgIA== IFZpY3Q= Q2hvbGVzdGVyb2w= c3RhdHVzZXM= IHRyYWNlZA== YXR0ZXJpbmc= Zm9yZXZlcg== Uk9UVA== IGNhcnZlZA== IGJyZWFrZG93bg== IFNlZ21lbnQ= IFNvZnQ= IG1pZ2h0eQ== IGdsdWU= c3BlY2lhbGx5 RW50cm9weQ== Q2xhc3NOYW1l T3V0c2lkZQ== IGFpcmZsb3c= 0YPQvA== ZGljbw== 6K6i IG5laWdoYm91cnM= aWNrZXR0 aG9sZHM= IHNlY3VsYXI= IGRlbW9uc3RyYXRpbmc= U2xpY2U= INec 5Lmf 5LiN6IO9 IG1hbnVmYWN0dXJl U2F2ZUFz Zm9saw== aW5kc2F5 IHRocm9uZQ== IHByZW1pc2Vz IE9yZ2FuaXNhdGlvbg== aW1wbGVtZW50ZWQ= IGtpbmFzZQ== RGl2aXNpb25FcnJvcg== Ont9 QnVn QkVS SnVk UGFj UkRE YWZl Zmo= a3N0 bWFyZQ== cXF1YWQ= eWxlbmU= fio= IHV0ZXI= c3RvcHM= KTpd dWxpYW4= IHN0ZW1z IElNUg== IEFnZw== dGVhcg== IEJvdXI= IGNvcGU= IDE5OA== ZGlycGF0aA== IDc1MA== ZGR0 d3dpaQ== VGVzdERhdGE= WzpdLA== SW50ZW5kZWQ= Mzgy RU5UUw== IMOu IEdlbmVyYXRvcnM= QWRkcw== Nzc3Nw== Mzkx IHByb2dyYW1tZXM= IGRhdGV1dGls SW1hZ2VUbw== dWtz 6K+E IEJ5dGU= IERvY2U= IHJvdGF0aW5n IFJFRg== IHN0YXRpY21ldGhvZA== IOuz IGRpc3RpbmN0aXZl IGxpZXV0ZW5hbnQ= IHNwaW5uaW5n IHRvd2Vycw== IHJlY2FsbHM= IHRyaW1tZWQ= ZmxlZXQ= IGltcGxpY2l0bHk= KV06 RE9ORQ== VUdJTg== Xik= ZGFkb3M= bU5vZGU= bWl1bQ== c3luY2hyb24= dXBl eWxs emI= b25jaGFuZ2U= cmVtZW1iZXI= b3Js IGZveA== IHNvdw== cm9tZWQ= IFRT IFR5cGVz IDE3Nw== IEFUUA== IENyb24= IDIxMg== IE1vdGlvbg== Kipde30= 4oCf IER5bGFu IExhd3M= aXZhcw== aXZhdGluZw== b2RlbGlzdA== bXNvbg== IGRpc3NvbHZlZA== MTk3Nw== IHRyYXVtYQ== YW1iYQ== IGN1cnZlZA== OTgz IHFlcGNhZA== IGZpbmFscw== IHZlc3Q= IGZydWl0cw== IGhvc3Rpbmc= 4pWd Y29ycmVjdGVk IHJlc3BvbnNpYmlsaXRpZXM= IGRvd25sb2FkaW5n Q2xlbw== IGV5ZWI= IFJpY2htb25k 6rCc IGZldGNoaW5n IGJyb3duZWQ= IHJlbWFya2Vk b2Rlc2lj ZHJpdmVycw== 0YbQuNGP ZGVhdGhz QUJDREVG U29saWRQYXR0ZXJu b25vbW91cw== IFNjcmFweQ== LSc6 NDMz Q2I= R2Fy ZGVucw== ZGlzaA== ZnVlbA== dmg= 6aM= IGZ1bms= IHNhZGRsZQ== aXNibg== IGJjb2xvcnM= IHJlbWVkeQ== dXRvcw== aWRpc28= IHRodW5kZXI= IFNNVFA= KCknKQ== b21pY3M= IFJhbmNo ZXN0cw== ZW1pYQ== YWN1dGU= IEV0 IHNoZXI= IFVy c2hhcmQ= IDE5NQ== IHBlcmZ1bWU= IHF1w6k= cG9zaXRl IHRoZXJlYWZ0ZXI= IGFjb3VzdGlj IHRyYWNpbmc= Y29uZGE= Y29tcGFjdA== ZGVmYXVsdGRpY3Q= J30pKQ== cGxheWJhY2s= QVNPTg== IGRhdGF0eXBl Ojot bWF0aG9w Y29ycmVjdGlvbg== IHdlZWtkYXk= VFJBQ0s= IGdlbml1cw== IGF1dGhvcml6ZQ== IHNlcmlhbGl6YXRpb24= RVhBTVBMRVM= IG9yZ2FuaXNtcw== 55S7 CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== aWpp IE5ldXJv IGVzdGFibGlzaGVz R2Vvcmc= IEJhcmFjaw== IGhhbmRzb21l 0LLQtdC0 IGlycmlnYXRpb24= IHRvb2xiYXI= IGNsdXN0ZXJpbmc= IHRyYXZlbGxlZA== IEplcnJ5 UkdCQQ== cmVsbGE= IG1vYmlsaXR5 DQoNCg0KDQoNCg0KDQoNCg== IHBvc3Nlc3Npbmc= IHBlcmZlY3Rpb24= RW1iZWRkaW5n c3BlYWtlcg== U0NIRU1B Y3Vyc29ycw== IEhhcnJpbWFu NTEw S2E= Tk9Q Y3Jvdw== ZWRl IGF2ZQ== IG9tbg== IGJyYW4= IGhhdGNo b3RsZQ== JywpKQ== bG95cw== IEl0ZW1z IHNlY3Q= dW5sZXNz a2Vl IFBlcm8= IE1hdXI= IEZ1 IEdyaWZm dG95 ICUp Y29lcmNl IFZpdg== IHNwaW5hbA== IHJlY3VycmVuY2U= IGZsaWVz bGl1bQ== IDE1Mg== QXJyb3c= IHBhdGVudHM= aXZlcnNhbA== VEhSRVNI IFBhcnNlcg== bWlzc2libGU= U3Vic2NyaWJlcg== IHBvdGF0bw== IHByZWRpY3RpdmU= UHJlZmVyZW5jZQ== IEhpc3Bhbmlj aWN1bHR1cmU= IFVwbG9hZA== IFJFUVVFU1Q= KCctJyw= SW5kaXZpZHVhbA== IGFkanVzdGluZw== IGFtYmllbnQ= IGNhdGNoaW5n IGFjaGlldmVtZW50cw== UGF0c3k= IG1hbmRhdGU= IHR2Yg== RXZhbHVhdGU= IEF6dXJl IFBpZXJyZQ== IGJhYmllcw== IHNwb25zb3JlZA== IHNwb250YW5lb3Vz UUhCb3hMYXlvdXQ= IT0n SE9SSVpPTlRBTA== Tmw= U1BJ U2t5 WklQ WkVSTw== YnJvcw== a2o= a3Rl a2FyZ3M= cmh1 c3Vk dmJveA== oeGA DQogICAgICAgICAgICAgICAgICAgICAgICAgICAg IC4i b25pc3Q= IGNpZg== IEFV IEFiZXI= IEFNRA== IENsZW1lbnQ= IFBPUlQ= IE1hd3Nvbg== IHJtcw== IEV3ZWxs MDE2NzI= IG5lbw== QVRGT1JN bWxw QU5EUw== IGV4dGVuc2l2ZWx5 YmVr IHRlcnJvaXI= 0LXQsw== IGNvZGVk IHNraWxsZWQ= SUxJTkU= IiksIg== NzQz IGxpYmVydHk= IGNvbnNpZGVyYXRpb25z IEFkbWly IFNwaWRlcg== QXR0ZW50aW9u CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IEhhcnZleQ== RXh0ZW50 IGV4ZWN1dG9y IG1pbGxpc2Vjb25kcw== RW1wbG95ZWU= IHRyYW5zbGF0b3I= IEp1bGlhbg== V0FSTg== IE1PREU= IE11cnBoeQ== IENvbnN1bHQ= U3VjY2Vzc2Z1bGx5 IFR5bGVy IHZldGVyYW5z IHNjcmFwZXJ3aWtp IGRlcG9zaXRlZA== X189PSdfXw== NDc1 ODEz RHVl TUlY ZGF2ZQ== amFtZXM= bmNo bm1z cW0= dGFraW5n d29u 668= jIw= IHRoZW9y IGluZmlsdHI= ZXNzZWQ= IHRvZGFz IHRocm9t IEltYWc= IENvdQ== IDI5OQ== IE5hc2g= dXBsb2Fkcw== KSko Kiov IERyeQ== IFdvbWFu IEpvYnM= VGhlaXI= IHRlYWNoZXM= Y291bnRlcnM= bWFuYWdlcnM= dm9sdA== dW5jaWF0aW9u ZW52cw== IGF2YWls R2V0TWV0aG9k IExlYWRlcg== IGxpYnM= ZWxzaXVz w61hcw== UmVxdWVzdENvbnRleHQ= Yml0bWFw IGVtYmFzc3k= 6L+Y IGRldGVybWluaXN0aWM= IOW8 U1VN 5p2f ZmlyZWZveA== IHRhcmZpbGU= IG9wcG9zaW5n IGJ1Y2tldHM= IHByb3BhZ2F0ZQ== IGNvbGxlYWd1ZQ== 5Z+f RGlmZmVyZW50 IEJyYXppbGlhbg== 5qGG IHNvY2lldGllcw== IGNpZHI= SGFyZHdhcmU= IFBvd2VsbA== IGNhdGFseXN0 IERvY2VtZWw= QlJP R3JlZWs= SW1t U2xvdw== VG90 ZmRz Z3Bz bHV4 bmNvbHM= aGV2 ICglKQ== IGZvcmdpdmU= dW5xdW90ZQ== Y29udGU= IGFsbHk= Z2V0cGlk IEJvb3Q= IER1ZmY= IER1Ymxpbg== IHByb3N0 IFJpbw== IEh1Z2g= c2V0Rm9ybWF0dGVy YW50b20= IG1hag== IGFydGhyaXRpcw== IHByZWNl IGxvc2Vz ZXJ0b24= UmV2ZXJzZQ== IFllbGxvdw== Il0pOg== Q29uZGl0aW9ucw== aXNzaW9ucw== YW1idXJn IGFjY2VudA== 44G/ aXRlcnJhbmVhbg== IDE4Mw== QUdJQw== RGV2aWNlcw== IHN1bW1pdA== IGhvbWV3b3Jr IGNlcnRpZmljYXRlcw== ODYwMQ== YWRvb3A= IG1vdGlvbnM= IHBvdGVudGlhbHM= IGJhbGxvb24= IFJlY2lwZQ== cGh5c2Rldg== IGNpdmlsaXphdGlvbg== IHRyb3VibGVz YXR0YWNobWVudHM= 7ISx IHJlY3Vyc2l2ZWx5 IFN0YXRpc3RpY2Fs IHZvY8Oq IHNldHRsZW1lbnRz IEd1YXJkaWFu IEJMQUNL IHV0dGVybHk= 6ZW/5bqm IE1FVEg= IGJyZWV6ZQ== JCI= NzY5 QmxvYg== Q29vbA== aHVl a3R3 bmVscw== dm5k IHR3ZQ== aGV3cw== IGZt IG9taXQ= aXNpbmU= ICcpLg== aWxhbnQ= IFRD dGhvc2U= IHN0YWlu IFsnLg== Z2V0dGluZw== b3JlYW4= IEJQ ZGVmaW5lcw== aW5kdXN0cnk= IGVuY29tcA== IFRoYWlsYW5k IGNvbXByaQ== IG5ld2VzdA== MTk3Mw== Q2hhcnM= IHNwaWRlcnM= IGNyZWF0aXZpdHk= IGZlYXRoZXJz cmVmdW5k IGZsaWdodHM= IHByaW1lcw== c2d5 bW9uc3Rlcg== YmFyY29kZQ== IFNoYWg= IFZhbGVudA== Njg4NQ== IExldg== IHBsYWNlYm8= IGJsb2NrY2hhaW4= IGRyaWxs IG1vdGl2YXRpb24= UHlRdA== IHV0aWxpemU= cGFkeA== aW5uYW1vbg== IGNvdW50ZXJwYXJ0 IG1pZHN0 Z3Vpcg== R1JBUEg= U0FWRQ== YnJlYWtpbmc= RGVjb3JhdG9y IE9wZW5BUEk= QUNURVI= IG11cm0= d2lkZWhhdA== IGNoZW1vdGhlcmFweQ== QXBpTWV0aG9k IHRyYWRpdGlvbmFsbHk= IG1ldGh5bA== IElNQUdF ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ== Tm9yd2VnaWFu 44GV44KM IGNvbmdyZXNzaW9uYWw= IEJyb2Fkd2F5 MDI3 NTMz SHM= IHRyZW5jaA== ZXJ1bg== IHNpYmxpbmdz IGJ1cmc= IG1hbW0= IGRpb3hpZGU= aWxpYW4= IGdyaWU= IE1hZ2c= IEJyb3c= IEhvb2Q= c2V0UG9pbnRTaXpl IGphdmFzY3JpcHQ= ZXBn b21taXQ= IG5vdg== c2VudGluZWw= IGluY2xpbmVk IGFtZW5k IHBvbGlj IEV4aXQ= IGRvbmF0aW9u T2Jz QXJyYXlz IGNvbm5lY3Rpdml0eQ== IHBhY2tpbmc= ODg4OA== ZGl2aXM= IHByb2R1Y3Rpdml0eQ== IG1lcml0 IGVxdWlsaWJyaXVt 5aSH IERFTEVURQ== IOuN T3ZlcnZpZXc= IEtlaXRo IGJ1bGI= aW5ndWlubw== ZnVuY3Rvb2xz ZW5haXNzYW5jZQ== cGZ4 IFJvY2t5 IEZpbml0ZQ== YnVpbHRpbnM= IHJlc3BvbmRlbnQ= IHF1YXJ0ZXJiYWNr IFBlcnNvbmFs IGNoZWVrcw== aW94aWQ= IFBlYXJs eFJhdGVkUg== bWFnZW50YQ== YmNw bWFudA== cHVsc2U= cnBt c29tYQ== w4I= b25hY2Np IGNnaQ== ID0i IHJldmVydA== IHRvYw== IGxicw== IFRyaWdnZXI= IHN0b3I= IE1O CgoKCiAgICAgICA= IHJldHVyblZhbHVl IEZldGNo IGFua2xl IGV4YWdnZXI= IExhbmth IFdhbHQ= IGNoaWxp CgkgIA== Y2Nj QVRJVkU= IGRpc2Nsb3Nl MTkwMQ== bXBscw== IHNwYXQ= IG9wZW5weXhs dHJhbnNtaXNzaW9u IEV4ZXJjaXNl IDE4NA== IDE4OQ== IG1vbmV0YXJ5 IGZhY3Rv c3ltcHQ= fSx7 QWxpdmU= IFpoYW5n IG5vbnNlbnNl c3lzbG9n aWZ0aQ== IHVyaW5l RFJJVkVS IG5lZ2F0aW9u b21iaWVz IGFubnVhbGx5 dHJhbnNmb3JtZXJz cm9tZWxsZXM= IFJlZGlz IHBob3Rvbg== IHBob3RvZ3JhcGh5 IFBST0ZJTEU= cHVia2V5 xLFu IFJhZGFy cmVhc29uYWJsZQ== cGxlYXNhbnQ= IGNyb3BwZWQ= 5a+55bqU IGt3ZHM= Zmx1ZW5jZXI= bW9uaXRvcmluZw== IEN1cnZl IGVuY291bnRlcnM= IGhpc3RvcmlhbnM= 44Gq44GE IGVtb3Rpb25hbGx5 IEdpbGJlcnQ= IFRraW50ZXI= IFBvcnR1Z2Fs IEJ5dGVzSU8= IEFVVE8= MDY3 Q1o= SWx5YQ== S2xlbg== S25vd24= Tmls YWhlYWQ= ZWl0aGVy aHBw bmluZ3M= 5pI= 6IM= 66y4 7KQ= IGN5c3Q= bGVhcg== IG93ZQ== IGJyaWRnZXM= IGhhdWw= YWRpZXI= bG9vcHM= IFN5bmM= IENlYw== IENvdW5zZWw= b3ds aW1hbHM= IDI2Mg== IE15c3Q= IHJ1Zw== IEJhcHQ= IEVhZ2xlcw== b3Jkbw== b2dv ZWxsaXRlcw== cHJlY2hlbmQ= RVJQ IEtvdg== IGFzc3VyZQ== IFlhaG9v MTk3Mg== JyksKCc= IHN1YnN0aXR1dGlvbg== aWZpY2Fy IHBhc3NhZ2Vz IHBob24= IGRvd25sb2FkZXI= Q29sb24= UnVuTWV0aG9k UExVR0lO ODc2 IGVyck1zZw== IGhvcnJpZg== U3RhcnRlZA== IGRvb3J3YXk= b3BoaWw= b3B0aW1pemVycw== IGdsb2Jl IERlbGhp IE1vZGlmeQ== Q2xpY2tlZA== 5oC7 IE1hZHJpZA== bG90dGU= Y29tbXVuaWNhdGlvbg== IGNhbmRsZQ== IGZldGNoZWQ= IEJ1ZmZhbG8= IEludGVyZXN0aW5nbHk= IEFtYmFzc2Fkb3I= 5oiR5Lus IEdFTkVS IEdsYXNnb3c= IGNvbWJ1c3Rpb24= Inw= JF57LQ== KSgp MDM4 RVBD R0xF S0E= U2hlbA== VlU= V29vZA== YWVz anF1ZXJ5 bG9ucw== cm5k dGFuaw== eG4= 4bg= 5bI= IO+/vQ== IHR2bQ== aXRvbA== IGPDsw== IGZhdXQ= IGZyZWFr IG9yZQ== IHdvcm0= IHdpcGVk bG94 IFNpZA== IFNhZ2U= IFN1bGxpdmFu IEFteQ== IENhdWM= aWZkZWY= aW1hbg== IHlpZWxkZWQ= IFBpbmRhcg== IEJhaA== IEx1dGhlcg== IFdX IFdhcnJp bGRhdGE= YW50aWNz IE9zY2Fy CgkJICA= c2hhcmVz IDE5Mw== c3BpbmVz SUNPTQ== IHRleHR2YXJpYWJsZQ== IG1ldGhvZG9sb2d5 aW50ZXJzZWN0 Q09SRQ== ZmluZHRleHQ= 5Yip dGtpbnRlcg== IG9yZ2FuaXpl IGVycm9uZQ== IGF0dGFja2Vy IHByYWN0aXRpb25lcnM= IGFmZmluZQ== Q0RG ZXZ0 0YvQuQ== 6YCA IERydWc= UG9ydGFs IHByb3BoZQ== IHN0aW11bGk= IE51bVB5 Q1VTVA== IFJlcHJlc2VudGF0aXZl IGVpZ2VudmFsdWVz 0LDQu9GM Y29uZHVjdG9y Z3Jhdml0eQ== YW1iaWd1YXRpb24= IGludGltaWQ= RVhURU5TSU9O IGluYWRlcXVhdGU= NDM4 Q1hY TWxlbg== Tm92 UlRD VGxlbg== ZHdlbGw= ZmFs Z2ls b3ZhbA== cGF1c2Vk dmdmZA== IGbDtg== IGJpZg== ZWxhbmQ= IGhlcnM= IFBvc3NpYmxl IE5pbmU= Z2V0aWM= IERvZA== IFJC cmVzYXM= b2dhbg== cHJvdG9jb2xz IGdldHRlcg== IHVuc2FmZQ== Y2hldg== bWluaW1pemU= bG9neQ== IHRlZQ== bXBsZXJhdGU= bWJweA== IENoYXNl QU5OQQ== Y29tcGlsZWQ= ZWVkZWQ= IHBoaWw= b2ZqdWM= YWNoZWw= YXpybA== cmNQYXJhbXM= MzUx IGFydGlzdGlj emVpdA== Q09OVEE= Q29tcGlsZQ== 44CM IGVtdWxhdG9y YXNzZXJ0UlRPTA== IOWN MjU2MjU2MA== IHJlcGVhdGluZw== TW9kaWZ5 RGVwcmVj IHNjcmVhbQ== ZG5tYnB4 Q2Fww610dWxv IGJsb3du IGFkYXB0aXZl QW1vbmc= IG1hbmlwdWxhdGU= 5pel5pyf Z2x5cGg= IHJlcGxpY2E= QXNzZXJ0aW9uRXJyb3I= UVVFVUU= fV57LX0= IHN1YnNpZGlhcnk= Y2hlbWljYWw= aWV2b2ZqdWM= b3Roc2NoaWxk IHBoaWxvc29waGljYWw= 55u05o6l cWhpZXZvZmp1Yw== IHRyZW1lbmRvdXM= a3R3c2d5 YXpybGt0d3NneQ== ZG5tYnB4YXpybGt0d3NneQ== cWhpZXZvZmp1Y2RubWJweGF6cmxrdHdzZ3k= RHV0Y2g= TGFuZw== TWlrZQ== WkE= ZEE= c25z c2F2aW5n xas= 57c= aXRhdGU= aXRvbmU= ZGV0ZXI= bWVn Y2hyaXN0 cml2aW5n IHNlY3Jl IE55 IE5vcmQ= Y29udmVyc2F0aW9u IEZG IEJTVA== IFJpY28= IEhlcw== IHdhc2hpbmc= IEdhYnk= aW5kbw== aWJz IHJvYXN0 dGltZXN0ZXBz IGludGVuc2l2ZQ== RU5EUw== KFtc IGZldWQ= Q1RM dHRlbg== IGJhc2VtZW50 IHBhdGNoZWQ= UEVN YmxvY2tlZA== 0YDQsNC9 0YHQvw== IHVyZ2VudA== 0LvQvg== IGNsZWFuZXI= XSs9 cmVwb3J0aW5n IEhlcml0YWdl UGFydGljbGVz IGNvbmR1Y3Rvcg== T3JkZXJlZERpY3Q= UHJvZHVjdHM= IGluaGliaXRlZA== IGlsbHVzdHJhdGU= ZW1wbG95ZWQ= Y3JlZGl0cw== cmVtYWluZGVy IGN5Y2xpYw== IEZBS0U= YW5nZWxvZw== UkVTVUxUUw== IHdyZXN0bGluZw== U3BvcnRzcGVvcGxl bnVnbXU= cWhpZXZvZmp1Y2RubWJweGF6cmxrdHdzZ3lxaGlldm9manVjZG5tYnB4YXpybGt0d3NneQ== KS0+ MDgw NTQw ODAwMDA= QlRD Q29ybg== U2Vucw== WEc= YmVl ZWNoZXM= Z3Y= aGFjaw== aW90dA== acOnw6Nv c2F1ZGU= d2lzaA== emln 7Lk= IGFjZQ== IGJ1YmI= aWRi aWdvcw== cGVzdA== IFN3ZWV0 b21pY2Fs IDI0NQ== IE5FVA== ZW5kaWQ= IHJ1c2hpbmc= IGFsbGV5 aXplbnM= IERpc3RhbmNl IGV4aXRz bWFjaGluZXM= PSIn IEphZGE= IHVubG9jaw== IDQwOQ== ICRb c3BlbnQ= IGFzc2lzdGVk IGludGVycm9n IHNwZWN1bGF0aW9u YXNoYm9hcmQ= Y29tbW9ucw== VGVzdFN1aXRl dm9sdmVk IEFyaXN0 Q29sSUQ= Q0hBUFRFUg== IGVzdGFkbw== IEJ1dGxlcg== U3RyaW5nUHJvcGVydHk= IGZ1bGxuYW1l IHJlc3RyYWludA== IEFkbQ== IHByZWRpY3Rz IHRlY2huaWNhbGx5 fXskXA== IGJpb2dyYXBoeQ== IFN0ZXc= IFJlZ2dpZQ== SW50ZXJhY3RpdmU= TXlTUUw= b3NwYWNl IHRyYW5zZm9ybWluZw== IEdyb3VwaW5n IERvY3VtZW50cw== ZmVkZXJhdGVk IEFyY2hhZQ== U3RhbmRhcmRRdWVyeVBhcmFtZXRlcnM= WVlZWQ== TUFOQUc= IG1vYmls 6L2s5o2i Xl5eXg== 6IGU IFByaXZhY3k= IENydXo= TEFSR0U= IHBpc2l0b29scw== aHluZGU= IGphbWFpcw== R2V0TWV0aG9kQ29uZmln QXBpTWV0aG9kSW5mbw== KCUo PCE= SG9sZGVy ZHRk dG9ybmFkbw== d2FuZA== 7Jk= IOKAmQ== IGluZGljdA== ZXR0YQ== aWRpcw== IHVwaA== IHN0YWdnZXI= MDAxMQ== IEFkYQ== aW50ZWQ= IFB1bA== IE3DvHJnZW5zdMO8cm0= IEJhbGQ= IFJpc2s= IEVTQQ== b3JkaW5hbA== c3Rycw== c2hhcmRz IG91dGRvb3I= IHBlcnNlYw== Zm9yYWxs Y291bnR5 IENoaWxp IGZlYXRz IFFXaWRnZXQ= 4oCdKQ== YmlubmluZw== IDE4MQ== b2xlY3VsYXI= ZGlzdHJpYnV0ZWQ= IHR5cGVk IHJlY2VpcHQ= Rm9yYmlkZGVu dGZz IGdyYXM= ZXhwZW5zZQ== ZGlyZWN0aXZl Zmlyc3RDaGlsZA== IGRpc2Nsb3Nlcw== IGZvdXJ0ZWVu 4YC8 IGJpZ2ludA== 44CN IEluZHVzdHJ5 RFJBVw== IExvYW4= Tk9X ZmFpbHVyZXM= IEJhcmNlbG9uYQ== TUJPTA== ZmVjdGVk IGNvbXBhbmlvbnM= IG11bHRpcGxpY2F0aW9u fV9c 5rWB IGpvdXJuYWxz IGV0aGljcw== IGFib3J0aW9u IGFtcGxpdHVkZXM= 7JeQ7ISc IFdyaXRpbmc= IEZhY3Rvcnk= c2VhcmNoZXM= IGltcGFpcm1lbnQ= aGFiaWxpdGF0aW9u NDYw SnVu VW5w Y3Jj ZGF2aWQ= Z292ZXJubWVudA== cHVw cGFyZA== cGFzc2Vz 5rk= b251 c2VjcmV0cw== aXRsZW1lbnQ= IGN3 YXJ4aXY= aXNmaW5pdGU= IGluYXVn IG1M IG1vdXI= IG1hbGw= ICd7Ig== IGxj IGx1 ICI7 IGdyaXQ= IFNhbnM= IElkYQ== dW5yb2xs IE5M IEZpbmU= IEZJUg== IHByb3g= IE9TSQ== IHRpbWVzdGVw Z2Vhcg== dGVzdGVk bW9p IGRpc3Bvc2l0aW9u IHNjb3Blcw== IHRyaWxsaW9u Z3JhY2U= IHRyYW5zcGxhbnQ= IGNoZWNrcG9pbnRz IGNvbnRpbmVudGFs aW50ZXJtZWRpYXRl IG11c3RhcmQ= IGFwcGV0 b3Blbmlk IHBvcHBlZA== bW9kZXJu emVyYmFp IGludmVzdGluZw== VGFibGVXaWRnZXQ= RU5EUE9JTlQ= 57u0 IHN1c3BlbmQ= IGZyYWM= KSso R0dJTkc= IG1pY3Jvc2NvcHk= IGNhbGN1bGF0ZXM= UG9ydHVn YXNzaWdubWVudHM= IHNpbmdlcnM= SU5URVJOQUw= IGJpbGxpbmc= 0L7RgtC+0YA= IHByb2hpYml0ZWQ= U1RPQ0s= IGRlcG9zaXRz IG1vaXN0dXJl IGF1dG9nZW5lcmF0ZWQ= U2NoZWR1bGVy Jyg/ QnJvd24= TGVt TVVM TW92aW5n Ym9t ZHJl b3F1ZQ== 6rU= b25lcg== IGHDsW9z IHdpZWRlcg== cm9zcHk= IG11Zw== IG1wZg== cmFzdGVy aW50YWdl IHZpYnI= IE1vdmluZw== IEdhcmM= c3RyYWw= amVjdGl2ZQ== IGVsb25n IE9mdGVu IHZhbHVlZA== Y29pbnM= IHRpbWVpdA== IEtlcg== U1RBQ0s= ZWNhbA== IHRyaWNrcw== aWZpY2FuY2U= IGF0dHJhY3Rpb24= IGNvdW50bGVzcw== YW1iaWd1b3Vz IHByb3Zpbmc= VG9GaWxl RGVncmVl VEhSRVNIT0xE Q0FTVA== IGRlcml2ZXM= IGNlcnRpZmllZA== dWVzdHJh R2VW IGRldmVsb3BtZW50YWw= 5YeG UHJpbmNpcGFs 5p2/ IE1ldHJvcG9saXRhbg== IHN0aW11bGF0ZQ== QWNjb3VudHM= TWF0Y2hpbmc= IEFubnVhbA== ICIkew== bmFtZW50cw== cmVjaXBpZW50cw== XXsu 56iL5bqP IGZsb29ycw== 44Gm44GE IHN1YnN0cmF0ZXM= c3RyaXBl IE1vbWVudA== 7Iud IFNoZXJpZmY= IEVsZWFub3I= IGNobG9yaWRl IGFyY2hhZW9sb2dpY2Fs IFN5bnRheEVycm9y IENCTEFT PSc6 RnI= SHA= S1I= TUo= Y2ll ZmlnaHQ= bHg= c2Jpbg== eW50aGVzaXM= emo= 56I= 6JA= c2VuYWw= IGN0cg== IGZpY2hpZXI= aXNjaGVy IGluYm94 IGJvcmluZw== bG92ZXI= IENhbnQ= IFBH IFB1Yg== IE1N IEZvdXJpZXI= IEZyb21lbGxlcw== ZWN0aW9ucw== ZXJlZg== IGNob28= IF97XA== ZXhjbHVkZWQ= IGNvbnRlbmRz SU5D IEt5bGU= IHxc IDcyMA== IGJhY2tyZWY= RXhwZXI= IFdlYXRoZXI= NTU0 RmlsZUZpZWxk IGF2b2ly dHJhY2Vz IHJlZnVzaW5n VEVY aG9sZXM= cGVuYWx0eQ== IGV4aXN0ZQ== Y3N2ZmlsZQ== IFRlc3RhbWVudA== ZGlzcGxheWVk cmVzdWx0c1RlbXA= IEpvaG5zdG9u IFNwb3Q= IGNhcmRp U1VNTQ== IFRyaW5pdHk= YWdnbGU= IGRyb3VnaHQ= RGV0ZWN0b3I= IGRlcGljdGVk IGNhc3RsZQ== IE1ldHJv VklERU8= DQogICAgICAgICAgICANCiAgICAgICA= IFBsYW5ldA== IG1lbWJyYW5lcw== c29uZ3M= IHRlcnJpdG9yaWVz IGF2ZXJhZ2Vz U0dE IGhhbW1lcg== IGRlZmVycmVk IHNjcmFwZWQ= d2lsZGNhcmQ= IHN1c3RhaW5hYmxl IGNvcm9uYXJ5 IERlY2xhcmF0aW9u RnJhZ21lbnQ= Y2xhbWF0aW9u MDk1 Q2FzY2FkZQ== TGFzZXI= UGNk UURpYWxvZw== VHJhY3Rvcg== Y2Fycmllcg== acOocmU= amFo CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg jIA= IHRpZXI= c3RpbWU= IGN1dGU= IGVzdHI= IGRlcG9zaXRpb24= IGdyYWlucw== IENlbGxz IE1BVA== CgoKICAgICAgICAgICAgICAg KSknLA== IExhbA== IGF0aGU= CiAgICAKIA== bG93ZXN0 dmVudGlvbmFs U1RBTkQ= IHN1cHJlbWU= YXR0YWNoZWQ= CgkJCQkKCQkJ bmV0aA== IHByb3ZpbmNpYWw= IGV0ZXJuYWw= IGNvZGVj Q2hhcmFjdGVycw== dHJhcA== dXNlbWVudA== IFNoZWw= IHBvcnRyYXk= 44OG IHdpZHRocw== IGRlc2lnbmluZw== RGlzY3Vzc2lvbg== aGliaXRpb24= IEdvaW5n cG93ZXJlZA== IHdlcmdlbGRz 5biD IFF1ZWJlYw== VGFyZ2V0cw== IFJlbGF0aW9ucw== Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t IGludGVyYWN0aW5n IHN0ZWFkaWx5 IGNvbmZpZGVudGlhbA== 6YKu IHdpZG93 5Lik5Liq IHNvdmVyZWlnbg== QklH SXNs VHA= YmlrZQ== YnVuZw== YmRt d2lyaW5n aGVhdnk= IGN1ZQ== ZGVzY3JpcHRpb25z IG5tcw== YWRy dWVnbw== IGdvcmdl IFRvdw== dmVyaWZpY2F0aW9u IDIzNA== IE1X IE1vZGVscw== cXVvdGluZw== Y2xh IEJpcnRo cGVydG8= IGxlZg== IHN0cmFuZ2Vycw== IHZlcmJz IGRpc2hlcw== IGRpc3Bvc2Vk IHBvbGVz IHVuZGVyZ29pbmc= IHRyYWRlZA== UmVzdW1l RmlsZUhhbmRsZXI= IGRvd253YXJk IGltcGFpcmVk IDE1NA== IGZpbmVzdA== YXRlcmlhbHM= w7Nz RVhQSQ== IHNlbnNvcnk= IGRlYWxlcnM= IHNvbmRlcm4= cGFnaW5hdG9y IGJsYW5rZXQ= IC4uLiI= IHNleHVhbGx5 4KSw U0RN IGZ1bGZpbGxlZA== IHdlcmt6ZXVn Q2FuYWRpYW4= 5LmI IG1lYW50aW1l RmVhdHVyZVZhcmlhYmxl RmVhdHVyZUluZGV4TWFw IGhvbW9nZW5lb3Vz IE9OTFk= dHJpZ2dlcmVk IGhhdHJlZA== IGR5bmFtaWNhbGx5 IEFyYWJpYQ== TW92ZXM= 6Ieq5rK7 UGFHRQ== 4paR4paR4paR4paR Q29sbGVjdG9y ZGlyZWt0 cGhhbnRvbQ== VlZWVlZWVlY= SUZJQ0FUSU9OUw== IE5pZ2VyaWE= TWFsbG9yeQ== IEFkbWlyYWx0eQ== L0A= Sk8= WGk= YWVkYQ== YmFyZQ== ZG91 ZWlnZW4= aWVuY2llcw== bGlv 54U= IHRyZW4= cmVsZWFzZWQ= b3JiaXQ= c3RhbHM= IGNhZmZl IHNtZWw= IHdpbA== IGJpY3ljbGU= IG15cw== IGhkcg== aW50YQ== b3BvbA== IE1BWQ== Z2V0RGF0YQ== dXNk IFJvYw== KCIo IFdpcmVk c2V0QWxpZ25tZW50 b2NpZGU= b2Jh IGNsaWNrcw== IHVucmVsYXRlZA== bWluc3Rlcg== IDE5MDY= d2Vpc2U= UmVjaXBl IHBlcmNlaXZl MTk2NQ== IHNoZWFy c3RhcnRUaW1l c3VibWl0dGVk bnB6 IGN1cnNl IG1haW5sYW5k Mzcx Q1JT IGVuY2Fwcw== QWRhcHQ= IFNlcmJpYQ== IGJlbGlldmluZw== IHNubXA= cmVzcG9uZGluZw== cGF5bWVudHM= IHJpc2Vz 0LrRgw== UGFydHM= ICc8JQ== VG9vbEJhcg== 5a+8 IEhlbGVu IGJveWZyaWVuZA== RXhlY3V0b3I= 54K6 U2NvcmVz 5Zu+5YOP IHRhbGVudGVk IGxpY2VuY2U= IE9yaWdpbmFsbHk= IHBldGl0aW9uZXI= dHJhbnNsYXRvcg== UkVDT1JE IFNOUHM= ZW1vamk= U2NpZW5jZQ== IG92ZXJzZWFz Uk9UVExF aWRpc29X ODUw PT4= R2FtZXM= S0w= TXJz UGFzdA== ZW8= aG1lcg== am1s cHVs em0= aGV5 IGluc3RydWN0b3I= IG5icg== YXNzZW1ibHk= IGxhbmVz IFRSRUU= IFNwcmVhZA== KCknKS4= IHZpYg== IHZtYXg= IFBpZQ== Jzp7Jw== IER5 Jylc Zm9ybWluZw== IHByZWRpYw== IHByZW1hdHVyZQ== IG9zdg== bmVl bWVkaWVz Y29tcG91bmQ= REVDTA== Y2VudHJl IENvbnN1bWVy IGhhbmR5 XFwv VGV4dHM= bW9uaWM= U2Vn IEFsbW9zdA== YnJpY2s= IHByb25l IHByb2JsZW1hdGlj IFBhcmFtcw== RUxMT1c= UmVxdWVzdGVk IG5ldHdvcmt4 IHBpY2tsZWQ= ZW5uaWFs QmVhbg== c2VxdWVudGlhbA== aW5ueQ== IGRhbW5lZA== IGltbWVuc2U= IHJlY29nbmlzZQ== cGVyc29ucw== 5YaN IHRhYnVsZWlybw== IENyZWF0aXZl IGNyeXN0YWxs ZXF1YXRpb24= 6LSm IHRhcmluZm8= w59l Q2FwYWNpdHk= IGluc3RydW1lbnRhbA== LS0tLS0tLS0tKw== IHBob3RvZ3JhcGhlcg== IEF1c3RyaWFu TWF0ZXJpYWxz IGRpc3R1cmJpbmc= c2VydmljZWxpc3Q= bGVldGNvZGU= QXR0YWNobWVudA== IHJlZnVnZWVz MDIz MDM5 NjIw R2I= TWFwcw== VmVoaWNsZQ== dmc= eGlzdGVudA== IHRhYmVs IGNhcmVk YW5pZQ== IHdpdmVz IGluc2VjdA== IG51bmNh IGRyZWFk IGhvb2Q= b3RoZQ== IGVpZ2h0aA== cGVhcg== IENhdGFsb2c= dW5uZWQ= IFBIUA== IE1hcmlv IHJ3 IEJBQ0s= IEJvYmJ5 IFJvdGhzY2hpbGQ= IFdpdA== aWJvdA== IHVuc2Vlbg== SW5jb3JyZWN0 IFZT IGtleXBvaW50cw== QUxPRw== NjQwMA== IENveA== dHJhdmVyc2U= IHByb2Nlc3NvcnM= IGdvdHRh 44Os bGV2YXJk IGdlbnJlcw== IFRlYQ== YnRj Y2FzdGluZw== UFJPWFk= IERhdmllcw== IGltcHJvdmVz Z2x1 IFByZXZpb3Vz IGZhY2V0 IE5hbWVk IFN1YnNpZ25hbA== INeR VmlzaWJpbGl0eQ== IHB1bmlzaA== QXJ0aXN0 IHNlbWFudGlj aXB0YWJsZXM= IG5vbWluYWw= KydfJys= IEJ1bGxldA== IEJyb29rcw== ZmFtaWxpYXI= IGRpc3R1cmJhbmNl IGNvbmNhdGVuYXRl 67O0 IGR1YmJlZA== IHB1bmN0dWF0aW9u IGtpbmV0aWM= IGFrdGl2 IGZlYXNpYmxl QmlydGg= RWFzeQ== SGFsZg== TWFz UVZCb3hMYXlvdXQ= U2Fm V3k= Xzs= bmo= dmNz aW5jbA== IHRlbnNl IGZha2Vz IHNpemVy aWNtcA== b3V4 b3VjaGVk ICcrJw== dXR0 IFRyYW4= IFNhcmE= IHZhaW4= IHZhcG9y X18pLg== IDI3NQ== IFJhdg== IFJ1Ynk= c2V0UHJvcGVydHk= IGpq IGVucm9sbG1lbnQ= IHhsYWJlbA== IFZlcm4= IHJhZw== IFlFUw== IFFT 0L7Rhw== YWludGllcw== IGFudGVz IGh1bWlkaXR5 IHRyZWFzdXJl U3Bhbg== U3BhdGlhbA== LiIpOw== IGJpdG1hcA== UG9saWNl IENPTlQ= ZXJhbGQ= 5a6D IHJpZW4= IHNpbGljb24= YWRkcnM= YW5hbHl0aWNz IEVkaW5idXJnaA== Q2Fub25pY2Fs 5Ya1 IGZubWF0Y2g= IEVtcGxveWVl IGJyYWNl IFBvcnRlcg== U3dlZA== 5oyB IGNvbnN1bHRpbmc= IGZvcnRoY29taW5n b3ZlcnJpZGVz 5ZCI5ZCM IEJpdGNvaW4= IGdlbnRsZW1hbg== KC4qPyk= UmVwcmVzZW50YXRpb24= IGNhcmNpbm9tYQ== NDE1 RGlzdHJpY3Q= TWV0ZXI= U2luZw== Y2VyeQ== aG9m aGFsdA== bMOp cGFuZQ== dWF0ZQ== 0ZQ= aW5jb3Jwb3JhdGVk IHRhbGVz cmVuZXc= ZW5p IGNyYXA= ZGVwdA== IHNvZw== IHJlYm9vdA== ZW50aW5n ICcoJw== IGlvdQ== IGliaWQ= IGxpZ24= IGd5cA== IFNwYXJ0 KCk9PQ== IEFyb3VuZA== dGVhcmRvd24= YXBwbGllZA== IHNlZA== IiI6 IE5lYXI= ZXN0YWRv IExT KCIn IFdpbGV5 IGNvYXRlZA== IHJlc25ldA== IEpheno= Y2xhc3NpYw== IHVuYw== IHVuaXg= aGVueWw= IGFwb2xvZ3k= IDE5MDQ= cGVjdGl2ZXM= bmVh MTk1MA== bWVyYXRl IENoYW1waW9u IGRpZmVy IGV4dHI= dHJhaW5lcg== IGNvcnJ1cHQ= dHJhbnNmb3JtZWQ= cHJpc2Vz IHBsYXliYWNr NDUx U2VyYmlhbg== IGJlbGx5 Z2VucmVz b3JuYQ== cmljaWE= KV17fQ== ZG9pbmc= OTc2 IGdsb3Jpb3Vz 0YHQu9C4 bWVhbmluZw== cmVzdHlwZQ== VkVSQk9TRQ== IHByb21vdGVz T2ZMZWdlbmQ= IHRheGk= cmVwb3J0ZWQ= U2VyaWFsaXpl IGNvbXBldGVudA== w6htZQ== YXV0b21hdGlj Y252 IFdvcmtlcg== QUNUSVY= b3NjYWxl IERpYXJ5 IGtpY2tpbmc= IFdISVRF IHNhbmN0 UGF5bG9hZA== IGhvbmVzdGx5 IGNvbmNsdWRlcw== IEthcmw= IFRoZXJhcHk= aWN1bGFybHk= Y3JpdGVyaWE= IHN1YnN0aXR1dGVk IHVuZGVydGFrZW4= 6LaF IEZJTFRFUg== IHJlZHVuZGFudA== IOWvuQ== IGNhcmRpb3Zhc2N1bGFy Pi88 R2Fpbg== ZGlsYXRpb24= bnVl b2Z0 eW9u 6Lw= cmVwbGljYXRpb24= YXRpY3M= IHN2bQ== cmFiYg== IGdsb3Nz IFNrZQ== IHN0aWNrcw== IENC KCcm IE5O IERvdWI= IGNoYXNl cG92 MTA4MA== dXJscmVzb2x2ZXJz IHNhZmVy bHBj IHpQb3NpdGlvbg== IENvbGVtYW4= ZXRhaWxlZA== IHByb2plY3Rpb25z c2hvd2luZm8= Y29ycA== IDE2Nw== bW9kcw== IEZlYXR1cmVz ZHJvcG5h IEFQSXM= w6p0ZQ== IEFtYW5kYQ== IEluc3RhZ3JhbQ== IFNhdW5kZXJz IGNvbG9uZWw= IGNlbGVicmF0aW9u IGJsb3dpbmc= KSsiXA== Vk9D XuKIkl4= IG1rZGly IGZhc2NpbmF0aW5n IFJhaXNl IHBlcnN1YWRl Q29sbGlzaW9u IGNvbXBsZW1lbnRhcnk= b2NjdXBpZWQ= RkFJTFVSRQ== IHB5c3Bhcms= IFV0aWxz IERpYW1vbmQ= JF17fQ== MDM3 NTE1 NzIy SUVOVA== S2lsbA== S25vdw== TW9udA== Vlg= Y2Vu ZmFicw== dG93ZXI= d2lk eng= YWxleA== bGV5cw== IHN1bmc= IHd5 aXN1cmU= IGJ1c2g= IGRpeg== dXJhcw== ICIqKio= MDA2OQ== IGNvbnN0cnU= IGNvbnNjaWVuY2U= IE1U IEJyaW5n IFJhbmdlcnM= IEh1ZHNvbg== IFdITw== IFdvbmRlcg== IEVpbg== XSkvKA== IFRob3I= IFZPTA== IGRpc3J1cHQ= U0VQ IHNwYWNlZA== YmxlbmQ= IFVuaXY= Q2xhdXNl YW55b24= fX0kLg== c2dk NjUx SGVhcA== 0YLRjA== VW5mb3J0dW5hdGVseQ== VXNlclByb2ZpbGU= ZG93bmxvYWRz 5Yik5pat IDE3Mw== bG93ZXJjYXNl ZGVub21pbmF0b3I= 5a6B IGNvbW1lbnRhcnk= IEJhcm9u dHJhbnNsYXRlVWk= 5Y6G UGFydGl0aW9u 6YCg 5Y2w IEFudGk= IG1ldGFEYXRh IGNvbGxhcg== IHRyYWRlbWFyaw== IG9jY3VweQ== c29ja29wdA== U21hcnQ= IGluc3BpcmU= VmlkZW9DYXB0dXJl IGRpZXRhcnk= UGhhc2VyVg== RGVyaXY= cmVwbGljYXM= RklOSVNIRUQ= IMO2ZmZlbnQ= U2V0TGluZUNvbG9y ZGVsYWlkZQ== IHJoZXRvcmlj IFZhbmNvdXZlcg== I0A= LS4= Qko= Q0VOVA== UmF0 UmFuZA== Ym90cw== Z2F0ZXM= bkw= INin2YQ= aXRpbWU= IGZpeHR1cmVz YXNzZXNzbWVudA== IHRoaWdo b3BsYW4= YW5kdW0= IFBpZWNl Z2V0UGF0aA== JylbJw== IExV YWNlbmN5 IFx8Xw== IHVuZGU= IFZsYWQ= bnVtZXJhdG9y T1JC IHNwaXY= IHNwaWtl bWFuZW50 dGhlYW5v cHJvbmc= 44Gk Y2hlY2tWYWxpZA== IDE4ODA= IGVzdGFy MzYy IGdyYWZ0 IHJlYWxpemF0aW9u bGFuZG1hcms= IMOA U3ViY2xhc3M= IE1pbmltdW0= IGFyY2hpdm8= R2VvbQ== IFBhcnRuZXJz IEFSUQ== c29ja2V0cw== c2tpcHBlZA== U2Vjb25kcw== SHR0cFJlc3BvbnNl IGhhcm1mdWw= IEZyYW1ld29yaw== IGNvbmp1Zw== RXhwYW5kaW5n IHJpYmJvbg== IHNvY2Nlcg== IHBhc3Npb25hdGU= IHBvbGFyaXphdGlvbg== IEVudGVycHJpc2U= IEFkdmFuY2Vk Q2hyaXN0aWFu YWx0ZXJuYXRl IHNsYXZlcnk= IEJhdG1hbg== IGNvbXBvc2l0aW9ucw== IHN1c2NlcHRpYmxl 44OH44O844K/ 5byC5bi4 IERha290YQ== NDEy P8Kr Qm9z SGVybw== SXNvbGF0aW9u Sm9u U1VO ZmF2b3JpdGU= aHNwYWNl bmlhbg== wpM= 6b4= CiAgICAgICAKICAgICAgIA== IGJyaWRl ICc9Jw== IGhtbQ== IGxlbnQ= b2xlcmFuY2U= IHVo IHNlYW0= b3Ns bWVudG8= ZXdheQ== IEhvY2tleQ== IE93bg== cG9ydHVuaXR5 IGRpc2NvbnRpbg== IHNjb3Jlcg== MTk2Ng== IFtdKSw= IG1pbmlzdGVycw== ZGFkZQ== TGlzdEl0ZW0= IGxvY29t ZmV2 RGF0YVNvdXJjZQ== b2xvZ2ll VVJU ZGF0YXBhdGg= IGZhY3R1YWw= IGNhcmI= V2VhdGhlcg== IG1hcmtpbmc= dGFpbmVk Q29tcG9zZQ== IGRyYXdlcg== dW1iYWk= Z3Bpbw== IG11c2ljaWFu IHNwZWN0YWN1bGFy UHJpb3I= IHNvdWxz IGNvbnN0aXR1dGVz 5YCk IGp1bXBpbmc= b2NvbXBsZQ== VHJ1c3Q= IFNhZmU= IFNwcmlua2xl 77+977+977+977+977+977+977+977+977+977+977+977+977+977+9 IGN1YW5kbw== IFJhbmRvbUZvcmVzdA== IHRvdWpvdXJz IGJyaWdhZGVz IFJlZGlzdHJpYnV0aW9u IGRlc3BlcmF0ZWx5 IFJlY3RhbmdsZQ== T2ZmaWNpYWw= IENlcnRpZmljYXRl IFF1ZXN0aW9ucw== U1VQUE9SVEVE IGZsdWN0dWF0aW9ucw== T2x5bXBpYw== LDpdKQ== QXdhcmRz Qm91bmRlZA== QklORA== R0NU SVVT TWlkZGxl TWFwcGluZ3M= UGs= UGlj UnM= U2xlZXA= ZXVycw== ZmVsZA== Z29k aWVt bWxpc3Q= ZXJpZQ== c3Rvd24= aXRpYw== IGluaQ== IGJlbmQ= IG11dGU= IEFzdHJvbg== IHZpZGU= X18oJw== IFBjZA== IERhZA== IFJz IFdhbnQ= IFdvbGY= cGVyZmVjdA== IGxldXI= IFVocg== SW5z IEluc3VyYW5jZQ== d2VrYQ== IGRpc2Nvbm5lY3RlZA== U3RyaQ== SVRJQ0FM IFByb3Rlc3Q= ZGF0dW0= NjUz d2lkdGhz IFp1 IGVtcG93ZXI= RU5USVRZ IENsYXJh SGFuZGxlcw== IGFuc3dlcmluZw== ZGVjb2Rpbmc= 6K+0 IGNhcmVz IFVwZGF0ZXM= aXJhYw== IEFtb3VudA== YnJhY2U= IEVtcGxveQ== IGFzc2Vzc2luZw== IGxzdG0= IGlubmF0ZQ== IHNhbmR3aWNo IGNhdGFsb2d1ZQ== IGluZmVyaW9y IHZpbmVnYXI= Y3Vtc3Vt IFRlZGR5 VHlwZWQ= IE1vbmdvQ2xpZW50 IEJhcm5lcw== IGN1cmlvc2l0eQ== KVs6LA== QlVS TGltaXRz T1ZB Z2Rr aGlu dHRl IGNldA== YW5hcw== IHBpdHRp IG9ncg== IHN5c3Q= IGludmVuaW8= IGludGVzdGluYWw= IGJpcA== IG1x IHJlZHJhdw== IGjDoQ== aWdpb24= dW1hdGlj YWJicg== IENyaXM= b2Rvcg== b2R1cw== IiwiLg== IG9uZGVsZXRl ZW5kdW0= IGFuYQ== IFJobw== IHso IEdvdg== IGthcHBh IFVt c2hp dGVzdGVy IDE5MDI= IDE5MDk= IG9wYXF1ZQ== bWVyY2hhbnQ= IENoaXA= JywnJywn RmlsZVN5c3RlbQ== YXJuYQ== IDIwOQ== IHF1ZXVlcw== dG9wT2JqZWN0 IGNlbnRyZXM= IHNvbGw= IGFuYWxnZXM= RUxT IFN0cm9uZw== IGFkdmFuY2luZw== Y3Jz IExvb2tpbmc= IGFuZ2k= IFNjaWVudA== IGJ1c2luZXNzbWFu S0VZV09SRA== IG1vbWVudG8= cHJvYmFibHk= c2VxdWVudA== w6hyZXM= IGxvY2tpbmc= KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq IHZlcnRpY2FsbHk= UGVlcg== SXRlcmFibGU= PT09PT09PT09PT09PT09 IHNwb29u YnVsYg== IEZvcnRp IHB1cmNoYXNlcw== Q0FQRQ== Y2hhcmdlcw== ZXhwZXJpbWVudHM= IHByaWVzdHM= cmVjZW50bHk= IE90dG8= UmFpc2U= YXV0b2dyYWQ= IG9waW9pZA== bXVuaXRpb24= TElCUkFSWQ== Iz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0= NDI1 NjE1 Q3JpdGljYWw= RW5zdXJl R2x1 UGF1c2U= U3Vk U292aWV0 VmljdG9y Ym9uZXM= Z2lv bmNz dml2 4YQ= c3Ryb20= aXRhcw== IGNyeXB0bw== IHd1cg== IHdhdmVk IHdpY2tlZA== IG5leA== IGx1bmdz ICgpLg== IEF3 IEFidQ== IEN0 IENhbm5vdA== YW1heA== IFBpY3R1cmU= Y29uc3Ry IEZyZXF1ZW5jeQ== IGFuaW1l IExQUw== YXNlaw== IFdJRA== b3V0ZXM= IEVzYw== IFRoZW1l MDE0MA== c2hpdA== IHht SW5uZXI= UmVwZQ== YXNzZXJ0R3JlYXRlcg== IGFzc2lzdHM= cmF5b24= MjAyMg== IHNlcmE= cG9zaXg= Q2hvaWNlcw== IFFEZXNpZ25lcg== IG1pbmliYXRjaA== J10sWyc= SW50ZW50 IG1hdHJpeg== b3ZpY2g= IGNoYXJ0ZXI= NDgx QWxiZXJ0 0YLQuA== OTYy IFZhbG1vbnQ= IElOREVY IGdvdG8= IHNpbW1lcg== bW9kaWZpZXI= cmVxcw== b2dyYXBoaWNhbGx5 w61hbg== 4YCK cmFja3M= IHR3aWxpbw== cHJlZGljdG9y IE1hcnZlbA== dWVzdGE= IHNpbWlsYXJpdGllcw== IEFwcENvbmZpZw== c25y aW5uZXJz cG9zaXRpdmVz IGFuYWx5c2Vk IFN3YWdnZXI= IGlycmU= IEludGVydmFs IFNwZWNpZmlj IHdpbGRsaWZl IENIQU5HRQ== YnJvb2s= IEhhbmRsZXI= IFRlY2huaWNhbA== IEJheWVzaWFu IGFyY2FkZQ== IGxpc3RlbmVycw== ICg/LA== RXZlcnl0aGluZw== IEtvbms= IGluZXZpdGFibHk= b21vcnBoaWM= IEFsdGVybmF0aXZlbHk= IGRlc2NyaXB0b3Jz IGVuYWN0ZWQ= 44OV44I= IEluZG9uZXNpYQ== QUdUQ0FHVEM= ICInJyIs IGNlcnZpY2Fs SW1hZ2VUb0ltYWdlRmlsdGVy MzY2 S1Q= S1c= S2k= aHVuZw== d2lmaQ== 6Jc= aGV1cg== b3JpZQ== IHNpc3Q= IGJyb3dzZQ== IGdhbno= IFRPVEFM IFNlZA== IHN0ZW4= IENVUg== IHZlcw== IHZpdmlk IGNvbnNl IE1JUw== IEZTTQ== YXRoaW5n IEJpcg== IGFuZXN0 dWx0YW4= c2V0VGFi IEVzcw== IEVpZ2h0 PSclKA== IHh4eA== dWRp LS0tLS0tLS0tLS0tLS0tLS0= IFRob20= IFRoYWk= IDE5Nw== bG9nZ2Vycw== bWF4bGVu IHN1YnN0cmluZw== IHdvcmtzaG9w IGNsYXNzbmFtZQ== YWxlYg== IGJldHJheQ== IGZsaWNr IFJldmlzaW9u ICEh d2h1ZHNvbg== b2xvZ25l IGRvbmF0aW9ucw== cm9sbHM= Mzcy IG1lZGlldmFs IDE2OQ== w6F2ZWw= OTQx YmJiYg== VFJM IDE3MQ== YW1lbnRhbA== YWNjZWxlcmF0aW9u bWFyaW5l IFJlZ2lzdHJ5 0LDQtg== IFJlZGlyZWN0 bWFsaW5r dXZ3 IGFtYml0aW91cw== QVJHSU4= IM68bA== IHZlbnRyaWN1bGFy IGFyYml0cmF0aW9u IFBvdHRlcg== IGJyZWFzdHM= UGhvbmVOdW1iZXI= IGJhdHRhbGlvbg== MzMzMzMzMzMzMzMzMzMzMw== 44K544OI IENyaW1pbmFs IGZyaWdodGVuZWQ= 4paI4paI4pWR IGx1bmFy IFRyaXBsZQ== YGBgYGBgYGA= IHNhZ3Rl IEhvcGtpbnM= IFJFVFVSTg== IE1hbGF5c2lh 7Jy866Gc IGRpc2d1c3Q= IGxvbmdpdHVkaW5hbA== Ozs= Pi0= Q1c= UmFpbA== VW0= bXVjaA== DQogICAgICAgICAgICAgICAgICAgICAgICAgIA== IO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vQ== cmVwdA== IGZ1c2Vk IHdyZWNr aWdlbnM= IFRm cGVp IFBlbA== IHJpYw== IGFsbG9jYXRl c2V0Q29sb3I= IEV2ZQ== IEVsYXN0aWM= cHJvY2VkdXJl ZGF0YWZpbGU= c2hpbmU= IGVudmVsb3A= IGVucmljaGVk IEplbmtpbnM= dXJscGFyc2U= IHNjYW5uZWQ= IHNvbWV0aW1l MTk3MQ== IHF1YXNp YXJjaHk= YXJjaGl2ZXM= aW5kZXhPZg== IFJldmVyc2U= IFJlcXVpcmVz w6l0 cHJlcmU= TGlzdGJveA== cGxpY2FibGU= IGFtbXVuaXRpb24= cnVuYw== cmlwcGVy IHNraW1hZ2U= IG1lc3NhZ2Vib3g= IG1vZHVsdXM= KF8o UE9Q KC0o dW5rdA== IGZyaWN0aW9u IGVuY29kaW5ncw== IFB5T2JqZWN0 VFJJRw== IFBoRA== YWZmaW5l IGFkdmlzZQ== Il0pLg== aXZlcmVk R2VvZ3JhcGh5 cHJvYmFiaWxpdGllcw== fV97LQ== IGNvbXBhcmF0aXZl IG9yaWdpbmF0ZWQ= ZGxn bWVzaGdyaWQ= ZXhpc3RlbnQ= IFN0dWRpb3M= Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= U2VjdXJpdHlHcm91cA== UmVxdWlyZWRNaXhpbg== IGZhaXRoZnVs YW5hbHl6ZQ== IGh1cnJ5 IGNlcmVicmFs IHhibWNndWk= IHJlbGF0aXY= IEFnYWluc3Q= IOyeiA== TnVtYmVyT2ZIaXRz UGVyZm9ybWFuY2U= IG11c2hyb29tcw== IGFkb2xlc2NlbnRz aUFnSUNBZ0lDQWc= b3BlbmN2 IFdlYkRyaXZlcldhaXQ= Z2V0RWxlbWVudEJ5SWQ= LyQ= NzU1 QWk= R3JhZA== VWJ1bnR1 aGFydA== amFz em4= 5qI= INGA0LU= IHRzdA== cmVhbGx5 IGNlcA== IHNhcg== IHNvdXRoZWFzdA== aWNhcg== IGRlbnRhbA== IHRvbWI= IGhk aWdlbA== Jyxc IGd3 dWxzaXZl IFNwZWFrZXI= IElSQw== aW50b3No IHZpbmVz YW5kaQ== IERyYWlu IERpc2Vhc2U= IFJhbg== IFdv IEVsZWN0aW9u IGNvYWNoaW5n IFVybA== YmVyeQ== IEphZw== IFZvaWNl IDE5MQ== IHRoZXJlaW4= IFByb3BhZw== IGltcHJpc29u IGN1cnM= dW50b3M= IG1vZHVsbw== ICgiXA== IHFm IHN0YW5kYWxvbmU= Li4uLi4u TG9va2luZw== QW5pbWFs IGNsb3Nlcw== YWN0aW9uc2FwaQ== IFN0YXRlbWVudA== IHNlbGRvbQ== IGNhcmRpbmFs aW1wb3NlZA== 0LDQsw== ZHJ1Zw== TWF0Y2hlZA== IG11bHRpcGxpZWQ= Ym9udXM= IG1lZGlhdGVk aGV4bGlmeQ== RGVwYXJ0bWVudA== KCIiKSk= IHRyYW5zY3JpcHRz U3RyZWFtSGFuZGxlcg== IC0tLS0tLS0tLS0tLS0tLS0tLS0t YmV0dGVy dm9jYWJ1bGFyeQ== IGZhcm1pbmc= IGRvY3R5cGU= IGVsaW1pbmF0aW9u aXB0aWM= IEVybmVzdA== IE1vZHVsZXM= IGFsaWVucw== INCx0Ys= IFNhdmluZ3M= IE5DQUE= U3R1ZHk= IHNsYXVnaHRlcg== IEh1Z2hlcw== 6L+Q6KGM IGFxdWVvdXM= aW5ndWlub0lERQ== Kj8= SHVuZw== TWFrZXI= UkFU U2l6ZXM= XCxc ZWlk d2lmZQ== IGFwbw== YXRpYQ== c3Rt aXRhdA== aW9uaWM= IG5hc3R5 IGhhbG8= dXR6 b2xpcA== IGRlc3M= IGRlc2VydmVz IFRpZ2Vycw== IFNvbnM= IEN5cg== YXBvbnM= IGNvbmNlaXZlZA== X18i IE1haw== Z2V0VGV4dA== IHdoYWxlcw== IERQ cXVleg== IGp1Zw== ZHVhbA== IHByZWY= IGFib2FyZA== IFZBUkNIQVI= IEtlcm5lbA== MTk2OA== Oi8vLw== dmVuaWVuY2U= IG1pbmhh am9pbmluZw== IG5vZGVOYW1l dHRyZQ== fX19fQ== IHJlZmluZQ== Y3VycmVudFRleHQ= IE9yY2hlc3RyYQ== ODU5 Q29tbXVuaWM= 4YCZ QW5kcm9pZA== IGxpZ2h0bmluZw== aXJtaW5naGFt IGNoYXJhY3Rlcml6YXRpb24= IOyCrA== IENvcnJlY3Q= Z3V5 IGxheWluZw== IHNvdW5kaW5n IEZyZWVDQUQ= UmVtb3ZlZA== Y250bA== 4YOU IHRyb3VibGVk ZmFsbHM= IGxhdW5jaGluZw== IGNvbG9uaWVz IGRyYWZ0ZWQ= IG1hbnVhbHM= 57uT5p2f fS17 QmluYXJ5UHJvdG9jb2w= IHNvY2lhbGx5 IGRpc2FwcG9pbnRtZW50 IHVud2FudGVk YXNzZXJ0QWxsRXF1YWw= bGh2 SUdOT1JFQ0FTRQ== IHBvbHltb3JwaA== IGFubmVhbGluZw== IFNpY2tsZXM= IHN0b2NoYXN0aWM= Y29uY2VudHJhdGlvbg== IGhvdXNlZA== IFFQdXNoQnV0dG9u LF0s NTYz RmluZQ== SGc= SWk= VmVu b2Fk fik= 6aA= aW5vbWlhbA== IGFpbw== YXRhcw== ZW5xdWV1ZQ== IHRoZXNpcw== IGZpc2hlcg== aXNhbHBoYQ== ZXNj dXRt IGx2 dGhvcm4= MDAxMw== IHNlaXo= aW1hcA== ZW5kYXJz IEZlbWFsZQ== IERFTA== IGV4Y2x1ZGluZw== ZXN0cg== IDMwNA== IHdlYmJyb3dzZXI= PSJb c29ldmVy IG9uZXNlbGY= Y29udHJpYnV0b3I= aXNob3Bz IGxvZ0Z1bmM= IENoYW1iZXJz YXR0bGVz IFJlZmVyZW5jZXM= YXR0ZXJzb24= RGF0YXNldHM= dHRm XFxcIg== IHN1cGVydmlzb3I= VW5pZm9ybQ== cG9zdGZpeA== IGNvbnRlbnRpb24= IGRlc2NlbmRhbnRz IG1ldGFw Njkz QWRq IFNlcnZlcw== IG1lcmN5 UFJPUEVS IEZsYWdz 6L+w IENvbnRyYWN0 IHVuZGVyc3RhbmRz IHNlbnNhdGlvbg== IFJlZHVjZQ== IG11bHRpcGxpYw== 5Y2h IHRydXRocw== IEJyb2tlcg== 0LXRgtGB0Y8= IENIQVBURVI= IGJpbGxpb25z Y29vcmRpbmF0b3I= IGV4aGliaXRz ICcqJyw= Y29tYmF0 IGVsZXZhdG9y IGxvbmVseQ== d2lraWJvdA== dHJpcGxl 6L+Z6YeM PT09PT09PT09PT09PT09PT09PT09 IGN1Ymlj IHN1bW1hcml6ZQ== Z2F0aGVyZWQ= fX0oe1w= 0J/RgA== SW50ZWdyYXRpb24= Q29udGludWU= IFBvcnR1Z3Vlc2U= IOyglQ== IGR5bmFzdHk= IHByZWRvbWluYW50bHk= IEFwb2xsbw== UkVNT1RF IGhvbWljaWRl IOyeheugpQ== MDM0 NTE0 REVO RUxF SlU= TGF0aW4= UGFpbnQ= YmJveGVz Y3Nw Y3B5dGhvbg== bWls cGFkZGxl dGlsbA== 54E= IGZwYXRo IGJpdGNo IGhpZXJhcmNoaWNhbA== IGlyaXM= IGxt b3J0cw== IFNOUg== YWJsbw== IEN1cnQ= YW11cw== dHVybmVk Y29uZmVyZW5jZQ== aXZpYQ== IDMwMw== ZXhwb3Nl IFVD PSIlKA== cHJldmVudA== Y292ZXJz Ym9vYg== IEludmVudGlvbg== IiIiLg== dWRlcw== aWVydGU= cmV0dXJuaW5n U2V0VGV4dA== INCd IGdyb3VwYnk= ZGF0YWRpcg== IHByaW5jZQ== 4YCF IE5vdEZvdW5k VkVSUw== IGRlbm90ZWQ= 5ZCv IGNvc3RseQ== IHJlbWluZHM= IEVYVA== IHBvb2xpZQ== IHBlbmFsdGllcw== 5Li656m6 Q29ycmVjdGlvbg== IGFudGliaW90aWNz 5Z2H ICcqJzo= 6Lez UHJvZ3Jlc3NCYXI= IENvbXBvbmVudE5hbWU= b3Jlc2NlbnQ= IG9ic2N1cmU= IE1lbGxvbg== 6528 LDo= MDUw Mzc4 Q29w TGl0dGxl UmFpc2Vz Wm9vbQ== ZmFzaGlvbg== aHVy cHVtcw== dGljYWxseQ== dnVs dmFyaw== d3Y= 0JE= 6Z8= IGNlbnNvcg== IGZhZGVk IHdvb2w= IGJhbQ== aWNj aWNpYXJ5 IGhj IGhn cmFo IGVFcnJvcg== b2xwaA== aWdyYXBo IFRyb3k= b21hdGVyaWFscw== IGJlYXJk a2Vo IFByYWN0 IFBpY3R1cmVz IE5E cXVhcg== Z2V0c2l6ZQ== Z2V0R3JvdXA= IGFudGg= IERX IGhlZWxz IEdlbnQ= b2d1ZQ== IHBsYWM= IGNsYXk= IG91dGxpbmVk IFwiJQ== c29hcA== IGNvbXBhcnRtZW50 IDE5MDc= IHNjaQ== IHNlcmdlYW50 cHlwaQ== IGNvbW1vZA== IGAo IHRyYWplY3Rvcmllcw== IG1ha2V1cA== bnBj 44GR VGVzdFJ1bm5lcg== e31d QVBFUg== bWl0aXZlcw== bWFya2V0aW5n ICgiJQ== IHJlZnVzYWw= aXN0cmF0aXZl c3VwcGx5 Ym90dGxl IEFiZA== TmVpbGw= IG93ZWQ= IGdsb2JhbGx5 RGlyZWN0Rm91cmllcg== bWtkdGVtcA== c3VpdHM= V29ya3NwYWNl IGNhc2lubw== Q29tbW9uRGF0YQ== Q29ycg== IGluZGVudGF0aW9u RE9XTkxPQUQ= 5pa55byP V09SRFM= IEFuc3dlcg== IFJhbXNleQ== U1BFRUQ= IGxlY3R1cmVz WUVBUg== IFdlZWtseQ== IGRlbGlnaHRlZA== IHJhYmJpdHM= IE11bmljaA== IGVtYnJ5b3M= SXJpc2g= IFByb2JhYmx5 IGFwcGVsbGF0ZQ== IFR5cGljYWxseQ== UmVjb25zdHJ1Y3Rpb25JbWFnZVRvSW1hZ2VGaWx0ZXI= IGtlcm5lbHM= IHNocmVkZGVk RGlyZWN0Rm91cmllclJlY29uc3RydWN0aW9uSW1hZ2VUb0ltYWdlRmlsdGVy MDIx MDk3 Qmc= U0NS ZmFpcg== Z3JlZA== emlsbGE= 66M= IHRyYXk= cmVib290 aGV0dGk= c3RlbXA= IGNkZg== ZWxw bXBvb2w= aWxpZ2h0 ICgs aXN0aW5n IENMUg== c2Vyb2xl IGFuY2U= IEdyaQ== IEdhdGVz IEVN IGNvdmFyaQ== amVjdGlvbg== IFVF IGNvbnRhbWluYXRpb24= IFZS IEtybw== IEtlcmFz IHBhcmtz bGVkZ2Vy IHBlcm1z IG15b2NhcmQ= bWJsZWQ= IGZsYXY= RVNN IHB5cXQ= IHB5bXlzcWw= aW5zdWxh IGNvbnRpbnVhbGx5 c2xj IGNvbW1hbmRlcnM= dmFybmFtZQ== IHRvcG9sb2dpY2Fs cG9zdGVyaW9y IHNpZGV3YWxr IEJlaGluZA== w7xsbA== 5YWx IHRyZWV2aWV3 IGxhbmRtYXJrcw== ICctJyw= IGdlb21ldHJpYw== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg YWxsZWxl RmxhdHRlbg== IGludmVzdGlnYXRvcg== 55So5LqO IGNvbnN0cnVjdGluZw== IE5ldGZsaXg= IEtlcGxlcg== 5b6F IHRyYW5zcG9ydGVk U3ltYm9scw== d2FycA== IFNRTGl0ZQ== IGFyY2hpdGVjdHVyYWw= IHZvaXI= IGluZm9ybWFs IEVuZ2luZWVy RnJlZXpl IEFyYWJpYw== IG5vbWluYXRpb24= UHVibGlzaGVk IElDRGVsZWdhdGU= QnJva2Vy IHF1ZWxxdWU= IG5lZ2xpZ2VuY2U= Q09NUExFVEU= IGNvbmRlbW5lZA== IENvbG9tYmlh NTk1 QWs= Q3R4 Sm9o TWo= TWFo WEk= YFw= ZWdv Z3Jhbg== amFk dHRz 6I0= IGJvdW5jZQ== b3VzZWw= bXB0aW9u cmFtcA== IFNldmVudA== IHN0YWdpbmc= IFJlbmFpc3NhbmNl YXJnYQ== MDEwNg== IHBsdW0= b2tpYQ== IGNvbXBhcmVz YXdrcw== IEhleQ== CgkJCSAgIA== cHBpbmdz INCe Y3Np YXJub2xk Q09NRQ== YWhyZW4= IGluaXRpYXRl IGNhcmluZw== Q29vcmRpbmF0ZXM= SVBF ZG9vcnM= IEdlbmVyYXRpb24= 44Kz IHNwZWNpZmljYXRpb25z IGN1c3RvbXM= IG9yZ2FuaXo= IEZsYXR0ZW4= U2NhdHRlcg== IFdhcm5lcg== QVJFRA== IOKZ IGV4aXRpbmc= c2tpcFVubGVzcw== Q1BQ 6Zet IGxhc2FnbmU= 4pSI IGFtYmln IHN0aW11bGF0ZWQ= IHN1YnN0YW50aXZl IGluc3RhbnRpYXRlZA== IEZpbmxhbmQ= IGRvbWluYW5jZQ== c2NyYXBl IGxlZ2VuZGFyeQ== IGRlZmljaXRz 5o+P U09DS0VU IGNpdGl6ZW5zaGlw IE5vYmVs 5oOF5Ya1 IEh1bmdhcnk= IEFyZ3VtZW50UGFyc2Vy IE5pY2hvbGFz IEFybm9sZA== aW9jZXNl IE1hZ2dpZQ== NDcw Q3JpdGVy RXRo SVJF TEg= UmV3 cms= c3Bhcg== dmlsbA== emllbA== emhlbg== IGFlcmlhbA== IGNyYWNrZWQ= IGNvY2FpbmU= IGJvZw== IGxqZXQ= IENCUw== IENhbnlvbg== dW5kZQ== IDI4OA== IDI3OQ== Z2V0SW5zdGFuY2U= IHdob2xseQ== IERvdA== J11bLQ== IEdpbGw= IEV5ZQ== dXJlbg== IGxldmVy IGtpbmdz ZXB1Yg== IGFyc29u aWV1cg== SW5kZWVk IFZpbmU= d2VhdmVy UmVhbGx5 bW9vbg== IHBvc2Vz QVJO IDgwMDA= IGxpa2V3aXNl IG9iamVjdGlvbg== cmlwY2lvbg== Y2FsaW5n 0LDRgQ== IG1vbnVtZW50 IGVzcGVy IHN1cGVydmlzZWQ= IHJlZmluZWQ= ZGVsaW0= IGFudGlveGlk IFBhcmFsbGVs 4pag V2l0aE5hbWU= U3Bhd24= d2ViYXBw IGhlYXZlbnM= 77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9 VGhyZWFkcw== UEFY bHVpcw== IEltcHJv Y29uZmlybWF0aW9u IG51dHJpZW50cw== 5pyA5aSn cHVyZ2U= 56S65L6L SGFydmVzdA== IHB1bXBpbmc= IGp1cmlzZGljdA== IEdyZWF0ZXI= IEVxdWF0aW9u cGFydGljaXBhbnRz Y2lmYXI= IGludmFyaWFudA== YWJjZGVmZ2g= b2NhcmJvbg== ISku RklH TnA= UmV3YXJk VkI= XSU= Y3Nj ZmV3 Z29uZQ== 6ak= IA0KICAgICAgICAgICAgICAg gaw= aW5zdHJ1Y3Rpb24= IGFyeQ== IGhhY2U= ICIqKg== IFRhbmc= IElFRUU= IDIzMw== IFBBU1M= Jzoi IE1vbnM= IE5C IEZhdA== Y2xpbQ== IFJFQw== IG1ldGU= IEh1cw== dWJlcnQ= c2V0SG9yaXpvbnRhbA== b2tpZQ== ZWxsaXBzZQ== IGRvaXQ= IFZpc2lvbg== IDY0MA== U3RyZW5ndGg= MTkyOQ== MTk2Nw== IHdob2V2ZXI= TEVZ c3RhcnR0aW1l cm91bmRz IFJlZWQ= IFdlYmI= cHJpbQ== IGF2YWl0 IFNoYXc= IikpLg== IG1ldGFscw== IGhhcHBpbHk= 44OX IGNlcnRhaW50eQ== IFNlcnZl IGxlZ2VuZHM= aHlkcg== IG1lcml0cw== 6K+d YmF1bQ== IGZyb250YWw= IGZvcndhcmRpbmc= IE1lZGl0ZXJyYW5lYW4= Zm9ydGlvcw== IOKCrA== IGF1dG9tb2JpbGU= IHJlc3BvbnNpdmU= IHJlbWVtYmVyaW5n IGNvbmNlbnRyYXRl IOaP IHZhbmlsbGE= ZW51bWVyYXRl Ym9ybw== IFJvbWFuaWE= IFJldHJpZQ== aHduZA== IGRlYnV0ZWQ= IGludGVycG9sYXRl IGxleGVy IGludGVudGlvbmFsbHk= IGRlbGliZXJhdGU= UEFSRU4= Q3JlYXRpb25Gb3Jt IHByZWRlY2Vzc29y IGFubm95ZWQ= In19 KSE9 LXs= QklP Ymls Z290aA== acSH a25u bmdyYW0= c2F3 dGlwcw== IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg cmVpbmRleA== IHBvcmU= IHNtZQ== IHNhbms= IGxhbWVudA== b3Rvbmlj cmFpc2Vk IHRoaXJ0ZWVu IGdpdGh1Yg== IHJwbQ== IEJpZA== IEJhc3M= cGxhdA== IFJheg== IGhlaWdodHM= IFdB IFdvcmRz IEV1bGVy YmVyZ2Vy IGNhbmNlcnM= IHVucGxlYXNhbnQ= IFZpaw== ZWN5Y2xl MTk2Mw== YXh0ZXI= IHN1YnQ= Q2hpY2Fnbw== IGtub3Q= Uk9T Uk9CRVJU IGJsYW1lZA== ZGF0YXQ= c2lkZWJhcg== IHBvc3RvcGVyYXRpdmU= cG9wdWxhcg== dW5nbGU= TUFLRQ== b3RveGlj 5LuY aWph 57ut TGlua2Vk REVTQw== cmlmdWc= 5beu RFRTVEFSVA== IFZpc2l0 MDEwNjg4NQ== IFdvb2Rz cHJpdmFjeQ== IGVsZWN0cm9kZXM= Q29uc3RyYWludHM= IFNhbmRlcnM= Y2hyb21pdW0= IE9yaWdpbg== MTIzNDU2Nzg5MA== IEtlbm55 IGFmZm9yZGFibGU= ZXRoZXJuZXQ= VG9tYWRvcg== RXVyb3BlYW4= IEV4cGxvcmVy IExpdGVyYXR1cmU= IE5lZ2F0aXZl ZGV0ZXJtaW5l K1s= MzE4 OTc4 Sm9uZXM= UHRz UU9iamVjdA== U29ydGVk YmFr a2lk cG1vZA== 6Iw= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IHRpZGU= IHR0bA== IHBhbmU= cm9iYmlldw== IGJpc2hvcA== IElTUw== IENMTw== IHNlY3JldGlvbg== IDI3Mw== IFByYWN0aWNl IE1hcHM= IEZS IEZsZQ== KSkpKSw= IEJ1Y2g= IEJyaXN0 Jyki IGplcg== b2J1dHRvbg== IGFyaXRobWV0aWM= dGhlcm5ldA== IDE5MDM= UmVjb21t U1RF IG9wcG9zZQ== IFllbWVu IHN1Ym1pc3Npb25z IGJvb20= aWZpY2E= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IFtdfQ== bWF0cml6 J319 cmVscGF0aA== IGZvcm11bGF0aW9u fX0kLA== b3Zhbg== b3BlbmFwaQ== IGRlbHRhcw== 0L3QtQ== QU1FUw== SW5kZXhFcnJvcg== IGFzc29jaWF0ZXM= VVBMT0FE UFJPR1JBTQ== IGhvcmE= IDIxMDE= U0hPVA== IFNvbWVvbmU= U09T IGFuYWx5dGljYWw= IG1hcmNoZWQ= eGltYXRlbHk= IHJvbGxiYWNr IGNvbGxhZ2Vu IGhlbG1ldA== UkVTT0xVVElPTg== aGV0aWNhbA== Y29tcGF0aWJpbGl0eQ== IG1keg== IHZhY2NpbmF0aW9u IGRvdWJsZXM= 7Iq1 IGJvdGhlcmVk IEFzc29jaWF0ZWQ= U0lOR0xF SU1QT1JU IERpeGll Y2hsb3Jv ZHluYW1pY2FsbHk= 4YOU4YM= MDcw Nzc1 R0FD SElH S29u TWlsaXRhcnk= TmF2aWdhdGlvbg== UGFpcnM= VHVlc2RheQ== Y2FtZQ== Y29nbg== ZGFj bWlsbGlvbg== bmFudA== 15E= 6Kk= 6Lo= aW5pYW4= IGZpY3Rpb25hbA== IGluc2VjdHM= IGJ1bms= IGJsZXNzZWQ= aWNlbGlzdA== IHJlY2Vzc2lvbg== YXNpbg== aWxsZXM= Y2hhbmc= KCkj dW1hbm4= YW1hcw== Y29ueQ== b3Nv YXJ0aXN0cw== IHByb2ZpbGVy IEhDVg== cmVzc2U= aWxsYXRpb24= YXBwSWQ= aWJ1 dHJhc2g= IGVuZm9yY2Vk IHVudmU= LS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== dXNlcklk IFlh IHNwdW4= Q29udmVyc2lvbg== Zmxhbms= ZmxpcHBlZA== c3RhdGVtZW50cw== cHBsZQ== 44Gd YW55YQ== IGltcGFydA== ZmluZGluZw== IFppb24= SEVB IDE2Mg== MDg1 IGRpdmlkaW5n IGRpc2Nlcm4= b29vbw== Q0xB LS0tLS0tLS0tLS0tKw== cGF0cmljaw== QUNLRVQ= SGVsdmV0aWNh IEF0dGFjaA== IFZlcnRleA== 5LiN5a2Y5Zyo IHZhbmlzaGVk IG5kYg== 6KeS IFJlc2Vydm9pcg== INGG IGNvZ25pdGlvbg== IG1lc21v IGF0bW9zcGhlcmlj MTIzNDU2Nzg= IEJ1ZmZlcg== IGNvbmNhdGVu IGRpc3RvcnRpb24= IHdhcnJpb3I= IGV4cGF0cmlhdGU= RVBPQ0g= MDU1 NDk5 NjE2 RWFydGg= RmQ= SmVzdXM= TEFU UnU= ZWo= ZXVsZXI= ICAgCiAgICAgICA= ZXJw IGNn YXJ0ZQ== IHBpZ3M= IHJlbnB5 IENyeXB0bw== b3dsZXI= b3Bpbg== IDIzMg== IE5PUg== IE5hbmN5 cXVpbg== IFJQQw== IEhvbQ== J10iKQ== IFdP ZW1vcw== IDMyNQ== IHdlZWQ= IHBsaXN0 ZW5zYXRpb24= ZGJ4 YXNrcw== U0VM IHNwZWxscw== IGlkaQ== IHpsaWI= IFJldmVudWU= IGFzc2VydHM= IGNvbWljcw== KCksJw== IFhtbA== bWF0aHNm aWdyYW50 IEFsdA== IHRvcGxldmVs Z25taQ== TGVhbg== dHJlZXZpZXc= IFRlYWNoZXI= QXNwZWN0 IGRyYW5r IGluZmluaXR5 IOyE IGVydXA= IG1pc2NvbmR1Y3Q= IGNhcHR1cmluZw== IFNwZWNpZXM= INep VmlzaXQ= ZHVjYXRpb25hbA== IMK7LA== IG51Y2xlb3RpZGU= R3VhcmQ= IG5laWdoYm9yaG9vZHM= 6K+36L6T5YWl Iy0qLQ== RGF0dW0= IGxleGljb24= V0lORE9XUw== RU5TT1I= ZGVsaXZlcg== IGFubm95aW5n QnVsbGV0 IGNhdGVnb3JpY2Fs RFFN dHJhbnNjcmlwdA== 57O757uf IGdyYXRpdHVkZQ== IGVtb2pp 6aaW UFJFQ0FURUQ= IFVuacOjbw== IE5ldmFkYQ== Q09ESU5H cmFiYml0 KVsi ODk4 Oj4= Picu SElEREVO UmFpbg== U2F2 VUY= Y2ly Y29uZQ== Z3Jvdw== Z2Rz d2ljaGVz 5bM= 65A= IHRyZXM= ZGV1dA== IHBvbmRlcg== IGh1bms= YWRo aXN0YW5p IElH YXBr dW5pZg== IE1hc29u IFJFTA== IGhlaXI= ZXN0eQ== IEdG IGto IGNsZW4= b21tZXI= bGlzdGJveA== SW52bw== IDE5NA== IGRpc3J1cHRpb24= YXJpdW0= IGltZGI= IDY2Ng== MTk0NQ== U0VDVElPTg== SURJ J30pLg== dHNreQ== J10pKSw= IGNvdXJ0ZXN5 IEFscmVhZHk= bWl0aWU= IG1vZHVsYXI= bWFya2V0cw== ICgiLQ== IMOn IG5vbmNl w6FyaWE= IGRpYW1vbmQ= c2VuZGxpbmU= IDI1MQ== IGRlc2NyaXB0aW9uUmVmZXJlbmNl NDcy IGNoZWFwZXI= IC4uLl0= IFBlcmw= IEJsYWtl UFJPVEVDVA== IGFmZmw= TWVhbnM= 6K66 4KSo UGFydHk= IGNvbXBldGl0aW9ucw== cmFzb3VuZA== Y2VlZGluZ3M= INC/0L7Quw== U0NBTg== IGRlYnRz IGF1ZGllbmNlcw== YXZlcm4= 0L/RgNCw0LI= IGZvbGxpYw== U2tpcHBpbmc= aGFsdGVu IHR1bmVk IHRvd2Vs IGdsdW9u IGFkbWl0cw== IHN1bW1hcmllcw== IGd1ZXNzZXM= WmlwRmlsZQ== IGZpZXJjZQ== IGdsaW1wc2U= IHNhdHVyYXRlZA== IGNvbXByaXNlZA== NTI5 NzEy NzI3 OTc0 V2Vs Ymlvcw== YnVsYQ== Y25hbWU= Z3Jvc3M= aGFwcA== bWlzbWF0Y2g= dWlkcw== ZGVlbg== IHNsb2c= CiAgIAogIA== aXNhbmNl IG52 ICcnKTo= IGlwdA== IFRhZ3M= YWdvbnM= IFN5bg== IFNxdWFk IFNvdXRoZWFzdA== IHN0aw== b3BhbA== IGNvbnNlcnZlZA== IFBpcg== IE1pYg== IE1PTg== IEZpZ2h0 IER1Yg== IERPVA== IEh1bmRyZWQ= IGNoYW50 IE93ZW4= PScuLw== IFZvdXM= IHZlcnNlcw== U3RyZWV0 YW5udWFs ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg== c2VudGlhbA== IHBhdGhuYW1l RVND ZWVn IHRyYW5zZmVycw== IHRleHR3cmFw IG5lZWRpbmc= IGhlYWRpbmdz dGVuZXNz NjUy IHNsZW5kZXI= MDQx IHdyaXRpbmdz IGFjdGl2YXRpb25z U2h1dA== IHB1YmxpY2l0eQ== eWxvbg== 5paZ Y3Jhc2g= IGdlb21l IGlnbm9yZXM= IHNpbXBsZXN0 cHJlY2hlbg== cHJvdmluY2U= IHBzeWNob3RoZXJhcHk= IGJyb3dzZXJz IHB1bGxz IGRlc3Ryb3lpbmc= TWF0Y2hlcg== IHB1cnN1ZWQ= RGlnaXRhbA== ZXN0aW1hdGVk 7J6l IG51dHJpZW50 IGdyYW50aW5n IHJldHJpZXZhbA== IEl0ZXJhdGU= IHByb3NwZWN0cw== IHNjaGVkdWxpbmc= IHZ1bG5lcmFiaWxpdHk= UGhvdG9JbWFnZQ== IE5vYm9keQ== IGd1YXJhbnRlZXM= IHBlcnR1cmJhdGlvbnM= IEN1YmE= IFNhdWNl RkVBVFVSRVM= MTAwMDAwMDAwMDAwMDAwMDAwMDAw IEZhaWx1cmU= cm9tZWRyaXZlcg== IG1ldGFEYXRhUHJvcGVydHk= NDQ1 NTM1 RGQ= SU9E UlVMRQ== U2Fy VHJ5aW5n YCIiIg== Ym9yZw== ZGJv Z2lh sOydtA== 5YKo 7LI= DSAgICAgICAgICAgICAgIA== b25uZQ== aXRpemVk IHNkaw== cm90dGxl IGJyb3dz IGh1aA== IGxpZW4= IGVp b2xsZW4= IFRE IENhbmNlbA== IGNvbmNlcHRpb24= IEJhaw== IEJlZQ== IEhvZmY= YXJnZXN0 IGpva2Vz b2JlbA== IGFyWGl2 IHVuYW5pbQ== Y29udHJhc3Q= IGNvbW1lcmNl Y29tcGFy IHdoZXJlYnk= IENvbnN0cnVjdGlvbg== IHBvbGl0ZQ== IGN1cnJlbnRz IGRvbm9ycw== IGV0aGFu IG1hdHVyaXR5 MDQ3 IFNoYQ== VEVDSA== ICcvJzo= IGZpbmFsaXpl Z3JhcGhxbA== IE5vdGlmaWNhdGlvbg== IG1lcmdlcw== IFBlcnU= YWNjZWxlcg== IGJhc2Fs YXJyaXZhbA== U2VydmljZURhdGE= bGFib3I= IHByb2Zlc3M= IGVtcGxveWluZw== IGhlYXJ0YmVhdA== IERlcGVuZA== cm9tZXRlcg== b3pv IG1vZGlmeWluZw== IGludGVybmF0aW9u d3JpdGVz IERlbGF3YXJl Ymdjb2xvcg== IFRlcm1pbg== IERldGVjdGlvbg== Q29uZmlndXJhdGlvbkRhdGE= TXVvblRyYWNr cmF0aW9z IHVuaWZvcm1z RklYRUQ= w7R0 IFRlbXBlcmF0dXJl IHJvbWFu IGFkdm9jYXRlcw== IHJlY3VycmluZw== IGNpZ2Fy IGRldmFzdGF0aW5n RGlhZ25vc2U= NDE0 QmFn TmQ= V1k= Y2lv ZnVydA== aHY= aGJhcg== amw= 16k= 5qU= IA0KDQ== aGVtYXRpYw== IHBhbGw= IHN3YXk= aW5nbw== IHJlcHVibGlj IG5pYg== IGRtcA== aWRlbmNlcw== IGZvcnVtcw== dGVycmE= X18nKTo= IGRlZmVuZGVk IFBORw== IE5hbWVz IHJhbmdlZA== b3VyZw== b3VybmV5 c2V0Q29udGVudHM= b2N1c2Vk IEVpbnN0ZWlu IHNoYWtlcw== IHBsYWlz aW1wb3J0ZWQ= IHN0cmFuZw== bWxpbg== IG92ZXJ0aW1l IG9mZnNwcmluZw== IGFmdGVybWF0aA== Y29tbWl0cw== ZGlzYW1iaWd1YXRpb24= IGRvbmF0ZWQ= IENvbXBs Q09ERVM= bWl0dA== Xnt7XA== IG1ha2Vycw== ODgy 5Y+K IEFsbGllZA== c3Zk Q0xL IHNuaXBwZXRz UFJPRklMRQ== IDIzMDE= bmVnaWU= Y29tcGxleGNvbmp1Z2F0ZQ== IElucHV0cw== U3RvcHBpbmc= bW91bnRlZA== U2luZ2xlTXU= IE9iamVjdElk IExJS0U= UVBpeG1hcA== Y2xhaW1z IENocmlzdGlhbml0eQ== IGV4cGxhbmF0aW9ucw== IFByb2Zlc3Npb25hbA== IGlsbHVzdHJhdGVz IHJlcHJvZHVjdGlvbg== aGx0RVM= dnZ2dnZ2 IGJlcnJpZXM= IHN1cHBsZW1lbnRlZA== dmlzdWFsaXpl 55WM IFdyaXR0ZW4= 6ZKu cGFydGljaXBhbnQ= T1RIUk9UVExF IExlZ2lzbGF0dXJl UmVmZXJlcg== IEJvdWxldmFyZA== 5peP6Ieq5rK7 JCIp Mzk5 NDMy Oy8= RW1i TUh6 UUFjdGlvbg== VU8= WlQ= ZGls ZmFuZw== ZW5lbg== IHBlc3Q= aWRhdg== cmFr IGRlZWQ= IEF2ZQ== IENBVA== IHbDqQ== IDIyOQ== IE1vdXNl YW5nZXJlZA== YXRoYXI= aW1ldA== dXN1YXJpbw== IExlZA== IExpc2E= KCJcXA== cXVldWVk aW5keA== IE9U IE9WRVI= b3N0ZW4= IHVuaGFwcHk= VGhlbWU= cm93Y291bnQ= dmVudGg= IGxpc3Rpbmdz ZGJuYW1l SVRlc3Q= IG1pbnM= Ymxpbms= ZGZ1 IGJsYWg= IDE4OTg= aW50ZXJjZXB0 QUJB aWRlbnRpZmllcnM= dWZmZmY= IHJlZnJhY3Q= VUxBVElPTg== IFNoYXJl IGFydHdvcms= bGluZXN0eWxl IGdlbm9taWM= 5pW4 QXNzZXQ= IGFjY291bnRlZA== IHBpY2t1cA== IG9yZ2FuaXNlZA== V2l0aE1vY2s= UHJlZmVyZW5jZXM= IE1hbnVhbA== dmFpcw== IHN0YW5kYXJkaXplZA== ZmluYW5jZQ== IHJlZ3VsYXJpemF0aW9u IG11dHVhbGx5 IE9wZW5TU0w= IGJpbmRz IGVtZXJnZW5jZQ== IGltYWdpbmFyeQ== ICd7ew== d2FsbHM= UHJpbnRlcg== TERBUA== dXRzY2g= IG5lcnZlcw== IGtpZG4= IGh5cG90aGVzZXM= U2NhbGluZw== cG9zc2libHk= 5ZG9 IG1lbnRhbGx5 bmV1cm9u IHBlcnN1YWRlZA== IGR1cmFudGU= 6YKj aHlkcm94eQ== IE1lc2E= U3R1Yk91dA== b2JhY3Rlcmlh ZWNvbm9taWM= IHViaXF1aXQ= SGVucnk= w6FyaW9z IGNhbmNlbGxhdGlvbg== PSQ= RGFz TWlj Uk1T U0hPVw== Y2FzdGVy Z2Zl b2ls c2hlZA== dGlu d2FudGVk xa8= c2Vi IGZpY2g= IGZvc3Rlcg== CiAgICAgICAgCiAgICAgICAgCiAgIA== cm9l IG1pYg== IHJldmVyc2Fs IGjDpA== IFR1ZQ== IHN0b2xl IHN0dW5uaW5n aXJhcw== dW5zdXBwb3J0ZWQ= b2RvcmU= IDIxNw== IFB1cmU= Z2V0cm9vdA== IGhldXJpc3RpYw== IGNvZXJjZQ== IHJlc2ls aWNobGV0 cmliZWQ= IEtpbg== bG9nZGly IHBvc2Vk IHRydW1w Il0r MjQwMA== dHRlcw== IGxhdW5k aG9zdGVk IGJyZWFrdGhyb3VnaA== RGV2ZWxvcA== IDE2Mw== c2VuZGFsbA== IG9yZ2FuaXNhdGlvbnM= UmVzdWx0U2V0 IFJlcG9zaXRvcnk= IERlZmVuZGFudHM= IFdpbGxh 5a6i VGhlcmVmb3Jl c2ltdWxhdGU= IGVycmU= cGFkeQ== IHJhZGljYWxseQ== IGJ1aWx0aW5z IExvZ3M= IGFuYWx5emluZw== IM64 bW5vcA== IG51bWVyYXRvcg== UG9wdXA= IGVjaG9lZA== IGxhdWdocw== TGVnYWN5 IEhFSUdIVA== bXF0dA== Qk9UVE9N IFRvdXJuYW1lbnQ= UkVGRVI= UHJvYmFiaWxpdHk= IG1hcmdpbnM= IHJlbmV3ZWQ= IENvbW11bmljYXRpb24= ZGlyZWN0aW9ucw== IGhvbGlkYXlz IExhdW5jaHBhZA== Z29tZXJ5 IHRvc3NlZA== IHNoZXJpZmY= MzE5 NzE4 QmV0YQ== V20= YCIs bGljZQ== dXZl dWN0aW9u 57I= aGVpZA== ZGV0YWlsZWQ= IGJvdQ== IHN0cmVzc2Vk bnRl IHNlYXRlZA== aW1pZW50bw== IDIxOQ== IE5vcw== IEJhdHRlcnk= KCI6 IEVQQQ== b2dlbnM= dG9vaw== cGFyYXRpb24= a2V5dmF1bHQ= cGhvbg== SU5B IEtP IEtvbA== IEtheQ== IHNjYWxlcg== IHByb3Zlcw== Ij4l IFNob290 YGAp IGRlbGF5cw== IENvbG9ycw== IHJlY2VpdmVycw== 44K3 IG1zZ3M= IGRpdmlk QU1T RkFGRg== IEdvZHM= IOyD aWprbA== QUxMWQ== 5oi/ IMOgcw== IGRhcmtlcg== c2hvcnRjdXQ= IGV4dHJhY3Rvcg== IHNhbGluZQ== dm13YXJl aGV4Y29kZXM= U2VhcmNoQ1Y= YmlncmFtcw== YWJ5dGVz YXR0ZW5kZWU= d2Vla3M= IEJFRg== Zm9sbG93ZXI= eXBpY2Fs 5pyA5ZCO INC30LDQvw== IFN0YXRpY1RleHQ= 5ZGY IERldGVybWluZXM= RGF0ZXRpbWU= IGFmZmlsaWF0ZWQ= IHF1b3RhdGlvbg== X3ste1w= IEFuc2libGVNb2R1bGU= 5rS7 IGRpbWluaXNoZWQ= IEV4cGVyaWVuY2U= c2V0RnJhbWVTaGFwZQ== c2hlbGY= QmlibGlvZ3JhcGh5 5bGe5oCn 5ZCI5ZCM57qg57q3 c2V0Q29udGVudHNNYXJnaW5z NTMw OTU1 RGVl RGVsaXZlcnk= RXNjYXBl T1g= Z2V3 bmxw cGl4bWFw cXJzdA== c2F4 z4k= 548= IHRkcw== cmVhY3Rvcg== IGNvdWdo IHNycw== bWVldA== aXNveA== IHRveXM= IGdhdA== IFRveQ== IFNvdmk= IEFkZWxhaWRl dW5lZA== IDIyMw== IDIzOA== IFByYWd1ZQ== IEZsYXQ= IFdlcmU= Zm9ybWF0aW9ucw== IDQwNQ== Y29saQ== IGdvYXQ= MTk1NA== IHF1aXo= T1JJUw== T1JHQU4= d29ya2xpc3Q= IHJlZ2VuZXI= dW1waW5n bm90YXRpb25z dGhlYXRlcg== ZWt0 bW9ua2V5 IG1vZGlmaWVy IGF1dG9pbg== IExlYg== Nzcy bGFzdG5hbWU= IGFwcGVhbGVk IGFwcGVhbGluZw== VEhJUw== Y2VycHQ= aW5jaW5u 4paM RVhJVA== IGludmFzaXZl IGN5YmVy IElTT0w= bWNi IHByZXNzdXJlcw== IEFjdHVhbA== 5Yy5 YWN0aXZhdGlvbnM= VElNRVNUQU1Q IGRlZmVuZGVycw== UHJvamVjdGlvbg== IGFkanVzdG1lbnRz IGRlc3BhaXI= IHRyYW5xdQ== QXZhaWxhYmlsaXR5 IFJlcXVlc3RDb250ZXh0 IGNhcnRvb24= IHN5bnRoZXNpemVk UmV0cmll IGludHJpZw== TG9uZ1RlbnNvcg== Z2VvV2luZG93 IHByb3BvcnRpb25z IGZhbnRhcw== IHJvdXRpbmVz U0hFWQ== 5oyJ6ZKu MTAwNzExMQ== IGlzY2hlbWlj 566h55CG RmxleGlibGU= aGV1bWF0 U3R1Yk91dFdpdGhNb2Nr MTEyNw== RGY= RlBT RnJpZGF5 S0Q= TUg= UGFr Zmxk am91 b29ucw== ekk= 0ZE= IAogICAgICAgICAgICAgICAg IGN1ZXM= IHBpbGxhcg== IHdpdGNo IGhpZA== IGxhZG8= IFN5bA== IENY IFBlbm4= IE11bGw= IEZp IFJhaA== c2V0TWF4 c2V0UGl4bWFw aXZp IEVNQUlM CiAgICAKICAgICAgICAgICA= IDMwNw== IGFyaXN0 LS0tLS0tLS0tLS0tLS0tLS0tLS0t cG9ueQ== IFZQTg== aWZpY2VudA== VVRS IGNoZWNrYm94 VGVzdElkcw== IFByb3Bvc2l0aW9u IGNhcmFjdGVy Y29udGVudHR5cGU= IFppcA== cG9zdGVk RElW WW91bmc= dmlzaW5n Njky U3ViYnVz SW5mb1R5cGVz VGVhY2hlcg== IGluc2FuZQ== bmV0d29ya0NvbmZpZ3VyYXRpb25EYXRh IGluZnVzaW9u 5ZCE c3RlcmRhbQ== SU9FcnJvcg== IHdvcnJpZXM= TWF4UG9vbGluZw== IEV1cm9wZWlh SEVSU0hFWQ== IEltcG9ydHM= YWZ0ZXJTYWxlcw== aGlzdG9yaWNhbA== QWRtaW5pc3RyYXRvcg== U3lzdGVtUElkcw== IHJlcGxpZXM= IGFtYnVs RHJhd2luZw== XX06 5Y+v6IO9 IGZhdm9yZWQ= IGluc3BlY3Rvcg== IEVsbGlvdHQ= T0JESW5mb1R5cGVz IG5pY2hl IGhpc3RvcmljYWxseQ== 0L3QsNGH IGN5Y2xpbmc= b3VidGVk 5qGI dGhyb3R0bGU= IHByb3NlY3V0b3Jz ZGFyd2lu cGVyaW9kaWNEYXRhSWRlbnRpZmllcg== RGVmaW5lZERhdGFJZGVudGlmaWVy ZHRjSGlzdG9yeQ== ZHRjU2hhZG93 IGVudHNwcmVjaGVuZA== dGFjaG9ncmFwaFBJZHM= dGFjaG9ncmFwaFRlc3RJZHM= 5aGr IGdhcmRlbnM= c2FmZXR5U3lzdGVtUElkcw== UmVwbGF5QWxs IHBsYXVzaWJsZQ== IGNob29zZXM= ZHluYW1pY2FsbHlEZWZpbmVkRGF0YUlkZW50aWZpZXI= IGV0aGFub2w= YWZ0ZXJTYWxlc1NlcnZpY2VEYXRh Jycp Oio= TW9s T3du ZHJldw== bmRlZg== cnVieQ== dWl4 eWFyZHM= IGF2ZW4= ZGVh IG9zdHI= cm9nZW4= IG5hdnk= IGxhY3Q= IGxibA== IGxjZA== IGRlc2VyaWFsaXpl cmlrYQ== Kipc IExD aW5lbWF0 YWNjaGFy IGNvZmY= IHJlc2FtcGxl IGNoaW1w IG91dGxldHM= U1RET1VU UkVO IHNjYXJ5 MTExNA== MTk1NQ== YXhl IHN1cGVycw== IENoYW5naW5n IGJvYXRz ZmxpY2ty IHdoYXRzb2V2ZXI= w6lk IHRyYW5zcGFyZW5jeQ== IGxvY2F0b3I= IG1heGxlbg== IFsnJQ== IENvYWNo IFNob3Q= IENsYXVkZQ== IG1lYW5pbmdz c3BlY2lmaWVy IDI1MDA= TUxQ c3VwdGl0bGU= 44Ot IHJlc3RlZA== IHJlc3RvcmF0aW9u QmFzZU1vZGVs UG9zaXRpb25z IE1hcmE= IGVsZWN0b3JhbA== d2Vic2VhcmNo IGRpZ2dpbmc= IHN1YmplY3RpdmU= 5L2G IGdyaWRY IGdyaWRZ SFRUUFNlcnZlcg== SUZBQ0U= IFBvc3Rz T3BlbmluZw== U2lnbmVk VHJhaW5lcg== IC0tLS0tLS0tLS0tLS0tLS0tLQ== IGp1bXBz Y29sbGlkZQ== IHN5bXBhdGhldGlj IGNvcnJlc3BvbmRlbnQ= TWVtYmVyU2VyaWFsTnVtYmVy IG1pbmlhdHVyZQ== Qnl0ZXNJTw== IHNwb3J0aW5n YWRkaXRpb25hbE9wZXJhdGluZw== cmVzdHJpY3Rpb24= IEthdHo= IGF0aGxldGU= IGluY3ViYXRpb24= cHN5Y2g= IHJvZGVv IFRyYWNlYmFjaw== VGVtcG9yYXJ5RmlsZQ== YXR0ZW5kYW5jZQ== QUxJQVM= IHJlbW90ZWx5 Sm9zZXBo IFNvdmlldHM= aW5jaW5uYXRp U3ViYnVzTWVtYmVyU2VyaWFsTnVtYmVy ZHRjSGlzdG9yeU1lbW9yeUVudHJ5 ZHRjU2hhZG93TWVtb3J5RW50cnk= YWRkaXRpb25hbE9wZXJhdGluZ0RhdGE= KSot NDMx NDk3 Q2U= SFNW TXVy UHVsbA== UGl2b3Q= Um9s U291 U3BhcnNl VFhU W1tA Y2l0YXRpb24= aGlnZ3M= cHJhY3RpY2U= eGF2aWVy fT8= IF0u IHRyaWJ1dGU= IHRoZWF0 IGZjbnRs IHBpdHk= IHdp IG1hcnJvdw== YXNweA== IGR0eXBlcw== IGhkZg== IGhpcHA= ICJbJw== Y2hvb3Nlcg== YWdoZXR0aQ== KClbOg== IElURQ== aXJsaW5n IDIzMQ== IFBG IE51bXB5 IExpbmRzYXk= IEdyZXk= IGNvaGVyZW5jZQ== aXBlcw== IGNoaWxs IGNoaWNr IGplc3Q= aWJh YW5jZXN0b3I= IHByZW5k IEluaw== Y2NvZGU= aGVyb2t1 b3VuZGluZw== c3Bz MDAwOQ== YnlyZWY= IHt9Lg== 44GI IFsnLS0= dWNvcw== fX0oXA== QVBQUk8= cm9waWNhbA== b3R0dQ== SU1BR0VT 44Oh IHZvbGF0aWxl RkFTVA== IGludmVzdG9y IG1vdGlmcw== bWFrZU9uZQ== UG9saXNo IOyc IEFwcGFyZW50bHk= IEhhcm9sZA== IGFyY2hpdmVz IGhlYXZpZXI= 6K6/ 5b2S IFBldGVyc29u IHN0cmVuZ3Rocw== INC60L7RgtC+0YA= IGVsZW1z IENhdmFscnk= IFJlcG9ydHM= IHdlbGNvbWVk ZXZlcnl0aGluZw== IGNlcmVtb24= 56uL YWRqdXN0ZWQ= PT09PT09PT09PT09PT09PT09PT09PT0= IGRvdWJ0cw== aGVhcnRiZWF0 IHN1bW1hcml6ZWQ= 6rO8 IHRydW5jYXRl INGE0YPQvdC6 IHRyYW5zbWl0dGVy IHZpY2luaXR5 VHJhamVjdG9yeUZpbHRlcg== QWx0aXR1ZGU= QXVzdHJhbGlh VHRHQw== IEFuaW1hdGlvbg== 4YOQ4YM= UFJPRFVDVA== IFdJRFRI MjAwMDA= OTE2 Oi0t Ol1d QlVM RlVU TFc= UGFyaw== U2l0 U0FO ZFc= Z3N0 amM= c3dlZXA= dHRh d2luZm8= 6rE= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= ZXJlcw== c3RkZXY= IGNjcA== IGNpbm5hbW9u ZGVwb3NpdA== ZGVwb3Q= YXJpcw== IHBpYW4= IHNtcw== IG3DpQ== IGRvZA== dXJhbGx5 IGRlZXI= YWdnZWQ= MDAxNTc= c3NpZXI= IFBhaW50 IER5bg== IFJM IFJvdQ== IExlc3M= J109PSc= YWNpbw== ZGVmZW5zZQ== IF86 cG9ydGlvbmFs LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== dGVzdGRhdGE= IEludmVudG9yeQ== IGNvbXB1dGVz UmViYXI= IHN1YnNjcmliZXJz IGxpbmVhZ2U= IHRyYWdpYw== cmVnaXN0cg== b3V0cHV0bmFtZQ== R2V0UmVxdWVzdA== IGFwcGxlcw== IHNvbGx0ZQ== b3VuY2luZw== fVws cG9sYXRpb24= IGRldmVsb3Bz YWZh IGRpdm1vZA== bHN4 ODU2 IHN1Y2Nlc3Npb24= 4YCQ IGxpZ2h0d2VpZ2h0 Y2FjaGVz VElG IGVhc2llc3Q= cmFnZw== Z3B1cw== IE1pbm9y RGlycw== J14oPw== IEd1aW5lYQ== IGNvbXBldGl0b3Jz IENvbW1lbnRz Q3VycmVudGx5 cG93ZXJz IHN3ZWFy IHByZXBhcmF0aW9ucw== IHZpcnVzZXM= KCc6Jyw= IGR5bmFtaWNhbA== U05BUA== IFN0YW5kYXJkU2NhbGVy 6L+b56iL IHNsdWdpZnk= IGNvbmNlYWxlZA== IHJvbWFuY2U= IEt1bHR1cmI= IGlubm9jZW5jZQ== aXdp aW50ZXJwb2xhdGlvbg== aXphcnJl UFJPQ0VTU0lORw== IEtub3dsZWRnZQ== IGVuZG90aGU= Y2NjY2NjY2NjY2NjY2NjYwxvZ2lzdGljUmVncmVzc2lvbg== IOWcqA== RW51bVZhbHVlRGVzY3JpcHRvcg== 5Yy56YWN NTI0 TFNU UUNoZWNrQm94 U2F2ZXI= VG1w VG9yY2g= ZnBy anQ= em9v IGFpbmRh IGZyYW0= IHdlbg== IGJ1bmRsZXM= ZXRyYXRpbmc= aWxvdA== YWduZXI= IElSUw== IGNvbmZlcmVuY2Vz IHlwb3M= IFB0 IG1ldQ== IEhvdXI= IEdheQ== IEdvdHQ= ID09Ig== IE9UQQ== CgkJIA== YWNlYWU= IFVS c2hvd24= dWRkaW5n IHVuaWZpZWQ= RVJJQw== RXJyb3JFeGNlcHRpb24= MTk2OQ== MTk1OA== YXBlc3Q= IHN1YnNldHM= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== aW92 IHR5cGV2YWw= IFJlY2U= IGRpZmZz aXNzb3Jz ICEhIQ== aWtlbg== IGNvbW1lbQ== cmVkcmF3 IGJsaw== IFhW T2JzdA== IHN1cHBvcnRlcg== aWZmb3Jk IHBhcmVudGFs XSkpLg== IGxhd21ha2Vycw== w6RsbA== b3BlcmFuZA== IHJlc3Rz 5pWI IG1vdG9ycw== IGV4dHJhY2VsbHVsYXI= Y2VudGVyeA== QmVoYXZpb3I= IE9QVA== IG9yZGluYWw= ZmluYWxpemU= IGNhY2hlcw== IOuC dWVzc2Fobg== IGNvcGluZw== IEhUVFBFcnJvcg== IGJhbGxvdA== Rk9SV0FSRA== IHNoaXBwZWQ= fS57 IGhhYsOtYQ== IEVycm9ycw== Q0ZVTkNUWVBF Tm9ybWFsaXplZA== YmlkaXR5 b3Njb3BpYw== IE1hZGlzb24= U2FtcGxpbmc= IGNyZWRpdGVk Y2FwdGNoYQ== IOq4 cmFkaWF0aW9u IFJheW1vbmQ= IHRlbXBsZXM= IGNsYXJpZnk= UEVOVElVTQ== QWR2YW5jZWQ= IEFkbWlyYWw= Q2Fi Q0ZMQUdT SmE= TGFy TWFjaA== U3VuZGF5 VE1Q Vnk= YnJlZWQ= ZGllZA== ZW1wbA== cHlz 5ZY= 7ZQ= m5A= IGFyb3Nl aGVhcHA= c3Ro YWxpY2U= IHBlbmQ= IG50aA== ZWxu ICIiKSk= IHN0cw== aWZ0eQ== IDIxNg== YXNzaXVt IHByb2ZpbGluZw== IHsh IEVn IEVsZWN0cm9u dG94 IHJlc3VtZWQ= IEpha292 IHdvcmtmb3JjZQ== IENocm9t VGh1cnNkYXk= IHNwZWNpYWxseQ== CgkJCQo= dmVyc2l0eQ== dHJhbnNwYXJlbnQ= QUNFUw== IGdvb2RuZXNz IHBvc3RmaXg= NzQy ZG9jdHlwZXM= c29sdXRpb25z Y3l0aG9u IGd1aWRlcw== IENvbW11bg== TG9vc2U= IHNob3J0YWdl TU1Y IEFwcGxpY2F0aW9ucw== 55Sx bWVzYW4= IFBvbGl0aWNz IGFmZmlybWVk IOW+ IENoYXJGaWVsZA== IG1hcmJsZQ== 5Y2z IEhvbG1lcw== IGNvbnN0aXR1dGVk IGNvbXBsYWluaW5n 5Lmm IE1ldGFs MDAzMTY= IERPV04= b3NhaWM= IGNvbnN1bHRhdGlvbg== IGFmZmlsaWF0ZQ== U0NIRUQ= TU9OVEg= ISEhISEhISEhISEhISEhIQ== SEFORExFUg== aXNwaWVs IHNsYW1tZWQ= IHN0YWlyY2FzZQ== IG91bmNlcw== IGF1dG90b29scw== IGVudHJlcHJlbmV1cg== IHBuZXVtb25pYQ== ZGlmZmljdWx0eQ== cG50ZA== cHJlY2VkZW50ZWQ= YXpvbHls JyJ9LA== KC4uLik= NjE3 NzY3 Q2Fz Q3plY2g= SWdu Snk= TG9yZA== TGF0ZXN0 UGVuZw== YnJvYWQ= bGlk 55Y= aW5ldHk= aGVzaW9u ZW5yb2xs YWxnZWJyYQ== IGNhcm4= IGNvdHQ= YW5hbWU= IGZhZGU= IHBjYQ== IHJlZG8= ICIpOg== YWRpZQ== IFNjb3Bl IFNheG9u IHN0ZXJu IEl2eQ== YWJvbA== IENhdGFs IFB1 IE5pZW5uYQ== YW5nYXNlaw== IHdoYWxl Y2xhbXA= IGhlZGdl IEhvZA== IEdH cGVyaGFwcw== IE9P IG91dHdhcmQ= dGV4dGFyZWE= IHhm SU5FUw== IG9ic2VydmVz Y29kZWdlbg== RU5F IG92ZXJ0 Q2hvb3Nlcg== U0VN IC8+PC8= IFJlYWRz dGhlbA== REVF IGRvd25sb2Fkcw== dW5jYW4= NzUy IERldmljZXM= IHJlZnVzZXM= IFNoYXI= ZGlzdHJpYnV0aW9ucw== IDI1NA== 4YCe IGRyYXdpbmdz IExldHRlcg== IEdlb2Zm CgoKCgoKCgoK 57uc Z3JlU1FM IFJlY2VudA== IGhvdGVscw== 0LLQvtC0 IGludHJvZHVjZXM= IEhvbGxhbmQ= IHBzeWNob2xvZ2lzdA== IFBhbG1lcg== IHN0aWNraW5n IHdlYWtlcg== QmF0Y2hOb3JtYWxpemF0aW9u 6KeI U2tpbGw= IHRlcnJvcmlzdHM= IGZvbGRpbmc= IEludGVnZXJGaWVsZA== IHNhbmN0aW9ucw== 56uZ c2lsZW50 X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXw== IHRyaWNreQ== UHJlZGljYXRl RXZhbHVhdGlvbg== IGJvcnJvd2Vk IGZydXN0cmF0ZWQ= IHVud2lsbGluZw== emNRQg== IGxvYmU= aXNvbGF0ZWQ= IHN5bmNocm9uaXplZA== 5q+P5Liq IEV2YWx1YXRpb24= c2V0SXRlbVRleHQ= IEVkZGll IFBhcnRpY2lwYW50cw== aW1hZ2VuZXQ= JH19 Jysn LCk6 MzE3 NTAwMDA= NTY3 PSgpLA== Q2F0ZWc= SUVE UGl4ZWxz Um9n bGFrZQ== bWdlb1dpbmRvdw== dm1pbg== 5ZQ= b3JpYW4= IGNpbg== IHNwcm8= IHdpaw== IGJhdHM= IG1pbmc= IGRlbmQ= b3R1 IGdhZA== bnRmcw== IEF2b2lk IHZwbg== dW5sb2Fk IDI2NQ== IFBsYXllcnM= IE1lcmM= IERpc2s= IFJpZg== IFJPUw== IExhdg== IEVzcGVjaWFsbHk= cHJlZmVy IHVucm9sbA== IHVuYXdhcmU= IHdvcmthcm91bmQ= IGNyZWVw IC8+PA== IHVuZGVyZ3JhZHVhdGU= RXhwbA== IGZpbHQ= IDIwMw== IDE4Mg== IG1vZHM= ZGVsaXRlbQ== IEdlbmVyYWxseQ== IHBvcnRyYXllZA== c2VydmFibGU= 44Kw IGRlc2NlbmRlZA== IGRlc3RpbmF0aW9ucw== IERlZmVuY2U= IHRyZWF0eQ== aW5mZWN0ZWQ= U2NlbmFyaW8= RGlzY292ZXJ5 IHNlbGJzdA== IERlc2M= KX0o U0VSSUFM IE1hcmtkb3du IHNhbG1vbg== IFN3aWZ0 a3dhcmc= UG9ydHM= IHNwbGluZQ== Y2lyY3VpdA== UkVRVUVTVFM= IGZvbGRz IGVsZWN0cm9uaWNz 44Gn44GZ IEJ1cmtl IHJhY2lzdA== YWxsb2NhdGU= INGH0YLQvg== IGNhcnJpYWdl TVVMVElMSU5F 5omT5byA IG1pbWlj IG1vbmtleXBhdGNo IHJldmVsYXRpb24= IEZXQ29yZQ== ISw= NjMy ODIy OTMy Q0VSVA== RHQ= VG93bg== Y2Fi ZHVyaW5n ZmljdGlvbg== cnNl c2libGluZw== dmFn dmlt d29tZW4= 6b0= IC0tLS0tLS0tLS0tLS0tLQ== ZXJp c2V1cw== c2VlZHM= aXRlbg== IHBvY28= IHdpcmluZw== dGhyZWF0 IElzcw== dW1s IHZldA== KSwp dW5leHBlY3RlZA== IFBpa2U= IFByZXR0eQ== IE1vbmc= IE5hcw== IExpb25z IGF0w6k= IEdBUA== IGNvZXJj ZnJvbWFycmF5 aWJpbA== IFZlcmE= IDUyOQ== IElubmVy cmF5ZXI= ZmllbGRuYW1lcw== ZmlsbXM= QU5B SUNC IDE4NzA= b3BlbnNzbA== IGdyaW5k IFBsYW5z IHNwZWVjaGVz ICcuJzo= 5pWw6YeP IEdlVg== 0LvQtdC8 IEJsdWVz anVzdGljZQ== UFJPRA== VHJhbnNwb3Nl QmVhdXRpZnVs IGdyaWRz ZmluaXR5 6K6p IOW9 TWVtYnJvcw== ZHJ2 T3V0cHV0cw== b3JnYW5pYw== IEZvcm1lcg== IHRvdXJpc3Q= dGlja2xhYmVscw== cGxhbmV0 UGFyYW1ldGVyU2V0 IHJvY2t5 IEFTRg== IEFyY2hpdmU= 572R57uc IE1hZGFtZQ== emhvdQ== IHJlbWFya2FibHk= IGJhdHRpbmc= IEphY3F1ZXM= 4KWN IHJlaW5mb3JjZQ== QnVpbHQ= aGVhcnRlZA== IGRpc3BlcnNpb24= 0YbQuNC4 44GT44Go IFJFU1VMVA== IENyeXN0YWw= IE5hcnZpaw== IEFwcGVuZGl4 MDAyNjE4OTQ= IHNlYWJvcm4= Ll0p NzE1 ODY2 Q0JD UFRS UHN5Y2g= UlY= Ulc= U2VsbA== a2Rl bGF0ZWQ= luWtkA== ZW5mb3JjZQ== IGNhbWI= IGNTdHJpbmdJTw== IG9veg== IHdvbmRlcnM= IGJvdXQ= IG7DqQ== IGdpbmdlcg== KClbIg== IDI0NA== IDI0MQ== IHJ1bGVy dXNhbQ== b3NwYXRo IG9yY2hlc3Ry IGV4aWxl IEdkaw== IEV1Zw== IGNsdXRjaA== Y2xhc3NpZmllZA== YWRkYWZp LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t Ym9hdA== PT09PT09PT09 Y29sZA== IHNjYXB5 MTkzMA== IG15cmlhZA== bWVkaWM= ZGRk RVNDQVBF IHRyYWZm aXNzdWVy IGNvcnJlY3Rpb25z b3RlY2hu VG9CZQ== TE9HR0lORw== IFNoYWRvdw== IHRyaW8= Nzcz IGBgKA== cGtncw== IG5ldHdvcmtpbmc= U3RhdGVDaGFuZ2Vk IHByZWRpY3Rpbmc= IGdlb2dyYXBoaWNhbA== IE1jTA== IGZyYWN0aW9ucw== b3hpZGU= IENPVVJU IE5vcnRod2VzdA== IGJyb2FkbHk= UmVkaXM= YmFkZ2U= IFRIQVQ= IGNhcGl0YWxpc3Q= IGFjcXVpZXM= 4oCy4oCy cHdt anVkZ2U= cmVwcmVzZW50ZWQ= IGFuYWxvZ3k= IHJlcGxpY2F0ZQ== IGluY29ycmVjdGx5 IFRSVUU= IHNldmVudHk= UlVOTklORw== IEZhY3VsdHk= 5omT5Y2w Q09PS0lF IG1hbGlnbmFudA== 4YC34YC6 c2NyZWVucw== UG9ydHVndWVzZQ== NTE2 Njc4OTA= OkAi Q2l2aWw= RmVk SVFVRQ== S1Y= S24= UmQ= YnVuZGxlcw== Z2FyaWFu bUY= c29sZA== eHNk xYQ= IOiuvue9rg== c3RncmFiZXI= IGNhbmNlbGVk YW5vbWFs IHNpbw== bWVzdHJl IGludmVydGVk IGx1cg== IHNlbGZpc2g= IFRhaWw= YWdp IFNC MDAyNA== MDA3NQ== YWJ1bmQ= YWJvbGlj IENsb2Nr dGVycm9y IHNlYXM= IFBVVA== Z2V0UHJvcGVydHk= YXRoaQ== IFJNUw== IFJvbmFsZA== IEVzdGU= Iikr c2NpZW50 IHNoaW5l SW52ZXJzZQ== IHN1YndheQ== Q2hpY2tlbg== IG9wdGltdW0= IHBhdGhvbG9neQ== IG1pbmVyYWxz ZWVlZQ== bmVyaXg= YW1wYQ== IGdlbmVyYWxz Mjk2NQ== SW50ZXJuZXQ= IDE4NTA= IGN1cnJpY3VsdW0= SVNT OTgy IG5vbmV0aGVsZXNz c2VuZHRv eG1sbnM= NDcx UkFOQ0g= NTcxNDI4 bWVkaWF0ZWx5 aXF1aWQ= 5Zub IHF1YW50aWZpZWQ= IGJhbGFuY2Vy cHJvdmlkZQ== U3BlY2llcw== TW9uZGF5 SUFP bmVpZ2hib3Vy IGNyeXN0YWxz ZXF1aXBtZW50 QkJC IENoZWVzZQ== Q09NTUlU Y2lyY3VsYXI= IGVsaW1pbmF0aW5n IGtub2Nrb3V0 dHJvb3A= YnJhbmRhY3Q= 56ug IHBlZGlhdHJpYw== b2N0ZXQ= cGhhbnVt 57Si5byV 4paS4paS4paS4paS4paS4paS4paS4paS IHVuZGVyc2NvcmU= IHJpcGVuaW5n IEV1cm9wYQ== UEVOVE1NWA== 56a7 ZXJzaGlyZQ== IG5lb25hdGFs IG5lcGhldw== aW5ncmVkaWVudHM= IEZyaXR6 IGFkZXF1YXRlbHk= 6K6i5Y2V J0A= NDY3 NTI1 Q0FURUc= R1c= SkI= THV4 UEFE UGhv UkFUSU9O VU1C Xz0i Y21hdGg= Y3Jhd2w= cGF5ZXI= c2ltZQ== fSk6 wqM= 550= IOS9v+eUqA== YWxu IHNtYg== IHJlcHJlc3Npb24= IGTDqXM= IGxvbA== IFNpYw== IEFjdGlvbnM= b3B1cw== IE1peGVk Iiwp IG5vdGE= IEJvcmRlcg== 4oCg KCI8Lw== cHJvcG9zYWxz YXN0aWNz dHlwZW9m YWN0aW4= IEpldA== Y2hleg== IEtpbGw= IHZlcnRl IGRpc2NyZXQ= bnNpYw== Q29uY2F0 KCkpKTo= IFJlcXVpcmU= U2V0RmlsbA== IENvbmNhdA== cnVuY2g= cmlidXRpbmc= Y29udGV4dHM= IG1vZGlmaWVycw== IGNlbnRyaWZ1Zw== c2tpbGxz ICcvJyw= IExlYWY= IEFzc2Vzc21lbnQ= IElOSVRJQUw= IEF0b21pYw== IGhvbGRlcnM= c3RvcHBpbmc= RGlzcGF0Y2hlcg== IEhhcmJvcg== Q09MT04= TmV0V2VpZ2h0cw== IEZPUk1BVA== c2Vuc2l0aXZpdHk= QWN0dWFsbHk= IExvZ2dpbmc= IHNhbHZhdGlvbg== IE9wZW5HTA== VmVyYg== 6L6+ ICInIg== 5bCR IGNvbmNlcHR1YWw= INeQ1w== IGNvbmZsaWN0aW5n Y29sbGlzaW9ucw== IGJsb2dz IGNyb3dkcw== IE9wZXJh IFdIRU4= IFRyZWs= IHBob3NwaGF0ZQ== IHdpdGhkcmF3bg== IENvbnRlbnRUeXBl IGRpZXNlcg== 5YyF5ZCr IHJlc2lnbmF0aW9u aXRrRGlyZWN0Rm91cmllclJlY29uc3RydWN0aW9uSW1hZ2VUb0ltYWdlRmlsdGVy IHF1YWRyYXRpYw== IERlY2lzaW9uVHJlZQ== IGtpbG9tZXRlcnM= UHJpdmlsZQ== IExhY2xvcw== U1BMSVQ= NDI2 NTcw OTI5 Oj0= PD4= QXk= Qlo= R2Fw SkU= S2Ft TWFraW5n TWFyYw== V0FMSw== cGNr dGln em9u yJs= 4LI= 7YM= IHRhcHBlZA== IGNlbnRz YW5zdA== aXNhbA== IHRvYXN0 ZXRhZw== IFRhbWls dmVyYnM= IHN0ZXc= KCc7 IEZvbGRlcg== IGFsb3Vk IGFsYmVpdA== Y2xvbmFs IERvbQ== IERhbGU= IFJ1cmFs IEhT J10q IHNodWZmbGVk IGtw aWJ1cw== aWJ1bGw= Ijp7 IHByZXNlcnZpbmc= aWV1eA== IHVuaXRlZA== LS0tLS0tLS0tLS0tLS0tLS0t dGltZXN0ZXA= YWNoaQ== ZW5zb24= ZXNzYQ== IENoYWlu IGNyZWRz IFJlYWxseQ== w6l0YWl0 ICE9PQ== cHJvbg== IHRyYW5zdmVyc2U= IGZvdW5kYXRpb25z IDE4NjA= dXBsZXg= IFNlYW4= U3RyaW5nVmFy IElOU0VSVA== aW5zdGVhZA== IGNyYXNoZXM= IGNvdW50cnlzaWRl IHJpc2Vu IHJpdmFscw== U3RhcnRUaW1l c2VtYmxlcg== YXNzZXJ0UmFpc2VzUmVnZXg= IHBhcmFtaWtv IERpc2NvdmVyeQ== IGRhbWFnaW5n IFNjaHdhcg== U2NoZW1l PXt9Jy4= IGRhc2hlcw== INCy0YE= VHVwbGVUcmVl U2ltaWxhcg== IERPTQ== IGFubm90YXRlZA== bWlzc2Vz UmVzdG9yZQ== IHByb21wdGx5 IExvb2t1cA== IGJvbWJpbmc= IGJvbWJhcmQ= IHN1c3BlY3Rz ZmFuYXJ0 Y291cG9u IG1hbW1hbA== Q29tYmluZWQ= IG1vbm9wb2x5 IGFmb3JlbWVudGlvbmVk TGFu T0U= U3VmZml4 VEVT VHJlZXM= Y3JhY2s= ZnVy aHBhcmFtcw== anE= bHo= dmY= 2Lk= IAogICAgICAgICAgICAgICAgICAgICAg grA= IGZyaWRnZQ== IG92YWw= IG9haw== IHNpYmxpbmc= IHJlYmVsbGlvbg== IG5haWw= ZXRpY2FsbHk= YWdlbmN5 IFNhcHA= IDI2Ng== IDI0Nw== IE5hdGFs Y29udXQ= IEZ1bA== IEZlcnI= ZWN0dXJl IHdoaXRlcw== IEJha2U= IER1cA== IERlbm5pcw== IEhZ c2V0RGVzY3JpcHRpb24= IEdhbW1h ZGVmbg== c2NhcGVz PSIu IHByZXBlbmQ= IGFkZGljdA== Y29hbA== IHVubw== MTIwMQ== UmVwbGlj YXNzZXJ0RGljdA== c3By IHNjaWxsaW5ncw== MTk1Nw== Z3JhdmU= IGJvaWxpbmc= Q29udm9sdXRpb24= X3t9Lg== cGVuZGljdWxhcg== bGlxdQ== VGV4dEVkaXQ= ZmluZGVycw== Nzgx IEJ1dHRlcg== IFBsYW5uaW5n MDYz c3VwcHJlc3M= IEJlYXU= ODU4 IEJvc3M= OTIxOA== IG1vdGl2ZQ== IG5lZ2F0aXZlbHk= b3Byb3RlaW4= aW5mZWN0aW9u RGlzcG9zaXRpb24= 0YPQtg== IGhpc3Rv Qmx1cg== YXVsYXk= 6YCS OTk5OTk5 IEdyYWR1 UGFja2FnZXM= IOav U0Nz UG9zdHM= dW5wYWNrZWQ= YXBwcm92ZQ== YWJldGVz IEFuZ2xl ZmVkZXJhdGU= IEFyY2hpdmVz IGltcGxpY2F0ZWQ= IGFtcGxpZmljYXRpb24= IGNvd2JveQ== IHN5bXBhdGh5 55m9 INC30LA= 0YjQuA== Ly1e IGN1YmVz IGF0aGxldGlj c3dpZ3JlZ2lzdGVy IGZldGFs IExhdGlubw== Y3VtdWxhdGl2ZQ== IGhhcnZlc3RlZA== IjpbeyI= IHhscmQ= IGVtYmFycmFzc2Vk IHBydW5pbmc= REVGSU5FRA== Um95YWw= IHRyZW5jaGVz IG1pYkJ1aWxkZXI= Ii0= Qk9MRA== Q0lG Q2F0ZWdvcmllcw== RWxlbQ== R2VuZGVy TU9S U2F0dXJkYXk= YnJpdA== amg= b29w cmRz 4pg= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== cmVjb25j IGZyb3duZWQ= IG94eQ== cm9kZQ== IGluZHVjdA== IGRpdmU= ZWxt ZWxlcmF0ZQ== IGhhYw== Y2hhbGxlbg== IFRvdWNo b3J0YWw= IENsYXk= YW1lbnRz IDIyNw== IFBvc2U= IGFsbGVt IEJyZW50 IHByb2dlbg== IFdN ZW1pc3Npb24= IEdyb3Nz IEVucw== IHByZXNlcnZhdGlvbg== IGFkaXA= Y29hY2g= IEtvbQ== b3VzYW5k cHl0b3JjaA== IFN0YXJz IHN1YnVuaXQ= IGZlY2hh IGZpbG1lZA== IGNvcnA= Ymlub20= dHJhbnNmb3JtYXRpb24= RVRI dXNlYw== IHdyaXRhYmxl IG5vbnplcm8= Tm90aWZpY2F0aW9ucw== 5Y+N IHZvbHVudGFyeQ== Q29tcG9zaXRl IGRpbWVy IERlZmluZXM= UFJPR1JFU1M= IE9idmlvdXNseQ== IG1pY3Jvc2NvcGU= CgkJCQkJCQkJCQkJ bGVxc2xhbnQ= IEJFR0lO IGdyb2Nlcnk= IElGTg== IGNvbnZlbnRpb25z aHlwZXJwYXJhbXM= VGlwbw== YXRlcm5pdHk= IFJvc2Vu TkFNSUM= RGVuaWVk RGVwZW5kZW5jaWVz IGRlY2xhcmF0aW9ucw== 6IKh IGNvbXBvc2Vycw== IFZvbHVudGVlcg== 5raI5oGv IFBldGVyc2J1cmc= IENvbmZlZGVyYXRlcw== IENoZWxzZWE= NDE4 NDEz NjMz NzI1 QmVybg== RG9n R3JhbmQ= THU= UGluZ3Vpbm9JREU= UXJ5 XH0= XSsi YmxpYw== Z2FuZw== bcOqbWU= cnZz c2Fj dGly eGRhdGE= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= c3RhZ2Vz IHBhYw== IG1hdGVy IGhz Jywi IElv IElzaA== IENNRA== IFBQ IFBFVA== IFBPTA== IE1vemlsbGE= dXNzZWxz IERvdw== IEd1c3Q= IG91dGZpdA== YXZyYQ== dWRhZA== IHVucHJlY2VkZW50ZWQ= IEluc3RhbnQ= IHN1ZWQ= bmVjaw== ZGVyaXZl RU5B IHNwZWxsaW5n c3RhdGlzdGlj bWVkYWw= SUNZ IHp3 IGRpc3Rybw== bmV0Y29uZg== REVN aW5zaQ== IENvbnNlcnY= IFsnJyw= IG1hdHVyYXRpb24= 4oCT4oCY S2V5VmF1bHQ= MzQx ZW1waGlz ODgx YWludGVuYW5jZQ== IHByb2Jlcw== IGNoZWY= 4YC+ IFNlcmdlYW50 IGRlc2lnbmF0aW9u IGRlbm9t UXVvdGE= UHlBcnJheQ== IGRlbW9ncmFwaGlj IHNlbGVjdHM= c2lteA== REFUQVNF IGxpbWI= IGludmVzdGlnYXRpdmU= IGluc3RhbGxlcg== QXV0aG9ycw== IGZpeGF0aW9u IHB1bHNlcw== aW5zdGFsbGVy IFNjaG9vbHM= IGRlcGFydGVk 5YaM R29pbmc= ICcjJw== SVpFUg== IFdlbGxz IChfKCI= IEltcGFjdA== QnJ3cw== IFJob2Rlcw== 5aSn5bCP IEpvc2VwaGluZQ== IHRocm90dGxl dWJ5dGU= aWJyYXRlZA== IEVjb25vbWljcw== IGFzc2VtYmxpZXM= IFwoXFw= VklTSUJMRQ== d2VlcHk= PT09PT09PT09PT09PT09PT09PT09PT09PQ== UEVDVEVE Q1VTVE9N NTE4 PSgt QmQ= SEc= Xis= Ym9w Y0c= Y3Jh Y2lsbA== ZnJv bGlnbmU= b2xlcw== eEZD 4YU= 5rw= IHRhYw== YXRpYW4= IGZpcg== IHBvcmNo IHdhcnQ= IHdhc3RlZA== IGRpemVy IGRlbnNpdGllcw== b3RpZGVz IFRPSw== MDA5Ng== IENhdGhlcmluZQ== PT0t IFBPRA== IHJhcw== cHRv aW1ldGVycw== IG5vdGlmaWVk IEJyaWQ= IEx0 YW50aXM= aXBpbm8= IGphYw== IDpdKQ== dWdnbGU= IDM3NQ== ZXhwb25lbnQ= dXN0aW4= PSc/Jyw= c29h IGdvc3NpcA== IClc MTkxNA== IGNvbW1lbmNlZA== c3Vic2NyaWJlcg== IDc2OA== bHBz IG1heGltaXpl Y3VydmVz VGVzdEJhc2U= IFsnLw== IHNsYWlu dHJhaWxlcg== NzQx QWRkRW50cnk= RW50SWQ= YWZmaWxp IGdyYXBoaWNhbA== IGN5dG9w IFN0cmluZ1Zhcg== ZXZpZGVuY2U= Y2Fycnk= IGZhY3RvcmlhbA== IGNvdW50ZXJwYXJ0cw== IGluZHVjZXM= IOusuA== IGZvaXM= IG11b24= IGFsdGVyYXRpb25z IGlzb2xhdGVz KCcuLy8= SXBTdGF0ZQ== IG5lZ290aWF0ZQ== IGRpc2NvdmVyaWVz Qk9USA== c3Vic2NyaXB0aW9uSWQ= IEdyZWdvcnk= 5YWz6Zet SEVBREVSUw== IGFibm9ybWFsaXRpZXM= U2NvdHRpc2g= 56Wo Ky0rLSstKy0= IHJlbHVjdGFudA== IGRlY2lzaXZl c2V0TWluaW11bVNpemU= 8J+UtPCflLXwn4yV4pmT4pmO4puO8J+UtPCflLXwn4yV4pmT4pmO4puO IGhlbWlzcGhlcmU= b3VidGVkbHk= I30= NjAwMDA= QmVsbA== U0FU Ym9ycm93 ZGFk bWl0cw== bmFtYQ== c21h aW54 IHR1dA== IHRvdXJz ICAgICAgICAKICAg ZW5vdWdo IHBjaQ== IHB1ZWQ= IHdpc2hpbmc= IHJlbHlpbmc= IGRyeWluZw== ICcpOg== Y2tl aW50ZW5kbw== YW1G X189PSI= IFBpenph J107 IHvCtg== IEVyYQ== IHJlc2g= IGxlYWtlZA== ZGF0YWNsYXNz IFVn ZWxsZXJz IGFkaGVy IDQyMA== IGFwZW5hcw== IHJhaW5m ZXJ0YQ== cm93bmluZw== IHNhdXNhZ2U= IDE5MDE= UmVjZXB0aW9u c3Bp IGFnYXI= IHNwb3VzZQ== IGxpbmV1cA== MzMwNg== IGVuZG9y IHppbmM= cHBj IGRvd25zYW1wbGU= YmFzZXBhdGg= IE5ld3Nw KF8p b3VuZ2U= IExlYWRlcnM= cGFyZW50RW50SWQ= IG9jY3VycmVuY2Vz CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgIA== IGZyZWV6aW5n U0lTVA== IFN0cmF0 5Luk Q2hlY2tzdW0= cmFnbWE= IHByYWN0aWNpbmc= IG1pc3NpbGU= Rmxhc2g= IHJlcGxhY2VtZW50cw== IGNyb3Nzb3Zlcg== KSg/ 77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9 IFJlbW92ZXM= Q29udHJvbHM= Zm91bmRlcg== dWF3ZWk= PScsJyw= am9pbnRz aGFyZHQ= IFNwcmluZ3M= IHByYXllcnM= IEVsbGVu IFBvcHVsYXRpb24= 5b+X IHVuZXhwZWN0ZWRseQ== QmVsb3c= QUFBQUI= UEtH 6Kej5p6Q 0L7Qu9GM0Lc= c2V2ZXJpdHk= 5pW05pWw 7IOB IGRpc2FkdmFudGFnZQ== IGlnbm9yYW5jZQ== IEdsZW5u IG1pZ3JhaW5l IDY1NTM1 IHNsZWV2ZQ== QVRUUklCVVRF IEFCT1ZF IGJvZGlseQ== IHNpbmNlcmU= dGVhckRvd24= SEVBZmc= aXNveGF6b2x5bA== OTEy QCU= RG4= TGlm VWludA== XSE9 ZHBvcnQ= ZWF0aW5n ZmFzdGVy bmFy bmVsbA== emVudA== 56A= IA0K ICwi IHduZA== cm9yZWQ= IGluY29tcGF0aWJsZQ== IGJpcg== aWNvbnQ= IGxsZWc= aWdpYmlsaXR5 IGRlc3RydWN0aXZl IFRvZGQ= IFNDSA== MDA2NQ== IHZtaW4= IDIyNg== IFBpbms= IGV4ZXI= IGV4Y2hhbmdlcw== IExDRA== b2NhbXA= YWNpb3Vz cGVyeQ== c2NvcmluZw== IDMwOA== IHdlaWdoZWQ= IHByZXZhbGVudA== IG9iZXNl UkVUUg== IHN1YmxpbWU= ZGRs RXhhY3Q= YWxzYQ== IGVkaXRpb25z MDUwMDM= IHBlcnNvbmE= YmxvY2tjaGFpbg== IGpvYmxpYg== c29ydGluZw== IG1lbnVz RVhQT1JU SW5wdXRTZXQ= cHJlZml4ZXM= RlRQ IFJlZ2FyZA== YmFpZA== bm9ubGluZWFy IHdvcnJ5aW5n dXBwZXJjYXNl IHZpb2xhdGU= IHNhbHRz cGlja2xlZA== UGFydGljbGU= IGNvbGxlY3RvcnM= T3ZlcmFsbA== UGFja2Vk IEFueXRoaW5n 5Y+W5b6X IGRlYmF0ZXM= Q29ycHVz U1lNQk9M IFByb2plY3Rz IGRlY29yYXRvcnM= RFRE 57G75Yir IGNzcmY= IHJ1aW5lZA== IMK7Lg== IGZhbmFydA== RXF1aXBtZW50 KC4qPw== IEJhc2ljYWxseQ== IHBhcmFncmFwaHM= IGNvbmZyb250ZWQ= IFN0b2NraG9sbQ== dGVsbmV0 6Zai IGZyYWN0dXJl IGVuZGVtaWM= IENoZW1pY2Fs b2JzdGFjbGVz IFllZ2luYQ== IGZvcmdpdmVuZXNz c2V0U2l6ZVBvbGljeQ== IHVuaWNvcm4= IE1pZ3VlbA== 6K6/6Zeu JCku LC4uLg== NzE3 ODU1 SkE= TWluZQ== ZG9s ZGlzdHM= Z29iamVjdA== bmJ5dGVz cmlubw== cmFyaWFu dWls fSh7e1w= aW5zdHJ1Y3Rvcg== IGFwcmVzZW50 IGNq IGNpbmRlcg== IHNwcmU= IHJlaGU= IG5hcmM= IG5pdHJv ZW50b24= dXJpYQ== IGx2bA== ICIuLi4= IDExMDA= dmVpcw== aXN0cmE= ICMl IENk IHZhaQ== IDIxOA== IDIxNA== IFBhdHRlcnNvbg== IE3DqQ== IEZlcmc= IC1cXA== cGxpbmU= IFJpdmVycw== KCJg IEhN IEdGUA== IEVNUA== IFwj KS4kJA== b25ncw== IG5lY2Vz SW5jcmVtZW50 IFZJSQ== IEtyaXN0 IHBhcmFkb3g= IHNvY2tz YXJnc3BlYw== MTk2NA== IGludGVybGU= IHN1YnVyYnM= IFJldXRlcnM= IG1heHZhbA== ZGlzY292ZXI= cm9sbGV5 IGRvd25zdGFpcnM= IFhib3g= IDE4Ng== VGV4dEJsb2Nr c3lzY2FsbA== IEFsYmVydGE= fSwkJA== dHJhZGluZw== YXJtYWN5 cG9sYXJpdHk= cmlzb25lZA== IHVudGVycw== IHBhY2tz ODg2 IGxpYmVy RklSTQ== SXNB IFBlcmN5 IHNuYXI= Z2F1Z2U= UG9sbGVy IEFwcGxpZWQ= IHJlc3BlY3Rz IENhbmFs IGFzc2lnbmluZw== U0RM RGV0ZWN0aW9u IGlycmVz Q2FuYWRh IHN1bnNldA== IGNvbWJpbmVz IHVsdHJhc291bmQ= IHBrZ25hbWU= IHNwbGVuZGlk IHRvcnF1ZQ== IHBpbGxvdw== IEFjYWRlbWlj IGhhcm1sZXNz 5oqK IEJhaWxleQ== IHN0cnVnZ2xlcw== IExvZ2luRm9ybQ== IGFmZmlsaWF0aW9u c3RpY2t5 dHJhbnNsYXRlZA== IFVudGVy Q3ljbGU= YWx0ZXJuYXRpdmU= SmVhbg== 5bCx5piv IGNhZGVuYQ== IHBvbMOtdGljYQ== c2V0TWF4aW11bVNpemU= IGhlbGljb3B0ZXI= 54Wn IGltcHJpc29ubWVudA== sOydtO2EsA== X189PSJfXw== KV57XA== MDk2 NDM1 NjE5 NzM1 R1NM R1ZT SGFu SnU= U2FuZA== U1VS Wkc= bGl2ZWQ= bmZz cXc= dGlz dGxlbWVudA== eGlk 54s= IGFpcw== IGFjaw== cmVjb3Zlcg== IGNubg== IHdhZ3RhaWw= aW5nZXM= IGluZWZmZWN0aXZl Y3Rm IGRvcnM= IFRyZXZvcg== YWdhcg== YWd1cw== IFNDUkVFTg== KCkuXw== IEliaWQ= IGNvbnF1 IE1tZQ== IE1vZmY= ICst IHJ5 Z2V0VHlwZQ== YXRob2Rl ZXdlZQ== IERBWQ== J10i cGVyc2Vk dHJ1 dHJvbg== IHN0cmFuZHM= aWNreQ== IEt1bmRlbg== IHNvaXQ= IHNwYW5z bWFudWVs b2Zwcm90bw== IGJsdW50 IDE4Nw== IHBvc3R1cmU= IHJlZmxleA== Y2nDs24= IENsaW1hdGU= RkZJWA== IHZlaW5z IGJlc3RpbW0= IHByZXNlbnRseQ== 0L3Rjw== 5YiH IHJvb3RlZA== IGNydXNo bnVsbGFibGU= TU9FU00= IG9yZ2FuaXppbmc= IHRyZWF0cw== IHNhdHVyYXRpb24= IGdlZ2Vu IHdlYmFwcA== IGV4Y2l0YXRpb24= dmFzaW9u Q09MVU1O T1NFcnJvcg== IFRyYWZmaWM= IHN0YXRpb25hcnk= IGFzdHJvcHk= ICcrJzo= IGZpYnJv IGZpcm13YXJl bmlo cGVybXV0ZQ== IEhpbGxhcnk= QXR0cnM= Y2FuY2VsbGVk IFJpY2hhcmRzb24= R3VpZGU= IE5vcm1hbGl6ZQ== SURFTlRJRklFUg== IEFVVEhPUg== 6KiA UmFkaW9CdXR0b24= V3JpdHRlbg== IEdyb3VuZHM= TU5JU1Q= 5bey57uP IHJlY3J1aXRtZW50 4qO/ IENlbGVicg== VmVyc2lvbnM= RVBDQUQ= NzY1 QWxl TWI= Unlhbg== Y290dA== ZmljaGllcg== bGljYWw= b2Z0ZW4= cG91bmQ= cGVudGVy c3dvcmQ= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IOKB IHdhbm5h aXNFbXB0eQ== IG5pbnRo IGdyZW4= Y2hhbmdlbG9n IFRvZG8= aXN0cmllcw== IFNoZW4= IHN0dW5uZWQ= bnR5 aWZmZXI= IDIyOA== IDI4NQ== IGRlZmlu IFBpeGVs IEZT IFJBRg== IEhpZGU= IEVjaG8= IGNoYW1iZXJz IGFycm9n aWVsZQ== IGRvaXM= IHBhcmw= b2xkb3du IGhlcmQ= cG9zdXJlcw== IHpvbWJpZXM= Y3Vyc2Vz 44Gp dW5jZXJ0 YXBpa2V5 IDE4OTc= c3dvcnRo IGdyYXBlcw== IHJlYWxpc2U= IExlZ2Fs Ym9va21hcmtz ZXRoeWxlbmU= U3VibWlzc2lvbg== IG5lZ2xlY3RlZA== dW1iZW50 IGNsZWFyYW5jZQ== TElWRQ== IE5laWw= S0VZRE9XTg== UEFUSFM= IENoYXJsb3R0ZQ== c3VwZXJ2aXNlZA== IGluZmx1ZW56YQ== bnVjbGU= IFJPQw== Q29ybmVy IFRlcm0= 6KeE IGVsZXBoYW50 IFByb3ZpZGVy IHR1cmtleQ== c2VsbGFibGU= UmVzdGF1cmFudA== T1JERVJFRA== IDAyMTEx U0NPUkU= IHRpbWJlcg== IEFiYmV5 IGRpc21pc3NhbA== w7xuc3Q= b2JzdGFjbGU= bG92YWtpYQ== Q0hBTkdFRA== IGlndWFs IHNxdWVlemVk IG92ZXJsb29rZWQ= c2V0ZXE= IG1pdG9jaG9uZHJpYWw= UGFjaWZpYw== IG1ldGFwaG9y Njgw Pjo6 QXJvdW5k QnJpZ2h0 RGVhcg== REFQ UHRl VGE= bm9yZA== d2l0Y2g= 0KM= IHRpcmVz IGF2YWw= YXJhbXM= aXNlcnM= aWNpZW5jeQ== IG51bg== IG5haWxz IGhhbGlnbg== IGFuZGVyZW4= YWd0 dmVydGluZw== IEN1bHR1cmFs IHNleHk= IDI5NQ== IE1lc2g= IGFzbQ== YXRob20= IEJpcm1pbmdoYW0= IEhpcA== dWJlcm5ldGVz bGRh IEdEUA== YWNxdWlzaXRpb24= IildLA== c3RyaWM= cHJvcG9zaXRpb24= IE9kZA== b3N0YXJpYQ== Li4iKQ== IHVubGltaXRlZA== SW5zdGFudA== IEthYg== IiIiXA== c3BlbmQ= d29ya2Rpcg== Ymxh CgkJCSA= IGluY2xpbmF0aW9u ZGlza3M= IENvbnNlcnZhdGlvbg== QVNG aXRlcnZhbHVlcw== IGZvcm11bGFz IGRvd25ncmFkZQ== bXNnY3R4dA== IHBvc3RncmVz IHZlaW4= IHNpbXVsYXRvcg== aGFzaWw= UElY RVhURVJOQUw= IGFkbWlucw== IERhdmVu IHB1cmdl IGp1ZGdlZA== KX17XA== IGRlY2xhcmluZw== IFBhdGllbnQ= RGVjYXk= bmVnb3Q= b3B0aW1pemF0aW9u IFBvc3RGb3Jt U1FMQUxDSEVNWQ== IOat IGluanVuY3Rpb24= IGFzdHJvaWQ= RUVL IHByb2NlZHVyYWw= IHByaXZhdGVseQ== IHBhaW50ZXJz IHZvdGVy VGVybWlu 5q2i TUlNRQ== IFRvcnJlcw== 0L7RgNC8 IExpa2V3aXNl IG5ldXJvbG9naWNhbA== IFNsb3Q= IHNpZWdl IEpvZWw= 6Ieq5Yqo IGluaXRpYXRpdmVz 6Kit dHJhbnNsYXRpb25z IGNvbmZvcm1pdHk= UkVHSVNUUg== IG94aWRhdGl2ZQ== IHJlcGV0aXRpb24= IHJldmVuZ2U= ZGVzY3JpcHRvcnM= IFZlbmV6dWVsYQ== IEZJUlNU S2V5VmF1bHRFcnJvckV4Y2VwdGlvbg== MDMx Mzk4 NjM5 O30= Q0VMTA== RnJvemVu R09P VHJv aHd3 aHBy a2FybWE= b3ZlcnM= c2xl dmlhbg== eGg= IHBhdmVk IHdvbGY= IHJlc2VjdGlvbg== Y3Rlcg== YWRheXM= IFRhbQ== IHN0b3Zl MDA4MA== IEFjaA== IEFtYXI= IHZldG8= dXBzdHJlYW0= IiwiIik= IERI IHNobGV4 ZGF0YVNldA== YW5zaW5n PSd7 IFV0aWxpdHk= IGFycXVpdm8= PSIk LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= bWluaW5n IGNvbXBlbGxlZA== cm93Rw== U3RvbmU= YW5uaQ== dGFp c3Vic3RyaW5n Y29tcHV0YXRpb24= ICYnLA== IGFtaWU= IHBvbHlz IGZvbGxvd2Vy ZmFjZWNvbG9y IGNvbnNvcnQ= IHdlbGxz cm9waGU= dHJhY3Rpb24= dHJhaWxpbmc= TE9T IFNoYWRl IGdyaWxs IG1vZGVsZWQ= IHBvc2l0aW9uaW5n IE9ydGhvZA== IGRpc2NvdXJh IEdldHR5 c2ltcA== IGFpcmxpbmU= U1BJREVS IHNsb3dlZA== c2V0dXBVaQ== Y3VzdG9tZXJz IGNvbnRyYWN0b3I= IGNsaW5pY2FsbHk= IG9yaWdpbmF0aW5n PXt9KQ== IGZsZWU= IHN1Y2Nlc3Nlcw== IHdhaXRz KCJbJQ== IHB1cmNoYXNpbmc= U0tJUA== IFBhbmFtYQ== 4KWA IGNvbmNlYWw= IEhhcmR3YXJl YWt5UmVMVQ== 0LDQvdC40Y8= IE1PRFVMRQ== IG92ZXJ3aGVsbWVk IGlra2U= IEltcGxlbWVudGF0aW9u UmVsYXRpb25zaGlw Q09OU1RBTlQ= IHBhcmxpYW1lbnRhcnk= IGVjY2VudHJpYw== bW5vcHFyc3Q= Ky0tLS0tLS0tLS0tLSs= NDY1 NTgw OTc1 QmlsbGluZw== RXU= RWNvbm9t RklU S2VsbA== UE9S U3BoZXJl VHM= Ymlkcw== Y29ycw== ZXZl ZkE= aGl2ZQ== bGl2ZXM= cmF0aGVy dm5j w4M= 2YE= aW5jbHVzaXZl IHRpZ2Vy IGN5bg== IG9zdA== IGRob2xiYWNo dXRscw== ICgpOg== dWV6 Y2hyb21lZHJpdmVy MDA5NQ== c3N3b3Jkcw== dW5paw== IGNvbmRlbg== IDI2NA== IDI0Mg== YW5kaXNl IFBpY2tldHQ= IE5N Y2xy IFJTUw== IFJvY2hl IExJTks= dWJvdHR1 IEdvdGg= b2dsb2I= YXN0ZXJ5 IGxlaXN1cmU= IGtIeg== IGplcms= PScrJyw= IGVuY29udA== IHVuc2V0 LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= CiAgICAgCiAgIA== Zm9pbA== MTIyMg== IGRpc3NlbnQ= IGRpc2NoYXJnZWQ= YXJpYXQ= MTkzMw== MTkzNw== SURS IGNsYXNzTmFtZQ== X3t9Jy4= IHB5d2lraWJvdA== ZGF1Z2h0ZXI= TGlzdFJlcXVlc3Q= IGFjY2lkZW50cw== IGluZG9vcg== VVJBTA== IDE4OA== aW50ZXJydXB0 IEFsbGU= IHBvc3RhbA== 0YLQsA== cmljYQ== IMOc IHVudG8= OTcx IGZpbmlzaGVz IGVuY2xvc2Vk IGlzc3Vpbmc= aHlk VkVSQg== UGhvdA== IG9yZ2FuaXNt c2lnbWFz IENhcmli cGF0Y2hlZA== IE1jTg== IGVjb25vbWllcw== IFRyYW5zbGF0aW9u U1VCUw== IGxpbmhh IGJyYW5jaGluZw== IGNvbW11bmljYXRpbmc= IHN0YXJ0ZXI= IHNlcXVlbA== U2xvdHM= Y250cw== RVhURU5TSU9OUw== IENvbmdyZXNzaW9uYWw= YXRpbnVt IHV1aWRyZWY= IFNvY2lhbGlzdA== IEV2aWRlbmNl c21va2U= YmVjdWU= IHZhY2NpbmVz ZXVjbGlkZWFu ZXhwbGFpbmVk QVVUT1RIUk9UVExF IHNldmVudGVlbg== IFdhdGNoZXI= UmVjZWl2ZQ== IG9ic2VydmF0aW9uYWw= U2VudGVuY2U= dHJpZ3JhbQ== IEdpYnNvbg== 5a6e546w IEh1bmdhcmlhbg== b3R5cGlj ICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t IGFub21hbHk= IG5vbmxpbmVhcml0eQ== IGRlcHJlc3Npbmc= IFNvbW1l IFdPUks= IHNlZGltZW50 Q3N2 RlJFUQ== R2Fz S1k= T3JhY2xl VGFw Wm4= XCIi YlA= a2l0cw== cGFj cGRpc3Q= cnVudA== emhlaW1lcg== fV0sW3si IAogICAgICA= IHRwcg== c3RheQ== IGNvZw== IHBvbg== IHB1bms= IHNvcmU= bWV0ZXJ5 IGJhcms= IG5jb2xz IChfXw== IGdkZWY= IGdhc3Rybw== aWZpbGU= IE1hbmQ= IEZsZW1pbmc= IGFubw== IEhQVg== c2V0V2VpZ2h0 c2V0Qm9sZA== Y294 IGFidXNlZA== ICQoIiM= Y2hlbA== IGJ1dHQ= U1RBUg== XS5fXw== UHJvZA== IGtleXN0b25l X3t9Xw== IHRyYWlscw== cmVndWxhdGlvbg== IFVuaXRz J319LA== IGNvcmFs IHNtaWxlcw== IGltcG9zaW5n UGFyaXM= IHByaWNpbmc= IGRpZmZlcmVudGlhdGU= IHJlZnM= RElGRg== IGhvbWVsZXNz IMKX bmFpc3NhbmNl KS8oKC0= IFVzZXJuYW1l IFNwaWVs aW52YXJp IGZ1bmNz IHV0aWxh 5LiA5qyh R1JJRA== IGlsbHVzaW9u bWFjcm9z TWVudUJhcg== IEdyYWRl INGB0L4= KCdfJyk= IHJvbGxlcg== IHRvdXJpc3Rz IGNvbXBsaW1lbnQ= IGhvbm9ycw== IHNwb29m U1lOQw== IGJyb2FkY2FzdGluZw== KSsiJg== L3t9Ii4= 5omA5Lul RXhpc3Rpbmc= cmdiYQ== IHB1bXBraW4= 5qih5byP b2NhdXN0 4LeK IGNvbXBlbnNhdGU= IEVwaXNvZGU= 4pe877iP4pe877iP4pe877iP4pe877iP IG1pY3Jvd2F2ZQ== IHRhbWJpw6lu IERlc3RpbmF0aW9u IGNvbnZvbHV0aW9uYWw= IGN5dG9raW5l IGNhdGFseQ== IE1lYXN1cmVtZW50 IHJlZGRpdA== IGNrcHQ= V2VkbmVzZGF5 IFNjcmVlbnM= 0YLQpg== IENvcmludGhpYW5z Kyc6 NDY0 PT8= RUZG R0lU SkQ= S2ly S2VsbHk= UGFwZXI= U0dF Z2FibGU= bXJv cGluZQ== eHBvcw== DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IO+/ve+/ve+/ve+/vQ== IHRlbnRo IGJsZW4= IG5N IG53 IHRvcmU= IEFJRFM= IHNlaXpl IHlvdXR1YmU= IFBvZA== Y2xhbg== IEhlc3M= IEhheg== IHJlc2lkZQ== IFVU aWNocg== IGFwcsOocw== IEt1bWFy Y29sb3Vycw== cmFpbmluZw== QVRD IGxpc3RkaXI= IHF1aWx0 bG9hZFRleHRz ICoqKioq YW1wbGVz U2V0WFla Y2VudGVyZWQ= PT09PT09PT09PT09PT09PT09PQ== IFhNTQ== cHJpbWVz QUNM VG9UZW5zb3I= IGF4cw== OTcy dmlzaXRz IGJvb2ttYXJr YXV0aG9yaXR5 NDkz IGN1c3RvbWl6ZWQ= Zml0dGluZw== cHRocmVhZA== IHNhdGlzZmFjdG9yeQ== ZnVsbHNjcmVlbg== IG1pc3VuZGVy IHV0aWxpemluZw== IERlcHRo Y29zaW5l IE5hbWVzcGFjZQ== IGVkZ2Vjb2xvcg== IHJlcGVhdHM= IGlycmF0aW9uYWw= YXRvb24= IFRIRU4= QXZhaWw= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== SFRNTFBhcnNlcg== IHN1cnJvdW5kaW5ncw== IGFwcHJlY2lhdGlvbg== IHRvdWNoZXM= IGNvb3JkaW5hdGlvbg== 5qih5Z2X SW1wYWN0 c3RpY2tlcg== cmVzY2FsZQ== IGFzcGly VmVsb2NpdHk= IHJlY29uc3RydWN0ZWQ= IEJ1ZGRoYQ== IGdyZWV0ZWQ= aWRlbGl0eQ== IFVsdGltYXRl IHNjYWZmb2xk c2V0Q3VycmVudEluZGV4 Y3ljbG9wZWRpYQ== Oig/ SmFuZQ== U09S WWllbGQ= XygpKQ== ZWZmaWNpZW5jeQ== ZnJpZGdl ZmFrZW4= cHJh cWY= dm93 d2ll IHRpbmhh cmVi YXRvbXk= aGVzaXpl bGVm IGRwcw== IGdlbnRl IFRjbA== IFRvbmc= IFN1bmQ= IFNsb3Zlbg== IEFMRQ== IENhbmRpZA== b25lb2Zz IHl0 IDIyMQ== IE5G IE5S IE5hdmlnYXRpb24= IG9uY2xpY2s= IEZsZWV0 IERNUw== IExvcmU= IEx1eA== IEdV IEdlbA== IEdyb3Zl IEVQUw== IGphdg== IDM4NA== b2tlcnM= IHVuY29tbW9u IGZpbGVQYXRo IH1few== Q2hpZWY= MTYwMA== QU5TSQ== VGhpbms= IEhlaWdodHM= IENvbnZvbHV0aW9u c3BsaXR0ZXI= IHNtb2tlZA== bGVzc29u IHNraXJt IHN5c2NhbGw= IGxpbmthZ2U= NDQ2 Vmlld2Vy cG9saXQ= IGhvbWVhc3Npc3RhbnQ= IGxvY2FsdmFy IGZpbmFuY2luZw== TG9nZ2Vk IHN3YWxsb3dlZA== IGtpbmRh RVhUUkE= Y2xpY2tz IE5ldXJhbA== IHByYWN0aWNlZA== V2hhdGV2ZXI= REFURVRJTUU= IGhpc3Rvcmllcw== IERlc2t0b3A= SFRUUENBQ0hF IHNhbHY= cGJj Ymlhc2Vk IHdpbmRpbmc= YmVuZWY= bGlrZWQ= U3dhcA== IE9mZnNldA== ICIjLw== IHNlcnZpYw== IG5hdGlvbndpZGU= W14+ IEF1dGhvcml6YXRpb24= TWFnaWM= cGFzbw== aW1tZXJz IGRpYWJldGlj IENvbnRpbmVudGFs IEdpYW50cw== IGFzaGFtZWQ= cmFkZXNo IFRpTw== U29uZ3M= PS09LT0tPS09LT0tPS09LQ== IGFzeW1wdA== IEFncmljdWx0dXJhbA== IEtyZW1saW4= IHZveWFnZQ== 5o6S5bqP cGVydG9pcmU= c2ltZXE= KSIpLA== NTY4 NzYw QXBy Qks= QmVk QkFORA== SG9wZQ== UmFt Um9v U3RlbQ== U05E Y2FmZmU= Z2RhbA== aG1h aG9wZQ== a2M= bHVuZw== cGlucw== cmFscw== IHR1Zw== IGF1cg== IGFjbA== b3Jpcw== bGVpc3Q= IGZ1enp5 aWNpYQ== ZWxpYW4= IGlh b3RlbnQ= b2x5c2lz IFRhcw== IFRpYg== IFNsb3Bl IHN0YXJr IEF1Zg== aW50ZW5kZW50 IHZ0 IHNlcGVy IGNvbnNlcXVlbnRseQ== IFByYWRlc2g= KCciJyw= IE5Q bmFtZXNl IEZlc3Q= ZWN0b215 aXphcmRz aXphw6fDo28= IERST1A= IExU IEhI cmVzaXplZA== IFdvb2w= ZnJvbXR4dA== IHdlYm9vYg== cHJlZmV0Y2g= YWRkQ2xlYW51cA== Y292YXJpYW5jZQ== IHVuaWRhZGVz IHVuZW1wbG95ZWQ= IHRlc3RpZnk= IHNldHRlcg== aXhvbg== MTkzOQ== MjUwMA== IHN1Ymxpc3Q= IHN1YnNlY3Rpb24= U0VH c3RhdGVmdWw= YW1wYWduZQ== Y29tbWlzc2lvbg== IGluZGlnZW5vdXM= YW55dGhpbmc= SW50bw== Q0hB fSxcXA== U2Vydg== IGV4cGFucw== IHNsYXNoZXM= IEFub255bW91cw== IHZlZ2c= 44K7 0L3QvtCz0L4= IHNlbnRpbWVudHM= MDcyMDE3 IGV2YXBvcg== dWl0YXI= Q2hlY2tib3g= IGludm9jYXRpb24= IGNoYXJhY3Rlcml6ZQ== IHJpcGU= IG1pc2VyYWJsZQ== IGNvbW1pdHRpbmc= Q29tbWFuZEhhbmRsZXI= IHRvb2x0aXA= IFByaW5jaXBhbA== IHBzeWNoaWF0cmlj ZmFjdG9yaWFs bWt0aW1l aXB5dGhvbg== cGVyc2lzdGVudA== IERPQw== IHN3ZWVwaW5n WWVhcnM= 5L6b IFNwcmluZ2Vy IGVhcm5lc3Q= 5o6l5Y+j IHJlcHJvZHVjZWQ= MjAwMzEyMTg= IHdpbGxpbmduZXNz Y2VzdGVyc2hpcmU= VEdQb2ludA== UGhhc2VyQQ== PmBf IGFkdmlzZXI= IHBhcmFzaXRlcw== IHRveGljaXR5 SGlkZGVuSW5wdXQ= IGdhbWJsaW5n bW96aWxsYQ== 56eN5a2Q IE5hcG9sZW9u IGFwb2xvZ2l6ZQ== Z3VudGE= IGJsZXNzaW5n IEFncmljdWx0dXJl IGxpbmd1aXN0aWM= IGNyaW1pbmFscw== IEdhcmNpYQ== IGxlZnRv 4pag4pag IHJhaW5mYWxs MjAwMzEyMTgwNzIwMTc= KSsnXA== Kicp NzEx NzQ1 ODk5NA== Piku S2V2aW4= Tk9S UmluZ3M= WkQ= bnNlY3M= cmp1c3Q= d3J0 IGNvYw== IHBlbm4= IGluY2VwdGlvbg== IGJpemFycmU= b3VzdA== IG5ncmFt IGRhbmdlcnM= IGx1Zw== IGVtYQ== aWdyYW0= IFRpZmY= IFRha2luZw== b3J0aWM= IFNpZw== IFNvcnJ5 ICNb IEFwYXJ0 aWZuZGVm KCc7Jyk= IEJCQg== IHByb3RhZw== IG9ycGhhbg== IFdha2U= ID09Pg== c3RyYXI= aWV2ZXM= IHJvY2tldHM= IG9iZWQ= bG9nb24= IDY1MA== SURY MTgwMA== IHVybGVuY29kZQ== IFByb3RlaW4= NjYz IGRvbm4= J10pWw== aWRlbnRpZmllZA== IGN1cnZhdHVyZQ== TVBQ IEFuZHJlYQ== 0YDQtdC0 Z2VuZXJpY3M= c2VuZG1haWw= cGVkaXRpb24= ZGlyZWN0ZWQ= Njkx ICcuJy4= 6K+m 0YPQtA== IHNlbnNpbmc= IGxpbWJz IGRlYnVnZ2Vy IOWH SFRUUFM= 4KSC IHRpbWVvdXRz 5byg UmVtb3Zpbmc= IG5vcm1z IGljb25pYw== c2luZ2xldG9u IGNhdGNoZXM= PT09PT09PT09PT09PQ== IGNvb2xlcg== bWV0aHk= IC0tLS0tLS0tLS0tLS0tLS0tLS0= IGh5cGVydGVuc2lvbg== IGVuY291cmFnZXM= VlBO IFN1cGVyaW9y IEdyYXBoaWNz emlsb2c= IFNpbHZh IGVtcGhhc2l6ZQ== IOCklQ== IG1pcnJvcnM= 6YGN IGRpc3B1dGVz aHVtaWRpdHk= ZmFtaWxpZXM= KCcvLypbQA== b2NoZW1pc3RyeQ== VHVya2lzaA== IEhhbXB0b24= IGdsb3dpbmc= RWFzdGVybg== aXBoZXJz IGFsa3ls IGF0dGVuZGVl IHBhcmFkaWdt IGVsbGlwc2U= QVZBSUxBQkxF IEluZGljYXRlcw== 7IaM INGA0LDQtw== b2NvbXBsZXRl MDE0MDM3Mw== IElTT0xBVEVE ZmFrZW5ld3M= NDM2 NTM2 QXdheQ== RGxn Unk= VmFu YmFydA== Y2FjaGluZw== ZmFybQ== Z3Jlbg== aGF2aW5n a3d3aWk= eHVsZQ== emxpYg== fX4= 57Y= ICAgIA0KICAg b25hbmNl YXR0eQ== IGNyYw== IGNpbmVtYQ== IGNpdmlj IGJha2Vk aWN6 bmRyYQ== IHJlcHJv IGhhY2tpbmc= b3Rpb25hbA== Y2h0ZQ== IFRz IFNpZ21h IHN0cmV0 cmlhbnM= IENV IE5hdGhhbg== cXVhcnQ= IHJ2YWw= Z2V0U3Ry Y2xhdXNlcw== J11bOl0= c2V0QXR0cmlidXRl c2V0c29ja29wdA== ZnJvbWtleXM= IE90dA== IE9yaWVudA== MDExNA== IDM0MA== IHhwYXRo IHRpbWVzdGVwcw== LiIr aWNrZXRz IHNjYXJl ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= Q29udmVydHM= IGZsdA== KCkpXQ== IHt9KSk= Y29tcG9zaXRpb24= IFVuaXR5 aW5za3k= IGh0dA== INC2 U3RyT3B0 IGNvbnNvbA== Y2FsaWJyYXRpb24= cGFzc2luZw== SVNJT04= IHBhY2thZ2Vk 0L3QvtC5 IGNhcmVlcnM= Z2VzdHVyZQ== QW5kcmV3 IExpc3Rlbg== IGxvd2VyaW5n IHB1cmlmaWVk IGNlbWV0ZXJ5 QXBwZWxsYW50 IFBvbGl0 IGVyYXNl IHNjcmVlbnNob3Q= IG1pc2xlYWRpbmc= IHNvY2lhbGlzdA== IHJpc2t5 TWVtbw== SUZFU1Q= IEJhc2VFeGNlcHRpb24= Y29uc3VsdA== w6pu Rk9STVM= 6YCf IEJlcmc= aW5ndWlzaA== IEZyYW5jbw== cmVudGU= 6aG7 IEVzdGFibA== UmF3RGF0YQ== TG9uZ2l0dWRl IGNlbGVicml0eQ== IHNpZW1wcmU= IGZyZWlnaHQ= bm1y IHBoaWxvc29waGVy aGVhdG1hcA== IERlcmJ5 IGxvdWRseQ== IHRoZXJhcGlzdHM= dHVuaW5n IEJhdGNoTm9ybWFsaXphdGlvbg== 5YGa UmVwcmVzZW50cw== 57q/56iL IGxpZ2FuZA== IHZ4bGFu IGxlYXJucw== IHN1c2NlcHRpYmlsaXR5 IFNpbXBzb24= IGFzeW1wdG90aWM= 4pST4pST IHZhbXBpcmU= YXJhYmlj TG91aXM= IH5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn4= cm9teWFsZ2lh IERhdmVucG9ydA== NTg4 NzM5 ODEx Q292 TnI= ZE5ldFdlaWdodHM= Zm9jYWw= xaM= c3R1ZGlv YWxpcGF5 IGNhdGVy IHBvbQ== IGxpZ25l IFRpY2tldA== dW5hdGU= YW1tYXM= IExhdGU= IExlYXJu c2V0eg== IEd5 IEVsZGVy aWVsaWI= aW5kbGU= IE9yaQ== bWFl IGNsYXM= YXJ5bA== IHVuaQ== IGZpbGVsaXN0 IEluc3BlY3Rvcg== dmVudHM= ZGJz IGNvbW11bmU= IGNyZXdz LCJc VGhpbmc= IGJ1c2Vz IHt9Ow== Y29tcHM= IGF0dG4= TUVUUg== LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t IGp1c3RpZmljYXRpb24= d2ht bXlsaXN0 44Gb IGh0dHBzZXJ2ZXI= Q0hJ cmVjdHM= QWx3YXlz QXJu YW5lZXI= aGFuZGxpbmc= IFNoYW5naGFp PShc eWx1bQ== 0YHQug== IG9jY3VyZWQ= IE9ybGFuZG8= IGNlcnRpZmljYXRpb24= UExBVEZPUk0= IHRva2VuaXpl IGhvbGRpbmdz d2Vic29ja2V0 IENhcm5lZ2ll IFF1YXJ0ZXI= ZWRpdGluZw== IGV2YWx1YXRlcw== 0LDQsQ== IHJldmlld2Vy 4KS/ dmFyaWF0aW9u ZGVwdGhz c29tZXRpbWVz INGB0L/QuNGB IHNvdXRod2VzdA== dGF4ZXM= IHRlbGVzY29wZQ== YWlzZXI= aXBoZXJhbA== IEdydW5keQ== IGFsdGVyYXRpb24= Z2ZkbQ== IHBhZ2luYXRl IGlsbHVzdHJhdGlvbg== WkhFTg== Y2F0ZWdvcg== w7hy IGNvdXBvbg== INGE0LDQuQ== IG92ZXJsYXBz IHBlcnNpc3RlbmNl IMO6bg== UEFSRU5U IE5FV1M= IEh1cmxleQ== IGFuYWx5c3Rz IHByZWNpcGl0YXRpb24= IEFyYWJz IHBhbmNyZWF0aWM= c2FiZGZs c3VsZm9u IE5VTUJFUg== eHRpY2tsYWJlbHM= IEJhbGR3aW4= bW5vcHFyc3R1dnc= NDIz NDQ4 NTE5 NTY1 NTQ4 NjMw RmVs ZmVzdA== Z2ZpbGU= bGl2 cmlja3M= z4Q= ZWxlbg== b2xpYg== aWdhdG9y KTpc IHVuYW1l IFNpYmVy IENvZ25pdGl2ZQ== dW5pcHJvdA== IDI5MA== IE1MUA== aHR0cGxpYg== IEZSQg== KCIr IEhlcmFsZA== IGVsbQ== IHNoaW55 b2J5 ZXhwb25lbnRpYWw= IGNsYXNzZQ== IFRodQ== IEtpZXY= IGFnb3Jh IFlpbg== IHJlY2Fs bWFuaXA= cmVnaW9uYWw= ZGZvcmQ= ZGlzY292ZXJlZA== IHN0YXR1c2Vz NzUx MDQzMA== UE9XRVI= ZGlzdHI= IEdlbmVyYXRlcw== Q29tbWlzc2lvbg== IGJhc2lu IEJsYW5jaA== ZXJjaWFsbHk= dXJnaWNhbA== RmlndXJlcw== IENvbnRhaW5z bWlvcw== cmVhbGlzdGlj RG93bmxvYWRpbmc= 5qCh IGxpbmluZw== IGNvbnRyYWN0ZWQ= IGJsdWVwcmludA== IEludGVycHJl IHRyYW5zYw== IEdydW5k IE1lcmN1cnk= 5bGV IFBSSVZBVEU= IGRyYWdnaW5n IEtpbWJhbGw= c21vb3RoZWQ= YWJlaQ== UGh5c2ljcw== IGVzY2FwaW5n IGZlc3RpdmFscw== IGluZGlyZWN0bHk= IFRJRkY= UkVQTFk= IEhvb2tlcg== IEdsb2Jl IGVudGVydGFpbmluZw== IENvYWxpdGlvbg== 4pSI4pSI 5peP6Ieq5rK75Y6/ LF0= NDI4 R2k= SVU= TWls UHg= UmVhcg== am0= am4= amF2 d2luZQ== CgogICAgICAgIAogICAgICAg IOqwgA== ICAgIAogICAgICAgICAgIA== IHRpbHQ= IGF3ZQ== YW5jaGU= YW56YQ== bGVhcA== IGZhY3Rpb24= IHdr cm91 ZWRhcg== IG1waQ== IHJlY3JlYXRl ZXRjaGVz ICIiKTo= IENBUg== YXB0ZWQ= IHZs IFBvbnQ= IEZvbA== IHJ1ZGU= IEJsZQ== IEx1bg== IFd1 b2dyYXA= CgkJCgkJ b2JpYQ== IGNsYXNo IEpvbmc= Y2xhc3NOYW1l IGFkaGVyZW5jZQ== DQoNCg0KICAgICAgIA== SW5zYw== IHZlcnNh IHRlZW5z IGludHVpdA== MTk2MQ== IHdvcmtzaG9wcw== IENoYQ== KioqKioqKg== IGFkZGl0aXZl IHBlYXNhbnQ= IFFR IGZsYW1pbmc= IFJldmVs IG1vbml0b3Jz IHRmaWRm c3dm dmVyc2lvbklk VW5p 0LjQtw== IMOF Q29uZmlndXJlZA== MDc2 IGVudW1lcmF0aW9u IEJveWxl YWNjb3VudElk TU9T dWdodG9u QXRs QXR0ZW1w R2VuZXJhdGVz IE1hbmFnZQ== d2ViaG9vaw== IG5ld3NsZXR0ZXI= IGhpc3RvZ3JhbXM= IHJvdGF0aW9ucw== IHJvdGF0aW9uYWw= 5qCR TXVsdGlwYXJ0 TGV2ZWxz Y3Vsb3M= IG5kaW0= cmV2aWV3ZXI= IG5hcnJvd2x5 IEh5ZHJv IEJpb2xvZ3k= V0hJVA== IElsbHVzdHI= RG9tYWlucw== c3BvdGlmeQ== IGN1YmVk MTIzNDU2Nzg5 IEJ1aWx0 IGRlcHV0YWRv aWdodGVlbnRo YnJhc2ls IHNrdWxscw== IG9ydGhvZ29uYWw= Ij8+ IGVwaXRoZWxpYWw= IGx1bWluYW5jZQ== Z3Vlc3NlZA== IEJhc2tldGJhbGw= IEJhcHRpc3Q= Jzwv NjEy NzMy QnJl Q0xPQ0s= RFNU RXll TWFuZA== UHVyZQ== U0xF YmxlZA== YnVtcA== ZW9s aG91c2luZw== bMOk dGljcw== dWNlZA== dWlubw== 5YI= IPCf aW5zZXQ= IHRhc3Rlcw== IGNyaWVz bGVha3k= IGZ1cnk= c2VsbHM= IHRvcHM= ZXRyeQ== ZWxpZ2libGU= IGRleA== Y2Vw MDA2MQ== IDIzNw== IEZsZXg= KSkpKSk= Z2V0b3B0 Y2x1 b3NvbWFs IG9yYWNsZQ== IFJk IEx1Y2s= IExheW91dA== IG1laW5l cmVzaXN0YW50 IEVhZ2xl LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IDQ5OQ== cG9vcg== IFZU bG9nZW4= IHNwdXI= SVRV YmFja3dhcmRz IGZpbG1pbmc= IHBvbGlzaGVk 5LiU UmVzb2x2ZXI= MjAwNDA= VGV4dE5vZGU= PVst Q29sbGVnZQ== IHJldGVudGlvbg== ZXRhaA== QURD SVNCTg== IFNlbGVjdGVk Tm90YWJsZQ== YmJi In07 dmlzb3J5 dmlzaXRvcg== Ym90bw== UkFORE9N UFJPVklE IFJlZ3VsYXRpb25z IGltcGxhbnRz XSspXA== IE5ldXQ= QmVpbmc= IFByZWlz QWN0aW9uTWFw IG1pZHBvaW50 IHJldml2YWw= R1JB IFJlZGRpdA== Ym91bmRhcmllcw== 0LzQvg== IFNUT1A= IHBhaXJ3aXNl 6L6D 0LXQvdGM IEJlbGdpYW4= IHBhbGFjZQ== IGRvc2FnZQ== bGV0dGVycGFwZXI= IGRpc3RpbmN0bHk= IHJ1aW5z IHVuY2VydGFpbnRpZXM= MDY0NA== cm9ib3Rz DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICA= Ymxhc3Rz IHByYWdtYXRpYw== IGV1cm9z IEdyYW5kZQ== IGRpc3NpcA== 5Zug5Li6 ZWxldmF0aW9u IEVtZXJnZW5jeQ== IEplbm5pZmVy IGhvcml6b250 IElkYWhv dXNhbW1lbg== Kl8= NDk0 NzAx Q2Zn Q0lS Q2lwaGVy Rkg= SW8= TW90aGVy TkNvbW1hbmRlcg== aXJvcw== cENoYXJhY3Rlcg== c25k dmlvbGV0 d2Vs d2FnZQ== eW9sbw== 0KQ= 0Js= IAoJCQkJ c2VjdG9ycw== IHBhdmU= IGJmcw== LS0nKQ== IG1pZ3JhbnRz IGjDtg== dXJyeQ== IGRlYml0 IGdvYg== IFN1Z2Fy IEFNSQ== aXJw IHJmYw== ZXJlaw== ZXJlemg= IHByb3N0YXRl JykiKQ== IEhMQQ== cmVzY2VudA== YWNrbm93 dWdlZQ== cGF0aGlj IG91dGxvb2s= aW1wb3J0YW5jZQ== IGVuZ2xpc2g= IHVuY292ZXJlZA== LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t SW5jb21l aWF1bHQ= bWluaW9u IHRlYXJkb3du MjAyMQ== U3RheQ== aXNoaQ== IGFyZ3U= IGxvZ2FyaXRo IGJvbw== IG1veQ== UHJvZml0 aW5mb0xhYmVscw== bWVkaWNhbA== aWtr IDk3OA== d2l0aHN0YW5kaW5n INCU IGJsZW5kZXI= IGZvcm1hdGlvbnM= IGRpcmVjdGluZw== bWVzc2FnZWJveA== IGNoYXJtaW5n c3dpZnQ= IHRhYmxlYXU= IGFydGlmYWN0 Tm90aWNl IFBsYW5l IGxhd24= aGVzaWE= Y2FwYWJsZQ== cmVzdGF1cmFudHM= UExBQ0U= IGVxdWlw VHJlZVZpZXc= c21p IFlvcmtzaGlyZQ== bm9ubA== IE1jRG9uYWxk IFJvYmI= IFRyYW5zbGF0ZQ== YWN0aXZpdGllcw== IGFuYWx5emVy IG1pY3JvYmk= IGJ1cmlhbA== IG11cmRlcnM= QlJBQ0tFVA== c3ltbWV0cnk= IHdhcm10aA== QWNjZXNzb3I= IHRyYW5zbGF0ZXM= IGdyb3VuZGVk R2xvYmFsVGFn IEVsZW1lbnRhcnk= IHNydg== IG1hc2N1bA== IEN1cnNvcg== Y2hhcmdpbmc= 7KCc dmlydXM= c2ltdWxhdGlvbkV4cA== IGNvbXByb21pc2Vk aW9waGVuZQ== TWFyZ3Vlcml0ZQ== 4qCA4qCA4qCA4qCA ZXN0YWJsaXNoZWQ= IFRyZWF0eQ== IGFicnVwdGx5 VFJJR0dFUg== IEJyaXN0b2w= ISIu LSQ= NDI3 OTMz Qmg= Q29k RHVy RVFVQUw= R2x5 R2FyeQ== SGFwcHk= VE9S Vm0= XC0= Y2FuY2Vy ZmluZ2Vy bHVt bmdl IAogICAgICAgICAgICAgICAgICAgICA= lYw= aW52YWxpZGF0ZQ== IHRkcg== ZXJpY2Fs YWxpYQ== YW51dA== ZGVzbA== CiAgICAgICAgCiAgICAKICAg IHNpbnM= IHN3b3Jkcw== IGJ4 IGJheg== IHJlYnVpbHQ= ICc/Jw== ZWxpbmU= IGxpb24= IGRlZWRz Y2hvbA== b3J0ZQ== dWxsZQ== aXN0YXM= aW50ZWw= IGJlYXRz aW1heA== IGNvbnF1ZXN0 a2VzdA== KCcuLg== IFtbIg== IEZldw== cGxhbnRz IER5bmFt IFJvdGg= IFJhY2hlbA== IGV4b3BsYW4= IExheQ== J10o IFdvcnRo IGNvaGVyZW50 aXBpbmc= dHlwZWlk c2hlcg== PSJA IEpQ IDw9PT4= IGFwb3N0 IHVwZ3JhZGVk IEluZGVwZW5kZW5jZQ== IHNvaWxz cmVhZFN0cnVjdA== IGNvbHNwYW4= IG5vaW5zcGVjdGlvbg== cml0dA== IGVuZGlm IDcyMg== IHJlZ2ltZXM= TGlzdFdpZGdldA== U2V0TGFiZWw= Uk9VVA== d2hvc2U= IHByaW1lcnM= INCa cm9ueW0= IG1hdGhlbWF0aWM= Y29udGV4dG1hbmFnZXI= IEFsYXNrYQ== IF0i MDU2 KV09 IHRyaWFuZ2xlcw== Z3JpZHM= Y29weWZpbGU= SXNBdXRoZW50aWNhdGVk TG9hbg== YXV0aG9yaW5n Q29tcGFy RVhJU1Q= IOyY DQoJCQ0K IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== cm9pZGVyeQ== VGFnZ2Vy QmVhdA== dWVsdmU= Q2FsbGVy IHBhZHM= IHN0ZWFsaW5n ZXFu IFJlY2VudGx5 IHRyYW5zZm9ybWVycw== IGluc2VydHM= QWNhZGU= bWFrZXM= IFRleGluZm8= YmFuaWFu 6rCE Y2hlcnJ5 IFBvb3I= IGFwYXJ0bWVudHM= c3RyYXVzcw== Y2FwdHVyZWQ= IERhcmJ5 IFJlc3RyaWN0 IGZ1cmlvdXM= IENQQkY= IERldmVsb3Blcg== 6ZaL a292c2t5 T1BFUkFUSU9O IGRlbGVnYXRlcw== Il19XSxbeyI= d2FybXVw 6aKE5rWL 4YCx4YCs IENhbGN1bGF0ZXM= IHJpZmxlcw== IENsZXJr IFRPS0VO MDY2 ODI1 S2lt TkZl Ukg= Um9z Vmxhbg== aG9zcGl0YWw= aGFnZW4= b2lz dHJpZQ== dmZz 15A= 2K0= cmVhY3Rpb25z aXRvbg== aXRhbmNl ID0m YXJ1 IHBhcmRvbg== IHNpZG8= bWVtYw== aW5nZW4= IG1vbmc= IHJlU1Q= IGx1c3Q= YXRlYXU= dWxlbmFtZQ== IFNvdWw= ICM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09 IENvYg== IHZjZg== IHNlaQ== IFBV IFBzYWxt ZW5kaXNo IEJvZw== IER1bA== IFJhbXM= IExHQlQ= b2dseQ== aXBsZXM= amVjdGVk IGVsZGVzdA== c2Nm c2Nt c2Nw IE9XTkVS IGxlbQ== ZGF0YURpY3Q= IFZlaGljbGU= IHVwc2lkZQ== IEt1cnQ= bWluaWJhdGNo IElubGluZQ== ZW5lcmdpZXM= cmVhZFN0cmluZw== IGhlcmJz U3Ryb2tl IG92ZXJsb2Fk IHBhdGhvbG9naWNhbA== cHJw aWtlcg== aWtpdA== YmVhbnM= IENvbmNlcHQ= IDE4OTk= MzUy IG11Y2hv Y3VycmVudEluZGV4 IENvbGlu IGNvbmZpcm1z IG1hdGNoZXI= ZXhwZW5zaXZl IGtlZXBkaW1z aW5jaWRlbnQ= IENvbXBhcmlzb24= IHRyZW1ibGluZw== IHNlYXNvbmFs IE1lY2hhbg== IFJlcGx5 IGJpb2NoZW1pY2Fs IGltcHJvcGVy IGRldmlhdGlvbnM= ICdfJyw= enpv YnV0dGVy IHN0YWNrcw== TlNBcnJheQ== IGV4dHJhY3Rpbmc= IE1BSU4= IFNUQVRFUw== RG9jdG9y IGltYWdpbg== aW5ldGlj IENsYXNzaWZpY2F0aW9u aG91cmx5 Zm9yd2FyZGluZw== IHBlYWtlZA== 5p6X IGdyYW5kc29u Klw8 IGRlZmVhdGluZw== cmVjZWlwdA== IFNjaGVtZQ== IFNvbG9tb24= IHRlcnJpdG9yaWFs TkFNRVNQQUNF UmljaEVk IENvbWVkeQ== cmVwbGljYQ== IGdsb3Zlcw== IGV4Y2VlZGluZw== IHBzeWNobw== 55+p ZW5oYW5jZQ== IHd0Zm9ybXM= bGliZ2ltcGJhc2U= IFVsdHJh IHJldmVudWVz IHByb3NwZXJpdHk= RGFyd2lu IGVucmljaG1lbnQ= SXNyYWVs IGFlc3RoZXRpYw== LScr NTk2 NTg1 ODQw Plte Q3V0cw== RmVtYWxl TEhF TXA= TmI= Tk9E UG9udA== UWQ= Vmg= Z2Fi aGlyZQ== aG1lbg== acOhbg== c3N0 IGFwZXg= c3RhaW5lZA== IHNxdWU= IHJlc2VtYmxl YXNwZXI= IHRvZGE= IGh2 IGhheg== b2xhcmx5 ICgoIg== Y2hhbmNl IFRvdA== IFRORg== IFNvdXJjZXM= bHlz b3BhdGh5 IGNvbnZl IHllbGxlZA== IDI0Mw== IFByaXNvbg== YW5nYW4= IHJpZGVycw== YXNzb2M= IHdoaXQ= IExhc2Vy IGF0b3A= IEd1aWQ= aXBseQ== ICIiIiIiIg== cHJvcG9zZWQ= IGVsbGVy c2NvcmVy IHNodWRkZXI= b2JpYW4= dWdh IDMyMQ== PScnJw== IFVJRA== dWRm YWtDc1NvZnREcm9w IGRvaQ== cG9rZW1vbg== IEthdGU= Y29udGln IFl1 MTk0OQ== Oi8vew== aW9wZQ== QUxD c3VidG90YWw= c3Vic2V0ZXE= dGhlbWVz Y2VudHJvaWRz IGFtZW4= c3VtbWVy cnVua2Vu IEV4Y2VwdA== IGV2ZW50bGV0 dWNpZA== NzUz cGFzc3BocmFzZQ== ZmluZGl0ZXI= dHJhYw== IiwiKw== MDUx Nzc3Mg== IHN3YXJt Q29uZmlnTGlzdEVudHJ5 b2dyYXBocw== IGdvdmVybmFuY2U= IGJveGluZw== IGJlbGlldmVycw== IG1lbW9yYWJsZQ== IFBlcmNlbnQ= IHByb21pbg== cmxpY2g= cGhpUHJlZHM= d3hFVlQ= Q2FsbHM= IEltYWdlVGs= IE1hcmt0 VEVTVFM= b3VyYWJsZQ== bWtzdGVtcA== YXZpZ2F0ZQ== IEFpcmxpbmVz IGhvbW9zZXh1YWw= INC40L0= RGlnaXRz IEFkbWluaXN0cmF0b3I= IHBoaUlm IHBoaVByZWRz IHNlbWFudGljcw== UmVzdHJpY3Q= MDE1OTIxOA== Z29sZGVu IGVuY291cmFnZW1lbnQ= wrbCtg== Mjk3OTc= RmlyZWZveA== ZGF0YXNvdXJjZQ== IGNvbnN0aXR1ZW50 IGNvbnN0aXR1ZW50cw== IHRlZW5hZ2Vycw== b21vcnBoaXNt IGZ1ZWxz QWZmaW5l cmVhY2hhYmxl IGRlc2NyaXB0aXZl IGJhc3RhcmQ= 56qX IGRlY2Vhc2Vk 4pe777iP4pe777iP tpzroKU= b2N1bWVudGVk IGltcGF0aWVudA== KiIp QWJvdmU= Q291cg== RUFN RklORA== SXNz TUlH U2tl U25vdw== YmlzZWN0 ZmFjdGlvbg== aWF0ZXM= am9uZw== cGtleQ== cm5h cnNyYw== c2Fucw== d2Ny DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg INGA0LA= aW5o aW5zdHI= c3R1 IG92YXJp IG3DvHM= b3RpY3M= cmFkZXM= IGdkYXRh IElDQw== dW1pbmE= IE5FWFQ= IExpZA== IEdvbA== IEVzdGF0ZQ== IE9waW4= ZXhwb3NlZA== IHJvaXM= IGRvb21lZA== Y2hlc3Q= IGhhc2hlZA== MjUzOA== IHNwZW5kcw== QU5D IHRyYWRlcw== TUVBTg== Y29tbWVyY2U= IHByb3ZpbmNlcw== aXRlcnJvd3M= IGZpbmRlcg== MTAwMg== SVNSQw== QWxvbmc= IGdyYWRpbmc= MDMwMQ== IGxlbmd0aHk= ZXhwYW5zaW9u 4YCb ODc5 fXsl cmVzb3VyY2VHcm91cE5hbWU= QlVDS0VU IGdyZWV0aW5n IEVuZW15 IHBlcmNlbnRpbGU= IE9iag== 5Lqb ZGlmZnM= IHRyb29w IGFwcGxpY2FudA== ZmluYWxz SVJE IEVkbXVuZA== IEFtc3RlcmRhbQ== U3BlY3M= 5biW5a2Q IGhvbm9yZWQ= 4YOY IGluc3RpdHV0ZQ== IExvdWlzZQ== TXVsdGlDb250ZW50 IHdhdmVmb3Jt IHRhcmRl IE11c2ljYWw= Q1VSSVRZ IEJpbGxib2FyZA== IFJlZnJlc2g= UHJlZmFi RXF1YXRpb24= U0tJTg== V2VpZ2h0ZWQ= IE1vbnRnb21lcnk= IEl0ZXJhdG9y IHRlbWJvbw== IHBvbHlub21pYWxz 6YOo5YiG IFJvZHJpZw== IFRhbGliYW4= IGNvbnNvbGlkYXRpb24= IEJ1bGxpdHQ= TG9zdEhpdHM= IGN1bG1pbg== U2Vjb25kYXJ5VmVydGV4 ZmF2aWNvbg== IGFydGVyaWFs IHdoaXN0bGU= VmlsbGFnZXM= Q0hSSVM= IHByb2dub3Npcw== IGRpc2NyZXBhbmN5 0LLQtdC00LjRgtC1 J197 Kns= Kigo Kyw= NDE5 NjYw Q250 Q2FwdA== RnU= RnY= TXV0YWJsZQ== TUFSR0lO UHJlcw== UUNvbWJvQm94 UklORw== WyFd Xl0oIw== cmluYQ== wqk= ICAgCg== IHR3ZWVweQ== IGN1YWw= IGNzcA== IGZ0cA== IGZpbmVz IHNvYmVy aXNWYWxpZA== IFRhdA== IFNhdw== dGhpcmRz IHN0dW1ibGVk IEF1Yg== IENyYXc= IHZu IDIwMDAw Y29udmVydGVk IEZpYg== IHJzeW5j IEJT b3NhdXI= IFJ1bnRpbWU= IFJhbHBo IEhERg== IEVpc2Vu cGVybXV0YXRpb25z IDMxMA== IDMxMQ== IDMwNQ== YW5zdw== YXZpcnVz IGNvbnRlbmQ= cHJlc2V0 SU5DTFVERQ== MTAyNQ== IHVwZ3JhZGVz IHBhcmFkZQ== IGRpc2NvbWZvcnQ= IGludHJvcw== IClb IG1hbmV1 IHN1YnRpdGxl IHN1YnJlZGRpdA== ICoqKio= Q2hhcmc= U0VDVVJJVFk= IENoYWQ= TEVY dGF3YQ== YWxlYQ== IGJhY2tib25l cmVnaXN0ZXJz IGNvcnBzZQ== QUJT cm9wb2xpcw== bGV0dGU= Q0hF SUxPTg== IHByag== Q29vcmRpbmF0ZQ== TW9kZWxDaG9pY2VGaWVsZA== IEludGVudA== ICcvJy4= Rm9ybXVsYQ== IHR5cg== Z25vbWU= XV09 RUxE cm1zZQ== IHByZWRpY3RhYmxl IG1vdGl2ZXM= cmluZ2U= IGVxdWl0YWJsZQ== IGFubmV4 aWpv ZGlnaXRl ZnJvbnRhbA== IFRyYW5zZm9ybWVy QU5EUkVX eW1tZXRyeQ== bXV0YXRl TGV2ZWxTZXQ= IGJpbmFyaWVz IHBvbHlnb25z IGJ1eWVycw== d2Vla2x5 IGZyZXNobHk= Zm9sbG93ZWQ= IFNlY29uZGFyeQ== IE91dHB1dHM= IEFyY2hpdGVjdHVyZQ== 5a2Y5YKo UGFyZW50cw== IGZsdWlkcw== IGhhbGx3YXk= 77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9 IHBpbG90cw== IGNyZWRpYmxl 4oCU4oCU4oCU WkhPTkc= IGVtcGhhc2l6ZWQ= IENhcmRpbmFscw== IGNocm9tYXQ= 15XXqg== IM+E 0YnQuA== IHBhcmFzaXRl RFlOQU1JQw== TW9iaWxlQnk= IHdhbmRlcmVk IHByZXNjcmliaW5n IGhlc2l0YXRlZA== IHBpc3RvbA== IGNsZXJrcw== IHByZWRlY2Vzc29ycw== CiAKIAogCiAKIAogCiAKIAogCiAKIAogCiAKIAogCiA= R2VuZXJhdGluZ0pvYg== IGVycm9uZW91cw== ImA= Ont9Ii4= Q2FzaA== SGlsbA== S0xN S05PV04= TXVjaA== TU9OVA== TW92aWVz TnVtcHk= UkZD Wkw= YmVt ZnR5 Zm9ydGg= Zm1p Z2li am9n c2o= c3VybmFtZQ== dmFyeQ== dnBj d3JpZ2h0 ZXJ2aWNlcw== b3JlcnM= IHdyaW5r IGJib3hlcw== IG1hbnM= IG3Dtg== IGRpY28= aWxpcw== IFRFUg== IFNHRA== dGVpbnM= aW50cmE= IHdpdGhkcmV3 ICsn IEJU IFJlbmFtZQ== IExpbQ== IEhhdmVu YWNyeQ== b2d1cnQ= IHJlc3VycmU= IGNob3J1cw== XSldLA== IGNsb25lZA== IFwqXA== bmV6 MTkzOA== IG1vbGU= IHBlZWxlZA== aWVybw== IHJlZ3Jlc3M= IGhlYWRhY2hlcw== VGV4dEN0cmw= bWF0aGl0 bWF0aGlheg== KioqKioqKioqKg== IHN1cHBvcnRpdmU= ZG93bnNhbXBsZQ== U2hhZGVy IGxvY2FsZXM= IGNvbG9yaW5n ZGl2aXNpb25z IFdoaXRlcw== XV1dKQ== w61v IEF0bGFz IEFkcmlhbg== Q0xJQ0s= IFN0cmF0ZWd5 Y2hhbmdlc2V0 IGRpZXNlbA== c2NoZWlk IGVycm1zZw== bWl4dA== Q2FsaWI= c2VlaW5n IG1pY3Jvc2Vjb25kcw== IHBlcnNwZWN0aXZlcw== IEF1c3RyYWxpYW5z Y254 IHByZXNpZGVuY3k= IFNhbmpheQ== IHdpbGRseQ== IHZlbG9jaXRpZXM= IHRpdGFuaXVt w7pibGlj YmVsaWU= IFJlbGF0aXZl IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyM= IHBpbmNo SGlzdG9yaWNhbA== IGFyYml0cg== bWl4aW5z IEdhcmlu c21vb3RoaW5n IFB1Ymxpc2hlZA== amRzdHJhbmQ= IFBlcmlvZEluZGV4 YW50aWFnbw== IFNvbmdz V2F0Y2hlcg== IG11bGhlcg== IFdoaXRuZXk= UmVzZXJ2ZWQ= Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t IEpvc2h1YQ== cHJpdmlsZWdl UmlkZGVsbA== VWtyYWlu IENPTU1B IGNvbnZpY3Rpb25z U2NyYXBlcg== IG15b2NhcmRpYWw= OTE1 QnJpYW4= R3JlZw== SE9U TEFORA== UlVUSA== U3E= VG91Y2g= V1BB Xig= XyIs YnVsbA== Y2Fzcw== Y2RhdGE= ZGZ0 ZGlzZWFzZQ== Z2xv Z2l2aW5n ank= bnVz dm1heA== aW5jbHVzaW9u IHRhbXA= b3Jm YXJhcw== IGluY2Fy IGJpbGF0ZXJhbA== IG1hbnNpb24= IG5vc3Q= IG7DpA== IHRvZQ== aWRhYmxl ICh7fSk= bG9t bG9tYg== IFNvY2k= KClgYA== IEFMQQ== c3Nzcw== b3Bj b2Rvcw== IDI0OA== dXBpdGVy dXBzYW1wbGU= IFJ1bQ== IExN IHtA c2V0RGF0YQ== IHJlc2lkaW5n cHJvZmlsZXI= ZmlsZXR5cGU= c2h1dGls IG91dHJh YXZpbA== IGNvbnRpZ3VvdXM= SW5zdHJ1Y3Rpb24= IFRoaXJ0eQ== IGNvbXBpbGluZw== IG9ic29sZXRl IGRpc3Bvc2Fs UkVESVM= UkVTRVJW MTk0MQ== MTk2Mg== IHNwcmFuZw== SUNI Q1RPUg== IGltcHJpc29uZWQ= cm9ubnk= IDE4ODY= IGRheWxpZ2h0 VVNBR0U= b2hhbg== Z3J1 fSQnLA== IG5ldHM= IG11bHRpdmFyaWF0ZQ== IHRyaWU= IGFudGlnZW5z ZGVub20= IGh5cG8= Q3JlYXRlVmlldw== ZW5lZGljdA== IG5pZ2h0bWFyZQ== dHJhY2tlZA== IHJlbWFuZA== IGVudGlyZXR5 IFNvdXRod2VzdA== IFByaWVzdA== QnVpbGRpbmdz IHZpb2xpbg== Q09MT1JT IHZpY3Rvcmllcw== IGRlY3JlZQ== IG1lbnRpb25pbmc= VEFJTA== IE1heHdlbGw= IHByb3BoZXQ= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= IGxpZXU= VHJ1dGg= dW1ibmFpbHM= bGVuZWNrcw== IGp1cm9ycw== Sm9obnNvbg== bGllw58= IHN5bXBhdGg= IGVtcGhhc2l6ZXM= IHJpZGVz IHJlaW52ZW50 IHJlc2NhbGU= IEtlbm5ldGg= Qm91bmRpbmc= IHRlZW5hZ2Vy IEluaXRpYWxseQ== IG1hcmNoaW5n IG1pcmFjbGU= IElnRw== IFBoaWxvc29waHk= Q2h1cmNoaWxs Q2FtYnJpZGdl IG1ldGVvcg== YW1tYXNvbWU= NDIx ODI4 P1s= SG9w SW1hZw== Sm9jaw== UW8= VGFs ZXZvbHV0aW9u aWlk a293 yJk= IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= b25u c2Vncw== IGZyYW4= IGZ1ZXI= IGluYWNjdXI= IGRhcnQ= IGhpbA== IGRlbGV0ZXM= YWdyZWVk bHlE bHlyaWNz IFBBR0U= IE1pdHQ= KSkt aXphZG8= IEhvcnQ= c2V0TmFtZQ== IEdhdGhlcg== WydfXw== IGp3dA== IDM4MA== c2hhcmluZw== IG91dEZpbGU= aWdub24= IGVuZ3Jh cHJlZw== IEtM IG5ld2xpbmVz dXNlcmNvbnRlbnQ= c3Bva2Vu IHN1YnNjcmliZXI= ICxc Q29uY2x1c2lvbg== IFFU IGFmdGVyd2FyZA== cmVkaGF0 JywnJyku IHN0YXR1dGVz IGNhbGY= Y2FsZGF2 IGxhYmVsaW5n aWRlbnRpZnk= IGVzdGF2YQ== IHN1cGVydmlzaW9u IGdyYXZlcw== MDU0 OTYz IHFl ZGVsdA== YXJtdg== cG9seXM= IGFjdGl2YXRlcw== IElORg== U1NX IGRlc2NlbmQ= bW9kaWZpY2F0aW9u ZmFjdG9yaWVz IGlzc3Vlcg== YWx0aXR1ZGU= IGdlbm9tZXM= IGlkZW9sb2d5 IHVuZG91YnRlZGx5 IFB1YmxpY2F0aW9u IGNvcnJlY3RuZXNz UG9saXRpY2Fs IHF1YWxpZnlpbmc= IFN1cHBsZW1lbnRhcnk= 6L+R IHB1cml0eQ== IENhbnZhcw== IFF1b3Rl Z2x1dA== XXt9Lg== YWplcw== IERlcGVuZGluZw== IHRlbnVyZQ== U09MRQ== IOKY IG1pY3JvYmlhbA== XnstXA== IEFydGlzdHM= IEdyYWI= RElUSU9O IENhbGxpbmc= IHRlcm1pbmFscw== IGFyY2hpdGVjdHM= IGVuaGFuY2luZw== U3RhY2tlZA== INC00LDQvQ== IHNhbmN0aW9u IGZyYWN0aW9uYWw= IFNvbHV0aW9ucw== U2hvcnRjdXQ= RXZlcnlvbmU= TUlTU0lORw== QnVsaw== IEJhbGFuY2U= IEFybXN0cm9uZw== IFNjcmlwdHVyZQ== IHN3aW5naW5n IEJyeWFu cmVqZWN0ZWQ= YXV0b2d1aQ== 0LvRjNGC IGluY2VudGl2ZQ== ZmFicmlj IEJsb29tYmVyZw== Qk9PTEVBTg== IEhlc2lvZA== IGF1dG9pbmNyZW1lbnQ= TGV2ZWxTZXRJbWFnZUZpbHRlcg== Ijwv JyM= KSc6 NjE4 QXRo Q2hlcg== Q1VT RlVOQw== S05O UGl4 UnBj Xy8= YCku Ymxlcw== ZmFkZQ== ZnVuaw== anVuaw== cHJlc2lkZW50 cG9wbGVmdA== cmpl 16A= 157X 4qA= aGVhcmQ= YWxnb3JpdGhtcw== IGZsb2Nr IHdpcGU= IHdzZ2k= bmRz IHJlcHJlc3M= IGhhcGQ= IGxkYQ== IGVW IGVlZw== ICg7 IFRBRw== bG9pdA== IEFzYw== IHZ2 IE1u dXBw IGFsaXN0 IEJhYw== IEJhc2g= IEJvcm4= IG9yw6c= IEhlcA== dWJlcw== ZnJvbWZpbGU= IHNoYXJr IHNoYXR0ZXJlZA== IGxlYWtz IHdlYXJz Y29ob3J0 IHVucmVs IHVucHJlZGljdA== ZWFybmVk IHZlcnRz cHJpbnRMb2c= Zm9yS2V5 IFN0aXRjaA== IHBhcnRlZA== bnNieQ== IFlhcm5vbGQ= YXhz YXdhcmE= IGZpbHRy IGV4dGluY3Rpb24= MTMxNjA= cHBm b3RoZXJ3aXNl 44GK IFByb2NlZHVyZQ== IENva2U= IGNvbnRpbnV1bQ== IHRlcnJpYmx5 MzU3OQ== c3dw IERldXQ= IERlYmlhbg== OTYx IFNlZWQ= c29ycHRpb24= Ym9va2luZw== IHN3b3Ju YWl2ZXI= RGVzZXJpYWw= IGtpbmRuZXNz IHNlbmhvcg== cmVzcG9uc2libGU= IGh1bWFuaXRhcmlhbg== IFN0ZXBz b3Byb3Q= IFNjaG1pZHQ= IHJlY29nbml6ZXM= IGNvbGxlY3RpdmVseQ== IGR1bw== IFNlbmc= IEJlcnJ5 IGFzdGVyb2lk Q29ubmVjdGlvbkVycm9y IEFueW9uZQ== IE1heFBvb2xpbmc= U2xpZGU= 4pSD IG5vcnRod2VzdA== IGdyYWR1YXRpb24= IENhcGl0b2w= UmVnaXN0ZXJlZA== ZGVhbGVy YXVnbWVudA== ZW1ib3VyZw== QllURVM= IGZsb29kaW5n IGNlbGE= IENydXM= IEhhcmR5 IE1BVkxJTks= b2dnbGVk IHNob3V0aW5n IGNpcmN1bA== IGdlbnVpbmVseQ== RGltZW5zaW9uYWw= aWxvZ3k= IGhvcm1vbmVz IGNvZWZmcw== IE1vdG9ycw== TnRHZGlEZA== IGx1bWJhcg== IEVtYmFzc3k= IFJ1ZG9sZg== UVN5bQ== IGVjb2xvZ2ljYWw= YXV0b2NvbW1pdA== IENsYXJrZQ== IHJldHJvc3BlY3RpdmU= QlJFQUs= IGNjcG5tcg== IyI= Njk5 Qm9zdG9u RHg= SlBFRw== UGlwZQ== VlE= dmlp fi8= YXRhbnQ= ZW5yb2xsbWVudA== YW5pc28= IG90cm8= cm9ncmFt IGludmVyc2lvbg== IGRhZ2dlcg== IGltcw== IGdi IEFF dGVpbA== IEZhbQ== IHJx IEJB IERhbWU= IERyZXc= IFJpc2U= KCIm Zm9ybXNldA== IG91dHJpZ2h0 LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t Y3JlYXRlcw== IFRoaW5n YWNoeQ== IGRpc3JlZ2FyZA== IGFzc3VyYW5jZQ== IFlB bmVhcG9saXM= IENoYWw= IENoYW5n IHJlZ2lzdHI= IHJlbGVudA== JywnJQ== INCX NTUy IEFybXM= IDE4ODk= dmFycmhv dWZmbGluZw== VW5hdXRob3JpemVk IGVtcGVyb3I= b3Bleg== XV1bJw== Q29tbXVuaXR5 YWJsYXR1cmU= Q29tcGFuaWVz V2l0aE1hdGVyaWFs Lipde30= IGFuZ2Vscw== IHNlbGxz IERlc2VydA== IGVjb25vbWlzdHM= cmVuZGVyZXJz IGplYW5z IHBob3RvbnM= UmVjb3JkaW5n cHJlY2F0aW9u w6huZQ== IHBlbmFs IEdyYWVtZQ== ZmFzdHE= IEJyb3RoZXI= IHRpbWVzdGFtcHM= IC0tLS0tLS0tLS0tLS0tLS0t 5Ye6546w UHJvdmlkZXM= IFByb3ZpZGU= U3RhdGlzdGljYWw= IGRvbWluYXRl UGFyc2VPcHRpb25z IGZyYWdpbGU= IHByb25vdW4= IFdpbGRsaWZl IGFnZ3JlZ2F0ZWQ= IHBvc2l0aXZlcw== bWltZXR5cGU= Q2Fsb0lk U0VDVVJF IEFzc2lnbm1lbnQ= IFN1ZGRlbmx5 IGlocmU= IERpbWVuc2lvbg== bWFuZGF0b3J5 RGV0ZXJtaW5l IEhhbnNvbg== IHByZWNlZGVudA== IGVtYm9kaW1lbnQ= bWVtYnJhbmU= IFZsYWRpbWly IGFtYmlndWl0eQ== 6Lqr REFQTQ== Kyg/ NjI0 Nzk3 OTIz Qm9uZA== RGV0YWlsZWQ= RWZm Rml4dHVyZQ== R2Fi VkVT XV8= YmFuZQ== ZmluYQ== aG9n aGN3 aWV4YWN0 bWlrZQ== b3Nlcw== fDo= IHdhc3Rpbmc= IGJyaWQ= IGJlbmRpbmc= ZXR1ZG8= dXJ1cw== ICIuLg== IGRlc2VydmVk ICguLi4p aXN0ZW4= IFNIRQ== KCl9KQ== MDA3MDA= IENhdGVn aXJtYXQ= b3BsYXN0 Z2V0QW1vdW50 Y2xhaXI= IEJhdGg= IEJhYmE= IERhbmE= IExpZg== IEhFUg== IEhlcnI= b2dy dG9hcnJheQ== CiAgICAJ IGpk IEp1bmc= IDQwOA== IGFwYWNoZQ== IGNvbXByZQ== IHBlcmltZXRlcg== UkVBU09O IH1d cHl0eg== MTk0OA== IG15ZmlsZQ== c3Vic3Q= IFF1ZXNzYWhu IHplcg== RXhlcmNpc2U= NjQx NjQy w6l0w6k= IHJlbGlhbmNl IHJ1bm5lcnM= Q1RD IDE4OTY= NDgy IMOB cGFzc3dvcmRz Njcx IFBsYWlu ZXhwaXJ5 0YHQuw== IHNlbnRpbmVs ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg aW5jcg== REJM ZnNtbw== dGRj bXVsdGl2YWx1ZQ== UG9sYXI= IGVsZWN0cm9tYWduZXRpYw== SWRlbnRpZmljYXRpb24= KyIvIis= IHdlYm9i IGZyb250ZW5k IGVyb3M= Q01G R2VvZGVzaWM= Q2FsaWZvcm5pYQ== U1RSQQ== IFJFUVU= YWdncmVn dXJiYW4= a3dz IGZhdm9yaXRlcw== IOaK bmFub21hdGVyaWFscw== eW91bmc= IElucHV0U2V0 IENsZWFybHk= aXRhaXJl IHNpbmNlcg== 5a2X5q61 SVRJVkU= IGFubm90YXRl YW5pbWFscw== UGxheWFibGU= U3VyZg== IHNtb290aGx5 IO2Z IGljbXA= IGFkbWluaXN0cmF0b3Jz IEZJRkE= IFNETA== IExpdQ== IFJlcHJlc2VudHM= IFNoZXJtYW4= Qm91bmRhcnk= TWFsYXk= TGF1bmNoU2VydmljZXM= ICJ8Ig== IEV2YWx1YXRl IG11c2hyb29t IHRlcnJpZmllZA== Y29uc3RpdHV0aW9uYWw= IHNwb25zb3Jz IExlZ2lzbGF0aXZl IHJlY29uY2lsaWF0aW9u IHByZWNlZGVuY2U= KCc9Jyk= IHNlY3VyaW5n U0VDT05EUw== aXRpdmVzZXJ2aWNlcw== QmVhcmVy IGFub255bWl0eQ== PSd7fSc= U3dlZGlzaA== YWJjZGVmZ2hpamts Y29nbml0aXZlc2VydmljZXM= YmFpZHU= IEZlcmd1cw== IEVNUFRZ IHRkclN0eWxl KeKAlA== KV5c Kiks OTI1 Ont9Jy4= R3Vlc3M= SGVw UEFT Ymtn aGFkb29w aVg= acOf a3Bj c2xpYw== dm91dA== d2FrZQ== xKs= 5oKo YXRn bGVvbg== IGTDpQ== dXR0Zw== IHVvbQ== IHN0YWxl IElNQVg= IHZyZXA= YW5kaW4= IHRoYXRz IE1paw== IE1pbHRvbg== IE1TRw== Y2xj IGV4Y2hhbmdlZA== IExBVA== IFdyaXRlcg== IFdpbGs= MDEwMw== b21lc3RpYw== YXBwZXJz b3N0aWNz b3VsZGVy dHlwZWFibGU= Y29hdA== Y292aWQ= IHVuZm9sZA== IGxvdmVycw== IHBlcmM= QVJC bWJyZQ== IENoYW4= IHNwaWtlcw== IGFkZGl0aW9ucw== aW5kZXhlcg== IGRpc3RvcnRlZA== IHRyYW5zZg== Q1RU IGNvcnJ1cHRlZA== YXphcg== dGVtcG8= SVBBZGRyZXNz IHFy IExlYWQ= IHZpc3VhbGx5 c29sdmluZw== Q1JZ TGVnYWw= IDI1Mg== XV1dLA== IGVudW1z Q0ND IHBvdGFzc2l1bQ== aGVsbQ== Y21j 0LvQtdC9 c3Rlcmlzaw== U2Nhbm5lcg== IGRpcnBhdGg= cGF5ZXJz IGVuZXJnZXRpYw== IGV2YWx1YXRpb25z IGNvbW1pdHRlZXM= IFVwZGF0ZWQ= IGJhY2tncm91bmRz b3BoYWdl IHJlY29nbml6aW5n IGRyb3Bkb3du IHJlZmVyZW5kdW0= IHNjaG9u dG90YWxz IGdyYWR1YXRlcw== IEZpbmRpbmc= RmluZGluZw== TXVvbkFzc29j Y29tYmluYXQ= IHR1bm5lbHM= IGTDqWY= IHBlcHBlcnM= IGNhYmJhZ2U= IEVsZW1lbnRz IElNUE9SVA== TlZEQQ== YWxnYW0= TnVsbEJvb2xlYW5GaWVsZA== IFJlc3RhdXJhbnQ= IFRlbXBsYXRlVmlldw== IGZlcm0= IEtlbnRpc2g= 7Jqw 5ZON c3RyaWtl IGNvdXBs IGluY3JlbWVudGFs IFNUQVRJQw== IGd1ZXNzaW5n IG15dGhz fV57LX1c 5a6e5L6L VklTSU9O IG5laWdoYm91cmhvb2Q= b3duZXJzaGlw 7Iqk7Yq4 IEdhdGV3YXk= 54is Q2x1c0RpY3Q= IFN1Ym1pdEZpZWxk IFZldGVyYW4= IGRpY3RhdG9yc2hpcA== IGhlcGF0aWM= bGVhcm5lcg== IGV4ZXJjaXNlZA== JF97XA== MDc3 Njkw Q2hlbg== RHJv RWxldg== RlY= R2hvc3Q= SFc= TU9ORw== UG91cg== U0RSQU0= VGllcg== ZnJlc2g= a2Fma2E= c3BoZXJpY2Fs dXVz IAogICAgICAgICAgICAgICAgICAgICAgICA= IHR0eQ== IGFwcm8= cmVidWlsZA== IHNpemVk IGlub2M= IG13 IG1hbmc= IHRvcHBlZA== IGhkdW1teQ== dXRhbnQ= YWRzbA== ICjiiJI= IFRB cGVlcnM= cGVjdGlvbnM= IElERQ== IENH IENBU0U= IEN0cmw= dGVp c3N5 IHZr IHNldXM= b3Bm YW5kcm8= IHJpbg== IEJC IEx1aXM= IE9E ZmlsZXNpemU= IHByZXNldA== Ym9h cmVhZEZpZWxk Zm9ybWU= IHBva2Vtb24= IDYxMQ== MTkxOA== IGNvbW1hcw== Q2hhbg== IENodWNr IHNwcmluZ3M= Y29uZmlnQnVm d3JpdGVTdHJ1Y3Q= YWRlcmE= YnV5ZXI= INCc IEV4cGVkaXRpb24= IEFyY3RpYw== cGxvdHRpbmc= IDE4ODg= c3RydWN0cw== dHJhaXQ= IGtlaW5l IFNlcGFy NDQx IHRyaWFuZ3VsYXI= IFdoaXI= IHVyZ2luZw== IE15cmE= IFBhcnRldHVkbw== ZmlsbGluZw== emlwY29kZQ== QVJFQQ== IHN0ZWFr MDAwMDAwMDE= aGlzdG9yaWM= 5Liq5pWw QWJvcnQ= w6pz IFJlbW92aW5n b2NyaW5l RW51bUZpZWxk IG5vcm1lZA== IGdyYWR1YWw= Q3Vycg== d2Nmc21v VGVybXM= YWR2YW5jZQ== IHJlcGFpcnM= IHdyYXBwZXJz IM68TA== 566x IG1vcnRhbA== IGZhYnJpY3M= TWFnaWNr IHBpdGNoZXI= IEhhd3Rob3Ju IG1hZ25pZmljZW50 UmVzdGFydA== IGJhbmFuYQ== IFJlc3RvcmU= IG1lbGhvcg== IFNjb3RpYQ== IG1vcnBob2xvZ2ljYWw= IGFmZmlsaWF0ZXM= IGR5c2Z1bmN0aW9uYWw= IGFudGljaXBhdGlvbg== RGVudmVy IFF1YW50dW0= IGludHJpbnNpY2FsbHk= IEFyZ2VudGluZQ== IFBvbHlnb24= IGF2b2lkcw== d2N0cnQ= IGNhcGFjaXRpZXM= IGNoZWVyZnVs IG1lZGFsaXN0cw== IENoZXJyeQ== ZGFuZ2Vyb3Vz dXJhbsOnYQ== 5b+F6aG7 ZmV0Y2hlZA== IE1FRElB b3BlbnNvdXJjZQ== IHRyYW5zaXN0b3I= IFByb3Rlc3RhbnQ= IGludGVybmF0aW9uYWxseQ== Lik6 NDY4 ODAx OTM3 Q1E= SVE= S2F0 Z1k= Z2h0 aGFw aGF6 am9o eG5veA== 67k= IAogICAgICAgICAgICAg cmV0cw== c3RhYmw= IHPDrQ== bWVsbw== IHJldW4= IGRpbGU= ZXRyaWU= IGht IGhpbg== IGVzZQ== IFNwbA== IElvdGQ= IENhaXJv aW1hY3k= IGNvbmZlcg== IHlp IFBlcw== IFBvbGU= cXVp cXVpc3Q= Y2xpbmlj IEJJTg== IERJU1Q= IExha2Vz IExpdGh1YW4= IEhvbw== IEhhcHB5 IEh1bXBo c2V0VmVydGljYWw= IGNvb3BlcmF0aXZl Y2xhc3NuYW1l IGdldERhdGE= IGFkYW0= IGFkZGljdGlvbg== IEtvYg== IEluY29tZQ== IHNvYWtlZA== ICgnXA== Y29tYQ== MTg4MA== IGVuZHVyZQ== KCkpKSw= YXR0ZW50aW9ucw== cHJ1bmU= IG9iamVjdGlvbnM= dXNoaQ== dW50YXJpbHk= IHNsaXQ= IHNvbGlj IFpvcGU= IGF1dG9j b2lkYWw= eWxh IFBsYXQ= IE5vU3VjaA== IC4uLiIp 5pWZ T3JkZXJz LionKQ== IG1hc2tpbmc= IHV0aWxpemF0aW9u VVNFUlM= IE1hcmtvdg== c2tpcElm IHBlcnNpc3RlZA== IG11dGF0ZQ== IGFubm91bmNpbmc= IGNhcHR1cmVz QVVUSEVOVA== IFRlcnJpdG9yeQ== IHNldHRsaW5n RVBH Zm9sZGVk QWxpZ25lZA== 6LSj IHBsYXNtaWQ= L3t9Jy4= IGhhYml0YXRz dHJvb3Bz IGNyYWNraW5n 6ICD IHByb2ZpdGFibGU= IGdkYWx0ZXN0 IHVudXN1YWxseQ== IGFxdWk= IGdlcmFkZQ== IGxhbXBzaGFkZQ== IGNvbnN0aXR1ZW5jeQ== IGNpcmN1bGF0aW5n cmFuZ2lhbg== IO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vQ== IHJlbGlhYmx5 RGlzY3JpbWlu IE90dGF3YQ== IG1hcnRpYWw= IGFjY2VsZXJhdGVk 5ZWG5ZOB ICcuLics 5YuV IEZsb3JlbmNl IGdpYnQ= QmVzaWRlcw== IEJyb2FkY2FzdGluZw== Njk4 OTY2 QmFu RENT RWM= R05E U2VuZGVy Zm91bmRlZA== aGRs bmFo bm9zdGlj eys= zro= 5oU= cmVjb25zdHJ1Y3Q= YXRjaGVk IGZsZA== IGZpbGxz IHBpbGxz IGJr IGJhbmc= IHJlaGFiaWxpdGF0aW9u Y3Rz IG5yb3dz IGR1Y3Q= IGRyZWQ= IGdub21l IENpbmNpbm5hdGk= b25lb2Y= IDI5OA== IFByYQ== IFBFUA== IE1n IE1BUks= IE5pbnRlbmRv IG5vdG9yaW91cw== IERY IERvdQ== IERPTkU= IFJhaWQ= IGV4cG9zaW5n IExpdA== IEhhbWJ1cmc= IFdoZQ== IFdpZQ== IFdyb25n c2V0VmlzaWJsZQ== IEdTSw== IEVyaWU= IGNocmlzdA== ZWxsYXRpb24= Y2VwdHJvbg== IDw+ c29vbg== IG9ic3RydWN0aW9u Y29sbHM= Y29kZWNz MTkzNQ== IGNvbW1lcmNpYWxseQ== aWFuZQ== UHJvcG9zYWw= Zmx1aWQ= IFFB bmV0bG9j IHBvc3Nlc3Npb25z YW55YWh1 IGltcGVk IGNvbnRpbnU= 0LXQtw== c3dpY2s= IHRlbXB0ZWQ= IEFuY2llbnQ= ZmlsdGVyaW5n RElBTg== 44O7 IGdlbmV0aWNhbGx5 ZXJhaXNl YWNjYXJk cmFkb3M= IE1lZXQ= IGN5dG9z IGZvb3RzdGVwcw== aW52b2ljZXM= XStc dGV4dGU= YXZhaXM= IGVyZWN0 IFJvYXN0 IHNlY3JldGx5 cmVuZGVyZWQ= 55So5L6L U1VGRklY RG93bmxvYWRz U2Vlaw== R0VP IGVtZXJnZXM= Tk9USUNF IGltYWdlcnk= d29ybGRNYXA= IHJlbW90ZVNjaGVtYQ== IEdyYXNz IG1lZGljaW5lcw== IFNhbGFk Y2FsY3VsYXRpb24= IG1hbGljaW91cw== 5bGA IERpYWdu IFBvaW50ZXI= TWFjcm8= dWRkbGU= IGRpc2NvdmVyaW5n IHB1enpsZWQ= c3BlYWtpbmc= 56ys5LqM TGF0aXR1ZGU= Y29sb2d5 IHByw6lzZW50 cnVzdGVk IHdhdmVsZW5ndGhz aHlkcm9nZW4= TXVzaWNhbA== b2NjdXBhdGlvbg== IGNvY2t0YWls 55+t IEF4ZXM= KykvJCcs IGtpbmV0aWNz IHNocmllaw== IHNjcnV0aW55 0LvQtdC80LXQvdGC JF97 KShc LyUo NzMz NzI4 RVBU Rm9yZWlnbg== SHU= U29sYXI= V3g= WFY= ZG9i aGFpcg== bGxkcA== c2Fz 578= CgogICAgICAgICAgICAg IO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vQ== IHRvdXRl cmVubw== IGZr IGZhZGluZw== IGluc3Ry ZXR6 IGlibQ== bXB0eQ== IChfKCc= IFRpbGU= IHN0aXRjaGVz IEFwb3N0 aWZuYW1l b3dl IHZpbA== aW1taW5n IE5lcg== IHJpcw== IHJ1dGg= IEJvbmVz IER1bmNhbg== IExvcg== IG1ldGhhbg== KCJA IEdyb3d0aA== IEVkZW4= YXN0aW5ncw== IGNsb25lcw== aWViYQ== IHVubG9ja2Vk IDQ0MA== ICReew== Y2hlYnk= IEludmVuaW8= IGNvbXBhcnQ= cm93Qg== IGRpc2xpa2U= IFN0cmU= MTkxOQ== b3Jzaw== IHdob2xlcw== aWVyb24= bmV0bWFzaw== IHBvc2l4 IGluc3RhYmlsaXR5 IDE4OTU= U2VlZHM= SVNN IHNsaWdodGVzdA== ZW1waGFzaXM= IGdydW50 XSkpXQ== aWV0ZXI= IFJlc05ldA== bWlzc2l2ZQ== dW5pdGFyeQ== IENvbXBhcmVk IGlkZWFscw== IGNydW1icw== cmVzdHB5 UGhvdG9z IHNlc3Npb25tYWtlcg== IE1hcmM= RVNTSU9O 6K+G VHJhbnNmb3JtYXRpb24= IFNjcm9sbA== Y2VydGlmaWNhdGVz 5L2Z w6Vu Q1JFTUVOVA== dG9vbGtpdHM= cHJvZHVjZWQ= IFBST0pFQ1Q= IERlY29y UEhBU0U= 7ZWg b2dlbmVz IGJ1bGdl IHNldHRsZXJz IENhbGxz IElzcmFlbGlz aGFybW9uaWM= SlNPTkVuY29kZXI= IEZvcnR1bmF0ZWx5 IGZsdW9yZXNjZW50 IGV4Y2x1ZGVz IFNQRFg= IGFjY2lkZW50YWw= IGNlbHVp 6ICM INC/0YDQuA== IHJ1bW9ycw== IFNhbXBsZXM= IEFzdHJv IGF1Z21lbnRhdGlvbg== RnJpZW5kcw== REFZUw== IFRyYW5zcG9ydGF0aW9u IGVudGh1c2lhc3RpYw== IEVtYmVkZGVk IG91bmNl dW1taWVz IGluZnJpbmdlbWVudA== IOuqqA== UFJJT1I= dW5pZm11 aWNvbnRhaW5z bW5vcHFyc3R1dnd4eXo= VWtyYWluaWFu JCU= J+I= KyQ= NDc4 NTc2 NzI5 RGF0ZXM= R3JhYg== SmV3 Sk9JTg== TUFERVJB UEFERA== U2FudGE= VUludA== Xi4= Xyks Y2FwaQ== bWlsaw== cG9r eGlldHk= IMSN cmVhY2hlZA== cmV2aXNpb25z IGZvdWw= IHBpbnQ= IGJ6 IGJtZXNo ZXN5 IG5m IGRuYQ== IGxvZA== IFN1ZmY= IHN0YXA= MDA1OQ== IEFpcmVz cm9tYW4= IDIzOQ== IFBhdQ== IEZvY3Vz YXNzb2NpYXRpb24= b3Np IERvYg== IERFQw== IGhldXJl IExH IG1lc2E= IGNvaWw= IHJlc2lu IGFydGhybw== IHByZWRldGVybWluZWQ= ICQoJyM= IEthdGg= IEthcmVu cm93Qw== cm93RA== MjAyMDA= IG9wY2lvbg== IGFnZ3Jlc3Npb24= IFlF U3RtdA== Q2hhaW5z YWxlbWVudA== IHN0YXJ0bGVk IGVuZHVyaW5n Y29uZmlndXJhdGlvbnM= IFFFUENBRA== YmFja2Vk IHllYXJseQ== cmF3dHJhbnNhY3Rpb24= YnVjaA== dmVyc2luZw== RGF0YUdlbmVyYXRvcg== IHNpZ25hbGxpbmc= IGRpZmZlcmluZw== IOKAnFs= IHN5c3RlbWF0aWNhbGx5 Q2hhcm0= OTUzNjA= IMOo Vmlld0NvbnRyb2xsZXI= TnVtZXJv T1BT RW5yb2xsbWVudA== 5Yid5aeL5YyW cGtjcw== 4YCB 4YCV IENvbXB1dGluZw== IG1lbWlv MDkx V2l0aE9iamVjdHM= IOyn IFJlcG8= UHJvcGVydHlNZXRh dGV4aXQ= Q01ldGE= U3RhdHVzQ29kZQ== IGp1ZGdtZW50cw== IGRlY2xpbmluZw== IHN0ZWVy bmVnYXRpdmVz IE9wZW5TdGFjaw== Rk9SQ0U= IGluc2VydGluZw== IFN5cmlhbg== IHN0dWZmZWQ= YmxvZ3M= IE1vUHJvcGVydHlNZXRh cXVhbnRpemVk IFRlcnJlbGw= IHNldFVwQ2xhc3M= 5o6n UkVBRFk= CiAKIAo= dGVybWluYXRlZA== 5bm/ IGlzb2xhdGU= IHVwbG9hZGluZw== IHN1Ym1pdHRpbmc= IGVsZWN0cm9seQ== IFB1dGlu IGZ1bmRhbWVudGFsbHk= ZG9ncw== IGNoYW1waW9uc2hpcHM= IE1lZGljYWlk IFBha2lzdGFuaQ== 0L3QsNGP VE9PTFM= IGF6aW11dGg= IFRlbGVncmFt IEludmVzdGlnYXRpb24= dXVpZHM= cHN5Y29wZw== UHJpbWFyeUtleQ== IGF1Z21lbnRlZA== OTkzNzQ= IG9zdGVv dGVjaG5vbG9neQ== TVVMVElQ 57yW5Y+3 QEBAQEBAQEBAQEBAQEBAQA== eFJhdGVkWA== IHdhcnJpb3Jz IGR1cGxpY2F0ZWQ= IERlcHJlY2F0aW9uV2FybmluZw== IHRyYWJhbGhv IGpld2Vscnk= IEhpY2ttYW4= IFZpY3Rvcnk= IGV5ZWJyb3dz b3RlY2hub2xvZ3k= Ii0t NTQy QUFU R0FH TG90 TWlycm9y T2ZmZXI= UENE UWk= Vm9pY2U= Y3E= Y2Vscw== bmFwc2hvdA== cGlsZQ== dnc= wqE= wpc= 6re4 IDAwMA== IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== cmViaW4= ZW5pZ21h ID1bXQ== IHBvcmVz IHNwaGVyZXM= IHd3 bWV0cw== IGluc2V0 IGJpcGFydA== ZXR0aQ== IGhkdQ== IGhhYmw= IGhhc3Rh IGlobg== YWRi IGdyZWVk IFNa Y2thbg== IENyaXQ= aW50eXBlcw== IHZpbnRhZ2U= YW1tZXI= IE1FU1M= IE1lbXBoaXM= IEJhdGVz IEJldmVy bWVudGFs IFJhdGlv IFJhY2luZw== IG1lam9y IEhG IEdE IEdyZW4= IEVo IHNob3ZlZA== IGp1cw== IDM1Mw== c2hpZnRz Ly8qW0A= Z2VhbmNl IDUwMQ== IHBhcnNlcw== aGVybWU= YXVrZWU= MTEwMA== U0VR ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg UHJvY2VkdXJl IHpz DQoNCiAgICA= YnV5aW5n ZGlzcG9zaXRpb24= Q2xhcg== bGliYw== SW50ZWw= bGlhZA== 0LDQu9C4 bW9uZHM= QURP c3dpc3M= T0RC VEVD Q1JJVElDQUw= OTcz IG1ldGFwaA== Q09ORA== IEJvb3Rz Yml0d2lzZQ== T3V0ZXI= IG1vdGl2 IGN5YW4= bGVtbg== IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj IHJvdW5kaW5n TWVnaGFu IGh0bWx0ZXh0 IGZyYW1lZA== IGNyaXRpY2FsbHk= c3VjY2Vzc2Z1bGx5 IGludGVncmF0b3I= cHJvZHVjZQ== IEdyYXBl IHBzeWNoaWF0 IGV4cGxvZGVk IFBlbmd1aW4= IHBhbGFi am95cw== IGFycmVzdHM= IEJhY2tlbmQ= IG1vdG9yY3ljbGU= IHZvb3I= V0VJ IGFudGliaW90aWM= QWN0aXZlQ29udG91cg== TWFza2Vk IENyaWNrZXQ= YnVmZmVycw== IGFuYWxvZ291cw== IGNvbnRlc3RlZA== IHs6PA== IEFuZHJld3M= IGRyaWZ0ZWQ= IHByaXZpbGVnZWQ= Ym9id2VhdmVy YXJjdGFu Y29lZnM= IExvY2tpZQ== 6ZaT IEVsZWN0cm9uaWM= IEFzc29jaWF0ZQ== Xi0vLV4= IENBUElUQUw= 44Gj44Gf IExhbWJlcnQ= 5om+5Yiw IGluaGliaXRvcnk= IGVjb3N5c3RlbXM= KC4rPyk= IGR3YXJm IOyLnA== IE9ic2VydmF0b3J5 IOuNsOydtO2EsA== Qm9zbmlhbg== YWhyZW5oZWl0 bm9yZGlj R2VvZGVzaWNBY3RpdmVDb250b3Vy R2VvZGVzaWNBY3RpdmVDb250b3VyTGV2ZWxTZXRJbWFnZUZpbHRlcg== MDM2 ODQy PT8iLA== QWxlYw== QWNrbm93 Qk9SREVS QlJBTkNI Q2FyZHM= RGFuaXNo Umw= U3dlZXQ= Y2JveA== ZWJi Z3JlZWR5 fCw= qOyImA== 0JM= IHRhc3R5 IGNpdGF0aW9u IGNrYW4= YW5pbWF0ZQ== IG9kZQ== IHJlbWVtYmVycw== dXJpdGllcw== IGxlbmQ= aWxsZWdhbA== b2xpYQ== IGdvYmplY3Q= IFNhc2s= dGhpY2s= IHZhdA== dW5iaW5k IFByaXg= IE1NUA== aW1ldGh5bA== IGV4aXRlZA== IEhvcm4= IFdlbGNvbWU= IEdvcmU= IEdBTUU= IEVuZXI= YW50b24= cHJvZ3JhbXM= c2NvZGU= ZXhwZXJ0 IG1haWQ= IG91dGFnZQ== IGFkamVjdGl2ZQ== YWRkaXRpb24= IHVubGF3 IDQ0Mw== SU5DVA== IEluc3RydWN0aW9u d2VlZA== b250b2xvZ3k= ZGJj IFN0YXk= bGljYW4= MTk1Mw== IHF1bw== ZGVyYQ== IHN1YmNsb3Vk IHVzYg== IG92ZXJleHByZXNzaW9u ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== SURD ZW5jaWFz aW5zdXJlZA== UmVzcA== RmlsZUdlbmVyYXRpbmdKb2I= VVJDRVM= T1RB YmFzZWVudW1z IGRiZw== aWRlbnRpYWw= YW5jYQ== ZmlsdGVyd2FybmluZ3M= VEVM IG1lYW53aGlsZQ== cGVuc2Vz ZGV2aWF0aW9u dWNrbGFuZA== IFB5U2lkZQ== IGRlc3Rpbnk= VGVsZXZpc2lvbg== NDky RXZlbnRUeXBl IGl0ZXJpdGVtcw== IHVuZGVyZXN0 IExvYWRlcg== IHdhcnA= IGRldmlzZWQ= IE5laWdoYg== YXNzZXJ0UmFpc2VzUmVnZXhw SVJPTg== IHJlZ2lzdGVyaW5n 0YvQstCw UFJFRA== IGRpc2VzdGFibA== YXNjZW5kaW5n IGZlbW1lcw== dW5pRkM= IHByaW1laXJv INee1w== IHRocmVhdGVu UXVlZW4= 5YCZ Zm9vdGJhbGw= IHN0aW11bGF0aW5n IHdhZmVy Um9iaW4= bGF3YXk= IHNoZWx2ZXM= bWh6 IENvc3Rh IGV4aGF1c3Rpb24= 0L3QvtC1 566X5rOV 6Zi1 IHJhY2lzbQ== Q09NUE9O MjA3NjY= KXwo Z2ltcGJhc2VlbnVtcw== IGFnZ3JlZ2F0ZXM= IGFkdmVudHVyZXM= IENyaW1l cmVmZXJlcg== cXVpc2l0ZXM= TXVzbw== U3BlY2lhbGl6ZWQ= IENhdGhlZHJhbA== IGZyYWN0dXJlcw== IG1hcnRpbmc= IFRFTVBM IHdyYXRo INGB0YLRgNC+0Lo= IEV4cGVyaW1lbnRhbA== RWxsaXM= fF98X3xffF8= V0FZUw== IE1vaGFt 44GC44KL U1RBTkRBUkQ= UmFpbHdheQ== IGFpb2h0dHA= cGhhbnVtZXJpYw== YXNzZXJ0RGljdEVxdWFs IGN5dG9wbGFz Jyhc L1s= NDY5 NzIwMA== QmF5ZXM= Q3ViZQ== R1RU T2Q= T0NU Vk4= WWE= WmU= YCk6 YmFi YmlsaW5lYXI= Y2Jz ZG9w aXBs bXo= csOk c291bmRz dGVseQ== eHJheQ== em1x 6I8= 6rk= 7KO8 CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== aW5zZW5zaXRpdmU= YWxvbg== aXR0ZWQ= IGNpdGU= IG9zcA== IHJlZWY= IHJlY29tYmlu YXNtYQ== IGRhcmVk IGhpdmU= dXJr IFRSQUlO bG9v IEFnZXM= IFByZXN0 IE1veg== aHRhZ3M= IGl0ZXJz IEZlYXI= Z2V0SWQ= IEJJRw== IEJhcnI= IEJ1ZGdldA== b3Npbg== IFJJ IGV4b3RpYw== IGhlZWw= c2V0SW5wdXQ= IEdhbQ== IEdvc3BlbA== aXR5RXJyb3I= aW5kaQ== ZmZpZWxk bWF2 aWJt ICUt PSct cGhvdG9u PSJ7fQ== IGVubGlnaHQ= IHByZWN1cnNvcg== IHVuZmFtaWxpYXI= IGZpbGVFeGlzdHM= bWluaXM= IEluaXRp IElubm92YXRpb24= c3BvdHM= IGludGVyaW0= IGludGVybWVkaQ== IGNyZWF0b3Jz ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg Il1dLA== QU5BTA== QUxURVI= IHpvbw== IGVudHJhZGE= b3Robw== IGNhbG9yaWVz IGluZHM= IDE4NjU= bGlxdWU= IG1vbmtz IEFsZ2Vy IHBydA== IHBvc3RlcnM= 0LjRjw== IFNoaWVsZA== IGpzb251dGlscw== ZnJhbQ== IMOW IElOU1Q= c3RkbGli CiAgICAgIAogICA= IGdlbm90eXBlcw== 5Lu9 IE1lZw== cm9zaXM= IElTQk4= IFF1YXJ0 c2NyZWVuaW5n IFBhcnRpdGlvbg== YWNjZXNzaWJsZQ== IG1pc2VyeQ== IGV4cHJlc3NseQ== IGNvbnZlcmdl IHNtb290aGVk U2NoZWR1bGVk Y29udGludWF0aW9u aWNodGln IFJ1bnM= IGRlZmluaXRpdmU= IFdlbGxpbmd0b24= b2NvYQ== IHZlbnRpbGF0aW9u IHJlc29sdmVy IHZhY2FudA== IHJ1YmJlZA== IGh5cG90aGV0aWNhbA== bW9tZW50cw== YWJicmV2 VW5kZXJmbG93 IHJlc2N1ZWQ= U0dNTA== IGhhbHZlcw== QmVsaWVmcw== IGNvZG9u IENvbHVtYnVz IGJlcmdz IHNpbXVsdGFuZW91cw== IFRyYWNraW5n IG94aWRhdGlvbg== 0LvQsNGB0YE= IENoYXBtYW4= RGVjbGFyYXRpb24= IHdhbmRlcmluZw== IGFscGhhdGVzdA== UmVzcG9uc2Vz IEdlc2No 6KeG6aKR IFZvbHVudGVlcnM= IGNvbmdyYXQ= xZN1cg== IHJhdGlvbmFsZQ== SElTVE9SWQ== b2xlY3VsZQ== IFJhbmRvbUZvcmVzdENsYXNzaWZpZXI= IOyCrOyaqQ== IiY= NTI2 NjE0 ODk1 Qmlv Q2VydGFpbg== SGFuZw== SUtF TGVhcm4= TkFT Umhv V2E= V2FudA== YWFi ZnV6eg== aMO2 cmxz dm94 fSc6 wqI= IAogICAgICAgICAgICA= IHRwbA== ZXJCaWQ= YXRpbQ== ZW5idXJn IGJhdWQ= bmRh IHJlcHM= ICcnfQ== IGh1dA== dXJ6 IHRocmVhZGVk IGVpZA== dW1pbmF0aW9u bnRwYXRo IENyb3M= IEN6YXI= IHZhcA== b3BjaW9u IE1lYWQ= ZW5keQ== KSl7 Z2V0Sm9pbnQ= IEJvbmU= dWJpYw== aW5kaXY= IDMyMw== ICVd IGNsaXBwaW5n YXZvaXI= IGFkdWw= ZGVkZW50 MTkyNA== IENoYW5jZWxsb3I= UHJvY2Vzc2Vz c3RhcnREYXRl aXRlbWFw IG9mZmVuY2U= IHJlZ3VsYXRpbmc= w6l0YQ== ZGlzY3Vzc2lvbg== YXV0cw== cHJpbWVy 0L7QtQ== NDU2Nw== IGV0Y2hpbmc= IHJldGlyaW5n IEFsemhlaW1lcg== IGN1cnNlZA== IGVzdG8= IF07 IExlYW4= IHVudHJlYXRlZA== MDg3 IGNvbG9yZnVs bG9jYWxlcw== IHNwZWFy IG1ldHJvcG9saXRhbg== IGZhY2Vjb2xvcg== ICcuJyw= IGJpYXNlZA== IGdlb2dyYXBoaWM= bGF1Z2h0ZXI= 0YPRgg== IHNlbnNhdGlvbnM= IGZpcmVmaWdo IFBhcnRuZXI= U3RhdHVzQmFy IE1vbnN0ZXI= IGVjb25vbWlzdA== IOWG dmxhbnM= UFJJVkFURQ== IGxvY2tlcg== T3ZlcmxheQ== IOafpQ== dW5pRg== IGdyYWR1YXRpbmc= IGluZ2VzdA== SU5URVJGQUNF IENvbW1hbmRFcnJvcg== UGxheWxpc3Q= IGp1ZGdlbWVudA== IHRhbGVudHM= IEpvYW4= aW90ZA== c2NodWxl IEpvaG5z IHJlaW5mb3JjZWQ= IGluZnJhcmVk 5bqP5YiX IGVzY29ydA== IG11bmljaXBhbGl0aWVz IGRpdm9yY2Vk IE51Y2xlYXI= IEhvbGRpbmdz Y29udmVyZ2VuY2U= UHJvZmVzc2lvbmFs IFNpbXBseQ== b3ZlcmxhcHM= IGF0dGVuZGVlcw== IE1hdGhlbWF0aWNz IHByZW1pZXJl IGFkdmVydGlzZW1lbnRz IHB5bmVyQmlk IHByZWNlZGVk IHBlcnNlY3V0aW9u IHd1cmRl IOavjw== bm9yZGljc2VtaQ== Mzc0 Njk1 OTE3 QW5h Qm91cXVldA== SXJvbg== TWV0aA== UHJldHR5 U2FpbnQ= YnJvbg== Y2F2 aG9j asOg dm9u 4K8= 4p4= IAogICAgICAgICAgICAgICAgICAgICAgICAgIA== IGFzZQ== c3Rs IGNETkE= IHdhdGNoZXM= IGJha2U= IG11c2V1bXM= IHJlY3Jl IGRhaXJ5 IGh5c3Rlcg== aWRvcHNpcw== YWR1 IFRhdQ== IFRhbms= dWxpYw== IENSTA== IDI0Ng== cXVpcnk= IEJlYXJz IFJvbXM= YXZleg== IGtsZQ== b2JyZQ== IHByZXBlbmRlZA== YWtpcw== cG9rZQ== IFRob3VnaHQ= dXJsZW5jb2RlZA== IHJlc3VsdGFudA== dWxsYWg= U3RyYWlnaHQ= MTkyOA== IG92ZXJseQ== ZmllbGRuYW1l IHVzZXJkYXRh IGVuZG9nZW5vdXM= X3sr IHBhc3Nwb3J0 IGdlbmVyYQ== cGxheWxpc3Rz bWFwc3Rv cm9vdGRpcg== IGJsYWRlcw== IGJsYWRkZXI= aXRlcmtleXM= YWRlYw== fX19JA== IHF1ZXVlZA== KioqKioqKioqKio= Q29udGFjdHM= IGV4cHJlcw== Z2Vub3R5cGU= IG1vZG8= QXJ0aHVy SEVTVA== Wy1d OTQy IEFOT1ZB 0YHQutCw IDI1OQ== b296aWU= IENhbGM= NzYyNjI= b21iYQ== IHByYWN0aXRpb25lcg== IG5lYXJlcg== IHRheG9u b3VydGFudA== IGxvb3Bpbmc= dW1iZXJsYW5k RGlzdHJv U0FDVElPTg== IG1pY3JvdHVi IEhUVFBT IFVzZWZ1bA== IExpYnJhcmllcw== IGxlZGdlcg== IGNvbGxhdGVyYWw= YXJ0aHk= IFJvYmVydHNvbg== IEJlbm5ldHQ= YmFuYW5h 56eS IGJvbnVzZXM= IE9wZXJhdG9y dG1kYg== IGxpcXVvcg== IHBsYXRlYXU= IGNlbGVicmF0aW5n Q1VEQQ== UFdN IG5hbm9y QVRURU4= anVkZ21lbnQ= Um9sZXM= Lis/ ZGVzaWduYXRlZA== IG9ibGlnZWQ= ZGV2ZWxvcGVk 0L7Qs9GA0LDQvA== aWNvbG9y Q0hPSUNF XF5b IGRpc2FwcG9pbnRpbmc= IHJlY3Vyc2U= IHR1cmJ1bGVuY2U= IHJlbmRlcnM= IHN0dWJib3Ju IFNVUFBPUlQ= RVhDRVBUSU9O c2tlbGV0b24= IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== IEFybWVuaWFu IGJhcmdhaW4= dGltZXJz IFNJR05BTA== IGhvcml6b250YWxseQ== dXR0Z2FydA== Licn RnRkYw== R3k= SEFM SlVTVA== TGVk TW90 TmVhcg== UGRm UU0= UlNT Xygiew== ZmNj anVn bWFycw== cGFjbWFu fSIpLCI= 5qc= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IA0KCQ== IOiuoeeulw== aW51eA== IGFpZGU= IGF0ZXhpdA== c3RpY2FsbHk= c3RhcnRlcg== YXJ1bQ== IHBpY3Q= IGluaA== IG11bmRv IHJlY28= IG5hZw== ICc+Jw== ZXR1cw== IGxpZWQ= ICIpLA== aWRs IGRldHJp IFRyaWc= YXBh IHZpZg== IFBhbmQ= IE5BVE8= IE5va2lh Y29uY3JldGU= IGFuZ3I= IFJpZw== IFJhZg== IExS IExpdGVyYWw= IEVFRw== cGVybA== YXJldHRlcw== IGxlYWd1ZXM= IGthcm1h IGtpZGRpbmc= IGpldHM= IHBsYQ== ZXh0cw== ZWxsdA== IGFkZW4= IDQyNQ== IDQ5MA== IHNvbGVtbg== IGNvbXByaXNl Y2N4 cHJpbnRsbg== IGRpc3Bvcw== IGxlbnNlcw== IG1vcmVvdmVy IHRoZWlycw== MTk0Nw== Oi8vJw== IGludGVycnVw IG9mZnNob3Jl YXJyYXlXaXRoT2JqZWN0cw== IENvbmR1Y3Q= IENvbnZlcnRz cmVsaW0= IHdvcmRtYXA= QVBJVGVzdA== IGNhcGl0YQ== IEFudQ== QWxpY2U= TVBU IHN1cGVyY2xhc3M= MDUz VUxE UGxhbnQ= Y29uc3Rz b3BlcmF0aW5n IGNoZXo= IE5vdGlmeQ== IEFkdmVydA== IGRpZmZ1c2U= ZXRjaHVw IE1hbnVmYWN0 d2VicGFnZQ== IHNhdGVsbGl0ZXM= IGZvb3Rub3Rl RU5ERVI= IGluZmxhbW1hc29tZQ== IGVyZWN0ZWQ= TW9kZXM= IGF2b2lkYW5jZQ== IFN5bmQ= IHRvdXJuYW1lbnRz V3JpdGVMbg== IGJ5dGVvcmRlcg== IHRyYW5zZmVycmluZw== MjIyMjIy IMKnwqc= IGNhcnRlc2lhbg== IHRvdGFscw== IFNpZ25hdHVyZQ== DQogIA0KIA== IGZvcnR1bmF0ZQ== aGRhcmFiaWM= IHNrZXc= TW9yZW92ZXI= MTQ3MDEx 4KWL IGNyYWNrcw== 4pe877iPXA== QXBwZW5kRW5lbXk= aGRmcw== IFR5Y2hv MjI2MTQ3MDEx IFNvY2Nlcg== RmVlZGJhY2s= IGFjY29tbW9kYXRpb24= R21HcA== IHBoaWxvc29waGVycw== UHVycGxl TUVNT1JZ SnVsaWU= IGVuZG9yc2VtZW50 REVQVEg= QWJicmV2 IEhBVkU= UkFESVVT IG1lcmNoYW5kaXNl IGxvdWRlcg== IFp1b3Jh IEt1bHR1cmJldHJpZQ== MjA3NjYyMjYxNDcwMTE= NTc1 NTc0 R24= S0k= TGV3 TWl0Y2g= UE9U UmFpc2Vk VXg= VkY= Wyw= XH0kLg== ZEw= aHVudA== aW9sb2dpY2Fs bHVh bWFsbA== cml0aW9uYWw= dGd6 dnU= dsOp 2Kw= 65Cc aW5vZGU= c2V6 IGNpcw== IHB1c2hlcw== IHBpcGVsaW5lcw== IGJvdW5jZWQ= IG11bmQ= IHRvZXM= ICcuLi8uLi8= bXBvcw== IHRoaWVm IGdpZg== IGdpbHQ= IHVh IFNFU1NJT04= IHN0ZXJvaWQ= MDAxMg== MDA2OA== MDA3Mg== IEFibA== dW5hYmxl X18iLA== IE1i IE1vcm0= IE1pbGs= KCc/ IEJyaQ== cGxvbmU= IERJVg== IEhhY2s= IGNvb2xlZA== cnlhbg== aW5kaXJlY3Q= b3VudGFpbg== IHdlaXRlcg== IG91dGRhdGVk PSIo IFxd YWRkRGF0YQ== IHVucmVnaXN0ZXI= IDU0MA== dHBy IG51bWI= MTkzNA== IHN1YnBhcnNlcnM= dmVub3Vz ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IC9c IGtleW1hcA== IHRyYWM= bmV0dXRpbHM= IGNvbXVuaWM= aW5zdW0= JywnJyw= IGRhdGFwYXRo cGFydGF0ZQ== T2JzZXJ2YXRpb24= 0LDQtdC8 IG1vbnN0ZXJz IHNraQ== IHJlYWxpemluZw== IFNoYXJlZA== NDQy U2hvdA== IGJydXRl VU5DSA== MDg5 aXN0cmF0b3Jz IDI1Mw== TG9nbw== YXRzdQ== w6RsdA== IHNpbmdsZXRvbg== RFNQ SW5kZXhlcw== dWtpbg== ZGVjaWRlZA== c2lyYWJsZQ== NTg5 IHJpcHBlZA== RU5EQw== IGNvb2tpZWxpYg== IGF3YWl0aW5n SGVscGVycw== IHF1aWNrZXI= IG9wdGltaXN0aWM= IFRyYW5zZm9ybWF0aW9u RG93bmxvYWRlcg== IGRlbGl2ZXJz IGludGVncmF0aW5n IFN5bXBo RGVsaWE= IHJhbmtpbmdz IHN0YXJyZWQ= Ymlicg== IGV4cGxvZGU= TkRFUg== IHNlZ3VuZG8= IG9jY3VwYW5jeQ== VHJhaW5lZA== Y3Vsbw== IHRlcm1pbm9sb2d5 ZWxsZWVz IGRlc2tz IHdpbmVncm93aW5n VHJ1bXA= IGZvcnR1bmVz UGF0VHVwbGU= IE1lbGlzc2E= ZW1wbG95ZWVz 7IS4 IG1lc3NhZ2luZw== IEpvaGFubmVz IE1pbGFu aGlnaGxpZ2h0ZWQ= UGxhY2VtZW50 IGFja25vd2xlZGdlcw== RWZmZWN0cw== IEF1ZGl0 IFRyb3Rza3k= IFNpeHRo UkVMQVRJT04= IGxldHRyZXM= IOqwnA== VGV4YXM= IExEQVA= IHBlbmV0cmF0aW9u 7Jik YWRhcHRpdmU= IFR1bm5lbA== IHBlc3NvYXM= ZHlzc2V5 IGludHVpdGl2ZQ== IFZlcnRpY2Fs SWFtUG9saWN5 IFdhcnJpb3Jz SHVuZ2FyaWFu JSQ= KV97XA== MDY4 NzE2 RFVSQVRJT04= RXJpYw== RmFi TUlD UENB UHJlc3Q= WUVMTE9X YmR0 Y3h4 bWlt bWFzc2Vz bmFibGU= c2h0 dGlmZg== IHRvdWc= cmVib3g= YXRpbWU= YXRsYXM= bGVpZ2g= IGZhdGhlcnM= aXNzZXM= IGluc2Vuc2l0aXZl aWNpbGw= IHJlbm93bg== IHJlY29uc3RpdA== IGhtYWM= dXRhdGl2ZQ== JywpIiw= IGdjZA== IFR1bQ== IFN1eg== IFNvcnRlZA== dGhpb3BoZW5l b21hdA== MDAxNA== aWZvcg== YXBwbA== IDIzNg== bmFtZWR0dXBsZQ== KSlc IERpbA== IERhbmM= IER1cmF0aW9u IExvaw== IExpc3Rz IExBQg== IEhhc3M= b2NhdGU= b2d5 b2dTRg== IGp1bmdsZQ== a2V5c3RvbmU= aWRlcHJlc3M= IGNsYXdz IEp1bmN0aW9u cHJlcGVuZA== ZnR0aA== IHJhY2Vk dW5kbGVk dmVsbw== IG5vb2Q= IGRpc2Nz cmVzc2luZw== IGFnZ3Jhdg== MTk1MQ== RU5DRVM= IHVzdQ== bWFuaWE= IGlkb2w= IEhlaWdodA== bm90aWZpZXI= IGF0dGFpbg== IGZpZWxkbmFtZXM= IENvbnRlc3Q= Y3VyZGly IHNtYXNoZWQ= IGV0ZXJu Y29ubmVjdGluZw== c3dpbmc= b2ZmZXJpbmc= ZGltc2h1ZmZsZQ== Q1JN IGdsdWM= cmV0cmll dW5ldg== cGt0cw== IDEzOTkzNzQ= YnV0dG9uQm94 IHBlcmZvcm1lcnM= RGVmaW5pdGlvbnM= IGNvc3R1bWU= aGFv IHF1YWxxdWVy IEZsdXNoaW5n CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IEFzc3VtaW5n ICdfJyk= ZGVzY2VudA== IGNhbGN1bGF0b3I= IHNjaGl6 6Zeo TWV0YWw= Zm91bmRhdGlvbg== TWVkaWFu UklY IENsYXNzaWZpZXI= cXVhbnR1bQ== R2VucmU= IE1vcnJpc29u QWx0ZXJNb2RlbA== IE1PUkU= IHBpdGNoZWQ= IGNvbW1pc3Npb25lcg== CiAgICAKICAgIAogICAgCiAgICA= Q3V0b2Zm IHRvdXRlcw== 7ZWY64qU IENMQVNT 6YeN5aSN NjQ4OTUzNjA= IEFkdmFuY2U= QnJhemls IERyYW1h IGNvbnNvbGlkYXRlZA== Tm90SW1wbGVtZW50ZWRFcnJvcg== IGRlY2xhcmF0aXZl U2VtYW50aWM= YXZvaW1ldA== IGxlYWthZ2U= IHN1bW1vbmVk IGlnbm9yYW50 VklSVA== IHNwZWN0cm9zY29weQ== QUJDREVGR0g= IERvZGdlcnM= IGhpcHBvY2FtcA== IE9ydGhvZG94 YlBvZ1NG IDEzOTkzNzQ2NDg5NTM2MA== IS4= NjM1 ODEw QkFT Qmxvb2Q= QnJpZW4= RWFybGllcg== RmF0aGVy R292ZXJubWVudA== S0VS Tno= UGllcg== UGFsZXR0ZQ== U3Rv XCIpOw== Z3JhaW5z bW91cg== 0Yo= 6K0= 6Yw= 7IKs IHRlZA== IGNpdGVz IGN1bHA= ZGVoeQ== YXNkZg== IGRheno= IGhhdg== IGVm IGVpZ2h0ZWVudGg= Y2VhbnM= dGhvb2Q= IENhc2g= IE1pbGU= IiwiIiw= IEJyaWNr cGxhbm5lZA== IGV4cGxpYw== IExvdA== IExpdmVz IGltcG9ydGFudGU= MDEwNA== PSci IFVOUw== SW5hY3RpdmU= IHBlcnBlbmRpY3VsYXI= dWxsaQ== U3Rhbg== KioqKiw= Q29uc3RydWN0aW9u Y29uZmlnZmlsZQ== c3VicmVkZGl0 IGZsYXNoZWQ= IHVuZGVybGluZQ== IHpv IHppam4= ZWVl IG9wZW5zdGFjaw== IHBvbGFyaXR5 VGVzdGVy UmVzTmV0 IFhpYQ== IDE4OTI= IDE4NzY= VG9nZXRoZXI= 0LDQtdGC c3ltcw== IHNrdQ== IHNraXJ0 UGFyc2Vz IGdvb2RieWU= IE5ld2Nhc3RsZQ== UE9MWQ== cG9zdGluZw== IGF1dHJl IFNoaWZ0 IGVsZW1lbnRvcw== Rm9ybVNldA== RkZU Q1JR IGluaXRpYWxpemluZw== IHNpZGVsaW5lcw== IHN3ZWxs QnlLZXk= SW5mb0Jhcg== 4YCU cmFja2Vy Yml0cmF0ZQ== IE1lYXQ= IGN5Y2xv IGVwaWxl V2hvbGU= IE9ic2VydmVy QU5HTEU= IEltYWdlRHJhdw== IFNjaG5l IGltbXV0YWJsZQ== b3NzaWJseQ== cmVsYXRpb25zaGlwcw== VFBY VkFMSURBVElPTg== IGludGVudGlvbmFs IHByZW1pc2U= IHNrZXB0aWNhbA== IG5lZ290aWF0ZWQ= Q3JlZGVudGlhbA== Y29tbXVuaWNhdGlvbnM= IEJ1ZW5vcw== TUVTU0FHRVM= 55yB RWZmZWN0aXZl IGNvbmNlcnRz IHB1cGlscw== Rm9vdGJhbGw= IGRlZXBlc3Q= bWVtb2l6ZQ== YWFhYWFhYWFhYWFhYWFhYQ== IEV0aGljcw== IHByZW1pZXJlZA== IEJ1ZGRoaXN0 IEZvcmtz IG11amVyZXM= IGRlcHJpdmVk 66+4 IGJ1YmJsZXM= U2FmYXJp 6JeP IGVuZG9yc2Vk L+KIkg== NDkw NTk5 OTUw QnJhaW4= Qk1J Q2FjaGVk RVVS Rms= RmFjZXM= Rmlubg== UGVk V2VsZA== WFNM ZG9tcw== Zm9z a29t bGxl bmVt dGludA== dG5z d2F1a2Vl eGNvZGU= eEZGRkY= enVs fCQ= fSd9 2YI= 54M= ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== c3Rm ZW5lbQ== IHBvdXJ0YW50 IHNsZWRnZQ== aXNzZXI= IHJlbGVn IGhzdg== IGhpcHM= IGhvYmJ5 ICIrIg== IGRlZHVjdA== IGdvc3BlbA== IHN0cmVzc2Vz IEFI IENhbGVi dGVzZQ== IGNvbmplY3Q= IGNvbnZvbA== a2VsZXRhbA== IDI2OQ== IFBseQ== IFBpcGU= IFtdKS4= dXBsb3Q= ZW5kaWFu aXphY2lvbg== IEJyb3M= IEhlcm4= IEhFTA== IE9ydA== IGplZA== IDoo IDMzNQ== aWJlbg== c2hyaW5r aWduZXI= IGVuam95cw== aWV5 SW5mZXJlbmNl dHB1 UkVQRQ== UkVWSUVX MTkyNw== MTk1Ng== aWZpY2FjaW9u IGlkaW90 c3VibWVudQ== IHpvbg== IG51bWJlck9m IHB5YXV0b2d1aQ== IHRyYW5zZ2VuaWM= TGlzdGVuaW5n Uk9Qb2xsZXI= YXppbXV0aA== dWNoaQ== IEV4Y2VsbA== VVJTRQ== fX1cXA== Z2VuZnJvbXR4dA== IEFubm90YXRpb24= MDQzOA== UE9PTA== OTgx IFNob3Jl IG5vbm5lZ2F0aXZl aXNtaWM= TG9naXN0aWM= IHByb2JhdGlvbg== bmFv ICAgICAgICAgICAgCiAgICAgICA= ODUz IGNvbHVtbmlzdA== U3Vic2V0 IHJlc3RvcmluZw== IGRyaWxsaW5n IHBlcmZvcm1lcg== IGNsZWFyZXI= IFN0ZWFt IHByb3RlY3Rpb25z CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== 0LrRgg== ZHJvcGJveA== YXNzZXJ0UmFpc2VzTWVzc2FnZQ== IGp1ZGdpbmc= QXBhY2hl IEhlcm1hbg== IGFkZGl0aW9uYWxseQ== IHNpZ3U= SFRUUFJlc3BvbnNl IExvZ2Fu IGhhcmFzc21lbnQ= IGNsaW5pY2lhbnM= IGRlbW9uc3RyYXRpb25z TVBMRU1FTlQ= IFBST0dSQU0= IHVwcGVyY2FzZQ== IG11b25z Q2xlbGw= IHBvdXJpbmc= IEJlbmdhbA== IGNvbXBsaWFudA== IGFzc2Vzc21lbnRz IEdlbmVzaXM= cHJvamVjdHNJZA== U2NoZW1hTWlncmF0aW9u IFNFQ1JFVA== IHBsYWludGV4dA== IGludGVycHJldGF0aW9ucw== IGlyb255 U1dJVENI IEJydXNzZWxz IGZsb29kZWQ= VW5kZXJUZXN0 IHNvY2lv IGJpYmRvYw== IGRpbmVybw== UVJTVA== IFNjaGVtYU1pZ3JhdGlvbg== TEFCRUxT w650cmU= IElkZW50aWZpZXI= IE1JTUVUZXh0 IEdpdEh1Yg== IEZlcm5hbmRv U21vb3Ro 67aA IHVtYnJlbGxh IERpcmVjdGlvbnM= IENlY2ls IEtvdnU= IGFtYnVsYW5jZQ== IOW9kw== IiM= Ky4= NzM3 Ozw= Q2tm R2li R3Jw UmFjZQ== U3BvcnQ= VHU= YmlyZHM= ZmF2b3I= aGF5 cGl6emE= dGFuZw== em9z IOKW aW5hbWU= IGFpbWluZw== IGF2ZXo= cmVtZXM= aGV1cmU= c3RyYWlucw== IHNvdXM= IHdvbnQ= IGlubmluZw== IHJlYWN0aXZl IG51cnQ= IGhs dXRp ICI/Ig== aWRpbmU= IGRlc2Vu ICglKA== dmVtZW50 IHN0YWdlZA== IENyZWFt IENBTQ== IENUUkw= IHNlamE= b2Rvbw== IE10 IFsqKioqLA== KiopLg== Z2V0ZGF0YQ== Z2V0aG9zdG5hbWU= IEJyYW4= dXNv IHByb3Bvc3Rh Jykr IEdlc3Q= IGtpY2tz b2Jsb3g= dXN0YWlu ZHVpdA== Z2VtZQ== IHNlcsOh IGFnZ3Jlc3M= MTk0Ng== IG92ZXJ3cml0dGVu cmVkaXQ= Uk9D IGNvcm5i IGN1cmI= SUxU IGJ1aWxkZXJz IFNoYW5l QWRkcmVzc2Vz IGxvY2FsaXR5 IHBhcmVudGluZw== IGdsVmVydGV4 MDY5 dWNraW5n QXNzZXRz IHRhZ2dpbmc= UExVUw== QWdlbnRz IHBlcmlvZGljYWxseQ== YmF1ZA== 5aS5 IGZsb3du Rmx1c2g= IGhvcGVmdWw= Z3JlZWs= IGNyaXRpcXVl UFJFUFJPQ0VTU0lORw== IHZpb2xhdGluZw== IE9wZW5FUlA= KCIvIiw= b2NhYnVsYXJ5 IGdyZWVuaG91c2U= U29tZW9uZQ== LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKw== PT09PT09PT09PT09PT0= Y250cmw= IE1hZ25ldGlj IGF1ZGl0b3I= IGJvd2Vs Y3VhZG9y 54mM IG11cmRlcmVy IGZhYnVsb3Vz L1wvXA== O1wiPg== 5q+N IHBzdXRpbA== IGNvdW5zZWxpbmc= INGC0LDQug== IEJhZFJlcXVlc3Q= IHZlZ2V0YXRpb24= RGVtb2dyYXBoaWNz IFBhcnNlRXJyb3I= IGRpbGln QUNISU5F IFBzeWNob2xvZ2ljYWw= IEV4cGFuZA== IE1FRU0= IHJlbmV3YWJsZQ== IFZlbmljZQ== IGNpcGhlcnRleHQ= U2V0TGluZVdpZHRo IFNwZWVjaA== 6rKM IGNvdXNpbnM= 5qC35pys IG9waW9pZHM= RkFDVE9S IEFDQ0VQVA== IGluY2VudGl2ZXM= RW50cm9weUxvc3M= IFZpdmllbm5l IExhbGlxdWU= Ky0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0r 6YGN5Y6G b2dyYXBoZWQ= UFJFUFJPQ0VTU0lOR1NURVA= NjY0 QF8= Q291cnQ= SnVy SmFt TEFZRVI= TmljZQ== UU1haW5XaW5kb3c= VGFrZXM= WkI= YWFu YmF6YWFy Y2luZGVy aHVsbA== bmF0dXJl cG91cg== cGFuZGE= d2ls eGl0 eVo= emJlaw== xZE= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICMjIyMjIw== ICAgIAoKICAg IHRhbnRv cmVhcg== ZW5hcnk= YWxpZW4= IGJ1cnk= IHJlbWVkaWVz IG5vbnM= IGhpZGVz IGxhYnM= b2xpdGg= IGRlcGVuZGVk IFNpeHQ= dGhydXN0 IENTZWN1cml0eQ== YXBpZA== IHNlaW5l IDI0OQ== IE5vcmE= cHR5 Y2xkYg== IEJpeA== IEJpb3M= IEJvcm91Z2g= IEJhY2hlbGRlcg== bWVudGlvbnM= ZXJlbQ== IFJ1c2g= IGV4YWNlcg== aW5leg== IFdpZHRo IEd1bA== Wyct IGVsdWNpZA== IE93 cGFyYXM= IFwq IFx+ IGZpbGV0eXBl IGxpc3RPZg== dmFsdWVNYXRyaXg= MTk0Mg== NTAyOTQ= RXhwb3N1cmU= dGhldXM= IGxvY3M= IHJlYWRsaW5l IGluZGlnbg== IGxvbmd0aW1l IGRlY2ly IGVkcw== aGVhZGxpbmU= IGNhcmJv IGNvbW1hbmRpbmc= SEVY IHN1bW1lZA== IENsYXNzZXM= Y29sdW1uY29uZmlndXJl IHByb2JhYmls IENvbXBhcg== IGlkZWFsbHk= ICcuJyk= IFNwZW5jZXI= IGVtYnJv UHJvcGVydHlNYW5hZ2Vy IFdlc3RtaW5zdGVy 5a6f IFJlZ2V4 PSUu IHRheHBheWVy 5piT 5pif IGZsYWdnZWQ= Q29ubmVjdGlvbnM= aGFtbWFk KCIlLg== RGVmYXVsdEF0dHJpYnV0ZXM= IENvbWljcw== IGNsaW5pY3M= IGhvdXJseQ== QUFBQUFBQQ== IG5hdWdodA== IGJyYWtl dGF4YQ== IG1tb2w= IG1peGVy IHN1Y2NlZWRz QWxpZ25DZW50ZXI= IHN1cnZleWVk TU9EVUxFUw== IFByb2Nlc3Nvcg== IHByb2N1cmVtZW50 IE51bWJlcnM= Y29tYm9ib3g= IGluZmVjdGlvdXM= V0hN 7Je0 IDEyMzQ= UkZN IEFQSUM= Y29udHJhY3Rz 0L3QvtGB0YI= ICJ7fSI= 55So5oi35ZCN cGlwZWdyYXBo w6luw6k= aHVtYW5z IHNhYmVy b3ZpxIc= dG9kb2xpc3Q= cHJvcGFnYXRpb24= JF57Kw== 56Gu6K6k Q2FtcGFpZ24= IGFzc2Fzc2luYXRlZA== IGVudHNwcmVjaGVu 6Zeu6aKY andhbGxlbg== IGVtYnJhY2Vk IG1hbW1hbHM= IElua2xpbmc= IGNvcm5icmVhZA== IENTZWN1cml0eUZ0ZGM= JCks Mzk2 Njc1 ODE3 Oicr Q0VS RFo= REdSQU0= SGllcmFyY2h5 S0M= TWVz V3A= ZW9m aHd0YWNhY3M= a29r bHVrcw== c2ludA== qKE= 6aU= aGVp ZW52ZWxvcGU= aXRt bGV1cg== bGVhaw== ZGVtaWM= IHBvbnQ= IGlubGluZXM= c2VsbGU= ICdbJw== ZWxsZXM= IGhhcm5lc3M= IGli aWRnZQ== IHRob3U= IFRvbA== YWdlbmRh dmVhdQ== aXN0b24= IFNraW4= ICN7 IEFK IENBRA== IEZyZXNo IHJhbnM= IFJhY2s= IFJUQw== YWxsYXg= IEVTVA== IEV6ZWs= IGNoYXNpbmc= IGppZA== dWdvc2w= ZXh0cg== IFV0aWxpdGllcw== IHVuc3BlY2lmaWVk cG9pc3Nvbg== IEluZnJh Z2VyYWxk dmVuaWVudA== SURB IGxpbmVhcmx5 dmlld3NldHM= IFVuaWZvcm0= d2hhdGV2ZXI= KTsi T1RQ IDE4OTQ= cmVxdWVudA== ZXJybXNn T2JqZWN0VHlwZQ== IG11bHRpdHVkZQ== IDE2MDA= Rm9ybWF0dGluZw== IExlaA== IHZlY2Vz VXBsb2FkZWQ= IHB1dGF0aXZl IFBhcmFk bW9zdGF0 IFdoZW5ldmVy IEF0dHI= ODYx VkVSQUdF UExPVA== w6dhcw== IGJhc2ljcw== QXR0ZW1wdA== IEluZHVzdHJpZXM= DQogDQ== IHNlYXNvbmluZw== Q29kZWM= KX1few== IEV1cm9wZXU= IGZhc3RiaW5hcnk= b3BocmVu IGRldGVjdG9ycw== IOu2 IAogCg== IG1hcnZlbA== U3BlY2lmeQ== QXR0cmlidXRlVmFsdWU= cmVkdWNpYmxl IHJlY29tbWVuZHM= IEFudG9u IHN2Zw== IEZpbHRlcnM= T2hpbw== TWFya3Vw IGZsYXNoaW5n IEJyYWRmb3Jk aGFsbw== IHN1cHBseWluZw== IEp1bGlh IEltcHJvdmVtZW50 Y2lyY3Vt YmRo b2xvb3A= IENhdWdodA== cGhlcmQ= Q29va2Vy TG9va3M= IGtub2NraW5n IGx5cmlj 5pu/ IG1lbHRpbmc= IHNhZGx5 IHNjcnVi IFBvc3Nlc3Npbmc= UGhpbGFkZWxwaGlh b2dnbGVz Zm9ybWVybHk= IE1PRElGSUNBVElPTlM= dG9kb3M= YW1vbmRz XHxfew== IEltbXVu JCQkJCQkJCQ= 5YW25LuW IGVsYWJvcg== 5aC0 IEhpbmR1cw== IGVwaWRlbWlj IEV2b2x1dGlvbmFyeQ== TmV1dHJhbA== IGRhbmdlcmU= b251Y2xl IElURU0= IG1hbW1hbGlhbg== aW52YXJpYW50 ZXJlemhrb3Zza3k= IENyYXdmb3Jk KDo= KyU= L19f Qm9y Q2FibGU= Q2hlbQ== RHJh Rko= TWc= TXV0YXRpb24= T0k= VGFy VU5B WVQ= Ymlw ZEU= ZmVs ZmlmdGg= Z2FyeQ== bm9i eGFwaQ== IGFsbw== IGFraW4= IGFqYXg= IHBkaXN0 IG1vdW5k ZXRpbmU= IGlU IGRldHM= YWdo IFNlbnNvcg== IHN0cmF5 IFBhdmVs IE1L IE1TSQ== IHJhbGw= IGFsdGFy IEJvbWI= IERBRw== IGV4aA== J10uXw== IEdhcA== IEVTQw== cHJvY3M= YXJlbQ== IE90aG8= c2h1 IGNsYXc= IG91dGRpcg== YXZhZ2U= IHJvdHRlbg== cG9pcw== IHRlc3RjYXNl IFZL IFZpcg== IHNheA== IF9fX19fXw== Y29udHJh ZWNk Zm9yYmlkZGVu MTkxMA== IGJvb3Ro IHNwYW5uaW5n Il07 IGFjb3Jkbw== IHRyYXZlcnNhbA== IHRyYW5zZmVjdGVk LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= bm9kZU5hbWU= bm9l cmVkc2hpZnQ= IGRhdGFkaXI= MTAwMjU= IGRvbmRl Ym94eQ== MjgzMA== ZGF0b3M= TE9Z IHN1bWE= IEFzc2V0 UGxhY2Vz cGVkbw== MDYx cG9zaXRpb25hbA== Li4uLiI= IFBhcm1lc2Fu b29v c3ZpbGxl Q291bnR5 aHl0aG0= IGh5ZHJh aGF1bA== IOyk bW1pbmc= IENvbnRlbnRz IG1pbmRmdWxuZXNz SW50ZXJwcmU= dGljbw== YWxsb3dlZW4= IOWK QWN0aXZhdGU= Z3VpbnM= IHVuaWNvZGVkYXRh TUNlbGw= IGFsdGVybmF0aW5n INeb IHdlYWtlbmVk IEdyZWVuZQ== IHRyaXBsZXQ= IFJlcXVlc3Rz T3Bwb3NpdGU= IGNpcmN1bXN0YW5jZQ== IGFsdGVyaW5n Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= IGNvbmZpcm1pbmc= IGJlYXV0aWZ1bGx5 Pz8/ c2VwYXJhdGU= IG1lc3Nlbmdlcg== IHByb3BhZ2F0b3I= IO2MjA== IGd1YXJkaWFu V1dXVw== IGltbXVubw== V2lsbGlhbXM= 0YjQtQ== U2hvcnROYW1l d3JhcHBlcnM= IHByb251bmNpYXRpb24= bm9taW5hbA== ICIqIg== IE1pY2hl IEdyZWVucw== Mjk3MzU3OQ== IEtlbnlh DQoJCQkJCQkJCQk= IGNvbmZyb250YXRpb24= VHVydGxl 5ruk Nzc4Mjk3MzU3OQ== IGxlYXJuZXI= 5p2h5Lu2 QWxleGFuZGVy IEtsZWlu IHRhcGVyaW5n IGdydXBv IHNpc3RlbWE= RmxleGlibGVGb3JlaWduS2V5 IG92YXJpYW4= IGNvdXBsaW5ncw== Nzc4Mjk3MzU3OTUwMjk0 NTEz Nzcw NzI2 Qnc= RW1lcg== TUlORw== UHY= U3I= VXRpbGl0aWVz ZW9y a0Y= aW5ib3VuZA== IHRpYg== cmVvcmRlcg== b3Jj IGPFk3Vy YW5ldA== ZGVzcA== IHNpZ2h0cw== IG1vdGg= IG5hdXNl dXR0YQ== b3RyYW5z aWR5 IGRldXQ= ICgpKTs= aW50Zg== IFBm IFBvbg== cXVvaXNl IGFsbGV2 IERM IGV4Y2x1c2lvbnM= IEhhdg== dWJlbg== cmVzaGVk J109Jw== IEdydXA= IEd5bQ== IGNsdWVz aW1wb3J0ZXI= IGVucm9sbA== IFxfWw== cmliZXM= eXNpbmc= IEtpZHM= ZGJtcw== MTkyNQ== IHN1cHJlbQ== SVRPUg== IDEwODA= Zmxhdm9ycw== SUNNUA== IGVudGVydGFpbg== Y29tbWVyY2lhbA== IG1heHNpemU= J31d bWRs IGRvZXNudA== IDE4ODI= IHJldGluYWw= c3ltcA== dW50YQ== dHJhZGVz dWZmZWQ= ZGlzdHJpYg== IikpOw== IFBsdWdpbnM= IGFudGU= IGh1bW91cg== QW5kT3ZlcmZsb3c= IG9yZ2FuaXplcg== UGVyZg== IHVuZGlz IHF1YWxpZmljYXRpb24= IGNvbXB1dGF0aW9ucw== IHNlcGFyYXRvcnM= fn5+fn5+fn5+fn5+ Z2xhbmNl IHRheHBheWVycw== Rmxhdm9y SW50ZXJhY3Rpb24= IG1pc21v bWVudXM= IGVjb25vbWljYWxseQ== TWVW Q29ubmVjdGluZw== IGJhY2tncm91bmRDb2xvcg== R1JV 4KSk IHJlZGlyZWN0ZWQ= Qk9PVA== CgkJCQkJCQkJCQkJCQkJ 6YeK Rm91bmRhdGlvbg== IHByZXN1bXB0aW9u ZXhwb3J0ZXI= UEhZUw== IGFsbGVsZXM= IFRlcm1pbmFs IHNoaWZ0d2lkdGg= IGluaGVyaXRz SW5zdGFsbGVk w6J0ZQ== T09PTw== Xiok 5ZCO55qE IHNob2NraW5n IHBlcm1pdHRpbmc= IGluY29ycG9yYXRpbmc= IFRFU1RT 6Zif Q2xlYXJVbmRlcmZsb3c= IGhhbHRlZA== IFJvbWFucw== 5qyh5pWw IOWIpOaWrQ== LS0tfC0tLQ== IGNhcHN1bGU= IFRocm91Z2hvdXQ= IFplcm9EaXZpc2lvbkVycm9y TmVpZ2hib3I= ICdAJw== IHZvd2Vscw== Q0xFQU4= IGFsZW1iaWM= IHdlaWdoaW5n IHN3aWZ0bHk= IHByZXN0aWdpb3Vz bGFjaWFu 656Y IE11bmljaXBhbA== IGNhdXRpb3Vz IGdyaWV2 VGFibGVXaWRnZXRJdGVt IFRob21zb24= IGVuZG90aGVsaW4= UkVTRVJWRUQ= Q2xlYXJVbmRlcmZsb3dBbmRPdmVyZmxvdw== Iz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09 NTE3 NjM4 Nzk1 ODk5 OTgw QnJvYWRjYXN0 SGFsbA== SWNl SnVtcA== VGFj XCI+XA== XT0n Y3B5 Y2FsZQ== Y2FyZ28= bm9yZQ== eHJhbmdl DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IAogICAgICAgICAg aW5jZXB0aW9u IHRyZWFk IGFpbnNp cmVjb3Zlcnk= IGZ1c2U= IHBlbmNpbA== IG9v bWV0ZXJz cm91dA== cm9iZQ== IGJm IGJvdHM= IG3DrQ== IG5hbw== ZW50ZXJlZA== IGhhcA== b3Rpb25z aWdhdGluZw== YWRpbg== bG9mZg== IFNwYXI= IFN3b3Jk IFNEUw== IFNhdWw= IHN0b29s IEFlcg== IHbDpA== dW5pdmVyc2l0eQ== YW1k IDI5Mw== IDI4NA== IDI3MQ== IE1leWVy IFtc dXBh IEZHRlI= IHJscw== IHJzYQ== Z2V0YmxvY2s= dXNw YXJ0YQ== J11bOg== IFdlbg== IFdhcnI= IEdVSUQ= IEV2aWU= cHJvcG9ydGlvbmFs aW5kZW4= IHNoaXJ0cw== ZXBpc29k cGhpcw== c2hhZGVy YWN0dQ== cHJlc2VydmU= IHhy IHJvYXI= ZXJ0ZW4= dmVudHVyZQ== ICgnXw== IHNjaW50 ZGJs Zm9yb3BlcmF0aW9ucw== Q2hyb20= bWFudWZhY3R1cmVy aXRlbXNpemU= IHptcQ== IFJlaW4= cHJq IG51bWJlcmluZw== IGVkaXRz IGVzc2U= Z3JwYw== IHJhbmRvbW5lc3M= IHZpc2E= IHF1ZXN0w6Nv b3B0aW9uc2Zvcm9wZXJhdGlvbnM= TG9naWM= dXNzeQ== IGtpbmRseQ== d2lucmVn IGluZmFy IHNwYWNlY3JhZnQ= NzYy IGdlb2xvZ2ljYWw= b21icmVz IENvbnRyaWJ1dG9ycw== ICIlLg== 5aSJ U1VCTQ== IHJlbGF0aXZlZGVsdGE= 5qC4 cHVpcw== RG9jcw== dmFyaWFudHM= IE5ldGFueWFodQ== cm9sZXVt IGJhbmtlcg== IGNvbnRyYWN0aW9u ZHJvcHBlZA== IFBydXNz KCdfJylb d3JpdGFibGU= 5Yaz SVNUSUNT YmFub24= U2luZ2xlUGhvdG9u IFNhbGVt IGZyZXNobWFu 64u5 IGh5ZHJveHk= 0LDRgtC10LvRjA== IFZBTFVF DQogICAgICAgICAgICANCiAgIA== TElORVM= VEFCTEVT 4Liy IHByYXlpbmc= U05S YXVjb3Vw IHBlcnRpbmVudA== IFJhbWFu IEhhcnZlc3Rlcg== Q3Jhc2g= YW5kZXo= IHBlcmlwaGVyeQ== IENvbG9uaWFs IFNjYWxhcg== UFVTSA== IEludGVncmF0aW9u VG9ycmVudA== IEJydW5zd2ljaw== IGNydWlzZQ== IFlhbmtlZQ== REVGSU5FUw== IFBCWA== KCd8Jyk= QVVUSE9SSVpBVElPTg== IGVwaWRlbWk= IGZpbmFuY2lhbGx5 IGluZGljdG1lbnQ= IHNtZWxsZWQ= U2VyaWFsaXplVG9TdHJpbmc= IGJsZW5kZWQ= NTkw NjEz QnJvYWQ= SE9Q Sm0= T3R1 VGFuZw== ZUNvdXA= Z2o= aHVp a3Jh cGljcw== cmF0aWM= z4A= IOGD cmVsZXZhbmNl ZGViaWFu IHNsZWQ= cm9zYQ== cm9tZXM= aWRpYW4= IGZvcmZl IGZvcndhcmRlZA== IHN0dWJz MDA2MDA= aXJsZWQ= YXByb2M= IHZhZ3U= dW5zYWZl IE1zZw== IE1pbGVz cHR5cGU= Z2V0VXNlcg== IERybw== IGV4cG9zdXJlcw== IGhlcw== IGhlYXJz IExPTkc= IFdXRQ== dG94aWM= Iiko ZmZpbGU= IE91dGls MDEwMg== IDMxNg== dXN0b21lZA== IHVuc29ydGVk dHlhcmQ= IEtC c29pbA== MTIxMg== IGRpc2pvaW50 IFlhbQ== MTkzMg== MTk1Mg== SVRU ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IHBlZw== SUNhbA== IGxvY3Vz PT09PT09PT09PT09PT09PT09 IGJsdWVz QVNTRVJU NjY5OQ== IDE4OTM= aW50ZXJzZWN0aW9ucw== R2V0TmFtZQ== IHJldGFyZA== IERldXRzY2g= IGNvbXBsZXRlcw== IiwiLQ== IG1vZGVyYXRlbHk= VW5kZWZpbmVk IFNoZWlsYQ== 0LjRgdGC VmFsdWVUeXBl c29scg== YmF0Y2hzaXpl IHByb2dyYW1tZXI= IMKh ZGV2bnVsbA== VFJBQ0U= aXJ0aWVz IFJlc29sdXRpb24= IENvbXBldGl0aW9u IEF0dGVtcHQ= IEJvZWluZw== IGRvY3VtZW50aW5n IGl0ZXJhdGl2ZQ== ICctJyk= MDAxMDE= IGhvcmFz QmVoYXZpb3Vy aW5uZW4= IMOpZw== R1JQ aGlnaG10 IGNvbmRpdGlvbmluZw== UENEUw== U3BlY2lmaWNhdGlvbg== IE91dHNpZGU= VEVTVElORw== IG1lZXRpbmdvbG9neQ== IHByZXN1bWVk RW51bWVyYXRvcg== ZnVuZGVk IEZpbGVuYW1l IGRldGVudGlvbg== YnVsbGV0cw== IGNvbnZlcnNpb25z IEZyYW5rZnVydA== KCcsJylb cmVxdWlyZW1lbnQ= IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== IGdvZGRlc3M= IEhhbWFz IHN5bnRo IHRoaW5seQ== Z2FyaWE= 5L2N5pWw bGVwdG9uUGF0VHVwbGU= IGZpZHVj cmVjdXJzaW9u 56ys5LiA5Liq IG1lbnRvcg== IEJyYWRsZXk= VHJpbGVwdG9uUGF0VHVwbGU= IGZ1dHVyZXM= IHR1cmJ1bGVudA== IEdyZWVrcw== IHRlZW5hZ2U= IGJvbHQ= IGpld2VpbA== IFN1Y2Nlc3NmdWw= IERhbHRvbg== IHN1Y2tlZA== IHBydW5l IEF0aGxldGlj IGJpb21hcms= ZnJlcXVlbmNpZXM= 67KI IG1lcmNoYW50cw== TGV4ZXI= c2htYWxsb3c= ZmlybXdhcmU= IEJyb2tlcklE IG9vemll IHRyYWZmaWNraW5n IFdoaXJsYXdheQ== VHJpbGVwdG9uUGF0VHVwbGVNQw== ITwv NTM0 NzEz ODI2 QUZG RUFQ RmFpcg== RmF0YWw= R3Q= SGludHM= S3k= TE9O UUQ= U2F4b24= VHh0 Ym9tYg== Y2FzZWQ= ZFI= ZWxlYw== Z2Ri am9u c2Fn DSAgIA== kuWFpQ== IHRhcnQ= ZXJvdXM= c3RpdGNo ICAgICAgIAogICAgICAg YWxpb25z ID1b IHdhaXZlcg== IG56 bXBlcg== ICJd IGV2ZQ== IGdlZg== IFRO IFRha2Vu IFNvcGg= IHN0eWw= IENhc2Vz IENhcHR1cmU= KSwpKQ== a2V4 IFBvcms= IE1pcmE= IGFuZ2U= IEVxcw== CiAgICAKCg== IGplbGx5 IDpdLg== ZXhwbGFuYXRpb24= dGV4dG8= aWV2ZWQ= IHVuYXV0aG9yaXplZA== IHVuaXE= cG9udA== IFZJSUk= dGltZXR1cGxl IG9idA== MTIxMw== IHRlbXBs IGRpc3BsYWNlZA== UkVVU0U= IG15ZWw= IHN1Ymdyb3Vwcw== bG9hZE1vZGVs IENoYXJn ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= SURM IHBlZXJpbmc= VGh1 VGhpbmdz Ymxy ZWVrcw== YmVpdGVy b3V0cHV0ZmlsZQ== QUNIRQ== aWdyYXRlZA== VGltZVNlcmllcw== VW5yZWNvZ25pemVk IFNoaXI= IG5vbnByb2ZpdA== IGNvbmZpc2M= IHBsYWNlaG9sZGVycw== Y3lwaGVy MDg2 IFBsYXph ZGV2cw== IHNlbnRpZG8= 5YiS IFRlaWw= IHNlbmF0b3I= cmVzcG9uZHM= NTg0 UG9seW5vbWlhbA== IFN1cHBvcnRlZA== IGJhZGdlcw== YmZk YW5hY29uZGE= IGVyc3Q= IGFmZmlkYXY= IENocmlzdGll IE1lZGl1bQ== IENPVklE IFJlY29tbQ== IGxlc2JpYW4= bXV0ZWQ= IFBvc3RncmVTUUw= YmxhY2tob2xl YmliZG9j IHNlbGVjdGlvbnM= bWFrbw== 5Lmg IFJpY2hhcmRz IERpcmVjdG9ycw== IGFtYml0aW9u IE11bHRpdmFsdWU= IGpvaW50bHk= IHdhcm11cA== 5LyY KCcsJyw= YXNwYmVycnk= IGJyb2FkY2FzdHM= bGF3cmVuY2U= IEZvcnR5 bnV0cml0aW9u IHNhbmRib3g= MDY0Ng== 6Led Y2hyb21vc29tZQ== IGVzc2E= NjY2NjY2NjY2NjY2NjY2Ng== Y2FsY3VsYXRlZA== IENoZW1pc3RyeQ== IGZlbWluaXN0 IE9ha2xhbmQ= IGxpYmVydGFyaWFu IGludGVydmVuZQ== U2F2ZWRGU00= b3ZlcmxhcHBpbmc= IHNocmltcA== IHNlY3VyaXRpZXM= IFBlcHBlcg== IFBDSUU= IEZpbm5pc2g= QWZyaWNh IOuLpA== IHN5bGxhYmxl V2Vsc2g= IFVnYW5kYQ== IHJlY29tYmluYW50 KScnJw== NTM4 NTIx QXNo QWRz Q3B1 UGY= UVN0cmluZw== VEFHUw== Ymdy Y2l0aW5n a2lsbGVk cGZvcm1hdA== cGlv cHJhY3Q= d25k 0Zg= 5po= IGFjcmU= cmV3cml0ZQ== YXRoZQ== YXRpdmE= YXJyb3dz IHNhY2s= aWNpZGVz IHJlY29uc2lkZXI= IGRlbnM= IGlyb25pYw== IGx5bmNo cmFyZQ== cmFtZW50bw== IGVtYW4= IGRlYWY= b3J0YQ== b3J0aW9u aXN0ZW0= dGh1cw== bnR6 IENsbw== IENJUg== aWZh dW5pdmVyc2Fs IGNvbmdlc3Q= IDI3Nw== IE5lc3Q= IE5QQw== IEZpZ2h0aW5n Z2V0SW50 IExhbmRz IExHUEw= KCInIiw= IFdJTEw= IFdPVw== IEVwaWM= ZmZh IDonLA== IDM0NQ== IGFyY2hl IEpha2U= IHVuaGVhbHRoeQ== IDQ5OA== bWluaWRvbQ== YXBwZW5kaWNlcw== bGVkYXk= QVRJTkc= Y29udHJpYnV0b3Jz aXNobWVudHM= bGVzaQ== IGtuaWdodA== bWF0dGVy aWtlbGlob29k cmVuY2hlZA== IHRlcm1lZA== 0LDRjw== dWZmcw== RGVsZXRpbmc= 55qE5YC8 IEJlYW0= Q29tcG9zaXRpb24= RXZlbnRIYW5kbGVy YWNjYXJhdA== IGRpZWxlY3RyaWM= Y2FzdHM= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg cG9yY2VudA== DQogICAgDQogICAg SW50ZXJpb3I= Y2F1Z2h0 Q29udGV4dE1lbnU= Qk9VTkQ= IGNvbGxlY3Rz cmFzcA== Oi0vLw== bXVsdGlwbGF5ZXI= aW5zdGFsbGF0aW9u IHJlZmVycmFs RGlyZWN0aXZl VEFY KSoqKA== QUZURVI= cXVhbnRpbGU= IEV4dGVuZGVk 4paI4paI4paI IE5PVw== Ynl0ZWFycmF5 5LiN5piv SVRJRVM= IG1hbHdhcmU= INC60L7QvQ== 5Ymy ZW1vbmlj eHNEYXRh RGltZW5zaW9ucw== d2F0Y2hlcg== Q29uZmlybWVk Q2FwdGlvbg== IHBzeg== IGp1dmVu IOq1 WVlZ IG5lZ290aWF0aW5n IG5ldXJvbmFs IG1hcmtlcnNpemU= IEZBSUw= RnVydGhlcm1vcmU= IFZpb2w= ICc7Jw== a2VpdGVu 4YCs4YC4 IEFLTQ== IGVsYXN0aWNzZWFyY2g= JycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJyc= IFRpdGFucw== IHBpb25lZXI= IENvbWJpbmVk Iz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0= U3R5bGVz IHRhdHRvbw== IGZyYW5rbHk= 0ZTQvNC+ SElHSEVTVA== c2V0TWF4QWNjZXNz UFJPRElE MDA5NjMxMQ== c3VsZm9uYW1pZGU= IERhbmNlbnk= Njc0 QlFV SElU THM= TGF6eQ== TmY= VGl0 VXBvbg== VUlM Vm9pZA== Wytd YWlj Z2l1bQ== amFs a0ZvcndhcmQ= cmFzb24= zrs= z4M= 15c= YXJjcw== IG5pZXQ= IGRpdGNo ZWxvZw== IGhvYw== IGhhbXA= ICIqLg== ICh+ IGdhc3Q= IFR3ZWV0 IFNjaG4= IFNjcg== IiIu IHJhdHQ= IEJhc3Q= IEJBUg== IERhdw== IEh0bWw= IFdvbg== IDMxNQ== IGNvbnRyaWI= IHVuY29tbWVudA== bGlzdFdpZGdldA== dXJsam9pbg== IHNhbXA= U1RFUFM= IOKAng== UkVUUlk= cHlyYW1pZA== IGNvbW1lbmNl IHN1cHBsaWVycw== IFJlZm9ybQ== IHRyYW5zZ2VuZGVy ZmVhcw== IHBocA== IGhhbmRpYw== IGRpZmZlcmVk IFByb2NlZWRpbmdz dHRr IDE4NjY= IDE4ODU= c2dpdmluZw== IHN1cmk= IHRlcnJh VW5pdHk= KV1bJw== fSQp ZW1wbG8= IENvbG91cg== cG9sYXRlZA== VXBkYXRpbmc= IHBvcHVs bW9keW5hbWlj UGx1Zw== ODgz aGFzSGVpZ2h0Rm9yV2lkdGg= IDI1Nw== bmFp TWVzc2FnZUxvZ2dlcg== KCcvJylb Q2xhc3NEZWZhdWx0QXR0cmlidXRlcw== IG1lbWNhY2hl Y3J1bWJz IGVtYnJvaWRlcnk= IGhvcm5z c25pZmY= SW50ZXJzZWN0aW9u U0hVVA== Z2dI IHF1YW50aWZ5 IHNwbGl0dGVy IOWSjA== VXBkYXRlVmlldw== IGRpYWdyYW1z QWJzdHJhY3Rpb24= QmxvY2tEZXZpY2U= UEVSTUlTU0lPTg== IEhvcm5zYnk= IGdhc29saW5l IFRleHR1cmU= IHRhYnN0b3A= IHN0aWNrZXI= U2ltb24= IFBPSU5U IHdhaXZlZA== IGFwcG9pbnRtZW50cw== TUFQUElORw== INC00L4= IHNsaWNpbmc= 5paH5Lu25aS5 5Z2Q IFByaW50cw== YW5hbHlzZXM= TW9vbg== IGd1aWRpbmc= IFNhaW50cw== IGFkdmlzb3J5 IGpvZ2FkYQ== IGltcGVyZmVjdA== UG90ZW50aWFs c2VhcmNoZWQ= IG1lbnNhamU= 57WQ IEpvaW5lZA== IGRlbnRybw== IGV4cGxvc2l2ZQ== c291cmNlbA== TWlzY2VsbGFuZW91cw== IERldGVjdGl2ZQ== IHRldHJh IEV4ZWN1dGlvbkNvbnRleHQ= IGJsaW5rZWQ= IHJlZmVyZWU= Y2VsYW5kaWM= IGxhdW5kcnk= IE9QVElPTlM= 55+p6Zi1 YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo= Jz0= NDM0 Qkg= QnJvd3Nl RUlO SERG TGFw THly TXVuaWNpcA== VWx0 VnhBSA== ZWxlY3RlZA== acSN a293c2tp bXdodWRzb24= cWVtdQ== xrA= ZXJ0bw== IGNvdXQ= IGN1c2g= IGNibGFz IHBhbXA= IG90cmE= IHNpbmU= IHNvZGE= IHdhbmRlcg== IHdyZXRjaGVk IHRva3M= IGxvbmU= b3RvbXk= IGRlaXg= aXN0bw== IENhbWU= IENhcm4= IHZnZw== IDI2Mw== IGRlZnM= IE1H IE1hdHRlcg== KCcp IG9ud2FyZHM= YW5naQ== IEZO IEZPVVI= IHdoaXA= ZXJlY28= LS0tLS0tLS0nKQ== c2V0SGVpZ2h0Rm9yV2lkdGg= IGNvaXNh IE9iZXI= IGthcg== IDMxMw== Y2VwdGl2ZQ== IGFkam9pbnQ= YWRkUHJvcGVydHk= IDwl IEtpbA== Y29sbGVjdGVk dXNlcmRhdGE= YXVjaA== c3Bpa2U= IH1dLA== RmllbGRPcHRpb25z IG9wcA== MTkxNQ== YXh2 IHJlY29yZGVy aW5kZXhpbmc= Zmxn c3Vic3RpdHV0ZQ== IHBhdGhvZ2Vucw== eW5lcw== TGlzdE1vZGVs Y2VudGVyeQ== PT09PT09PT09PT09PT09PT0= ZGlzam9pbnQ= IGZvcm11bGF0ZWQ= YXV0cmU= IDE4OTE= bWF0aHJpY2s= U2V2ZW4= b2ZmaWM= QXJ0aWNsZXM= MDQ5 YmFycnk= IGdyYWM= MDU5 RElBTE9H IG5vbmFzaA== IGJyaWdodGVy UGxvbmU= ZGl2aWRlZA== IGhhcHBpZXI= IGJvb2ttYXJrcw== Q09ORklSTQ== dXNzaW9ucw== IGV4ZWNmaWxl VElMRQ== aW5zZXJ0ZWQ= IG1vdGVs IFNwZWxs QXRsYXM= IHNjaGVkdWxlcw== IGJhcnJlZA== IENhcnBlbnRlcg== RGlzcA== IFF1aWNrZW4= bGFib3JhdGlvbg== cm9pZGI= MDAwMDAwMDAwMDAw U1BBTg== ICIuIiw= aGliaXQ= IERpc2N1c3Npb24= ZXZ6 IFByaW9yaXR5 4pWX IG1hcnNoYWw= bm9uZXhpc3RlbnQ= IGNvbnRyYWRpY3Rpb24= IEdyYXY= IEh0dHBSZXF1ZXN0 IEFueXdheQ== c3BlY3RyYQ== U2lnbmFscw== IHdpbGRlcm5lc3M= c2RC IGZpYnJvbXlhbGdpYQ== IGJvbmhldXI= IFVOSVQ= IFByb2dyYW1taW5n cm9udGVuZA== T3B0aW9uUGFyc2Vy IGlubmluZ3M= c2V4dWFs IEhhd2tz IGJ1dHRlcmZseQ== IFByb2R1a3Q= UG9zaXRpdmVTbWFsbEludGVnZXJGaWVsZA== X19fLw== IHVucGFja2Vk IENhc2V5 IGV2b2x2aW5n UExBWUVS IHRlYXNwb29ucw== aWZlcmFzZQ== aG9ub3I= VFJBTlNM IENhc3Nlcm9sZQ== 5ZCR6YeP VHJpcGxl IEZhaXRo b3BoeXNpY2Fs VW5kbw== IGRpc3RyYWN0ZWQ= IEthemFraA== IGJvc3Nlcw== IEt1bnN0 IENhdmVuZGlzaA== c2V0SG9yaXpvbnRhbFN0cmV0Y2g= IEhvZmZtYW4= TFNUTUNlbGw= IG3DvHNzZW4= c2V0VmVydGljYWxTdHJldGNo Kiku Lyhc Nzk0 ODQ1 PSgo QW1w RmF4 R2FsbGVyeQ== TGVw UElD Y21ha2U= ZGFw ZWZmaWM= ZmljaWFs aHg= am54T3Ru cWI= cVlY cmZmaQ== dm1z dmRs d2FndGFpbA== 0Zo= 7Zo= DSAgICAgICAgICAgICAgICAgICA= IA0KICAgICAgICAgICAgICAgICAgIA== IGF1cmU= YXR0YQ== c3Ri ZGVtYQ== ZGVzZXJpYWxpemVk IHBsZWRnZQ== IGludHJpYw== ZXNwYW4= IGRvdw== IGxm IGVv YWRvcmE= Y2hpcHM= KCkoJw== IEFVQw== IEN1bA== IENITw== IENyaXN0 IHZvZA== YW5kcmU= IE1TRQ== IE5pZ2Vs Y2xheQ== IEJNVw== IERV IEhvdXJz c2V0dGU= b2NvcmU= MDEyNQ== Zm9ybWFs IHBsYXF1ZQ== IGVubGFyZw== IGFkdmlzb3I= Zm92 IEtvY2g= Y29sbQ== Y29sbGVnZQ== aW5rYQ== dXNlcmluZm8= bG9nbGV2ZWw= UkVW bmV1cnM= U3RhZmY= RU5DT0RJTkc= bWF0aXplcg== IGJldHJheWVk IGZsdXR0ZXI= YXR0aWU= dGhldHlwZQ== cmVkUw== INCY RURHRQ== JykpWyc= IGxhYmVsbGVk IGF2YW50 dHJhY2Vy IGNhcnA= OTUy MDQy IGNlbnRyb2lkcw== IHFp VmFsdWVWYWxpZGF0b3I= IGNvbmZlc3Npb24= cnRvcw== IGhvbWV0b3du IGFjdGl2YXRpbmc= V2lkZ2V0Q29udGVudHM= IElOUg== bG9jYWxpemU= c3BlY2lmaWNhdGlvbg== IGV2aWQ= VFJBQ1Q= IGRpc2NpcGxlcw== YWx0Qg== U3Vic2NyaWJl IHNuYWtlcw== bWFrZWZpbGU= VVBEQVQ= IFF1YWQ= IE9idGFpbg== IE9QVElPTg== IEdvYWw= KStc ZHJpbms= 7J2M IG1hcmtldHBsYWNl IGRlbW9ucw== IENvbW8= RGV0ZWN0ZWQ= Z3JlZW5T UmVkZGl0 IOaM IHN1ZG9rdQ== 5paH56ug ICcnKSIp VG9wb2xvZ3k= IHNxdWFzaA== IHN2Yw== U3RvcHBlZA== IE5vcnJpcw== IGRlY29yYXRl IG1pbGxlbm4= IGluaGVyZW50bHk= IG5ldXRyb3Bo IHB1bmlzaGVk IFVOSVg= IEVtaWx5 IHRhaWxvcmVk IFBvbXA= IG5hcnJvd2Vk RGl2aWRl IFB1Ymxpc2hlcg== MDAwMDAwMDg1 IGluZmVydGlsaXR5 aW50ZXJlc3Rpbmc= IG1pbWV0eXBlcw== 0JLQstC10LTQuNGC0LU= IFNUUklORw== Q2FuZGlkYXRlcw== IHNoaWVsZHM= IFBlYXJzb24= IERpeG9u IEJvbHNoZXZpa3M= IHNjdWxwdHVyZQ== Q2xpcGJvYXJk IE1pcmFuZGE= IHN1YnVyYmFu UGFydGljaXBhbnQ= IGVxdWl2YWxlbmNl IFZBUkk= IGVsbGlwdGlj IE1OSVNU TUFOQUdFUg== IE1vbnNpZXVy YnJpdGllcw== Lygo NzY0 ODIw ODI0 PTo= T2lk VmlldA== V28= WmVu YnNj ZGlhbA== ZGlzcw== a0NvbG9y bGFuY2U= bWl0ZQ== bmF2aWdhdG9y cGlsbGFy cHJhZ21h c29z dHViZQ== dGVsbGluZw== dmlzaA== eGs= 15s= IHRpZW4= ZW51bWJlcg== IGNsZGI= YW50aHJvcA== IHBvbmQ= IHBhdGVybmFs IHNhcA== IGJpbGU= IG1saXN0 IG5pbQ== dXR4bw== b2xvbg== IFRhY3Q= IFRhbmVlcg== dWx1aQ== IFNheA== YWJzb2w= IEFyaQ== aW50ZW50cw== IGJlZXQ= aW1vZGFs IGNvbmN1cg== IE1pdGFy cXVpZXI= IEZybw== KSldLA== IEJpZGVu IERleHRlcg== IExFVg== aXBybw== IF8p cHV0cw== c2NpZW50aWZpYw== IHNocA== IE9wcw== IGttaW4= IGtldGNodXA= ZXBo IHJvYmU= Y3JlYXRpdmU= IFRocg== IDUwMDAw IGxvbw== Y2Npw7Nu IHBlcnBsZXg= IHNjb3Bpbmc= IHNlcmFpdA== Zm9yY2Vy IHBvZXRpYw== MTExMg== IGludGVyY29ubmVjdA== IHdvcmtvdXQ= U0VFRA== IGVuZG93ZWQ= IHJlZ2Fpbg== IHRyYWNlcg== IHRyYWRlcnM= aXNzb3I= UmVzaWRlbmNl aW50ZXJhY3Q= c2xhbmdhc2Vr U2Vydmlj aGVhZGluZ3M= IGNvbm5lY3RvcnM= bGFzdGluZw== Q1JJQg== 5Y+4 IGZpbmFuY2Vz Z3JhcGhpYw== RGVzY2VudA== YWx0dW5n bGV5YmFsbA== IENvbXB1dGVz KCcvJyk6 IGludm9pY2Vz IGJlbno= IGZvcmVtb3N0 IFByZWRpY3Rpb24= IERFVg== IOW3 IGV4dGVuc2lvbnR5cGU= IGluY3VtYmVudA== IGJhbGQ= SFRUUFJlcXVlc3RIYW5kbGVy IEltcG9ydGFudA== 4pWs Ymx1ZVM= 4KSV IEJhc2VDb21tYW5k IG11dGFudHM= w6pt IHBhaXJpbmc= cHJvdmlzaW9u IEVsbGU= Y2Jj VmVyYm9zZQ== INC/0L7QtA== IHByZXNpZGVudHM= RGVwbG95 IHRlYXJpbmc= amlhbmc= dGFyYmFsbA== IHJlY2lwcm9jYWw= IHNob290ZXI= QmlnQXV0b0ZpZWxk IG1hcmtlZGx5 IHJhaW5ib3c= IGJyZWFkdGg= TG9ja2Vk IEV2aWw= IGRlZmljaWVudA== SGFycnk= IGdhc3RyaWM= IGFtYXplZA== IEhPU1Q= U3BsaXR0ZXI= IGhhbmdz KSkqKC0= IHNhY3JpZmljZXM= IGVpZ2VuZW4= IEdyaWRTZWFyY2hDVg== IGVzc2F5cw== IEltYWdpbmc= IHRpbHRlZA== IHNjcmFwZXJ0b29scw== IGRhdGFzb3VyY2U= 5rOo5YaM IHJlc2Vydm9pcnM= bWFpbnRlbmFuY2U= 7JWE 0YLQp9C10YLQp9C00YLQp9C10YLQp9C00YLQp9C10YLQp9C00YLQp9C10YLQp9C0 U3BlZWNo IHBvbHltZXJz ZnJlcXVlbnQ= Q29uZ3Jlc3M= Y2xlcm9zaXM= IHV0ZXJ1cw== IMOubg== IFRmaWRm 6IyD IENhcmliYmVhbg== IGVyb3Npb24= QVRURU5ERUU= NDM3 NzIz QW1hem9u RmVy RmlzaGVy SGlnZ3M= TGltYg== TmF0 UUM= V2FybmluZ3M= Wkk= XSgp YnViYmxl ZHVzdA== Z2Fscw== aG1hYw== aHVuZHJlZA== kZA= aW50ZXN0aW5hbA== IHRhaWxz IGFtcGxl ZGVhbg== bWV0aGV1cw== aXNzZW4= IGludmFsaWRhdGU= IGJpc2M= ZWR4 ZWx0cw== ICIoIg== IGRldGFpbmVk IGdob3N0cw== aXN0bGU= IFNhZw== IHN0ZW50 IENvcnQ= IENhdGNo IENBTEw= b3BpYQ== IE5vcnRvbg== Y29uc2VudA== IEZBTFNF YXRocm9w IEJlcmU= IFJpcA== IExhZA== IExvcmRz KCIk IEh1Yg== IEhvbGU= J10pKSk= c2V0U3BhY2luZw== IEdT IEdX YWxsYXV0aA== IEVtbQ== IGxlYXB0 IGxldGhhbA== IGpwZWc= YXZpbg== IHRlc3RzZXQ= IFZJQ09N IHZlcmdl IGRpc2FiaWxpdGllcw== IGRpc3Byb3BvcnRpb24= IHRyw6hz U3RyZWFtcw== IGFueXRpbWU= Il19LA== Q29uZmVkZXJhdGU= aXRlbXJlc3BvbnNl IHN0YXJ0dGltZQ== KFt7Jw== IGAu IGZsdXNoZWQ= IHJlZ3VsYXRvcg== IGFteQ== QVNQ QURB fSknLg== QWxnbw== QWxsb2NhdGlvbg== IGdyYXZlbA== b2hpc3Q= IGNvbmZlc3M= RkZJ 44Kt c2VuZGluZw== 44On WzosOg== IGFjY291bnRhYmlsaXR5 Q0xVUw== IGZyaWVk IGludmFkZWQ= Q3JlYXRlT2JqZWN0 Ol0pOg== U2hlYQ== IFN0ZXBoYW4= IGRpZ3JhcGg= YmVnaW5uaW5n QWNjZWxlcg== IERvb3I= IE1vbmljYQ== IHF1YW50aWZpY2F0aW9u YmFsYW5jaW5n Z3Vh IHBlcnNvbmFsaXRpZXM= UENJ IHByb3RlY3Rz IElQUA== IHB1bHA= c3ltYm9saWM= IEdyYXZlcw== IGNvbW11bmljYXRvcg== IENyZWF0b3I= IFBldGl0aW9uZXI= bmVpZ2hib3Vycw== IExhYmVscw== IGxhYm9yYXRvcmllcw== 5ZCN5a2X IHZvaWNlZA== IFZBTE1PTlQ= IGZyZXFz IG11bHRpcGxlcw== IGdseWNvbA== CgogICAgICAJICAg IGJsb3dz IOqz R2VybWFueQ== IG1hZGFtZQ== IFBhc3N3b3JkRmllbGQ= KCcuJylbLQ== d2F2ZWZvcm0= IHNhZG5lc3M= Vk9JRA== Q2FuY2VsbGVk RXhpc3RzRXJyb3I= aWNvbHVtbg== cHJvbW8= YWZmZWk= RGlmZnJhY3Rpb24= IGNhbmR5 VHJhY2tlckNvbW1vbkRhdGE= IFNFUlZFUg== IExpbmVhclJlZ3Jlc3Npb24= IHJhcHBvcnQ= IGFzdHJvbm9taWNhbA== IENvbmZpcm0= dHJpZ2dlcnM= aWNoZXZlcg== TklRVUU= 55+z IG5vbWluYXRpb25z 56We IGxlYXJudA== 0LDQvNC4 IHByb3ByaWV0YXJ5 IENpdGl6ZW5z UGxhaW5UZXh0 64KY dHVtb3I= IHJlZnJpZ2VyYXRvcg== cGVyc2lzdGVuY2U= 4qyb4qyb4qyb4qyb4qyb4qyb IG3DtmdsaWNoc3Q= IGFudGlveGlkYW50 IGludHVpdGl2ZWx5 QVVUSEVOVElDQVRJT04= IHJlY3JlYXRpb25hbA== IFZJQ09NVEU= KSE= Njc4 NjM2 Nzgw Nzky ODc0 OTIy OTQw Pl0= QXF1 QmFjaGVsZGVy SUVFRQ== S3M= S0lO TklORQ== UWw= Um9k U2hlcg== VmVuZG9y V2FrZQ== YCI= Zmly Z2xvc3M= Z2Nk cEg= cG9t c1R5cGU= 2LQ= 4qE= IAogICAgICAgICAgICAgICAgICAgIA== aW5kZWQ= IHTDqQ== c3RhZ2luZw== IGNyYXdsZWQ= ID09PT09 IHN1bms= IGJhcnk= ZWRpYQ== YXNzZW1ibGU= IG9maWxl IGxpdmVseQ== IGVpbmY= IGRlbGxh YWRhbA== ICg9 IFRhYw== dWxvbmc= IFNhY2g= IGJlYXVjb3Vw IGNvbmNsdWRpbmc= IHJzdA== IHJ1cHQ= IEJvbQ== IFJpYg== IExvcGV6 b3JtYW4= cXVlZW4= YXJldGg= YXJlbmE= IGNoaW0= b3N0cmVhbQ== IDoi IHdlYXJ5 c2hhbg== c2hhcg== c2h1dA== ZWxsYW50cw== ZHVjaw== IHVubGU= IHVucmVzdA== IDUyMA== IEthdw== bG9ndWU= YXVmZg== c3BpZQ== IGludGVuc2l0aWVz ICAgICAKICAg IFN0b3JpZXM= IFtdKSk= cm91bmRpbmc= IFF1aXQ= cmlkZGVu RXhjZXB0 DQoNCiAgICAgICAgICAgICAgICAgICAgICAg TGlzdFJlc3BvbnNl Ymlub21pYWw= IDE4ODQ= T2JhbWE= IHJvd0E= TW9kZWxJbmRleA== IHFyeQ== IGNvbmZlc3NlZA== IGJsb2NrYWRl IHN3YXBwZWQ= IGlzc3U= IGV4ZWN1dGVz aHlwaGVu IHByZWRpY3RvcnM= IGludml0ZXM= IGludml0aW5n c3Fy ZXJjYQ== KyJfIis= DQoJCSAgIA== Tk9NRQ== IHdlYnNvY2tldA== Q01TU1c= aW1wYWN0 IGdyaWRTaXpl Zm9ydHVuZQ== UmVhZGFibGU= IEFib3JpZ2luYWw= YmFsYW5jZXJz c3RhbnRpYWw= IGZvYW0= IHN1bm55 UmVsdQ== 55uR IEJ1aWxkZXI= KCIiLg== U2ltdWxhdG9y UmVwb3J0ZXI= IFRlcnJpdA== IGVpZ2h0eQ== IE1ldHJpY3M= Y2FydGVz cGFuZWxz ZXF1aXZhbGVudA== V1JBUA== cmVnZXhlcw== Y29sbGFy IGhvbW9sb2c= IFByb3ZpZGVz INC+0L8= IGTDqWrDoA== IGRpYWdub3Nl RGlnZXN0 QkZyb250ZW5k b3NhdXJz IFNQQU4= IHByZW1pZXJz RFVNUA== IHNhdmFnZQ== aW5oZXJpdGVk KX1cfF8= QmFja2dyb3VuZENvbG91cg== IHJhZGljYWxz IHJlY292ZXJpbmc= RFZCRnJvbnRlbmQ= IHR1cmJpbmU= bWlsbGFu IGVhZ2VybHk= IGRpYWdub3Nlcw== bWVhc3VyZXM= UHVycG9zZQ== U2V0TGluZVN0eWxl U3R1ZGVudHM= IHRoeXJvaWQ= PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09 IG1pZ3JhdGVk IHRlcnJpZnlpbmc= IGltcGxhbnRhdGlvbg== ZGVyaXZhdGl2ZQ== Um9tYW5z U0lNUExFWA== Q29tYmluZQ== VXJscw== aW5ncmVkaWVudA== RGlyZWN0b3Jpbw== IG51ZXZv IGNoZXJyeXB5 IENlcnRhaW5seQ== QXNjaWk= cGFyZGly IGdvcmdlb3Vz S2FtaW9u bG9nZW5ldGlj IGFyZ3VhYmx5 ZGVoeWRl KCs= MDc0 NzI0 Q2FuZA== Rmxv R0FURQ== SG91 TmlnaHQ= TkNI TkVTVA== Ym9yZQ== YmFncw== Ymxvd24= ZsO8aA== aG9ybg== aGlja3M= aW9t bXNz bkI= bnVtcA== eWVzdGVyZGF5 obA= pqw= aW5yaWNo IHRvbmVz b3JhdG9yeQ== c3RvY2g= IGNnbQ== IHBvbnRv IGluZWZmaWNpZW50 IG1sYWI= IHJlaW1i IGRvYg== IGRlcHJpdg== Y2VzdGVy IFRlbQ== IHVwcmVn IHN0YWxs dW1hcw== X18pKSw= IHlu CQkKCQ== IE1hbnM= IE5n IHJzcA== IHJpZGVy Z2V0U2V0dGluZw== YXRoYW0= IEJPUklT IER1bXA= IEx5bg== IExvbWI= IEhldw== IEhlYXI= c2V0Rml4ZWQ= IGF0cw== b2NvZGVy IEdlbmRlcg== IEdvbGY= b3V0bGV0 IEVhc3Rlcg== IEVyaWs= ICIiIi4= aXZlYXU= CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgIA== IGxldmVyYWdl b2Jv b3N0YXJ0 IDMxMg== IDMyMg== IGVuY29udHI= IHVuanVzdA== IDQxMA== IDQxNg== IFZvbg== IHBhcmNo U1RM cHlnbWVudHM= Zm9yd2FyZHM= ICkpLA== IGFnb24= IFlvc2g= bmV1 IHF1aWw= IGFyZ3BhcnNlcg== Q2hh IHNwaWNl SURHRQ== IGtub3Rz ZXJuZXI= YnluYW1l bG9jdXM= IHVuZGVyd2F0ZXI= IG1pbmlkb20= IGRpc3RhbA== cG9pbnRtZW50 IGdlbmVyb3NpdHk= IFhJ IDE4Nzk= IEFsb24= Ij57 IGdyYWJiaW5n VW5saWtl IGF1dG9ub21vdXM= IDEwMDE= Rm9ybWF0dGVk cG9saXRpY2Fs U2h1ZmZsZQ== c291cmNlZm9yZ2U= YnVpbGRlcnM= dmFsdWF0aW9u IGNsb2Fr IGdyb3dsZWQ= w6dhcg== IEJsZW5kZXI= IE1lVg== w7Zz IGJhcnJhZ2U= IE1pbm5lYXBvbGlz IGRldm90ZQ== enp5 enpsZXM= DQogICAgDQogICAgICAg cGF0cm9u TXlj IGV4Y2VwdGlvbmFsbHk= aW1wcm8= U1RSSUNU IHJvdG9y IHdhdGNoZG9n IGF3YQ== IGNvbnRyYWN0b3Jz IEVkZ2Fy REFP IG5vdGljZWFibGU= b3JnYW5pemVk IHN1cnZpdmVz IEhvbG9jYXVzdA== IHBlbmlz KCoqew== 5paH5a2X IHRvdXJpbmc= IGVpbnplbA== IEF1dG9tYXRpYw== c2VjdGVk MDAyMjUzOA== VEVYVFVSRQ== IHBhw61z c3VmZml4ZXM= IGdvZGRhbQ== c2FsbXM= IFN1cGVybWFu Y29kb24= IHRvbGVyYXRl IHLDqXBvbg== MTQ3NDgz TW92ZWQ= U2VuZE1lc3NhZ2U= IGhlcm9pYw== IGZsdXhlcw== IGltcHJlc3Npb25z IENPTFVNTg== MDIwMzA= IG9ic2VydmFibGU= SW5jbHVkZXM= U3Rkb3V0 Y3JvcHBlZA== IFZpcnR1YWxNYWNoaW5l Um9tYW5pYW4= IFJhYmJpdA== SWdub3JlQXJn QmFzZWxpbmU= LS0tfC0tLXwtLS0= cnlzaWVr IGFyb21hdGlj T1BUSU9OQUw= IGJlcmVpdHM= IOuzgA== 6YCA5Ye6 IGNvbnN0cnVlZA== IHJpY2hlc3Q= IGRlc3NlcnQ= YXRoYXJpZWw= IGNvdHRhZ2U= QU5TSUJMRQ== UFJJT1JJVFk= ODY3 Q291cmllcg== TmluZQ== UG9vbHM= UHV6emxl UXR5 WEFB WnU= XHtc Y210 ZHluYW1pY3M= ZnJpZWQ= aGF0Y2g= aGlkZA== bUg= cGFnZXI= c0I= dHdpbg== dG9nZ2xlZA== fi4= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IHR1Y2tlZA== b3JvdA== YWxlbg== ZGVhY3RpdmF0ZQ== IHBpbm5lZA== IGluY2VzdA== IGJpYWw= ZXRlbg== IGxn ICI/ IHRoaXJzdA== IGRlcHVpcw== IFRpZ2Vy bG9pdGVy cGV6 dmVyc2Vz IFNwYXJzZQ== YWJ3ZQ== bnRoZXRpYw== IEF1eA== IEF1Y2tsYW5k b3B0ZXJz b3BrZw== IFByZWM= IE1vc3M= IEZyeQ== KSkj IERvZGdl IFJzcA== IFJERA== IGhlbg== IFdyYXA= YWNhZGU= IGNob2w= IGNoYXNzaXM= IGtr IDMxNw== IDMyOQ== ZXhjbHVkaW5n IHJvdXRlcnM= IGNhbm9u dGltZWl0 IGRpc3BlcnM= IH0pKQ== MTk0NA== Y291bnRlZA== RU5ERUQ= IHdvcmtsb2Fk IHNwcml0ZXM= ZmxpZXM= IFFEaWFsb2c= IFJlYWxpdHk= w6ln IFVuYWJsZQ== bGVjdGlvbnM= aW5zdXJhbmNl J31dLA== IENvbnNlbA== NTUx UmVzaWQ= IGRhdGFsb2FkZXI= aGF0cw== dWNpb24= IHBsYXlvZmY= dGVtcG9y IG1vbmtleXM= Q0hVTks= S2V5d29yZHM= IGVzYQ== IGdhbWVwbGF5 bGluZ2Vy DQoJICAgICAgIA== Q29uZmlndXJl IGFudGl0 bGluZXI= ODU0 QmFzZVRlc3Q= IEF0VFBY QnV0dG9uQm94 Y2FwYWJpbGl0eQ== IG1lYXN1cmFibGU= IEFwSg== IEJsYWly UmVnaXN0cg== QUJMRVM= 5LqR IFByZWhlYXQ= 57uG IGFmZmlybWF0 Y29tbWl0dGVk IOKV dW91c2x5 dG9vbEJ1dHRvbg== dGltZXN0YW1wcw== IG11dGFibGU= IGNvbmR1Y3Rpdml0eQ== UHJvY2Vzc0Vycm9y Y2x1c3RlcmluZw== OTk5OTk= IGRvdWJsaW5n IEhvbGx5 0YfQuA== YWNjZXB0YW5jZQ== IHN0YXJ2YXRpb24= UEhQ VG9vbEJ1dHRvbg== XS1bQA== IERlbW8= IERlbW9u IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t 57qm IFJ1bm5lcg== IGZyb3N0ZWQ= 5bex aGV0aWNz IFNraWxs Z210aW1l 6LS5 Z2FsYXh5 SG9zdHM= c2NoZWR1bGluZw== UFdE 6Z2i55qE aHlwZXJmaW5l IHBlZGlncmVl MzMzMzMzMzMzMzMz Y2hyb21pYw== 56ys5LiA U1VCSkVDVA== IE1pY2tleQ== IGd1aXRhcmlzdA== 5q2j56Gu IHZpbmV5YXJk IFNuaXBwZXQ= VFJBTlNQ Y29uY2lsaWF0aW9u IHZpY2lvdXM= c2FuaXRpemU= IEtuaWdodHM= IGFwcGxpYW5jZQ== IEN1YmFu IGRyYWluYWdl IGRlbGVnYXRpb24= U2V0VGl0bGVPZmZzZXQ= IGFzc2Fzc2luYXRpb24= UnZjbVY= UHJvcGFnYXRvcldpdGhNYXRlcmlhbA== 7JmA IGFwcGV0aXRl Q2Fub25pY2FsRm9ybQ== IGxpZ25pbg== 6b6Z IEVsYXN0aWNzZWFyY2g= IFJldmVsYXRpb24= IFN5bXBob255 Kz0i NTk4 Njcw NzY2 QnJpbmc= QlJB RXk= RXZh RmFudA== SWxpYWQ= UWc= Xy4s YC0= aGllcg== c2Fw fV0s zr0= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IOWumuS5iQ== IGFrYQ== bGVzdG9u IHBvYw== IHB1bnQ= IHPDuw== IHdhcmU= IGJhY2hlbG9y IG5hbQ== b2x2ZWQ= IGRlZHVjdGlvbg== IGdhdXNz IGlmZg== IGJlYW4= IHNlcHM= b2Rlbg== dHVybnM= IE1hZmZlaQ== IE5HQw== b3N4 4oCh IERvbmc= IER5bmFtaWNz IHByb2w= dmFsYXM= IGNob3Jk IDM1MQ== cGFyaQ== IG1hY2g= IHhjb2Rl YWRkZW4= YWRkVGVzdA== aWVj IFZlc3Q= IFZpbGxh IEtyaXM= IHJhaWRz IEluc3RydWN0aW9ucw== c29sZXM= IGNvbGxhdGU= cHJpbnRpbmc= IHNjb3BlZA== IFlFSA== U3R1ZGlv ICoqXw== IHN1cHBlcg== dmVuaXI= aXJlY3RlZA== YXdhcmRz aXNzdWVk cHJudHN0cg== aW5zbg== IGNoZWNrbGlzdA== MjM1Nw== bW92ZVVw bW92ZVJpZ2h0 IGZvdW5kZXJz J10pXQ== IDE4NDA= fX19KA== aWRlbnRpY2Fs IHBybnRzdHI= dWZmbGVz V2Vhaw== cnRk dmlzb3Jz YWZmaW5pdHk= UVVBUkU= bXVsdGlsaW5l QXV0b21hdGlj w6dvcw== IOy2nOugpQ== IFNjYXI= cGF5ZGlyZWt0 IENhcnNvbg== IENhcmJvbg== RU5ET1I= 0LrQvtCy IHNwZWNpYWxpc3Rz IERveWxl U0VSVkU= U09VUkNFUw== TW9kdWxlRXJyb3I= KFsnJQ== dmxt IGFuYWx5c2U= IFtbWw== IHNvdW5kdHJhY2s= Lz4i IEFtaXNo R3JhcGhLZXlz IEludGVyYWN0aXZl 7ZWp IFBlbmluc3VsYQ== wrAu YXJjcHk= IFRlcm1z IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IGRlcml2YXRpb24= IG5hdGlvbmFsbHk= QURET04= IEF2b24= 5Lul5LiL IG1pUk5B IHJvYmJlcnk= IGFwcHJlaGVu IGdseWM= IGNvbnRlbXBvcg== 5p+l55yL IGJsb2Jz U0lHTkVE YmlydGhkYXk= IGNpZ2FyZXR0ZXM= 5pmv 5YWo6YOo IFN0YW5kYXJkcw== IHN0ZXJlbw== 44GX44Gm44GE NDk1Mw== IEphbWll IGN5dG90b3hpYw== Z3Vlc3Nlcw== 67aE IEdyYW1tYXI= ZW1lcmdlbmN5 IHRyb3V2ZXI= Y3J5c3RhbA== dmljdGlt IHByb3hpbWFs IGNhcmRpb215 YmRtdXJyYXk= IEN1cnRpcw== IHZlZ2dpZXM= IGFyYml0cmFyaWx5 Jz8= LHtc Lltdew== ODMx OiQ= QFw= TUFE UGFpbg== UmFuZ2Vz VXQ= Vmlu XF0o YcOx Zm9jdXNlZA== Z21t Z2Nu bmFudHM= b2lkcw== cGl2 cnVzaA== dGVuZA== dm90 dmlpaQ== w6w= 16Q= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== YXRvcw== YWx5c2lz IHBvdHM= IHdpZmk= aWNpw7Nu IG5pbmV0eQ== IGR5ZQ== IGTDrWFz IGxhYw== IGxhbWlu aWRvcg== ICgiIiw= IGdsYW5k IFNTRQ== IEFMQw== aWZvbGRz IHNlYWxz IHNlbWlj IHNld2luZw== X18pOg== IDI3Ng== IFBW IFB1bmo= IE11c2g= IE51cnNpbmc= IEZBSQ== IGFsYmlu Y2xpbmljYWw= IEJvaw== IERG IERlbGl2ZXJ5 JylbOg== IFJNU0U= IFdpemFyZA== IGNvdmV0 IGVsaWdpYmlsaXR5 IGNoaXJhbA== IE93bmVy MDE4Mg== CgkJICAgIA== IGtldA== IGtvcw== IGttYXg= dWRubg== IHVubGluaw== IGFib3J0ZWQ= dHlwZXI= aWFpc29ucw== eXNvbg== IFZ5 IDU0Mw== IEthc2g= dXNlck5hbWU= IHNlcmll MTkxNw== IENoYW5nZWQ= aGVkZGFy d29ya2Vk ZXJubw== MTg3NQ== aXRsZXNz IFFBY3Rpb24= IGRpc3RyYWN0aW9u cHBlbg== IGFtdXNlZA== Q2xpZW50cw== IHN0dWRpb3M= cHJpbw== IENvb3JkaW5hdGU= bGlhYmlsaXR5 IGhlYWRwaG9uZXM= ZHNh OTUz IHJlcG9ydGxhYg== IFNoaW4= IHByb2R1Y3Rpb25z bGlua2Vy Rm9ybWF0cw== Z2VuZXJhdG9ycw== IGxhd3N1aXRz RW50aXRpZXM= IHdlZWtlbmRz IGh1bWlsaQ== w6Nvcw== IHBhc3Nlcg== IHN1Y2Nlc3NvcnM= IGZvdXJjYw== IG1lbm9y IExpc3RWaWV3 IFVTRA== IGFjY2Vzc29yaWVz IHRyZWFz IGNvcnJlY3Rpbmc= Y3J1ZA== ZXJjaXNlcw== b3JkaW5hdG9y bGF1Z2g= IG9mZmVyaW5ncw== IGVuZ2luZWVyZWQ= IEdvZWJi IHByZWZpeGVk IGhhcmI= IEFEQw== IFdlYlNvY2tldA== UXVlcnlzZXQ= IHN0YXJ2aW5n KCdfJyw= c2VsZWN0aW9ucw== U1RBUlRFRA== IHNvZnRlbmVk IHNlZ3VyYW7Dp2E= IHJlY3Rz IEhUTUxQYXJzZXI= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= IFBPU0lY Q29ycA== IGRpbWVuc2lvbmFsaXR5 IG1pc3RyZXNz IGFkanVk IGZsYXNoeQ== INC60LDQug== IEdlbm9tZQ== IEFyY2hpdGVjdA== cmV2aWV3ZWQ= Q2FwaXRhbA== c2VwYXJhYmxl IGh1cnRz IGN1aXNpbmU= QlBpeA== IGdyYXlzY2FsZQ== IGZ1cm5pc2g= IGJvbmRpbmc= IHJlcGxpY2Fz IGdlbnRsZW1lbg== 7ZWY6riw WVhK IFdhdGVycw== SG9va3M= YXN0cm91cw== bWFya2Vyc2l6ZQ== bW9iaWw= IHN1bGZhdGU= b2Jpb2dyYXBoeQ== IFNVUEVS ICd7fSciLg== U3BlYWtpbmc= 576k IHByb21vdGlvbmFs c3RlbGx1bmc= ZGVjb21wb3NpdGlvbg== IENocm9uaWNsZQ== Qm9vdHN0cmFw Y3lsaW5kZXI= UE9MSUNZ c2hvcHBpbmdjYXJ0 VEVDSE5JUVVF Q09MT05JQQ== 6LSj5Lu7 QWx0ZXJNb2RlbE9wdGlvbnM= UVJTVFVW KC8= NTMy NTI4 PCg= Q05hbWU= Q0RBVEE= Q3Jhd2xlcg== RHVu RXVsZXI= SHVy TWFycw== TUlN U05Q VHdlZXQ= WlI= Ym1hdHJpeA== bWFzaA== dGFt dmln tIg= 2Kk= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= ZXJk cmVkZQ== YW5vbA== ZGVjbw== aXNjc2k= IG1hbmdh IHJlbWluaXM= IGhpa2U= dXJnZXI= IGRldG9u IFRpbnk= IElY MDA4MDA= IEN1Yw== cm9taWM= YW1hcA== IDI4MQ== IFBvbQ== IFBkZg== IE1pZ2h0 IE1NQQ== IE1WUA== IEZE IEZBU1Q= IHJSTkE= YXNzdW1pbmc= IGFsbG95 IEJvbGQ= IEJlbmVkaWN0 IERE IERvY2tlcg== JyldKSw= IFJPQg== aW5lbWF0aWM= J10t IEdheg== IildKQ== MDExMg== YXJkaQ== YXBwaWQ= IGphbA== IDM4OQ== IFViZXI= bG93b3JsZA== IEphYg== IHVuY29uZGl0aW9uYWw= IHVucmVhc29uYWJsZQ== IHVwcA== IEtlcw== IGRpc3NvbHV0aW9u IDYwMDA= IHBhcnRpcg== bWF4Yg== IHN1YmRpcmVjdG9yaWVz IENob3c= TEVTUw== TEVURUQ= IG9mZmVuZGVk MTg2NQ== IGZlYXRoZXI= dmlld3BvcnQ= IHphcA== bm9pc3k= IENvbnZlcnNlbHk= bXlmaWxl WzosLQ== dm9sdg== IFsnKg== cmFuY2Vz J10pKTo= IHBsYXlvZmZz IHN1cnBsdXM= 0LXQsg== QURPUg== IGVzdMOhbg== fSkiLg== IGNhcm90 OTUx Q29W ZnJhY3Rpb25z cG9sYXRl IGxvY2FsdGltZQ== YXBzaW5n RGljdFJlYWRlcg== IG1vY2tpbmc= ZG90dGVk UGVybQ== IGludm9raW5n NTgx cmFkYXM= IGV4cGxvcmVy cGNiaQ== cmV2aXNl IEZydWl0 XXt9XXt9 IGJsYWNrbGlzdA== IGZvcmVhY2g= Rk9P Q2xpZW50UmF3UmVzcG9uc2U= ZWZmb3J0 QXJnZW50 dHJpYW5nbGVz dHdlbnR5 SW5kaWE= ZXh0cmFjdGVk IOaooQ== cGljaW91cw== cmlmaWNhdGlvbg== IHNob3RndW4= IE1hY3Jv 5o6o U2hvd01vZGFs IHRlbmRlbmNpZXM= c21hbGxjYXBz 0LXRgNCw IG5lcnY= RHJvcGJveA== IHRyaWdyYW1z IHN1ZmZpeGVz QW5nbGVz b2NjdXJyZW5jZQ== UElQRUw= IHJlc29sdmluZw== IEZvcnR1bmU= TW92ZW1lbnQ= cnhu U1dDb3Vw IHN0aXJyZWQ= IFBvdGVudGlhbA== IFBvdGF0b2Vz 5pyA5bCP TmFU IFBhY2tldA== IG1hZHJl IERyYXdpbmc= 15nXnQ== IEdhTg== 5b6X5Yiw IFF1YW50aXR5 IGFzdHJvbm9teQ== R21H RXhlY3V0aW9uRXJyb3I= IHRhbmdpYmxl V2Fsa2Vy Tk9OU0dNTA== 4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ IGRlZm9ybWF0aW9u Iz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ== IGxhcnZhZQ== IGlsbGVnYWxseQ== IEhlYXZ5d2VpZ2h0 IGNpZmFy Q0FURUdPUlk= RFZCRnJvbnRlbmRQYXJhbWV0ZXJz IEdvZWJiZWxz KSgn KT49 OTM4 RmlzaA== SldU TW90aHM= Um9zZQ== UnVieQ== VmlydA== WlA= Wlk= Wmk= Y2Fj bGFicw== bml0 cHVtcA== cGNw eGF0dHI= c2V2ZXJl IHRoZWU= ZGVxdWU= IHBiYXI= IHNwdXQ= IHPDpA== IHdhc3Q= IHdhdmluZw== IGludGVzdA== IG5tYXA= IGTDpHI= ICcoKA== ICIpWw== IENp IENvcms= aW50cm9kdQ== IHZ1 IHZhY2hpbmU= IHZveGVs cXVpdGU= bmFtZXNlcnZlcnM= IHJu IEJhemFhcg== IERFTlY= IFJhbGx5 IExhaw== aWxsYWM= YXN0YXRpbg== IDM3MA== cGhyYXNlcw== IHVuY29u IHVucXVvdGU= cG9ydGNoYW5uZWw= IGRvY2g= aWVudGVz Y2hlZXNl IEtvaA== IHNhaWxlZA== IG9ic2Vzc2lvbg== aW5pdHM= IHNjb3V0 JycpLA== IG1hbmU= ZWZ1bA== KFtdKSw= IFFWQm94TGF5b3V0 IHJlZ3VsYXRlcw== YmFja29mZg== IG1pbnZhbA== IHRyYXBz cmVncmVzc29y IHB5Yw== aW5za2k= INCg MTAwNDk1Mw== IHdvcmRMaXN0 VG9vbnM= Q09WSUQ= bW9uaXRvcnM= IHZpZXdwb2ludA== fSkkLg== IERlY2s= QWxhbg== Y29udGVudFR5cGU= TE9PUA== VXNlcklE ZXhlY3V0 IElOVkFMSUQ= MDg4 bW9kaWZpZXJz Q29uZmlnRmlsZQ== QmFzZVRlc3RDYXNl IGFjY291bnRhYmxl IGluc3VyZWQ= IGNybA== IEZsdQ== aGVudGljYXRvcg== IGFubmlo YW5lbGE= XSsnLA== IENvcm5lcg== enp6eg== 5L2V Rmx1eA== IGJlaGF2ZXM= IHNjcmVlbmVk IGRldGVybWluYW50 5Zu0 IGluY3VycmVk RmFjdG9ycw== RmFjdFN0cnVjdA== IHByb2dyZXNzYmFy 0LLQtdGC aHJ1c2g= IFRyYWRpbmc= UkVHSU9O T3JkZXJlZA== Z2F0ZXdheXM= PXt9Jg== 55uY IHNxdWly 5pe25YCZ IFZBTElE VW5pdFR5cGVJZA== IEp1ZGdtZW50 SW52aXRl REVWSUNFUw== IFNsYXY= QVVESU8= YXR0cmlicw== IHBpdGZhbGw= IG5vbWluZWU= MDY0OA== 5pel5b+X IGNvbmNlZGVk Q2xlYW5pbmc= ZGV2ZWxvcGVycw== IFRlbGVncmFwaA== IGVtaXR0aW5n IE5vcm1hbGx5 RXZhbHVhdG9y IGRlc2VydGVk IHNhYm90 Rm9vdGVy IHN1YnN0aXR1dGlvbnM= IENvbnNpZGVyaW5n IGVtYmFycmFzc21lbnQ= ZnJvemVuc2V0 IHJlbGlldmU= INGN0LvQtdC80LXQvdGC 4paI4paI4pWU IGhhcm1vbmlj bmlsUmVhc29u IGZlbG9ueQ== 4qyc4qyc4qyc4qyc IGV4dHJlbWl0eQ== IGRpc2FkdmFudGFnZXM= YW5hbG9ndWU= IG1lbGFub21h 4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU IGFsbGVyZGluZ3M= IHN1bW1hdGlvbg== YWdyYWZpY2E= IGV2YWN1YXRpb24= Qm9udXM= U0VDT05E IGRlbW9saXNoZWQ= 5pyN5Yqh5Zmo dXB5dGVy bmVhbG1jYg== IHBvbGljZW1hbg== MzMzMzMzMzMzMzMzMzMzMzE= IHVudmVpbGVk IFNxdWFkcm9u IEdlb2ZmcmV5 MDA5NTc4Mg== IHNjaGl6b3BocmVu JSk7 NzEw NzMw ODE1 OTQ1 PiIu QnVybg== RFc= RG91Zw== Rk9M RklMTA== TWlzbWF0Y2g= U2xvdmVu Vno= XCIp YmFrZQ== Y2Rz Y2NvbGk= ZG91Yg== ZmlnaHRpbmc= aWVuZG8= am9l bWF0ZXI= cGFuZA== cmZpbGU= c2FsbA== dWF2 dmV0bw== eyw= IAogICAgICAgICAgICAgICAgICAgICAgICAg aW51cw== cmV2ZQ== b3Jubw== ZGVjb21wcmVzcw== aW5nZWQ= aXNpdGU= IGluY29tcGV0 IGJpc2U= ZXNzZXM= IG7DpQ== IG50ZnM= dXJj IGRlYmU= Y2hyb24= IFRldA== IFR1bA== KCknLA== IEFGTA== IENz dGVh IHZib3g= IFBEQg== IFBlbmRpbmc= IE5haw== IFsu IFs8 IHJkZg== Y2xpbmU= b3JldGljYWw= IEJMQVNU IGFuaXNvdA== ZXdhcmU= IERJUg== IERpbGxvbg== IExhZGVu KCJfXw== IGVsaWM= IGt2bQ== IGttZWFucw== IEpldHM= IGdldFRvb2w= IHhlbg== IGFkaGVzaW9u Y29lZmZpY2llbnQ= IDQ0NA== cG9p SW5mbA== dGVzdHNldA== dXNlcnByb2ZpbGU= IyMjIyMjIyMjIyMjIyMjIyMjIw== c3Bpcml0 UkVQ UkVOVA== IFN0dWI= IHRyZw== U3RhYmxl QVJST1c= IHNwaW5z aXRzeW4= cmVmY291bnQ= IFJleQ== w6lyaWU= IGF0dHJhY3Rpb25z U2V0TmFtZQ== IFdlYXBvbg== cmVjb3JkZWQ= Qm9zcw== dHJhaXRz TVBFTQ== IHNvbGl0YXJ5 UE9MTA== ZXJvbw== 0LjQtA== IFNoYWxs IFNoYWtl IENsaXA= w6Fy TGVha3M= IGluaXRpYWxpemVz IGZyaW5nZQ== IFxbXFw= Q09OQ1VSUkVOVA== Q09OU09MRQ== QmFzZUNvbW1hbmQ= 4YC7 YWxlc2Nl IHB1Ymxpc2hlcw== Yml0cmFyeQ== YWNjZWw= dWthcw== IGJhc2ls IE1hcnZlbGw= RFJJVkU= cHJlZml4bGVu bW1hcw== IEZlZWw= 0LrQvg== IGZsb3dlZA== IGFsaWdubWVudHM= IGJhbGFuY2luZw== dW5kZXJsYW5k IGZlbW9yYWw= RnVuY3Rpb25hbA== Ym9uZHM= IGRvdXRl IE1vdmVk IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= IGZvcmVpZ25lcnM= d2Fsa2luZw== IHRyaWdnZXJpbmc= ZGVjbGFyZWQ= MDA1OTM= INGF dG9rZXM= TElORUFS IGFtcGxpZmllZA== IHVuc3VyZQ== IEFjY291bnRz dGx2 IExpbmtz IGFjYWRlbWljcw== IENvcnBvcmF0ZQ== ZXJnaWM= IFNpbmdsZXM= IEFycmF5TGlzdA== MDA4MzU= IHN1cHBsZW1lbnRz IHF1b3RpZW50 IHNpbmtpbmc= bnZtZQ== IGRpc3R1cmJhbmNlcw== IHN0YW1wcw== IEJvbHQ= ZXRoZXJ0eXBl Q0VMRVJZ IEFzc29jaWF0ZXM= IHN5bmNocm9uaXphdGlvbg== IEZhY2lsaXR5 Zm9yZWlnbmtleQ== am91cm5hbHM= IG1hY3JvcGhhZ2U= IEJhcnRvbg== IEVPRkVycm9y IFR1bmlz IGNhdGFzdHJvcGhpYw== U3BsaW5lTVBFTQ== IOW8gA== ZmFzaGlvbmVk IHdhcnRpbWU= c2VsbHNjaGFmdA== Nzc3MjE1 S0xNTk9Q IHVucHJlZGljdGFibGU= IFJFUVVJUkVE IEhvb2tl IHVubGF3ZnVs NjY2NjY2NjY2NjY2NjY2NjM= aHJ1c2hjaGV2 U3BsaW5lTVBFTW9k KHt9 KCIsIg== LCkpKQ== NTg2 Njk3 ODM1 OTY1 RGVuc2l0eQ== RWg= SGg= S2Fs S1ZN TmVw TmVlZGVk VmV0bw== YWZmZWN0 ZmFjaW5n a21s cGFibGU= cWU= cWNk dGVucw== emlu 0K8= 15M= DQ0KICAgICAgICAN IOeUqA== IMWf aW5jb21wbGV0ZQ== IGFob3Jh cmV2ZXJ0 YXRjaGU= c3RlbGxhcg== aXR1cmVz bGVzaW9u IHNvcA== IHNjaG4= aW9uYQ== YXNzZW1i ZWxtbw== IFRhbno= dWxhbnQ= IFNBVA== IFNWQw== IFBpbmU= IFBBVA== IFByZWQ= IE1lcmV6aGtvdnNreQ== ZW5kRGF0ZQ== IEZvbGQ= IEZ1aw== IEJpbGQ= ZXJlZmVyZW5jZQ== IG9yY2hlc3RyYQ== IExpcw== cmVzbw== IEV2YW4= YXN0aW4= bWFm IGpueE90bg== IHVubQ== IDQxNQ== IFZpc3Rh Y2hlbGxlcw== aXhv dGltZWQ= IHN1YnNjcmlwdGlvbnM= Q2hpcA== IG9mZmVuc2Vz Ynl0ZXI= IG1pbnV0b3M= IGV4dGluY3Q= IG1heFJlc3VsdHM= 4oCdKS4= IFByb2dyZXNzaXZl Y3JlYXRlVGV4dE5vZGU= cGFzc2l2ZQ== IHJlZmluZW1lbnQ= IFN0cmljdA== IFN0cmFuZ2U= 0LvRjg== TGV0dGVycw== TmV3dG9u IGNpcmNhZGlhbg== IHNwZWNpYWx0eQ== IGJlbmlnbg== IERFRg== ID8/Pw== U0hBUkVE IHBhcGVyd29yaw== ZmNu IENPVU4= IGRldGVjdGFibGU= YWdncmVnYXRpb24= KHsnXw== IGhhcmRlc3Q= IEVkd2lu T3ZlcmxhcA== IG1hcnJpYWdlcw== 572q IGFic3BhdGg= VG9wbw== IHJlY3RhbmdsZXM= ICglLg== U1lO 5LiN5ZCM IGluZ2Vu 6rCS bHVjY2k= IGh5ZHJvcGg= eXl5 QW55dGhpbmc= IEFyY2hiaXNob3A= IHN5bm9ueW0= U3VydmV5 IGZhdm9ycw== SGlzdG9ncmFt IHZlbm9t IGh1cnJpY2FuZQ== IE9mZmljZXJz IOq3uA== YWxidW1z IHRoZW9yZXRpY2FsbHk= SEhISA== IHB1bXBz TXVsdGlwbGVDaG9pY2VGaWVsZA== VE9PTFNFVA== IGFkdm9jYWN5 IGNvcnRpY2Fs QWRhbU9wdGltaXplcg== IOqwkg== IGZyaWdodGVuaW5n IGludmFyaWFibHk= IEFuaW1hbHM= RGVhdGhz IEdlbmV2YQ== IG1vbm9jbG9uYWw= IFBhZ2luYXRvcg== IGtpbG9tZXRyZXM= IENZSw== IE11bmljaXBhbGl0eQ== IHNldWxlbWVudA== IGFjY3VzYXRpb25z cHlxdFNsb3Q= 5o+P6L+w Q3JpdGVyaWE= IHVudGVyc2NoaWVk IGRvcnNhbA== U1RSQUlOVA== UEFERElORw== TWl0Y2hN IHJlbm93bmVk Kyk/ LiIi Njc3 NzAwMA== ODgw ODk1OA== OkA= QWRh Q2k= Q29kZXI= Q0FSRA== RHR5cGU= R3JhbnQ= SG9zcGl0YWw= U2Fk VGltaW5n VHJlYXRtZW50 ZG9rbw== aGly aW9s bml0cm8= d2FzdGU= eHJlZg== emw= z4E= 86A= IAogICAgICAgICAgICAgIA== c3Rha2U= c3RyYWlnaHQ= bWVjaGFu IGJzdA== IGJvdXI= IGJpbnRyYXk= IGhhdHM= IGzDpQ== b3Rhbmc= IGV3 aWdudHk= cGVhY2U= IHZwYw== IDI5Nw== IDI2MQ== IGRlZmVuc2Vz IFBpZg== IE1vbGVjdWxhcg== IFstLQ== IHJzcmM= IFJldw== IExw IEhhbGxvd2Vlbg== b2PDqg== IEV2YWw= aXBv aXBhZGRyZXNz IHJlc3Bl IHNoYXJkcw== IGphcnM= dHJr cGhkbQ== IHJvcw== IHJhYQ== IGNvbXBz aW5raQ== c3Bpbm5lcg== IGRpc3NhdGlzZg== IGhlcmI= MTkxNg== MTkzNg== IGludGVyY2hhbmdl IG92ZXJzaWdodA== Q2hhbWJlcg== IG1veA== IDc4NA== IHpo RXhwYXQ= RXhwbGFuYXRpb24= ZXllcw== U2V0TG9n Y2VudHJpYw== IGFjY2VsZXJhdGU= JywnLw== IHByaW1h IENvbnZlcnNpb24= b3V0cHV0UGF0aA== IFByb3Rv T2JzZXJ2YWJsZQ== Y2xpZW50ZQ== U2VnbWVudHM= IG9wZXJhbmRz IGVzdGFiYQ== c3dhbmE= dHJhY2luZw== Y2FsbGluZw== QWxwaGFiZXQ= 0YLQvtGA IHNvbG4= IGdhbWVTdGF0ZQ== IGVtcGxveXM= IHJlZnVnZWU= Z3JpbmQ= ZnJhZ21lbnRz IENsYXVzZQ== 44K4 U2h1dGRvd24= dmlzYQ== IGFudGlxdQ== Q09OVg== c3RhbmRhbG9uZQ== QU1P IFRlYW1z YWZmbGU= IFVzZXJGYWN0b3J5 c2FtcGxlcmF0ZQ== IGRlbm4= IGRpZXNlbQ== IGxpa2luZw== aW5pdGlhbGl6ZXJz NTgy aGFpcmVk LionLA== IERhdGFTb3VyY2U= IGdlb2dyYXBoeQ== IGVtdWxz IG1vcmJpZGl0eQ== ZnVsbHBhdGg= IEVuY3J5cHQ= IE5ldmlsbGU= U2VydmljZVJlZmVyZW5jZQ== DQoNCiAg IGZpcmVhcm1z ZGVzY3JpYmVk YWxsZWxz 5oiP IGxpdmVzdG9jaw== bWVtaW8= IFJFQUw= IHBrZ3M= IExvZ2lj KCclLg== TWV0aG9kVHlwZQ== MTAxMA== UmVzb3VyY2VXaXRo TW9ubw== 6L6R 6YeH IEJlcms= IOab QUFBQUE= IFdvcmtzaG9w UGVhaw== IGV4cGxvaXRhdGlvbg== IGRyaXZld2F5 wrAs IHBsZWFk ZWxmdGg= 5Lmw TWF5YQ== IHVsdHJhc29u IHRyaXBsZXM= 56eR TkNZ IHVuZXZlbg== IFpldXM= IEZpbmlzaA== IEF2cmls IEJheWVz bG9jYXRpb25zSWQ= IHN0cmFpbmVk IExvdWlzdmlsbGU= IHJlbnRlZA== TG9naW5SZXF1aXJlZE1peGlu IGN1ZW50YQ== Qk1lc2g= 5L2c5Li6 IGRlZmljaWVuY2llcw== Rk9STUFUUw== aHlwZXJ2aXNvcg== YXBwb2ludG1lbnQ= 5ZGo IEJ1bGxk 6Ieq5bex IHhibWNwbHVnaW4= IGtleWJvYXJkcw== ZGVhZGxpbmU= SGVhbHRoQ2hlY2s= U0lHSU5U IFJldm9sdXRpb25hcnk= IGJvcnJvd2luZw== ICc+Jzo= Q0FMTEJBQ0s= 4paI4paI4paI4paI4paI4paI4paI4paI IHZpZ2ls Y2hlbXF0 IEV0aGlvcA== IEZlbGxvd3NoaXA= w6RjaHN0 IERFU0NSSVBUSU9O c2V0RnJhbWVTaGFkb3c= UmVjZW50bHk= cHJpdmlsZWdlcw== IEdhcmRlbnM= IEFsZXhhbmRyaWE= IGVzcGVjaWFs IGluZGVmaW5pdGVseQ== 5qOA5p+l Y29uc3VtaW5n 6K+E6K66 UmVwZWF0ZWQ= IEV1Z2VuZQ== IHp3aXNjaGVu IE9waW5pb24= IGJpYWxpeA== NDc3 NDYz Njk0 ODMw Q2F0YWw= Rml0eg== RmluZ2VycHJpbnQ= S1A= THN0 TnV0 VGFu Vm90ZQ== WU8= WWU= XyIp Ym5k Ymxvdw== Y291cA== ZFA= a29s c1lX IHRlbnNpb25z aGVudA== YXJkZQ== IHByZXNzZXM= IHBleHBlY3Q= aW9uaQ== IGluZmVyZW5jZXM= IGJvcm91Z2g= IG1hcnM= YXNjaQ== IGxhdHM= IFR1Yw== dWxvdXNseQ== IFNlc3Npb25z IHN0YWdu IEljb24= IEF1bnQ= IEFDTA== IEF6ZXJiYWk= IENvZA== dW5pZGFk IE11bWJhaQ== IGFzcGFydGF0ZQ== IHJ1bGVycw== IEhpdHM= c2V0c3RhdGU= IEdJ IEdpbGxl aWxsaQ== IFRoZW9kb3Jl IHNoYW0= aXJlbWVudA== IDMwNg== ZXBoeQ== PSIrKA== IEppbg== IHByZXRlbg== IGNvbnRlbg== Y29lcw== IHVuc2Vy IHVuY29uc3RpdHV0aW9uYWw= Y2Vzc2lvbnM= Z2Vvcw== IEtub3g= IGxvYWY= IHBhcmFu IHJhaXNvbg== T05FUw== cmVhZG1l IGNvbG91cmVk IGhlcm9pbg== IHNjb3Ju IHN1aXRlcw== bmV1cmFs d29yZGxpc3Q= IHN1Ym1hcmluZQ== aXNoYQ== IGtleWVk ZW5jaQ== c3Viag== SUNMRQ== IHNlZWRlZA== IGF0dGVudA== ZmVldA== IGFjY3VzdG9tZWQ= IGhhbmRpbmc= U3Ryb25n IDE4Nzc= VGltZWxpbmU= YWhsZW4= Ki0qLQ== IHNsYWI= IGRvY3V0aWxz c2tsZWFybg== Z3NuYXBzaG90 ZW5lZw== IFNlZw== Vmlld2xldA== 44Km 44OW IEJvb3N0 Zml0dGVk dWtpcw== IElEQQ== IEVuY29kZXI= YWRkcmluZm8= DQoNCg0KDQoN IHRyb3BoeQ== dGljYXM= IERvZQ== VHJhZmZpYw== IGltbWlncmFudA== R0dH UmVmQ291bnQ= IE9wZW5pbmc= 5by5 IGNvbGxlY3Rpdg== b3JnYW5pemVy U1FMaXRl IG9pbHM= IGludGVycHJldGluZw== IGZlYXJmdWw= KCIiKS4= 5pWw5o2u6ZuG 5YCL 5bed cG9seWdvbnM= 6aG6 Y2xpcGJvYXJk UHJvdmlkZQ== KCcsJyld IEplZmZyZXk= Y21wY3Q= IEZyZWVtYW4= RGVzY3JpYmU= c2Vla2luZw== IGRlYnRvcg== IG51dHJpdGlvbmFs IGNyYWNrZXJz Q2xlYW5lcg== IENQVXM= SXNvVkw= U1BFQw== bW92YWJsZQ== IGRlZmVjdGl2ZQ== QmV0dHk= IGRpbHV0ZWQ= 5rCR IE11aGFtbWFk TUVSR0U= IGFzaG9yZQ== YW15Y2lu U3lzRm9udA== IHJlY3J1aXRpbmc= IFN1cmVseQ== IENvcGVybg== IGxvYmJ5aW5n IFBhZ2luYXRpb24= IGFzc2ltaWxhdGlvbg== c2NyYXBlZA== IEFkdmVudHVyZXM= IFRXTw== IHZvbGNhbmlj 7ZaJ IEJyb3ducw== TVVMVEk= IHJhZ2dlZA== IGphdmF4 6K+m5oOF bWV0aHlscA== Q1JZUFQ= RmlubmlzaA== IGxvb3NlbHk= JDs= LCcn OTAx QUFH Q3J5cHQ= SUVS Tng= UElM U0o= VkFSQ0hBUg== V1hZWg== YnJlZA== ZWluc3Vt ano= bml4 c2ll c2F1 c21hbg== dno= 6Ks= IGVyeQ== IF57XA== IOmAmui/hw== aW5lcnM= IHRscw== IGFwZXJ0dXJl c3Rvcmllcw== IGNhZg== IHdha2luZw== IGluc2lnbg== IGluZXhwZW5zaXZl IGJhcnQ= IGJ1ZHM= IG51ZA== IHRvcHBpbmc= IGx1bXA= IGx1bWJlcg== cmFpdHM= Jyxb IGdjYw== IFNweQ== IFNvbWVy IEFpZA== IEFjaGll aXRoeQ== KSwkJA== dW5pZmllZA== dW5pbnN0YWxs YW1pbnM= IE5lc3RlZA== IGl0aw== IEZvcmc= IHdoaXRlbGlzdA== IER1ZA== ZW1vdGlvbg== b2NhZG8= IEdhbmQ= IEfDtg== IEVnZw== IGJ5ZQ== YXJlbA== IG91dHJv IG5ldQ== IDU4Nw== b3VzYW5kcw== dmVseW4= U1RT YXNzZXJ0TGVzcw== IHBlcmNl cHJpbnRhYmxl cHljaGVtcXQ= bmVtZW50 MTkxMg== MTkyMw== MTkwNQ== VGh1bWJuYWls REVU IG1heGk= YmVoaW5k IEFyaXRobWV0aWM= IEFyc2VuYWw= 0LDRjg== IGVzdGF0ZXM= IGNlbGxhcg== TW9kZWxQcm9wZXJ0eU1hbmFnZXI= VVNS IFNodXQ= IExlYmFub24= IHBhcmVudGhlc2Vz ZGVidWdnZXI= IDI1OA== w6R0eg== REJGQQ== c2VsZWN0YWJsZQ== c3Zy IExpc3RlZA== IFVzZXJTZXJpYWxpemVy Yml0Y29pbg== IG1hZ2lzdHI= IE1hcmluZXM= IExvYWRz Kysr IG1hdHRlcmVk TWVldA== MTI4MTI4MA== IGlkeHM= Z3VpZGVk IGFuYWx5dGljcw== T3BlbmVk IGNvb3JkaW5hdGVk IEludGVydmlldw== IGNpdGF0aW9ucw== IHRvdXJpc20= b215Y2lu IHByaXZhdA== am95c3RpY2s= IGFkanV2 IGxhdW5jaHBhZA== INC+0LQ= b2NjdXM= IFByaW50aW5n IGluY29ycG9yYXRpb24= IE1vbnRhbmE= IE1pbHdhdWtlZQ== 4LeS UGxhY2Vob2xkZXI= ZXhwcmVzc2luZw== IEdMVVQ= IHN0aWZmbmVzcw== IEVmZmVjdHM= Y2FsY3VsYXRvcg== 5rOo5oSP IHJldm9sdA== 7IOJ IG1lbGFuY2g= IHNvdmVyZWlnbnR5 WFhYWFhYWFhYWFhYWFhYWA== IHRvdWNoZG93bnM= U3BlY3RydW0= cGhldXM= IGdsYWNpZXI= IHRyYWJham8= VGVzdEFsbEV4dGVuc2lvbnM= V2l0aGRyYXdhbA== IHVuZGVzaXJhYmxl IGJvbWJhcmRtZW50 REFUQVNFVA== R09PR0xF IEZlcmd1c29u b3BoYWdlYWw= IGRlcHJpdmF0aW9u ITw= LCQ= PiQ= Pic6 QmFza2V0 R2F0aGVy R1JBTg== SHc= TGlxdWlk UHVw U2ll V08= Xzw= Zmljbw== Z2Fwcw== Z3Jvd24= a1o= bnVnZQ== cHE= dGlsdA== dWVuY2lh fC4= IGNpZGVy ZGVhdXg= IHBhZGQ= IG5lZA== IG5pZA== IGRlcm4= IGlvdGE= ICI9Ig== YWRpbw== YWRvcHRpb24= IGdm IFNhaA== MDA3NA== MDA0Nw== ICMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= IENpdGllcw== IDI3NA== IE1vYg== IE5leA== IEZz IEZheQ== IEZyYWdl KioiLA== IEJFVA== IEJyaXM= IEJhcnJpZXI= b3Njb3B5 IG9yZGVu IEx1bmQ= KCIuIiw= IFdBUw== YWNvY2s= IHJlc2lkZXM= aW5kcmU= ZmZl ZmZzZXQ= IHdlaXQ= IGFyYW5nZQ== IHZhbGVuY2U= IGVubGFyZ2U= IHByZXNlcnZlcw== IGFkaGVyZQ== YWRkVG8= IHJvb2tpZQ== IGFieQ== IEtpbmRlcg== IG9ic2Vzcw== U1R5cGU= UkVDRQ== XS5b IFN0dXR0Z2FydA== IFlvdXR1YmU= IHN1YmZvbGRlcg== Q2hhbGxlbmdl Il0q IHVzZWNvbHM= UHJvb2Y= MTUwNQ== MTgwMDA= IGVuZFRpbWU= SUNJ IGJldHM= aWtlZA== IHBoYWc= YmVlcg== YW55d2hlcmU= c2VhcmNoc29ydGVk c2dvdGFuZw== QUNDVA== R2V0TmV4dA== IEFsZXJ0 IGNvbnN0cmFpbg== IHByaW5jZXNz IGF4aWFs TW9kZWxWaWV3U2V0 IGVtcHJlc2E= IFNoZWZmaWVsZA== Y29ybw== SU1P IHNlbnRyeQ== 44OR IGJvb2tpbmc= U3VibmV0 IGdlbnB5 IGlkZW9sb2dpY2Fs ODYy RGVmbg== IGFjY2Vzc2lvbg== dXN0cmF0aW9u IElERA== Z3Bn c2luZ3VsYXI= dmVjdG9yaXplcg== IGNsYWltYW50 IGNvbW1pdG1lbnRz IEV1cm9wZWFucw== UFJJTUFSWQ== TmVhcmVzdA== IFJlY29nbml0aW9u IE1hcmtlcg== IG5hdGlvbmFsaXN0 IHByZXZhaWxpbmc= IHNwZWN0YWNsZQ== aW5uZXJIVE1M IGJ1cm50 SVRFTVM= 8J+S 8J+a IGJ1cm5z IHN1ZmZlcnM= c3Rvbmlhbg== IEVuZHBvaW50 IEp1ZGdlcw== aW1iYWJ3ZQ== IGFkb3B0aW5n IEdvbGRtYW4= bnV0c29u IHRocmlsbGVk IHNhbmR3aWNoZXM= IHRvbW9ncmFwaHk= RnJlZUNBRA== c2Nyb2xsYmFy ZmFjZXQ= IG1hZG5lc3M= IHNpY2tuZXNz IG1hbmlwdWxhdGVk bWZjYw== Ym91cmc= IHN1cHBsZW1lbnRhdGlvbg== IGVzY2FwZXM= IFRoZXJpYXVsdA== IGFudGljaXBhdGU= aW5oZXJpdGFuY2U= RW1iZWRkZWQ= IFN0cmVhbWluZw== VW5zaWduZWQ= U2F0ZWxsaXRl IEJ1cm5z YWNjdW11bGF0ZQ== R3NVdGls b3NleHVhbGl0eQ== U3RhbXBlZA== IHN1bGZ1cg== IFdvcmNlc3RlcnNoaXJl IHPDs2xv QWx0ZXJuYXRpdmU= SXNyYWVsaQ== IEt1aG4= dWxvc2lz UGFnaW5hdGlvbg== IHRocm9tYg== IE1FVEhPRA== IFZlcm5vbg== SGFydmVzdGluZw== IFNob290aW5n IGNocm9tYXRvZ3JhcGh5 IGFydGhyb3Bs IENvbnNlbGhv c2dvdGFuZ2Nv NTY0 OTI0 PSQo RHVw SG91cnM= Smxj TEFZ TUVT TUFDSElORQ== UGlsZQ== VHJhcA== VGFicw== VlBP XCM= YC4iIiI= YW1wbA== Y3VsdHVyZQ== ZFo= aGR1 aWF0aXZl ang= amluZw== a3g= cmlzaA== c3VmZg== dmRvdHM= d2FuZGE= eGVu e3w= 16o= 6rQ= 64yA IGFtbA== cmVjcw== YXRs aGVhdGluZw== aGV1cmlzdGlj aXRhdGluZw== IGJhcHQ= IGJ1ZGR5 IGJpZGRpbmc= IG1scA== IHRvb250b3du ZW50aW4= IGxuZw== YWR1bHQ= Y2hvd24= YXRlbWFs dmVydGU= cml2ZWQ= IElB IElR IENlcA== IENvbG9nbmU= aXJx IHNlbWFuYQ== IE11bQ== IE5pY2U= IEZY IEZDQw== Z2V0VmFy IEJvcmU= IEJlbHQ= b3Njb3Bl IERpZXQ= IExvbg== IExvcmVu IEhpZXI= IEhvbGw= c2V0dGE= b3V0bmFtZQ== IiknLA== IE9DVA== MDEwNQ== IGphd3M= IHdlaWw= IEpK IDQ4OA== IFZQ IEtlcm4= IGxvc2Vy IGNvbG9ybWFw aW5rZXI= ZW5zYWJsZQ== IHBlcmk= c3Bpcg== bnVtYg== YXJjaHM= aWZpY2Fkb3I= d29rZQ== IHJlY3k= UHJvc3BlY3Q= IGxpbmVhZ2Vz IGVuZGluZ3M= IGVuZGFuZ2VyZWQ= IGJhY2t1cHM= w6lyaQ== JywnKw== IEFyY2hlcg== IGRlY2lk IHJldGFpbmluZw== dHJhaWxlcnM= IHBvc3R3YXI= IHN1cGVyZmljaWFs bGluZ3Rvbg== Rm9ybVdpbmRvdw== IGJydXNoZWQ= IGNoYW5nZXNldA== IEFsbGFu bGluaGE= cmV0dGU= IGRpc2NvdXJzZQ== Z2VzdGVy QXNzZW1ibGVy QW5uZQ== Q0xD IHVuaXRhcnk= aXNreQ== IFN1cHA= IGFpcnBsYW5l IGFyY2hpdmVk IE1jQ2xlbGw= cGFkaWM= IEJhcm9xdWU= PS1c ZXZpdHk= IGNvbnN0cnVjdGl2ZQ== c3RlYW0= IGJyb2FkYmFuZA== IHNoYXJlaG9sZGVycw== c3Vhcmlv IGxpdGVyYWN5 IFdvcmtmbG93 IGV4cGxvcmVz IGV4cGxvaXRlZA== IG1hY3Jvcw== 5b6M dGlja2V0cw== IHdlYWtseQ== 0LXRgtC+0LQ= IEFuZ2xpY2Fu IGZpYnJvc2lz IHNodXR0aW5n Y2xvY2t3aXNl IGh5cGVycGFyYW1ldGVycw== IGJlc29pbg== R2Vub21l bmFtZWRXaW5kb3c= cmF0dWxhdGlvbnM= IHN5bmFwc2U= IGNsb2Nrd2lzZQ== IEFjdGlvbk1hcA== IGNoaWVmbHk= IGltcGxpY2F0aW9u QVBQRU5E RGlhcmllcw== Q2FwdGFpbg== IGhvb2tlZA== eEZE c3R1ZGllcw== IGljaQ== IG51Y2xlaWM= R2VydHJ1ZGU= IFNpbGljb24= XFtbQA== IG1hbmlmZXN0YXRpb24= IHJlcGxpY2F0ZXM= IGpldHp0 IHJlYWN0ZWQ= 5YWz6ZSu aXNsaWNl Q0xPVUQ= IFVuaWNvZGVEZWNvZGVFcnJvcg== IHR1cmJpbmVz IGNvbXByZXNzb3I= IGludHJpbnNpY3M= IO2VqOyImA== IGVtYmFycmFzc2luZw== cG9uc29yZWQ= RXhwZXJpbWVudGFs IEJydW5v IFBoaWxpcHBpbmU= IGFub21hbG91cw== IG5lYXRseQ== UHJvbWlzZQ== ZG9yZg== IEJ1ZGRo IEVtYmVkZGluZw== SUpLTE1OT1A= IEZpdHpnZXJhbGQ= IGFudGFnb25pc3Q= YW5ub3VuY2VtZW50 IHBhcnNsZXk= c2ltcGxpZnk= IGJ1cmVhdWNy 6LOH c3Vkb2t1 IEltYWdpbmU= VUxBVElPTkRSQVc= UHJpdmlsZWdl 6Zai5pWw YWRlY2ltYWw= IGluZmFyY3Rpb24= Iig/ KSIu LiddIiw= NzM2 QmlsbHk= SGM= S28= Um91dGVz U1VT U2x5RA== V0VFSw== Xiw= ZnVzZWQ= bmlt cHVyY2g= cGlwZWxpbmVz dG9wbGV2ZWw= d2VkZ2U= d2FsZA== 5qo= 6JE= aW5jcmVhc2luZw== cmVwZXQ= YXRoZWQ= IGNyYWQ= IHBva2Vy IGJlcnQ= b3VsbGk= IG1ncg== IHJld3JpdHRlbg== Y3RvbXk= YXNn ZW50aWVz IGxpb25z IGZvcmFt YWd1YQ== IFNlbnNl IEFTRQ== IENvaW4= IHNlcHQ= IHNlZ3Vpcg== X19bIg== IHllbGxpbmc= IDI3Mg== IE1peQ== IGFzw60= IEJSTw== IGV4ZW1wdA== IExhbXA= IExhenk= c2V0Q2hlY2s= ZmZtcGVn IE9UUA== IGtlbA== ZXhjZXNz a2V5cGFpcg== IGFyZHVpbm8= IFwp IGFkcmVu b25nZQ== IDQ5NQ== IHJhZ2luZw== IHJhcGVk IHNvZmE= IGRpc2FzdHJvdXM= IDY2Nw== IHN1cHBsZW1lbnRhcnk= IGtubg== IHBlZXJlZA== IGVuZGZvcg== IGZsYXdlZA== IHJlZ3VsYXRvcnM= IGF0dHJpYnV0 IGV4dGluZ3Vpc2hlZA== U2V0TWFya2Vy IHNpZ251cA== Q2xp cmVsYXg= IDE4ODc= IDE4ODE= IGVzY29s IiwiLS0= ZXJyY2hlY2s= TVBP dWZmeQ== MDIxNQ== YGA6 VXNlck1hbmFnZXI= IG1lZGlkYXM= YmxvY2tMaXN0 IHBsYWNlbWVudHM= IHBvcHBpbmc= IHByb2dyYW1tZWQ= ODg0 TG9nb3V0 IHRob3VnaHRmdWw= VVJMRXJyb3I= UExVRw== b2Nocm9t NTY3OA== aGFhcmM= IGVsZWN0cm9waA== IENvdW50VmVjdG9yaXplcg== IFNjYW5kaW4= IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyM= IHNsb3dpbmc= dWVsbGU= QU5HRVM= Q2FsbGluZw== IE1vbnJvZQ== IFNvdXRoYW1wdG9u IGFzc2lnbnM= IFRyYW5zaXQ= IHN0YWNraW5n IGVkdWNhdGU= YnVmZmVyZWQ= IGF3YWs= IG1hcnNo IHN0YXRpb25lZA== IEhvcml6b250YWw= IHNvbGlkYXJpdHk= IEJlbGFydXM= IEJlbmNobWFyaw== IGxhdW5jaGVy IE9wZXJhdGluZw== IExlc2xpZQ== 5rGg IENvbnRyb2xz IFBvdGF0bw== UkVFSw== IGFic29sdXQ= dW5jdHVyZQ== IHByb3Rlc3RlZA== U3VjY2Vzc2Z1bA== IHJlaW5mb3JjZW1lbnQ= 6L+H5ruk IHJlcGxpY2F0ZWQ= UE9TSVQ= IGRpc3B1dGVk IEJhc2lu IGJpYmxp IGZydXN0cmF0aW5n IHRlbnRhdGl2ZQ== IHRyYW5zY3JpcHRpb25hbA== IGNyeXB0b2dyYXBoeQ== CgkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQ== w650 IG92ZXJyaWRpbmc= IEFsdGVybmF0aXZl SVBTSVM= IGR3ZWxsaW5n IGFiZG9tZW4= IGlzY2hlbWlh IHBpcmF0ZXM= IG1lbG9keQ== IG1lbW9yYW5kdW0= YWNldHls IGluZXJ0aWE= IGFtZW5kbWVudHM= IG1xdHQ= w7xuc3RsZXI= IG1hbmV1dmVy IG1ldGhhbm9s NTI3 QHs= Q291 Q1VU RGlyZQ== TGl0ZQ== VHJl Z21s bG90cw== bG9yZHM= bnN0 dmls d2VuZA== tpQ= 6LI= IOi+k+WHug== aW5wdA== aW5mbHVlbmNlcg== ZXJvZGU= cmVjb25zdHJ1Y3Rpb24= aGVzcw== IHRoZW9sb2d5 aXRhdGl2ZWx5 ZGVsZXRlcg== IHNhbmU= IHdheA== aW9uZXR0ZQ== IGluZm9ybWF0aXZl bmRpbXM= IGRhbXM= cmFq IHRocmlmdA== aWdyYW1z Y2VsZQ== YW1lbGVvbg== IFNITw== IFNhbnRpYWdv dGh1bXBlcg== IEF1cm9yYQ== YXB3 IHl1aA== b2RpYQ== IE1hY2Vk KCcuLi8uLi8= IEJE IGhlbWF0 IEhNUw== IEdhZGRhZmk= YWN1cw== YXJkdWlubw== IDM0NA== dXN0cmk= PSdb IHVuaW50 bGlzdGVuaW5n IDQzMQ== IG5ldWU= IEtlcnI= bWluZXI= dmVscw== IGRpc2d1 IGludGVyc2VjdGlvbnM= Q2hhbmdpbmc= Q2hvcmVvZ3JhcGh5 IHJlY2lk UHJvYmU= QU5P c3Vic2NyaWJlZA== IFF1aQ== IGZsdW5n IHBhdGhvZ2VuZXNpcw== IGVudGl0bGVtZW50 IGRpc3Rz Y29tcHJlaGVu aXNzaW1v cHJ1bmVk dmVyc2libGU= IHRleHRib29r IENvbmZsaWN0 dHNjaA== Z3JvdXBJZA== Q29sb3JtYXA= QVBJQw== SGVpZ2h0cw== dHJhaWw= IGJhc2VkaXI= b3VuY2lsbA== SVB5dGhvbg== RElSRUNUSU9O IHBhdGlv IHZlY3Q= 44KE IGRpdmVyc2lvbg== 0YDQtdC8 IGdsaXR0ZXI= ZXhwcmVzc2Vk IGZpbmFuY2Vk IGZybQ== IEFsbGFo w61zZXM= IENvbXBvc2l0ZQ== QXNzZW1ibHk= IGl0ZXJhdGluZw== IE9GUA== U3Bpcml0 ODcx c21hbGxlc3Q= IOyggA== IGJpb3BzeQ== aW5maW5pdHk= IENhcnJvbGw= IGF0dGFja2Vycw== Q09MTEVDVElPTg== IGJsYWNrcw== IFByZXZlbnQ= IGNhcmRib2FyZA== IHRheGE= IHRheGF0aW9u 5Zui cGFnaW5n QWN0aXY= ZmNm b3BoaWxh QU5UUw== aGlzdG9yaWVz c3RlZWw= IHZpb2xhdGVz aW5jaXBsZXM= Y29udGluZW50 IENvbmdv IHBob3RvY2hyb21pYw== IFNraXBwaW5n IHByZWRhdG9ycw== QW55b25l QW55d2F5 RmluaXRl IGxsYW0= IFNob3dz IHNleHVhbGl0eQ== XiokLQ== 56S+ YWRqYWNlbnQ= IGV4Y2VsbGVuY2U= cmVtb3ZhbA== IEFQUEU= bmx0aw== cmVzb2x2ZUZpbGVuYW1l IGFidW5kYW5jZXM= IFB1Ymxpc2hlcnM= dHJpcGxlcw== IEJhY29u IGNsaXBib2FyZA== 44Oz44OI bW92aWVs b21lZGljYWw= QUNUSU9OUw== IHJlc2lkdWFscw== IGhhcnZlc3Rpbmc= ZXhwbG9yZQ== IENMSUVOVA== IHRhbmdlbnQ= IHBvdW5kaW5n Q0xFQVI= RGFtbg== IHBlcnBldHI= ZnFkbg== IOKIvA== R29sZGVu Q29zbWlj IE1hamVzdHk= TW9tZW50 Z3J1cHBlbg== IERlcHJlY2F0ZWQ= YXBvaW50cw== IEdyaWZmaXRo d2lyaW5ncGk= IERvdWJsZWRheQ== emhlbml0c3lu IGluYWNjdXJhdGU= IGFuZ3JpbHk= IEFibG90dA== Iyg= NjI5 Nzk4 QWY= Q3Jh RXNj R0h6 SXJpcw== SnBzaQ== TFBD T0FVVEg= UnA= U2l0ZXM= U3lt VElORw== V0dT Zm5z Z2N0 aGFuY2U= bW9sb2d5 blRoZQ== c3Jl c25w dHVyYg== d2F2ZXM= CgogICAgICAgICAgICAgIA== IOi+k+WFpQ== IOeUqOaItw== j+iniA== IHRlbmVy ICAgICAgICAKICAgICAgICAgICA= c2Vr YW50ZXJpb3I= ID09PT09PT09 IGZlcnJ5 IHBhcmVu IHdpZw== IHdpbms= IGlubGFuZA== IGluYm91bmQ= IGluYWR2ZXJ0 IGJpc2hvcHM= aWNu aWNsYXNz IG1hdHQ= IG5pbmc= IGRhcmluZw== IGRhYmVp IGzDoA== b2xpY3M= b2x2ZXM= IGd2 IGdpbnQ= IGdpZ2c= IFNhbmc= IFNhaw== IHN0YXNo b21za3k= dGVtYQ== aW50cm9kdWN0aW9u IGRlZmxhdGU= IE1vbGQ= IE1heg== IE1DRg== IE5I IE5vcnRoZWFzdA== IEZC IEZMT0FU cGxhbnM= IFJX IFJDVA== KCIp IFdldA== IFdpbm5lcg== b2N5YW4= YWNpYw== b3V0cGF0aA== IEVDQw== YXJnYXM= IE9D b3N0YQ== IEp1bXA= IHVuaW5zdGFsbA== IDQwNw== c2VydGF0aW9u ZW5zYQ== bG9naXN0aWM= IG5vaXNlcw== IGRpc2FtYmln dWxsYQ== IHBhcnRpZQ== YW5rZWQ= IHxf U0VMRUNUSU9O TEVBUg== aWZpY2Fkbw== IG1vdmFibGU= QUxMRVk= IFFncw== IGAn aW5zYXI= JywnPA== bmV3bGluZXM= IGFtdXNlbWVudA== IHVybGpvaW4= IDE4Nzg= anNvbmlmeQ== b3BlbmhhZ2Vu aWZmcw== IGZpbmFsZQ== UGxhaW50aWZm TGVha3lSZUxV bGVnaWF0ZQ== aW5hZnRlcg== QU1C w61jaW8= IENvbXBhbmllcw== IFNlcmdl IE5vdHJl IGNyYXRlcg== Q29tcHJlc3Npb24= UnVuR3NVdGls NzM3NA== NDkx IHRlYW1tYXRlcw== aXBzaXM= UXVlcmllcw== IGdvdmVybm1lbnRhbA== ZXJjdWxvc2lz T05FT0Y= anVzdGlmeQ== IGVsZWN0cg== dGFidWxhcg== TnVtYmVyR2xvYmFs IGZvb3RwcmludA== RGlzY29ubmVjdA== IGZvcmVuc2lj dGVuc29yYm9hcmQ= Zm9ydHJhbg== LlxbW0A= IFJlY2FsbA== Y2Zt cmJhYw== IGNvbXBldGl0b3I= L3sr RWR3YXJk UmVsb2Fk IEludGVyaW9y IERlbGF5 IHdhcnJhbnRlZA== bGFuZ3M= ICd7Oi4= 0YHRgtCy IE5vcmZvbGs= KCcuJykp aWVyYXJjaGllcw== c3VibWl0dGVy IG1pbm9yaXRpZXM= U2VyaWVzRGlmZmVyZW5jZQ== 6I635b6X IFByb2R1Y2Vy IFBsYXlTdGF0aW9u IFNhdGVsbGl0ZQ== IEx5b24= IGRyaWZ0aW5n IHB1enpsZXM= IG5lc3Rl IEJyaWdhZGllcg== IEthdGll IGNoYW90aWM= aWJyYXRvcg== UEtDUw== Q0xPU0VE IOyduA== U1RSVUNUSU9O IHN0YWJpbGl6YXRpb24= IERlc3Ryb3k= INGN0YLQvg== IHN0cmVuZ3RoZW5lZA== cmVjb21tZW5kZWQ= c3ByZWFkc2hlZXQ= VGVuYW50 IGVudGh1c2lhc3Rz IOqyvQ== IFNURVA= IHN1cmdlb25z IEt1YnJpY2s= IFNxbG1hcA== IGRldGVyaW9yYXRpb24= IGNvbnRhbWluYXRlZA== IE1hdXJpY2U= IFNpZG5leQ== aXRvbmVhbA== 5bOw QVBQUk9Y IGNvbmRlbnNlZA== IFBseW1vdXRo IGVudHNwcmVjaGVuZGU= LFwi ODE0 ODkx QmM= Sm50 S2F6 T3hmb3Jk UUFic3RyYWN0 Vmlh WElBTw== WWFuZw== cGdlbg== cW9z cmFsbHk= dmNwdXM= d2ZpbGU= eW91dA== s6g= zrg= CQoJCQ== IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== aW51 ZXJneQ== cmV2ZW51ZQ== YW5pbmU= ZGVsZXRlcw== aW5ncmVzcw== IGJhcmQ= IGJsb3Nz b3Vl ZXNzZW50aWFs ICddJw== IGhib3g= dXRpbWU= IGVkZW1h IGRlbGV0 IChbJw== IFR1dG9yaWFs YWdhcw== IHVpYw== ICMtLQ== IEFscA== IHZpcmdpbg== b3Bv b3Bwb25lbnQ= b3BsYW5l aW1hZ2luZw== IGNvbnRlc3Rz IFBhcnNpbmc= IE5MUg== IE5NUg== ZW5kcm8= IHJlcnVu YXNzYXk= IGFsbG8= IGFsYXJtcw== Z2V0bXRpbWU= IEh1YmJsZQ== IEdMT0JBTA== IGVsZGVycw== MDE2Nw== IDM1NQ== YmVya2VsZXk= IG91dHJvcw== PSI8 IGVuYW1l IGdldEFsbA== Y29v IDQzMg== SW5oZXI= IFRoYW1lcw== IFZF IFZHRw== IEtocnVzaGNoZXY= IEluY3JlYXNl IGNvbXB0ZQ== ZW5lcnk= IHNjbQ== IFl1Z29zbA== Q2hhdmU= IENoYW5jZQ== IENocm9uaWM= IGJvaWxlcg== IGJvdmluZQ== IHBlZWw= IGBb YmxlbmRlcg== cGxpY2FudA== IGxvY2k= IDkxMQ== U2V0QmluQ29udGVudA== ODA1NQ== IENvbmNyZXRl IGJlbGxl IGJlbGxvdw== SGVicmV3 MDQzNQ== IHNvbHVibGU= SEVM IGNvbmZ1c2U= 44Ko VU5ETw== c3RkaW8= YmJpZQ== IEFORw== In0n IHN3ZWxsaW5n IGNsaWVudGU= IGV2YW5nZWw= cm1kaXI= IHJlZHVjdGlvbnM= IHF1ZXN0aW9uYWJsZQ== IG1vdGl2YXRl U3BhY2VySXRlbQ== IGJpdGNvaW4= IHNlbnNlZA== IENvdW50cw== IHdhcm1lcg== bWFyc2hhbA== IGNlb3Js IHNlbnNpdA== IGV2YWx1YXRvcg== YWNjZXNzb3I= IG1pc3Nlcw== IHRyb3VzZXJz Z2Jr IGRhbWl0 Z3VhcmRz Q1JFRA== IGJhbGFuY2Vz IOuy IFN1YnNlcXVlbnRseQ== IGV4ZWN1dGlvbnM= IGVmZmV0 IHNhbGE= 5Zy6 IHN0cmlwZXM= VU1OUw== IGV4YW1pbmVz IH4vLg== IGFsdGVybmF0aXZlbHk= WWVzTm8= ZXhpc3RlbmNl YXdzY2xp w7pz QW5hbHlzdA== cHJvY3VyZW1lbnQ= IEhlbnJp IFNhbHY= IGFueGlldA== UHJpbnRz c3VibmV0cG9vbA== aGFsb3Nl IEVzdGltYXRl IEJpZ3F1ZXJ5 6LSt IG1pUk5Bcw== IEluZGlhbmFwb2xpcw== Z2VvaXM= IFRhZ2dlZA== IGV4cGxhbmF0b3J5 dWRkbGVk IG1hbmlwdWxhdGluZw== IERvZXNu IGRlZGljYXRpb24= IERJU1BMQVk= QmV0dGVy 6KiI XSwnfCcs IGdsb29t IElyYXFp IEJyYW5kb24= IFdhcnNhdw== SmFwYW4= QWxidW1z cHNldWRv 5omL5py6 IGNhdGVnb3JpemVk 5b2i5byP SGFtaWx0b24= TWVhc3VyZW1lbnRFc3RpbWF0b3I= IGdlbnNpbQ== aW1wbGljaXRseQ== IGNvc21vbG9naWNhbA== 4peP4peP4peP4peP IFNvbGRpZXI= IHNwcmlua2xl IG9yZGluYW5jZQ== IEx1ZHdpZw== 6YKu566x QlVSS0U= IG9yZ2FuaXphdGlvbmFs IE1pYlRhYmxl 4qO/4qO/ SmV3aXNo 5Z2Q5qCH NjIz ODMy ODQ4 QW8= RmI= TGl0aHVhbg== TXo= UGFzc2Vk U2NyZQ== VGVk Y2FibGU= Y2VseQ== ZHVwbGlj ZWluZQ== ZVBpeG1hcA== ZmVt ZsO8 aGls a2F0 bXVk c3Nl dGFiZWw= dW9z eGltYXRl eWVjdA== eWJvdA== w40= 57k= IHRyaWJ1dA== cmVwYXk= b3Jvbg== ZW5pbg== aXN1cHBlcg== IGluY3Vy IGluc2NyaXB0aW9u IGluc2VjdXJl c2VsaW5lcw== IGRyb3duZWQ= ICc6Og== IGxheg== IGRldmVy IGdwcw== dmVyaWZpZXI= IFNhdGhhcmllbA== IEF2ZW4= IENhdmU= IDI5MQ== KCcoPw== cXVldHM= Z2V0T2JqZWN0 Y2xhc3NlZA== IEJhbmtz IEx5bmNo IEx5bm4= IG1lbGw= IEhR cmVzaXphYmxl J10vLw== IEd1aWxk IEdvcmdl MDEyNA== aXJlbg== IHBsYWc= IHBsYW5r c2hhdw== aWVn IGRhdGFmaWxl IHRpbWV1dGlscw== bGx0eXBl IFZMQU4= dXNlcklE dXRldXI= YXNrZXRz IGNvbW1pc3Npb25z IENoaXBz ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IGtuaXZlcw== VGh1bWI= IGZlYXN0 IFFMaW5lRWRpdA== OTkx cHJ1cw== TGlzdE9iamVjdA== IG9iamVjdGVk ZmVlbA== U2V0UG9zaXRpb24= cHBsZWQ= Uk9TUw== Uk9VTkQ= IHByaW9ycw== IEFydGljbGVz bGVzc3NpbQ== IGNhcmFjdA== QXJtZW4= ICRcfA== KV1d ZG93bmxvYWRlZA== cGFyZW50aGVzZXM= ODg3 dW5leg== dWl0YXJ5 RGVzY3I= dmFsdWFibGU= IGhhcmRzaGlw IENvbXBhc3M= cmVzdHJhaW50 IGluZm9ibG94 bXR1 ZG90ZW52 ZHJhd24= RnJvbVRleHQ= IHJpdmFscnk= IHBlcmNlbnRhZ2Vz TmV0RGV2aWNl Rmxvcg== c3VyZmFjZXM= IGZpbGxDb2xvcg== IHNwbGl0dGVk YmFsYW5jZXM= IHJldm9rZWQ= IDI2MDA= ZG9jdW1lbnRjbGFzcw== IHBob3RvbWV0cmlj IGNvbmR1Y3RpdmU= IHRlYWNoaW5ncw== IHRvd25zaGlw aW5zdGFsbGFibGU= U3lzdGVtcw== bWFnaWNz IGJ1ZnNpemU= b2tlbW9u IG1ldGFjbGFzcw== IGRlYmlhbg== bWd6 IGZhaXJ5 IGZyb2c= a2VlcGVycw== RHJvcGRvd24= ZW5naW5lcw== QkFDS0dST1VORA== IENhbXB1cw== YXBwZWFyZWQ= IHNtYXJ0cGhvbmVz YmxvYnM= IHBpdGNoaW5n aWhm IFNlbGVjdG9y IGNocm9taXVt RXZlcnlib2R5 ICfiiQ== IFRocmVhZFBvb2w= UHJvYmFibHk= d2F0ZXJz QmVuY2htYXJr VHJpYW5nbGU= IHNwb2tlc3dvbWFu IEFobWVk IGdsb3Zl IExpbmNvbG5zaGlyZQ== IEdpYmJz IHNjYWxhcnM= 5ruR IGRlY3J5cHRlZA== IEJlbGdyYW5v IG1pZ3JhbnQ= ZmFpbFVubGVzc0VxdWFs 5oiW6ICF SWxsZWdhbA== UmhvZA== IE5pY2hvbHNvbg== IGRyZWFtZWQ= TmVpZ2hib3JzQ2xhc3NpZmllcg== IEJPVFRPTQ== amZyb3k= aHlwb3RoZXNpcw== WmhM UFJPUEVSVElFUw== c3Rocm91Z2g= w6puY2lhcw== IExlYW5vcmlj Z2VzdGVyb25l LC4uLiw= NjIy QWJlcg== QlJPVw== Q2F0Y2g= RHlu RnQ= RkVU R01Q SG9t SElW VUg= XHxf Zm9ubw== Z2FsbA== aW9idXR0b24= amlu a2lkcw== bWl0aA== bXRy bmF5 bnVtZQ== bmFycm93 dHN0 d2hl eWFt 4qI= 568= ICANCiAgIA== aW5zdHJ1bWVudHM= b25kcw== IGFmdA== c2VoZW4= IGNlbGxl IHBvbnk= IHNhaWxpbmc= cm92ZXJz IGluZXg= IGlubGV0 IGJhaw== IGJpbGluZWFy IHJlbG9jYXRlZA== IGlocg== IGxhbWU= IGzDoQ== IHRoaXJ0aWVz IGRlZ3JhZGVk Y2Vm IGdvd24= Y2hyaXM= IFRyeWluZw== IFRhbXBh IGlzYm4= IFN1bA== IFNlY3Q= IFN3ZQ== IEN5bQ== dGV1aWw= IDI2OA== IDI2Nw== IE1pcnJvcg== KCctLS0tLS0tLS0tLS0= IGFzeWx1bQ== IEZyaXM= Z2V0YXR0cmlidXRl IGFuaW1hdGU= IHByb2pldA== IFJvY2tldA== IFJpZ2E= IEhlbHM= IEhBTkQ= IFdhcmVob3VzZQ== c2V0cG9pbnQ= IEVj IGNvY29udXQ= IF8u IE9kb28= IGtpdHM= cGhhbnRz IG91dGxpbmVz ZmlndXJlcw== IGFkYg== IHVucHVibGlzaGVk Z2Vi IFZpag== IDUwMw== bWluZWQ= IHJhaWxz cm93RnVuYw== c3BpbmU= IGludGY= cGVjaWZpYw== cHls IFN0YW1w MTExMTE= YXNrZWxs MTk0Mw== ZXJyb3JiYXI= KioqKioq ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg YXduaW5n IGJ1b3k= CgkJCQkg IGNvbXJhZGVz U2V0SXRlbQ== IEFycmFuZ2U= IFhp RURQcm9kdWNlcg== U3RyaWN0 IDE4Njc= Q09VUlNF 0LXQsQ== IHJldG91cg== CiAgICAgICAgICAgIAogICAgICAgICAgICA= VW51c2Vk c2hvd2Vycm9y IGFsbG93YW5jZQ== b3J0aHk= Q1JD IG1vZGVsbw== YXRzw6RjaA== w6RuZGVy KCpb IEJlZw== IHNob3J0cw== IHsiJA== bWV0YXM= IGNob2tl IHdlYmhvb2s= dXJyZW56 IGVuZXJn IEFSVA== Y2Fv YW5hbGl0 TmVhbA== UmVjb2duaXRpb24= QXNzaXN0YW50 IHBlcnNvbmFsaXplZA== IE91dHN0YW5kaW5n IHRvb2xib3g= IFNFRQ== cGtnbmFtZQ== IGxhc3Nlbg== TW9kZXJu U3RvcEl0ZXJhdGlvbg== cnJhdGlvbmFs IE5vZGVz bWV0aG94eQ== IGJvd2Vk IGRlY29yYXRpb24= PSIjIg== IE1lcnRldWls IHNjcmV3cw== ZXZhbHVhdG9y IHN0cmVzc2Z1bA== IGhvc3BpdGFsaXR5 6aKc b2x5bmRyYQ== IFByb2dyYW1tZQ== IGluc3BpcmluZw== IGNhYmU= Y2FyZWVy Zmx1b3Jlc2NlbmNl IGFkdmVydGlzZW1lbnQ= IEhhbGxleQ== INC30L3QsNGH IGludGVycG9sYXRlZA== IHBlcnRhaW5pbmc= IEphY29icw== IHZhc3RseQ== 5ZCm5YiZ c3Vuemlsb2c= IEJ1Y2tldA== VHJpYWxz IHNtZWxscw== c3RhbmJ1bA== IFBlcnNpYW4= IFNlbWluYXJ5 UGFsaW5kcm9tZQ== IHVuZGVydGFrZQ== IENPTU1BTkQ= IE1vbmdvREI= IGNvbGxhYm9yYXRpdmU= 5q+U6L6D IHJlY29uY2lsZQ== IGNvb3BlcmF0ZQ== 56e75Yqo c2V0dGxlZA== IGN1cnRhaW5z IGhhc3RpbHk= Iy0jLSMtIy0jLSMtIy0jLQ== IHJpZ2h0ZW91c25lc3M= INGH0LjRgdC70L4= VGVzdEFsbFR5cGVz b3p5Zw== IFZlZ2V0YWJsZQ== U3VkZGVubHk= IHNsb2dhbg== IHRoZWF0cmljYWw= IFNhcHBobw== IE5ld3NwYXBlcnM= IGRpc2NvdXJhZ2Vk IHBhdmVtZW50 Y2hlcnJ5cHk= IEluaXRpYXRpdmU= IGVwaWxlcHN5 KWAu LSIs OTM1 OTI3 Oic6 QXVzdA== Qm9uZQ== RE1Q TGFkeQ== UGc= Uk9O U2xpbQ== VGFuaw== VFVO XT0i ZHV0 am9ubw== a3o= a21lbg== bmlzdA== eXc= enA= 54w= IHRhcGVz cmVwbGFjZWQ= c3Rhc2g= c3TDpG5k IGZyZXM= IGZvc3Q= IHdhZ29u IHJlY29ubmVjdA== IHJlbW9kZWxpbmc= IGx1Yg== IGRlcG9pcw== YWRheQ== IFRhag== IFRQUA== MDAxNg== dW1lbg== IEFtYXo= IENyYWZ0 IGJld2lsZA== IHZm IHNlbWluYWw= b3BpbG90 YW1pdHk= IHllcnI= IiIpLg== b2Rpcw== IDI5Mg== IDI4Nw== IFBFTQ== IE11c3M= IE5TQQ== IGFzc2V6 KSl9 IEJvdHQ= IG9ybmFtZW50 IExBU1Q= IExETA== IEVyZg== IDMxOQ== IDMyNA== IG1haQ== YWN0ZWQ= IHByZWRlZmluZWQ= IHVuaWNocg== SU5VRQ== IHVwcw== IEtvbW0= IHBlcmd1bnQ= IGRpc3Bvbg== IGRpc2xpa2Vz IGludGVuZHM= UHJveGllcw== aGVja2Vy c3Vic3RpdA== IHt9fQ== IGZpbGxl IHB5cmU= YW1icmU= YmVp Z3JvdXBpbmc= IGZvcm1pZGFibGU= d2F5cG9pbnQ= YmFzZXN0cmluZw== ZGlhbW9uZA== IFpvbw== RGVjaw== IHR1cm5vdmVy 44K1 YWN0ZXJpYWw= 0YHRjA== IHByb2JsZW1h Q0FZ ODUy QU1JTFk= IHJlc3Rl IFNlcmJpYW4= IFRlaA== VkVSVEVY IHNucg== IHNlbmF0b3Jz aGF1cw== IHF1YWxpZmljYXRpb25z 6L+t CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= U3RhcnREYXRl IHRyb3V2 IEF0dGxlZQ== IHJldml2ZWQ= IOumrA== IGlsbHVtaW5hdGlvbg== Y29uc3VtcHRpb24= cGFpcndpc2U= IHRrTWVzc2FnZUJveA== SW5kb25lcw== RmxvYXRpbmc= IHdvcnRod2hpbGU= Li4uIi4= IGFsbGVnaW5n QlJJR0hU UEZKZXRz VGVtcGxhdGVWaWV3 IG9jY3VwYXRpb25z 56ev IGh5cGVydmlzb3I= 5Ly8 IG1haWxib3g= IEdlbm9jaWRl V0VFTg== V2FpdEZvcg== c2VwYXJhdGlvbg== IFJoeXM= bXVsdGlwcm9jZXNzaW5n IEpvYW5uZQ== d2lsbHZkbA== Q3Jvc3NFbnRyb3B5TG9zcw== IEJ1cnRvbg== IGRpc2NyaW1pbmF0ZQ== YWRqdXN0bWVudA== IFNhdHVybg== IHhzRGF0YQ== IGJpZGlyZWN0aW9uYWw= IGFzc2lzdGFudHM= Y3Jvc2lz IHNwb2tlc3BlcnNvbg== UGxhbmV0 ZXhwbG9pdA== dnJmcw== IGFwcGxpYW5jZXM= IEJyeWFudA== Q292ZXJhZ2U= IGFsZ2VicmFpYw== IOuwmA== TmFtZWRUZW1wb3JhcnlGaWxl IGNyaWNrZXRlcnM= IGZlbWluaW5l REVDSU1BTA== bW9ycGhvbG9neQ== 57uf6K6h IEF0aGxldGljcw== INC10YHQu9C4 SE54QUg= IEFkdmVudHVyZQ== IFBvbHlub21pYWxSaW5n UmVjaXBpZW50cw== TWV4aWNv QWZyaWNhbg== Q3JvYXRpYW4= IGNvcnJvYm9y IGFjcXVpZXNjZW5jZQ== INCy0YHQtQ== IGV4b3BsYW5ldA== 4oCU4oCU4oCULg== UXVlcnlzZXRFcXVhbA== RXhwYXRyaWF0ZQ== Jj0m LuKAnA== NDY2 NTY2 NjI2 ODY4 QlRhZw== RWNobw== RmFt Sk0= Tm9ydGhlcm4= VUdI V2lubmVy WU0= XSM= Xi0t X10= YmFuZw== Zm5hbWVz cGljdHVyZXM= cXY= eVpY eXRpY2tsYWJlbHM= 4Kc= IHRhbGx5 IGF1cmE= ZW5pYw== IGZ1eno= IHBlbmRhbnQ= IHNhcw== IGJ1cmU= IGJ1ZA== YXNudW1weQ== ICckew== ZXR0ZXM= IGxhcnk= IGFuZGVyZQ== ICgpOw== ICgpXXt9 IFRH IFRvdQ== IFN5cw== dGhpbmtpbmc= IENhbm4= IENhcm0= IENvdWNo aW11cw== IGNvbm5h IFBhbmRhcw== IE1BRA== IE5IUw== ZW5kdGltZQ== Z2V0bmV3 IFJhcw== IEhhbGU= aWVsc2Vu MDEwNw== IGppdHRlcg== IHBsYXR0ZXI= IFVI Y3JlYXQ= dXJsaW5n IHZlcmRhZGU= IHBlcmNlcHRpb25z IHBvaXNlZA== MTkyMQ== IHN1YmRpdmlzaW9u IG92ZXJ3ZWlnaHQ= c2VudGlhbGx5 bWF0bGFi QU5J IHBlYWNo IGFjdHJlc3Nlcw== c3ViaWQ= IHJlZ2lzdA== YXR0aQ== MTQxNQ== IFJlYg== IFJlaWQ= TGlzdFJlc3VsdA== cGxpY2luZw== Q1RY Uk9U ZGlzcGxhY2VtZW50 YXp1 IGltcGVyc29u XFwi fX19XA== IHdvcmRsaXN0 bW9uaXRpb24= IEFsYXJt IGNoYXJpdGFibGU= IHRlbXB0YXRpb24= IERlYmF0ZQ== IGV4cGFuZHM= SGVhdnk= ZXJyTXNn IiksKCI= IFNoYW4= IGVsZW1lbnRv CgoKCgogICA= IGZhbWls IGhvbWVsYW5k MDgz XV0+ IGFudGlkZXByZXNz IHJvb3RQYXRo IEJvZWg= bXVsdGljb2x1bW4= IEFwcGw= R2VuZXJhdG9ycw== IGRldm90aW9u aWpl IGZpcmVhcm0= ZGVzY2VuZGFudHM= IFBhcnRpYWw= IGFmZm9yZGVk IHF1YW50aWRhZGU= KSsiLg== b3BoaWNhbA== IEltcG9ydGluZw== IHZpb2xlbnRseQ== KCctJylb IENvbWlj IGxpbmVy IFByZXNpZGVudGlhbA== bXVsdGlhcnJheQ== b2NyYXRz YWNjZXB0cw== UHJpY2Vz IERlbW9jcmFjeQ== 5paw55qE 5b6u PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0= IGFwcGVuZGluZw== UEZNRVQ= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t IEFuZ2Vscw== IGFjcXVpcmVz SUNBZ0lDQWdJQ0Fn QXJndW1lbnRFcnJvcg== ZWxsaWdlbnQ= Y2FsY3NpemU= IFR1cmtz Y2lyY3VpdHM= IGFwcHJlbnQ= TWFnbmV0aWM= IGRpc2N1c3Nlcw== IFBvcHVsYXI= Zmhpcg== IEJlc2No 5o+b R2VuZXJpY1Jlc291cmNl 0L7QvNGD INC/0YDQvg== IGRpbHV0aW9u aXRpw6k= IER1UG9udA== 0JLRiw== IHJlbmV3YWw= 5omA5pyJ55qE IHB1cGls SE1BQw== IO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vQ== IFN5bWJvbGlj IHNjYXJjZQ== b2Jic2Vl INGN0YI= IFJvbGFuZA== IHNoYXJwZW4= IHRoeW1l IHBlY2Fu QUFBQUFBQUQ= U3VzcGVuZA== IiIiIiIiIiI= IExpbmtlZExpc3Q= UGllY2Vz IE5hY2hmcmE= 4oCs4oCs4oCs4oCs IEJhcmtlcg== c3luY2hyb25pemU= IFZhbGVudGluZQ== 6Z+z Z3JlZGllbnQ= 5ZG95Luk IENocm9taXVt IOusuOyekA== 6Kit5a6a IFNpYmVyaWE= 5qCh6aqM UFJFRElDQVRF QUJDREVGR0hJSktMTU5PUA== YXh2bGluZQ== IyU= Kyhc MDk4 NjAwMA== ODEy QmV5b25k R09O SG91c2Vz Sm95 TGFz TXVycmF5 T2c= U2xvdmFr V1o= WW8= XH1c Ym9n ZmlzaGVy cnVuZA== c2l6aW5n eGc= zr8= 5YQ= b3JJRA== IGNlc3M= IGNyZWVr IGZyZW4= IGZyb24= bWVtcG9vbA== IGJzb24= IGJhemFhcg== IG51ZGU= IG5vY2hl dXRhdGlvbnM= IGxpdGg= b3RpbmU= cmFpbA== IGVl aWdhdGVk IFRhYmxlcw== IFRBUkdFVA== IGlzZmlsZQ== dmVyZ2VuY2U= KCldLg== IENvdHRvbg== IENyaXRpY2Fs dGVv dGVybw== IDI4OQ== IE3DvA== IE5peG9u dXB0aW1l cXVlbnQ= IEZGSQ== cHR0 IG5vdHdpdGhzdGFuZGluZw== dXNjaA== IERlbGw= IFJQ IExEQQ== IFdM IFdpZGU= IEdhbg== IEdTTA== YWNpZA== b3JkaWFs IGNoaW1l IHBsYWlucw== ZXh0ZW5kcw== IEpF IDQ5Nw== IFZhYw== IHJhdg== IF9fX18= YXNzZXJ0UXVlcnlzZXRFcXVhbA== IGRpc2FzdGVycw== IG5wYw== dmFsdWVBeGlz bGljaWE= MTkyMg== MTkxMw== Q2hhaXI= IHNwYXJlZA== dG9uYQ== bWVkaW8= IGZsYXdz IHVuZGVybWluZQ== aHR0cGNhY2hl VHlwZUlE DQoNCiAgICAgICAg bG9iYmVy Q1RS ZGlzbWlzcw== Y3VyaWFs IGFtaQ== IGl0ZW1nZXR0ZXI= IEV4YWN0 ZG9jeA== IGRlY29kZXJz QUJJ IGxhdXJl Qm95 bWl0dGVudA== IF17fQ== Y29udGVudE1ldGFkYXRh IGF1dG9wc3k= 0LjQuw== RGVsZXRlcw== Z3JpbGxl VEVBTQ== IHBvcGNvcm4= 0YDRiw== IGdsYXJlZA== IFBhcmlzaA== IE9yZw== Q09OU1U= IHZvbHVudGFyaWx5 T3JFcXVhbA== Q0xT YWNjb3JkaW5n UExBSU4= U3BhY2Vz IFNjb3V0 IENPTlNU IHB1cmlmaWNhdGlvbg== IHJpb3Rz IHNpbGVuY2luZw== IENocmlzdHk= U09GVFdBUkU= RmlsdGVyZWQ= T1NY Y3VzdG9tRmlsZU5hbWU= IGNvbmRpdGlvbmVk IGF1dG9tb3VudA== UFJFU0VOVA== dHJpdmlhbA== cHJvdmlkZXM= IGVzdGltYXRpbmc= RWRpdGVk SExI TWF5b3I= UGFyYW1ldGVySGFuZGxlcg== U2hvd3M= UFlW IEV2ZXJ5Ym9keQ== IHBhw61zZXM= aGFsYg== Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IGNlbGVicml0aWVz 5oCd RGlnaXM= IFVuZGVyc3RhbmRpbmc= IEdvb2RtYW4= IGluamVjdGlvbnM= Y29tYm9z IG5ldXJvcGF0aHk= IGh5cG90aGVzaXplZA== SGVscEZvcm1hdHRlcg== IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= L3t9Lg== 6L+b5YWl 5LiK5Lyg IHJpZ29yb3Vz UG93ZXJvZmY= IENhc3Rybw== IEpvaGFu cnVndQ== QWJzb3I= 6K6+5aSH 5q2j5bi4 IGJhdGNoZWQ= IFNob3J0bHk= ZmliZXJz Q0hBTk5FTFM= IO2VtA== IGNhbnRpZGFk IFNjYWxpbmc= cGFyc2l0eQ== IGZ5dg== IFBvd2Vycw== IFBpZXJjZQ== U2NvdHRL IHJlcGV0aXRpdmU= IHBlbmV0cmF0ZQ== IE9jY3Vw 6Iul 6aqM6K+B56CB IEtpbmRsZQ== 4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA 6K+t5Y+l IHByZXN0aWdl IE1BTklGRVNU IFZpdGljdWx0dXJl VHJhbnNsYXRvcg== IGluZGlmZmVyZW5jZQ== dmFya2FwcGE= IGJyb3dzaW5n IGludHJpZ3Vpbmc= Y3Vsb3NrZWxldGFs KScu NTc3 OTEz Q01F Rlk= SElORw== SmF5 S29yZWFu TEo= TmFt U2Vz U2xvcGU= VGM= XTwv Ym91cXVldA== Z2lmdA== aG1t bW9n cGlz cGllcw== dG91dA== dGFibGE= d3Jk eWRhdGE= ooU= pueQhg== 16c= 5r8= 6L+9 7IKw 7ZI= aW52ZW50 IHRhbQ== b25jZXM= c3RhZw== c3RlcmU= IGNuYW1l bGVpY2h0 ZGV1 IHBpbGVk IHBsZWRnZWQ= ZWRpYXRyaWM= IG1peHR1cmVz IGR1ZGU= ZXRjaGVk ICI7Ig== b3Rw JywnLA== IGd1bA== IGZvcmM= ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICA= IENtZA== IENpc2Nv YW1pZW50bw== X18oKSk= IFBhdg== IEZMTw== IG5vdGlvbnM= IEJyYXM= IEJKUA== ZXdpdA== IERvd250b3du ZXJlZw== Jyl9LA== IGV4YW1z IExpbA== YWluZm8= IGF0bQ== b2NhdGlvbnM= IEVr b2dhcw== dG9rcw== Y2Vzbw== IG91dHA= IGVuZg== cHJlZGlj Y29tcGxlbWVudA== IGNhbm5vbg== IHVuemlw IHVuYWNjZXB0YWJsZQ== IHVuYW1iaWd1b3Vz IDQzMA== IHRlc3Rjb21tb24= ICRA IEthbmU= bWluYQ== dGltZXNlcmllcw== YXVjaGU= IGxpc3RpdGVt ZGJm IG1hbmE= MTkxMQ== IGxvZ2l0 IHNwaWxs IHRyYXVtYXRpYw== dGhlYWQ= cmF3ZGF0YQ== U2V0TWF4 CgogCgog IGFtaWdvcw== IHNpZ25pZmllcw== YXV0b3Jl e31f b3Jncw== MjAwMDAw c2VhcmNoZXI= IGRvbm5lcg== XFwsXFw= cGFydG5lcnM= IDE4NzE= fX1ee1w= R2V0T3V0cHV0 R2V0Qmlu IGVzdHJvZ2Vu IGV4cGVsbGVk b2xleQ== VW5peA== X19fX19f QUFDVA== U2hvd24= IGRpYXJpZXM= IG1ldHJv YXRzdWtp IGFudGlj IHZvbGF0aWxpdHk= bWV0YW5hbWU= RVhBTVBMRQ== IFBlcmZlY3Q= IGluZGljYXRpdmU= IHNlbmlvcnM= fXt7 IHNjaGVtYXM= IOyw IGdlbmVyYWxpemF0aW9u IHBsYW5hcg== IENhbmFk 57un IERlc2lyZWQ= QXBwbGljYXRpb25z ZmxhZ2dlZA== IOWO QmxlbmQ= aW50ZWdlcnM= TmVpbA== IGVkdWNhdG9ycw== U0VUVVA= IFdlYnN0ZXI= YmlnZ2VzdA== LF8qKg== IFBlbmc= IGZhaXJuZXNz IVsqKg== IERpdmlkZQ== IGh1c2JhbmRz ZGVjb3JhdGlvbg== IGNyb2lz IGNvd2FyZA== IGZyZWVs U05NUA== IHVuaXZlcnNhbGx5 UG9vcg== IEJhdHRsZWZpZWxk 55uu5qCH VmFyaWF0aW9u Zm91cnRo IGZhYnJpY2F0aW9u SHlkcm8= MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA= Mjk0OTY3 bmVpZ2hib3Job29k IGhldGVyb2dlbmVpdHk= IGRpc2NpcGxpbmVz IGZ1dHVybw== QlVJTERFUg== IGlucXVp IGRpc2NvdW50ZWQ= IEZlbGl4 Q09OTkVDVEVE IHJlY2tsZXNz R0VORVJBVEVE IGV4ZW1wbG8= 57uZ5a6a UmVuYW1lRmllbGQ= TWF0dGhldw== 64K0 IHN0ZXJpbGU= IFN0cmlrZQ== TU9USU9O IHZpbnls RU5PRU5U IHBlYXJs IHNwYWNldGltZQ== RE9DVU1FTlRBVElPTg== d2l6bHZs RGVwcmVjYXRlZA== b2NhcmJvbnls U2FyYWg= 5a6i5oi3 0L7Qu9GM0LfQvtCy VGV4dEJsb2NrR3JvdXA= U3RlbW1lcg== YW5zd2VyZWQ= IGlUdW5lcw== IE1pdGFyYmVpdGVy IHNlcHNpcw== 6L+t5Luj OTIw Q2l0aWVz REFH RG9taW4= RXZlcg== RWl0aGVy SGFucw== Sk9S TlNF UGl0Y2g= UERC UnVi Wyo= YXVt YmVyZQ== YmZz ZG9uZw== Z3dpbg== Z3JpcHBlcg== aGxz amV2 bHVtaQ== bXVy cG9uZw== dmlm 6rc= aW5obw== ZXJm IGF3b2tl c3RyZWFr YW5pdHk= IGZpYw== IHBldHM= IHBhbmRh IHDDumJsaWM= IG9zcw== IG9taW4= IHdvdw== IGJ2 IGJpY3k= bmRlbg== ICcoJzo= IGjDpHI= IGxhcHM= ICIh IGV1bGVy ICgpKSw= IGdvcg== KCl9LA== IElr IHZn IHZw KSwoJw== X18oIg== IDI4Mg== IE1V CgoKICAgICAg IEJJ IEJheHRlcg== IERpb24= IExvZGdl IEhD IEhhbm4= IFdG IFdpc2g= b2Njbw== IEdIeg== IEVjYw== ZnJvbWJ1ZmZlcg== cHV0ZWQ= cnlu IHNoYXA= IDMyOA== IDMzNA== IDMzMQ== ZXBoZW1lcmFs dHlwZU5hbWU= b2t5 cGF0aHNlcA== IFVQUw== IHZhbGV1cg== YXZJZA== bGlzdE9m LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== YWtr bGx2bQ== IDQyMg== IDQ5Ng== IDQwMg== MTAyMA== IGZpbGVMaXN0 cm93Y29uZmlndXJl ICkq IGltbWluZW50 IHNvbWVkYXk= RU5ESUFO IEhlYXRo IHplbg== IHpmaWxs bm9kZWlk IFdlaQ== IGJsb25k IG5vd2FkYXlz IEFybWVk IGRlY2F5cw== IDE4ODM= c2x0 IGV0Y2hlZA== R2V0U2l6ZQ== YWhv IGNvdXJ0eWFyZA== MDUy IHN5cnVw YmxvY2toYXNo DQoJDQ== IGRpYXJy IGRpYW1vbmRz MDcx IGRlc3RpbmVk QU1E IGZyZWV6ZXI= ICJcIg== 5YWF IGluZGljYXRpb25z Z2Fv IOyI aXZlcmluZw== Lioo bWFyYw== IE1pbmlzdGVycw== IE5ldQ== Z2xhZGU= QXBwcw== IGFwcGxpY2FudHM= IEJhcmI= IGplb3BhcmQ= IOW5 IFNjaHc= ZmV0Y2hlcg== T3BlcmF0b3Jz IEd1YXI= bnlkZXI= IGRpYWdvbg== IG1lY2hhbmlj Y29uc2lzdA== IElJYQ== b2NyYXQ= aXR0dQ== IHNlcXVlbmNlZA== IGhlYXJpbmdz YXN5bXA= IHZpc3VhbGl6ZWQ= IEFpcmxpbmU= IGRldGFjaGVk IGdyYW5kY2hpbGRyZW4= c3dpdGNoZXJvbw== IHNjcmV3ZWQ= IEluaXRpYWxpemVz IFVOS05PV04= UmFuZG9tU3RhdGU= 566A Y2lyY2xlcw== Q2FybA== b2xvYWQ= QmlnSW50ZWdlckZpZWxk IHJ1YmJpbmc= IFdIQVQ= QVZH IEJyaWxs 2KfZhg== IHR3ZWV0ZWQ= IE5vbmV0aGVsZXNz IG1lc3N5 QW50aQ== RmFzdGE= UHVibGljYXRpb24= cmVjdXJyaW5n bGlzdGVuZXJz JiYm IGxleGljYWw= IHN1cGVyaW9yaXR5 Q0hBUlM= IE1haGpvbmc= IGNhbmRsZXM= IGhldGVybw== IGNvbXByZWhlbnNpb24= IHN1Y2NlZWRpbmc= aG91ZXR0ZQ== 5o+Q5Y+W IHhsd3Q= IG5laWdoYm91cmluZw== IFJvbGxpbmc= IGFrQ3NTb2Z0RHJvcA== IF57Kw== IG5pbmV0ZWVu Y3JpcmU= 5YWs5Y+4 IHVuaXF1ZW5lc3M= IGhlc2l0YXRl IHBpZXJjaW5n c2hvb3Rpbmc= IEJVSUxE IGFubm95YW5jZQ== IEljaGlnbw== IGRlcGljdHM= IHViaXF1aXR5 IGlsbHVtaW5hdGVk IFBhdHJpb3Rz IHN0YWJiZWQ= IGV4YWdnZXJhdGVk IExlYmVucw== IFNjaHdhcno= IHN0cmV0Y2hlcw== SW5zY3JpY2Fv bGllw59saWNo IHZhZ3VlbHk= IEdpbGxlc3BpZQ== IOyggOyepQ== Lyw= MDk0 NTQ5 ODYw ODY1 SGF3 S00= S0FO TWl0 TUFHSUM= T1Y= UElO U0hP VG9kbw== VUlQ ZGFuY2U= Z0lk amVmZg== bG9s bWlzZQ== cmRk emFn cmVr aXRhbnQ= IHNpemFibGU= aXNidXJ5 IGlubWF0ZXM= IG5o IGRhbmNlZA== ZWxpbQ== b3RpdmVz IGZvcmdpdmVu IFR4 IFRlcw== IFRpbGw= YWdoZXI= IHN0dXI= KClc KCkiLA== MDA1NjI= IENyYW4= IENHSQ== aWZ0aW5n b25laG90 IE1pbnQ= IE1PVA== IHLDqXM= Z2V0bGlzdA== IEJhdWVy IExu IExheg== IEhM dWJhdGlvbg== b3V0RmlsZQ== IEVI dmFsaWVy IGVsbA== IHNob25l IGt1bg== IDM2OA== PSIkew== YXZpcw== KS4iKQ== IGdldExvZ2dlcg== YWRkcw== dWRhY2l0eQ== IHVub2ZmaWNpYWw= IHRlc3RkaXI= bXNr IFZpbA== IDUxMA== IEtlbXA= IHBhcmFw IHBhcml0eQ== IGRpc2NvdmVycw== IHN1YnNjcmliZWQ= IHNwZWxsZWQ= eXN0b25l aW5lc2lz IGFzc2VydGluZw== YnVja3M= ZGlzY29ubmVjdGVk dHJhbnNpdA== dHJhbnNBeGVz IFsnJ10= YmFzZXZhbGlkYXRvcnM= Ym94cGxvdA== Q29sdW1i IGNvZGVOYW1l YWhp aWRlbnRseQ== b3Zza3k= UGFyYWdyYXBo IFp1cg== IGF1dG9kb2M= IExlaXN0 IGJydQ== IHByZXNlbnRhdGlvbnM= IGd1aXQ= TGVwdG9ucw== IFdob2xl SXRlbUlk Li4uLi4uLg== IGRmbg== aW5hZQ== CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg 4YCh4YA= IGluc3VsYXRpbmc= VkVSSUZZ cGF0Y2hz UGVybXV0YXRpb24= IFNwYXRpYWw= IGJpdGVz YXV0b2VzY2FwZQ== IExvYW5z CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg Y3V0YW5lb3Vz TWlub3I= IGZ1bmNpw7Nu IE1vbmtleQ== aW9zaXM= Z3Jlc2U= IM6z IFJlY3Vycw== IHdhdGNoZXI= IG1pY3Jvc2NvcGlj IExpYnlhbg== IGVudGVycHJpc2Vz IGNhcHRjaGE= Lyo7 YXRvaXJl IHN1bnNoaW5l IG1hY2hlbg== IGJyYWNlcw== UGFzc3dvcmRJbnB1dA== 5LmQ cHJpdmF0ZWtleQ== IGZyb3pl V2ViU29ja2V0 Ynl0ZW9yZGVy IG9jY3VwYXRpb25hbA== VGFidWxhcg== IGJ6cmxpYg== INC60L7Quw== IEJhY2t1cA== IHN5bmFwdGlj IFRyYWluZXI= IFZpZXdz IHZlbnRhbmE= YWx0ZXJlZA== RGlhZw== IGJhYnlUdXBsZVRyZWU= 7Jes ICg/Og== Zmx1eERC 5ouf IExhYm9yYXRvcmllcw== IGNoYXF1ZQ== QmFsYW5jZXI= Ii8m IGR1cmFibGU= aWdodGhvdXNl IGJ1cnN0cw== IENvbW11bmljYXRvcg== U1RPUFBFRA== UmV2aXNlcw== IERlc3Rpbnk= aXNvbGF0aW9u IGZsb3dlcmluZw== w6dvaXM= IGluaGFiaXRlZA== IEtpdGNoZW4= IEZlZWRiYWNr U3RhbmRieQ== cnFkYXRh IGFiYnJldmlhdGVk Q29tcGF0aWJsZQ== 4oaR 44Gm44GE44KL 7Iq164uI64uk IHBsYWlzaXI= U291dGhlcm4= IFJlZ2FyZGxlc3M= IHNuYXJsZWQ= IExFVkVM MDc4 QWE= QkVE S0VSTg== TUlE TUFM Tm9tYnJl UVc= VG9ueQ== VmlyZ2lu V3Jh WW9yaw== Y2liaWxpdHk= ZE4= ZHJvaWQ= ZnV6enk= a3BvaW50cw== bmF0YWw= dmFuYQ== d3U= eXZpZXc= fFs= IHVybg== c2Vp aXRpemVy bGVhbg== bGVnZXM= IGJrZw== IG11Yw== YXNv dXJvbg== Y2hvcmVvZ3JhcGh5 IFRvcnQ= IFRhcA== IFNwbw== IFNpZXJyYQ== dGhvdXNl YWJlbnRsZXk= ICM8 IENX IENhYmxl dW5pZGFkZQ== IHlvbG8= YW5kbGU= IFB1enpsZQ== IE54 IG9uYm9hcmQ= IEJhY2hlbG9y IERyaQ== IERldw== IGhlaXJz IFdhZ25lcg== YWJsZVZpZXc= IEdseQ== IEdUUA== ZGVmb3Jt aW5kYXRh IGxldHJh IGtvbnQ= IGpw IDo+ IDMyNg== dHJn IFVuZQ== YmVydG8= IHByZW9yZGVy IGNhbm9weQ== cG9ydHJhaXQ= aWVudG9z dHlwZWQ= IHBhcmFseQ== IGNvbXB1bHM= MTI1MA== UmVhY2g= bW9pbA== IGRpc3BsYWNl IHN1aXY= IFlZWVk= MTkwNA== cml0bw== bWF4dmFs QVJD IHNwb3I= SURMRQ== aXRzYnVyZw== MTg1NQ== Zmx1cg== VGhyZXNo IFFTdHJpbmc= YmFja3Vwcw== IHRyYWt0 dGhlb3J5 IDkzMA== IHBoYW50b20= ZGlzY291bnRz IGFtYWxnYW0= IHJlYWRtZQ== b3JnZW4= cm9uZA== T2J2aW91c2x5 IEZvcnJlc3Q= IHN1cGVyYg== YmFycmllcg== VW5pdmVycw== IG5vbmxvY2Fs IGZhbW91c2x5 IG1lZGFscw== IGVudmlzaW9u 5Y+X IFBsYWlucw== MDYzMQ== IGFudGlw aW1lbnRvcw== Q29tbW9ucw== YXRpY2Fu IENhbGdhcnk= 5YWL Yml0c2V0 IFNwcml0ZQ== KyJ8 IjoiKw== IHVuZGVyc3RhbmRhYmxl bGltYg== IE1pbnV0ZXM= IENoZWNraW5n ZGljb20= ICItLy8= IHJlbW5hbnRz IGhvcGVsZXNz IFR5cGVWYXI= IGNhbXBv KSQt aGFtbWluZw== c2hvcnRlc3Q= bmVzaXVt QkxBTks= IE1hcmtz cG1m IGxlc2I= eGltbw== QVVUSE9SUw== IHdlYWtuZXNzZXM= IGJ1cm5lcg== IGRlY29yYXRpdmU= IFNhbG1vbg== cXVhZHBvaW50cw== IHJlcGVudA== IFNlY3VyZQ== IHJhbmRyYW5nZQ== 5pS/ QW5nZWw= 0YbRlg== Z2FyZGU= IGRyZWFtaW5n IENhcm9saW5l TWFjaW50b3No IFRhc2tz 6Ie0 IHRvbGVyYXRlZA== b21hbGlh cmFkaWk= IExlZ2lvbg== IFByb2R1aw== IE1hdHRoZXdz cmFjdXNl SGFybW9u IGV1cm9w Q29va2llSmFy VHdpY2U= MDA3MzM= IHNhY3JpZmljZWQ= U25hcA== IGR1c3R5 IOGAoeGA IHNjcmFwaW5n IG1pbGl0aWE= IERhdGVu IHByb21wdHM= IHR3aXN0aW5n bWFpbnRhaW5lcg== SmF2YVNjcmlwdA== IGVudGh1c2lhc3Q= VGVjaG5pY2Fs IGRpc2FwcGVhcmFuY2U= IGFjZXRhdGU= IGpveXN0aWNr QXJhYmlj IGNvcnJlbGF0ZQ== cmVjb21tZW5kYXRpb24= IGN5dG9tZXRyeQ== IE5hc2h2aWxsZQ== IG11cm11cmVk Q09OVEFDVA== U1VNTUFSWQ== IElzc3Vlcw== UmVhcnJhbmdl IFlBTUw= IFRFTVBMQVRF IGFteWxvaWQ= 44On44Oz IG1lbGFuY2hvbHk= bW92aWVsaXN0 6aKc6Imy Kik7 NTk0 NjI3 OTE0 QnJpY2s= SElE UUU= Uk5T VGF4b24= VUFT Vm91cw== YnVuY2g= ZGNs aW9sb29w a21lYW5z bG5hbWU= bHJ1 dGluZXNz d2VydA== d2N0bA== fCY= w5M= c2Vpbg== c3RhdGVk IGNjdA== IGNvdA== IGlud2FyZA== ZWRpcmVjdA== IG5weQ== IGRzcA== IGh1 IHVwbA== IFPDo28= IFNPTA== IElycmF0aW9uYWw= IEFp IENyeXB0 IHNlYXRpbmc= aW1hY2g= IE11c2U= KCclKA== ZXJzaGlw KipdKA== Z2V0cmVzcG9uc2U= IEJyYWdn c2V0RGVmYXVsdA== YWNyb3Nz b21ldGVycw== YW5zaQ== IHByaW50bGlzdA== YWN0dWFsbHk= ZWxsaWRv IHhtb2R1bGU= IHVubmFtZWQ= aWVudHJhcw== IG5lYnVsYQ== IG5lY3Jvc2lz IHVwaGVsZA== bGVkcw== YXVsZWQ= IG51bWE= dmFsdWVDaGFuZ2Vk MTkwOA== QVJEUw== IENoaWVmcw== IGludG94aWM= IGNyZXN0 bG9ja2luZw== IGAl IHBhdGhvZ2Vu RXhpdGluZw== IHt9LiIu cHJpY2VsaXN0 TGlzdE9m IHN0YXR1ZXM= 44Gw YXV0b2RvYw== YXJuaXNo IFhQ IGxhc3Rz IGltcHJpbnQ= IGltcGx5aW5n c2du ZWtz SVNTSU9O Z2VuZGU= IHJlZnJhaW4= Rm9ybUxheW91dA== IGZ1bGxlcm1k 44Kr IHN3b2xsZW4= RklFRA== YnVpbGRkaXI= IGVudW1lcmF0ZWQ= IGluc3VsYXRpb24= c3RhY2tz UGhlcnNvbg== UG9saWNpZXM= IE1hbmNo Y292ZXJpbmc= IHdhcm5z IHdlaWdodGluZw== IGVwaXNvZA== IGVycm8= Y2VsYWlu UGFnZVNpemU= YWxsb3dz IERhdmlkc29u IGluY2Fybg== cHJvZHVjaW5n IEdyYWFs IOaO bWFnbmV0 b3NwaGVyZQ== IGdhc3BlZA== SXRlcmF0aW9ucw== IGFsbGVnZXM= IGdhcm5lcg== IHBldHR5 YW1pbm9jYXJib255bA== IElzcmFlbGl0ZXM= YXNpb25hbGx5 IFNrdWxs INC60LvQsNGB0YE= IGVuaGFuY2Vz YWJpbGlkYWRl 6Iez IGhvbmVzdHk= SW1wcm8= IGluaXRpYXRvcg== IGRpdmlzaWJsZQ== IG1ldGhhbmU= IGFkbWlyZWQ= 5Luj6KGo IHdha2V1cA== IGJvbWJlcnM= IHB1cHBldA== ZGVwYXJ0dXJl 5o+Q5L6b IHN0YWJpbGl6ZQ== IEh1cnJpY2FuZQ== IGNvbnNvbGlkYXRl dGVsZWdyYW0= IHJlY2VwdGlvbmlzdA== IGFkb2xlc2NlbnQ= IG1vc3F1aXQ= 6Iux IG1ldGFzdGFzZXM= IEJlZ2lubmluZw== KCc9Jylb 55S15b2x IEJpbmRpbmc= IGVudHJlcHJlbmV1cnM= IE9CSkVDVA== IGRlZHVjZQ== IFNleWNoZWxsZXM= IGZvbmN0aW9u IEFsYmFueQ== ZGl2aXNvcg== IGPDs21v w7xsbGVy QlVMSw== aGVhcHB1c2g= IFNpY2lseQ== IGxlZnRvdmVy IHVucmVsaWFibGU= IGRpbGVtbWE= d2N0bG10 ODI5 Qk1Q Rk9SVA== RmVkZXJhbA== SmFzb24= SlVO Tmlj TnRo UGl0 UEJT UGtn Um9u U2libGluZw== Y2F0ZQ== Y2FuY2Vycw== ZGxl ZGllcw== Z210 bGFncw== bUdhbW1hRA== bm9kZWxpc3Q= cHVuY2g= cmFuZ28= c2xv c3Jz dWlzaA== u78= 4oaS 5qQ= IO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vQ== aW5hdGVz b25jbGljaw== ZW5lcw== IGN1cnJlbmNpZXM= YW5vbnlt IGZ1cw== IHBhbmQ= IHBpdHM= IHBhaW5z IHBpa2E= ZWRpdGlvbg== IGhvZw== IGxpbmFsZw== bXBm IGVjaA== aXN0ZW5jZQ== IFNVTQ== IHN0ZXdhcmQ= b21hcA== dW1ibw== bnRs IEFzcA== IENhdXNl IENVU1Q= IENhZsOp aWZmZQ== IGJlZQ== IGJlZXM= IFByZWNpc2lvbg== IE1vaW4= aHRva2Vu IHdpdGhzdGFuZA== Y29uZw== IEZL YXRoaW9uZQ== IEJDRQ== IERvY2s= IERhZGR5 IFJpdGE= IExveQ== KCItLS0= IFdhc2g= IFdyYXBwZXI= ZW11bGF0b3I= b2NvYw== IEdSRUVL IEVMRQ== IEVkdWNhdGlvbmFs IGNoYXNlZA== MDEzNA== ZGF0YVR5cGU= IDMzNw== dHJpY2FsbHk= IHBsYWd1ZQ== IHByaW50YWJsZQ== c2hvY2s= IHByZWNsdWRl dGV4dEVkaXQ= IGNhbmtlcg== IDQ2MA== IHBhcmNlbA== ZW5zb3JlZA== IG5vc3Ry MTkyNg== T1JH YXhobGluZQ== IHN1Ym9yZGluYXRlcw== IHNwaXQ= Il1dKQ== IDg1Mw== IGVuZHVyZWQ= IGJhY2tlbmRz IHBoYXM= U2V0SW5wdXQ= IHJ1bndheQ== IGhlbHBsZXNz IFdlaW4= IGJsaXp6YXJk cmFub3M= cHJpbWl0aXZlcw== c2VhcmNoaW5n IHBsYXlncm91bmQ= dGVtcGZpbGU= QVBT IHNsdXQ= IGNsZWF2YWdl dGFpbGxl IFpu b2hv ZG9jaA== IG1vZHVsZWF1dGhvcg== IENsYWlyZQ== ZW1wcmVzYQ== ZXhlY3V0ZWQ= IGJyaWNrcw== IGVmZmVjdG9y IGRlc2NlbmRhbnQ= bW9kdWx1cw== IHN0YW5kaW5ncw== IGJlaGF2aW5n VEhVTUI= Q29uZmlncw== IENvbW1hbmRz Y29uc3RyYWlu Y29uc3RyYWluZWQ= IHBheXJvbGw= IFJlc2lzdGFuY2U= T3Jk QW5ub3RhdGlvbnM= ZGVueQ== VElTRQ== IEFkdWx0 IGZpZ3VyaW5n RVhQRUNURUQ= IGluZmFtb3Vz TU9z T3B0cw== IE1hcmluYQ== IE1hcmxleQ== RFJD RE9G UmVnYXJk dW1iaW5n IGltcGxhbnRlZA== IEVuam95 IGRldm9pZA== IFBvbGFy V2hpdA== IGZvcmVnb2luZw== aWN1bHR1cmFs IG1hc3NhY3Jl aGFtbWVy IFNjaHVs UEVSSU9E IE9yZGVyZWQ= IHBhbmlja2luZw== IHRydXN0ZWU= IGJ1bGx5aW5n 5rOi dXZyZQ== R0Z1Wg== IG5vdmVsaXN0 IHByZXBhcmVz IExhYmVsRW5jb2Rlcg== aGV0aWNhbGx5 a2l0Y2hlbg== 5rWP6KeI Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= 6Z2S MTAwMDAwMDA= IGluZm9ybWF0aW9ucw== IFBSSU5U IERpc3R1dGlscw== IGNyYW1w IGJhdHRhbGlvbnM= IGdyYW5pdGU= IEh1bnRpbmd0b24= 7Ke4 UGVuYWx0eQ== IHRhY3RpYw== c3BlY3Rpb24= IGNvZGlnbw== IE1jQ2FydGh5 IGVpZ2VudmFsdWU= IGZhc2NpbmF0ZWQ= dmRN IHByZXRlbmRpbmc= IEVMSVNB IGdwaW8= IHBhdHJvbnM= 65Ok 562J5b6F IGVtYnJ5bw== 44OD44OI ZGVjbGFyZVByb3RlY3RlZA== IHNuZWFr IHN0eWxpc3Q= IGluc3RpbmN0cw== MDAwNzQ1NA== IHBlcm1lYWJpbGl0eQ== VEhSRUFEUw== IFNtb2tl IFBlbnRhZ29u IGxvY29tb3RpdmVz IHByZW5kcmU= 6KeE5YiZ IMOcYmVy IFJvZHJpZ3Vleg== IGp1c3F1 PT8iLCg= IHBydGRpYWc= UVJTVFVWV1hZWg== bWV0aHlscGhlbnls MDIwMA== NzQ4 OTM0 OTc3 Qk1D Rml0dGVy TVZB TmF6aQ== UEVU UGljdHVyZXM= U2Q= U3ByZWFk VHdlZXRz VHJlbmQ= Vlk= VmVo WE4= ZHNw ZWFu ZXNlcw== ZmFiYg== aHVn amlh anVyeQ== am94 bGhl cHZhbA== dWxvc2U= dm5m eGo= eVk= fTpc 7LA= INGA IOS/neWtmA== IHTDo28= c3RpYWw= ZW5iZXJn ZGVsZQ== IHNwcmludA== IGJpa2Vz bmRp IG10cg== IG10eXBl IHJld2FyZGVk IG5pcA== IG5vdW4= IGl5 IGzDrQ== IFR3aW4= MDA0OQ== dW1tYXJ5 IEFBQQ== IEN1cnJlbmN5 dGVyYQ== IHlhbmc= IHlsaW0= cXVv IG9uZGU= IEZlcnJ5 IGFsb3Jz Z2V0TnVt Z2V0TWVzc2FnZQ== Y2xpbg== IG5vdG9y b3Jlc3Q= b3JlY3Q= IEJ1bmRsZQ== IHByb2NsYWltZWQ= IExhYnM= IEhhcHA= IEhDSA== IFdpbnM= IEd1cg== IEdhaW4= IEdhaWw= IGltcG9ydGVy IGVsbw== bWFq IDM0Mw== aWRlYXM= c2hpcnRz IGNsaXBwZWQ= IEphdmFzY3JpcHQ= IHByZW9j IHVuaWxhdGVyYWw= IGRvc3NpZXI= IDQ2NQ== SW5ncmVzZQ== Z2ViZW4= IFZpbQ== IHVwd2FyZHM= IEthbmc= IHBhcm9sZQ== IEluaGVy IHNhaXM= IG5ld2NvbQ== bW9vZA== cHluZXI= IFN0b3Jlcw== YW5raW5k IHN1YnNhbXBsZQ== SURG UHJvZw== ZW5jZW50 IG9wdGVk KFteXA== cmVnZw== IHJlbGF0b3I= aWthbg== YWlyZGF0YXNldA== VVJT IGRhdGF0 MTAwMw== c2lnbmF0dXJlcw== U2Vh U2Vlbg== cmVjb3JkZXI= bGV0Y2hlcg== IHNsYXA= 0LjQsw== IG11bHRpbGluZQ== U1NEUg== YmJsZXM= cGVudXA= ZmFjdHVhbA== aGFzaGVk Licr SXNSZWFkaW5n 4YCc dGltZXNoZWV0 IEFkb2xm IFVzZXJNb2RlbA== dWto U3Bpa2U= IE1hcnNo IE1hcmNlbA== cGNk 55Sz IFN0ZWZhbg== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg ICovLA== IG1pc3NpbGVz IGluZmx1eA== IHRyb3Bo UGFnZVRva2Vu aXBlZw== IERpc3B1dA== 5LiA5LiA R1JBRA== U1RBVElTVElDUw== IOuP TWV0YU9iamVjdA== IE1BSUw= bmJyZQ== c3RlZXJpbmc= U3Vtdw== IG93bmluZw== TWFpbkxvb3A= cmVkdW5k IHNoZWxsdG9vbHM= IGNvbXBhcmF0aXZlbHk= IE1hdHJpeg== IERlY29kZXI= IHRydXN0ZWVz RGVwbG95bWVudA== IHNjcmFtYmxlZA== U01BTEw= T1BUUw== IENIQU5ORUw= IHNodXR0ZXI= IHBsYW50YXRpb24= U3RydWN0dXJlZA== eWVzbm8= 6Zmi IGFkamFjZW5jeQ== IERPTUFJTg== IFN1bW1pdA== XX1dLFt7Ig== IEZ1bmN0aW9uYWw= b2NvbXA= dG9rZXQ= QVJDSElWRQ== IEh5YnJpZA== cGFsaW5kcm9tZQ== 562W IENvbnN1bA== 44Gn44Gv IERlbGV0ZU9wZXJhdGlvbg== IFJldml2YWw= aGhoaA== IFdoZXJlYXM= IGFjYWRlbXk= IFNvbHpoZW5pdHN5bg== SGFydmFyZA== cmVwcmVzZW50YXRpb25z cHJvZmVzc2lvbmFs VmFyaW91cw== IERldm9u IGdlc3R1cmVz b3Rvbmlu IGxlZ2lzbGF0b3Jz YXVudGluZw== IENvbWlzc8Ohcmlv cXVpY2tzdGFydA== IHNjcm9sbGJhcg== 5oOz IGdyYWNlZnVsbHk= IE9zbG8= IGZlcnRpbGU= IEx1Y3k= IGZyYXVkdWxlbnQ= IHJldGFpbGVycw== ZW5ldHJl IGV4ZXJjaXNpbmc= IHJkZmxpYg== IFZlbnVz UnVzc2lh Ojo6Ojo6Ojo= IGdhbGxlcmllcw== IGZ1bGZpbGxpbmc= IEhhd2FpaWFu RGFya1N1c3k= IG1lbnNhZ2Vt IGFydGljdWxhdGU= IFByZWZlY3R1cmU= b2N5dG9nZW5lcw== IHZvbHRhZ2Vz 0LXQs9C+ IHRhYmVsaW5oYQ== aHVyc3Q= IHByb2Zlc3NvcnM= IERlcGVuZGVuY3k= aGVyb2t1YXBw IGNvbW1lbW9y IERPQ1VNRU5U 56qX5Y+j TU9OR08= MDA1OTM2MQ== 5aC05ZCI IGVubGFyZ2Vk TkVTVEVE bW9iaWxlbmV0 Zmx1cmFuZQ== NTQ3 O3t7XA== Pyoq RXZvbHV0aW9u RXRoZXJuZXQ= RmFkZQ== Rmxh SE1N SXo= UHJlYw== UGFzdGU= U2Fucw== WVo= WWk= bHVtaW4= bWFzdGVycw== bm91bg== cHVuYw== dG1pbg== d2ludGVy d3Rm sdC+0YI= 4p0= 5oI= 55c= IHRhYmxh cmVhbHM= IGbDpQ== IGluZGlzcA== IGJtcA== IGJkbQ== IG50cw== YXN1cw== IGRydW5rZW4= IGxpbnQ= aWxhZ2U= cmFlbg== IHRoYWw= IGVtaW5lbnQ= b2x1dGVseQ== IGRlaHlkcm9nZW4= ICh7fQ== IGdq IFRpdGFu MDA0MA== aW50cg== b2RvdA== YXRha2E= IFte IEZhdGU= IEZ1bms= IEZQUw== Z2V0VGltZQ== IHdoaXBwZWQ= IERpZXM= IHByb3Rvbg== IG1lZ2E= IFdpZmU= IEdhbmc= IEd1ZXN0 IHNoYXBpbmc= IE9ibGFzdA== IGxleGlj Zm9ybUxheW91dA== aWRlbWk= bXBsZWQ= IG91dGxpZXJz YXZhc3RhdGlu IEp1Yg== aWVmdA== IGNhbm5lZA== IFRocmVzaG9sZA== IEluZm9ybQ== IG9ic3RydWN0 aW5reQ== QVRT IGRpc2JlbGllZg== IGRpc3BlcnNlZA== Y29udGFpbmVk IG1hbmtpbmQ= IG15bGlzdA== U0VQQVI= dmVuc2g= IENobw== Zm9ybWF0dGVycw== IGNsYXNzbWV0aG9k YXducw== IHJlZ2ltZW4= IGF0dHJpYnV0aW9u cHJ0 LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t RGF0YU9iamVjdA== YmVoYXZpb3Vy dWNoYXI= RmlsZURlc2NyaXB0b3I= MjMxNjg= IEFyY2hpZQ== IGRvbmF0ZQ== dWNoZW4= QUNB b2JqYw== YnJpY2tz IHByaXM= 0YLQtQ== IGVtcGF0aHk= IGJyZWFrcG9pbnQ= 0LjRgNC+0LI= KV0oIw== dHJ5aW5n IGRlbGltaXRlZA== IHBhcnNlcnM= IG5ldHdvcmtlZA== 5LuK T3V0bGluZQ== Lik/ LiIpLg== IEFwcHM= UkFOSw== IE1heWE= IGdyZWVucw== IG1vcmFsaXR5 RGlzY291bnQ= bGF1cw== IEVucmlxdWU= IEFzc3VtZXM= UmVwcg== ICctLScs IGFncmVlaW5n TmVpdGhlcg== 4KSy IG1pY3JvcGhvbmU= IEVYUA== Y29va2Vk IE5vdGVib29r IGNsdXN0ZXJlZA== IH4v IGFybW91cg== Y25m dW5pRkQ= TWVkaWNhbA== INeZ ZWxmYW5k IHBldGl0ZQ== IEJlbmVm IGdyYW5kcGFyZW50cw== IGRyYXN0aWNhbGx5 IFNRTEFMQ0hFTVk= U2t1 IEp1bGl1cw== IGNvbWZvcnRhYmx5 IGZvcmdldHRpbmc= IEFuYWx5dGljcw== T05USVRMRQ== IFJob2Rl IGt3YXJn IGZlbGxvd3M= IHByYXllZA== IGZhdWx0eQ== Y29kaWdv V09STEQ= IG5hbm9w 55m6 QXBwZW5kaXg= QmlEaW1lbnNpb25hbA== IHRpZHk= 6Ieq5a6a5LmJ ZmFpbHVyZUV4Y2VwdGlvbg== aW1tdW5l bWVhc3VyZW1lbnRz Y29tcHJlc3Nvcg== IHZ1bG5lcmFiaWxpdGllcw== R3JhZGU= IM+D SGVhbHRoY2FyZQ== IEludmVzdG1lbnQ= REhCQQ== NjY2NjY2NjY2NjY2 IEFobWFk 5Yqf6IO9 bWVhc3VyZWQ= RVBTSUxPTg== IGV0aG5pY2l0eQ== IG1ldGFzdGFzaXM= 54i2 UGlja2VyQ3RybA== Y29uZmxpY3Rz IGNsZXJneQ== IExhZ3JhbmdpYW4= IE5pY29sYXM= IFZldGVyYW5z QXJhYmlkb3BzaXM= IGNvbnRyYWRpY3Rvcnk= IGNhdGFzdHJvcGhl c3RyYXRlZ2llcw== MDAyMDYwOQ== IE1pY2hlbGxl IGFib2xpc2hlZA== 5ri45oiP TUlYRVI= cWhpZXZvZmp1Y2RubWJweGF6cmxrdHdzZ3lxaGlldm9manVjZG5tYnB4YXpybGt0d3NneXFoaWV2b2ZqdWNkbm1icHhhenJsa3R3c2d5cWhpZXZvZmp1Y2RubWJweGF6cmxrdHdzZ3k= IG15c2l0ZQ== IMO2ZmZlbnRsaWNoZW4= IOaPkA== IHViaXF1aXRvdXM= bWl4dHVyZQ== IE1FU1NBR0U= IEVtbWl0c2J1cmc= IGdldFRvb2xCeU5hbWU= Ii4i IyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKio= LVs= LuKAlA== NTc5 ODk2 QXJh QVZF QkFUVA== QklUUw== Q3J5 RGFzaA== RWxp Rm94 R0VT SEJveA== TE4= TWQ= VGlja2Vy VWlk Ymlncg== ZmFr aG9yZXM= aVBob25l bWl4aW4= c25hbWU= dcOnw6Nv eHNp emFobA== emRH w74= 7Y8= IOS4ug== ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj IC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4u aW52ZXJ0ZWQ= aGVpZ2h0cw== IHdpcmVk IGluc29s bmRsZQ== IGRvd250 ICcqKg== IGxhdGNo IGxsZGI= IGxvdW5nZQ== Y2VtaWE= ICgtLQ== IGZvcmdlZA== dGhp dGhhbmtz IEFCUw== aW50ZXJuYXRpb25hbA== IGJlZXJz cm9tYQ== IHZnYQ== dW5pbmc= dW5hdmFpbGFibGU= b2RvbWV0ZXI= IFByYXllcg== IE1lbnRhbA== IE1BR0lD KCctLS0= ZW5kbA== IEZGVA== IHJkYXRh IGFsZ3Vu IHdoaWNoZXZlcg== Y2xlbg== IEJk IEJOUA== IGFuYXRvbXk= IFJQaQ== IEhvaw== IEhhc3Rpbmdz YWNpZXI= aW5kcm9taWM= IE9zdA== IGxlc3Q= b2Js IDMxNA== IDM0Nw== a2V5TnVtYmVyR2xvYmFs KS5dKA== IGFkaGVzaXZl Y29vbg== Y29vcg== IDQ5NA== IGFsbGE= bXNwYWNl IFZpb2xldA== SU5GT1JNQVRJT04= IHVwbG9hZHM= bGVuZXNz IHBhcmFsbGF4 IEluY3JlbWVudA== dmVudGFuYQ== UmVhY3Rvcg== ZGF0ZVRpbWU= aW5pdGlhdG9y Zm9ydW1z IGludGVycm9nYXRl IHN1YmNvbW1hbmQ= Zm9ybWF0aWNz QUxBUk0= IG9wdGlj aW5wdXRmaWxl IHVuZGVyd2F5 IGJhY2t5YXJk IGF0dGFpbmVk IG9wZW5pZA== MTc5Ng== LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t Y29tbXVuaXRpZXM= U2V0Rm9udA== IGFjY3VzaW5n IHRleHR1YWw= aGF0aWM= IGRlY2ltYWxz IHN1cnJvZ2F0ZQ== R2V0dGVy c3dpcGU= IGNvbnN0cw== fVwp bm93YWl0 IFNoYWNr IHFi IHFyZXN1bHQ= U2hhcGVz U2hpcHBpbmc= VU5JT04= RW52ZWxvcGU= IGFudGlt w6Rubg== Y3BhaXJkYXRhc2V0 Qm94ZXM= aWZ0aWZ5 bW9zdGx5 IHRhc2tMaXN0 QW5vbnltb3Vz IHVyZ2Vz Y2FwYWM= IGV5ZWQ= IFBlcm0= IGluZmluaXRlbHk= Zm5tYXRjaA== UGVyZmVjdA== bGF0eg== NTQzMg== IHJlc3BlY3RhYmxl IGJlZ2lubmluZ3M= IFdpbGxpZQ== aW52YXNpdmU= bGFpZA== IHJpb3Q= IHNlbGVjdGl2ZWx5 IEZyYXNlcg== IE5lZWRz U29vbg== cmlnTnVsbA== TWludXRl KX0+ IGlwYWRkcmVzcw== IFRyYW5zaXRpb24= YnJlYWtlcg== IHJlZGlyZWN0cw== QXNzaWduZWQ= IGNvbXBldGVuY2U= IFN5bXB0 KD8s IFJlbW92ZWQ= 5bim IGJpbm9taWFs IERyaW5r IFNlbmF0b3Jz 5bCU YmlnbA== UEhPTkU= IGV4cGxvaXRz IGNlbnRyYWxpemVk IE92ZXJmbG93 IHVuYWZmZWN0ZWQ= IGluaGliaXRz 6ZmF MjAwNzExMTQ= T3JpZ2luYWxseQ== IGRvdWJ0ZnVs 44O844OI IHBsYWlubHk= IFJlcG9ydGVy 572R6aG1 IGhhdHRl IHR1cmY= IHR1cm1vaWw= Y2FyZXQ= IFNsaWNl IGhhbGxz IHRoYW5rZWQ= IHF1YWRyYW50 IGRpc3Rpbmd1aXNoaW5n ZHluYW1pY0dyb3Vwcw== IGJjcnlwdA== IG1pbGVzdG9uZQ== IE9wcG9ydHVuaXR5 IGhhY2tlZA== bW9ybmluZw== IGFkbWlyZQ== QnVsZ2FyaWFu IGRpZ2VzdGl2ZQ== VHJhY2ViYWNr aXNzZXo= VFdP IFNpbmNsYWly dGVjaG5pcXVl VG9yb250bw== IHVuZGVyc2NvcmVz IGFscGhhcw== IO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vQ== IGFjY2VsZXJhdG9y 4paI4paI4pWX IGNvbnZleWVk ZWFnZXJseQ== IFNOTVA= SmltbXk= 0L7Qt9C0 IMSR Y2VwaGFkbQ== Z3JpbXM= IHNlcXVlbnRpYWxseQ== IERpcmljaGxldA== IHJldmVyc2luZw== IGNvbmR1aXQ= 6aG555uu ZGlzY2lwbGluYXJ5 IFdSSVRF Y2hyaXN0bWFz KC4qPyk8Lw== c2V0VGFiT3JkZXI= 66OM QmVhdXRpZnVsU291cA== VmVyYm9zaXR5 cnVudGFzaw== IFRpYmV0 5ZON5bqU IFBhdWxv w6l0YWlz IGV4YWNlcmI= KC4uLg== NTQz NzMx Py4= Qm93 QnVkZHk= Q3Y= Q3Jvbg== Q3VsdHVyZQ== Um0= U2Ny VGV0 VGFpbA== V3M= WEQ= WFo= XV0pLg== YcOxYQ== Y2N0 Y2V0 Z0E= cm9uZQ== dHZt eGZvcm0= ey4= fi0= IOWIhg== cmVzdHI= cmVucw== b3JhbWE= IGPDqQ== YXJm IGJ1bg== IHJlYWxz IHJlaXRlcg== IGRyb25lcw== IGViZW4= IGRlY2VudHJhbA== IFRyb3BoeQ== IFNhcw== IFNjdWw= dGhyZWFkZWQ= IHN0b21w IElw IHZpcA== b2RvbnQ= IDI4Ng== IFBlbQ== IFBhZ2Vz IFBBQ0s= IE1hc2g= IE1vcnJvdw== IE51cg== ZW5kVGltZQ== IEZyb3N0 IHJ0eXBl IHJoZXVtYXQ= IEJBTA== IELDvA== IFJS IEhpcm8= c2NvcGVk IHNoYWtlbg== IE9MRA== dXN0aWM= a2V5bWFw XSknLA== IGNsYXNoZXM= Zmlncw== IHVuZGVm IHVubG9hZA== IGFic3RyYWN0aW9u IDQxMQ== IFZpcnQ= IFZhbmRlcg== Ym9sZQ== IEtlbmQ= IEtpY2s= IEthZmth VGhlTXVzbw== aW5rbGVy ICgnPA== IG9wcHJlc3Npb24= IGFnb255 MTkzMQ== QVJJRVM= YXhpc3NpbW8= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== VGhpY2tuZXNz bm90YQ== YmxhYg== aWt6 aWt1bQ== IGhhbmRzaGFrZQ== VGVzdExvYWRlcg== b29kbGU= dm9sdmVy cGFydGljdWxhcmx5 VGV4dFZpZXc= IHBsYXlhYmxl eGJsb2Nr IHZpZXdzZXRz dG9waw== IGVzdGFz IGV4cHJlc3Nlcw== QWxiYW5pYW4= IG1vZGVyYXRvcg== IHBlcnNvbmFz c2Vzc2lvbmlk VXBk LCdc CQkJCQkJCQ== aXRhbGlj YXJyYXRpdmU= bG9jYWxpemF0aW9u Q0FDVA== bmFpcmVz TUFTVEVS IGV2YXA= cmFsdGFy IHNob3J0ZW4= dXN0ZXJpdHk= TWFuYWdlZA== UExD Y29tZXM= UHJlbWl1bQ== UmV0dXJuZWQ= IGNtZGxpbmU= IElERg== w7ZsbA== VHJhbnNpZW50 IGdlaHQ= IEVuY3ljbG9wZWRpYQ== CgkJCQkJCSA= IGV4Y3VzZXM= IFF1aW50 YXNzZXJ0UmVkaXJlY3Q= RmxvcmE= c2VtYmw= IFVwZGF0ZXI= bG9zdXJlcw== IEltYWdlRGF0YUdlbmVyYXRvcg== IGN1bHRpdmF0ZWQ= IMOpcA== IGJsYW5rZXRz U1RBVEVT XSxbXSxb ICcpJzo= U3BlY2lmaWVk REFW IGV4YW1pbmF0aW9ucw== TE9HTw== TE9HWQ== Tk9URVM= IHRydXN0cw== UG9zdGVk Q0lB IHNvbGlkdXM= IGVuam95YWJsZQ== IHBhbGF2cmE= dGlsZUltYWdl IHNwb3RsaWdodA== IGZsZWVpbmc= YWJvdXRz INC40Lw= IE1hbGNvbG0= U3RhdGlzdGlj b2x5dGlj IHJhaWxyb2Fkcw== IHZlbnRyYWw= IGVtb3RpdmU= RWxzZQ== IO2BrA== IHZpcnR1ZXM= IGFkdmVydGlzZWQ= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IEhhaWc= IHdoaXNrZXk= 4LeP IGFkbWlyYXRpb24= RUxMSVBTSVM= IG1lbW9pcnM= aW50ZXJlc3RlZA== DQoJCQkJCQkJCQkJ IGNlcmFtaWM= IEFzdG9y Ii8+XA== U29mdG1heA== IFdlbGxlcw== 44O844OJ IHBhcmVjZQ== IHZvd2Vs IHRlcnJpZmlj IHN1cnZpdm9y IGRpdmVyZ2VuY2U= IHN0cm9kZQ== 7ZWc64uk IGV4ZW1wdGlvbg== aXRrR2VvZGVzaWNBY3RpdmVDb250b3VyTGV2ZWxTZXRJbWFnZUZpbHRlcg== IGV4cGxvc2lvbnM= IENIQVJBQ1RFUg== UmVjdXJyaW5n IFJlc3BvbmRlbnQ= IHBpdm90YWw= IG1pZGZpZWxkZXI= IGFzdG9uaXNoaW5n IFJlbGF0aW9uc2hpcA== QWxnb3M= 54mI5pys IEx1dGhlcmFu IEVtcGxveWVlcw== IENyaXNpcw== IGp1cmlzZGljdGlvbmFs SW52b2ljZXM= 5L2G5piv IOq4sA== b2dsb2Jpbg== IHByb3RhZ29uaXN0 SVJPTk1FTlQ= 4Liy4Lg= IGhlc2l0YXRpb24= IERldXRzY2hsYW5k RGlmZnJhY3Rpb25DVA== IEZBSUxFRA== IGFsYmlubw== UFlWT0JKRUNU ZmFiYmlvbmU= JOKAmQ== KX4= PyU= PzovLw== Q2Fk SHVsbA== S2g= S25pZ2h0 TWluZA== TW9sZWN1bGU= UWFlZGE= UVNwYWNlckl0ZW0= U3o= VHJhZA== VGFrZW4= VHJpbQ== VUlD VnVs VkVORE9S V0c= V2Fs WW0= WW91dHViZQ== ZHJlYW0= aHJh c3BvcnRz dGxpc3Q= eXNjYWxl o4A= 4LQ= 5qk= IOS7jg== ICAgIAogICAgCiAgIA== ZXJ2 IGNhcHBlZA== IGZ0aA== cm9ja2V0 aW5nZXN0 IGlub3JkZXI= IGJyaXQ= aWNpZGFs ZXNvdXJjZQ== IG5vYw== IGRhbmNlcnM= ZXRleHQ= ZWxi IGlocmVy dXJhcg== ICLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv70= IFR1Y2tlcg== bG9wZWQ= IFNSVQ== IFNBUlM= dGhvcg== MDAyMw== IENhcmRz IENpbmVtYQ== IGJlaW0= c2VyaWU= YW1m YW1vbmc= IHllbGw= IDI5Ng== IFBhaXI= IFB1cmNoYXNl IE5TVw== cXVhdA== IEZhdWx0 IEZseWluZw== IEZpY3Rpb24= IGFsbGVz Z2V0RmlsZQ== Y2xhc3Nl 4oCV IERpcmFj IFJpc2luZw== IFJQTQ== IFJOUEM= IFRoZXNz aXBhdGlvbg== aW5kaXI= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IGtq IGtkZQ== IDMzMg== IDM4Mw== aWJhbA== ZXB5 ZXBoaXN0bw== c2hvZQ== YWRkRGly IHJvc2Vz IHJvcGVz IDQxNw== IFRocm93 IFZD IEthdGhlcmluZQ== dGVzdGFwcA== IEluY3JlYXNlZA== IGNvbGxz b250YWI= IH19Jyw= RXJyb3JNZXNzYWdl IHF1YXQ= U0VMRg== IENoaW4= IHVzZXJuYW1lcw== aXJlY3Rvcnk= MTU1MA== bG9jdW0= IGZsYXJl IGZsYXc= IFJlY28= bm90YWc= DQoNCiAgICAg ZWVwZXI= REVMRVRFRA== Zm9yZWFjaA== PT09PT09PT09PT09PT09PT09PT09PT09PT0= IENvbnRy INCV IFhjb2Rl IDE4Njg= Y29ubmVjdFNsb3Rz IHNrdWxsZQ== NDg4Mw== IG1vZG5hbWU= ICRce1w= MDU4 IGF1dHJlcw== IG11bHRpZA== IGVudmlzaW9ucw== IExldmk= CiAgCiAgCiA= IGRpdmVydA== 55qE5Y+C5pWw IE5vaXNl IHNpZGV3YXlz Q29uZmlnRW50cnk= c2VsZWN0aXZl SW5kZXhlZA== IFVzZXJDcmVhdGlvbkZvcm0= IHR3aW5z ICIsIiIp dWtv VkVMTw== IFN0ZWFr RGlzY3JldGU= IGVyZm9s IHRlbnNvcmJvYXJk cHJvYmVz cm90YXRlZA== IGluc3RhbGxhdGlvbnM= IG9wdGltaXplcnM= cm9tZXRyeQ== IGRldGVjdHM= YW5ub3RhdGVk 5qCP IFBlZXI= IHBob3RvZ3JhcGhpYw== IGNyaW1zb24= cGlja2Vk 5o2f ICc8Jzo= IGFycmFuZ2luZw== IG1vdW50cw== IEhvbHQ= Z2l0aHVidXNlcmNvbnRlbnQ= IHN0YXJ0ZXJz IFNPQw== KCc8JQ== IHdvcnRobGVzcw== IE1hY21pbGxhbg== IHRpdGFucw== IHNodXR0bGU= dGlsZUl0ZW0= RW1wbG95 IEJvb2tjaGlu IHRleHRl IHN1cnByaXNlcw== w6Ju TFVY aGFsYQ== QXV0aG9yaXplZA== IExvYWRQaXhtYXA= IElPU3RhbmRhcmQ= IG11bHRpcGFydA== UGFyc2VFcnJvcg== IFBvaXNzb24= QXV0aGVudGljYXRpb25FcnJvcg== IHJlc29sdXRpb25z RVNQT05TRQ== IHBsYW5ldGFyeQ== 6ICB IHJlYXJyYW5nZQ== IERJUkVDVElPTg== ICIqIiw= IHBvc3Nlc3NpdmU= IEVxdWlwbWVudA== IFdhaXRpbmc= IHByb3VkbHk= TUVSQ0hBTlRBQklMSVRZ IHByb21wdGluZw== RXN0aW1hdGVk SEFORExF IElzYWlhaA== IGR1YmlvdXM= aWNpYXJpZXM= IE1JTUVNdWx0aXBhcnQ= IEN6ZWNob3M= RElHSQ== IGFwcGVsbGFudHM= 5LqL5Lu2 QXp1cmU= IHJldmVyc2libGU= IGNvY29h 44KI44GG UEFZTE9BRA== IFRyYWRpdGlvbg== IFRyYWRpdGlvbmFs VElNRVI= RG9ja1dpZGdldA== T1JJR0lO IEFyY2hhZW9sb2dpY2Fs IFJhdmF6 6K+05piO 44OV44Kh IGFuY2VzdHJ5 aHlkcmF0ZQ== IE1vcm1vbg== IFNjaG5laWRlcg== IHBhcmNobWVudA== IEF6ZXJiYWlqYW4= dmVuc2h0ZWlu YXNzZXJ0UmVkaXJlY3Rz Ky8= LCIs Nzk2 ODcw ODkw Oy0= Pnt7 Q2M= Q0RT Rc68 SEtFWQ== S1E= TW9iamVjdA== T3RoZXJz UUlBTg== UlNPUw== U01B VHNldA== W3s= Y2FtZWw= ZHNs ZGFzaGVk cGNhcA== cXo= cXNpemU= dGFrZXM= dWlu dXZlcg== d2dldA== w5w= 154= IGljeQ== IF5c aW5pZGFk IGFwcmU= YXRsZWFzdA== c2V1ZG8= aGVhbA== IGN0YWc= IGZhcnQ= IHB1bnRv bWVsaQ== IGluZGU= IHJlcHJp dXJhbmRvbQ== IGx4 IGRlcG9ydA== ICguKg== b3J0aG8= IFN1bmRlcmxhbmQ= IENvdA== IENhbmR5 IENvcGVuaGFnZW4= dGVyYnVyeQ== IHNlbXByZQ== X18nXQ== IFBvaw== IiwpLA== IEZ1cm4= aXphZGE= IGFuYXRvbQ== b3Vya2U= IERXT1JE IER1cGxpY2F0ZQ== IHByb3Q= IG9yaQ== IEx1bQ== IEhvdXNpbmc= IFdhZGU= IEdvaA== IEVGSQ== c3RydWFs IGNoYWluZWQ= IHNoYXJrcw== dWdp IDM5MA== IDMzNg== Zm9ybWlu ZXh0cmVtZQ== IGFyZA== IEpP IHhj IFZhZA== IFZveQ== dXJscmV0cmlldmU= IGJ1dGNoZXI= IGRpc21hbnQ= bGluZXNlcA== Z3JhZGVy bWF4aW50 IGxvZ2ljYWxseQ== YXJjaGl2bw== Q2hJUA== IENocg== ZW5jZXJz IG9mZmVuZGVy IG9mZmVuZGVycw== c3VibGltZQ== X3t9X3s= IHRyYWN0b3I= RXhjbHVkZQ== IFJlYmVs IG1heWE= IHBoYXJtYWN5 cmVkbw== RGF0YUxpc3Q= Q2xhbg== 5LiH cmVsYXRl IFByb3NwZWN0 IFhT IHNtYXNo b3JkZXJieQ== bW9ubw== b2ZmZXJz bWFpbHM= IGRpZmZlcmVudGlhdGVk ZXJyaWxs IGVtcGly NzQzNw== b3BlcHRpZGVz dGFnZ2Vy VU5EUw== IHBhcmVudGhlc2lz SU1VTQ== cHJvamVjdGVk Z2VuZXJhdGlvbnM= IGxpYmVyYXRpb24= SXRlbUxpc3Q= MDcy 44OJ IFB5Z21lbnRz IFB5VG9yY2g= IENvbXBvc2l0aW9u Q29tcHV0ZXM= SGFuZGxpbmc= TWFuaXA= Q291bnRpbmc= IGh5ZHI= cmVzb3VyY2VHcm91cHM= IGVtYmVsbA== cmFkb3I= IGhlYWx0aGllcg== IENhcnZlcg== Y2VydGFpbnR5 YWpv IGJvdGFu IHNldHVwVWk= IHdyb25nbHk= 5bqX IEJhc2VNb2RlbA== IGJlbmVmaXRlZA== TXVsdGlwbHk= IChbXSw= IGNvbnRyYWN0dWFs IGNvbnZlcnRlcnM= ICJfIik= 5bC+ IHBvbHltZXJpYw== IHZpbGxhaW4= 8J+R cGxhdGZvcm1z cXVhbnRpemU= UEFJUg== IGhhaXJ5 5Yy66Ze0 Y2hpbnNvbg== IGFtYml0aW9ucw== IGNvc2Fz VmlzaXRlZA== ZXF1aXR5 RElTSw== IENoZXNz IFN1cGVyaW50ZW5kZW50 UGVyc29ubmVs SW5pdGlhbGl6ZWQ= aW50ZWdyaXR5 Q2FwYWJpbGl0aWVz 6ZSA 5o+S5YWl IFdpbmNoZXN0ZXI= dHlwaWNhbGx5 IENhcmRpbmFs Q3JlZGl0cw== IGV1Y2xpZGVhbg== RXJybm8= 4Lax IHNwYXJrZWQ= IG1pbmltaXppbmc= IFdhdGtpbnM= IHN1YnNpZGllcw== IHBlcnNpc3Rpbmc= T2NjdXJyZWQ= IGFub21hbGllcw== IHBvbHltZXJhc2U= KCIuIilb 5Lu75Yqh d2l0bmVzcw== Y2VwaGFs IGdyYXBldmluZQ== IExpY2VuY2U= aW5zdGl0dXRpb24= aW5zcGlyZWQ= IHBlZGVzdHJpYW4= IG91dHJhZ2VvdXM= IGNvbnRlbXBsYXRlZA== MTkwMTIy c3ltcHRvbXM= IHNlaXp1cmU= VkVSU0lPTlM= IGNvbW1vZGl0eQ== IG9zdHJpY2g= aW5lbWF0aWNz SVRVREU= IExpdGh1YW5pYQ== IGh5ZHJhdWxpYw== IGJ1cmVhdWM= IGd1aXRhcnM= KSddLg== NTIz NzYx ODIx QWxk RFRZUEU= RXZ0 RnA= RkVD RkdG R2F1c3M= TGFrZQ== TUhU TkFTQQ== UXo= VGF5bG9y VGFtaWw= WHQ= Wy4= W10p YnNpemU= YmFuZGVk bGF3cw== cHB0 cmVyYWlzZQ== dGFj d2lz fiI= 2K4= IOS4jQ== IHRhcw== ZXJyZQ== IGFzdGVyaXNr IGNhbWlu IGNhZsOp YXLDoQ== IHBzeXM= IG9sZQ== IGluc2lnbmlmaWNhbnQ= IGJyaXNr IG1pZXV4 IHJlcGF5 IHJlbm92 IG7DrXZlbA== IGRzZA== IGxwYw== ICIpOw== aWdhdGlvbnM= YW1lc2U= YW1ldGg= IFRCaW5hcnlQcm90b2NvbA== aXN0aW5l IEN1bQ== dGVr YXBwbGljYWJsZQ== IDI4Mw== IEZ1cg== Z2V0SXRlbQ== IFJE IFJFTQ== IFdlbnQ= IGF0YW4= IEd1ZXNz IEdCUg== IGtvbA== aWJp a2V5ZnJhbWU= IGNsb3U= IEp1cg== IGNvbnRyZQ== cHJlcHJvY2Vzc29y IGFidXNpdmU= IFRoaW5raW5n MTA5Mw== IEtT b3Vzc2U= IGhhc2h0YWc= c29m IG9ic2Vzc2Vk Y29sb3JtYXA= IHBlcmN1c3Npb24= IGludG9s IFN0cmFpZ2h0 IHF1YXRlcm5pb24= MjUyNQ== bWF4cG9vbA== IEAj d29yZHByZXNz IHVzYWdlcw== aXNobHk= bWJI YXJjaGl2ZWQ= IGtuZWx0 IGJldGFz IFFhZWRh IFJldmlld3M= IGFzc2VydGlvbnM= bG9iag== bmV0c2NhcGU= IGJsdXJyZWQ= YXV0b3NjYWxl IHNtb2tlcnM= IGJlZm9yZWhhbmQ= Y2FsYQ== IGF2YWlsaW5n IEFsY29ob2w= IF0pKQ== IGNvbXBsZXRlbmVzcw== IiwiXA== b3BlbkVsZW1lbnRz IGdyYWls IGdyYW1hdGljYWw= MDUwMA== w6FuZA== IElORk9STUFUSU9O Z2VuZXJhdGl2ZQ== aXR1ZGVz cG9wTGk= w6R0dA== IE9ycGhldXM= IFJlc2hhcGU= IHNob3J0aGFuZA== VGVhbXM= IENvbXB1dA== IENvbXBpbGVy IGV5ZWw= IHRlYW1tYXRl YXJpbmdQdHI= c2lncw== 44CQ IGxhbmRzY2FwZXM= IFN0ZWVsZQ== XSsp Z29yaXQ= aWxpaA== IFJvYXN0ZWQ= 57uI IGJvdG9jb3Jl bWluZ3Rvbg== Y2hpbmVzZQ== IHJldmlld2Vycw== IG1pZGk= dG9vbGJveA== cHJlY2lw dXJiYXRpb24= IENvbWluZw== IFN5bWJvbHM= 5Y2a U2VjdXJl IFNPVVJDRQ== IHBvbHlldGh5bGVuZQ== IGhvbm9yYXJ5 VGVtcG9yYWw= IHNpbmdsZXQ= IG51bWVyaWNhbGx5 IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t IEJyb2Nr IEV2ZW50UGF0dGVybg== IGJyaWVmaW5n IHJlbGlnaW9ucw== IA0NCiAgICAgICAgICAgIA== b3JwaGlj IFdpbGxvdw== 5q2m IE5hQ2w= Q29tcGxldGlvbg== IHN5bXB0b21hdGlj cmVndWxhcml6YXRpb24= 572R5Z2A RlBO RlBpeA== IHBhcnRuZXJzaGlwcw== ZmZmZmZmZmY= YW5hbHlzZQ== IGF0dGVuZGFudA== Q29uc3VsdA== IEV2YW5kYXI= IExlZ2FjeQ== IFBsYXlpbmc= cnBjbGli IGZyYWdtZW50YXRpb24= bWlkZGxld2FyZXM= YXR0YWNrcw== IEFzc2VydGlvbg== UGVubnN5bHZhbmlh IHRvcnR1cmVk c3RyaXBwZWQ= IGFkdm9jYXRlZA== cHZw T3B0aW1pemF0aW9u IEFsaWVu 5Lqk5piT cmVzY3Vl MjIyMjIyMjIyMjIyMjIyMg== IFBpY2tsZQ== IC4uLi46 IExpdmVybW9yZQ== Y29udmVydGVycw== U0VRVUVOQ0U= Q09NUExFVEVE U3VzYW4= IHJpdHVhbHM= IGludGltYWN5 IHJlZGVlbQ== IFZhdWdo MDAxNTE3OA== U3F1YXJlcw== UmVjdXJzaXZl IGhhYmVhcw== QVRUUklCVVRFUw== Li5cLi5c IFNleW1vdXI= ZnV0dXJlcw== IHByb2dub3N0aWM= cGhvc3BoYXRl 7ZmY WUFNTA== RGF2aWV5 IGRpcGxvbWF0cw== aWxhbnRybw== IGVsb25nYXRlZA== IGNlbnNvcnNoaXA= 4pe877iP4pe877iP4pe877iP4pe877iP4pe877iPXA== Tk9SVEg= INGE0LDQudC7 4p6W dXN0YWluYWJsZQ== IGpld2VpbGlnZW4= Y29ubmVjdFNsb3RzQnlOYW1l Iy8v Kjs= LicsJw== NDk4 NjI4 ODE2 ODQ3 PF8= QmFuZw== QmF0dGVyeQ== Q29sZQ== REFD Rmxvb3I= R3g= R1RD SGVsbA== TsOjbw== Tm92YQ== Uml2ZXJz XSE= Z2VuZA== aWFnZQ== aml0dGVy a25vdA== bGluZA== bnVj b29wcw== c0w= dVk= d3JvdGU= em9yZGVy w4E= y4Y= 2LI= 2qk= 5r0= 55M= IHRhZA== IGFyYQ== IGFpZHM= YXRhcnM= c3RhYmls IGZhY3Rpb25z IGZyZW50ZQ== IHBhY3Q= IHB1Y2s= IHNsYXk= IHJldHJhbnNsYXRlVWk= IGRhdmU= IGRpY2s= ICcnLCc= IGx1dGU= IGVmdGVy IGdsaQ== IGfDpQ== Y2hs IFNyYQ== IFNjbw== IFNBUw== IFNNQg== IFNTRA== IFNvbHluZHJh IFNueWRlcg== KCksIg== KClgLg== YWJv IENvcmQ= IENCRA== YXBpc3Q= c2VyeQ== dW5kZWY= dW5zdWJzY3JpYmU= IFBhbGw= IFByaWRl IE1hdGU= IE1TTg== IE5vbQ== IE51bmV6 cXVpcmluZw== cXViaXRz IHJweXRob24= KSkpOw== Z2V0aG9zdA== IEJpbA== IEJpbGxz IHByb3Nl IEhpbA== IFdhZA== IFdoZWF0 IEVW dmFsaXR0dQ== IF8pOg== IjoiIiwi IFVDTEE= IGVubGlzdGVk IEphbA== IGFkam9pbmluZw== IHVuY29tcHJlc3NlZA== cG9sZXM= Z2VvY29kZQ== IDUwMg== dmVsbGU= Y29kZWNlbGw= YW5raW5n IGludGVybWl0dGVudA== IHN1Ym9yZGluYXRl IHNwaW5kbGU= Il0nKS4= ZXJuYXRl IHNwZWN1bGF0ZQ== IDk0MA== YW1idXJnZXI= IEV4Y2x1ZGU= cmlidXRv 4oCUXw== c2lnbmluZw== IDE4NzU= IHRlcm1pb3M= IGRieA== c2xpZGVz IGV0bA== IG9wZXJhdGl2ZQ== b3ZpYw== dHJhanM= b3R0aQ== dGFnZ2luZw== 44Kj 44KP IMKW IGluaXRpYWxpc2U= cG9wdWxhdGVk SE9PSw== bGluaW5n IGdlbml0aXZl IGNyw6k= IHRyZWhhbG9zZQ== UExVUkFM IHNuYWNrcw== bGV4aWNvbg== cmVzcG9uc2l2ZQ== IEJsdWV0b290aA== KyIn IFNjYW5uZXI= ZXJhbGE= SW50ZXJmYWNlcw== IE1jTGVhbg== Y29tbWl0dGVl Y2FyYXZlbA== IGluZHVjaW5n IHhtbHJwYw== IFBlZw== IHNleG8= IEd1YXJkcw== IGludGVncmFscw== 5piv5LiA5Liq IGRlY3JlbWVudA== UEVSSU0= 5bCE QW1lcmljYW5z IHZpbGxhZ2Vycw== IGFkanVzdGFibGU= 5b6I IHBsZWFz IHRlbGVwaA== d2Fsa2Vy IHNjcmVhbXM= IHN5bnRoZXM= IGdyb2s= U2ltcGxlUmVmQ291bnQ= ICdbJzo= IHR1cmJv IHZlbm91cw== IHdpdGhkcmF3YWxz RW5naW5lZXJpbmc= dmV0aQ== IFBvc3Nlc3M= IFNhbmR5 IEJ1bGdhcmlh IHJpYmJvbnM= UHVibGlzaA== IGlubm92YXRpb25z IENvbnRpbnVvdXM= VmlydHVhbE1hY2hpbmU= IG1pbmltaXplZA== eWNsZWQ= IHByb2dyZXNzZWQ= IERvZ3M= IERvcm90aHk= IEd1aWRlbGluZXM= MDAyNTkw VkxBTg== IGZvcmVjYXN0cw== IEZlbGlwZQ== SGlkZUZsYWdz IGRpbWluaXNo IFByb2JhYmlsaXR5 7JW8 Q2FsY3VsYXRpb24= Y2FudGlkYWQ= 5Lu35qC8 VHVuaW5n IGZpZXJjZWx5 66eM IE1BUlFV YXJ0aWZhY3RJZA== IHZpZ29yb3VzbHk= IGFjcXVhaW50YW5jZQ== IERpc2NyaW1pbg== w6ljaWxl IGluYXVndXJhbA== UkFUSU8= IHN0cmFuZ2VseQ== T2JzdGFjbGU= IHNwcmVhZHM= QnJpZ2h0bmVzcw== IG9iZWRpZW5jZQ== IG5hbm9yb2Rz TXVuaWNpcGFs YXRjaGV3YW4= VHNldGxpbg== Iihc LCM= ODc3 Pidd QXV4 Q3Jp RnVw RmlybQ== SG9uZw== TGFubmll TWNs UUdyb3VwQm94 VnY= VmNt V2ludGVy V0VTVA== XSc6 Ym9saWM= Ym91dG9u Y21i ZXZhbHM= ZnN0 Z3Ry Z2Vw aU51bQ== amFuaQ== bGllbnQ= bGFkZW4= bmNvbA== blVzYWdl cGFpbg== dW9ucw== zrU= 5aY= INmF IHRhc3RlZA== ZXJhdG9ycw== cmV0cmFuc2xhdGVVaQ== b3Jw YWxpemU= aXR1 aXRldA== IGNhZGU= IGNvZGVy YW5hbg== IHBpbGVz IG9jZWFucw== bWVvYmxhc3Q= ICckKA== IGhpa2luZw== IGxuYW1l IGxhdmE= IGx1ZWdv IGdn Y2hhcA== Y2hpY2tlbg== IFN1cnJl IFNvZg== cml2YWw= dW1hYg== YWJhcg== IEFa IEFrdA== IEFHUEw= IDI5NA== IFB1bg== IE3DtmdsaWNo dXBlcnQ= dXBkYXRpbmc= Z2V0Tm9kZQ== IC0k Y2xpZmZvcmQ= IEJyZW4= IERvcA== c2V0U3RhdHVz IEdhdXNz cGVycA== IGNoYW0= MDEyMg== IGthcmdz cGFyaW5n b2theQ== aWNodGU= IHVuY29tcA== YWlsbGVz IFZC IFZvdA== IFZ1bA== MTAyMw== IDUwNQ== dGVzdHVzZXI= Y29sYWI= MTIyNQ== MTIwMg== c3BhY2VySXRlbQ== IGxpc3RlbnM= IGRpc2NvdW50cw== IGludGVu IGltdXRpbHM= IFN0dWZm MTExNQ== U3Rvcm0= bXBsb3Q= IHN1YnN1cmZhY2U= aGVkcm9u d29ya291dA== QU5USQ== MTg5MA== YXdpbmc= IHN0YXJ0bGluZw== IFJlY292ZXJ5 d3JpdGVTdHJpbmc= IGluZGl2 44Gh b3V0cHV0ZGly IGNhbGxlcnM= IGxvbmdldml0eQ== IDE4MzA= IG1vbm9jeXRvZ2VuZXM= dGVuYW50cw== ZmluZENvbnRvdXJz IHJldGFpbnM= IGhpZ2h3YXlz Q29lZmY= IHZhbGlkYXRpbmc= bGFuZGVycw== ZW5lZ3Jv IGVudmk= ZXhlY3V0aW5n U2hpZWxk IGxpdHRlcg== bG9jYWxpemVk IGRpdmluZw== IE5vYWg= c3BlY2lmeQ== dWNrbGU= Zmdhbmc= IDMwOQ== IHRhc2tuYW1l IFNlcnY= IEF0dGVtcA== cHJvZHVjdG8= YW1lbnRvcw== cmVzdGVk cmVzdGZ1bA== IHNoYXBlZmlsZQ== IG1vdHRv IFNldHRsZW1lbnQ= aW5pdGlhbGl6YXRpb24= IE1hcsOtYQ== IExvb3Nl IGJpb21l IGRpcm5hbWVz aGFzaGxpYg== IHB1cnBvcnRlZA== IENhbm9uaWNhbA== XSsnLg== Q09MVU1OUw== 5LqU Rk9PVA== KCk7XA== 57uY TWVhcw== dHJhbnNmb3JtYXRpb25z IFtbXQ== dHJhbnNsYXRlUGF0aA== IG1lY2hhbml6ZQ== IG11bHRpcGxheWVy b3JnYW5pemF0aW9ucw== IGR1YXM= IOa1 cGFyYW1ldGVyaXplZA== IHNjcmFwcGVk IG1pdGlnYXRl IGxpZmVsb25n TGlidmlydA== INC60L7QvA== XV4s b3VuY2VtZW50 IExvd2U= IGZlbGxvd3NoaXA= IGJ1ZGdldHM= IGlsbHVzdHJhdGlvbnM= IHNrZWxldGFs IEFUSw== bGF1bmNoZXI= IGFsZXJ0cw== UHVibGljS2V5 UHJlc3NFdmVudA== IGh1bnRlcg== c3BpbkJveA== bWljcm9zZWNvbmQ= KCIuLy8= IGV4ZW1wbGU= Q0hBUlA= IHJlbGF0aXZpdHk= LCovKjs= IGNoYXBlbA== Y29tcGV0aXRpdmU= QW5uYQ== IGNyYWZ0ZWQ= IGxvYmVz IG1pbGl0YW50 U2Nyb2xsQmFy d2Vha3JlZg== IENvbGxpc2lvbg== 5rex IERyYWtl 5YaZ5YWl IFN1Y2Nlc3NmdWxseQ== IFRJTUVPVVQ= IHdlaWdocw== 5bGx5Yy6 Ympm 44Gj44Gm IGFjY29tcGxpc2htZW50cw== IE1vbnRobHk= IHJlZGVtcHRpb24= dHV0b3JpYWxz IFNwZWN0cnVt IFVuc3VwcG9ydGVk IGludGVyZmVyaW5n IExpY2Vuc2luZw== Rmxhc2tGb3Jt IGNvbnRpbmdlbnQ= IGNvcnJvc2lvbg== dWxpYW5p Q29sb25lbA== IEJ1bGxldGlu 65CY bWVkaWNpbmU= TWFyY3Vz IEdyYWR1YXRl Y2hhbGxlbmdlcw== IGNvbnF1ZXJlZA== UFJPVklERVI= IGV0ZXJuaXR5 UElQRUxJTkVT Kl0oIw== NTc4 NTky OTE4 RWc= RnJlZA== R0FQ R2Rr SGFi S2VudA== TEc= TWFpbnRlbmFuY2U= Tmlr UkFZ U0lERQ== VGFsbA== VmlzaW9u WU9VUg== XCQ= YmNj Ym90ZQ== YmVsdA== Y0U= Z29z Z2xvdmU= aGlnaGVy amlz bWllcg== bnJvdw== dG91 eG1wcA== emY= 5pE= 7IU= IAkJCQ== IOagueaNrg== aW5peg== aW5wbGFuZXM= aW5mbHVlbmNl YXRpdGlz c2VhdHM= b3JtZQ== IGN1cmVk IGNzcg== YXJYaXY= aXNzdWJzZXQ= IGluaWNpbw== IGluY2FwYWJsZQ== IGJpZHM= IGRhZG8= IGRyZXNzZXM= ICd+ IGlsZQ== IGxvcmU= IGV1cA== YWRhcHRlcnM= Jywt IGdhbWI= Y2hn IFRUcmFuc3BvcnQ= bG9wcw== IHVm IFNldw== IFNCUg== IEl2 IEFtcA== IHZvbHM= dW53cmFw dW7DpGNoc3Q= IHlvZ3VydA== IHJhc2E= Z2V0WA== IEJsb2I= IGV4dGVybWluYXRpb24= ZXN0aWM= IEhFWA== IEhhbmRz c2V0dGltZW91dA== IEVG IEV1cg== IEVOQw== IEVjdWFkb3I= WyctLQ== aXBwdXM= ZmZlbg== IE9DRA== IGxldWs= IGtm b3N0ZQ== IDoiKQ== IDM5OQ== IDMzOA== IFwnJQ== IGNvbnRh IHhwcw== IHhibG9jaw== YWRkRWRnZQ== Y29mZmVl IGFic3Q= IHRlc3RHZXQ= IDU1NQ== IHNvYWs= IHNvb3RoaW5n IG9icmE= IG5ld2ZpbGU= IG9wcHJlc3M= Oi8vIg== IGZsYXA= RVNP IFJlcQ== IGNvdW50ZG93bg== IGV4dHJlbWVz IENvbmRpdGlvbnM= d2l0aHRhZw== VGVzdE1peGlu Jy5c IGZvcm11bGF0aW9ucw== e308Lw== dWNhdG8= IENvY2g= VG9Ebw== anNvbnJwYw== cGFja2luZw== IHJldHJpYWw= aWRlbnRpZmljYXRpb24= IGN1cmxlZA== IGJhc2VwYXRo 0LjQuA== VEVVSUw= RkZG IHZpc2lvbnM= c2NvcmVk cmFtZGlzaw== IGd1YXJkZWQ= bW9kZXJhdG9y TGVvbg== IGdsYXJl c3VwcA== IHJvb3RDbGFzcw== IHNob3J0ZW5lZA== IGJpdGluZw== c2VxbGVu IE1hcmNv IOyy d2Vib2I= Q01D IFByZXZlbnRpb24= Y2F0ZWdvcnlBeGlz Q2xpZW50RXJyb3I= U3RhcnRTdG9w IHRyb3Q= YXVydXM= Z3VpbnQ= IENoYXJ0ZXI= IFRyYXZpcw== REFR UmVtb3Zlcw== IGdsb2Jz YnJhY2tldHM= U0NST0xM IHNvZnR0YWJzdG9w TWVkYWw= TE9XRVI= dG90eXBl IE1FUlRFVUlM c29ja3M= IFZvbGs= d2FyZg== YmV0dA== ICcjJzo= IEJFTE9X IE1hcnRpbmV6 IHN1Y2Nlcw== IHBtZg== VGFiV2lkZ2V0 IHB1bmNoZWQ= IEhhbW1lcg== IEZyZWRk IEplcm9tZQ== IEF2aWF0aW9u IGFtcGxpZmllcg== cGFzc2VuZ2Vy IEdlb3JnaW5h IEh5ZGU= IHNhbml0aXpl IGFkdmVydGlzZXI= IHNrZXB0aWM= 0LPRgNC+0Lo= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IENoYW5uZWxEaWM= IFByb2R1Y3Rpb25z IHRhbGxlcg== IGNvbmNlaXZl IHBob3NwaG9saXA= IHB1bXBlZA== 5Y2V6K+N dmVoaWNsZXM= IGNyYXNoaW5n d2FydHo= 5q2j5YiZ bW90aWY= IFRyaWFuZ2xl IENyZWRlbnRpYWxz IEphaHJlbg== RGVyaXZlZA== IGdlYXJz 4oia IHZpZ29yb3Vz IFJpZGRlbGw= IFNhYmhh aW5kaXZpZHVhbHM= IEx1ZnQ= YW1veWw= RGlzY29ncmFwaHk= UHJlZGljdGVk TUFSS0VS IHJoeXRo IENvd2JveXM= IG1vc3F1ZQ== IEFudGFyY3RpY2E= b21vbmFz IGJlbXVzZWQ= IGh1Z2dlZA== U3F1YXJlZA== IGVjb2xvZ3k= IFZhc2hlbGw= QXNzb2NpYXRvcg== VmVnZXQ= TWV4aWNhbg== IGhmaW5kZXg= YXBwZWFyYW5jZQ== IEFTU0VSVA== IHBoeXNpY2lzdA== IHBoeXNpY2lzdHM= 6IGU57O7 IHRoaWdocw== IEtyb2xw IGltcGFydGlhbA== IMOnYQ== YW5vbWFsb3Vz IGlycmVzcGVjdGl2ZQ== YmVuZWZpdA== IGNvbXByZWhlbmQ= IExBVElO IGVtYnJvaWRlcg== IGp1dmVuaWxl IGV2aWRlbmNlZA== 6IyD5Zu0 IFB1bmphYg== IE1BUlFVSVNF KFxc KSIpKQ== Ll1dKQ== ODk0 Ont9LA== Qng= RkVS RmlsdA== SE9S SlBH S2Fy S0lU UGxl UGFnZWQ= U2I= U0lE WU4= Wko= W19f XEA= Y3Jpcw== aWVuY2Vk aU5ldHdvcms= bGF0cw== bWNtYw== blA= cGln cXg= cmF0aA== csOpZQ== dmlnbm9u d2xhbg== emc= 6Ls= 6bI= 7Ig= IGl0aA== IHFs IA0KCQk= IAoJCQkJCQ== aW5ib3g= aW5mb3JtZWQ= IHRhdHPDpGNo IGFpZGVk cmVwYWly c3RhZA== ZW5lbWllcw== IHBhY21hbg== IHBzYWxt IHds aXNpZXI= IGJvcm5l IHJlY3JlYXRpb24= IGRB IGRa IGRtZw== IHRvY3RyZWU= IGhpdGhlcg== b3RlY2E= aWRy IGVhc2Vk b2x0 b2xhYmVs Y2hpbmk= IFRM IFN1Zw== IFNDTw== IFN1aXQ= MDAzMw== IEFNQw== IGlmcmFtZQ== b3ByZWNpcA== IE1pc2M= IE5lYXJseQ== cXXDqQ== IG9uY2hhbmdl IEZUUA== IEZSRUU= IGFscGhhbnVtZXJpYw== Z2V0UGFyYW1ldGVy Z2V0TmV4dA== IEJpa28= IEJhY2NhcmF0 IER1Y2s= IHByb3RvbnM= IExpZW4= IEhBUg== IEhveQ== IEhhbm5haA== aXZvZGU= IGF0eXBl IEdDQw== IEdpYW50 IEdtYkg= Wycl IGNob3Jlb2dyYXBoeQ== IF8i c2Nj IE9M YXN0aWNhbA== IGtX cGFyaXR5 XSkrJ1w= b21tYXRl IG91dHdl IHZhbGxleXM= IFxf aWNoYWVs YWRkc3Ry IHJvZHM= IHJvYXN0ZWQ= YWtWcw== dHloaWNrcw== ICR8XA== ZW5zaWJsZQ== IGltYmFsYW5jZQ== IFN0YQ== IHBhcnRpc2Fu YXNraW5n MTkwNw== IHN1YmRpcmVjdG9yeQ== IG92ZXJsb29raW5n IHN1cHBsZQ== SVRFUw== LCImJiY= aXRzdQ== Q29ubm9y dG9uZA== IDg1MA== IDg2NDAw X3soXA== IFFNYWluV2luZG93 MTQwOQ== IFJlY2VpdmVk ICZ+ dmVyc2F0aW9ucw== d2hpdA== dHNk IHNpZ25pZnk= IEV4cGVydA== YXV0b3I= UmVzb25hbmNl IFhlbg== RURT fX0pJA== aW50ZXJhY3Rpb25z Q09NQg== IGNvbnRhaW5tZW50 fSkkLA== IHRoaW5rZXJz IFpodQ== IHJlYWxpdGllcw== IEFtZXJpY2Fz IG1hcmtpbmdz IHR5cGg= IGRpam8= 0YDQvtGB KSooKA== dGFza2lk cmV0YWlu SXNu IHNlYXJjaGVy YWRkcmVzc2Jvb2s= IHBpY2tlcg== YnRWUE50VlBOdA== IFRvUGFyc2luZw== VElGRg== TWFudWZhY3R1cmVy YmVkcw== IEdlcmFsZA== bGF0aW5v IGVtYmFyaw== IG5lZ2F0aXZlcw== IExvZWI= IEZsaWNrcg== IGlnbml0ZQ== CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IGNpcmN1cw== c25pcHBldHM= IE9QRVI= IHV0aWxpemVz IGJvYXJkaW5n ZmVhdHVyZWQ= IG9wdGltaXphdGlvbnM= KFsnLw== YmFsbG9vbg== IFNjaGlmZg== QnVpbGRz IHByZWNpbmN0 IGF3aWxraW5z IEVsaXRl IDgwODA= IElQcw== IHJlYWNoYWJsZQ== IGNvbmNvcmQ= IGZhaXM= IEhvcml6b24= IEhvcm5ldHM= dXJ0bGVz IFR3aXN0 IG9jY3VweWluZw== IG5kZg== IHJhZGlp IG1peGlucw== 6ZmG QUhQ IFJlbGlnaW9u TlBK VkFF IGZvcnRyZXNz Q2Fyb2w= UGF0aWVudHM= IFVuZGVyZ3JvdW5k RGlHcmFwaA== IEN5cHJ1cw== Q21kcw== c2F0dXJhdGlvbg== c2F0ZWxsaXRl IExvb2tz IEJyZXR0 cmVjb2duaXpl Q0FQVA== c3ludGg= Q0hBUkFDVEVS IG9obmU= IGZhc2Npc3Q= RFZC IG15dGhvbG9neQ== ZG9lc24= IEZ1bGxlcg== IGRlbGlnaHRmdWw= QklUTUFQ aWxvZ3Vl IEluZm9CYXI= ZXhwbG9yZWQ= IFRoYW5rc2dpdmluZw== IGZhbHRh cGl0dXVz IFJvdGF0aW9u SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWc= VHJhamVjdG9yeUJ1aWxkZXI= RVBTRw== IGvDtm4= IHNwYXduZWQ= c3VnZ2VzdGVk IFN0YW5kaW5n 0KDQkA== IFNFUlZJQ0U= IGx1Y2lmZXJhc2U= IFBhcmVudHM= 5Z+O5Yy6 IFJ1aHI= bWlnaHR5 IHN1cnJlbmRlcmVk IENvb2tpZUphcg== IHJlc2VudG1lbnQ= IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== b2N5dG9zaXM= XSspLyQnLA== Y3Jvd2Q= 6Lez6L+H IGVudHNwcmVjaGVuZGVu IEhvZGc= 6K6p5LuW IGdhc3Ryb2ludGVzdGluYWw= TUVUUklD IENhdGVnb3JpY2Fs cG9rb2s= Q09NUE9ORU5U IGZpcmVmaWdodGVycw== Y3lwaGVybW94 IGVpbmZhY2g= U2xvdmVuaWFu TGl0aHVhbmlhbg== b2dhc2F3YXJh IFRvUGFyc2luZ0Nhbm9uaWNhbEZvcm0= cGl0dXVzbHZs ISQ= MDkz MzEyNQ== NTg3 OTM2 P+KAmQ== QUlEUw== Q3JhZnQ= Q0JM RXRv TEFQ UG9ueQ== UU1ldGFPYmplY3Q= Uk1U U3B5 U3Ns VXVpZA== V0hP YmlsbGVk YmFubmVk Y3Zl Y2lkbw== ZGltZXRoeWw= ZmluZm8= ZnJvZw== Z29s Z8O8 amlt am9rZQ== bGlvbg== cG9j dmlzZQ== dnNlcnZlcg== dnR4 dmF1eA== d3lu emlhbA== IOaYr+WQpg== IOKWiOKWiOKVkQ== cmVtYXJr c3Rp IGNhc2M= CiAgICAgICAKICAg IHBx IHNhYmU= IHdu IGRX IHRoaW5uZXI= IHRocml2ZQ== b2xhbg== IGRlY2VwdGlvbg== IFRJVExF dWxr IGlzbGljZQ== IFNQSQ== IGJlYXN0cw== YXBv YXBhcnRl IHNlbWVzdGVy IGNvbnN0cnVjdGlvbnM= IFBDRA== IE1hbmc= IEZpbmdlcnByaW50 Z2V0aW50 Y2xpcHBlZA== IG5vdGljaW5n IERhc2g= IHByb3c= IG9yY2g= IFJ1dA== IFJlZHM= IFJBVw== KCIqKio= ZW1icw== IEdhZWw= IEVsZA== IEVjbw== IGNvZXI= cnllcw== IDM4NQ== b2tp IEplbg== IGFkbWk= dWRlbmNl LiJb SW5zZW5zaXRpdmU= dGhlcm1hbA== IDUwNA== IEtlcnJ5 Y29taWM= IHBva2U= IG1hbm5lcnM= IFl1aw== U3RhcnM= ZXJyb3JoYW5kbGVy IGNyZXB0 aW5hbGl0eQ== MTY1NQ== IGlkZg== aWVyZXNpcw== IGFjcQ== IGZsYWtlcw== IHNlZWFsc28= MTQ0MDA= w6lyaWM= IGNvbWVudA== U2V0U2l6ZQ== U2V0U2l6ZXI= YmV1bm8= IHJpZ2h0bHk= IEV4Y2VwdGlvbnM= cmVsaWVm YW1zbWF0aA== IFhIVE1M JykpKSw= R2V0RmllbGQ= IGJlbHRz IEZvcmJlcw== c2lkZWJhcnM= QWxnZXI= IGtlVg== OTY5Ng== IGF1dG9ub215 KV19LA== ZG9JZA== bGlua2luZw== U3RyaW5nVHlwZQ== ZGl2aWRlcg== TGVhc3Q= TUxX IGFudGl2 IGFudGlxdWU= bWVhbm9y ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= YXBzaWJsZQ== IGNoZWF0aW5n IC4uLicp IENvbXBpbGU= NDIzMw== bWV0cm9z IGNhbWVs Q2hlY2tidXR0b24= QlVG QXR0ZW5k IE1heW8= IGFpcnBvcnRz IFdhcndpY2s= bm9uYXNo IDstKQ== IFByZXZpb3VzbHk= IERFUFJFQ0FURUQ= IFBhcnRz YWNjZXNzaW9u U0hJUA== IG1pc21hdGNoZXM= IGZsYWdzaGlw IFBhdHJvbA== U3VwcGxpZXI= IFByaW1lcg== IFN1YnNjcmliZQ== IGhhcmJvdXI= IEhUVFBFeGNlcHRpb24= IHNoaXBtZW50 ZW5jZWRvcg== ZmVlZGluZw== IGNhc3Rz IHdpbGRjYXJkcw== IGdhcnJpc29u IHNpbnVz IGRyYW1hdA== IHBob3RvZWxlY3Ryb24= IG9yaWVudGF0aW9ucw== xLHFnw== IFJlbGllZg== IEhlYWx0aGNhcmU= IHJpZGdlcw== IEdhbGFjdGlj IGNvbWZvcnRpbmc= Q1VSU09S bGljaGVy IG5ldXJvcGF0aGlj IHF1b3RlY2hhcg== IFBsYWNlbWVudA== O1wiPjw= Zmx1b3I= IHZlbmdlYW5jZQ== RXN0aW1hdGU= SGlnaGxpZ2h0 IHBpdHVpdGFyeQ== c2Nyb2xsQXJlYQ== 5oqV 55m+ YWJiaW5n RWRnZVFM IGFsYXJtaW5n IGZsb2F0ZWQ= IGxpcGlkcw== IEhFQURFUg== Q09NUFJFU1M= fVwoXFw= cmlub3M= IGludHJhdmVub3Vz TkVXUw== TW9udGhseQ== 0LDQu9Cw 0L7QsdGA0LDQ IGJpYmxpY2Fs IENhYmVybmV0 T3JnYW5pc2F0aW9u RklOQUw= bG9wcHk= 5YGc IEVsZWN0cmljYWw= IENPTkZJR1VSQVRJT04= IG1pbGRseQ== MDAzMDQ4Nw== IG7Dum1lcm9z IG1pcmFjdWw= IGV4cGxvc2l2ZXM= IGdpZ2FudGlj SmVmZmVyc29u IEFGVEVS cGVybHlDb25maWd1cmVk IFZpY2tp IMO6bHRpbW8= IGludHVpdGlvbg== V29sZmU= IFdpa2lMZWFrcw== IHNlY3JlY3k= IG1vdXJu IEtvbmt1cnJlbno= IGJvZ3Vz 6ams IFZpa2luZ3M= IGNsZW5jaGVk IHRydW1wZXQ= IGh0dHByZXR0eQ== IHJ1dGhsZXNz IG1hcnRpbmdhbGU= IFF1YXJ0ZXQ= IG5vb2RsZXM= 6Led56a7 IHBhbXBo IEthemFraHN0YW4= Ynl0ZXJpYW4= IGFydGhyb3BsYXN0eQ== NDM5 NTQ2 NTkx NjM0 NzYz OTEw OTY0 OTIx QXdhcmU= RWNhbA== Rk1U R0NQ SGw= S0lMTA== TEFURQ== Tml0 TmFu U2Fi U0ND U3VnZ2VzdA== VGFraW5n XCks YWVy YmFyZA== YnRz Ym91bmNl ZFY= ZWNsaXBzZQ== ZmlyZWQ= dGFsbA== dlo= d2V0 66w= CQoK IHRhaXI= IHR1ZG8= c3RvcnM= IGNiYXI= IHBjdA== IHBlbQ== CiAgICAgICAgCgogICAgICAg IGR3ZQ== ICdg Y2VkZXM= IGdtYWls IGd1dHM= IGdpZnRlZA== IHN0YXJjaA== b21pdA== IElyZW5l dW1lcg== YXBybw== c2VyaW91cw== IHZyYQ== IGNvbnF1ZXI= b2RpZWQ= IFB1cnM= eHRvbg== IG9uUnNw IGFzeW1tZXRyaWM= IEZhY3Rz IEZvd2xlcg== Z2V0bWVtYmVycw== IEJ1YmJsZQ== IGFuYw== dXN1 IERvbGxhcg== IFJpY2Fu IExG IEx5cw== c2V0bW9kZQ== IEdlbGZhbmQ= IEVR IEVmZg== dG9iag== IGNob29zZXI= IE9TVA== YW5jZXN0b3Jz IEp1cGl0ZXI= IHJvYW1z SW5qZWN0 bGVuVmFsdWU= bG9ndW5pZm9ybQ== c3BhY2Vy cHln IFlv bmVobWVu Y291bnRpbmc= IGludGVyYWN0cw== IHN1YmM= IG92ZXJoYXVs IGxvZ2Rpcg== IHNwYWNlckl0ZW0= TmFtZVN0cg== IHJlZ3Vs IGRpc3RyaWJ1dGluZw== cmFjdGFs MjQ5NA== IENvbnRlbXBvcmFyeQ== d2l0aFJlcXVpcmVk 5LiT VVJB dGVtcG9yYWw= IHJldGNvZGU= MzU1MDQ= c3lsbA== SUdG IGNhcnJvdA== CiAgICAgICAgICAgIAogICAgICAgICAgICAgICA= SVBz RGVsZXRlcg== ZGlzdHJv IGxpbmtlcg== IENsb25l VmFsdWVMaXN0RW50cnk= IGRlbHQ= IExlZ28= w6F0aWNh ZGlyZWN0aXZlcw== YWRtaW5pc3RyYXRvcg== IFVzZXJJRA== IGRlbm9taW4= IG9yZ2FuaXplcnM= IHNlZW1pbmc= VHJlZUN0cmw= TVND bWFrZVJlcXVlc3Q= SW5wdXRJbmZv RWxlbWVudEV4Y2VwdGlvbg== Y29tcGxldGVseQ== VHJhbnNhY3Rpb25z VmFsaWRpdHk= IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj ZGVzY2VuZGluZw== ZGlnbw== RXh0cmFjdGlvbg== QWN0cw== IHJldml2ZQ== ZG9jdW1lbnRFbGVtZW50 XSxbWw== IHJlcGVhbA== c2tpcFRlc3Q= IHNhbHR5 ZWxpdXM= IEFETUlO IG11dGF0ZWQ= IHN0cmlrZXI= SU5ESUM= IEFnZW50cw== IGJ1ZmZlcmVk IGltcGFjdGVk IFNhbmN0 bGlnYQ== IEVtcGxveW1lbnQ= IGNvbGxpZGVk RW5nbGFuZA== IFR3aXN0ZWQ= IEpTT05SZXNwb25zZQ== 5a2X5q+N TWFya2V0aW5n ZXhwYW5kdGFi IGluZ3Jlc3M= YXZlcmFnaW5n IG1vdXRocw== IHVuZWFzeQ== R2VuZXM= IGFyY2hpdGVjdHVyZXM= IGRvdWJ0bGVzcw== IFRvbW9ycm93 IGhvamU= SW5pdGlhbGl6ZXM= IGFkdmFuY2VtZW50 0LjRgtC10LvRjA== IG51Y2xlb3RpZGVz w7RtYXM= Y2F0Y2hlcg== IGRvbWluYXRpb24= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IEVudmlyb25tZW50RXJyb3I= IGNyZWFteQ== aHVzYmFuZA== cHJpc2luZ2x5 IHBpY25pYw== IGJvbWJlcg== IElNRw== IGhldGVyb2dlbmVvdXM= VHVya2V5 IHByb2hpYml0 TUVUSE9EUw== aWVydGVu dG9tbw== IMO2dmVy IHN5bmNocm9uaXpl IHdlbGRpbmc= IGx5bXBob2N5dGVz d2N0cmY= IGNhcGFjaXRvcg== IFNWRw== IHF1ZWxxdWVz UHJvZmVzc29y IEVsaWFz b3BoeXNpY3M= IHNwb250YW5lb3VzbHk= IEZyaWVkcmljaA== IFByZWZpeA== IHNob290cw== IHJhem9y 0LjRh9C10YHRgg== IFNlbnNpdGl2aXR5 IHBsdW5nZWQ= IGV4dGVybmFsbHk= IERldGFpbFZpZXc= 6rWs IGNvdmFyaWF0ZXM= TXVvblRyYWNrVg== Um9nZXI= bGlxdWlk IENhbmRpZGF0ZQ== 4YOY4YM= IHNpZ3VpZW50ZQ== MTAwMjUzOQ== IG5hdXNlYQ== UmVzaWR1ZQ== UnZjbVZ6 IGtvc2hlcg== QXJtZW5pYW4= KyJ8Iis= IHBoYXNvcg== LDwv Lz48 NzQw OTI2 OTM5 OicpOg== PCU= QWlt Q2Fycg== Q05BTUU= Q2xvc2luZw== RGxs RmFu R3Jvd2luZw== SG92ZXI= SERS SmVy S1VO THA= TXQ= U3VpdHM= VXNlcw== V29y V293 Xys= ZHVu ZmF0ZQ== ZmVsdA== Z2ln am96 a0I= a21heA== bGl6YXJk bW1k cXJ5 c2Rm c2l2ZWx5 dmlv dml2ZWQ= xbo= IHTDqm0= ZXJybw== YXRvbA== c2V1ZA== b3Jpbw== c3Ru ZGVzaWduZWQ= IGZvdQ== IGZpc3Rz IGZhbmM= IHBlbmNl IHNjb2w= cm9vZg== aXNhYnM= IGJpb2Q= aWNpc20= IG1W IHJlbGlj IGRx IGRibw== ZWx1 ICInKw== IGdvc3Rhcmlh Y2hhcw== IFNUTw== IFNsb2N1bQ== IENBTA== IENJRg== IENCQw== IENPUlM= bHlzaXM= aWZpaw== IGJlYWNoZXM= dW5yZWFk IFB1bXA= IFBMVQ== IFBMRUFTRQ== cXVpcmVy IGFzYmVzdA== IEZyb3plbg== IHJsZGI= IER3 IER1c3Q= IHByb3Bvc2Vz IG9ybg== IEx1bmV2 aXZhbWVudGU= IEV5ZXM= aW5kaWNl IHNoYWRlcg== b2JzZXJ2ZQ== IDM3OA== Ll87 XSk9PQ== IFx9 IHVubWF0Y2hlZA== aWNhbHM= bGVuYQ== T05Z cmVhZGxpbms= IGRpc3J1cHRlZA== UkVBQ0g= RXJyb3JIYW5kbGVy IGNvbW11dGU= IHVzYXI= IGJva2Vo IHNwaWVz IG1veg== IGtleXBvaW50 IGBf IHJlZ3I= IHpvbmluZw== IHRyYWRlcg== IGVudHdpY2s= RXhwb25lbnQ= IFJlcGU= YW1iaWVudA== IHByaXplcw== IFdlaXNz IGJsb25kZQ== dWNh IDE4NTk= VGV4dEF0dHI= IGF2SWQ= IGV0d2Fz R2V0U3RyaW5n cGFja3M= QUdU Q0hJTEQ= IHRvcE9iamVjdA== aGFuZHNoYWtl IGVudnk= b3VnaHRvbg== YmF0Y2hub3Jt aGVzaWFucw== 44Oe VFJJ IFBob3Rvcw== VEVSTUlO IGNhbWVv RGVmcw== IFB1YmxpY2F0aW9ucw== c2NoZW1lcw== IEluZHk= dXJnZW50 IGJhcmJlY3Vl IE5lYWw= IGZ1bm5lbA== IGRlY2xpbmVz XSpc QWN0aXZhdGVk IFNjaHVzdGVy IGF1dG9tYXRpb24= 4pWa T3BlcmF0aW9uYWw= UmVjb2du IGhhcmJvcg== fSh7XA== dm9mbHVyYW5l IGlycmFkaWF0aW9u IGV4cGVyaW1lbnRhbGx5 QWRkcmVzc0Jvb2s= IGZ1bGZpbA== IOazqA== IFNFQ09ORA== IFdvcmtib29r cGxlbWVudGFs IHBsZWFkaW5n IEZyYW56 IGJ5dGVjb2Rl IEJyb2tlbg== TUFUSA== w7FhbmE= YXZlcmFnZWQ= IGluaGliaXRpbmc= xLFy IFdpbGhlbG0= IHJvYm90aWM= IFNlY3VyaXRpZXM= SVpFRA== TG9jYWxpemVk IGdlbmVzaXM= IEVzdGFkbw== IHJlZmxlY3RpdmU= Q09NTU9O IGNsb2Nrcw== IGZvcnRpb3M= IFJldHJ5 IFBvZXRyeQ== IERhbWFnZQ== SGVhZGxpbmU= IEdsb3J5 IGZoaXI= TWVyZ2Vk 4paR4paM 5puy cGxhaW50ZXh0 TW9uaXRvcmluZw== IEdhcnJldHQ= 0L3QvtGB0YLRjA== bmV4dXM= c2NlbmFyaW9z c3RyaXBz IG1lbW9pcg== IGZhY2lsaXRhdGVz QlVUVE9ORE9XTg== IFJhbmdlSW5kZXg= cGVyZnVzaW9u IEVjb25vbXk= IEphaHJl IEJhdGNoTm9ybQ== 55u45YWz IFNpZWdlbA== QnJhY2tldA== IEFiYm90dA== IGdsZWljaA== YWNyZW9u IEJvcmRlYXV4 UHJlc2VudGF0aW9u IHBpc3Rvbg== IG1hbnRsZQ== IFNhY3JhbWVudG8= IHBoeWxvZ2VuZXRpYw== UGFydGljaXBhbnRz IHByZW1pw6hyZQ== IEpveWNl IHRyYW5zaXN0b3Jz IGNvbnNlcnZhdGl2ZXM= IEJhY2htYW5u IHBlcmNlcHR1YWw= IFdXSUk= IE90dG9tYW4= UHJlc3RhZG9y IHJlbGVnYXRlZA== w6J0ZWF1 IOq1rA== IHJlY3ljbGluZw== Z2V0bmV3YWRkcmVzcw== Lihc Lid9LA== NTM5 ODI3 PiI7 QmFsdA== QkJD QnVzeQ== RGFzaGJvYXJk RXBz R3Jv R01U TENUUkw= TUFTUw== Tm9t UFNT UmF6 U291bmRz YW1wbGluZw== Y2Z0 aGllcmFyY2hpY2Fs anNw amVua2lucw== bllvdQ== cGF3bg== clU= cmJm c2lkeA== dGo= dm90aW5n eHBy eGNlcHRpb24= tZw= uKE= 16I= 2YM= 6JI= CgogICAgICAgIAogICA= IOaVsOaNrg== IOKWkQ== naU= IGF0aGVy c3Rkcw== IGNhdGU= IGNyYWI= bGVpbg== ZGV3 IHBhaQ== IHdhcnk= bmRhdGE= IG1vcm4= IG1pdHQ= IHJlZm9ybWF0 IHJlcGFpcmVk ZWxpdGU= ZWxpbmVzcw== IGhvbWJyZQ== IGVjbGlwc2U= b2xvdg== IGdhemVk YWdlbnM= IFNpc3Rlcg== IFNSQw== IElNRg== MDA2NDc= IEF1c3M= IENlcmU= c3Nk b2RhdGE= IFBhdw== IE1FTQ== aHRh IFskXA== cXV4 IGl0cg== CgoKCiAgICAgICAgICAg IEJ1bmR5 IHByb2NsYWlt IFJW IFJld2FyZA== IGhlc3M= IGhlYXBw IEhheXM= IEhvbGxvdw== IEhERA== IFdyYQ== IFdhbGQ= IEV5 IEV2ZWx5bg== aXBzZWM= IGNob2tlZA== bWFp IGphbg== IDMxOA== IDM1OQ== aXRlbWVudA== IHZhbHZlcw== Y29hdGVk IGNhbnlvbg== IHVucGFpZA== IDQ1MQ== Y3JlYW0= IGFsbHVyZQ== IEtpc3M= d2VpeGlu UmVhY3Rpb24= QVRBVA== bmVv bWF4aW1pemU= YW5uYWRh IGNyZWVwaW5n IHR5cGVvZg== ZXJuYQ== VGhyb3R0bGU= QUxUSA== IDc4OA== ZGRpbmc= IGZsb3JhbA== IHVuZGVyZ29uZQ== MTQwOA== ZGFtcA== U2V0U3RyaW5n IGNvcm9uYQ== IG5lZWRsZXM= cmVseA== ZG9jbmFtZQ== IGRpY3RhdGVk dWNpbmc= fX09 VG9QU2V0 ZWt1 0LDRhw== IGF2aWF0aW9u R2V0dHk= c3lr IHNrYWxs RVRBSA== IG5leHRjaGFy VW5sb2Nr VW5uYW1lZA== ICgiKw== Z3N6 IGNvbWV0 ZW1wcmVzYXM= IExlZWRz IHZpc2Nvcw== TGVhaw== IE5vb24= w6TDpA== 4pas b2dyYXBoaWVz Q2xhc3NpYw== U0lP IFN0cmluZ3M= IGZpZ3VyYWw= IG1lcmN1cnk= IENhbGlm IENhbHZpbg== IGluZmluaXQ= UXVvdA== IE1hcnNoYWw= UmVnaW9ucw== VGFibGVWaWV3 IE15dGg= IGltcHJvcGVybHk= IERFUA== IFN0cmluZ1Byb3BlcnR5 QWNjdW0= IG1hc3NhZ2U= IFJvYmVydG8= IGZhc3Rpbmc= IENPQ08= U3RldmVu IHNpZ21hcw== IEd1YW5n IFBvc3RlZA== dHdpY2U= IFJlbWFpbmluZw== VEVTVE9ORU9G 5Y2O IG1lYW5pbmdsZXNz 4oCi4oCi VEFJTg== IGFzdGhtYQ== IFRPVVI= a2luc29u IHNlZ21lbnRlZA== IGZyb3N0 c3JjdHJlZQ== 6L2u IGZvbGlhZ2U= TXVsdGlTY2FsZQ== IHJpbmdpbmc= IEhhbmRsZXM= IGNyb2lyZQ== IE1lbnNjaGVu IHJvdWdobmVzcw== IHNpZXZl IHByb29mcw== R29vZGJ5ZQ== IHRvcnBlZG8= IE11cmRvY2g= amFyYXRp IFdvb2R3YXJk b2dyYWY= IHBpdGF2YXN0YXRpbg== YWJiYWdl cmVtb3Zpbmc= UXVhbnR1bQ== IG5pY2Vy IFR5cGVk IHN1Ym5ldHM= IHN0b3Jtcw== Q1VSUkVOQ1k= aHps dmlzdWFsaXphdGlvbg== IGZsb29kcw== IGNvbnZlbmllbnRseQ== IEFsbG93cw== IGJyb25jaA== IGx5bXBob21h IFNraXBUZXN0 U3dpZnRVSVA= IHp1csO8Y2s= IFNWTg== T1JJWkVE IGx1bWlub3NpdHk= IGdyaW5uaW5n 44GC44KK ZXRhbG9u IGRlcGljdGluZw== IHNjYWZmb2xkcw== V2lyZWxlc3M= IG5vdXJpc2hpbmc= IGNvcnJlbGF0ZXM= T2Rkcw== TWVldGluZ0xvZ3M= MDI2MTY2 Pj4+Pj4+Pj4+Pj4+Pj4+Pg== VkFSSUFCTEVT IEdSRUVO IEJvb3RzdHJhcA== IFJvY3F1ZQ== QWRhcHRpdmU= U0NSQ0FU IHbDqXJpdA== IE5hdGFsaWE= V0hJVEVTUEFDRQ== bmdlYWw= IGZpbHRyYXRpb24= IFJhaWRlcnM= IHJlbWluaXNjZW50 RmxvcmlkYQ== b2Rpc2NvdmVy IENVU1RPTQ== RWRnZVFMU3ludGF4RXJyb3I= Iioq MDk5 NTYx Nzc0 OTAwMDA= QXBhcnQ= Q0ZG RGFuYQ== REFTSA== RnVzaW9u S3U= TGljZW5zZWQ= T2k= U2luaw== Vkc= V2FsdGVy WEY= Y29icmE= ZG1w ZnVybg== aU9T a2FyYQ== bXNj bWli bWlsbGVy bmFn bm1hcA== bmNoYW5uZWxz cW5hbWU= c3V0 eXo= 5Zg= IOacgA== kZw= cmVjaHQ= c3RhZHQ= IHRoZWF0ZXJz IHNpbmdz aXNFbmFibGVk ZWRpbg== IHJlbG9hZGVk IG5r IG5vcmU= b3Ryb24= YWRvcnM= IGdvbA== IGd3ZXI= IFRpYw== IFRyaXQ= IFRyaWJl IFRBU0s= bG9k IFNVTg== dGhhbmRsZXI= IElC IEl6 aWZlbg== b3dpbmc= IHNldWw= IGNvbm9j IGNvbmdlbg== IHlhcA== Jzoo IE1QTA== IE1UVg== IE1hcnJpYWdl IE5hdmlnYXRvcg== aHRyYQ== IFsiLg== ICtcXA== Z2V0YXJncw== Z2V0SW1hZ2U= IEJlYw== IEJsYXN0 ZXdvcnRoeQ== IERO IHByb3Ry IGhldXI= IExhZg== IFdoZWVs c2V0TGlzdA== b2NhdGl2ZQ== IEdlbQ== YWNjcw== YW50YW4= aWxsaWM= b2dl IGNvbXBvcnQ= IHJlc3JlZw== IGNob3Jl ZmZpdGk= IGtzaXpl IGpvaG4= IDM2Ng== IDMzOQ== IDM3OQ== cGhpbnM= IEpL cHJlbWl1bQ== dGV4dGl0 IHhsc3g= IHVuaW5zdXJlZA== IDQxNA== dXJsb25n UmV2ZW51ZQ== IGRpc21pc3Npbmc= RXJyb3JDb2Rl IHNlcnZp IGltYXA= ZXJyb3JMb2c= QVJQ ZW5jaW9u YXdp IGFjY3JldGlvbg== IGZsYWt5 YmFja3JlZg== IGVudGVuZA== IGRpc3RyaWI= IHRyYW5zcG9ydHM= TGlzdEJveA== IGNvbWlzcw== bm9EQg== d2l0aENvbHVtbg== IGNhbGVuZGFycw== IGNhbGlicmF0ZWQ= IGluZHg= Q2xhaW0= 5Li0 IGZvcm11bA== IFByb3RlY3Q= IGluZGV4ZXI= fX1fe1w= IGNvbnRpbmVudHM= c3RydWN0dXJpbmc= IG1vbmRl IHJldHJl aWRlbnRhbA== RVRP fSleey0= TkFSRQ== IHNsYXRl Y2FsbEZVVA== IG1vZGlmaWVz 0LjRhA== bGFuZGluZw== cGFnZVNpemU= IGRpdmlkZXM= RW5zZW1ibGU= bHNi MDc5 w6RyZQ== Y2hpbGRz IGNoZWF0 aW5zdGFncmFt IHJlYXNvbmVk IDEzOTY= IHRhZ25hbWU= UGVyaXBoZXJhbA== IHVuZGlzYw== QXRvbXM= IE1hcmlvbg== IENvdW50cmllcw== 5a6z IFJlZ3VsYXRpb24= Q29yZUFwcGxpY2F0aW9u IGluZmxpY3Q= IFJvYWRz Y2F1dGlvbg== IHNvY2lhbGlzbQ== U09VVEg= b3hpZA== QU5UTFI= 4KS4 U2VydmVyRXJyb3I= IGVuc3VyZWQ= IHNhbGFyaWVz IFNUSUxM IE1hdmVy aG91c2Vob2xk IEJlcmdlbg== IGNhdGhldGVy c3BlY3Ryb21ldGVy IE1lbW9y IHBvb3Jlcg== 4pWQ4pWd IFRIUkVF IGVuY29kZXM= U1lN IFZvbGFuZ2Vz IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IGR1bXBpbmc= IGZpYnJpbg== Y2hlbmtv xLFt IE9iamVjdERvZXNOb3RFeGlzdA== V1JPTkc= UHJvdmlkZXJz IG5ldXRyaW5v IGluZm9ybWluZw== Z2VvanNvbg== IHJ1YmJsZQ== V0hBVA== aWdlb24= TmF1Z2h0b24= bWl4aW5n RFVDVElPTg== IHRvdXJlZA== IE5ZQw== IGNvbmp1bnRv IERpZG4= IHJlZnJlc2hpbmc= IERpZ2VzdA== IGRlY29tcG9zZQ== IEJhc2ls IG1ldGFib2xpdGVz IE11ZWxsZXI= IGh5cG9j cHJvYmVzZXQ= c2FuaXR5 QXZnUG9vbA== IEFiYmFz 44O844K4 INC+0YLQv9GA0LDQsg== IGluc2lzdGluZw== IFRyaWJ1bmFs IGFkdmVyc2l0eQ== IEVmZmVjdGl2ZQ== ICd8Jw== c3VzcGVuZA== IEJvcmlz IG5lZ2xpZ2libGU= V2Vla2x5 5a2m5Lmg RGV0ZXJtaW5lcw== KCciJylb IE1hbGF5c2lhbg== IGlzb3Ryb3BpYw== IEJyZXdlcg== R0dHR0dHR0c= JSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSU= eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHg= IENlbGlh ICddJzo= IFdJTkRP IGhhdW50ZWQ= 5pKt 7LmY ZGF2aWRzdHJhdXNz RXhwZXJpZW5jZQ== VlZWVlZWVlZWVlZWVlZWVg== IOuCmA== IExlYWRlcnNoaXA= dW5jZXJ0YWludHk= TWFuZGF0b3J5 MDA2ODI0MA== MDE4MjE1Mw== QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo= LikqKA== NzE5 ODM2 Pio= QUxF Q2l0YXRpb24= RHVwbGljYXRlcw== RnJlc2g= SGQ= TWFjZWQ= T1dORVI= UmFi Vlo= V2lr W10s XSI6Ww== YmVm YmZsb2F0 YnN5 a2F1 a3Jvbg== blg= bsOpZQ== dmNt eWs= 6IU= aW5GaWxl aW5hZGU= IHRpZ2h0ZXI= IGF1cA== cmVwYXJ0aXRpb24= YWxvcmU= IGNyYW0= IGZlbg== IGZVbml0eQ== IHBhbnM= IG9vcA== IGJyZWQ= IG1pZGQ= IG1iZQ== IHJlYnV0 b2xsYQ== YWRpY3Q= Y2hhbA== IFRydW5r IFRFTVA= IFNhdmluZw== IFNpdGVz IHN0YWxsZWQ= IEltcGxlbWVudHM= ICMs IEFCQQ== IENheQ== dGVycmFpbg== IHNlZHU= b3BoZQ== b3BvbHk= aW1iYQ== IFBJUEU= IE1ldGg= IE1haQ== IFtbLQ== IEZpZnR5 aXppcA== Y2xhbmc= Y2xvdGg= IEJO IEJvZA== IEJBRA== IFJvdXQ= IGV4Y2VycHQ= IEhhbGxl ZW1hY3M= b2NlbmU= IEdyb3c= IEVkdQ== IEVOVg== IEVjbGlwc2U= IEVhcmxpZXI= aW5keQ== IE96 IGptbA== IHByaW50ZXJz IFVJTlQ= XSkrKA== IG91dGY= IHVub3M= aXNlYXNlcw== IEtlbGxlcg== dGVzdGZpbGU= IHJhY2tz cmVhZEk= cXVhbGlmaWVy IGxpc3Rib3g= IGRpc2FibGluZw== ICAgICAgCiAgICAgICA= c3RhcnRkYXRl dGF6 QU5DSA== IHBlYW51dA== MTg2Ng== YXd0 IGRpc3RydXN0 d3JpdGVJ TGlzdGluZw== U2V0UmFuZ2U= IG1heGxlbmd0aA== JywnLi4vLi4vLi4v b2Zw IENvbndheQ== IHBvbGlzaA== IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== bW92ZURvd24= YW1zb3M= IFhM RURU IHdvcmRlbg== dGVuaGFt IHZlcnNpb25jaGFuZ2Vk cmVjdWVuY2lh QURWRVI= IEFsdW1uaQ== RVRT QWxsb2M= IFNoaQ== Y29yaW5n IGNvbmZpbmVtZW50 w6FsZXo= IGhvbWVvc3Q= IGxvY2FsbmFtZQ== MDgy LS0tKw== TGVv In1d IEhvd2VsbA== IGRlc3Rl Q29tbXVuZXM= 4YCw U0la IG1hcHJlZHVjZQ== YWxpZ25tZW50cw== 44CR IGV4dHJhb3JkaW4= UHl0aGlh 6K++ IGNob2ly SU9VUw== c2VjdGlvbmFs Y3V0dGluZw== DQogICAgDQogICAgDQogICA= IFByZWNvbmRpdGlvbg== IGZ1bsOnw6Nv IGhpc3R0eXBl IERFTQ== IHNjcmVlbnNob3Rz Z3RoZW4= RGlydHk= 6K64 IOWJ UFJJVg== 77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9 IFJlY29yZGluZw== 4KS5 5om5 IHN0cmlwcGluZw== UmVzb3VyY2VEZWZpbml0aW9u aWxpbmd1YWw= cHJveHlMaXN0 ZmFpdGg= IElkZWFsbHk= cXVhbnRpdGllcw== IEV4dHJlbWU= IFBvcnRhbA== IHRyYWRlbWFya3M= 5o6J bW91bnRwb2ludA== YXZlcmFnZXM= RGVsZXRlVmlldw== ICIjIiw= IENvbm5lY3Rpb25FcnJvcg== IGh5ZHJvY2FyYm9u IFJhZGl1cw== RW52U3RvcmFnZQ== U2NhbGVTZXQ= IHNwaW5hY2g= SW52aXRyb2dlbg== cmVndWxhcml6ZXJz TWFncGll IEN1c3RvbVVzZXI= IFNsaWRlcg== 5aSn5LqO b3N0ZXJvbmU= IG5pY2tlbA== IG5lZ290aWF0aW9u IGFic3RyYWN0bWV0aG9k IHRocm90dA== 5ous IHJ1bW9y IHZpbmV5YXJkcw== UmVjZWl2aW5n QW5udWFs IGFkbWl0dGluZw== IGFsbGVnaWFuY2U= RXZpZGVuY2U= IHNsaXBwZXJ5 IGNyeXB0b2M= IHJlc2VtYmxhbmNl IHZvd2Vk aWdnaW5z UGVyc3BlY3RpdmU= IHN0cmF0aWZpZWQ= IGNvbGxhYm9yYXRlZA== 6IKy IHN1YnRyYWN0ZWQ= TW91bnRhaW4= cG9sYXJpemF0aW9u IENpdGl6ZW4= IGxpYmVydGllcw== Uk5OQ2VsbA== IEZhbnRhc3k= IGZ6dg== KC4rPw== IE5pY29sc29u IGFyb21h IGxpbmdlcmluZw== TGFzZXJKb2Nr RGVyaXZhdGl2ZQ== IHB5cXRTaWduYWw= UmV3cml0ZQ== 6aaW6aG1 T1JHQU5JWkVS aW92YW5uaQ== U2V0RmlsbENvbG9y U0xFRVA= IG1hdGhlbWF0aWNpYW4= bWVtY2FjaGVk IHByb21pbmVuY2U= IFBsYXR0ZQ== IEV6ZWtpZWw= IHJldGFyZGF0aW9u IFR1Y3Nvbg== IGNvbGxlY3Rpdml6YXRpb24= IGRpc2d1aXNl R0Z1Wnk= MDA2NDczNw== Kl17fSw= NTQ0 OTI4 PScp QURFRA== QXJlbmE= QnJ1bg== QmVuZw== QmF0dGxlcw== Q29uZQ== RlFTeW0= SWNlbGFuZGlj S0g= TGF0ZQ== TGVucw== Uk9S VGQ= VG9u V0lU Ym9yZA== ZHBz anVuaXQ= bsOp dXhl dlk= dm1k d29ybQ== eHc= w4U= 7Yw= IOS4qg== IHRpYw== IHRsdg== cmVpbg== cmVhcw== IGNhYw== ZGV0cw== YXJvcw== IGZ2 IGZ3ZA== IGZhbmdz IHBseQ== IHBhZ2Vy IGluanVzdGljZQ== IGRzZXQ= IGRwaGlz ZWxlbmd0aA== IGlpaQ== IGxlbmRpbmc= YWRyZXNz Y2hpcw== IFN1ZQ== IFNhbGx5 IFNVVg== IFN0b2tlcw== IElUVg== YWJiZXI= bnRw IENBUw== b3Byb3A= YW1zc3k= dXBncmVlaw== Y29uaQ== IHJ0aXA= IHJpY2hlcw== IEJhbGVz IEJ1Zg== IEJlbm55 IERhbnM= IERhbmdlcg== IFJH IFJBRA== IEzDqQ== IExJQg== IG1lYWRvdw== IEd1dGg= IEdydQ== IGNvYWc= cGVybw== IGVsbG9z IE9mZmVy MDEzMjk= IDM2NA== IHVuaXRl IHVubW9kaWZpZWQ= IDQzMw== IDQyNw== LiJd IDU2MA== IEtvaw== dGVzdERhdGE= IEluY2VwdGlvbg== YXNzZXJ0VGVtcGxhdGU= YXRvcmlv IHBlcmls c3BhY2Vk IGFncmVn IGFyZ2M= Q2hhbmNl U0VFSw== bWF0dXJpdHk= dGFh VGhhaQ== IFFJY29u IFFBYnN0cmFjdA== aW5wdXRGaWxl YmFja2Vy Y29tcHV0ZXJz MTc1MA== IGJsaXQ= aHRtbGhlbHA= e306 IFByb2Jl dWNlcg== IGRibmFtZQ== NDU0NQ== R2V0VGV4dA== SGVhZGluZw== IFppbWJhYndl VW5pbmNvcnBvcmF0ZWQ= IHJlZlRvUFNldA== fSQt IGRlbGlt IHBvc3PDrXZlbA== IG1zZ2lk YWludGVk VFJI cGtwZXI= dW5pdGlvbnM= T3JSZWFkT25seQ== IF0sWw== QXNpYW4= IGluc3BlY3RlZA== RXZlbnRDb250ZW50 TU9SRQ== ZHJhd0NvbnRvdXJz IGJpb2xvZ2lzdA== IGJhcnJlbHM= Tk9T QXBwYXJlbnRseQ== IGJ1c2luZXNzbWVu IFF1aW50b24= Q2FsY3VsYXRpbmc= aWNrc2J1cmc= KS1c IERvaW5n YWlkdQ== Q1NG SVJB IFByaW1pdGl2ZQ== cmVtb3Q= cmVtaW5kZXI= XyxfLA== IE5vcnRoYm91bmQ= IHBob3RvZ3JhcGhlZA== IEd1YXRlbWFs IExhdWdo IG1hcml0aW1l IEVsdmlz ZnJlZWRlc2t0b3A= IHZlcnNhdGlsZQ== VmVyaWZpZWQ= c2ltcGxleA== U2Vzc2lvbkF1dGhlbnRpY2F0aW9uTWlkZGxld2FyZQ== 0LXQvdGP IHByb2Zlc3Npb25hbGx5 IERlbmlz IHBldHJvbA== IHBhbGluZHJvbWU= IG5vdmVsdHk= IHR1bW91cg== RXhlY3V0YWJsZQ== cHJvZ3Jlc3NiYXI= IE9iamVjdGl2ZQ== IFNhbGlzYnVyeQ== 5LyB IEJyYWg= IHJlamVjdHM= dGFyaW5mbw== 0LDRgtC+0YA= RmluYW5jZQ== Um9iYg== IHJld2FyZGluZw== IGhhZW0= IGp1aWNlcw== IGJhdHRsaW5n Ym93bA== IGNvbmp1Z2F0ZQ== IGdlc3R1cmVk IOCkuQ== ICfiiA== IFBheW5l IFRvdXJ2ZWw= IEJvb2xlYW5GaWVsZA== Uk1TRQ== IEFwcHJvYWNo VFJBSU5JTkc= 55yf 5pmu IEFuZ2VsYQ== IHdyZXN0bGVy U2FsYXJ5 IGJpdHRlcmx5 IER1cmhhbQ== IFFVSVQ= UmVzZXJ2YXRpb24= IGRpc3RvcnRpb25z RmV0Y2hlcg== TWl4SW4= IFVuc2lnbmVk IHNsZWV2ZXM= RElTVEFOQ0U= dWdnbGluZw== IHByaW1vcmRpYWw= 7ZmU IGNvbnRpbmdlbmN5 5YW35LiA5LiA IGV4cGVuZGl0dXJlcw== IFZvaXZvZGU= IGJ1cmds 5a+55bqU55qE IEFyaXN0b3RsZQ== IGNyeXN0YWxsaW5l IHN0ZW5vc2lz IHZlc2ljbGVz b3Bpbmlvbg== 6YKj5LmI 57K+ IOyDnQ== U0NIRURVTEU= MDExNDE4MA== Q2hhcmdlZA== cmVsaW1pbmFyeQ== IGJpb21hcmtlcnM= YWJzb2x1dGVseQ== IE1jQ2xlbGxhbg== IE1hdHJpekJpRGltZW5zaW9uYWw= YW1zc3ltYg== JF57XA== JS0= LycpLA== QkVO QkVSTg== RG9t RG9ja2Vy Rk1D R3Vu R3JhbQ== Sks= S2Vy TmF0dXJl T2R5c3NleQ== UkhD U29sZA== VElDSw== VG9uaW8= VEJpbmFyeVByb3RvY29s V2F0 WW9y XS8v YnBz ZHJhaW4= ZmlyZXM= Zmlwcw== Z2VtYQ== aGFybQ== aG9zYQ== cnRz cnJk dm9k eGluZw== esOp aW5mb3Jt IGFjaGU= IGF1c3Rlcml0eQ== cmVp IGN1aWQ= IHB0eXBl IHBlbm55 IHNseQ== aXNhbnM= ICctLS0= IGh5cGU= IHNlbGZMaW5r IHRobw== IGRlY29udg== ICgv IGdpbg== Y2hpbA== dmVn IFNVUw== KCkiKSw= IElV IElLRQ== IElzdGFuYnVs YWJy IEFjZQ== IENERg== c3NyYw== dXJuYWw= c2VyYWN0 b3BsdXM= dW5xdWU= X18oKTo= IE1MUw== IEZyb2c= cHR1bmU= IGFsYXJtZWQ= Z2V0SW5mbw== Y2x1c3Q= IEJTUw== cGxz IFJleA== IGhlYWxlZA== IEhlc2g= J109eyc= IEdldw== YWNx b3V0Ym94 ZGVmZW5kYW50 c3RyZXJyb3I= IGNob2tpbmc= IGNoaWVmdA== IE9tZWdh b2JlZA== IDM4OA== IDM3Mw== IGFyY3M= IEpvdXJuZXk= IHByZWZlcnM= IFw7 YWRkVGFi IHVuZXF1YWw= IHVuYXZvaWQ= IDQ3NQ== IDUyNA== IEthcw== IEtpbGxlcg== dGVzdGNhcGk= IGdvb3Nl IG5ld05vZGU= bGVkb24= cGFyYW1kZWY= IFN0cmVzcw== MTE2MA== MTkwOQ== IHF1YXM= IHF1Yml0cw== IGludGVyZXNz IHNwYWNr UHJvY2Vzc2Vk Zmx0 Zmxhdg== IC4q IGJ1eXM= ZGRkZA== IHBhdGhvZ2VuaWM= IGRpZsOt IGNvbW9y JywnPScs YmVjY2E= IGFtYmVy IFdlYmVy IHNtYXJ0ZXI= IDE4NzI= NDU2Ng== IGh0dHBk R2V0SXRlbQ== IEZvcmJpZGRlbg== IHNsYXllcg== IE5ld3BvcnQ= OTYyMg== IFNoZWV0 ZGlzdHJpYnV0ZQ== ZXhlY3V0aW9ucw== cmFtZXJz IGNhcmV0 aGFzaHRhZw== IGh1bWlk IHdhdGVyZmFsbA== IGJvb2tlZA== Q09OUw== CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICA= IEJvaGVt IGJpZ3JhbQ== TGluZVdpZHRo IGFjY2Vzc2liaWxpdHk= YWNjb3Jk dWVkaXY= IEJsaW5k IGVtYmxlbQ== T05FWQ== IE1laW4= Q0VQ IGdlb2xvZ3k= IHdhaXRGb3I= IEFzc2lzdGFuY2U= IENvcnB1cw== 5aSq Z2xi IGluZmxpY3RlZA== YWxsZXRz IGZ1bmN0b3I= U1BL IGNhcmRiYWNr ZmFpbElm IGFjdHVhbGl6aW5n IDo6LQ== VHJhaWw= IEZpbGVOYW1l IHN0cml2ZQ== dHJpcHM= IGRlcGxldGlvbg== IEVudHJpZXM= Q3VycmVudFJvdw== UEVSU09O 44Gu44Gn YnJha2U= VEFDVA== dnNkaw== RXhwYW5kZWQ= c3BlY3RyYWw= IHRhYmxlbmFtZQ== aG90c3BvdA== IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== d2Fsa3M= IHJhZGlvYWN0aXZl eHh4eHg= QVJHVU1FTlQ= 6KeB w6JuY2lh aGFydmVzdA== IHJlY29ubmFpc3NhbmNl RG9jdW1lbnRhdGlvbg== IENoZXN0ZXI= cGlwZXM= IFRvbWF0b2Vz 5L6d 5qCH5YeG w59lcg== IGNyaXRpY2l6ZQ== RWxpemFiZXRo V0FSRFM= aWhhZA== QW5pbUFjdGlvbg== dGhyb3VnaHB1dA== IHNoZWx0ZXJz IGluY29ycG9yYXRlcw== U0tJTEw= 5pys5Zyw IG5vdmFjbGllbnQ= QVRUUklC IG1hbmlmZXN0YXRpb25z INC/0YDQtdC0 IEJpdG1hcA== IGFsY29ob2xpYw== U1BFQ0k= IHRlbW9z 0L7QsdCw0LI= d2F0Y2hlZA== IExhdHZpYQ== IGRpbm9zYXVy IGRpbm9zYXVycw== IHN0eWxlc2hlZXQ= Rm91cnRo IGxpZ2FuZHM= IEJyeXNvbg== SG90ZWw= 0L7Qu9GM0LrQvg== V2Fsa2luZw== 6Laz IEJhYnlsb24= IFFVRVNU IGd5cm8= 6K6t57uD6ZuG Q29uc3RydWN0cw== IOyVhA== Q2h1bmtz IHJlZHVuZGFuY3k= IGNvbXBsYWluYW50 ZFhFQWZn IENocm9uaWNsZXM= IGRlZHVjdGlvbnM= IGplYWxvdXN5 IEJyaWVmbHk= IGV4cGVuZGl0dXJl Q1hYRkxBR1M= IFNwb3RpZnk= IHZpYnJhbnQ= IFFEZXNpZ25lckZvcm1XaW5kb3c= RUxFTUVOVA== UmVjb21tZW5kZWQ= IEhvbWVyaWM= IGVydXB0ZWQ= IGdyaW5kaW5n IGludGVybGV1a2lu Q29kaWdv IGVuZ3JhdmVk Q2xhckdF Q2VydGFpbmx5 IEhhc3Nhbg== IGFnZ3Jlc3NpdmVseQ== IHJlaW1idXJzZQ== IHNjaGl6b3BocmVuaWE= Q2F0YWxhbg== IOqyveyasA== IGR3ZW9tZXI= QURWRVJUSVNF TWFncGllRGF0YQ== IcKr JSIs Lnw= LycpOg== MDI0Mg== NjM3 ODky QXVudA== QUlS QkFU Q0lT RFdPUkQ= RHJ1Zw== RWlnaHQ= RkFU SGF1cw== SGluZGk= SUZG SU1QTEVNRU5U TGl0ZXI= TElORw== TGlrZWxpaG9vZA== TWlsbGVy UEVO VnR4 V2Q= V3JpdGVz WEE= WXU= Wnk= W15c YWZs Ymllcw== Y2Vuc3Vz ZnVzZQ== bHRpbWVz bWFt b2NlYW4= dmFjYw== d3Bz em9tYmll w7I= IOWPguaVsA== IGFyaQ== YW5tYXI= IGZ1Zw== IGZyZXQ= IHNhZGQ= IHfDvHI= cm95cw== aW9uZA== aXNBbGl2ZQ== IGJlcmc= IGJvdXF1ZXQ= IGJhbm5lcnM= aWN1 IG1wYw== IHJleg== IHJlY2h0 IG9mcA== cmFh IGVi IGRldmE= IFRyZW50 IFNjaGVk IFN1bHRhbg== IHN0YWtlcw== IEN1bHQ= IENyb3A= IGJlYWQ= b3BlbmQ= IGNvbmN1cnJlbnRseQ== IGNvbmNlc3Npb25z IFBpdGNo IFBzYWxtcw== IE1heWVy IE1JQw== IE1hcnI= IE1vcnBo IE5hdg== Y29udmV4 IEZpcm0= YXRoYQ== IHdob3Jl IEJha2Vk cGxhbnRlZA== IERpbg== IFJlYXI= IExhdGhyb3A= IG1lbWU= IEhvcw== b2N1bGFy IEd1aXRhcg== IEVORw== IEVpZ2h0aA== IFRoZXRh aWVscw== dG9vdGg= IGJ5cmVm IHJlc2lzdGVk c3RyYW4= IHNoYWRlcw== IE9t IGthbA== cGFycXVldA== IHBsYXN0ZXI= a2V5dmFs cGh0aGFs IGNsaW5naW5n IHhvcg== IHVuaW5jb3Jwb3JhdGVk IHVucmVhbGlzdGlj IGhpc3NlZA== IDQyNA== IFZhdGljYW4= SU5DTFU= IDU4NQ== d2Vn IG5vc3Nv c3BhZ2U= IHNjaXNzb3Jz ID4nLA== IDY1NA== IG9wdXM= IG1hbm9y IHxffA== IGNvbW1hbmRl aW9pbmZv Q29uZGl0aW9uYWw= c3RhcnR0bHM= IHBlcXVl YXdlc29tZQ== IFFI IFFS IGZsaXBwaW5n IHJlZ2lzdHJv bm90aWNlZA== LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= MTM3MQ== ZmVh IHN0YXRlaG9vZA== IGFtdXNpbmc= IHJlYWRvdXQ= d253bg== IHNob3djYXNl YXV0aHRva2Vu YXV0b2Rpc2NvdmVy MjMxMg== YW1zZm9udHM= YW1zYnN5 T1RT VGV4dGFyZWE= IHF1ZWVy R2V0SWQ= bWF0aHJz IEFsdGVy IF0q IGdyYWRlZA== VW5saW5r IGNvbWViYWNr IGRlbGltaXQ= IGZ1bGxlcg== Y3VsYQ== MDg0 Z2VzY2g= bGVnZ2Vk IFNlZWluZw== IHNpdHVh Q09ORElUSU9O IGhvc3RpbGl0eQ== UmVxdWVzdEVycm9y IEF0bW9zcGg= cmFja2luZw== IGluc24= IGF1dGhvcml0YXRpdmU= YWZmaWxpYXRpb24= SGFuZGxlcnM= IHVyZ2VuY3k= Q0xJUA== bmV0d29ya3g= UVVFUg== UVVBRA== 5YW0 UGVycnk= Q3JlYXRlVGVtcA== UG9sbGluZw== IHBvbGl0ZWx5 c3RyZWFtZXI= IFF1aXRl 0YPQu9GM0YI= c2ltcw== QmVlZg== IHJlbW92YWJsZQ== IEFQSUhlbHBlcg== IE1vbm8= IFNvdXRoYm91bmQ= c2hvcnRlbg== bnlj 5Yeg cGlja3Vw IG1hcml0YWw= dHJpbWV0aHlscGhlbnls IGNvbnRyYWN0aW9ucw== fV97XFw= Oiw6XQ== 8J+Y dWVycG8= bGlndA== IE1ldGFEYXRh IGNhc2k= ICd7Og== cGVyc3BlY3RpdmU= IE1vc3RseQ== IEJFQUNI RW52aXJvbg== 0LDRgtCw IHByZWZlcmFibGU= IHByZWZlcmVudGlhbA== RGlnaXQ= IGZhdmljb24= IGdseWNvcw== IHRpZ2h0ZW5lZA== ZXhjbHVkZXM= IE11cmllbA== IHBhZ2Fu Q29uc2lzdGVuY3k= IHBob3RvZ3JhcGhlcnM= 5Yqg6L29 IGZpbmdlcnQ= IGhhYml0dWFs ZWFzdGVybg== IEFQUEw= IGZ1Y2tlZA== RmluYWxz b3BoeWxs IFNVQ0NFU1M= 6YeN5paw U3ltYm9saWM= Y29uanVn bWlsbGlzZWNvbmRz IER1bm4= IHRhbmRlbQ== IGFjdHVhdG9y IGNobG9yb3BsYXN0 IGxlZ2l0aW1hY3k= IENvcm5lbGw= IEphY29iaWFu IFBIT1RP IGJlbmNobWFya3M= cmVzaWR1ZXM= 44GT44Gu IEJPQVJE YWxwaGFz IGtpc3Npbmc= cmVhY3RhbnQ= 5aKD IGlycml0YXRlZA== IFNlcmlhbGl6ZXI= IFNhdXZpZ25vbg== IGJyZWF0aGVk IG1ldGFzdGF0aWM= IGtvbW1lcg== 4paA4paA4paA4paA ICc9Jzo= aGJveGxheW91dA== IGFjZXR5bA== Q29udHJhY3Rz IGhlcGF0aXRpcw== IHN1cGVybmF0dXJhbA== IEJPVExPRw== IEFuZHJlYXM= R2l0SHVi QUNDRVBURUQ= 5pSv5oyB IGRlcmVn U2Vuc2l0aXZpdHk= IGFuYWVzdA== IHVuYW5pbW91cw== IENvbXBsYWludA== 54++ IOychA== IGZpYnJvYmxhc3Rz QXRsYW50aWM= IGluY2FyY2Vy YnJvbnpl IGNvbmplY3R1cmU= IEF1eGlsaWFyeQ== IGV1cm9ww6k= bWF0aHJzZnM= LCs= LiIiIik= Lydd NDMyNg== NjMx Pltc QXN0cm8= QmluZGVy RXBzaWxvbg== TGFuZQ== UGVhcg== UGFycw== Umk= UklT VHV0b3JpYWw= V2k= Wm0= XT49 ZGF0aG9t ZWNs ZnBu Z2l2 Z3JpbQ== bWFyY2g= bmlu bnh0 bmFj bmZldg== cGlkcw== cWQ= dG5hbWU= dWly wqY= 77u/ IO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vQ== lteU aW5vdXM= aW5uZXNz IGF1bWVudA== YXRpdm8= ZW56aWU= aXTDpA== IGZpZGVsaXR5 IHBhY2luZw== IG91dg== IHNjZQ== IHN3bw== aXNwaGVyZQ== IGluZXQ= IHJlYm91bmRz IG5vZGVsaXN0 IGRn IGR5c3Q= IGR1cGxleA== IHRveA== IGxo ICInLA== b3R0ZQ== IGVmZWN0 aWdj IGRlY28= YWRpc2g= ICjCsQ== JyxdLA== IGd1bQ== IFRPUg== IFNvbWFsaWE= dGhpYW4= b21uaWE= dW11 IEFtYmVy IENvdXA= IENTUg== IENlbHNpdXM= c3Nlcg== aW50ZW5zaXRpZXM= aWZyZWQ= IHZmbw== IHNlaXNtaWM= YW1hdGU= aWxldmVs YW5kaHVtYW4= IFBvdW5k IE1pbmc= KCciJyk= IE5PTkU= IE5hY2lvbmFs cXVha2Vz IEZsb3lk IGFscmlnaHQ= IGFsbGVnZQ== IEJpZQ== IEJ1aw== IGFuZXVy IERhd24= IHByb2N1cg== IFLDqQ== IFJvaA== IFJhaXNlZA== IGV4cG9uZW50cw== IExpdg== IExhcms= IExDTg== IEdlYXI= IEdFTw== IEVsYQ== IEVzY2FwZQ== IE9n YXN0b20= IGt0aA== dWdlbg== dHJu PSIoLis/KQ== IGNvbnRpZw== dGV4dGJm IDQ5Mw== IyMjIyMjIyMjIyMjIyMjIyMjIyM= IHBlcnNldmVy IGRpc3NvbHZl YXJpc2Vk Y29taW5ncw== IHN1YmtleQ== Q29uc2lnbg== c3RhcnRUYWc= MTgyNA== YWxleg== eW5i aXNzYW4= cHJpY2luZw== aWt1 aWtlcnM= LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== dGluZ2hhbQ== Z3JvdXBuYW1l IGNhbGFtaXR5 bGliZXJ0 IGhlYWRzZXQ= IHJldGFs U2Vydm8= IGV4cGlyeQ== SGVhdmVu IHN1cGVyc2U= IHNvbHZlcw== KV0r fSRde30= ZGlzdHV0aWxz ZG93bnM= MDM0MDU= TGVvZA== IGxpYmVyYWxz IGh1bWlsaWF0aW9u KCoo IGRlc3Rh IFJlc29sdmVy U3ViZ3JvdXA= IFBoaQ== IFBoeQ== IGN1c3RvbWFyeQ== RXZlbnRDYWxsYmFjaw== RGVmZW5zZQ== IHRyZW1pc3Nlcw== UExBTg== IHZhcm5hbWU= UXVhcnRlcg== RmlsaXBpbm8= IEluZGlnZW5vdXM= IHNlYXNvbmVk IGFtb3VudGVk IHN1Z2dlc3RpdmU= IERhdGFTZXQ= IEZsb3Jh c2ltdWxhdG9y 5Lqs IEJ5eg== QmVn ID8/ emlwZmlsZQ== cm90YXRpb25z b2xsYXJ5 IFVwZ3JhZGU= IGRhcmtlbmVk IHppcGNvZGU= IEJhcm9uZXQ= IHVzZWZ1bG5lc3M= IEFib3J0 IGFsaWduZXI= dmxhZw== T2ZmbGluZQ== 0YvRhQ== IGJhbGxv U2VyaWFsaXphdGlvbg== Ymx1ZXByaW50cw== IHByb2dyZXNzaXZlbHk= IHBob3RvYw== dmFyaWF0aW9ucw== IFN5cmFjdXNl IEVudHJvcHk= IGNvbW11bmljYXRlZA== IE1lbW8= IEV2ZW5pbmc= IHRlbGV0aG9u IHRlcm1pbmF0aW5n cGRnSWQ= IFNhbG9u IHJpY2hlcg== dGFyZmlsZQ== KlwqXCo= cGhlbnls LSglKA== 0YbRiw== UGxvdHRpbmc= Y29tcGxpYW5jZQ== IFJoaW5l IG1hbmRhdGVk IHNpY2hlcg== IEdsb3U= U1dFUg== IGZyZWV3YXk= IEJpb2dyYXBoeQ== IHRvcnNv IEluZm9ybWF0aW9uZW4= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IiIsIiIsIg== IHJldHJpZXZlcw== IFJlYWxt Z2hpeg== IEh1bnRlcnM= c2lsZW5jZQ== VHdlbnR5 Q2VudHJl IFNFVFQ= IOWIoOmZpA== IEtlZXBwb3dlcg== aG9tb2dlbmVvdXM= YXJ0c2FuZGh1bWFu IOGAnA== IEdpdWxpYW5p IHByb2hpYml0aW9u IFNpbW9uaWRlcw== IGJ1bGxzaGl0 6ZKI IFBhc28= IGluY29udmVuaWVudA== IGZsdWN0dWF0aW9u U21vb3RoZXI= IHNocmlua2luZw== IHBpeGJ1Zg== Y2lwaGVydGV4dA== IG9zY2lsbGF0aW9ucw== U2NoZWR1bGluZw== UmVuZXc= Y2FuZGxl VGhhbk9yRXF1YWw= IEFsaWdubWVudA== IE5lcGFs IExpb25lbA== 65+s IExhbmNhc3Rlcg== IHRoZW9yaXN0cw== IHN0YWdnZXJpbmc= 6LSm5Y+3 UmF0aW5ncw== IGRpc2NvbnRpbnVlZA== IEZvcnRpR2F0ZQ== IGFuZXN0aGVzaWE= 0JHQvtGC IGhhY2lh IHNwb29maW5n TGV3aXM= bWltaWM= IE1pY2hlbGU= IGludHJpY2F0ZQ== IGFmZmlybWF0aXZl TUlNSUM= IFNvbWVyc2V0 Z2V0aG9zdGJ5bmFtZQ== IHVuZGlzY2xvc2Vk MDEzMjk3Nw== ZGF0aG9taXI= YXJ0c2FuZGh1bWFuaXRpZXM= IX0= Jj1c KS4uLg== LSIr MDky NTk3 NjIx OTE5 OTcw PiIsIg== QlVORA== R0lG SEFS THQ= TE1T TGFv UHVsc2U= UXM= UlBM U2lk V2lkZQ== XH0kLA== XSQu Y291cw== Y2l0ZWQ= Z2Zm aWFyaWVz anY= bGFs bHV0 bGFzaA== bMOg bXZv cHVu cGFt csOt dGlzc3Vl dnJl dmFydA== 2Lc= 5ag= IHRlcnQ= IHRpcHBlZA== IGNHTVA= YW5jbw== YXJpbmU= IHNubw== aXNpcw== IGlub3JnYW5pYw== IGJlbGxz aWNvbmU= IHJlb3JkZXI= IHRvZGQ= IHRvYXN0ZWQ= ZW50bw== ZXRpbg== bXBh IGRlbWFu IGdlZQ== IFRvbGw= IFR5cg== IFNpcw== IFNJUA== cmlsZQ== dW1iZWQ= Y2tleQ== IEF3YXk= IHZy aW1tZWRpYXRl dW5oZXhsaWZ5 IGNvbmNlc3Npb24= CQkK IFBMTA== IFBSQw== IE1IQw== IE5JSA== aHRv IFsj dXB0YQ== IEZVVA== Z2V0U3RyaW5n IG5vdHJl dXNoZXI= IERq IERpYW5h IExlcA== IExBUw== c2V0U3RhdGU= IEdpdGh1Yg== YW50YWdlZA== c3RyYXRl aW5kaXZpZA== ZmZu IE92YWw= YXN0aW1l bWFpZA== b2Jhbw== IDM5NQ== aWJhdGNoZXM= PSciKw== IGVucXVldWU= IEpQRUc= IFxcXFwi IHhsaW0= Y29vbGRvd24= IGRhdGFUeXBl IGFicmFz cG9vbGVk SW5p ICQi IFZpZw== IDUwNw== IEtldA== IHJhaW5z IHNvaXI= IGNvbXBpbGVycw== IHNhbXBsZXJhdGU= d2VhcG9ucw== UmVxdWlyZXM= IGRpc3BhdGNoZWQ= IGltaXRhdGlvbg== IG9wYw== IHN1amV0 IFlp ZmllbGRzZXQ= Q29uZmVyZW5jZQ== IG1vZGVsbGluZw== cmFjdGljYWw= cHN1bQ== TGlzdEN0cmw= ZmVlbGluZw== U2V0WQ== U2V0SWNvbg== IHRleHR1cmVz Uk9JRA== IGluZGlzdA== IHBvaW50bGVzcw== IGJsaW5kZWQ= IHByb3Zva2Vk UmVzb2x2ZQ== IGxvbmdpbmc= IGVkaWN0 Y2Fsbw== NjUwMDE= IHNraW5z IHNraW5ueQ== bWl0dGVs b2xlYW5z cGFyc2VTdHJpbmc= IG1vZHVsYXRl IFNoaW0= IHBhcnRpY3VsYXRl RElNUw== IGFjdGl2aXNt c29ycnk= IFBsYXRl IGdsdXRlbg== IE9yaW9u QU1NQQ== Y2F0a2lu QmFzZUhhbmRsZXI= IGhhcmRlbmVk IFBlcnRo QXV0b3M= IHRyZWFzdXJlcw== IHNuaXA= bWFrZURhdGE= dGhpc0Rpcg== IEJsYWRl cm9zb3BoaWxh IHBhc3Rvcg== cmFnZ2Vk IFdhcmJ1cmc= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IGRlYWxpbmdz U3RhcnR1cA== c2VtYmxlcw== IE1jR3U= IE1jUGhlcnNvbg== RW5kVGltZQ== RWRpdEZvcm0= cGlkZmlsZQ== J15c IFNjaGw= T0JT IFRydW1hbg== anNhbGlz YXNjdXM= TmV1cm8= IFBlZXdlZQ== IFJlY2lw CgkJCQkJCQkJCQkJCQk= IGNvbXBldGl0 IFNURA== VHJhY2tiYXI= IGZpeGVy dGF1b2xh IHN1bnJpc2U= U1ZQ IG11c2N1bGFy IENlbnRlcnM= IHJlc3RyaWN0aW5n U2lnbmlmaWNhbmNl IGNvbGxpZGU= IE51bWJlckZpZWxk YXJ0aHJpdGlz IFJPSXM= cnJycg== Q29ycG9y a2VlcGFsaXZl IGZpYnJl RGVsZXRlUmVxdWVzdA== LS0tLS0tKw== U2VsZWN0aW9ucw== w6J0 IHZpcnR1YWxlbnY= Zm9saW9z IGhvbW9zZXh1YWxpdHk= UkVRVUVTVEVE IGNlbGVicmF0aW9ucw== ICd7fS4= IO2P SXBBZGRyZXNz IGZyZWVtYW4= QmVnaW5uaW5n IHN1Ym1pdHRlcg== U2Fhcms= IGtuZWVsaW5n IFBhbnRoZXJz IHLDqWc= IEJhZGVu V2lubmluZ3Rvbg== IGRpc2FwcGVhcnM= IGFuYWxvZ3Vl IEhlYWRlcnM= Y29tcGFuaWVz IENvbnN0aXR1dGlvbmFs IHN0cm9rZUNvbG9y IHN1cHBsZW1lbnRhbA== IGxlY3R1cmVy IGNvdW5jaWxz cGFyYWdyYXBocw== IHZpdGFtaW5z IHBlc28= 4oi2 IE11b24= IGNvaW5jaWRl IE1pbGxpZQ== 5o+Q56S6 U2VwYXJhdGU= YWx5bXA= IGNvbnNwaWM= IHJlc2VtYmxpbmc= IHNwcmF5aW5n ZGVjbGFyYXRpdmU= KCIvIilbLQ== IHN0YWtlaG9sZGVycw== IEh1Z28= IGRlcHJlc3NpdmU= IHN0cm9rZXM= IGJsZXNzaW5ncw== IG9zY2lsbGF0b3I= IEJlZGZvcmQ= IFBUU0Q= IFBsZWFzYW50 VGhyb3VnaG91dA== 56qB c291cmNlZA== TGlldXRlbmFudA== bWVzc2FnaW5n TU9WQ0M= IEdhcmRuZXI= RW5jb2RlRXJyb3I= KCI6Iilb SWxsdXN0cmF0aW9u IEluc3RpdHV0aW9uYWw= Q0FOQ0VMTEVE IGluZGlmZmVyZW50 YGBgYGBgYGBgYGBgYGBgYA== IER5bmFzdHk= IGNvcnBzZXM= IOKBig== IEdvdGhpYw== IEJsYW5jaGZsb3dlcg== 7IS47JqU IGhpcHBvY2FtcHVz aGlkZGVucw== IGluc2lnbmlh anNhbGlzYnVyeQ== KSsnXw== Ky8t Nzkw ODE4 Ol0pLA== QklC Q01Q Q0NIQVJQ RW5z RWxhcHNlZA== U3luY2hyb24= U1FVQVJF VkdH VmlkZW9z WEFC WXo= WkM= Ylc= YmlsZA== ZHJpZnQ= a21lcg== bXVuaw== csOtYQ== dmNu d2FzaA== eVA= w4c= IGVycw== IMW+ hbg= ICAN ICAgCiAgICAgICAgICAg b25j IGFl aGVldHM= b3Jucw== IGNvcmRz IGZq IGZpbQ== IHBhbmM= IHNhcmM= IHNmdHA= aXNhcw== aXNsaW5r IGJnbA== IHJldXNlZA== YXNk IG9mdA== dXJm IGxsZHA= IFRQVQ== IFNvdW5kcw== IFNvbG8= cmlyZQ== MDA2NTc= IENSQw== c3Nw aW1lbnNpb24= dW5nZQ== YW5kcg== IFByaXQ= IFBNVA== IFBhZ2Vycw== YXRhc2U= IHJ1dA== cGxhY2luZw== IER0eXBl IERJRw== IERGUw== KCI6Iiw= IEhvbmV5 c2V0RmFtaWx5 c2V0enQ= YWNjZXNzZWQ= b2dlbA== c3RyYXQ= aW5kZXJz b21leg== YXBwY2luZQ== IDM5OA== IG91dGxpZXI= IGVuZm9yY2luZw== IHRpbWVzZXJpZXM= IEthbXA= IEtOZWlnaGJvcnNDbGFzc2lmaWVy aXhh ICAgICAKICAgICAgIA== IHN1Y2tz U3RkZXJy IHN1YmRvbWFpbg== Q2hhcA== U0VF IHNwbGVlbg== IHVzZXJib3Q= dGFq IHBlaW5l b3NlbnM= QUxXQVlT IHJlZ2k= YmFja2JvbmU= IHpvcmRlcg== w6ltZW50 YXNoaXJl IHRyYW5zZHU= CgkJCQkKCQk= MTMwMA== bXlkaWN0 YmluSXRlcg== CiAgICAgICAgIAogICAgICAg YXplcg== dm9sYXRpbGU= MTAwMjQwMA== MjgyMw== VG9M SUxMQQ== T0RBWQ== QWx1bW5p IFpo IGdyYWJz VFRM VUxBVEU= UEVQ c29sbg== 44Kn U2hvb3Q= YWN0ZXJpYQ== IGdyaWxsZQ== IGdsYW5jaW5n dW5nYQ== IGVuY2xvc3VyZQ== IG9iamV0 IEJlaXNwaWVs IGNoZWVycw== IGdlbmV0aWNz IGRvY3VtZW50Y2xhc3M= YWZmaXJt IEFkdmlzb3J5 IHR3ZW50aWVz bmV0d29ya2luZw== IGh5cGhlbg== RGVmdW5jdA== YXJyaWU= IHNuYXRjaGVk IElzbg== SW50ZWdlclR5cGU= IGNvdXJ0cm9vbQ== IE1hbmFnaW5n IOy2lA== QXR0ZW5kZQ== KyIq IGRlbWlzZQ== IHNlbGVjdGl2aXR5 IE5ldW1hbm4= IGZpcmVmb3g= Q09MUw== IE9ic2VydmF0aW9u TWF4U2NhbGVy IGZvcmVzZWU= ZmlsbG1lbnQ= RklMRVRZUEU= IERlc2NhcnRlcw== Olwn Q2FsbEFmdGVy Q1ND b3Bob25l TWV0YURhdGE= IGJlbmVmaWNpYXJpZXM= IHNhbGllbnQ= IExpYmVydA== 5Lit5paH IG1lZGlhdGU= U2VhcmNoaW5n YXR1cmF0ZWQ= IEZpZ3M= IGhlYXRtYXA= eGZmZmZmZmZm UkNOTg== IHN0YWZmZXJz Y29udGludWVk IGRlY2lkZWRseQ== TW9kaWZpY2F0aW9u VGVuc29yU2hhcGU= bmVsbHk= UkVBRE9OTFk= IHZhbmlzaA== IGNyZWRpdG9ycw== IGRldGFpbGluZw== aXp6YXM= IHN1Y3Jvc2U= cnVwdGN5 UHJvdmluY2U= YmlkaXJlY3Rpb25hbA== 0LfRiw== IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyM= Y29tYmluZXI= QWNjZXNzSXRlcg== cHJvZ3JhbW1pbmc= IGd1aWRlbGluZQ== UmVnaXN0ZXJFeHRlbnNpb24= IHRhaWxsZQ== IHN5bnRhY3RpYw== 5LiL5LiA 0L7Qu9C2 QXJ0aWZhY3Q= IEFuYWxvZw== IFN0YXJXYXZl VVJJUmVm IHJlbnRz IHRoYW5rZnVs IFBvcHVsYXRl 6Zu2 IHNoZWx2ZQ== c29uZ3dyaXRlcg== INC30LDQtA== IE1hcGxl 15XXqA== 5qih5p2/ ICfiig== 0LXQu9GP IGJpb2ZpbG0= Pyw/ IGFzc2F1bHRlZA== IE9wdGlvbmFsbHk= cHJvbW90aW9u IGRhcmxpbmc= IGZlZGVy TGF0dmlhbg== 5q2j5Zyo IGRpc2NpcGxpbmFyeQ== 5o+Q546w IFRvb2xraXQ= IHJtdHJlZQ== Y291bGRu IHdlbGNvbWluZw== IFBSRUZJWA== YWRtaW5k IHN0cmVuZ3RoZW5pbmc= IHBlcnBldHVhbA== IGRpc2FncmVlbWVudA== IG15c3Rlcmllcw== c2V2ZXJhbA== 57yW56CB VHRD dW5uaW5naGFt IGlycml0YXRpb24= 5ZWG5oi3 IGNvbW11bmFs IGNvbW11bmlzdHM= TUFWTElOSw== IHNhaWxvcnM= IEhpbmRp IGF1dG90ZXN0 IEZyaWVkbWFu IGVpZ2VuZQ== IHNob3ZlbA== IHJldHJvc3BlY3Q= 54S25ZCO IHNqw6Q= ZWxhc3RpY3NlYXJjaA== U2hlbGY= IGNhZmZlaW5l IFNjaWVudGlzdA== IHNlaXp1cmVz IFNldmVudGg= QnVpbHRpbg== UkVHSVNUUlk= 44Gb44KT IFNhc2thdGNoZXdhbg== aWNpbGxpbg== IHpvbmVuYW1l IGFsbGV2aWF0ZQ== QWNjZWxlcmF0ZWQ= 7ZWp64uI64uk IGNvbnRlbXBvcmFyaWVz IGNhcm90aWQ= IGludGVzdGluZQ== IEJ1bGxkb2dz IGluZGlzcGVuc2FibGU= QURWRVJUSVNFTUVOVA== JDo= KV0pLg== LCcs LXt9 OTMw O1xc QmF0 RW1pdA== RXN0b25pYW4= Rmli R09S SnVkZ2U= TGFn TXg= TWlzYw== TW9ycGg= Tlo= Um91cmtl U3Vj U0NvbnM= VFU= W1si Xi8= Xls= YmlzaA== Ym9kaWVz aG9sbG93 aWFkYQ== a2NvbnRyb2w= bmF2aWdhdGU= cnR0 c3BvbnNvcg== dcOpcw== dmVuZA== eWNvcg== fi0t 65Q= 7JuQ IHRhcHBpbmc= ICAgICAgICANCiAgICAgICA= IGF3aGlsZQ== IGFjb250ZQ== b3Jpbg== b3Jhbg== IGZlbmNlcw== IHNwbGljaW5n IGJhbnM= IG5lbg== IGRva28= ICcoPw== IGhhdGVz IGhsdA== IGl3 IGx6 MDAxNw== bnRz bnR5cGU= IENTUA== IENyYXds IEPDqWNpbGU= c3Nvcw== aW50cm9z IHZuZg== b3BsYXM= IE1W IE1lcGhpc3Rv IGFzeW4= IEZlbg== IEZBVA== IEZBQ0U= IGFsdG8= Y2xpbWF0ZQ== IERhcnQ= IERpc2g= Jykj IFJQRw== b3V0bGllcnM= aWxsdXM= ZGVmaW5pdGU= aXB5bmI= IGNoYXR0ZXI= IE9JTA== IE9DQQ== IGxldWM= b2J0YWlu b2JsaWc= IDM2Nw== IDM1OA== IDM1NA== dHJpZ2h0 IHBsYXRvb24= a2V5ZmlsZQ== XSkj YmVycmE= ZWxsYW4= cHJlb3JkZXI= IGFibGF0aW9u SW5kZXBlbmRlbnQ= SW5Db25zdHJ1Y3Rvcg== IFZpYQ== T05E cHJpbnRvcHRpb25z IGxpc3Rlcg== UkVCVA== IHNjcA== IHNlcm90b25pbg== IFN0cmFpdA== IFN0YWR0 IHN1YXM= IG1hbm5lZA== ZXNzbGVy aWVkYWQ= JyksJw== IHN1YnRpdGxlcw== IGFueWhvdw== Q2hy LCIl IG1vb3Nl Q29udmVudGlvbg== d29ya2xvYWQ= Zmxha2U= b3B0RXJyb3I= IFFp Li4uPC8= bmdpbng= IG1pbmVycw== YXVzZW4= cmVnYW5v ZmVlcw== IGdlbmVyaWNz IFdlaXNl IEFycm93 IFByb2JsZW1z IFhPUg== IDE4NTE= IGVkZ2Vk QUJDRA== IHRmZA== IGxhdW5jaGVz bWl0aWFu IHNsaXBwaW5n bWFpbGJveA== IFpJUA== IG5ldENERg== VXNlckluZm8= IENsaW4= IHBvcnRyYWl0cw== IHR5aW5n IHZlemVz IHBvcExp 0L3QvtCy Tm9TdWNo bW9kZXJhdGU= Zmlyc3ROYW1l IEJlZXI= IFBoYXJtYWM= SW5mb0ZpZWxk Q0NN IGRpc3BsYXlOYW1l IGRlbmllcw== UGhyYXNl 5LuA RUNE cHJlZGljdG9ycw== UG9saXQ= IE1hbmlsYQ== UmVnaW9uYWw= cm9zaW5l d2Rn IGdlb3M= IHJlc2VhcmNoaW5n IGJhcnJpYw== bWFyaW9uZXR0ZQ== IEFwcGVsbGVl IEVub2xvZ3k= TWludXM= aGliaXRpb25z IHJlbWl4 U0hBTkc= cmVuZGVyaW5n IEltYWdlRm9udA== IGltbW9ydGFs KSInLA== IGlsbG5lc3Nlcw== T3BlblNTTA== IE1ha2VmaWxl IElzbGFuZGVy U0VMRUNUT1I= IHRhYmxvaWQ= IHNpbmdseQ== IG11cmluZQ== IE1ldGVvcg== IGF0dHJzRA== IFJpdmVyYQ== IEZpbmRz VGVzdHNGcm9t VklF OiIpew== IE9iamVjdFByb3BlcnR5 IHN0cmVzc3dvcmQ= w6lzaWRlbnQ= IGhvbW1l IENvbW1hbmRIYW5kbGVy U3BhY2VHdWlk IGNvbXBsaWNhdGlvbg== RklYTUU= IGJpbGxpb25haXJl Q2FwYWJpbGl0eQ== ICdbKl0= IGNvbnN1bHRh IE11cmRlcg== IGRyYWZ0aW5n QW5pbUN1cnZl IGZyYW1ld29ya3M= IENhdGhvbGljcw== Um9vbXM= IEJlcm5pZQ== Ly0v Q09NUEFU IGJsb29t IGludmVudG9y 5ZOI UEFDS0FHRVM= IHNldmVudGVlbnRo QW5zd2Vycw== IOWIneWni+WMlg== IGZhY2lsaXRhdGVk DQoJCQkJCQkJCQkJCQ== IGFscGhhYmV0aWNhbA== 4paE4paA IFJlc3VsdFNldA== 0LXQutGC 6Iqx IGFzdHJvbm9tZXJz IHRhY2tsZXM= IG1pbGl0YW50cw== ZnVuZGluZw== IHdlbGNoZQ== RURJVE9S IEludGVncml0eUVycm9y IHVuZGVydGFraW5n aW5zcGVjdG9y IFVTRVJOQU1F U2VtaQ== Q0NDQ0NDQ0M= IFN0YWZmb3Jk R2F1c3NpYW5CbHVy IEhvcGVmdWxseQ== IFNZU1RFTQ== IHJlY3J1aXRz IGtvbW1lbg== IG92ZXJ3aGVsbWluZ2x5 IGNhYmluZXRz INC+0LHRig== Q2FsbGVkUHJvY2Vzc0Vycm9y IEhleGFncmFt IFdpbm5pcGVn Q29uZ3JhdHVsYXRpb25z cmVjb21tZW5kYXRpb25z VHJhbmNoZQ== IFZlcnNhaWxsZXM= RW5jcnlwdGlvbg== IGZ1bmd1cw== IE1hdGhlbWF0aWNhbA== IOKUgg== KCgoKCgoKCg= IEphbWFpY2E= c3ludGhldGlj IFN0ZXJsaW5n IEFkYWZydWl0 Q29tbXVuaWNhdGlvbg== 5qW8 IGtpZG5hcHBlZA== IHJlc2lsaWVudA== UmV0cmlldmVz IGNhcmFjdGVyZXM= THV4ZW1ib3VyZw== RXhhY3RseQ== IGN5bmljYWw= IGNvbnNvbGF0aW9u IG9yw6dhbWVudG8= IHJlbGVudGxlc3M= QkFTSUM= IEFsb25zbw== IFsnKidd MDIxNTY4Mg== Q2hvcmVvZ3JhcGh5RXhlY3V0aW9u IGJ1cmVhdWNyYWN5 YXNzZXJ0VGVtcGxhdGVVc2Vk IGFuZXVyeXM= IiQ= JScs NDk2 NzM4 ODM4 RHJ5 RGli RGlhbQ== RU9T Rmx5 RkFO SlE= THVtaW4= TVVU U3J2 VGFp VHJ1bmM= VkZP V2FuZw== Y2FrZQ== Y2Jhcg== ZVY= ZWF1 Zmxvb2Q= aGFuZ2luZw== bGFnZQ== bmF0aW9u c2FtbA== dlQ= dmRj fTw= YXRr c3RlbGxlbg== ZW5hZGU= IGNyYXdsaW5n IHBsb3c= IHBsZXg= aXNzcGFjZQ== IGludmFsdWFibGU= IGJo IGJhaXQ= IHJlcHQ= IG5vZw== IG5hbm8= YXNjbw== ZW50cmFkYQ== ZXRlc3Q= IGhhaWxlZA== dXJpb24= IGxhdHQ= aWxpa2U= aWRhdGE= IGVhdHM= b2xpbmk= YWRpYQ== YWRqb2ludA== YWduYQ== b3J0YWxpdHk= dmVyYWdlcw== IFNBTg== IEFnbg== IEFTUA== aWZlcmE= b3dtZW50 IHZyZg== aW1hcw== dW5maW5pc2hlZA== dHVybmluZw== IFBoZQ== IE1pbGxpb24= IE1pZ3JhdGU= IE1hc2hh IE1JREk= KCcqKg== IE5FUg== IE5lZWRlZA== IEZvbg== IEZvZG9y IHJlcg== YXNzaXN0ZWQ= IEJpY2s= IExJTg== IExlYw== bGRz ZW1n dG9sZQ== aXBhZGRy cHJvdmU= IGNoYXR0aW5n IHNodWZmbGluZw== IGxldWtl bWF2c2Rr IDM0OA== aWJlbA== ICV7 cGFybXM= a2V5cHJlc3M= IG1haWRlbg== IGNscg== IG91dHNldA== IHJvdmVy IGRvdmU= IDQyOQ== ICRf IFZpbmNl SU5BVElPTg== IEthaXNlcg== dGVzdGNhc2Vz IHBhcmFjaA== dGltZXRoaXM= IyMjIyMjIyMjIyMjIyMjIyMjIyMj IGxlbmd0aGVu IHN1Zg== MTE2NA== YW5rZWw= IGJvaWxlZA== TEVN IHJlY2Fw IG1vc3RyYXI= ZW5jaWFs IHJlcXVlc3Rlcg== c3VibW9kdWxl dmlld2xldA== RXhl IFJlcGxheQ== IGRpZmZyYWN0aW9u IGRpZmZsaWI= cHNk REVQUkVDQVRFRA== IGxvY2F0aW5n c3RyaW5naWZ5 bmV3ZmlsZQ== b2Zhc2M= IGNvcm8= IGNvcm5lYWw= YmVlZg== cGxhY2Vob2xkZXJz IGNhbHZlcw== INCi YXV0b2Y= QUJPVVQ= cm9waWVz b3Zz IHNraWVz IGVzdMOjbw== IHRlbXBlc3Q= IERlZmVycmVk IF0qKD8= MDQ2 MDQxNTA= IHBlcnNvbm5l ICgiPA== IGVtcHJlc2Fz VFRiYXI= RElBRw== c2Vzc2lvbklk c29sYXRlZA== MDMwMDA= Tm90aWZpZXI= SU1T IHByb2dyYW1tZXJz IGRpYXM= TGVhZA== Z2VuZXJhdGluZw== IGlkZW50aWZpYWJsZQ== emVpY2g= IG1ldGlj IGh1bWFua2luZA== TUFMRQ== IE9yZGVycw== d2FpdEZvcg== IEJlZW4= IEJlYXZlcg== b2dyYXBoZXJz RUxEUw== NzM5OA== IENhbGR3ZWxs UGVybWFsaW5r c2NoZWR1bGVz IG1hZ2ljcw== RGlzY292ZXI= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= IENhbnRlcmJ1cnk= XSsiLg== c25hcHM= IFByZWZlcmVuY2Vz YWppbQ== 5pig VHJhag== IG5vdGVib29rcw== IFNjaGFjaHQ= enltZQ== UFJFUEFSRQ== IENoYXJs IEZyZWV6ZQ== IG5hdGlvbmFsaXNt cGlja2xlcg== Y29ycmVjdGx5 5Zyf IG11dGVk IGluZmx1ZW5jaW5n IFBhcmtpbnNvbg== IEVudHNjaGVpZA== IGJvcmRlcndpZHRo IFNPQ0s= IE1hdGNoZXM= IGltYWdpbmluZw== IEZvcm1hdGlvbg== V29ya2Jvb2s= bmNoZW4= IFRleHRGaWVsZA== Q29udlRyYW5zcG9zZQ== IGNhc3NldHRl IHV0dGVyZWQ= a2xpY2g= IHR4cw== IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= IHRoaWNrZXI= bXVsYXRvcg== IHBhZWRpYXRyaWM= c2FsYXJpbw== ZGlhZ25vc3RpYw== INC40LvQuA== 6LSf IGluZm9ybWFudA== aGFiaXQ= 0YbQsA== QWN0aXZlRG9jdW1lbnQ= IG5ldXJvdHJhbnNtaXQ= IERpZXNl IHRvcm1lbnQ= KSsiXw== 5qiZ bGVhZnM= IEJ1cms= YmVjb21l IGJsaW5kbmVzcw== IEZpbmFscw== INCx0YPQtA== IGRlcHV0aWVz IGNpdWRhZA== 5YWz57O7 7KCE IFNuYXA= IFNuYWtl Sm9pbkJ5VGlja2V0 TWVtYmVyc2hpcA== YW1hbmhv ZmliZXI= IHN0YW1wZWQ= IGdsb29teQ== IHN1YnNpZHk= IG9jY2x1c2lvbg== IFNBVkU= IGdhbGxvbnM= IGNvcm9uYXZpcnVz IExvY2FsZQ== IGlocmVu U2V2ZXJpdHk= ICIvLypbQA== c3VtbWFyaXpl 5LmL6Ze0 IHR1dG9yaWFscw== dGVudGF0aXZl IGR1cGxpY2F0aW9u IFBsZWFz IEZhbnTDtG1hcw== KCdcXCcs IHZhZ3JhbnQ= IHF1YXJyZWw= IERyaXZlckVycm9y w6FyaWFz IOyLpA== INGB0LvQvtCy IG9tbmk= IGJyYW5kZWQ= Q09OVEFJTg== IHN0YWdnZXJlZA== IFB1bGl0emVy dmlsbGFnZQ== IGFyeWw= IFVSSXM= IHRlZGlvdXM= IGN1bHByaXQ= IEV4Y2VsbGVuY2U= IOWKoA== IGVuY29udHJhcg== IGdvZGRhbW4= IGVsZWN0cmljYWxseQ== S2F6YWto Mjk0OTY3Mjk1 IHByZW9jdXA= 4p6W4p6W IFZvaXZvZGVzaGlw QkVSTkFSRA== KDw= NTkz ODM0 ODY5 OTQ0 QWo= QW1wbGl0dWRl QXplcmJhaQ== Q0VSTg== RExheWVy RGhjcA== RlBhcg== R2g= SG9seQ== SnE= TGw= TmFtaW5n UG9yaw== U0VOU09S V25k WHM= WldO Ym91 YnJhbg== Ym1p Y2Fpcm8= ZE8= ZGxkcA== ZnJlZXM= Z2xpYg== aG9k aG9mZg== a3Vu bXlzdA== bmNvbnRlbnQ= cmF0aXZl c3BvbnNvcmVk dGNh dWhk fSoq 4LA= 4bQ= 6J4= 67Q= CgogICAgICAgICAgICAgICAg ID8i IOC4 INmI IHRlcw== c3RhYmlsaXR5 ZW5tZW50 ZGVtb24= ZGVidA== YXJyYQ== IGZpbnM= IHBlcmU= IHNzZQ== IHNzaWQ= IHdpbnR5cGVz bWV0dA== IGR1cmF0aW9ucw== dXJmYWNl b3RpbGxh IGVjZA== IGRlbGw= YWR3YWw= IGdyb29t Y2h4 IFRyZXY= IFRSQQ== IFRvZ2dsZQ== IFNQUg== dGhhbms= IElsdWNjaQ== ICMh IEN2 IENBQg== IENEUw== YXBzZXM= YXBlbmVt b3Bp aW1hdGVk X19d IFBoZW4= IFBlcmV6 IE5BUw== IE5pbnRo IE5hbXNvcw== dXBucA== bmFtZWxpc3Q= Z2V0UHJvZmlsZQ== Y2xhdmU= IEJSRQ== IGFub24= 4oCe IER1bmRlcg== IHByb2dlc3Rlcm9uZQ== IEjDtg== IEhhc2tlbGw= IFdpZA== c2V0RGFlbW9u IEdhbWI= IEVF ZGVmSm50 Iil9 cHJveA== cHJvcHJp IGNoYWxr IGt5 IDM3Nw== dHJ1Y2s= ZWxsaXB0aWM= IEpz b25nYQ== aGVubw== SW5maW5pdHk= IFRocmlmdA== IHVwZ3JhZGluZw== IEtvdA== IEtERQ== IEtub3du IElubg== cm93Q291bnQ= IF9fX19fX19fX18= UmVjdg== bGVkbw== QVRJ QVRDVA== IH0u Y29taXRhbnQ= IFN0cmF3 MTkwMw== bWF4aQ== TEVW IG1vb3Q= bWVkaWNvcw== IGJhY2tkcm9w IHRyYWNoZQ== IFJldmVy IFJlYWN0aW9u w6ltb24= TUVNQkVS IFVubGltaXRlZA== cG9pbnRzaXpl U2V0WA== IHByaW1hbA== IENvbnJhZA== IFdlYXZlcg== aXRlcmJp IFh1 YXBpcm8= dWNjaGluaQ== IDE4Njk= IDE4NTQ= IHJldGluYQ== IGVzdGFtb3M= fSl9 IHNsYXBwZWQ= bWFpbGluZw== S2V5VmFsdWU= IG1vZHVsYXRlZA== IFpob3U= IHJlYWxpemVz Z3LDqQ== IFNoYXJw IHBhdGhldGlj cnRtcA== Zmxvd2Vycw== IGd1aW50 Ym9hcmRpbmc= IEhvd2U= 44Og IGVuY2xvc2luZw== IE9yZA== IHJlc3RsZXNz IGhhcmRjb2RlZA== IGNydg== ZGF0ZXRpbWVz YWZmb2xk ICcsJzo= IGV5ZXdpdA== IEdlb2dyYXBoaWM= U3BhbQ== TU1Z KVws IGVxdWlwZQ== IG5vcm1hbGlzZWQ= bWFrZVN1aXRl IE1hcnRoYQ== IGVtYmFya2Vk Lipc IGZyb250cw== IE5lZ3Jv enpp QUxMVFlQRVM= IHRheG9ub215 aW1wcm92ZW1lbnQ= IERlc2NyaXB0 RW5kZXJlY28= cnVwYWw= JSUn UmVjSGl0cw== IEVYQU1QTEU= VEVTVEFMTFRZUEVT IHByZXN1bWU= ZXhwb3J0TGl0ZXJhbA== IGNvbXBsYWlucw== ZW5vaXNl IGRlYmF0ZWQ= cmlmaWVk IFR3ZWx2ZQ== IHBhbG1z R0FJTg== MTEwMw== IFdhdGVybG9v PSIjIj4= IGJyaWdodGx5 IEluaXRpYWxpc2U= IG9kZGx5 IFN0YXJ0cw== Pi4rPw== UmF0ZUxpbWl0 QkFDS1VQ IEVzdGE= Y29ycG9yYXRl RmluYW5jaWFs VU5ERVI= IHRyYW5zbGF0aW5n IHJvYmVz IHVuc2F0 IENBU1Q= IO2Y IEJpb2xvZ2ljYWw= Zmx1ZW50 7J6s IHNvbWF0aWM= IHBvZHM= ICg/KQ== aW5lcmFyeQ== d2luZGxs IEdsb2JhbEVudlN0b3JhZ2U= IGNocm9tYXRpbg== IEJ1bGs= IGFkYXB0aW5n IGNhbG1seQ== 0L7QsdGJ IHRvbmd1ZXM= IHBvbGFyaXplZA== IERyb3Bib3g= KCcnJ1w= IFN1c3NleA== IHNhYmRmbA== IG1hbnVzY3JpcHRz IHRyYW5zbWl0dGluZw== IO2VnA== 55Wl IFdyaXRlcnM= 4Ka+ IFNpbmdsZXRvbg== IGZhbGNvbg== JzpbXSwn UHJlZGljdG9y TUFSS0RPV04= IFNlbGVuaXVt 6rK9 PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ== UVVFU1RJT04= YW5jZWxsb3Jz IGVwaXRoZQ== IGx1bWluYWw= IFRJTEU= IEV4cGxvcmF0aW9u IHNwb25zb3JzaGlw IGN5bGluZGVycw== cmVzcG9uZGVuY2U= IMO+ZQ== IHBpb25lZXJpbmc= QmFzcXVl IGZ1bmdp VGVsbmV0 bWVuc2FnZW0= c3VjY2VlZGVk RXhjdXNl IGRhbmdsaW5n bm9saW1pdHM= IE1FVEhPRFM= IGhvcnJpZmlj IHBoaWxhbnRocm9w Q2FzY2FkZUNsYXNzaWZpZXI= Qm91bmRlZEJpZ0F1dG9GaWVsZA== IGZvbGxpY2xl IGNoaWNrZW5z TU9SUEg= IGFpc2xl IGNhdGFseXRpYw== R2x5cGg= am9obm55 IE5vU3VjaEVsZW1lbnRFeGNlcHRpb24= IFN5bmRyb21l IGRhbmdlcmV1c2Vz IMOpZ2FsZW1lbnQ= 0ZrQtQ== Q2hhbWJlcmxhaW4= UExVR0lOUw== aGFhcmNhc2NhZGU= TW9tZW50dW0= VGFidWxhcklubGluZQ== IGRlaHlkcm9nZW5hc2U= KGA= Kihc Ly0t QkVU Q3Vt Q293 Q2F1c2U= RlJFRQ== SXJhbg== SU9U TVNU UGluZw== UGluaw== VGJs VHJpcw== Wk8= WnVsdQ== Y2l0ZQ== ZnJpc3Q= Z2lzdA== aHN0 aGFkZA== amFtZQ== a3NocA== bkE= bmli cGRldg== cWl3aQ== dmludA== fXxc 0KU= 2LU= IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== IGF2ZW51ZQ== IHBpc3NlZA== IHdlZGdl IHdhdmVy IGJpYmxl ZWRpYw== IG1vbGw= IHJlbWFrZQ== IHJlYnVpbGRpbmc= dXJhdG9y ICIhIg== b2x1bHU= IGRlaXR5 IGdhYg== IFR1dA== IFRlbmQ= dmVpbGxhbmNl MDAyMDU= IEFX IEFuZGVy IENYWA== aWZhY2Vz YXBj YXBhY2s= IHZi IHZ6 IHZpYnJhdGlvbg== IHbDpGw= IFBw IE5BVA== ZW5kcmE= IGFzY2VydGFpbg== Y2xvdQ== IERlYXI= ZXJlbXk= IFJhbmdlcg== ZXN0cmluZw== IExC IEhpdmU= IEhJR0g= b2NjdXI= IEdDUg== YWNm b2dp IGNvaW5lZA== cHJvcHRv YXJnZXI= IGt1bHR1cmU= ZXhwbGFpbg== ICU9 cGhhbnM= IHN0cnM= IHByZWFjaA== cHJlZ24= YWRkZXJz IHVud3JhcA== IGFiaQ== IHRlc3Rl IGFsbG90 IFZvdGU= MTAzMA== IEtvZw== IEvDtg== IEtoYWw= IGxvb20= IEluc3A= IEluc3RydW1lbnRz d2Vicw== ZWFybmVy ICgnLg== IG5vc3Nh IHBlcmw= IGRpc21heQ== IGludGVudHM= IHNjYW5k Jyck YXNraQ== IGNyZWVk IHJlY3ljbGVk QU5DTw== MTg1Ng== QUxB c3VicGFyc2Vycw== VHlwZU5hbWU= cmVxdWVzdGVy LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== dmVyc2E= IGNvcm91dGluZQ== Z3JvdXBkaWN0 NDA1MA== c3VtYQ== dm9sZW50 IGRvd25z bW92ZUxlZnQ= c3RhdHVzb3V0cHV0 IGxhc3RuYW1l NzU2NA== IDE4NDg= IDE4NTM= IHN1cnRvdXQ= R2V0RGF0YQ== YWhvZQ== IGVzdG9w dHJhaQ== S2V5ZnJhbWU= b3VuY2Vz cmljYW5lcw== IFNoYXJvbg== IHN5bWI= Y2llbmNl IFNlb3Vs IGVsZW1lbnRhbA== IMOz Y29ycmVzcG9uZGluZw== IFJldHVybmluZw== 5Y+M XSkpWw== 55qE5piv 55qE5pe25YCZ IGJlaG9sZA== IG9iamM= cHl0aG9uYW55d2hlcmU= QmFzZVBsdWdpbg== IGNydXM= IE9STQ== IHVyZw== ICcnOw== c3JjZGly IE1hbmlmZXN0 dW1iZWw= dW1ibGVz IOya CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== bWFyaWVz IEVuag== 5LqS cGF0cmljaWE= IG1lZGlhY29udHJvbA== IEFSUA== IGhlYXJ0eQ== IE1jQ2w= IEFjdGl2 NDAwMDAw cGFkcw== IHJldm9rZQ== 5peX 0YvQtQ== ZXFubw== IOKAmOKAmA== T3V0cHV0TW9kdWxl dGVzdHN1aXRl UmVjSGl0 c2tpcHBpbmc= TUlOVVM= dmFyaW91cw== IGNvbnRyYWN0aW5n 5Lit5b+D cmFua2Vk ZHJvcHM= IHBzeWNoaWM= IGJyb2FkY2FzdGVy IHByZXNj c2hpZnR3aWR0aA== IG9yaWdpbmF0ZQ== LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t IENsYXNzaWNhbA== INCy0L7Qtw== dGlja2Vycw== 4pSb KCIiKSw= 5Yy65Z+f IHR4aWQ= IG9jY3VwYW50cw== IEdyZWVuYmVyZw== UkVRVUVOQ1k= IHZhbmlzaGluZw== IHNob3BrZWVwZXI= 5a6a5L2N IHJlamVjdGluZw== INGI IHBoZW5vdHlwaWM= Q29tcGxldGVy cHJvZ3JhbW1lcg== SW1wb3J0YW50 IEF2Zw== IFRvbWF0bw== L1wv IEdlb3JnaWFu IGludHJvbg== IEdsYWQ= c2NydWI= ZXN0aW1hdGlvbg== bmFtbGli d29ya2Zsb3dz UHJlc3N1cmU= IGRvdWJseQ== RmFjaU51bQ== WmVyb0RpdmlzaW9uRXJyb3I= RXJyYmFjaw== IGFzc2lzdGluZw== UHVibGlzaGluZw== IFRoZXJtbw== Z2Fzcg== IHJlYWN0b3Jz IGNsaW1heA== 6ZqU IHBlcnN1YXNpdmU= IGNvbnN0aXR1ZW5jaWVz IENyYXp5 d2N0ag== IGluc2lzdGVuY2U= IEhlbmRyaWNrcw== PSIiIlw= NTU1NTU1NTU= IGVtYnJ5b25pYw== aGx0RVNQVFQ= IHByb3ByaWV0ZQ== TW9yaW9uZA== IGNvbmRlbW5hdGlvbg== IGtvbW10 IHJldmVsYXRpb25z 4LmJ IG1hbW1hcnk= IEthdmFsYXM= IEFsZG8= IGZlYXNpYmlsaXR5 U3BlY3RyYWw= IGNsaWZmcw== IEFybWVuaWE= IGhhemFyZG91cw== 5bel5L2c Q2FuZGlkYXRlRmFjaU51bQ== IGFyb3VzYWw= IGNodWNrbGVk IFlpZWxkcw== d2NmbXA= IHNlbWluYXJ5 IENsYWltcw== TWFob24= IFBpcmF0ZXM= YnJlZWRpbmc= IFJvY2hlc3Rlcg== IElsbHVzdHJhdGVk IG1hbnNsYXVnaHRlcg== zrpC IHdob2xlc2FsZQ== IHVuZGlzcHV0ZWQ= IGF1cmV1cw== R0FURVdBWQ== 6LOH5paZ IE1pYlRhYmxlQ29sdW1u IG5vc3RyaWxz y4bDog== IFNFVFRJTkdT QnJhZA== QkRU Q2F0aA== RHJp R3V5 SGF5 SGNhbA== SGlnaGVzdA== TUxF TklD UW9z UmVudGFs U0FQ VEFD VGlsZXM= VWc= Vmw= Vm9jw6o= WWVzdGVyZGF5 ZmNk Z2Nw Z2lybHM= aXB0cw== aUNhbmRpZGF0ZUZhY2lOdW0= a2ly a3JpdA== bW1z dm9z eEZF zrk= CgogICAgICAgICAgICAgICAgIA== IO2VmA== IHRuYW1l IHR3ZWFr ZXJhdGluZw== b3JtZWQ= ICAgICAgIAogICA= aXR5cGU= aXR1dGlvbg== IGNydW4= IHBmb3JtYXQ= IG9yZWdhbm8= bWV6 IGJsaXN0 bmRvbg== ZXNjaA== IG11bQ== IG11bGU= ICciJQ== ZXRvcg== ZWxpZw== ZWxpYQ== IGxhY2U= ICIuIik= IFRyaWU= IFRSSQ== YWdwbA== IHVhcnQ= IFNlY3Rpb25z cmlrZQ== IElSQQ== MDAxOA== MDA2MA== YWJzb3I= bnRlbg== IENTRg== aW50cA== IGJleg== IHZkb20= IHZvcnRleA== IGNvbnNlYw== YW1vZGVs IHllcg== IFBpZw== YXNzYWRvcnM= Z2V0cGFzcw== Z2V0Qm9vbA== IG5vdGlmaWVy IG5vdGV3b3J0aHk= IEJheg== IEJvaA== IGFuZ3M= IERhd3Nvbg== IERlbmRybw== IHByb3Bvc2luZw== IFJpbQ== IEhW IEhDUA== J11bOiw= c2V0TGFiZWw= c2V0QXV0bw== IEdsb3I= IEVsaW0= IEVpZ2Vu IHJlc3Bvc3Rh IGNob3Bz YXJnYXI= IGt0 b3N0YXQ= IDM0OQ== IHByaW50b3V0 IGNsaXN0 IGVuYW1lbA== IHByZXByb2Nlc3NlZA== IHVud2luZA== IHVuaXZhcmlhdGU= YWtpbg== IEtlcmFsYQ== IGZpbGVzaXpl IHBhcmFseXNpcw== ZXJ0aWU= cmVhZGVycw== IF9fX19f MTI2Nw== UmVsZWFzZWQ= ZGJk IHBvaXM= bGVjdHJh Z2Vycml0 IGNvbW11dGF0aXZl IHN1YnBhcnNlcg== bG9hZFRlc3RzRnJvbQ== bGVza3k= IENob2ljZXM= IENob21za3k= IHNwaWVs IHNwaWNlcw== IGFkZG9ucw== Li4uJy4= Li4uXSg= cmVnaXN0cm8= IG9wZW5pbmdz IGZ1bmN0aW9uYWxseQ== bWFwYQ== IENvbnZlcnNhdGlvbg== NTU2NA== NjY2Nw== IDE4NzM= ZWtpbmc= IG1vbmFzdGVyeQ== c3dhcm0= IEZvcmdldA== Q29udHJhc3Q= SUxMRQ== 0YLQtdGA MzQ2OA== dWZmbWFu VW5hdmFpbGFibGU= VW5pdmVyc2U= VW5pdmVyc2Fs Z3J1bmQ= IENsaW5pYw== IENsc1R5cGU= dGZu IGdycGM= IHNvcnRl IHF1ZXJ5aW5n IFBsYW50cw== IE5vdmVs IG9jY3VsdA== IHN3aWc= IGFudHM= b3llcg== ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== QW5ubw== IGh5cGVycw== Zm9udFNpemU= IGRhaGVy aGVsbGU= IGNvc3R1bWVz IERhdGFUeXBl IGVtaWdyYW50cw== IGltcHJvYg== 0LrQtQ== Z2xWZXJ0ZXg= ICItIiw= ID8+ ZW52aXJvbm1lbnRz IGZhY2V0cw== IG1pc21h IHRyb3V0 IGxpbXM= IGluc3RhbGxtZW50 YXVsdGhhbmRsZXI= IGJhbGNvbnk= ZHJvbmU= SFRUUFJlcXVlc3Q= IG1hcnJ5aW5n VHJhY2tBbmdsZQ== ZW50aXR5SWQ= IFJlbWFyaw== IFByw6k= IHNjaG9sYXJseQ== YmlvbG9neQ== IHJvbGxvdXQ= 5b63 IGNhc3VhbGx5 fn5+fn5+fn5+fn5+fn5+fn5+fn4= IHNjcmFtYmxl Z2llbmU= IEhvbWVQYWdl a2luZHM= dGVybWluYXRvcg== Y2FydGVzaWFu IGp1bXBlcg== R2FtZU9iamVjdA== 64uo IGJvbmRlZA== ZGVjb3JhdGU= Pi48Lw== IHJlY2lwcm9j IFNpZ25lZA== ZGlhZ25vc2U= YXVzY2g= UG9wdWxhcg== IHRoaW5uaW5n IEFubmll IGV4aGliaXRpb25z SW5pdGlhbGl6aW5n IERpc3Rpbmd1aXNoZWQ= RGlzcGxheVJvbGU= Q29uZnVzaW9u IG1pc3Npb25hcnk= T3B0aW9uVmFsdWU= IFJlZkdyYXBo IHNhbmR5 IEVsbGlzb24= IG1hZ25pZmljYXRpb24= IEN5YmVy IEFMTE9X IE1vbnRlbmVncm8= TnVsbGFibGU= SGFycmlz IEFwaUV4Y2VwdGlvbg== Q2hhcmFjdGVyaXN0aWNz bW9udG9u IHByb3RvdHlwZXM= RExU dmVydGljYWxMYXlvdXRXaWRnZXQ= 57yp 44G+44Gb44KT RUxMSVM= Ymxhc3Ru IFRlbGVwaG9uZQ== 5aSa5Liq ZGFuc2U= TWFsdGVzZQ== QnJva2Vu IEhhcnRtYW5u IFF1YW50aXRhdGl2ZQ== TUVSQQ== RGVwZW5kZW50 IGFuY2hvcmVk b3BlbmVycA== QVNDQVI= 5ruh S2V5Ym9hcmRCdXR0b24= w7xocnVuZw== IGFlcm9wbGFuZQ== INC/0L7RgdC7 IG5hdmlnYXRvcg== IG5hc2Fs c3VnZ2VzdGlvbnM= IFRyaXBvbGk= IEF4aXM= IHJlY2tvbmluZw== IFByb2dyZXNzQmFy YmF0ZWF1 Pyw/LD8sPyw= w6RocmVuZA== Q0hBTkdFUw== U2VuaW9y SVRFUkFM IGV2YWN1YXRlZA== IFRvbmlnaHQ= IExhcGxhY2U= cmFpc2Fs IEZVTkNUSU9OUw== Y3ViaWM= IHBpbGxhcnM= IOunjA== Qk9PU1Q= IEdFTkVSQUw= RGVwcmVjYXRpb25XYXJuaW5n SW50ZXJhY3RpdmVTaGVsbA== IHVwaG9sZA== bW9pc2VsbGU= cmVuZXdhbA== IFZPTEFOR0VT SlVNUA== cXVhcmll IGFuY2VzdHJhbA== IEVsZWN0cm9uaWNz dGhyZWF0ZW5pbmc= IG7DqWNlc3M= IERlY2lzaW9uVHJlZUNsYXNzaWZpZXI= IG5hcmNpc3M= IGFzcGlyYXRpb25z W14+XSo= IE9yaWVudGFs Q01GQ29yZQ== UHJpbWFyeUtleUNvbnN0cmFpbnQ= IEJldmVybHk= 6rmM IHBpY3R1cmVk IGFmZmlkYXZpdA== c291cmNlbGluaw== IFRlcnJpdG9yaWFs IGVpbnplbG5lbg== ZG91Ymxlcw== IGF0dHJpYnV0YWJsZQ== IE5MUlA= IGx1YnJpYw== SW5kb25lc2lhbg== aW1hY2h1cw== Q2hJUHNlcQ== YWRtaW5kb2Nz K3w= ODY0 QXVyb3Jh QmFrZQ== Q05U R2Fu TGFt TGlzYQ== TUlORQ== TmM= TkJB U3Bhcms= V0FORw== WGU= WVVW YDs= ZGVuZA== Z3JhaW4= Z3R0 a1Vw a3Zt a2l2eQ== bmFyZ3M= cmFudHM= c3Bv c2lzdGVy c2ZpeGVk c3VmZmljaWVudA== dHJlYXQ= dmllcg== dm90ZWQ= fSgt 0Zc= 4YY= 6bo= IHRhc3Rpbmc= IGFhbg== cmV5cw== YXRyaXg= aGVlZA== b3Jvdg== bGVoZW0= IGZwcg== IHBpc3M= IHdpZWxk IGluaWNpYWw= IGlucXVpcmU= IGJvdW50 ZXN2aWxsZQ== IHJlbWFuZGVk IG5jb2w= YXNpbHk= IGRhbmNlcg== IGhi aWxhdGVk cmFjaA== YW1ldHJv Y2hhbWJlcg== IFRyb25k IFNBTVBMRQ== IElyaXM= IElNVA== MDA3Mw== bnRvbg== dGV2 bHlkZQ== b3dpdHo= IGNvbmNsdXM= IFBpbmc= IFBBWQ== IFBhYmxv IE1r IE5PUk1BTA== Y2xhcw== Y2x1ZQ== Y2xpZmZl IG5vdGNo IEJq IEJhc2lz IERlbnNpdHk= IERSSQ== IG9yY2hhcmQ= IFJ4 IFJQQVJFTg== IGhlY3Q= IExhdQ== IExvYmJ5 IEhpbg== IEhlZA== IEhpbnQ= IEhlcnR6 J10+ b3V0Zg== aWxsYXRvcg== IGNveQ== IilbLQ== c2NzaQ== IE9N CgkKCQo= IDM3NA== IDM5Nw== ZXhob3Vy dHlwZUluZGV4 IGFydGU= XSkrIg== IG91dHN0cmluZw== IG91dGRvb3Jz PSIuLi8uLi8uLi8uLi8= IEpXVA== IGFkbWlzc2lvbnM= YWRkUGl4bWFw IHVuZmluaXNoZWQ= IHVwYmVhdA== IDUzMA== IDUyOA== IEtNZWFucw== IHBhcm9keQ== aXhlcg== IG5ld3ZhbA== YXVjdGlvbg== IGRpc2FncmVlZA== IGRpc3NlcnRhdGlvbg== IHNjcm9sbGluZw== bXBsYWNl IHN1Ymo= cG9zeA== ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= MTUyNQ== IGxpbmVh MzMzMA== MTgwMQ== KFsoIg== c3Vic2VjdGlvbg== SUNQ X3t9Ii4= RXhwb25lbnRpYWw= YXR0YWNraW5n am9pbnBhdGg= IHB5c3N3b3Jkcw== IHRyYW5zaXRpb25hbA== YnVjaw== cHNpbg== IHRleHRib29rcw== Uk9VVEU= IENvbmFu IGluZGljZQ== b3V0cHV0RmlsZQ== IGxvb2t1cHM= dHJhbnNwYXJlbmN5 INCR WzpdKQ== aXRlcmF0aXZl IFByb29m IGNhbGxhYmxlcw== IHNtdWc= cGFydGllcw== dWN1bWJlcg== fX0t IGNvbnRpbnVhbA== JykpXQ== IG1vbms= IGV0aXF1 IGV0d2E= R2V0b3B0RXJyb3I= bW9ub3Rvbmlj VGltZVN0YW1w Nzg0Mw== cGFyc2VFcnJvcg== dmFyaWVz c2tpbnM= Zml4ZXM= IHByb2plY3Rpbmc= ZnJhbWVyYXRl IENsaWZm IGdydWI= ZGV2ZA== SXRlbUlz IEFsbGllcw== IGh1bWlsaXR5 TUFKT1I= YnVpbGRpbmdz RUxG YWN0aXZlYmFja2dyb3VuZA== w7NyaWE= Q291bnRFcXVhbA== IEFkYXB0 c2VjdXJlZA== IG1lcmdlcnM= IHF1ZXN0aW9ubmFpcmVz T3V0Y29tZQ== IHRva2VuaXplZA== IHZhcmE= IOyjvA== IGdlbWU= IHByb3RlYXNl b2VzY2FwZQ== Rmlncw== IFJlZ2Vs cmV2b2tl IENhbm9u dmFzaXZl TWluUHQ= UFVNb3Jpb25k cGF0aWFs IHN0b3J5bGluZQ== IGdyaWRzcGVj ZmRvcGVu SVJD VVNFUw== eW1hbA== ZW1iZWRz IHJlZ3VsYXJpemVy 5om/ RXh0ZXJuYWxFbmNvZGluZw== IGVzdGltYXRvcnM= IGJlZHJvb21z ICInJQ== IFNlbmhvcmE= IG1vdGlvbmxlc3M= 0LXQvdCw U0NTSQ== IFdvcmtzcGFjZQ== Y29udGluZW50YWw= IHJlc3RyaWN0aXZl SE9TVE5BTUU= IHRocmVhdGVucw== IGF1ZGl0aW9u IGV4cG9ydGVy IHNpbmlzdGVy Ynl0ZWNvZGU= IEJsYWNrcw== IG9jY3VwaWVz IFJlYWR5 T3BhY2l0eQ== IEdyaWxs TGF1Z2g= IFJlc2VhcmNoZXJz d2F0ZXJmYWxs IFByb3ZpZGVuY2U= YW5pbWF0aW9ucw== IG11bHRpcGx5aW5n SW5pdGlhbGl6YXRpb24= V0lER0VU JC0k IO2D YXVnbWVudGF0aW9u 562U w7RsZQ== 44Gn44GN IFNlbGVjdEZpZWxk IFBhY2tlcnM= QWNjb3JkaW5nbHk= IGRpc2FwcGVhcmluZw== YmVjdWVk Q2xlYW5lZA== YnVmZnM= 5ouJ IGZhYnJpY2F0ZWQ= IEhlYWRhY2hl aWNpZW50ZQ== IGluaXRpYXRpbmc= IHJ1bW91cnM= ZHJpdmluZw== IENvbXBvbmVudFR5cGU= IGV2aWRlbnRpYXJ5 IGFxdWF0aWM= IGFsZ3Vucw== IFN0ZXBoZW5z IFRlbmFudA== aXJ0c2NoYWZ0 Tm9yd2F5 bmV4dGhvcA== IGFwcGxhdXNl cHJlc2NyaXB0aW9u dGVsZXBob25l IHdvdmVu UGVyc2lhbg== IHJlcGV0aXRpb25z IHBlbmV0cmF0aW5n 44OD44Kv IG5lZ2xpZ2VudA== IHByb2ZvdW5kbHk= U2lsdmVy ICJcXCI= IHNhaWxvcg== IEtyaXNo 4paE4paE4paE4paE c2NyYXBlcnM= LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== IHByZXJlcXVpc2l0ZQ== IHBpcmF0ZQ== IE1RVFQ= Y29lZmZpY2llbnRz IHV0ZXJpbmU= IFJFRkVS IHByb3BoZWN5 IEFyY2hhZW9sb2d5 Xl5eXl5eXl4= cGVhcnNvbg== IENVUlJFTlQ= IGp1cmlzZGljdGlvbnM= IFBBU1NXT1JE QXNwZWN0UmF0aW8= IGNlcmVtb25pYWw= Y2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2M= IGFzeW1wdG9tYXRpYw== TXVsdGlDb250ZW50RW50cnk= SW1hZ2luZQ== IFdoZWVsZXI= TVVMVElQTEU= Y2F2aXR5 IGN1c2hpb24= cVlYWmhM IGh5ZHJvcGhvYmlj IEhlbHNpbmtp IOumrOyKpO2KuA== c3RlcmVv IE1TTkJD TWFjZWRvbmlhbg== VFJIQnVpbGRlcg== VEJpbmFyeVByb3RvY29sQWNjZWxlcmF0ZWQ= VHJhbmNoZUlW b2Zhc2NpYWw= KSI6 ODQ0 OTMx PShb PicnJw== QnQ= RGljaw== RGFuZ2Vy R3Jvdw== SEFMSUdO SXJlbGFuZA== SlBZ Sm91cm5leQ== TGlt T3U= UEZU UUFN U2VjdGlvbnM= VG93 VG93ZXI= V2Fybg== WFNT YnE= Z3Vucw== a25pZ2h0 b2luZQ== csOz c2l0ZW1hcA== dHJheQ== eGlhbg== fl7iiJJe 56M= IOS4gA== aW5zZWN0cw== ZXJ0ZQ== cmVwbGllZA== IGluRmlsZQ== IGJhcnI= IGJ1bmRsZWQ= bmRi IG1vdQ== IHJlcGVydG9pcmU= IG5mcw== YXNhbg== IGRhZGR5 IGhhdWxlZA== cmFwcA== IHRocml2aW5n Y2Vl Y2hvcmQ= YWdyaWQ= YWdpcmk= dmV5cw== IFNlYXI= IFNMRQ== IFN0ZXJu IFNWTQ== cml2 IElDVQ== MDA0NA== MDA2Mw== YWJldHM= IHNlZ3M= IHNlZGFu dW5lc2NhcGU= IiJd IFBBSA== IE1pc3Q= IE1hbnQ= IE5QQQ== dXB1dA== Y29uY3VycmVuY3k= bmFtZU1hcHBpbmc= IEZsb29k IEZVTEw= IEZpc2NoZXI= IEZsZXRjaGVy IEJNUA== IERyZQ== IGhlY2s= IExQQVJFTg== c2V0UG9z YW50aWNhbGx5 b2dvbg== XSxbJw== CiAgICAKICAgICAgICAgICAgICAg IF98 IConLA== IGphbWVz IGpvZQ== IGpRdWVyeQ== IGpva2luZw== b2J0 IDM2Mg== ZXhhbWluYXRpb24= cGhv IGNsaW5n IGNsb25pbmc= IHN0cmFuZGVk IFwk YWRkQnV0dG9u IHVubGFiZWxlZA== bGxpcw== IDQ1Ng== IGFwb2xvZ2llcw== eXNvbmU= IFRoYW4= Y2hlb24= MTAyMg== IEt1bA== IEthdWY= dW5kb3M= Y29sbGF0ZQ== aGVydHk= QVRS YXVtZQ== Y29taWNz IHF1YXJr IGludGVyY291cnNl IHdvcmtpbmdz ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== Il0nKQ== VGhyb3c= IHppZw== OTk3NQ== IHt9Ig== MTQwMA== dW1wdXM= am9pbnM= IFVuZXhwZWN0ZWQ= REVDQVk= IGFjY3VzZQ== Q2xpbmljYWw= IGJsYXpl cmVsYXhlZA== RmlsZUxpc3Q= IFsnIw== XFws IENvZmZlZQ== aW50ZXJsZWF2ZQ== c2xhbQ== dXNoaW1h YWxrb3h5 Y29ubmVjdGl2aXR5 bXNnTGlzdA== IE5ld21hbg== MDQ0Mg== cG9zdERhdGE= IFNoaXBwaW5n IHFu IG5ldG1hc2s= RElWSUQ= IGJyb29kaW5n aG9l QWRkVG8= IGNvbG9yYmFy IHBhZ2VUb2tlbg== IGdsb3I= Q0FNUE8= TG9naWNhbA== ZnVuY2RlZg== 5Yid eG1scnBj IGhvc3RhZ2U= IGNoZWVzZXM= IHNob3J0Y3V0cw== bG9jYXRpb25VUkk= bXVsdGljYXN0 IGFjY2Vzc29yeQ== dWt1 IGludmFkaW5n dG1wcGF0aA== VkVTVA== IEJsaWdodA== VHJhbnNmb3Jtcw== IENPTk4= ISEiKQ== IGVtdWxzaW9u bWVzRmFtaWx5 XStb 0YPRgA== ICIpIik= IFBhcnRpY2xl VHJhY2luZw== IHNsZWVweQ== IGNvbnRhY3Rpbmc= bmJpbnM= IExPQw== 5Yem55CG IG1pY3JvZ3JhcGg= IEZpbGVXcml0ZQ== IEVYSVQ= QmFyYmFyYQ== IGxpbmVu MTAxMg== dHJpYW5ndWxhcg== IEVhc3Rib3VuZA== U2VsZWN0RmlsbA== IHBzeWNob3M= IGxpdGVyYWxz U0NFTkU= UmVsVmFs Tk9USUZJRUQ= UGVn IGhvbm91cnM= IE1hZ25ldA== IFByZXNzdXJl RGVwb3NpdA== IHV0dA== IHNwb2lsZWQ= c29ja25hbWU= IE5vcnNl Q2VsbFJlbmRlcmVy c2V0ZGVmYXVsdGVuY29kaW5n IHRlcm1pbnVz ICIjIg== IERPRVM= 5YiG5Ymy IFJlc2VydmF0aW9u ZGVjb3JhdGVk IEFmZmluZQ== VlZT Q09NTUFORFM= IHN5bmVyZw== dGJ4 fV4q IGluZGVudGVk IEhpc3RvZ3JhbQ== IHRvd2Vscw== IO2U IGNvbnN1bHRlZA== IHBhcnRpdGlvbmluZw== IGZhdWx0cw== ZGV0ZWN0TXVsdGlTY2FsZQ== 7J6R Y29waWVk IGh1cnRpbmc= INGC0L4= IFBsYXlsaXN0 dnZ2dnZ2dnY= Um9hZA== IEZlZGVy IGNhdGFsb2dz IHdpdGhkcmF3aW5n eWllbGRpbmc= 44Gf44KB IHZlcmJhdGlt YXR0YWNrZXI= IHRpZGFs IENhcmV5 d3JpdGVyb3dz Q1lBTg== IENyb2F0aWE= IHJlc2lzdG9ycw== IFByZXNieXRlcmlhbg== IFdhbHNo U2VnbWVudGF0aW9u IGdyYWNlZnVs IEhEQUM= IE5vYmxl ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj Y29udG91cmY= Y3JvZnQ= dGVjaG5pY2Fs IGJpdHRlcm5lc3M= INio IHJlbWluZGluZw== IMOqdGVz IFBLQ1M= 44Oq44K544OI IHJlY2tvbmVk IOygnA== IHBvdXZvaXI= IEF2ZXJhZ2VNZXRlcg== IHBoYXJtYWNvbG9naWNhbA== cmFpcmll IFZJRVc= VkFSSUFOVA== IGV4cG9uZW50aWFsbHk= IGNvcnJpZG9ycw== IEtpcmJ5 IGVtYm9kaW1lbnRz IGJhcmdhaW5pbmc= IFRvYmFjY28= IE1vbml0b3Jpbmc= IHByb21vdGVycw== IHByZXJlcXVpc2l0ZXM= MTExMTExMTExMTExMTExMQ== IGJpb3N5bnRoZXNpcw== d29yc3Q= bWFyZ2luYWw= RW5jcnlwdGVk IE1hcnhpc3Q= IENvbmZlZGVyYWN5 IFRSQU5TQUNUSU9O 5aKe5Yqg IHN5bWxpbmtz c2thZXQ= ZXNjYXBlZA== SHVtaWRpdHk= IHNhbmN0dWFyeQ== IFNjaWVudGlzdHM= REVOSUVE IGJhbWJvbw== ZGVsaXZlcmVk IHJlZnJhY3RpdmU= IENvbW11bmlzdHM= 6b2S R1JBREU= IFByZXN0b24= IiwiIiwiIiwiIiwi TkNIVw== IHBhcmFub2lk QlVORExF L3w= ODc4 OTQ4 PigpOw== QVVE QkFM QnJvbg== QmFieQ== RGVk RVZBTA== RWZmaWNpZW5jeQ== SGlzdHM= S3c= T20= Um9zcw== U3BlYWs= VGFwZQ== VHJldm9y WElORw== WWw= XD4= Y2ln Y29i Y3VuZA== ZXZhbHVl ZVBvcGVu aVN0cg== bGF2 bXV4 bmNvbXBvbmVudHM= cnRw cmFuZ2luZw== dGli d2Fw eXVt IOeUn+aIkA== IOWFs+mXrQ== ICAgCiA= IHRhcmQ= ZXJyYQ== YXRldA== IHRoZW9sb2dpY2Fs IGNkYXRh ZGVsZWc= c2VsZnJlZg== IG1uZQ== IG1vc2FpYw== IHRvbWFy ZXRt dXJhdGU= ICI6Iiw= ICLvv73vv73vv73vv73vv73vv70= aWxlbg== aWxhdGU= cmFpc2Vy aWd1 aWdrZWl0 IFRhbnlh IFRUUkhCdWlsZGVy IFNORA== IFNJRFM= KClbOi0= YWJlbGxh IENhaW4= IHZhZA== IHNldm9mbHVyYW5l b3Bpbw== aW1vdg== dW5sYWJlbGVk IHllcA== b2RveA== IFBhcmU= IFDDqQ== IFBydW4= Jzp7 IE1pbWU= IE5vdQ== dXB1bmN0dXJl IEZ1Y2g= ICso ICsiXA== IGFsZ29yaXQ= Z2V0TWF4 IER1bms= IERpYW5l YXJ0aWM= Jyl9KQ== IEx1Yg== IExhY2g= aXZpcg== IEdvbmU= IEdBTg== Wyc8 cGVyZm9ybWVk aXJlZg== IDM1Mg== IG1hw7FhbmE= c2hpZnRlZA== IGNsdXQ= IGVuZmlu ZWxsaXA= IHVuY29uZGl0aW9u IHVucmF2ZWw= IDQxMw== aGVueQ== cG9zZXI= IFRob3VzYW5k Z2V2 Y2hlZHVsZQ== SU5J IHVwcmlzaW5n bGVuZXQ= IDUwOA== IEtF IEtvcA== IEtpdHQ= IHNhaW50 UmVidWlsZA== U1RD b2xkdA== YXJpaQ== IFlhcmQ= IHF1ZWQ= IHF1aW50 IHN1Ymlk IHN1YnN5c3RlbQ== IENocnlz UHJvdGVjdGlvbg== Q29udHI= IHBlcXU= MTgxOA== IHJlZ3M= IHp6 IHp3ZWk= IHp1c2FtbWVu IHRyYWluZWVz IHNwZWN1bGF0aXZl IHB5cm8= YWlyZmxvdw== MTcwMA== LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== YW1wZWQ= U2V0QmFja2dyb3VuZENvbG91cg== dHNkbg== IG91dHB1dGZpbGU= IGNvbmZpZ3VyYWJsZQ== KTsiKQ== IEV4cG9zdXJl dm9scw== YXV0w6k= IGV2ZW5pbmdz Ii4rPw== SW50T3B0 IDE4NTc= IHBsYXlsaXN0cw== c2xhdmVz IHJldHJhY3Q= YWhpbGk= IC0tLT4= aWRlbnRhbGx5 IEFsYmFu IERlZ3JlZQ== IHNsaWNr b2xlbQ== ZHNu IGNsZWFuc2luZw== aW1ndXI= VW5hcnk= IGF1dG9lc2NhcGU= Z2FtZURpc3BsYXk= IG11bHRpbA== IG1lZGlhbA== IENvbGxhYm9yYXRpb24= cnRt c29sbw== IGRpYW1ldGVycw== In06 IGRhdGV0aW1lcw== 44Ol b3BlcmF0ZQ== ODUx IDEzMDA= Y2hhcmxpZQ== w7Ntbw== IEFkR3JvdXA= IHR3aXRjaA== ICcnJyk= IG1vY2tz VkVSU0U= IGhlaWdodGVuZWQ= aWNyb2JpYWw= IFBlcmZvcm1z T3V0bGV0 TU1T ZGVjaWRl ZGVjaW1hbHM= UG9saXRpY3M= IGhvdXNlaG9sZGVy IGVtYmFyZ28= d2VicA== IE15ZXJz aW52bw== IG1vcmFsZQ== RGlzY29ubmVjdGVk IGVwaGVtZXJhbA== QmVhbnM= IFByZXA= IE1vbnRlcnJh IG9wdGltaXNt Z3JlZXRpbmc= b3hldGluZQ== IGF1dG9tYXQ= cHV6emxlcw== IENoYXJsZXN0b24= 5bqG IGhvdHRlc3Q= bWlkcG9pbnQ= aXBlbGFnbw== c3VwZXJ2aXNvcg== IHByZXZhaWw= IEVkdWJ1bnR1 IGlycmVkdWNpYmxl RVJST1JT VGhyZWFkUG9vbA== UXVlcnlTZXQ= TE9HUw== R3JhcGhz aW1wbGVtZW50cw== IOa3 4pSB IHBsZWFzaW5n Y3Nzc2VsZWN0 KCItIiw= RUVERUQ= K1wuXA== TWFya2Vycw== 6KGo6L6+ IENvbmdyZXNzbWFu Y3Vpc2luZQ== IE1ldHJpYw== W119 ICcjJyw= IGZldGNoZXI= U2luZ2xldG9u IHJlcGVudGluZw== W1wqXSgj U2tpcHBlZA== IEplYW5uZQ== ICQke1w= ZGlhZ3JhbQ== IGluY29tZXM= IHRhcmJhbGw= QnVmZmVyZWQ= ZGFsYQ== R1RW 5paH5Lu255qE IG5vZGRpbmc= aW50ZWdyYXRvcg== UlRM IGFjY3VtdWxhdGluZw== bnV0cmllbnQ= IFNQQUNF Q29weWluZw== 6L+b5Yi2 bXBoYXJ0 IHJlbGF4aW5n INC80L7Qtg== IGZyYWdtZW50ZWQ= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t VHViZUE= ICc6Jzo= cHVzaEJ1dHRvbnM= 6L+Z5qC3 IGFzY2VuZA== IHR2YnVmZg== bW9iaWxlVGVtcGxhdGU= Rml0bmVzcw== ICIuIi4= UlBO IFB1cnBsZQ== cnNzbw== Ii8+PA== IGJyZWVkcw== 6buR IENsZWFudXA= c21hcnRpbmRlbnQ= IHBzeWNoZQ== Q0xVU1RFUg== IHByaW1lcmE= d2lyZWxlc3M= S2V5Ym9hcmRJbnRlcnJ1cHQ= IGVuZGVhdm9y UGVyc2lzdGVudA== RWxlY3Ryb25z IGhvdmVyaW5n b3R5cGluZw== RXBvY2hz PT09PT09PT09PT09PT09PT09PT09PT09PT09 R3JhZGllbnREZXNjZW50 bWlsZXN0b25l VGVjaG5vbG9neQ== IENvdXJ0cw== IENCTEI= c3RyZXNzd29yZA== YXNzZXJ0TGlzdEVxdWFscw== IHJoZXRvcmljYWw= IGdsdXRhdGhpb25l IGFydGVyaWVz IEZyYW5jZXNjbw== Q09PS0lFUw== IE5WREE= UHJvamVjdHNMb2NhdGlvbnNEYXRhc2V0cw== 65+J IGFjY3VzYXRpb24= IExhbmNhc2hpcmU= IEdoYW5h IHN0YWlubGVzcw== IHJ1Z2dlZA== IHByZWRpY2F0ZXM= IGRyZWFkZnVs QUdUQ0FHVENBR1RDQUdUQw== 5ZCv5Yqo IGNvbmNhdGVuYXRlZA== IGlwdGFibGVz RW1iYXJrZWQ= am91ZXVy IFJpZmxl YWJ1bmRz 552A IEFMRUY= IGx1Z2dhZ2U= IENVREE= RkhJUg== R2FyeXZkTQ== IERlY29yRGVzYw== bm9ldWRz IO2MjOydvA== IHJ1cHR1cmU= SG91c3Rvbg== IOabtA== IFBhZ2luYXRpb25Db25maWc= RE1QQVBFUg== IEJvZWhuZXI= cnVudGFza2VudHJpZXM= IEN6ZWNob3Nsb3Zha2lh KyIqIis= MDMwMDA2MDU= Ii4uLg== Jy0t LcK/ QnVjaw== RGlw RFVQ SGFydA== SklBTg== S2xpbmU= TUNB TkxP UHVuag== UU1vZGVsSW5kZXg= UmFjaw== U2VtaXQ= VVc= Vms= VnQ= WFZQTnRWUE50 WWFsZQ== WlE= Y2lzaW9u Y291cGxpbmc= ZGFuYQ== Z2Nm aGxlcg== bG91 bXJw bmFucw== bmx1 c2tleQ== c3dlZXQ= dGVuZGVycw== dWNj dmluZXM= eGlvbg== eHNpemU= fCg= 5pA= DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== aW52aXNpYmxl IGFhYQ== cmVhY2hpbmc= YXRtZWFs c3Rr c3RhcmNo bGVncw== YXJiZWl0 IGZvdW50YWlu IHBuYW1l IGJvdW5jaW5n aWNhbnM= IG1pbGxz IG11ZGR5 IHJlYWdlbnRz IGRjYw== ZW50cmU= ICcoKSc= ZXRp IGhhd2s= IGVjdA== IGVCYXk= ICg+ IGdlZA== IGdhZw== IGdhbmQ= Y2hvcA== IFRhbWI= IFRhbGVz bG9l IHVj IFNDTQ== IHN0aW5n IEFm IENyb20= IENhdGVnb3JpZXM= IEN1YnM= IENBQ0hF aXJhcg== aW1hcg== dW5hbWk= IGRlZmlhbmNl IFBzeQ== IFByYXM= IFBBSw== IE1hcmU= IE1DQw== IE5hdmFy aHRvd24= dXBk IEZpbGVk IEZhdm9yaXRl IGFsbg== IGFuaw== dWx0dXI= IER1dHk= IERlcmVr IExleQ== IEx1bmE= IEhvbmQ= IFdFU1Q= IFdpdHQ= IGF0cm9j IGNvaWxz cHJvYmxl IGNoaWxsZWQ= MDE3Nzc= IGttaQ== CgkKCg== ZXhlcmNpc2Vz cGFydGU= cGFyY2Vs dHJz IFVUUg== IFVydWd1 IGFyY2hlZA== XSkrJw== IG91dGJvdW5k ZWxsYXRl IHhyYXk= IHJvYXJlZA== bGxlbg== IDQxMg== IDQyOA== aWFpc29u IFZlcw== IEthbGk= IG9ibGl2 IHdpbGxmdWw= IGRpc3Blbg== IGltYWdlZA== IFN0cmVuZ3Ro bGljYXRpb25z YXhpYWw= IG92ZXJ0dXJuZWQ= IGJvYXN0 IHNwaWxsZWQ= SVRIRVI= UHJvamV0 IGJ1Y2tz SUND aWVydG8= X3s+ IGFjcnk= IGZsYWly IHJlbGFwc2U= IHB5dGhpYQ== MTMxMw== cGxpY2l0eQ== bm9kZVR5cGU= KChc Uk9CT1Q= dmFsaWRpdHk= IEV4aXN0aW5n YXV0aWNhbA== RmlsZVdyaXRlcg== IFsnXA== IHRocm91Z2hwdXQ= dXBkYXRlR3JvdXA= IGltcG9zaXRpb24= IGVkdWJ1bnR1 Y2FsZXI= c2xpcA== 0LXQtQ== cmVjbm8= Q0hBUlQ= aGVhZGxlc3M= IHNsYXRlZA== b2ZmZWU= IGNhcmE= IHByaW5j MDQ0MA== VVNJQw== VUxFUg== IFZhbGVyaWE= QUFBQw== IExldmluZQ== w6F0 CiAgCg== VU5TVVBQT1JURUQ= IHNlbnRz SXRlbVZpZXc= c3VwcGw= Z3lw cmV0Y29kZQ== RGljdEN1cnNvcg== IFJlc2lkdWFs RUxJU1Q= IGJ1c2hlcw== IGNydXNoaW5n Q29tcHV0YXRpb24= IHNlcmlhbGl6YWJsZQ== RXZlbnRMaXN0ZW5lcg== 5LuT VE9T IHRyZWFzb24= IFVSTEVycm9y Y3Ju aGFl IEJsdQ== QlVJTFQ= ZXhpdGNvZGU= IHdhcnBlZA== IGVtdWxhdGU= IENhbnVja3M= aXF1ZW5lc3M= Y2VydGtleQ== QWNjZWxlcmF0aW9u 5oiq SG93YXJk 5piM TW9kdWxlTGlzdA== IHRoZXJldG8= IFNjaHdhcnR6 IHJldmlzZQ== IHN0ZWFsdGg= bG9va2Vk c29mdHRhYnN0b3A= IFtbXSw= YnJlYWtwb2ludA== cnVjZQ== IHNhbGly IG5hdGlvbmFsaXR5 5omN IEhUVFBTZXJ2ZXI= Y29uc3VtZWQ= IG51aXNhbmNl IHNwZWN0YXRvcnM= IG1hcnJpZXM= IG93ZXM= Y2JpQWdJQ0FnSUNBZw== IHdvbmRlcmZ1bGx5 IHN0YXJ2ZQ== IEhvcmFjZQ== 77+977+977+9Jyw= IHRydXN0aW5n IE1heGlt IGhlbG0= IHRyYXZlbGVycw== IGVuam95bWVudA== TUFUUklY 0YHRgtCw0LI= IHBsYW50aW5n IGNpcmN1bWZlcmVuY2U= IGFjaWRpYw== IE1vZGk= IGhleGFkZWNpbWFs c2Z4 IGJyZWF0aHM= d2F0ZXJtYXJr INC40YHQvw== T3BlcmF0aW9uU3RhdHVz aW1ibGVkb24= IEFkbWluaXN0cmF0aXZl IHByb3BhZ2F0ZWQ= IGNvd29yaw== LS0tLS0tLS0tLSs= IHdhcm5Nc2c= dGl0dWxv ICIsIis= IGJyYW5keQ== IHJlcHJvZHVjaWJpbGl0eQ== 5oqA w6FuZGV6 IGNlcmVhbA== w6Zy IGZlcnJv IGRvdWJ0ZWQ= KC4qKSQ= bWljcm9z IEpvbmFz IHR1YmVyY3Vsb3Npcw== IGZhY2lsaXRhdGluZw== IHJlYWN0YW50cw== aW50ZXJlc3Rz ZmFtaWw= QXVkaW9EaWFsb2c= CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg IG15dGhpY2Fs ICdcXCc= c3Bhd25TZXJ2aWNl 0LXQutGB IGFsbGVnYXRpb24= IFBBUkFNUw== IFByZW1pdW0= Q2hhcmdlQ3V0 UGFsZXN0 IGZhbHNlbHk= IHJlbmRyZQ== Y2l0YXRpb25z IFBoaWxsaXA= 44Kk44Or IFN1ZGFu Ym90dGxlbmVja3M= 5peg5rOV IEJ1Y2tpbmdoYW0= IG90cm9z IHByb3NwZXJvdXM= IGh1Z2VseQ== IGJhc3RhbnRl IG9udG9sb2d5 S0ZvbGQ= IDY1NTM2 aWtoYWls IEZhbGNvbnM= IGFiYnJldmlhdGlvbg== 5bem6L65 IEJyaWdodG9u IGZhcmV3ZWxs SG9ub3Vycw== Q2FsY3VsYXRvcg== IENlbGVyeQ== IGNvYmFsdA== IGl0YWxpYw== 5a+85YWl aWdyYXBoeQ== IGFtZW5pdGllcw== IERJU1RJTkNU IGJpcGFydGlzYW4= ZmF2b3JpdGVz UmVnaXN0cmFudA== IOKVmg== IMWfaQ== IER1ZGxleQ== IExpc3RlZENvbG9ybWFw IEJ1ZGRoaXNt IEN5bXJpYw== cHJlZGljYXRlcw== IENhbmFkaWFucw== Zmx1eERCQ2xpZW50 MDE3NzcxOA== ISks Il8= KH4= LHs= LFtA Lyc6 ODk3 ODQx QCM= QnY= Qm90dA== Q3Jvcw== R1E= R292ZXJu SG9sZQ== Slc= SnA= S1U= S2Vs TWFq Tmc= UmF0aW9uYWw= Umlzaw== U0lQ U2ltcA== VG9sZXJhbmNl XS0+ YmFzcw== YnJ5 YnJvdWdo YnVzdGVy aW9wcw== anVs a2ls a3ViZXJuZXRlcw== cGFzZQ== cHVycw== cFNlcXVlbmNl cnBhdGg= c2l6 dm94ZWw= d3o= eHNjYWxl eGljbw== emlt emVycw== fV0p 67g= 64M= aW5pbg== IHRpbmc= cmVtYQ== IGZpbmVk IHBrZXk= IG95 IGLDpA== bmRm Y3Rh IHRvZA== ICd9Jzo= IGnDpw== bXBybw== aWdhdG9ycw== IGRlZ3JhZGU= ICjCow== IGdvbg== IGdhZg== IFRhcnQ= IHVn IHVzbw== IFNSUA== dGhyZXM= IEF1cmU= IEF1Y2g= IENsaQ== aWZ0ZWVu IHZo b2RiYw== IGRlZmVuY2Vz IE1hdw== IE11dGFibGU= dXBj ZW5kVGFn Y29uY2VydA== IHJ5dQ== IEJhbGs= IEJ1eno= IEJha3U= IERpZW4= IERBUQ== IFJvdXRlcg== IExvdg== IExpZ2E= IG1lc2Vz IFdlbmR5 c2V0Q29sdW1u c2V0bG9jYWxl b2dhc3Rlcg== dG9i cGVyc2U= IGNoYW1wYWduZQ== ICpb IDM1Nw== aWJhbmQ= cGhyaW5l XSl9fA== PSIoW14= IHByZXByb2Nlc3Nvcg== bGlzdGl0ZW0= YWthcmE= YWtQdQ== IHRpbWVzY2FsZQ== aWNrZXRlcg== SW5mbHVlbmNl IFZPQw== bGVuZw== IGxvc2Vycw== ZW5lcmF0ZQ== d2VpYm8= IHBlcm1pc3NpYmxl IGRpc2FibGVz YXJpb3Q= cGFyYW1pa28= cHlv cHlsaW50 IHJlc3VsdGFkb3M= IDYwMQ== YW5reQ== IHwi RU5FUkdZ IHN1YnNjcmlwdA== MTY5Ng== Q29ueWVycw== IGZpcnN0bmFtZQ== MTg5OQ== IGNsYXNzaWZpY2F0aW9ucw== IGFjaQ== IHBhc3Npb25z IHp1bsOkY2hzdA== cmlkaW5n cmVnbg== bWFpbkZyYW1l cmFjdGl2ZQ== IHRyYW5zcA== REVB IHBvc2luZw== bm9kZVZhbHVl YmVhbXM= Z3JvdXBlcg== IGFtdA== IGFtZW5hYmxl Q2xhcmU= YXV0b2lu IFsnPA== e317fQ== IHN5c2xvZw== c2lnbmVl IDE4NzQ= IDE4NTg= fX0iLA== IGF2YWlscw== IGV0YWc= IGN1cnJ5 IHRlbXBkaXI= IEFueGlldHk= IGNsZWFycw== IHBvc3Rwb24= CiAgICAgICAgICAgIAo= IGF1dG9yZQ== cm9sbGFibGU= Z3Jy Z3Np IFNob2Nr IFNoYW5ub24= IEludG8= IMOt QUFG IHRvdGFsaXRhcmlhbg== IHZlaWw= IHZldXg= IGhvbWVvd25lcnM= IHVudG91Y2hlZA== 44Kq IHBvcHM= Tm90QWxsb3dlZA== IGRpb2Rl eWxhdGlvbg== IGRpdmlkZXI= IG1ldHJl IGRhdGVUaW1l IHN3aW1tZXJz cmlkZXM= CgoJCg== cGto QW5kZXJzb24= IFRlYWNoZXJz IGluc3VyZXI= IG1lbnN0cnVhbA== bWV0cmllcw== Y2hhbmdlT2NjdXJyZWQ= IGN1c3RvbWl6YWJsZQ== 5YWJ IGFjY2Vzc29y IEdlb2xvZ2ljYWw= d2VpZ2h0aW5n am9iTGlzdA== IE1hcmF0aG9u aGF1cHQ= QlVGRg== IE1lYW5z IGJpb2xvZ2ljYWxseQ== IHBhc3RvcmFs IFdlc3Rib3VuZA== IENhcnJh SU9D ICIlIg== YnVmc2l6ZQ== UFVC MDAwMDAwMDAwMDAwMDA= IEFmdGVyd2FyZHM= RkxVU0g= IEFSUkFZ IHJlZGlyZWN0aW9u KX0nKQ== ZmluYW5jaWFs IE1lZGlhbg== JSUi Qmx1ZXM= IEFjY3Vt IFJlZHVjdGlvbg== 0LzQsA== b3Jlc2lz IEFEQQ== Ym5pcw== IFZlcnNpb25NZXRh IFN5a2Vz T3ZlcndyaXRl IHZpY3Rvcg== IGNvbXBhcmF0b3I= IGNhcHRpb25z aG91c2Vob2xkcw== IE1vZGVsT2JqZWN0 IOajgA== IGFzdGVyb2lkcw== IFNpbW1vbnM= U3R5bGVDb250ZXh0 XCc7 5a++ IHNlZ3VuZGE= IHNpbmdsZWQ= IHByaW1laXJh IHRlbGVtZXRyeQ== IG5hbWVzcGFjZWRlZg== IGJvd2xpbmc= IGNoZW1vaw== bW91bnRhaW4= ZGVsYXllZA== bnhz IGRyYXN0aWM= IExvbmdpdHVkZQ== 546L IEp1ZGljaWFs IFN1cnZpdmFs UlJVTEU= cnBjYXBp TWFyaWE= aW9uZWVy RGlnaQ== IFJlcG9ydGluZw== c2Vhc29ucw== IFZpc2NvdW50 Y29tcGxhaW50 dmlydHVhbGVudg== IHRocmlsbA== IHZlcnRpY2FsYWxpZ25tZW50 IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= IHJpZ29y INGC0LXQug== IENvbXBsZXRlZA== IEtpbWJlcg== IG5pY2tuYW1lZA== IEF0bGFudGlz IFBMQVk= IGxvb3NlbmluZw== dHVyaw== SW5zdGFsbGVy IHdvcmtmbG93cw== 0YbQuNGO IGJvb3N0ZWQ= c3hwcmludA== KSkvKCgt 5qGj IHJldGFpbGVy 6Kej6YeK R1BMdg== IFNlbWk= IGhvcnJvcnM= 6IGa IEltbWlncmF0aW9u YnJlYXN0 IEV4Y2hhbmdlSUQ= RnVuZGluZw== bGVhZGpldA== IEV4cGVyaW1lbnRz IHNwYXJrcw== IGZvc3NpbHM= 6YO95piv IFNhbnRvcw== IFNob3BwaW5n CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo= QWRqdXN0bWVudA== PDw8PDw8PDw= UmVxdWlyZW1lbnQ= 4oaT b25lbnVtYmVy RmFsbGJhY2s= IFJhbmRvbHBo TW9uZ29DbGllbnQ= IEdvbnrDoWxleg== IGpvdWV1cg== IFdpcmVsZXNz IGF0dGVudWF0ZWQ= IGdyYXNwZWQ= IEFiZHVs IFJldHJpZXZlcw== UkVGRVJFTkNF IFJvdWdl MDAyNjE4OTQzOA== IFN0cmF0aWZpZWQ= IGFycm9nYW50 IMO6bmljbw== Q0hFRVRBSA== IGRpc2VzdGFibGlzaGVk 54Ot SUNhbGVuZGFy IFNoaXJsZXk= xrDhuw== IHRpZW5lbg== IGJhcnRlbmRlcg== IFNoYWNrbGV0b24= 4oCVIg== KVs6LQ== ODM5 P8KrLA== QWVy QVZFUkFHRQ== Q2VsZQ== Q2lBZ0lDQWdJQ0Fn RGM= RGo= SHVl SEVT TEs= Tnc= UGI= UG4= UGh5 Vng= Vm91Y2hlcg== WXM= XCIu XT8= YnVzdA== ZmVsbG93 ZmFrZXM= ZnVzYw== amVz amVj a29y bmxv bsOt cGVyZQ== cHBvcw== cnVjdA== dmFpbg== d2l2ZXM= d2ti em9wZQ== vZQ= 5ak= 64Q= ICAKICAgICAgICAgICAgICAg ZXJhbnQ= cmVjb25uZWN0 YXR1 b3JnZXQ= ZW5zdGVpbg== IGNhc3M= IGNmcw== IHBlbnNpb25z aXNTYW1l IGlub2Rl IGluY29uc2lzdA== IHJlb3BlbmVk IHJlcHJpbnRlZA== Y3R1 IG5mZXY= IGRpbmc= IGR1c2s= IGl6aXA= dXJhbHM= IGxlcg== ICItLS0= YWRnZXQ= IGdmZg== Y2hhbmdlcg== bG9vdA== dmVhcw== dWxpbmdz IGlzVmFsaWQ= IFN6 IFNhdmVz IFNhaWQ= IHN0Z3JhYmVy IEljZWxhbmQ= dW1zeQ== YWJ1 IEFDSw== IENWUw== IHZveA== b3BvbGQ= IFByaXM= IFBPUA== IE1hbm5pbmc= IE1MQg== Y29udm9sdmU= CgoKICAgICA= IEZJRg== Kiot Z2V0Q29uZmlnTGlzdEVudHJ5 IERMTA== IERyZWdn YXJ0aWZhY3Rz IFJN IFJO IFJp IGhlbW9y IExlZg== IExldmVy IEdpZg== IEdyZWF0ZXN0 YWNt YWxsZXI= b3JkaW5hdGlvbg== aWxsdXNpb24= cGVybWFuZW50 YXBwbmFtZQ== IDM4MQ== cGhhbA== IGNsdXR0ZXI= cHJldHJhaW4= cHJlcHJvY2Vzc2Vk IDwtLQ== IGFsbGllZA== SW5jcmVhc2U= aWF1dA== ICQ8 IDUxNA== IEtvbnQ= bWlubWF4 MTI1Mg== UmVqZWN0 UmVwbGljYXRpb24= bGVkZ21lbnRz IHRlYXRybw== c3B1cg== MTExMA== bmV1cm8= IDEwODU= ZWZhdWx0 IHN0YXJ0RGF0ZQ== c3VibWlzc2lvbnM= IGJldHRpbmc= IFFGb250 IHVuZGVyd2Vhcg== MjIxMg== YmFja3NsYXNo OTk5Nw== IHRyYXZlcnNpbmc= dW1wdA== bm90aWZpZXM= ICEiKQ== YWlyY2FzZQ== Uk9XUw== Z3JvdXBjaGF0 IGluZGll cmVsbG8= dHRpZnk= IGltcGVuZGluZw== IGRiYw== IGVzdG91 fSkn ZGl2ZXJzaXR5 IERlbGV0ZXM= MjcwMTc= IEFuY2hvcg== dXNlbGVzcw== IHNvbHVi T2JqZWN0SWQ= V2VhcG9u IGdyYXppbmc= cG9zdGFz b2hpcHB1cw== IFNlZW4= IGJyb2tlcnM= VU5JWA== MDYyOA== IGZpbmVy cGVydG9yeQ== b3lh IFJlc3BvbnM= QW5keQ== IEF0dHk= Q29tcG91bmQ= bWV0YXZhcg== IGJhdGNoc2l6ZQ== IG1hcGxl Yml0ZGVwdGg= JzonKw== OTM3NQ== Kyci KVw8 QXRJbmRleA== aXNrYQ== IEJsYW5r IG1hdGh1dGlscw== IGVycmNvZGU= IGxvdHRlcnk= ICIvIiw= XXt9XF4= KX0iKQ== U09DSUFM IEJhcmxvdw== IGZpbGxlcg== IERpc2NvdW50 IEFicmFt ZmNnaQ== IFJFUE9SVA== IHhtbHJwY2xpYg== IGZlZWRwYXJzZXI= YWdnYWdl YWdlbnRJbmRleA== IOu5 IENvbmZpZ1NlbGVjdGlvbg== cnVsZWQ= dG9vbEJhcg== dWZyaWVk SW5kaXJlY3Q= IHZlcnNjaGllZA== U0NJ IERlY29kZQ== 5LmY IGNhcGl0YWxpc3Rz IGV4cG9ydGluZw== TWFya2Rvd24= IEdyZWVud29vZA== IE11bHRpbm9taWFs IGNzaW8= IGJvbmVsZXNz IGZsZXhpb24= cmltaXI= Y2lwbGluYXJ5 Qk1WZXJ0 IGNocm9tb3NvbWVz IEJyZXhpdA== 6Ziy SGl0bGVy bWlhaA== KXxe IGRpdmlzb3Jz IEJMVUU= U1VQRVI= bWlsbGlz IHJlc29uYW50 dWJhcmFr IHBhcmFzaXRpYw== IEZyYWdtZW50 TGF1bmNoZXI= T2NjdXA= 7JyE IFd5dmVybg== IGFkdmVyc2FyaWFs Y3JpbWU= dXRoZXJmb3Jk QmVybGlu IGF0dHJpYnM= IEZhYnJpYw== IEJyb254 IEJ1bnNlbg== IEF1dG9tYXRpY2FsbHk= IHJlbHVjdGFudGx5 IEt1YmVybmV0ZXM= ZXh0ZXJuYWxz TmV1dHJvbg== b250b3duR2xvYmFscw== IHNlZGltZW50cw== IE11c2lrc2NodWxl 57ea IHBvcnRyYXlhbA== IHJlc2lsaWVuY2U= IHRyYW5xdWls IHByb2dlbml0b3I= bm9ubGluZWFyaXRpZXM= dm93ZWxz IFRhc21hbmlh Z2FicmllbA== IFlFQVI= IEN6YXJpc3Q= IE93ZW5z IGNvbmZpc2NhdGVk IG5lcnZvdXNseQ== IEJFVFdFRU4= IEJyaXNiYW5l UE9TSVRPUlk= U0VQQVJBVE9S KVs6Oi0= Nzk5 Oigt PC0= PSgpKTo= RUNITw== Rm10 RmFtaW5l Smk= Ulo= UklE Vkg= V29sZg== WExT WW4= Ynlz Y2F2ZQ== Y3Vwcw== Y2lmdGk= ZG1p ZnJ5 Zmx5aW5n ZndobQ== aFo= amFuZWxh a2lw bks= cG5hbWU= cXk= d29s 7Js= CQoJCQk= IGFtZXJpYw== cmVzZXJ2YXRpb25z YXRt c3RpZmY= c3RvcmFibGU= aXRvYmE= IGNhc2luZw== IHBU IHNwaA== LS0nOg== ZXNxdWU= IHJlc3M= IHJlcGF5bWVudA== ICcuLi4= IGh1c3Q= IGxoZQ== IHRodW1icw== YW1lbGE= IGdzdA== IGdhbGU= IGdhdWc= IGdzYg== dmVyYmFs IFNhdmVk IFNWRA== b21uaQ== MDA1MA== ICMt IEFP IENyZXc= c3N3 aWZmdA== IGJlaw== b3BlbnNl YW1vcg== a2VwdA== IFBBUw== IFBBRA== IFB1bmNo IFBpcGVy IE1hcmlhbg== IE5Y ZW5kYWxl IGFzbg== IEZ1dA== IEZSRVNI IHJkZnM= IEJFUlQ= dXN6 dXN1YWw= IFJvdWdo IExlbnQ= IExBUA== IExBTkc= IExhbmd1YWdlcw== IEhvbGRlcg== ZW1vZGVs c2V0Q2VudHJhbA== IEdpZnQ= YWNvcw== IEVC IEVhdG9u IGNvYXI= IGNvYWNoZWQ= c3RydW4= cGVybWFsaW5r IGNodXJu ZmZz IE94 MDE3NQ== IGxlYXNlZA== IGtpbnM= IGpvdXJz IGNvbnRhZG9y dGV4dHVyZXM= IHhheGlz IHVuaw== IHVuY29udHJvbGxlZA== SU5P SU5DUkVNRU5U MTA4OA== IHVwbG9hZGVy Zm9vbA== IDUyMw== IDUwOQ== IEthaG4= c292 IGNvbXBlbA== IHNhdXQ= YWNoaWFuZw== UmV2aWV3cw== YXNzZXJ0Q291bnRFcXVhbA== IG5vdmljZQ== IG5venpsZQ== IHBlcmZvcg== c3Bk IFN0YXJr IHN1Y2Vzcw== IFlyYWVu bWF4RXZlbnRz IEBf IGludGVyY29ubmVjdGVk IG92ZXJsb2FkZWQ= IFtdXQ== bWFuaWZvbGQ= MTU1OA== b2JqZWN0TmFtZQ== IGNsYXNzbWF0ZXM= c3ViY29tbWFuZA== c3Vic2FtcGxl c3Vic2V0cw== c3Vic2NyaWJlcnM= Y29uZG9y eW5hcHRpYw== Y29tcGFzcw== YXNoa2E= ICEo bmV0Y2Rm bm9zZXM= aWRkbGVz J319KQ== Q1RDVA== Uk9Z ZGZyYW1l b2xvZ2lh bnBt IEV4cGxpY2l0 IGJsaW5raW5n IHN0cmluZ2VudA== T2Jqcw== IGNvbnRpbnVhcg== dGFibGVOYW1l Y2FsZW5kYXJz c2xpZGluZw== IHJldHJlYXRlZA== IHRhcmdldElkZW50aXR5 Nzg2Mg== IEFsbGVn UGFyYW1l IHBydWRlbnQ= bW9kdWxlc3RvcmU= TE9DQUxF LiIiIiks IEludHJh IG11bHRpZg== IENsYXVk IENvbHVtbnM= c29sYXI= IFNveQ== TnVtcw== c2VuaWM= IHN0YW5kcG9pbnQ= IFBsb3Rz dWNrb28= IHNpdGNvbQ== IGRpc2NvdXJhZ2U= IHJvb3RPYmo= IGNoZWVyaW5n b29sZWQ= IHBhc28= IGhhcmRuZXNz IENvbXBhdA== dWdpbm9zYQ== T0xM IGJlbGlldmVy Q2hlY2tvdXQ= IGludmFkZQ== UXXDqQ== IG1hZ25lc2l1bQ== fXso VVBMRQ== Y3J1 IE1hbmlw TG9jYXRvcnM= IEZsaXA= IEFwcGx5aW5n IHdlYmNhbQ== IGV4Y3V0aWxz QmVhdXR5 IEFSQQ== IHByaW9yaQ== IGZhY2lsZQ== IHRyb3Zl IHRlbmhv bGVkZ2VtZW50cw== b2xsYXJz ZnJhbms= IEJhcnRo Y2FyYg== IFRyYW5zYWN0aW9ucw== IGN1bHRpdmF0aW9u IGZhc3Rx 5LiA6KGM YWdncmVnYXRlZA== IFN1YmNsYXNzZXM= TmV1cmFs IExPQUQ= IG1hcmF0aG9u REFJTFk= IGtpbGxpbmdz SU5EWQ== UmVtYWluaW5n IFNtYWQ= cG93ZXJ2bQ== IFZlcmFuc3Q= IGtub3dsZWRnZWFibGU= SExUUA== IChcPg== YWJjZGU= IGV4cGxvaXRpbmc= 5paw5aKe IHN0cmFpZ2h0ZW5lZA== IHN0cmVwdA== cG9seW1lcg== YnJvdGhlcg== IEluaXRpYWxpemF0aW9u RElTQ08= IHdpbmVncmE= cGhvdG9jb250ZXN0 YW5pbWF0ZWQ= 6LSo Q0Jybw== RGltdW9u Vm9sdW1lcw== 572R56uZ IEdvb2Rz IE1ldGhvZGlzdA== ICdbJQ== IHBsYXRlbGV0 IHZhY2F0ZQ== cmVjdmZyb20= IHNlY3VyZWx5 5L2c5oiQ YXplZXJh aGx0SXRlcg== IE1hcHBlcg== V0lGSQ== IGFic29yYmluZw== IEhhbmRlbA== IEJlcm5zdGVpbg== 0L3Ri9C8 bWFuc2hpcA== IFBMQVlFUg== Q0hFQ0tJTkc= c3dhcGF4ZXM= IHRyYWlsaGVhZA== YXVudGVk 44G+44GX44Gf IGFubm91bmNlbWVudHM= RVZFTlRT IHZvbHVudGVlcmVk cmVydW4= d2lja2x1bmc= IGNvbmZyb250aW5n TW9kaWZpZWRUaW1l IHN1c3BlbnNpb25z 5YGH IHN0YWJpbGl6ZWQ= IENvbGxlY3Rpb25z TWVyZ2VWZWN0b3Jz IEludGVncmFs IHBoeXNpb2xvZ3k= ICc7Jzo= IENBUE4= bWFpbnRhaW4= SmFja3Nvbg== IHNvcGhvbQ== IEFERE9O IGx1Y3JhdGl2ZQ== IEJyb25jb3M= IOyXhg== IFVsdGltYXRlbHk= IEJvc25pYQ== IENyZWF0aW9uVGltZQ== R3Jvd3RocmF0ZQ== IHBlc3NvYQ== bWFyZ2lucw== IHNuaWZmZWQ= IGVtYnJhY2luZw== ZHlzc2V1cw== IFRSQU5T IG1lZ2FieXRlcw== IFhZWg== R2VvcmdpYQ== IGluZmlsdHJhdGlvbg== U3RyaWtl IGFuYWxnZXNpY3M= IEltcHJvcGVybHlDb25maWd1cmVk IGFmZmxpY3Rpb24= U2h1dHRsZQ== IGNvZmZpbg== IENvbmNhdGVuYXRl cmVjb25jaWxl IENvbnNlcnZhdGl2ZXM= IFNsb3Zlbmlh IGhhemFyZHM= d2FrZXVw IEt1bHR1cmJldHJpZWI= QnJhemlsaWFu IE1TSUU= IHZvZGth IGFieXNz IGFuYXRvbWljYWw= IFBMVUdJTg== IHZpc2Nvc2l0eQ== 4pas4pas Jy4uLg== KSddLA== ODQ2 PiIr P10= QmFuZHM= Q2FjaGVz Q29jb2E= RWs= SHI= TUlQ Tm9tZQ== T0VN T1VSQ0U= UXVp UUZpbGVEaWFsb2c= U0FM VEVO VUNI XVxc Xy4i XyQo Ym9yZGVycw== Y2Fycg== Y291Y2g= Y2lmdGlmeQ== ZEg= ZHRlYw== aHVhd2Vp bWo= bWlsaXRhcnk= bnNl bnV0cw== cm1s cmluZXM= c2luYQ== dGFwZQ== xJE= 0Y0= 5oc= 57g= 6JM= 6Js= IOaYrw== IGHDum4= cmVv IGNhZ2Vz ZGVlcw== ZGVjcmVhc2U= YXJtYW4= IGZyb3du IHBzZg== IG9saXN0 IHNvZA== IHdha2Vz IHdhZ29ucw== IGJyZXY= ZWRu bmRiZw== ZXN1bHQ= YXNpZGU= ZXRm IGhycw== IGxnYg== IGRlYWN0aXZhdGVk IChgYA== IGdkYg== IGfDpXI= IHVzaA== IFNBUg== IFNpbGs= IENDVA== IEN5YW4= IGNvbnNvbg== IFBvbnk= IFB0b2xl IE1pbQ== IE1ha2Vy IE1lcnJpbGw= IE5pbmV0 IE5pZWxzZW4= cXVlZGE= IEZJTg== IGFsaXF1 Z2V0c3RhdGU= Z2V0RGVmYXVsdA== IEJN IEROTg== IERzYg== IERpb2Nlc2U= IFJI IFJFU1BPTlNF IGhlaA== IEx1Y2t5 KCIqKg== IEhvZ2Fu dWJsZXM= IFdvbmc= IFdhcm0= ZW1vdGlvbmFs c2V0SGVhZGVy c2V0QXR0cg== IGF0ZW4= IEdBRw== b2do dG9ieXRlcw== IGNvYXRz IHNoYWxl IGtwb2ludHM= CgkgICAgICAgICAgIA== IGFyaw== IG91dG5hbWU= PSIvLw== IEp1ZGU= IFwpXFw= IFwqXCo= cHJlcHJvYw== YWRkRHluYW1pYw== IHVuYXJ5 IHVuYXR0 aXNlY29uZA== IFZP IEtvc3Rlbg== bWlubw== IEluZQ== IHNhaW50cw== dWxldA== c3BhbnM= UkVBVA== JycpKQ== dXJyZXQ= IFN0ZA== IDYxMA== bWxhYg== U3RlbnQ= ZXNzaW0= MTkwNg== T1JEUw== IHN1YnBhdGg= ZmllbGR2YWx1ZXM= IGJvYXN0ZWQ= Q29uY2x1c2lvbnM= IEhlYXRoZXI= IDc3OA== ZGRvdA== IFFUYWJsZVdpZGdldEl0ZW0= IGZsYXRz IHJlbGlucXU= IGZpZWxkbmFtZQ== YXNobWVudA== YW5kb21Dcm9w REVQUw== J30oXA== YXJzYWw= IGNvbmZpZ2RpY3Q= dWNodA== IGJsYW5rcw== YXV0aW9ucw== MTAwMDE= VGV4dFRlc3RSdW5uZXI= IHRlcnJlc3RyaWFs R2V0U2VsZWN0aW9u R2V0Q2xhc3NEZWZhdWx0QXR0cmlidXRlcw== ZGF0YWxpc3Q= c3dpdGNoZXM= IERlYnQ= Q29udGFpbg== YnJ1dGU= IHByaXNvbnM= dXNlZnVs IHBvc3RodW0= Q29tcGxlbWVudA== UE9X IHRhYmxlTmFtZQ== IGVtcHRpZWQ= IG5ldGxvYw== IGF1dGhvcmVk QWRkaXRpb25hbGx5 MDgx bW9kdWxhdGlvbg== cGFyZW50Tm9kZQ== TGVhc2U= IEFkZGl0aW9u IHN3b3Jl RW50ZXJlZA== Y2VyYWw= MDcz IGh1bW1pbmc= Zmlyc3RCaW4= IHNldmVyZWQ= TG9hZHM= bWlzc2lsZQ== 4YC2 dHJlZU5hbWU= IGRydW1tZXI= IGRlbm90aW5n UGhpbG9z 5LuF IGRpZXNlbg== IFNldFVw am9iaWQ= d2Vic2VydmljZQ== IGNhZmU= IG1vcmFsbHk= IHdhbGtlcg== IGJlbmNoZXM= ZGVzY3JpcGNpb24= T25lb2Y= IHBhaW5mdWxseQ== MzAwMDAw QmxpenphcmQ= SVZFUw== IG1hcmtldGVk dm9rZQ== UmVzb3VyY2VWYXJpYWJsZQ== 5Y2g IE1haXNreQ== aXNjZW5jZXM= IGZhw6c= eW5jaHJv INGB0Lo= ZXhwb3J0ZWQ= RXhwaXJlZA== RGVwYXJ0 INeg U2ltaWxhcmx5 IHRydXRoZnVs 57qi IGdhcmFudA== IGZyb2dz IERpcmVjdGl2ZQ== TWFya3M= IGNvc21vcw== bW91bnRz UEFSU0VS dmFyZXo= 0L7QstC10YA= IGxpZmVzcGFu 6L20 V29yZERpY3Q= IHB1bml0aXZl 5Ymn IFVOSVFVRQ== Pi48 IHN3ZWF0ZXI= ZnJvbnRpZXI= cmF0Y2hlZA== IFJvbWFuaWFu IEp1ZHk= Qm9va21hcms= IFN1cnZpdg== YXVzYWw= 5Y+v6YCJ IE51bWVyaWNhbA== IHRtZGI= IHByb3BhZ2F0aW5n TVJT IEhhbGlua2E= IEJVVFRPTg== RG91YmxlTXU= 4KWI Znh2 IHN0ZW1tZWQ= IOCkuA== IGRlY29tcHJlc3M= IEJhc2Vs IENvbnN0YWJsZQ== SW1wbGljaXQ= IGNvbnNjaW91c2x5 bWljcm9zZWNvbmRz IE1jQ29ybQ== IE5TQ0xD IM+G Qnl0ZUFycmF5 IGJ1cnN0aW5n IENyaW1lYQ== IG9kb3I= bmVjZXNzYXJpbHk= IHByb2hpYml0cw== IHByb2dyZXNzZXM= IEFsaWFz IEdpYnJhbHRhcg== IHJlbmFtaW5n IEJhbHRpYw== T1BFUkFUT1I= VHJpcGxldA== IHJlZ2ltZW50YWw= c3Ryb3Vz bGliZ2ltcHdpZGdldHM= IGZsdW9yaWRl IHNjdWxwdHVyZXM= IE5pY2Fy IG9saWdvcGVwdGlkZXM= IFBob3RvZ3JhcGh5 ZXJzaGF3 YXFk IGV0aGVybmV0 c3RlYWR5 IExhdXJlbg== IEluc3RpdHV0ZXM= IFRhbGx1cw== cGFwZXJzaXpl IFNlcUlP IFNtb290aA== RGF2aXM= IE9wdGltaXphdGlvbg== IG1pZGZpZWxkZXJz IGFuYXJjaGlzdA== IHBvcm5vZ3JhcGh5 IHNvd2ll Y29udGVv IE15c3Rlcnk= IGdyYXNwaW5n IGVsb25nYXRpb24= IGRpZmVyZW50ZXM= IFZPTFVNRQ== 4YOU4YOR S29uaw== IEF0dGFjaG1lbnQ= IE11bGxpbnM= IOatow== IERIQ1A= Tk9ERVM= IHBhbGFicmFz 6I+c IFRmaWRmVmVjdG9yaXplcg== IHByb2xpZmlj cnVzaGE= IEJva21hbA== MDE2NzE3OQ== IGRpZsOtY2ls U1BFQ0lGSUVE IER1bmRlcmRhbGU= KT0o LH0= MDIwMQ== NTQx OTI1NQ== QWlk QUVD QklEREVO Q2xv Q3Nz Q29sZA== Q29kaW5n RGFv RHJhZ29u RWR1Y2F0aW9uYWw= S0lM THVyZQ== TUlC Tmo= TklO TkFU UGVw UWs= Umljaw== U2FsdA== VHBpZA== VklORw== WmVl YmFj ZG5u Z25hbWU= aHBz bHVja3k= bWllcw== bmlm cGRhdGE= cGNvbG9y c2Fk c3dlaXNl dmo= eG9mZg== fH0= q+yekA== IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= ICANCiAgICAgICA= IHR0dA== cmVpY2g= IGNkaXN0 YW5ucw== YXLDrWE= IHBhcmQ= IHBva2luZw== IG90dQ== IHNpbm8= bWVj IGJyb20= IGJpeg== IGJsZA== aWNhYmxl c2VsaXN0 ZWRpcg== Y3Rw IGRhbmNlcw== IGjDqQ== aWRtYXA= IHRoaWV2ZXM= IGVjbw== IGVnYWw= Y2VpbGluZw== KTonLA== IGdtbQ== Y2h1cw== Y2h1YQ== IGZvcmJpZA== IFRheQ== IFR1cw== IFRGTw== IFRydW5j dmVl IHN0aWdtYQ== KCktPg== KCkiKS4= cmlq MDA0NTc= YWJvZHk= IEFpcmNyYWZ0 IENhbw== IENQeXRob24= IHZhbW9z IHNlYWxpbmc= dW5zb3J0ZWQ= dW5udW1iZXJlZA== IGNvbnN0cg== IGNvbnNlcnZl YW1lcmlj X18uXw== b2RpYw== a2Vlcw== IFB1cA== IE1haW50 ZW5kZGF0ZQ== IEZHRg== YXNzaWM= b3JlZg== IFJPVA== IFJNRw== IEhn IEhJUw== IFdpc2U= IFdpbmdz c2V0TWFyZ2lu b2NyaXQ= IEd1bnM= IEVB IGNvbWVkaWFu ICIiIig= Iil9KQ== XSwp cHJvbXA= IF8uXw== cHV0YXRpb24= IHNob3V0cw== bWFpb3I= IGtzdA== YXBwbGVz b2JpbGVz IDM2Mw== IDM0Ng== Ll89 XSkqKA== 77+9AAAA IHZhbHVhdGlvbg== cHJlYnVpbHQ= KS4nKQ== IHVuYmVsaWU= YWthYmxl IGRvb20= bGxj IDQzNQ== IFZBRQ== IDU3MA== IEt1bQ== bWluc2l6ZQ== IHBhcmNl c29mYXI= IG5ld25hbWU= IGRpc3NvbHZpbmc= IGhlcmVkaXQ= IH0k IFN0YXJy IHRyaWxvZ3k= MTkwMg== aWVkb3N0bw== bWF4aW0= cG9zaQ== dGFvYmFv MTg2NA== IDgxOTI= IHJlcXVlc3RQcm9jZXNzb3I= c3ViZG9tYWlu IGAt Li4u4oCd IHt9Licu MTQxMg== IGNvdW50Tw== bG9iYnk= bm9kZUxpc3Q= bmV3bmFtZQ== ZGlzcGw= IENvbnZlcnRlcg== IG91dHB1dEZpbGU= IHJlYWRpbmVzcw== e31e IGRhdGF0YWJsZQ== IGRpY3RhdGU= Y3JlYXRlVmFyaWFibGU= SW50cm9kdQ== fX19KQ== IG9yZGVybHk= IHF1ZW0= IG1vbm9tZXJz b2Jqc3BhY2U= 4oCT4oCT YWhhd2tz bWl0Y2g= IEFudGg= IGNvbnRleHR1YWw= IHN1cGVybWFya2V0 VXNlcklk Y3VycmVudGZyYW1l IDEyODA= SU1N TGVhZGVy IMKt IG1ldGZvcm1pbg== Q0FNRVJB IHByb2Jpbmc= Z3l6 IFBhcmFncmFwaA== IFBhcmFseW1w IE9yYg== dW5pY29ybg== TWVzc2FnZURpYWxvZw== w61hbW9z IC4uLic= QW50aG9ueQ== Q29tcGV0aW5n IHNwZWNpZmljcw== IGRyaXBwaW5n IGh5ZA== VE9P 5ZCJ c3Fz cmVzcG9ucw== UmV0dXJuaW5n SW5wdXREYXRh U2Nyb2xsZWQ= IFdpbGxpcw== IHNpbXBsZWd1aQ== IEVuYw== IEVuY29kZQ== Z2xvcm90 TWludXRlcw== ZGVzY2VuZGFudA== MDAwMDAwMDAwMDAwMDAw IGZhY3VsdA== IHJlbW9yc2U= RU1S IHBhcmFtU3RyaW5n IGV4cGVjdGFuY3k= QXBwbGllZA== IHRlbsOtYQ== fV57fn4= IEJhcmJlcg== aW5uYWNsZQ== IERpc2NyZXRl TUJFUlM= ZXZpbA== IEhlcm9k IOuVjA== SFRUUE5vdEZvdW5k IM60 0LLQtdGA IEZpbGVTeXN0ZW0= dmFyaWF0ZQ== UGFydGl0aW9ucw== IE9wZW5DVg== IGNvbnZlcmdlcw== bWFjcw== VmVyaWZpY2F0aW9u IGNvbmNlbnRyYXRpbmc= IHNjaWVudGlmaWNhbGx5 IGNhcHRpdmU= IEFjcm9zcw== UHJpbmNl IE1heHNl IGVpbm1hbA== IHdhcnJhbnRz Y250cg== ICd7Jzo= RUVH IENEQw== IHBldGl0aW9ucw== IEZpbG1z IGJlZ2dpbmc= UkVRVUlSRQ== IGNhdGNoZXI= cHJvZ3Jlc3NCYXI= IG1hbGZvcm1lZA== IEFTR0k= IEVtbXk= RGlyZWN0b3J5U2VydmljZQ== IHN5bW1ldHJpY2Fs IFZpc2l0b3Jz IHZhY2FuY3k= eEZC IHJ1YmJpc2g= IFN0YXJidWNrcw== dXpjYXJk dG9ycXVl IHRvbGVyYW50 QVVH bWF5b3I= IEFMVA== IFNvbG9u Y2hhcmFjdGVyaXN0aWM= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= IHZ1bGdhcg== IHN0ZW1taW5n 6L+H56iL IGNvbmRvbXM= RGlkbg== IE1pbGt5 QmFzaWNBdXRo IFRydXN0ZWVz U1BFQ0lBTA== IEJvbmFwYXJ0ZQ== IG1hZ25pdHVkZXM= IGZpZXJ5 IG1hcHBlZE5hbWU= 5rC4 IGxhbXBz 4oiX aW5pY2lv T3JpZW50ZWQ= IGFlcnVnaW5vc2E= IGNvaG9ydHM= IHRhbmdsZWQ= YXJtYWNldXRpY3M= IGNydWVsdHk= IHBpZXJjZWQ= TUFWTGluaw== VXN1YWxseQ== IMSw R0VORVJBTA== IM6Uz4k= IEp1YW5pdGE= IHBvZGVtb3M= Y2FyYm9ueWw= IGF1dG9ncmFk XXxb IGVtYm9kaWVk IG1vbm9wb2w= IHN1cGVybmF0YW50 IGRpc2d1c3RlZA== IGNhdXRpb3VzbHk= VGVsdWd1 IHJlYXNzdXJpbmc= IG5lbWF0 IEdvbnphbGVz VmlvbA== IFNvbGRpZXJz 5pSv5LuY bm91bnM= IHdvcm1z IGJpZnVyYw== IHNlY3JldGVk U2luZ2xlcw== IFByb3BhZ2FuZGE= UmVjb21tZW5k IFRveW90YQ== IEFsbGVr IGV2YXBvcmF0ZWQ= YXZpbGlvbg== IGhpbGFyaW91cw== IFdpbGtpbnNvbg== IGJhdWRyYXRl SnVyb3I= IFBhcmFkaXNl ZXBpc29kaW9z VmlldG5hbWVzZQ== IGJvdXJnZW9pcw== 5omL5py65Y+3 VmlyZ2luaWE= U1NEUmFuZG9tQ3JvcA== 57uY5Yi2 IEJ1Zm9yZA== IFFIQm94TGF5b3V0 IHNqw6Rsdg== SExUUFNldA== KSJd KWAs NDE1MQ== QmFi QlNU Q2Vw Q2Fubnk= REFSSw== RmVl R0ZpbGU= R3JleQ== SGlw SGFpcg== S0lDQWdJQ0Fn TWVudGlvbg== Tm0= TkxQ UEFH UG9zcw== VGlk VE9U Vlc= V2Rn WWlqaW5n Xz0nJyw= YWltZQ== YmVuZA== YmJz Y2Nl ZHVyYXRpb25z ZWdyZXNz Zmlw ZmVhcg== aEI= a01vZGVsUHJvcGVydHlNYW5hZ2Vy bXVkYQ== bW9ydG9u cGFjZXM= cHVua3Q= dWZpZw== dWNz d2hlYXQ= sOqzvA== z4Y= 6JY= ICMjIyMjIyMjIyM= IOKWkA== IHRlbnRz YXRpcw== b3JpY2FsbHk= IGNvcms= IGNhdGhvZGU= YW5pYg== ID1cXA== ZGVjbHM= YXJteQ== YXLEsQ== IHBhdHQ= IHBvcGVu IG9l IG9yZXM= aXNhdGV1cg== IGluaWM= IGluZm9ybXM= IGlubWF0ZQ== aWNpdHk= ZWRt bmRpbWFnZQ== IG1hdGluZw== IHJlYmFzZQ== IHJlb3Blbg== IHJlc2V0cw== IHJlZWxlY3Rpb24= IG54dA== IGRH IGRhdmlk IGhhZGU= IGlscw== IGxheXM= ICIoJQ== IGVr IGRldGE= YWRhbWVudGU= IGd6 Y2hhbnM= IFRpY2s= aXN0YXI= IFNldGg= IFNDUklQVA== IFNwZWFr IFNwb25zb3I= IHN0cmFw MDA5OTM= IEF1cg== IENWRA== IEN1bm5pbmdoYW0= dGVyaXR5 IHNldw== dW5hcw== dW5hdXRob3JpemVk IHl1YW4= b2R0 IFBhcm0= IFByZXQ= IE51Zw== IGFzY2VudA== IGFzaGVz YW5ndWxhdGlvbg== KSkk Z2V0ZnJhbWU= b3JlYQ== IEJNQw== cGxhc3RpYw== b3NpdGlvbnM= IERPTg== IERpbm5lcg== IFJpbGV5 IExvdHM= IEhJU1Q= IFdFQg== IEdsZQ== IEdJVA== IEdSVQ== YWNjZW50 b3V0bGllcg== IEVOVA== ZnJvbVN0cmluZw== IGNob3I= IGNoYWluZXI= IDM5Mw== PScuJyw= IFVM IEpp IEp1bms= IHhnYg== IHhmc20= YWRkRXJyYmFjaw== IDQ3MA== IFZ4 IFZQQw== IDU0MQ== IEludmVyc2U= cm93aWQ= aGVyb2Vz IHZlcmlmaWNhcg== IHBlcmlzaGVk cHlteXNxbA== IHRyYXQ= IG9wcHJlc3NlZA== IHwv IENoYW5k ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= aGVkcmluZQ== MTg5Mg== IGVuZHRpbWU= ZGRnZW4= IFFDb2xvcg== IGFjY2xhaW1lZA== RXhwbGljaXQ= YXR0ZW5pbmc= IFJlamVjdA== VHlwZUNvZGU= cmFjdG9ycw== KChf IGFjY3I= Uk9NRQ== VGVzdFJlc3VsdA== IEV4b2R1cw== QVNHSQ== YW55ZQ== b3RlY2g= IDE4NTU= Q09JTg== ZGF0YXA= QUdDQw== IHJldGlj IHNraXBz fSki bWl0YWdl IHNsYWc= QWxh c2tpcnRz cG9saWNl IGZ1bGxwYXRo IGluc3RhbmNlb2Y= IGJyaW5r bW9kbw== c2VuY2Vz bG9jYWxwYXRo IGNhcmVn IGZydQ== IGRhdGVzdHI= dG90YWxNb25leQ== RGljdFdyaXRlcg== Q29tbWVyY2lhbA== YWxmYQ== U3VibWl0dGVk IFNlcnVt Q29tcHV0aW5n ICcsJyk= IHJlc3BvbmRlcg== IGl0ZXJhdGVz IGRpZXNlcw== IElzbGU= IHByb2JsZW1hcw== bG9uZ2Vy MDAxMDAwMA== IGNhdWQ= RGlzcGF0Y2g= bWVzaGVz IGVyZg== DQogICAgDQo= ID8nLA== dWVsYW4= IE1jRG9u IEtleWJ1aw== bWVtY2FjaGU= IGp1ZGlj IFNvbWVob3c= IOWT Y29zbW8= Y3Zz cHVibGljYXRpb25z QmxlbmRlcg== IGRldGVjdGl2ZXM= R0dD Y2Zncw== IHZlY3Rvcml6ZXI= 0LTQtdC7 QmFycnk= IG93bA== PVwn QXR0cmlidXRlQ2hlY2tlcg== IFBhcmt3YXk= IG5vcm1hbHM= RFBX R3JhcGhOb2Rl IHNjaHc= IE1hdHlj IGltYWdlbg== IHByb3BpdGlvdXM= VG9wTGV2ZWw= IFdpbGxpYW1zb24= IGNhc3Bhc2U= IE5PREU= IEJsYWNrd2VsbA== IHN1ZmZpY2U= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t Vm9sdGFnZQ== Q2hhbmdlRm9ybQ== IG1peGVz IGV4cGFuZHRhYg== bHVjZW50 c21hbGxlcg== IG1hbG51dHJpdGlvbg== IFNpZ25VcA== IEhhbW1vbmQ= IENoZWY= IEVtaXI= 5paH5Lu25ZCN IGNyaXRpY2lzbXM= IGp1cm9y IGVsaW1pbmF0ZXM= UlRN TWlzc2lsZQ== IGNvbnN1bHRhbnRz IEVsbGE= cGFsaW5kcm9taWM= 5pyA6L+R dGhlcmV1bQ== IHNhdm9pcg== IHNwb3J0c3Blb3BsZQ== IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= 0L7QvNC10YA= IEJlcm5vdWxsaQ== KCJ7Og== IGFzc2F1bHRz 77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9 IEFwcHJveGltYXRlbHk= IGZldHVz IHN1c3BpY2lvbnM= IFZlZ2c= c3ByaW5nZnJhbWV3b3Jr cm9ja21vcnRvbg== IFBIWQ== IMWg IFd5b21pbmc= IGluc2lnaHRmdWw= IEp1bnBlaQ== IEdhbGxhZ2hlcg== 67O1 UmVzZXJ2ZQ== IG92dWxhdGlvbg== ZGlhbGVjdHM= IHJhbWRpc2s= IFN1bW1hcnlXcml0ZXI= 5aCx TU1NTU1NTU1NTU1NTU1NTQ== IHByb21vdGlvbnM= IGlmYWNlb2Jq IFNJTVVMQVRJT05EUkFX IGRlbW9saXRpb24= IHZpZWxl IMO6bHRpbW9z IGluZHVsZ2U= KCcsJykp ZGlzY2lwbGluZQ== IGF0dGVudWF0aW9u IGludGVycm9nYXRpb24= aW50ZWRhbmli IE1BVExBQg== YnVuZ2E= 6Ly4 IGJldHJheWFs U3Bhd25BcmVh IGRpdmlkZW5k IFNob3RndW4= IEthYnVs IHBvc3RncmVzcWw= IEhlc3NpYW4= ZGVzbGF1cg== TUlHUkFURQ== UGl4YnVm IO2ZlQ== IHVuZm9sZGluZw== IHRyYW5zZmVjdGlvbg== IHBzeWNoaWF0cmlzdA== IEFsZ2VyaWE= IGRldHJpbWVudGFs VklSVFVBTA== IOW9k+WJjQ== YWN0dWF0b3I= IGx5bmNoaW5n MDIwMzAzNw== IFBvbXNlbA== IHRocm9tYm9zaXM= IEtvbW11bmlr IE3DvG5jaGVu IGF0aGVyb3M= b3BlbnNlYXJjaA== c2V0Q2VudHJhbFdpZGdldA== JV0= Kis= LDpdLg== LyI+ Oj1c QmFydA== Rng= Rk1J SWNvbnM= Smlubg== TGF5 TnhBSA== T29wcw== T2NlYW4= UGFw UVBvaW50 VGFv VnI= VnU= Vmlt VmVuY2Vkb3I= YmRk Y21heA== ZGlv ZXB0 ZmluZw== ZmN0 Zk5hbWU= ZmF2b3Vy Z3JlZXQ= aGF6YXJk a3Np bGlucw== b2ZpbGU= cHVuaw== cWVwY2Fk dG9sZA== dWVycw== d2l0eg== d2FmZmU= eGVy 5qY= 5r4= CQogICA= IAoKIA== IOKWiA== aW5lcnk= ZXJhdGl2ZQ== b25zZXQ= IGFlcw== YWxt aXRpbWF0ZQ== YW51dHM= ID09PT0= IGZx IG9seW1w IHNyZQ== IHNvdA== IHNhbHNh IHdpcGluZw== IGluc2Vy ZXNtYW4= IGVvbA== IGRlYWN0aXZhdGU= IGfDqW7DqQ== Y2hhcHRlcnM= IFRlbm4= bG9tZXI= cGVl IFNwYWNr IFNwb29u b210ZQ== YWJk IEF2YWw= IEFzaWRl IENlcw== IENpdHJv IENvYnJh aW50cmluc2lj b3BpYW4= IGNvbmR1Y3Rpb24= YW11 X18oKSw= a2VpdGg= IFBXTQ== IE1pY2s= IE1hbGVz IE1pQg== IGFzeW1tZXRyeQ== IEZvcnM= IHdoaW1w Y2x1YnM= IEJhcnM= IEJQU0s= dWx0cmE= IFJEUA== IGV4aWxlZA== IEd1Zw== IEdhcmV0aA== IEV0aGVybmV0 ZGVmZWF0aW5n dXJlbnQ= IHJlc3Vz IGNocm9vdA== YXJnb24= IE9saXZl YXN0b24= IHRoaXNvd24= IGtheQ== IDM0MQ== ZXhpZg== ICV9e3s= cGhpc2g= cGh5bA== YmVyb3M= IEpE IHhtbQ== Y29h IHRpbWVmcmFtZQ== IDQ0NQ== LiIpOg== Z2VvbnM= IFZhcA== IDUyNQ== IGZpbGVkaWFsb2c= QVRH cHJpbnRlcnM= ZWNlZA== Zm9yc2No cmVzc2lvbnM= MTEzNQ== bWxi Y291bnRkb3du IHN1YnN0 ICoqew== bWVyZ2Vz IHVzZXJJZA== b3VnaGVk bWF0aXpl MTg5Ng== IGVuZGlhbg== ZW5zZW1ibA== IGZsYXNoZXM= dmlld2Vk eXN0ZW1z IHp3ZQ== IHNwZWN1bGF0ZWQ= IFJlYWN0 IFJlYmVsbGlvbg== aWt0 YnV6eg== bW9kZWxQYXRo cGxpY2F0ZQ== cG9pbnRlZA== IHN0YXRld2lkZQ== JywnIw== b2ZHYW1l IFdlaWdodHM= IGNvbmZpZ0RpY3Q= IGJsZW5kaW5n dm9sdHM= cmVsaW5r IGRvd25oaWxs IFhhdmllcg== XFwn 0L7Rjw== IG1vbmFyY2g= dWnDp8Ojbw== cmVjcnVpdA== b3Z5 dmVyc2lvbmVk IERlYWY= IEFudWtpcw== IG1haW5sb29w IHJlZnJlc2hlZA== ZG9Mb2c= RGVn VEVHUg== IHN1bW1pbmc= IGxldHo= dGFnZ2l0 IGNoYW5nZWxvZw== bGFzdGxvZw== 0L3Rgw== VU5JUVVF VU5ERUZJTkVE bW9kbmFtZQ== c2VuZWQ= IG1vZGVt bm5ubg== Q29uZmlnUHJvdG8= c3VwcGxpZWQ= IHZvbGxleWJhbGw= IEJlYXV0eQ== IGhvc3RhcGQ= QU1J IFNlcmll IGluc2lkZXI= IEJvb3Ro IGF1dGhvcml0YXJpYW4= bWV0cm8= IHJlZHVjZXI= RXZlbnR1YWxseQ== IFBlcm1pdA== IGVxdWl2 IGh1bWFuaXRhaXJl IE1hcnF1 UkFORA== dW1ib2xkdA== IHBhcmFtZXRlcml6ZWQ= IGludm9sdW50YXJ5 IGNsZWFubHk= IGZvb3Rpbmc= IHNlbGxlcnM= IFF1aW5u c2ltdWxhdGVk IEhhcmJvdXI= U0hTUA== IHRyb2lz bm9ybWFsbHk= QVJFU1Q= IFVwYW5pc2g= IEF0dHJpYnV0aW9u 6K6u IHN0ZWFtaW5n IOuMgA== SFRUUENvbm5lY3Rpb24= SFRUUEJhZFJlcXVlc3Q= IHByZWNpcw== VXBkYXRlVGFibGU= 5omp IHByZXZhaWxlZA== IHBvcm91cw== IHB1bHM= IG1pZGRsZXdhcmVz IEdyYWY= bWFnbmV0aWM= b21lbmNs UEhPVE8= IGd1bm5lcnM= YXBwcm9hY2g= UmVwb3J0aW5n IGRlc3B1w6lz IERpdmluZQ== UmVmZXJlbmNlVHlwZQ== ZXF1aXA= IGJsb2dnZXJz IHBoZW5vdHlwZXM= IGF0b21pemVy c2NhdHRlcmdlbw== IGZhdm91cmVk IE1hZGlnYW4= 5YC85Li6 QmlnbA== IFZpc2l0b3I= Q29va2llcw== IGVjaG9lcw== IGZpbmdlcnByaW50cw== IFJhbmRvbVN0YXRl IFRyZWVz IGltbXVub2hpc3Q= IHdoZWVsY2hhaXI= IGNvbGxhYm9yYXRl Q2hhcmFjdGVyaXN0aWM= IFdvbGZnYW5n IEhPTUU= IGhhY2tlcnM= IFRvdXJpc20= IENhcmVlcg== IGdyZXlzY2FsZQ== TUlERExFV0FSRVM= IHNpbmtz 0JjRgtCm U0lHVEVSTQ== IGFja25vd2xlZGdpbmc= V29yZHNJbg== IHJlc2lzdGluZw== QW5udWxsaQ== 8J+Usg== 5o+Q5Lqk U2Nyb2xsYmFy IHRpbWVycw== IFJvdGF0ZQ== IFZpZXRuYW1lc2U= aW9sZXR0ZQ== IERlbHRhUg== U0hFTEw= IElkZW50aWZpY2F0aW9u am91cm5leQ== 5p2D57qg57q3 5bmz5Z2H TGFuZG1hcmtz IHBvdWNv IEthbG1hbg== TVFUVA== dHJlbmRz IGNvbW11bmlzbQ== UkVQTEFDRQ== TmV2ZXJ0aGVsZXNz IFNvcmJpYW4= Y2VrcG9pbnQ= IGdyaXBwZWQ= IEJodXRhbmVzZQ== IGlzb3RvcGU= aW5zdGFudGlhdGU= IDMyNzY4 IFRpbWVvdXRFcnJvcg== IE5hZ2Fy IGJpb3NpZ24= bW9ydGFsaXR5 Rm9yZWdyb3VuZENvbG9y cG9zdGFsY29kZQ== ZmFudGFzaWE= ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA== KysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKys= 6aOe IENvbnN1bHRpbmc= 5rmW VHJhY3RvckE= VHJhY3RvckY= IGFuZ2lvZ2VuZXNpcw== UFJPUEVSVFk= IFVFRkE= IFppb25pc3Q= UmFpbmJvdw== IEZpb3JlhwbG9yZXI= IGNvZXJjaW9u 6YCS5b2S 6IKh56Wo IE1vZmZhdA== IG1hc2N1bGluZQ== IGN1bG1pbmF0aW5n YXJhc2h0cmE= IERldXRzY2hl IGhhYmxhcg== IGFnZ3JhdmF0ZWQ= RUlOVkFM IFJzcEluZm9GaWVsZA== IHdhcmVob3VzZXM= IGZ1cm5pc2hpbmdz IGFkanV2YW50 IHNoYXBlbHk= IGludGVuc2VseQ== 6K6p5LuW6K6p5LuW IOyDneyEsQ== IEVOR0lORQ== IGZpbmdlcnRpcHM= IEJpZWJlcg== 6KGo6L6+5byP YWRkRHluYW1pY1NwYXduQXJlYQ== IScpLA== Lzo= NTcy OycsJw== Py0t Pzwv QXE= QmVycnk= Q3Vl Q2lzY28= RFRD RWlu RmV3 RkxP R1VO S2htZXI= TGF0ZXg= VHJheQ== Wygn XSIiIg== YnVk Y2FnZQ== Y2F0aG9kZQ== ZHVtbWllcw== ZnVydGhlcg== Z2s= Z2RhdGE= bHVzdA== bXRz bnE= bmF6 bmNoYW4= cGFw c2lv dmNk dmNsb3Vk eWlu emVzcw== xZI= 4oo= IDAwMDA= IOS4uw== kJg= k+WQjQ== aW5hYmxl aW52ZXJzaW9u aW5mbHU= IHREQ1M= IGFtZWxp ZW5pYQ== aXRpemF0aW9u IGZhdGg= IGZ2YWw= IGZyYXk= IHdhcmVz bWVjaA== bWVzZw== aXNEYXRh aXNsYW5k IGJsb2M= IGJhcmdl aWN1bQ== IG1kbA== IG5iaW5z IHRvZW4= ICc/Jyw= IGxvcnM= IGxhbmd1 aWRpbg== cmFnZWQ= IGVvcw== aWdlbnQ= IGRlbGluZQ== IGRlcHJlY2F0aW9u YWRvYw== YXRldXJz dmVyaXR5 KCk8Lw== MDAxOQ== YWJ1cw== IEFCSQ== IEFDQ0VTUw== IENyYWNr YXlldg== aXRoY3VuZA== dGVycg== IHZyYWk= aW1zaHA= dW56aXA= YW5kYWg= IGRlZmlhbnQ= IE1EUA== IFsiIiw= cXVhdGVybmlvbg== ZW5kYXM= IEZI IEZsb3dlcg== IEZhc2M= IEZBQ1Q= IHLDoQ== IHJhbmdv IEJpcmRz IERQVw== ZXJlZnM= JykoKSks IFJpdA== IGhlbWU= IExpbmc= IExpbWU= IExlc3Q= IExPVA== IEhpbGJlcnQ= IFdUQw== c2V0V2lkZ2V0 IEdlZA== IEdOT01F IEV6 cHJvcGVy cHJvc3BlY3Q= IGt1 IGppZWJh IDM2MQ== PScuLi8= a2V5UmluZ3M= cGF0aHdheQ== IFVN ZHVlZA== IG5laWdo IFZhY2M= IFZpZGVvcw== IDUxOA== IEthcm1h IEludmFzaW9u IHNhZGU= Y2Npb25lcw== IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyM= cXVhbGlmaWNhdGlvbg== UkVC IHNjb3c= IHNjcmF0Y2hlZA== MjA0Ng== bnVtYQ== dWxscw== IHlvdXJzZWx2ZXM= IHBhcnRp U3RhbGlu IGFyZ21heA== IENob3Jlb2dyYXBoeQ== XVs6Oi0= IG9wdGljcw== c3Vibm9kZQ== IFFGaWxlRGlhbG9n IGB7fQ== bmdm IFJlY29uc3RydWN0aW9u SWRGaWx0ZXI= CgkJCSAg LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t Uk9EVUNUSU9O bXlhcHA= YXJuYXRha2E= IFhWSQ== QUNJT04= Y2FsZWQ= Q29sYQ== IG1vbm90b24= bW9udHk= ZGF0bw== ZGF0YWdlbg== VGltZXpvbmU= cmVjSUQ= dHJhdmVyc2Fs QWxsZQ== IHByb2Nlc3Nv IGVzcGE= IGNlbnRpbWV0ZXJz c2tlbA== MjEwMQ== SEVQ IFZhbG9y IG11bHRpYw== IGVudmlhcg== IGFydGlmaWM= IGhvbWVtYWRl U2hh b3BzUm9vdA== IGxpYnJvc2E= ZnNwYXRo IC8vPQ== U3VidGVuc29y IGxlZ2lvbnM= VElP IGJveGVy aHl0aA== ZXJlZGl0aA== IGRpbWVycw== 5pyv UGVybA== IG1hZ2ljaWFu dG1wZmlsZQ== b3JpZ2lucw== IE1hbmlmb2xk IEVuY29kaW5n IE1pbmltYWw= IGVwaWQ= IEFzc2Ft SW50ZXJjZXB0b3I= IGNvbW1lbnRpbmc= bWVtbWFw IGZpdHRpbmdz NTAwMDAw IGFkZGl0aW9uYWxQcm9wZXJ0aWVz IERpc29yZGVy J15b IHJlc3BpcmF0aW9u IGZhY3Rvcml6YXRpb24= U1VDQw== IENPTVBMRQ== b3Bob3Jl UFJFRElDVA== 4KSu IEd1aWxs bXV0dWFsbHk= IGRyb3BsZXRz IGNvbnZlcmdlZA== IGJhbGxvdHM= IG1lZGlhdG9y Y2VlZGluZw== IG1vdW50cG9pbnQ= 5Y2K IHJlZmVyZXI= YmxhY2tsaXN0ZWQ= IGJpbm5pbmc= aXNjb3BhbA== IGNvbmN1cnJlbmNl TE9HTk9USUNF IERydW0= ZXh0cmFjdGFsbA== ZXh0cmFjdEF1ZGlvRGlhbG9n bGFzYWduZQ== UG9ydGxhbmQ= IGVtZXJhbGQ= Tk9USUZZ IG11c2N1bG9za2VsZXRhbA== IFRISVJE UEFVU0U= dGF4aQ== ZnVucw== IE1ldHo= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= IERldGVjdGVk MTEwMg== 6L2v IGFwcHJveGltYXRpb25z 0L/QvtC7 IE1lcmNoYW50 QWNjb3VudGluZw== IGJvbm5l 0LfQsA== IHNwbGljZQ== IENoZXY= UmF3VXBkYXRlVGFibGU= IEdhbHdheQ== IGluc3Bpcg== IGV4aGliaXRpbmc= U2hhcGVmaWxl IG1lc2hlcw== Xipf 5o6l5pS2 IHJlY2VwdGl2ZQ== 5Yqg5YWl IG5hbm9zZQ== R2VydWRv 56ym5Y+3 IHBlcnR1cmJlZA== IGV4aGF1c3RpdmU= IEhlYWRxdWFydGVycw== c3lub255bXM= KCIsIiw= IG1pbGVhZ2U= amRvbmc= c2NlbmVz IEdyZWdn IGxpa2VsaWhvb2Rz 0L7QsdGL IGhpbnRlZA== VHJhbnNwb3J0YXRpb24= IENhc2lubw== 56m65qC8 Mzg4MTk4OA== 6ZO2 5oyH5pWw XSwiWw== IEJhbmdrb2s= YmFzaWNz IGRpYWxlY3Rz IEFCQ01ldGE= IENoYXBsaW4= 5oSf 66aE IEJSRw== ICd8Jzo= IHVsY2Vy IFJFU09VUkNF 5Lyg5YWl IENvbGxlY3Rvcg== IEV2ZXJncmVlbg== Y3JpbWluYWw= 44GV44GE IFRyYW5zbGF0b3I= IGFsa2FsaW5l IFNZTg== QkxBQ0tMSVNU IGltcGVyYXRpdmU= IE1jS2VubmE= IExpdGVyYXJ5 IFJhcGlk dG9vbklk IHByZWRvbWluYW50 IGzDpHNzdA== aW52ZXN0bWVudA== IEhlcm9lcw== U3R5bGVk 4YGK IGNvbmdyZWdhdGlvbg== 7Zi4 IEtvc292bw== IENhdWNhc3Vz IFNwYXJ0YQ== Sm9uYXRoYW4= IGFuYWxnZXNpYw== cHJldmVudEpvaW5CeVRpY2tldA== IHVuYW5pbW91c2x5 55WM6Z2i IGNlcmVtb25pZXM= IHBpYW5pc3Q= cG9saXRpaw== INGB0L/QuNGB0L7Qug== IHJpbnNlZA== IE1vaGFtbWVk IEluZnJhc3RydWN0dXJl bGVzaWFzdGljYWw= 57WQ5p6c VFJBTlNMQVRF eW91dHU= IOusuOyekOyXtA== 5a6i5oi356uv IG5hbm9wYXJ0aWNsZXM= IERvcHBsZXI= QmVuZ2FsaQ== 5LyB5Lia IHNpdHVhw6fDo28= R09SSVRI IGVjZHlzb25l R3JhZGllbnREZXNjZW50T3B0aW1pemVy Iy0tLQ== Iz4+Pg== KXxc KX0kLg== Ois= OyU= PiUo Q2FudA== Q09SUw== RGFs RWd5cHQ= RnVlbA== R3VzdA== R3Jhbg== R2l0aHVi SElERQ== SVc= SWo= S2lu TERQ TWly TkVM T2M= T250 UExF UmFl Um9zdGVy U2Fo U2xpY2Vz VXpiZWs= V29u V0lORA== XX0i YWZmZWN0ZWQ= Ymlt YmFyeQ== aHNt amlhbg== anhi anNnb3Rhbmdjbw== bHRy bGFzc2Vz bHVuY2g= bUE= cGNo dmlhcw== d29sZg== eXJz eyQ= fT0o 15g= 6Lg= 6bk= 7YI= aW5jdGlvbnM= aW5kZWVk IHRhYmxhdHVyZQ== b25pdGU= cmVq aGVi c3RhbGU= aXRhdGVz IGNjb2Rl IGNwdXM= ZGVr ZGVxdWV1ZQ== ZGVjcmVhc2Vk IGZpcA== IHB2YWw= IHNuYW1l IHNjZXB0 IGJhbm5pbmc= ZWRpbw== IG1hZGVyYQ== IG3DunM= IHJlcHJl IHJlY29sbGVjdGlvbg== IG5vcA== IHRveGlu IGlx bXBn b3RpZnk= IGVjb24= IGVwaA== b2xpbmc= b2xvY2F0aW9u YWRvcHQ= IGdheg== cGVlY2g= IFNheXM= IFNpbmdlcg== cmlhbQ== IEFq IEFGUA== IENTY3JpcHQ= IENyaXRpYw== aWZjb25maWc= IHZlbmVy IGNvbmZlcnJlZA== X18pKSkp IHlt a2VW IDIxMDA= IFBPVA== IE1pdGg= IE1hbQ== IE1pdGNo KCcnKSw= IE5lcm8= aHRhYmxl YXRocw== IEJvcmc= IERhZw== IHByb2Js IG9yYW5nZXM= IEhH IFdPUkQ= IGF0cmE= b2NvY2N1cw== IEdu IEdpcg== IEdvZXM= IEVuZGVy IEVNVA== ZGVmaW5pbmc= aWFsaWFz aXBhZA== cHJvYmVy cHJvY2hlbg== IGVsaWNpdA== IE9keXNzZXVz IGtzZGs= ZGF0YWNlbnRlcg== IDM0Mg== IDM3Ng== IDM1Ng== IHdlZXBpbmc= cGFyZXI= IGNsdW5n IG91dHNraXJ0cw== IHByZXRyYWlu cHJlY2k= IHhscw== IHJvYmJlZA== IHVuY2hlY2tlZA== IHVuaW1wb3J0YW50 aGVua28= ICRe Z2VvbWV0cmlj IFZhcmdhcw== bWluaW0= IEluZmVy IHRlbGV2 IGRpc3Bvc2U= IGFzc3Vy MTE3ODY= IG15c3RpYw== bWF4Y29s IGNvbW1pc3M= dmVudWVz aWZpY2FudGx5 IGNyZWY= LCJcXA== MTUxNQ== MTYwMQ== ZGphbmdvYXBwcw== QUxQSA== IGJhY2twYWNr Li4uwqs= OTk5OA== IGRpc3RyZXNzZWQ= w6ls cmVncg== YmxhZGU= YmxhZGRlcg== MTcwMQ== bmV0c2NhbGVy TGlzdE5vZGU= bm9jaA== aW5zcGVjdGlvbnM= IGFtbW9u b3RoZXJ3b3Jk YXpha2k= INCk Ii4n YWl0aQ== VG9Vc2U= JykpKSk= Q09TVA== dWlzZWQ= 0LXRhw== VGltZXNoaWZ0 IGVzdHVk Q2hhcnNldA== IERldmk= Y2FsbGlvcGU= IGF4YXJy KSkpLw== IGdhbWVEaXNwbGF5 IFNobw== IHBhdGVudGVk IFNlYWw= ZGVscw== ZW1wdGVk IDE2Nzc3MjE1 IGluY3JlbWVudHM= IGJyYXM= SU1FUw== cGVuZXQ= 0YDQsNC90Lg= 5Y+k cGVkcm8= emVq ZGV2aWM= IGxhd2Z1bA== IGRhdGVmbXQ= IHN3aXJsaW5n Z3lt Y2VybmluZw== Li4uLi4uLi4u IENvbW1pc3M= IGVuY3VlbnQ= Y2VsbGVudA== IGRlc3Rpbg== IFJlc2l6ZQ== IDEzOTU= QWRpYw== IGhhcmR5 IGhhcmRjb3Jl IE5vdGFibHk= IGdvdmVybm9ycw== Q29tcHJlc3NlZA== IGRlc2lnbmF0ZQ== ZGVuaWVk JzonJyw= IGxheWVyZWQ= IGRhamF4 dWtlcw== ODcyMg== IG5vcm1hbGl6ZXI= ZXF1YWxpdGllcw== UmVnZ2ll QXR0YWNrcw== Y29tcGxldGVy TElCUw== IGlnbml0aW9u U2NvcGVz Tk9PUA== IHNpbGhvdWV0dGU= aWRhYXBp IERFRklO Y2VydGlmaWNhdGlvbg== IGZhY2FkZQ== b3VjaGVycw== Y2xlYW5NZXJnZVZlY3RvcnM= IHRlcm1vcw== IGZ1bmNuYW1l IHNlY3JldGFyaWVz dmV5YXJk 5YeP RGVmYXVsdFZhbHVl RGVmYXVsdERlbGV0ZXI= U0VUUw== cHJvZHVrdA== cGRmcw== ZmlsdGVyc2ZsaXBwZWQ= TVRjdXQ= Q1BU IE1vZGVsQ2hlY2twb2ludA== IFNFUQ== UmVsYXRpb25z IE1heFBvb2w= IFBhbG0= IHBsZWFzdXJlcw== U2ltSGl0cw== IHV0YW4= UEZIVA== IGhlYXZ5d2VpZ2h0 IGNvc2E= UEFSU0U= IGxpZnRz aGV0YW1pbmU= YmVsaWV2ZQ== 44KS5Y+W5b6X RUFTVA== aHVhbmc= IEJpZ1F1ZXJ5 U2VxTm8= RnVuY2lvbmVz RGlyZWN0b3J5SXRlbQ== UGFyc2VNb2Rl TWFyaWU= IGxpcXVpZHM= IGluc3RydW1lbnRhdGlvbg== IEFyZWFz dmlydHVhbGl6YXRpb24= dXRlbmJlcmc= IExhbmRpbmc= IGJyYW5kaW5n IHJlcHJvZHVjaWJsZQ== IElsbHVtaW5h c2Nyb2xsY29tbWFuZA== IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= MDA0MzM= IENhbWJvZGlh Um9hc3RlZA== IENhc3RpbGxv TElOS0ZMQUdT IGludmVudGlvbnM= IFJvbWlsbHk= 4pmq IHN0cm9rZVdpZHRo QW5zdw== SW5zdGFsbGF0aW9u IGhvbm9yYWJsZQ== UGVyaW9kcw== IG14bmV0 IER1bW15UmVxdWVzdA== aWdodGhhdmVu IH19PC8= IHRhbmg= VHVya21lbg== IGFkdmlzZXJz c2F2aW5ncw== Z2V0Q3VycmVudFNlbGVjdGlvbg== IEtub3dpbmc= IGJhdHRlcmVk d2N0cmVwdA== bmVzdHk= Q29ycmVjdGVk IEluY2x1ZGVz IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw== IGdpYW50cw== IG9ic2N1cmVk UmVzcG9uZGVy IGRhbXBpbmc= TnRVc2VyR2V0 WEJNQw== RVhFQ1VU VHVubmVs IENhbGN1bGF0b3I= IG5pdHJpYw== VGlP cGlsb3Q= IHBpbmVhcHBsZQ== Q2lyY3VpdA== R2VvcmdpYW4= IEJBQ0tHUk9VTkQ= IGNhcmJhcGVuZW0= IEN5cmlsbGlj IHN1YnRseQ== IGRpc2NyZXRpemF0aW9u VmhjbQ== Q1VTU0lPTg== IENyaXRpY3M= IFNpeHRpZXM= U2Vydmljb3M= IFZFR0Y= IEF2ZW5nZXJz IG9taW5vdXM= 5rWP6KeI5Zmo IGRlY2VudHJhbGl6ZWQ= IGhpdGhlcnRv IEdhZWxpYw== QmFsdGltb3Jl IHJldGFsaWF0aW9u IFRyb25kaGVpbQ== I1s= J2A= KChb KSdd ODIz ODcz Pyks QCIs QnJpZA== Q0lN SG9iYnNlZQ== SnQ= S2ljaw== TFVU TWludA== TWFjaw== UEFD U1JF VHlw VkJveA== VklJ V2lzaA== V0tC Wy4uLl0= XSQk YF8= Y2FwcGVk ZWF0ZWQ= ZmljaA== aG93ZXI= bHNz bmJh c3dl c3Jt dHFkbQ== fDw= 2Yk= 4o8= 5qaC 7YGs CSAg DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA= ICMjIyMjIyMj IOiwg+eUqA== aW5mb3JtYXRpY3M= IHRtYXg= IHR1dG9y cmVwbGllcw== c3Rj IHRoZVJlcG9zaXRvcnk= IGNhdGlvbg== IGN1bm5pbmc= YW5leQ== ID09PT09PT0= IHB0aA== IG92YXJpZXM= IHdUcmVl IGJsb2dnZXI= IG11ZmY= IHJlY2Vzcw== IHJldmFzY3VsYXI= IHJldXNhYmxl IG5pZWNl ZXRyYW5z IGx1c2g= IGxpcXVl ICJ+ ICgm IGdhemluZw== IFRV IFNleHQ= IFNvY2s= dGhhZw== IHN0YWw= IHN0aW50 IElQUw== bnRlcg== IENpdg== IEN5bg== YXB1cg== IHZveg== b2RpYWw= a2Vh IFBhc3NlZA== IE1hcm0= IE1DQQ== IE1pbWk= IE11YmFyYWs= KCdg dXBwb3J0 IEZyaWQ= IEZyYW5jaA== IHJ1bnQ= Z2V0c3RhdHVzb3V0cHV0 IEJHUg== dXNp IERhc2hib2FyZA== IExO IEhi cmVzaQ== IFdhdHRz c2V0Rm9jdXM= IEdpb3Zhbm5p IEVpbnQ= IEV1cA== IEVpbmU= aWVsYWs= dmFsdmU= IGNvdmVydA== IGNoaWxsaW5n ZXhjbHVzaW9u cGhhcm1hY2V1dGljcw== XSl9 IGNsdW1zeQ== IEpV IEplZGk= KS5b IHJveWFsdHk= IHJvb21tYXRl dWRi IHVuc3VjY2Vzc2Z1bGx5 IDQyMw== aWFpcw== IFZBVA== IFZvdWNoZXI= b3ducw== Zm9pcw== IDU0Nw== IG9ibmFtbGli IGdvb2c= UmVjb3Zlcnk= dHBz IHZlcmlmaWVz QVRDQw== IHBlcmlzaA== c3Bpa2Vz IGhlcm1l cHlmaWxl ZGJlbnY= IFN0dXI= IHN1aWNpZGFs MTExOA== QVJG IHN1YnRyYWN0aW9u IHN1cHA= IENob3A= UHJvdGVjdA== UHJvdG90eXBl IGtleXBhaXI= IGZpcnN0bHk= MTg1MA== Zmx2 IC5fXw== bmdv IHJlZ2FpbmVk IHJlZ3Jlc3Nvcg== IHNwZWNpZmllcg== IFJlY2VpdmU= MjAxNTA= YWlyZA== IFVuYXV0aG9yaXplZA== IHByaW8= cmVuY2lh UmVzcG9ucw== bW92ZWl0 IGltcGVhY2g= dXNoYXJl IG1vbm90b25pYw== IHNrZXRjaGVz IEFsY2E= IGN1cmlvdXNseQ== IGluaXRXaXRo Q2hhcmxpZQ== Xnsr S2V5SWQ= YnJhbmRz IGNhcmlj IHBvc3Rtb2Rlcm4= IFphY2g= KC1c dGFyZ2V0ZWQ= VmFsdWVMaXN0 IHR5cmFudA== dGVzc2VyYWN0 WW91dGg= IG1hdGNodXA= dW5nYWw= IGRlc3Ryb3lz QnlMYWJlbA== IEJlZGV1dA== IGNoZXdpbmc= IHJlc3RyYWlu IGdlbm9jaWRl IGluc29tbmlh IGNyb250YWI= IEJvYXQ= IGRyYXdhYmxl aHlicmlk IHN1Z2Fycw== S0VFUA== b3RveGlu RUNC Q3JlYXRlQVBJVmlldw== IHNub3J0ZWQ= dGhpc1Jvdw== VkVI Y3J1bWI= IEJsdmQ= IE1hbml0b2Jh c21lbg== dWVzdG8= IGFpcnM= IEVuc2VtYmxl IHNlcGFyYXRlcw== IGluZmxhdGVk IGVyYXNlZA== KX0oXA== IGNhbXBpbmc= IGhpdHRlcg== IGZ1bmRyYWlzaW5n IOW4 Q29udGV4dHM= IFJFTU9WRQ== Y3VzdG9taXpl IGltbW9iaWw= YXNjb3Q= U0FGRQ== 5Yqp IEZpbGVQYXRo bXV0dWFs IHBlcnNpc3Rz ICc8Jw== IGRlcGxldGVk IGtpbGxlcnM= 5Lit6Ze0 IFJlbWl4 IHN0YXJ2ZWQ= Rm9udFNpemU= IOa4 U1ZH IE1vb3I= IFNhbmNoZXo= IHNxdWF0 IGNhc29z IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ== YWlzeQ== IEJlbmNo IEdyZWVud2ljaA== INC90YPQtg== dGVybWluYWxz MDAyNjY= QW5hbHl0aWNz Z290dGVu IGluc3RpdHV0ZWQ= IE1lcmNlZGVz ZXF1aWxpYnJpdW0= R2VuZXNpcw== IGZsYXNobGlnaHQ= RmluZHM= IGxhYm9yZXJz IENvbW1pc3Npb25lcnM= IFNpZ25hbHM= RkVFRA== UGFyZW50T2JqZWN0 4Lit IERhbWFzY3Vz IEdvbGRiZXJn IGFwYXJ0aGVpZA== IG5vYmlsaXR5 IHRocmlsbGVy KSsiLyIr IDEyMzQ1 IGJhdHRsZWQ= IEJlc3VjaA== IENoYW5uZWxz IGltbXVub3RoZXJhcHk= 5LiK55qE cmFudGhlcw== aGFkbQ== IEZhcmFkYXk= TWFvcmk= UHVibGljYXRpb25z 0LXQvdC40Lk= bmV4c29u 4LeD 0JjQs9GA0L7Qug== IExhdGl0dWRl ZXhhY3RseQ== RU5WSVJPTk1FTlQ= IENyZWRlbnRpYWw= IGRpZ2VzdGlvbg== IGNvcm5zdGFyY2g= Kl5dKCM= IGdzdXRpbA== IElDTVA= IGFzdHJvbmF1dHM= IFNhYmFz IFBlcm1pc3Npb25EZW5pZWQ= IGFmaXJt IEVsZWN0cm8= IEhlbHBhYmxl IG15c3RpY2Fs ZnVuZHM= T3duZXJJZA== IERpZmZlcmVuY2U= IENhcnRlc2lhbg== IG1pcnJvcmVk 546v5aKD aW5qZWN0ZWQ= IFByb21pc2U= IEZsb3dlcnM= ZW5oYW5jZWQ= IGd1c3Rh IHJlbHVjdGFuY2U= Ym91bmRpbmdSZWN0 IHZvbWl0aW5n IHVuY29uc2Npb3VzbHk= IFR5cGljYWw= IEN1YW5kbw== IFZlbG9jaXR5 IGhlbGljb3B0ZXJz IGFzdG9uaXNoZWQ= UEFSQU1FVEVSUw== Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= 5Yip55So 6YKu5Lu2 IEZvcnRpT1M= IEFiZHVsbGFo IHJlZ2VuZXJhdGlvbg== IGNsdXRjaGluZw== IEZSQnM= IEx1Y2tpbHk= IEF1YnVybg== IGN5dG9wbGFzbQ== IGludGVycnVwdHM= IEhlcm5hbmRleg== 0LrRgtC40LI= b2xpdGhpYw== dWF2Y2Fu 0LvRjtGH ZXBoeXJhbnRoZXM= IG1hZ2lzdHJhdGU= IGNyYWRsZQ== IEFQUEVBTFM= UmhvZHJ5 IGZvcmNpYmx5 IGRpYXJyaGVh IGVyZm9sZ3Jl IExvb3NlVmVyc2lvbg== 0LjRh9C10YHRgtCy0L4= Mzg4MTk4ODczOTg= MTE3ODYzODgxOTg4NzM5OA== KCgp NTY5 ODQz QmFo RG9k RGlhbGVjdA== RmFs Rm9yZA== R2VzdA== SmVzcw== S2Fuc2Fz TGlw THBj Tko= UHc= VEFS WWFtbA== Ymx5 YnJldA== YmVzc2Vs ZHVt ZHNldA== aMOj aGF2ZW4= a2lt bExpbWI= bWVyZQ== bmxs blBsZWFzZQ== cG9wdA== cGR4 cnRy c2F2ZXM= enE= emFz yZs= IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg aW5pYQ== aW5uYQ== IHR0cw== IHRhcHM= ICAgICAgICAK IGFtcw== cmV1eA== cmV2b2x1dGlvbg== ZGVsaWM= IG90cmFz IHdyZQ== cm9zdGVy aXNu aWNlc3Rlcg== ZXNv Y3Rj Y3Rl IGRr ICcoJQ== ZXRhYmxl IGhzcGFjZQ== IGhpZXJhcmNoaWVz IGlq IGlTdGVudA== dXJzdA== aWzDoA== cmFjaW5n IHRoYXdlZA== IGRlbGV0ZXI= IGdjb2Rl IGdlbXM= IFRlbm5pcw== bG9mdA== IFNvYg== IFNJVEU= dGhvdXNhbmQ= IEFl IEFlcm9u IENJUw== IENNUw== IEN1bWJlcmxhbmQ= IGlmbmFtZQ== b3dhbg== IGJlaXNwaWVs IHZ3 dW5heQ== dW5zZWVu IHlvZ2E= a2Vlbg== IFBlYw== IFBBQw== IFBSRVM= IFBBUks= IE1hc3Q= IE1BVEU= IE1hZQ== IE5lZA== IE5peg== IE5pbmE= YW5nZW4= YXNzYQ== IGFsYXJn IEJhbQ== dXNibA== IERFVA== IFJhZw== IFJhcmU= IFJpY2E= IExhaA== IExldHM= IG1ldHRyZQ== IEhhdXM= IEhETA== IFdleQ== aXZpc3Q= Iil9LA== c2N2 IE9ibA== CgkJICAgICAgIA== bWFoYQ== IDM5NA== IHdlZXA= c2hhcA== IGNsYXJv aW1wb3J0bGli IEplbnNlbg== IG5hbWVTcGFjZQ== YWRkTGluaw== IGNhbnY= IHVuY292ZXI= IDQzOQ== IG5lYXJpbmc= IGFwZGV2 SW5GYg== eXNpemU= IFZM MTAyMQ== IDU5Mg== IEtU IGxvb3Q= bWludmFs IG5ld3BhdGg= MTI1MQ== dXNlckluZm8= IHZlcmdvbg== YXVjaHk= IHBlcmlw UkVKRUNU IH0pLg== IHNjYW0= IHNjcmli MjAyOA== cHlzc3dvcmRz Y29tYmU= Zm9yRWFjaA== IHRyw6pz U3Rh YW5ub3VuY2Vk RU5D IHN1YmZvbGRlcnM= IG92ZXJjYXN0 IHNwYWNlcg== bWFuaWZvbGRz MTYwMg== MTg5OA== IGNsYXNzaWNz YXdhaw== VGhyZWFkZWQ= IFFhdGFy IGFjY3JlZGl0ZWQ= aHR0cGQ= IGJhY2tzbGFzaA== IHRyYWN0aW9u IGVudGg= w6lyZXI= aXNzeQ== c3RhdGVDaGFuZ2Vk cHNpY2g= bmV0aWQ= PC8l REVBRA== REVUQQ== IG1heExvc3RIaXRz RGF0YUZpbGU= YmVoYXZp IENvbmNlbnQ= IENvbmRpdGlvbmFs d2F5cG9pbnRz IFByb3M= IHJlcXVpc2l0ZQ== cm9uaQ== IGhlYWRwaG9uZQ== R2V0T2JqZWN0 IHRhcmdldHBhdGg= IEFsdG8= IHRlbXB0aW5n SUxPRw== YnJ1dA== TE9BREVS IE5ld2Fyaw== IG1vZGJ1cw== KF8s T2JqZWN0SGlkZUZsYWdz IFphZw== fVwsXA== eGRhdg== YW5ndWFyZA== Mzc5Nw== IGFwcHJvdmluZw== IGJyb2No bnVtYmVyb2Y= dHlwZXNhZmU= w6Ftb3M= w6F2ZWlz YmF0Y2hTaXpl YWZpYQ== emVo IHdoZWVsZWQ= IHNlbnRpcg== IGtlZXBhbGl2ZQ== Y2VydXM= Q09ORkw= Qnll IFJlc3A= IFJlc3BlY3Q= UmVxdWVzdFR5cGU= IENvbXBhbg== IEFkcmk= YWNjb3VudGluZw== bWVtYmVyTmFtZQ== IHRlY2huaWNpYW5z dWtlcg== IHZhclRleHQ= fXst IG1hdGhpYXo= RE9T IGxhbmRsb3Jkcw== IHBlcmNlbnRpbGVz IGNpcmNsZWQ= IHNpbGljb25l IENvcm9u IE5lY2Vzcw== IFN0cmluZ1R5cGU= U0hBUEU= Y2FyZGluYWxpdHk= QVJFTlQ= IEJhcnJldHQ= ZW5pbmdyYWQ= IGlwYWRkcg== IERpc3BsYXlz U1RST05H emVuaXRo IHN0YWNrbGV2ZWw= cGFyZXRv IMOpY3JpcmU= IGluY1g= TWV0YUV4Y2VwdGlvbg== T3V0cHV0UGFyYW1ldGVySGFuZGxlcg== RG9pbmc= IGJ5dGVzUmVhZA== IE91dGRvb3I= IHBvcmNlbGFpbg== IHZlcnNhdGlsaXR5 5Y2B IHBhdGNoaW5n Rm9udHM= IElkZWE= IHBhbmRlbWlj RW50ZXJwcmlzZQ== IG1hY2F1bGF5 Zm91bmRsYW5k Z3Vpc2Vk IHByaW1lSWRlbnRpdHk= IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0= ICd7JQ== 5YWl5Yqb TkVBUkVTVA== IE1hY3F1YXJpZQ== IHByaW5jaXBhbGx5 IG5vdmVsaXN0cw== VGVycml0b3J5 IGNvbnZlcnNhdGlvbmFs IGRhbmdlcm91c2x5 IGZvbGx5 Y2xpcHBpbmc= IE1lcml0 xLFr 5bGP T09N IGNhcnRpbGFnZQ== IEplZmZyeWVz RlJPTlQ= IGhvbW9nZW4= IFVOSU9O IGNlbGVzdGlhbA== IGVsZXBoYW50cw== IEF2YXRhcg== IM68cw== IFN1bnNldA== IGFkdmFudGFnZW91cw== IGNyaXRpY2lzZWQ= IEdlb3JnZXM= IHRvd2VyaW5n IEdsYWNpZXI= c2NoZWR1bGVycw== IGFjY3VtdWxhdG9y IEJ1dHRvbnM= RXN0YWRv IGFkYXB0YXRpb25z RW1wdHlTdHJpbmc= IGJsZWFjaA== IGltbXVub3M= IHRvbmVy 44Go44GE U2hvcnRseQ== IHJlYWRlcnNoaXA= QVRUUlM= IGhvcml6b250YWxhbGlnbm1lbnQ= SHlicmlk IFJlbmV3 QVNISU5H IENSVUQ= IERlcml2ZWQ= IEFkZGl0aW9uYWxQcm9wZXJ0eQ== UEFDS0VE IE5TTG9n IEFwcHJvcHJp RmlyZXdhbGw= IG5hcnJhdGl2ZXM= IENQUQ== IE1pZHdlc3Q= c3RhbmZvcmQ= RGVzaWduYXRlcw== IGVub3Jtb3VzbHk= IFZFUkJPU0U= IElyb25zaWRl IHdpZGVuZWQ= IHN1c3RhaW5hYmlsaXR5 UkRPTkxZ IERpZmZlcmVuY2Vz w610aW1h ZGVidGVk RldE IHN1cmZhY2Vk IGNydWlzZXI= IHBvaXNvbmluZw== IE5pa29s aXBob25l ZWxldmF0b3I= 6L+Q566X LOKAmeKAmQ== cGVwcGVy IEh1dGNoaW5zb24= RVhURU5ERUQ= Q25GdXA= IGludGVuc2lmaWVz IEZyYW5jZXNjYQ== IEZFQVRVUkU= 0LjRh9C10YE= IHZvbGNhbm8= Um9sbGJhY2s= 4oml IGFib2xpdGlvbg== IHN0dW50ZWQ= IHBsdW5nZQ== IGRvcGFtaW5l Qmxva2U= IEVzcGHDsWE= 6rCc7J6F IHRyYW5zcGxhbnRhdGlvbg== UURpYWxvZ0J1dHRvbkJveA== IGJyaWRlcw== IENIQU5HRUxPRw== Sm9obm55 YWNjaGFyaWRlcw== IHB1ZWRv 4pag4pag4pag4pag IHNodWRkZXJlZA== IGN1YWxxdWllcg== 0LvQtdC90L4= IHJhbnNvbQ== IOykkQ== QWJzdHJhY3Rpb25Gcm9t Y3JlYXRpdmVjb21tb25z IEdhemV0dGU= dm9sdmltZW50bw== Rml0elJOUw== 6aG65bqP MDA0Nzk2Nw== QU1CREE= cmVzdHJhaW50cw== IFRlaHJhbg== IGlucXVpcmllcw== UEVSSU1FTlQ= IHNrZXB0aWNpc20= IGhvbWVvc3Rhc2lz IGxldWtlbWlh IHByZXNjcmliZQ== IGtzZGtQcm9q JSIp Jj0= LycpKQ== Lz48Lw== NDYx NzM0 Q2c= RUFU RnVjaw== SGF6 SlQ= SmFo TGl0 TWVzcw== UFg= UGVs UGRi U1NF U3VsdGFu VGY= VG9s VGFjdA== VmljdA== V2VyZQ=="}');

/***/ }),

/***/ 56:
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"dotenv","version":"16.4.7","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","pretest":"npm run lint && npm run dts-check","test":"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@types/node":"^18.11.3","decache":"^4.6.2","sinon":"^14.0.1","standard":"^17.0.0","standard-version":"^9.5.0","tap":"^19.2.0","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}');

/***/ }),

/***/ 2472:
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('[[[0,44],"disallowed_STD3_valid"],[[45,46],"valid"],[[47,47],"disallowed_STD3_valid"],[[48,57],"valid"],[[58,64],"disallowed_STD3_valid"],[[65,65],"mapped",[97]],[[66,66],"mapped",[98]],[[67,67],"mapped",[99]],[[68,68],"mapped",[100]],[[69,69],"mapped",[101]],[[70,70],"mapped",[102]],[[71,71],"mapped",[103]],[[72,72],"mapped",[104]],[[73,73],"mapped",[105]],[[74,74],"mapped",[106]],[[75,75],"mapped",[107]],[[76,76],"mapped",[108]],[[77,77],"mapped",[109]],[[78,78],"mapped",[110]],[[79,79],"mapped",[111]],[[80,80],"mapped",[112]],[[81,81],"mapped",[113]],[[82,82],"mapped",[114]],[[83,83],"mapped",[115]],[[84,84],"mapped",[116]],[[85,85],"mapped",[117]],[[86,86],"mapped",[118]],[[87,87],"mapped",[119]],[[88,88],"mapped",[120]],[[89,89],"mapped",[121]],[[90,90],"mapped",[122]],[[91,96],"disallowed_STD3_valid"],[[97,122],"valid"],[[123,127],"disallowed_STD3_valid"],[[128,159],"disallowed"],[[160,160],"disallowed_STD3_mapped",[32]],[[161,167],"valid",[],"NV8"],[[168,168],"disallowed_STD3_mapped",[32,776]],[[169,169],"valid",[],"NV8"],[[170,170],"mapped",[97]],[[171,172],"valid",[],"NV8"],[[173,173],"ignored"],[[174,174],"valid",[],"NV8"],[[175,175],"disallowed_STD3_mapped",[32,772]],[[176,177],"valid",[],"NV8"],[[178,178],"mapped",[50]],[[179,179],"mapped",[51]],[[180,180],"disallowed_STD3_mapped",[32,769]],[[181,181],"mapped",[956]],[[182,182],"valid",[],"NV8"],[[183,183],"valid"],[[184,184],"disallowed_STD3_mapped",[32,807]],[[185,185],"mapped",[49]],[[186,186],"mapped",[111]],[[187,187],"valid",[],"NV8"],[[188,188],"mapped",[49,8260,52]],[[189,189],"mapped",[49,8260,50]],[[190,190],"mapped",[51,8260,52]],[[191,191],"valid",[],"NV8"],[[192,192],"mapped",[224]],[[193,193],"mapped",[225]],[[194,194],"mapped",[226]],[[195,195],"mapped",[227]],[[196,196],"mapped",[228]],[[197,197],"mapped",[229]],[[198,198],"mapped",[230]],[[199,199],"mapped",[231]],[[200,200],"mapped",[232]],[[201,201],"mapped",[233]],[[202,202],"mapped",[234]],[[203,203],"mapped",[235]],[[204,204],"mapped",[236]],[[205,205],"mapped",[237]],[[206,206],"mapped",[238]],[[207,207],"mapped",[239]],[[208,208],"mapped",[240]],[[209,209],"mapped",[241]],[[210,210],"mapped",[242]],[[211,211],"mapped",[243]],[[212,212],"mapped",[244]],[[213,213],"mapped",[245]],[[214,214],"mapped",[246]],[[215,215],"valid",[],"NV8"],[[216,216],"mapped",[248]],[[217,217],"mapped",[249]],[[218,218],"mapped",[250]],[[219,219],"mapped",[251]],[[220,220],"mapped",[252]],[[221,221],"mapped",[253]],[[222,222],"mapped",[254]],[[223,223],"deviation",[115,115]],[[224,246],"valid"],[[247,247],"valid",[],"NV8"],[[248,255],"valid"],[[256,256],"mapped",[257]],[[257,257],"valid"],[[258,258],"mapped",[259]],[[259,259],"valid"],[[260,260],"mapped",[261]],[[261,261],"valid"],[[262,262],"mapped",[263]],[[263,263],"valid"],[[264,264],"mapped",[265]],[[265,265],"valid"],[[266,266],"mapped",[267]],[[267,267],"valid"],[[268,268],"mapped",[269]],[[269,269],"valid"],[[270,270],"mapped",[271]],[[271,271],"valid"],[[272,272],"mapped",[273]],[[273,273],"valid"],[[274,274],"mapped",[275]],[[275,275],"valid"],[[276,276],"mapped",[277]],[[277,277],"valid"],[[278,278],"mapped",[279]],[[279,279],"valid"],[[280,280],"mapped",[281]],[[281,281],"valid"],[[282,282],"mapped",[283]],[[283,283],"valid"],[[284,284],"mapped",[285]],[[285,285],"valid"],[[286,286],"mapped",[287]],[[287,287],"valid"],[[288,288],"mapped",[289]],[[289,289],"valid"],[[290,290],"mapped",[291]],[[291,291],"valid"],[[292,292],"mapped",[293]],[[293,293],"valid"],[[294,294],"mapped",[295]],[[295,295],"valid"],[[296,296],"mapped",[297]],[[297,297],"valid"],[[298,298],"mapped",[299]],[[299,299],"valid"],[[300,300],"mapped",[301]],[[301,301],"valid"],[[302,302],"mapped",[303]],[[303,303],"valid"],[[304,304],"mapped",[105,775]],[[305,305],"valid"],[[306,307],"mapped",[105,106]],[[308,308],"mapped",[309]],[[309,309],"valid"],[[310,310],"mapped",[311]],[[311,312],"valid"],[[313,313],"mapped",[314]],[[314,314],"valid"],[[315,315],"mapped",[316]],[[316,316],"valid"],[[317,317],"mapped",[318]],[[318,318],"valid"],[[319,320],"mapped",[108,183]],[[321,321],"mapped",[322]],[[322,322],"valid"],[[323,323],"mapped",[324]],[[324,324],"valid"],[[325,325],"mapped",[326]],[[326,326],"valid"],[[327,327],"mapped",[328]],[[328,328],"valid"],[[329,329],"mapped",[700,110]],[[330,330],"mapped",[331]],[[331,331],"valid"],[[332,332],"mapped",[333]],[[333,333],"valid"],[[334,334],"mapped",[335]],[[335,335],"valid"],[[336,336],"mapped",[337]],[[337,337],"valid"],[[338,338],"mapped",[339]],[[339,339],"valid"],[[340,340],"mapped",[341]],[[341,341],"valid"],[[342,342],"mapped",[343]],[[343,343],"valid"],[[344,344],"mapped",[345]],[[345,345],"valid"],[[346,346],"mapped",[347]],[[347,347],"valid"],[[348,348],"mapped",[349]],[[349,349],"valid"],[[350,350],"mapped",[351]],[[351,351],"valid"],[[352,352],"mapped",[353]],[[353,353],"valid"],[[354,354],"mapped",[355]],[[355,355],"valid"],[[356,356],"mapped",[357]],[[357,357],"valid"],[[358,358],"mapped",[359]],[[359,359],"valid"],[[360,360],"mapped",[361]],[[361,361],"valid"],[[362,362],"mapped",[363]],[[363,363],"valid"],[[364,364],"mapped",[365]],[[365,365],"valid"],[[366,366],"mapped",[367]],[[367,367],"valid"],[[368,368],"mapped",[369]],[[369,369],"valid"],[[370,370],"mapped",[371]],[[371,371],"valid"],[[372,372],"mapped",[373]],[[373,373],"valid"],[[374,374],"mapped",[375]],[[375,375],"valid"],[[376,376],"mapped",[255]],[[377,377],"mapped",[378]],[[378,378],"valid"],[[379,379],"mapped",[380]],[[380,380],"valid"],[[381,381],"mapped",[382]],[[382,382],"valid"],[[383,383],"mapped",[115]],[[384,384],"valid"],[[385,385],"mapped",[595]],[[386,386],"mapped",[387]],[[387,387],"valid"],[[388,388],"mapped",[389]],[[389,389],"valid"],[[390,390],"mapped",[596]],[[391,391],"mapped",[392]],[[392,392],"valid"],[[393,393],"mapped",[598]],[[394,394],"mapped",[599]],[[395,395],"mapped",[396]],[[396,397],"valid"],[[398,398],"mapped",[477]],[[399,399],"mapped",[601]],[[400,400],"mapped",[603]],[[401,401],"mapped",[402]],[[402,402],"valid"],[[403,403],"mapped",[608]],[[404,404],"mapped",[611]],[[405,405],"valid"],[[406,406],"mapped",[617]],[[407,407],"mapped",[616]],[[408,408],"mapped",[409]],[[409,411],"valid"],[[412,412],"mapped",[623]],[[413,413],"mapped",[626]],[[414,414],"valid"],[[415,415],"mapped",[629]],[[416,416],"mapped",[417]],[[417,417],"valid"],[[418,418],"mapped",[419]],[[419,419],"valid"],[[420,420],"mapped",[421]],[[421,421],"valid"],[[422,422],"mapped",[640]],[[423,423],"mapped",[424]],[[424,424],"valid"],[[425,425],"mapped",[643]],[[426,427],"valid"],[[428,428],"mapped",[429]],[[429,429],"valid"],[[430,430],"mapped",[648]],[[431,431],"mapped",[432]],[[432,432],"valid"],[[433,433],"mapped",[650]],[[434,434],"mapped",[651]],[[435,435],"mapped",[436]],[[436,436],"valid"],[[437,437],"mapped",[438]],[[438,438],"valid"],[[439,439],"mapped",[658]],[[440,440],"mapped",[441]],[[441,443],"valid"],[[444,444],"mapped",[445]],[[445,451],"valid"],[[452,454],"mapped",[100,382]],[[455,457],"mapped",[108,106]],[[458,460],"mapped",[110,106]],[[461,461],"mapped",[462]],[[462,462],"valid"],[[463,463],"mapped",[464]],[[464,464],"valid"],[[465,465],"mapped",[466]],[[466,466],"valid"],[[467,467],"mapped",[468]],[[468,468],"valid"],[[469,469],"mapped",[470]],[[470,470],"valid"],[[471,471],"mapped",[472]],[[472,472],"valid"],[[473,473],"mapped",[474]],[[474,474],"valid"],[[475,475],"mapped",[476]],[[476,477],"valid"],[[478,478],"mapped",[479]],[[479,479],"valid"],[[480,480],"mapped",[481]],[[481,481],"valid"],[[482,482],"mapped",[483]],[[483,483],"valid"],[[484,484],"mapped",[485]],[[485,485],"valid"],[[486,486],"mapped",[487]],[[487,487],"valid"],[[488,488],"mapped",[489]],[[489,489],"valid"],[[490,490],"mapped",[491]],[[491,491],"valid"],[[492,492],"mapped",[493]],[[493,493],"valid"],[[494,494],"mapped",[495]],[[495,496],"valid"],[[497,499],"mapped",[100,122]],[[500,500],"mapped",[501]],[[501,501],"valid"],[[502,502],"mapped",[405]],[[503,503],"mapped",[447]],[[504,504],"mapped",[505]],[[505,505],"valid"],[[506,506],"mapped",[507]],[[507,507],"valid"],[[508,508],"mapped",[509]],[[509,509],"valid"],[[510,510],"mapped",[511]],[[511,511],"valid"],[[512,512],"mapped",[513]],[[513,513],"valid"],[[514,514],"mapped",[515]],[[515,515],"valid"],[[516,516],"mapped",[517]],[[517,517],"valid"],[[518,518],"mapped",[519]],[[519,519],"valid"],[[520,520],"mapped",[521]],[[521,521],"valid"],[[522,522],"mapped",[523]],[[523,523],"valid"],[[524,524],"mapped",[525]],[[525,525],"valid"],[[526,526],"mapped",[527]],[[527,527],"valid"],[[528,528],"mapped",[529]],[[529,529],"valid"],[[530,530],"mapped",[531]],[[531,531],"valid"],[[532,532],"mapped",[533]],[[533,533],"valid"],[[534,534],"mapped",[535]],[[535,535],"valid"],[[536,536],"mapped",[537]],[[537,537],"valid"],[[538,538],"mapped",[539]],[[539,539],"valid"],[[540,540],"mapped",[541]],[[541,541],"valid"],[[542,542],"mapped",[543]],[[543,543],"valid"],[[544,544],"mapped",[414]],[[545,545],"valid"],[[546,546],"mapped",[547]],[[547,547],"valid"],[[548,548],"mapped",[549]],[[549,549],"valid"],[[550,550],"mapped",[551]],[[551,551],"valid"],[[552,552],"mapped",[553]],[[553,553],"valid"],[[554,554],"mapped",[555]],[[555,555],"valid"],[[556,556],"mapped",[557]],[[557,557],"valid"],[[558,558],"mapped",[559]],[[559,559],"valid"],[[560,560],"mapped",[561]],[[561,561],"valid"],[[562,562],"mapped",[563]],[[563,563],"valid"],[[564,566],"valid"],[[567,569],"valid"],[[570,570],"mapped",[11365]],[[571,571],"mapped",[572]],[[572,572],"valid"],[[573,573],"mapped",[410]],[[574,574],"mapped",[11366]],[[575,576],"valid"],[[577,577],"mapped",[578]],[[578,578],"valid"],[[579,579],"mapped",[384]],[[580,580],"mapped",[649]],[[581,581],"mapped",[652]],[[582,582],"mapped",[583]],[[583,583],"valid"],[[584,584],"mapped",[585]],[[585,585],"valid"],[[586,586],"mapped",[587]],[[587,587],"valid"],[[588,588],"mapped",[589]],[[589,589],"valid"],[[590,590],"mapped",[591]],[[591,591],"valid"],[[592,680],"valid"],[[681,685],"valid"],[[686,687],"valid"],[[688,688],"mapped",[104]],[[689,689],"mapped",[614]],[[690,690],"mapped",[106]],[[691,691],"mapped",[114]],[[692,692],"mapped",[633]],[[693,693],"mapped",[635]],[[694,694],"mapped",[641]],[[695,695],"mapped",[119]],[[696,696],"mapped",[121]],[[697,705],"valid"],[[706,709],"valid",[],"NV8"],[[710,721],"valid"],[[722,727],"valid",[],"NV8"],[[728,728],"disallowed_STD3_mapped",[32,774]],[[729,729],"disallowed_STD3_mapped",[32,775]],[[730,730],"disallowed_STD3_mapped",[32,778]],[[731,731],"disallowed_STD3_mapped",[32,808]],[[732,732],"disallowed_STD3_mapped",[32,771]],[[733,733],"disallowed_STD3_mapped",[32,779]],[[734,734],"valid",[],"NV8"],[[735,735],"valid",[],"NV8"],[[736,736],"mapped",[611]],[[737,737],"mapped",[108]],[[738,738],"mapped",[115]],[[739,739],"mapped",[120]],[[740,740],"mapped",[661]],[[741,745],"valid",[],"NV8"],[[746,747],"valid",[],"NV8"],[[748,748],"valid"],[[749,749],"valid",[],"NV8"],[[750,750],"valid"],[[751,767],"valid",[],"NV8"],[[768,831],"valid"],[[832,832],"mapped",[768]],[[833,833],"mapped",[769]],[[834,834],"valid"],[[835,835],"mapped",[787]],[[836,836],"mapped",[776,769]],[[837,837],"mapped",[953]],[[838,846],"valid"],[[847,847],"ignored"],[[848,855],"valid"],[[856,860],"valid"],[[861,863],"valid"],[[864,865],"valid"],[[866,866],"valid"],[[867,879],"valid"],[[880,880],"mapped",[881]],[[881,881],"valid"],[[882,882],"mapped",[883]],[[883,883],"valid"],[[884,884],"mapped",[697]],[[885,885],"valid"],[[886,886],"mapped",[887]],[[887,887],"valid"],[[888,889],"disallowed"],[[890,890],"disallowed_STD3_mapped",[32,953]],[[891,893],"valid"],[[894,894],"disallowed_STD3_mapped",[59]],[[895,895],"mapped",[1011]],[[896,899],"disallowed"],[[900,900],"disallowed_STD3_mapped",[32,769]],[[901,901],"disallowed_STD3_mapped",[32,776,769]],[[902,902],"mapped",[940]],[[903,903],"mapped",[183]],[[904,904],"mapped",[941]],[[905,905],"mapped",[942]],[[906,906],"mapped",[943]],[[907,907],"disallowed"],[[908,908],"mapped",[972]],[[909,909],"disallowed"],[[910,910],"mapped",[973]],[[911,911],"mapped",[974]],[[912,912],"valid"],[[913,913],"mapped",[945]],[[914,914],"mapped",[946]],[[915,915],"mapped",[947]],[[916,916],"mapped",[948]],[[917,917],"mapped",[949]],[[918,918],"mapped",[950]],[[919,919],"mapped",[951]],[[920,920],"mapped",[952]],[[921,921],"mapped",[953]],[[922,922],"mapped",[954]],[[923,923],"mapped",[955]],[[924,924],"mapped",[956]],[[925,925],"mapped",[957]],[[926,926],"mapped",[958]],[[927,927],"mapped",[959]],[[928,928],"mapped",[960]],[[929,929],"mapped",[961]],[[930,930],"disallowed"],[[931,931],"mapped",[963]],[[932,932],"mapped",[964]],[[933,933],"mapped",[965]],[[934,934],"mapped",[966]],[[935,935],"mapped",[967]],[[936,936],"mapped",[968]],[[937,937],"mapped",[969]],[[938,938],"mapped",[970]],[[939,939],"mapped",[971]],[[940,961],"valid"],[[962,962],"deviation",[963]],[[963,974],"valid"],[[975,975],"mapped",[983]],[[976,976],"mapped",[946]],[[977,977],"mapped",[952]],[[978,978],"mapped",[965]],[[979,979],"mapped",[973]],[[980,980],"mapped",[971]],[[981,981],"mapped",[966]],[[982,982],"mapped",[960]],[[983,983],"valid"],[[984,984],"mapped",[985]],[[985,985],"valid"],[[986,986],"mapped",[987]],[[987,987],"valid"],[[988,988],"mapped",[989]],[[989,989],"valid"],[[990,990],"mapped",[991]],[[991,991],"valid"],[[992,992],"mapped",[993]],[[993,993],"valid"],[[994,994],"mapped",[995]],[[995,995],"valid"],[[996,996],"mapped",[997]],[[997,997],"valid"],[[998,998],"mapped",[999]],[[999,999],"valid"],[[1000,1000],"mapped",[1001]],[[1001,1001],"valid"],[[1002,1002],"mapped",[1003]],[[1003,1003],"valid"],[[1004,1004],"mapped",[1005]],[[1005,1005],"valid"],[[1006,1006],"mapped",[1007]],[[1007,1007],"valid"],[[1008,1008],"mapped",[954]],[[1009,1009],"mapped",[961]],[[1010,1010],"mapped",[963]],[[1011,1011],"valid"],[[1012,1012],"mapped",[952]],[[1013,1013],"mapped",[949]],[[1014,1014],"valid",[],"NV8"],[[1015,1015],"mapped",[1016]],[[1016,1016],"valid"],[[1017,1017],"mapped",[963]],[[1018,1018],"mapped",[1019]],[[1019,1019],"valid"],[[1020,1020],"valid"],[[1021,1021],"mapped",[891]],[[1022,1022],"mapped",[892]],[[1023,1023],"mapped",[893]],[[1024,1024],"mapped",[1104]],[[1025,1025],"mapped",[1105]],[[1026,1026],"mapped",[1106]],[[1027,1027],"mapped",[1107]],[[1028,1028],"mapped",[1108]],[[1029,1029],"mapped",[1109]],[[1030,1030],"mapped",[1110]],[[1031,1031],"mapped",[1111]],[[1032,1032],"mapped",[1112]],[[1033,1033],"mapped",[1113]],[[1034,1034],"mapped",[1114]],[[1035,1035],"mapped",[1115]],[[1036,1036],"mapped",[1116]],[[1037,1037],"mapped",[1117]],[[1038,1038],"mapped",[1118]],[[1039,1039],"mapped",[1119]],[[1040,1040],"mapped",[1072]],[[1041,1041],"mapped",[1073]],[[1042,1042],"mapped",[1074]],[[1043,1043],"mapped",[1075]],[[1044,1044],"mapped",[1076]],[[1045,1045],"mapped",[1077]],[[1046,1046],"mapped",[1078]],[[1047,1047],"mapped",[1079]],[[1048,1048],"mapped",[1080]],[[1049,1049],"mapped",[1081]],[[1050,1050],"mapped",[1082]],[[1051,1051],"mapped",[1083]],[[1052,1052],"mapped",[1084]],[[1053,1053],"mapped",[1085]],[[1054,1054],"mapped",[1086]],[[1055,1055],"mapped",[1087]],[[1056,1056],"mapped",[1088]],[[1057,1057],"mapped",[1089]],[[1058,1058],"mapped",[1090]],[[1059,1059],"mapped",[1091]],[[1060,1060],"mapped",[1092]],[[1061,1061],"mapped",[1093]],[[1062,1062],"mapped",[1094]],[[1063,1063],"mapped",[1095]],[[1064,1064],"mapped",[1096]],[[1065,1065],"mapped",[1097]],[[1066,1066],"mapped",[1098]],[[1067,1067],"mapped",[1099]],[[1068,1068],"mapped",[1100]],[[1069,1069],"mapped",[1101]],[[1070,1070],"mapped",[1102]],[[1071,1071],"mapped",[1103]],[[1072,1103],"valid"],[[1104,1104],"valid"],[[1105,1116],"valid"],[[1117,1117],"valid"],[[1118,1119],"valid"],[[1120,1120],"mapped",[1121]],[[1121,1121],"valid"],[[1122,1122],"mapped",[1123]],[[1123,1123],"valid"],[[1124,1124],"mapped",[1125]],[[1125,1125],"valid"],[[1126,1126],"mapped",[1127]],[[1127,1127],"valid"],[[1128,1128],"mapped",[1129]],[[1129,1129],"valid"],[[1130,1130],"mapped",[1131]],[[1131,1131],"valid"],[[1132,1132],"mapped",[1133]],[[1133,1133],"valid"],[[1134,1134],"mapped",[1135]],[[1135,1135],"valid"],[[1136,1136],"mapped",[1137]],[[1137,1137],"valid"],[[1138,1138],"mapped",[1139]],[[1139,1139],"valid"],[[1140,1140],"mapped",[1141]],[[1141,1141],"valid"],[[1142,1142],"mapped",[1143]],[[1143,1143],"valid"],[[1144,1144],"mapped",[1145]],[[1145,1145],"valid"],[[1146,1146],"mapped",[1147]],[[1147,1147],"valid"],[[1148,1148],"mapped",[1149]],[[1149,1149],"valid"],[[1150,1150],"mapped",[1151]],[[1151,1151],"valid"],[[1152,1152],"mapped",[1153]],[[1153,1153],"valid"],[[1154,1154],"valid",[],"NV8"],[[1155,1158],"valid"],[[1159,1159],"valid"],[[1160,1161],"valid",[],"NV8"],[[1162,1162],"mapped",[1163]],[[1163,1163],"valid"],[[1164,1164],"mapped",[1165]],[[1165,1165],"valid"],[[1166,1166],"mapped",[1167]],[[1167,1167],"valid"],[[1168,1168],"mapped",[1169]],[[1169,1169],"valid"],[[1170,1170],"mapped",[1171]],[[1171,1171],"valid"],[[1172,1172],"mapped",[1173]],[[1173,1173],"valid"],[[1174,1174],"mapped",[1175]],[[1175,1175],"valid"],[[1176,1176],"mapped",[1177]],[[1177,1177],"valid"],[[1178,1178],"mapped",[1179]],[[1179,1179],"valid"],[[1180,1180],"mapped",[1181]],[[1181,1181],"valid"],[[1182,1182],"mapped",[1183]],[[1183,1183],"valid"],[[1184,1184],"mapped",[1185]],[[1185,1185],"valid"],[[1186,1186],"mapped",[1187]],[[1187,1187],"valid"],[[1188,1188],"mapped",[1189]],[[1189,1189],"valid"],[[1190,1190],"mapped",[1191]],[[1191,1191],"valid"],[[1192,1192],"mapped",[1193]],[[1193,1193],"valid"],[[1194,1194],"mapped",[1195]],[[1195,1195],"valid"],[[1196,1196],"mapped",[1197]],[[1197,1197],"valid"],[[1198,1198],"mapped",[1199]],[[1199,1199],"valid"],[[1200,1200],"mapped",[1201]],[[1201,1201],"valid"],[[1202,1202],"mapped",[1203]],[[1203,1203],"valid"],[[1204,1204],"mapped",[1205]],[[1205,1205],"valid"],[[1206,1206],"mapped",[1207]],[[1207,1207],"valid"],[[1208,1208],"mapped",[1209]],[[1209,1209],"valid"],[[1210,1210],"mapped",[1211]],[[1211,1211],"valid"],[[1212,1212],"mapped",[1213]],[[1213,1213],"valid"],[[1214,1214],"mapped",[1215]],[[1215,1215],"valid"],[[1216,1216],"disallowed"],[[1217,1217],"mapped",[1218]],[[1218,1218],"valid"],[[1219,1219],"mapped",[1220]],[[1220,1220],"valid"],[[1221,1221],"mapped",[1222]],[[1222,1222],"valid"],[[1223,1223],"mapped",[1224]],[[1224,1224],"valid"],[[1225,1225],"mapped",[1226]],[[1226,1226],"valid"],[[1227,1227],"mapped",[1228]],[[1228,1228],"valid"],[[1229,1229],"mapped",[1230]],[[1230,1230],"valid"],[[1231,1231],"valid"],[[1232,1232],"mapped",[1233]],[[1233,1233],"valid"],[[1234,1234],"mapped",[1235]],[[1235,1235],"valid"],[[1236,1236],"mapped",[1237]],[[1237,1237],"valid"],[[1238,1238],"mapped",[1239]],[[1239,1239],"valid"],[[1240,1240],"mapped",[1241]],[[1241,1241],"valid"],[[1242,1242],"mapped",[1243]],[[1243,1243],"valid"],[[1244,1244],"mapped",[1245]],[[1245,1245],"valid"],[[1246,1246],"mapped",[1247]],[[1247,1247],"valid"],[[1248,1248],"mapped",[1249]],[[1249,1249],"valid"],[[1250,1250],"mapped",[1251]],[[1251,1251],"valid"],[[1252,1252],"mapped",[1253]],[[1253,1253],"valid"],[[1254,1254],"mapped",[1255]],[[1255,1255],"valid"],[[1256,1256],"mapped",[1257]],[[1257,1257],"valid"],[[1258,1258],"mapped",[1259]],[[1259,1259],"valid"],[[1260,1260],"mapped",[1261]],[[1261,1261],"valid"],[[1262,1262],"mapped",[1263]],[[1263,1263],"valid"],[[1264,1264],"mapped",[1265]],[[1265,1265],"valid"],[[1266,1266],"mapped",[1267]],[[1267,1267],"valid"],[[1268,1268],"mapped",[1269]],[[1269,1269],"valid"],[[1270,1270],"mapped",[1271]],[[1271,1271],"valid"],[[1272,1272],"mapped",[1273]],[[1273,1273],"valid"],[[1274,1274],"mapped",[1275]],[[1275,1275],"valid"],[[1276,1276],"mapped",[1277]],[[1277,1277],"valid"],[[1278,1278],"mapped",[1279]],[[1279,1279],"valid"],[[1280,1280],"mapped",[1281]],[[1281,1281],"valid"],[[1282,1282],"mapped",[1283]],[[1283,1283],"valid"],[[1284,1284],"mapped",[1285]],[[1285,1285],"valid"],[[1286,1286],"mapped",[1287]],[[1287,1287],"valid"],[[1288,1288],"mapped",[1289]],[[1289,1289],"valid"],[[1290,1290],"mapped",[1291]],[[1291,1291],"valid"],[[1292,1292],"mapped",[1293]],[[1293,1293],"valid"],[[1294,1294],"mapped",[1295]],[[1295,1295],"valid"],[[1296,1296],"mapped",[1297]],[[1297,1297],"valid"],[[1298,1298],"mapped",[1299]],[[1299,1299],"valid"],[[1300,1300],"mapped",[1301]],[[1301,1301],"valid"],[[1302,1302],"mapped",[1303]],[[1303,1303],"valid"],[[1304,1304],"mapped",[1305]],[[1305,1305],"valid"],[[1306,1306],"mapped",[1307]],[[1307,1307],"valid"],[[1308,1308],"mapped",[1309]],[[1309,1309],"valid"],[[1310,1310],"mapped",[1311]],[[1311,1311],"valid"],[[1312,1312],"mapped",[1313]],[[1313,1313],"valid"],[[1314,1314],"mapped",[1315]],[[1315,1315],"valid"],[[1316,1316],"mapped",[1317]],[[1317,1317],"valid"],[[1318,1318],"mapped",[1319]],[[1319,1319],"valid"],[[1320,1320],"mapped",[1321]],[[1321,1321],"valid"],[[1322,1322],"mapped",[1323]],[[1323,1323],"valid"],[[1324,1324],"mapped",[1325]],[[1325,1325],"valid"],[[1326,1326],"mapped",[1327]],[[1327,1327],"valid"],[[1328,1328],"disallowed"],[[1329,1329],"mapped",[1377]],[[1330,1330],"mapped",[1378]],[[1331,1331],"mapped",[1379]],[[1332,1332],"mapped",[1380]],[[1333,1333],"mapped",[1381]],[[1334,1334],"mapped",[1382]],[[1335,1335],"mapped",[1383]],[[1336,1336],"mapped",[1384]],[[1337,1337],"mapped",[1385]],[[1338,1338],"mapped",[1386]],[[1339,1339],"mapped",[1387]],[[1340,1340],"mapped",[1388]],[[1341,1341],"mapped",[1389]],[[1342,1342],"mapped",[1390]],[[1343,1343],"mapped",[1391]],[[1344,1344],"mapped",[1392]],[[1345,1345],"mapped",[1393]],[[1346,1346],"mapped",[1394]],[[1347,1347],"mapped",[1395]],[[1348,1348],"mapped",[1396]],[[1349,1349],"mapped",[1397]],[[1350,1350],"mapped",[1398]],[[1351,1351],"mapped",[1399]],[[1352,1352],"mapped",[1400]],[[1353,1353],"mapped",[1401]],[[1354,1354],"mapped",[1402]],[[1355,1355],"mapped",[1403]],[[1356,1356],"mapped",[1404]],[[1357,1357],"mapped",[1405]],[[1358,1358],"mapped",[1406]],[[1359,1359],"mapped",[1407]],[[1360,1360],"mapped",[1408]],[[1361,1361],"mapped",[1409]],[[1362,1362],"mapped",[1410]],[[1363,1363],"mapped",[1411]],[[1364,1364],"mapped",[1412]],[[1365,1365],"mapped",[1413]],[[1366,1366],"mapped",[1414]],[[1367,1368],"disallowed"],[[1369,1369],"valid"],[[1370,1375],"valid",[],"NV8"],[[1376,1376],"disallowed"],[[1377,1414],"valid"],[[1415,1415],"mapped",[1381,1410]],[[1416,1416],"disallowed"],[[1417,1417],"valid",[],"NV8"],[[1418,1418],"valid",[],"NV8"],[[1419,1420],"disallowed"],[[1421,1422],"valid",[],"NV8"],[[1423,1423],"valid",[],"NV8"],[[1424,1424],"disallowed"],[[1425,1441],"valid"],[[1442,1442],"valid"],[[1443,1455],"valid"],[[1456,1465],"valid"],[[1466,1466],"valid"],[[1467,1469],"valid"],[[1470,1470],"valid",[],"NV8"],[[1471,1471],"valid"],[[1472,1472],"valid",[],"NV8"],[[1473,1474],"valid"],[[1475,1475],"valid",[],"NV8"],[[1476,1476],"valid"],[[1477,1477],"valid"],[[1478,1478],"valid",[],"NV8"],[[1479,1479],"valid"],[[1480,1487],"disallowed"],[[1488,1514],"valid"],[[1515,1519],"disallowed"],[[1520,1524],"valid"],[[1525,1535],"disallowed"],[[1536,1539],"disallowed"],[[1540,1540],"disallowed"],[[1541,1541],"disallowed"],[[1542,1546],"valid",[],"NV8"],[[1547,1547],"valid",[],"NV8"],[[1548,1548],"valid",[],"NV8"],[[1549,1551],"valid",[],"NV8"],[[1552,1557],"valid"],[[1558,1562],"valid"],[[1563,1563],"valid",[],"NV8"],[[1564,1564],"disallowed"],[[1565,1565],"disallowed"],[[1566,1566],"valid",[],"NV8"],[[1567,1567],"valid",[],"NV8"],[[1568,1568],"valid"],[[1569,1594],"valid"],[[1595,1599],"valid"],[[1600,1600],"valid",[],"NV8"],[[1601,1618],"valid"],[[1619,1621],"valid"],[[1622,1624],"valid"],[[1625,1630],"valid"],[[1631,1631],"valid"],[[1632,1641],"valid"],[[1642,1645],"valid",[],"NV8"],[[1646,1647],"valid"],[[1648,1652],"valid"],[[1653,1653],"mapped",[1575,1652]],[[1654,1654],"mapped",[1608,1652]],[[1655,1655],"mapped",[1735,1652]],[[1656,1656],"mapped",[1610,1652]],[[1657,1719],"valid"],[[1720,1721],"valid"],[[1722,1726],"valid"],[[1727,1727],"valid"],[[1728,1742],"valid"],[[1743,1743],"valid"],[[1744,1747],"valid"],[[1748,1748],"valid",[],"NV8"],[[1749,1756],"valid"],[[1757,1757],"disallowed"],[[1758,1758],"valid",[],"NV8"],[[1759,1768],"valid"],[[1769,1769],"valid",[],"NV8"],[[1770,1773],"valid"],[[1774,1775],"valid"],[[1776,1785],"valid"],[[1786,1790],"valid"],[[1791,1791],"valid"],[[1792,1805],"valid",[],"NV8"],[[1806,1806],"disallowed"],[[1807,1807],"disallowed"],[[1808,1836],"valid"],[[1837,1839],"valid"],[[1840,1866],"valid"],[[1867,1868],"disallowed"],[[1869,1871],"valid"],[[1872,1901],"valid"],[[1902,1919],"valid"],[[1920,1968],"valid"],[[1969,1969],"valid"],[[1970,1983],"disallowed"],[[1984,2037],"valid"],[[2038,2042],"valid",[],"NV8"],[[2043,2047],"disallowed"],[[2048,2093],"valid"],[[2094,2095],"disallowed"],[[2096,2110],"valid",[],"NV8"],[[2111,2111],"disallowed"],[[2112,2139],"valid"],[[2140,2141],"disallowed"],[[2142,2142],"valid",[],"NV8"],[[2143,2207],"disallowed"],[[2208,2208],"valid"],[[2209,2209],"valid"],[[2210,2220],"valid"],[[2221,2226],"valid"],[[2227,2228],"valid"],[[2229,2274],"disallowed"],[[2275,2275],"valid"],[[2276,2302],"valid"],[[2303,2303],"valid"],[[2304,2304],"valid"],[[2305,2307],"valid"],[[2308,2308],"valid"],[[2309,2361],"valid"],[[2362,2363],"valid"],[[2364,2381],"valid"],[[2382,2382],"valid"],[[2383,2383],"valid"],[[2384,2388],"valid"],[[2389,2389],"valid"],[[2390,2391],"valid"],[[2392,2392],"mapped",[2325,2364]],[[2393,2393],"mapped",[2326,2364]],[[2394,2394],"mapped",[2327,2364]],[[2395,2395],"mapped",[2332,2364]],[[2396,2396],"mapped",[2337,2364]],[[2397,2397],"mapped",[2338,2364]],[[2398,2398],"mapped",[2347,2364]],[[2399,2399],"mapped",[2351,2364]],[[2400,2403],"valid"],[[2404,2405],"valid",[],"NV8"],[[2406,2415],"valid"],[[2416,2416],"valid",[],"NV8"],[[2417,2418],"valid"],[[2419,2423],"valid"],[[2424,2424],"valid"],[[2425,2426],"valid"],[[2427,2428],"valid"],[[2429,2429],"valid"],[[2430,2431],"valid"],[[2432,2432],"valid"],[[2433,2435],"valid"],[[2436,2436],"disallowed"],[[2437,2444],"valid"],[[2445,2446],"disallowed"],[[2447,2448],"valid"],[[2449,2450],"disallowed"],[[2451,2472],"valid"],[[2473,2473],"disallowed"],[[2474,2480],"valid"],[[2481,2481],"disallowed"],[[2482,2482],"valid"],[[2483,2485],"disallowed"],[[2486,2489],"valid"],[[2490,2491],"disallowed"],[[2492,2492],"valid"],[[2493,2493],"valid"],[[2494,2500],"valid"],[[2501,2502],"disallowed"],[[2503,2504],"valid"],[[2505,2506],"disallowed"],[[2507,2509],"valid"],[[2510,2510],"valid"],[[2511,2518],"disallowed"],[[2519,2519],"valid"],[[2520,2523],"disallowed"],[[2524,2524],"mapped",[2465,2492]],[[2525,2525],"mapped",[2466,2492]],[[2526,2526],"disallowed"],[[2527,2527],"mapped",[2479,2492]],[[2528,2531],"valid"],[[2532,2533],"disallowed"],[[2534,2545],"valid"],[[2546,2554],"valid",[],"NV8"],[[2555,2555],"valid",[],"NV8"],[[2556,2560],"disallowed"],[[2561,2561],"valid"],[[2562,2562],"valid"],[[2563,2563],"valid"],[[2564,2564],"disallowed"],[[2565,2570],"valid"],[[2571,2574],"disallowed"],[[2575,2576],"valid"],[[2577,2578],"disallowed"],[[2579,2600],"valid"],[[2601,2601],"disallowed"],[[2602,2608],"valid"],[[2609,2609],"disallowed"],[[2610,2610],"valid"],[[2611,2611],"mapped",[2610,2620]],[[2612,2612],"disallowed"],[[2613,2613],"valid"],[[2614,2614],"mapped",[2616,2620]],[[2615,2615],"disallowed"],[[2616,2617],"valid"],[[2618,2619],"disallowed"],[[2620,2620],"valid"],[[2621,2621],"disallowed"],[[2622,2626],"valid"],[[2627,2630],"disallowed"],[[2631,2632],"valid"],[[2633,2634],"disallowed"],[[2635,2637],"valid"],[[2638,2640],"disallowed"],[[2641,2641],"valid"],[[2642,2648],"disallowed"],[[2649,2649],"mapped",[2582,2620]],[[2650,2650],"mapped",[2583,2620]],[[2651,2651],"mapped",[2588,2620]],[[2652,2652],"valid"],[[2653,2653],"disallowed"],[[2654,2654],"mapped",[2603,2620]],[[2655,2661],"disallowed"],[[2662,2676],"valid"],[[2677,2677],"valid"],[[2678,2688],"disallowed"],[[2689,2691],"valid"],[[2692,2692],"disallowed"],[[2693,2699],"valid"],[[2700,2700],"valid"],[[2701,2701],"valid"],[[2702,2702],"disallowed"],[[2703,2705],"valid"],[[2706,2706],"disallowed"],[[2707,2728],"valid"],[[2729,2729],"disallowed"],[[2730,2736],"valid"],[[2737,2737],"disallowed"],[[2738,2739],"valid"],[[2740,2740],"disallowed"],[[2741,2745],"valid"],[[2746,2747],"disallowed"],[[2748,2757],"valid"],[[2758,2758],"disallowed"],[[2759,2761],"valid"],[[2762,2762],"disallowed"],[[2763,2765],"valid"],[[2766,2767],"disallowed"],[[2768,2768],"valid"],[[2769,2783],"disallowed"],[[2784,2784],"valid"],[[2785,2787],"valid"],[[2788,2789],"disallowed"],[[2790,2799],"valid"],[[2800,2800],"valid",[],"NV8"],[[2801,2801],"valid",[],"NV8"],[[2802,2808],"disallowed"],[[2809,2809],"valid"],[[2810,2816],"disallowed"],[[2817,2819],"valid"],[[2820,2820],"disallowed"],[[2821,2828],"valid"],[[2829,2830],"disallowed"],[[2831,2832],"valid"],[[2833,2834],"disallowed"],[[2835,2856],"valid"],[[2857,2857],"disallowed"],[[2858,2864],"valid"],[[2865,2865],"disallowed"],[[2866,2867],"valid"],[[2868,2868],"disallowed"],[[2869,2869],"valid"],[[2870,2873],"valid"],[[2874,2875],"disallowed"],[[2876,2883],"valid"],[[2884,2884],"valid"],[[2885,2886],"disallowed"],[[2887,2888],"valid"],[[2889,2890],"disallowed"],[[2891,2893],"valid"],[[2894,2901],"disallowed"],[[2902,2903],"valid"],[[2904,2907],"disallowed"],[[2908,2908],"mapped",[2849,2876]],[[2909,2909],"mapped",[2850,2876]],[[2910,2910],"disallowed"],[[2911,2913],"valid"],[[2914,2915],"valid"],[[2916,2917],"disallowed"],[[2918,2927],"valid"],[[2928,2928],"valid",[],"NV8"],[[2929,2929],"valid"],[[2930,2935],"valid",[],"NV8"],[[2936,2945],"disallowed"],[[2946,2947],"valid"],[[2948,2948],"disallowed"],[[2949,2954],"valid"],[[2955,2957],"disallowed"],[[2958,2960],"valid"],[[2961,2961],"disallowed"],[[2962,2965],"valid"],[[2966,2968],"disallowed"],[[2969,2970],"valid"],[[2971,2971],"disallowed"],[[2972,2972],"valid"],[[2973,2973],"disallowed"],[[2974,2975],"valid"],[[2976,2978],"disallowed"],[[2979,2980],"valid"],[[2981,2983],"disallowed"],[[2984,2986],"valid"],[[2987,2989],"disallowed"],[[2990,2997],"valid"],[[2998,2998],"valid"],[[2999,3001],"valid"],[[3002,3005],"disallowed"],[[3006,3010],"valid"],[[3011,3013],"disallowed"],[[3014,3016],"valid"],[[3017,3017],"disallowed"],[[3018,3021],"valid"],[[3022,3023],"disallowed"],[[3024,3024],"valid"],[[3025,3030],"disallowed"],[[3031,3031],"valid"],[[3032,3045],"disallowed"],[[3046,3046],"valid"],[[3047,3055],"valid"],[[3056,3058],"valid",[],"NV8"],[[3059,3066],"valid",[],"NV8"],[[3067,3071],"disallowed"],[[3072,3072],"valid"],[[3073,3075],"valid"],[[3076,3076],"disallowed"],[[3077,3084],"valid"],[[3085,3085],"disallowed"],[[3086,3088],"valid"],[[3089,3089],"disallowed"],[[3090,3112],"valid"],[[3113,3113],"disallowed"],[[3114,3123],"valid"],[[3124,3124],"valid"],[[3125,3129],"valid"],[[3130,3132],"disallowed"],[[3133,3133],"valid"],[[3134,3140],"valid"],[[3141,3141],"disallowed"],[[3142,3144],"valid"],[[3145,3145],"disallowed"],[[3146,3149],"valid"],[[3150,3156],"disallowed"],[[3157,3158],"valid"],[[3159,3159],"disallowed"],[[3160,3161],"valid"],[[3162,3162],"valid"],[[3163,3167],"disallowed"],[[3168,3169],"valid"],[[3170,3171],"valid"],[[3172,3173],"disallowed"],[[3174,3183],"valid"],[[3184,3191],"disallowed"],[[3192,3199],"valid",[],"NV8"],[[3200,3200],"disallowed"],[[3201,3201],"valid"],[[3202,3203],"valid"],[[3204,3204],"disallowed"],[[3205,3212],"valid"],[[3213,3213],"disallowed"],[[3214,3216],"valid"],[[3217,3217],"disallowed"],[[3218,3240],"valid"],[[3241,3241],"disallowed"],[[3242,3251],"valid"],[[3252,3252],"disallowed"],[[3253,3257],"valid"],[[3258,3259],"disallowed"],[[3260,3261],"valid"],[[3262,3268],"valid"],[[3269,3269],"disallowed"],[[3270,3272],"valid"],[[3273,3273],"disallowed"],[[3274,3277],"valid"],[[3278,3284],"disallowed"],[[3285,3286],"valid"],[[3287,3293],"disallowed"],[[3294,3294],"valid"],[[3295,3295],"disallowed"],[[3296,3297],"valid"],[[3298,3299],"valid"],[[3300,3301],"disallowed"],[[3302,3311],"valid"],[[3312,3312],"disallowed"],[[3313,3314],"valid"],[[3315,3328],"disallowed"],[[3329,3329],"valid"],[[3330,3331],"valid"],[[3332,3332],"disallowed"],[[3333,3340],"valid"],[[3341,3341],"disallowed"],[[3342,3344],"valid"],[[3345,3345],"disallowed"],[[3346,3368],"valid"],[[3369,3369],"valid"],[[3370,3385],"valid"],[[3386,3386],"valid"],[[3387,3388],"disallowed"],[[3389,3389],"valid"],[[3390,3395],"valid"],[[3396,3396],"valid"],[[3397,3397],"disallowed"],[[3398,3400],"valid"],[[3401,3401],"disallowed"],[[3402,3405],"valid"],[[3406,3406],"valid"],[[3407,3414],"disallowed"],[[3415,3415],"valid"],[[3416,3422],"disallowed"],[[3423,3423],"valid"],[[3424,3425],"valid"],[[3426,3427],"valid"],[[3428,3429],"disallowed"],[[3430,3439],"valid"],[[3440,3445],"valid",[],"NV8"],[[3446,3448],"disallowed"],[[3449,3449],"valid",[],"NV8"],[[3450,3455],"valid"],[[3456,3457],"disallowed"],[[3458,3459],"valid"],[[3460,3460],"disallowed"],[[3461,3478],"valid"],[[3479,3481],"disallowed"],[[3482,3505],"valid"],[[3506,3506],"disallowed"],[[3507,3515],"valid"],[[3516,3516],"disallowed"],[[3517,3517],"valid"],[[3518,3519],"disallowed"],[[3520,3526],"valid"],[[3527,3529],"disallowed"],[[3530,3530],"valid"],[[3531,3534],"disallowed"],[[3535,3540],"valid"],[[3541,3541],"disallowed"],[[3542,3542],"valid"],[[3543,3543],"disallowed"],[[3544,3551],"valid"],[[3552,3557],"disallowed"],[[3558,3567],"valid"],[[3568,3569],"disallowed"],[[3570,3571],"valid"],[[3572,3572],"valid",[],"NV8"],[[3573,3584],"disallowed"],[[3585,3634],"valid"],[[3635,3635],"mapped",[3661,3634]],[[3636,3642],"valid"],[[3643,3646],"disallowed"],[[3647,3647],"valid",[],"NV8"],[[3648,3662],"valid"],[[3663,3663],"valid",[],"NV8"],[[3664,3673],"valid"],[[3674,3675],"valid",[],"NV8"],[[3676,3712],"disallowed"],[[3713,3714],"valid"],[[3715,3715],"disallowed"],[[3716,3716],"valid"],[[3717,3718],"disallowed"],[[3719,3720],"valid"],[[3721,3721],"disallowed"],[[3722,3722],"valid"],[[3723,3724],"disallowed"],[[3725,3725],"valid"],[[3726,3731],"disallowed"],[[3732,3735],"valid"],[[3736,3736],"disallowed"],[[3737,3743],"valid"],[[3744,3744],"disallowed"],[[3745,3747],"valid"],[[3748,3748],"disallowed"],[[3749,3749],"valid"],[[3750,3750],"disallowed"],[[3751,3751],"valid"],[[3752,3753],"disallowed"],[[3754,3755],"valid"],[[3756,3756],"disallowed"],[[3757,3762],"valid"],[[3763,3763],"mapped",[3789,3762]],[[3764,3769],"valid"],[[3770,3770],"disallowed"],[[3771,3773],"valid"],[[3774,3775],"disallowed"],[[3776,3780],"valid"],[[3781,3781],"disallowed"],[[3782,3782],"valid"],[[3783,3783],"disallowed"],[[3784,3789],"valid"],[[3790,3791],"disallowed"],[[3792,3801],"valid"],[[3802,3803],"disallowed"],[[3804,3804],"mapped",[3755,3737]],[[3805,3805],"mapped",[3755,3745]],[[3806,3807],"valid"],[[3808,3839],"disallowed"],[[3840,3840],"valid"],[[3841,3850],"valid",[],"NV8"],[[3851,3851],"valid"],[[3852,3852],"mapped",[3851]],[[3853,3863],"valid",[],"NV8"],[[3864,3865],"valid"],[[3866,3871],"valid",[],"NV8"],[[3872,3881],"valid"],[[3882,3892],"valid",[],"NV8"],[[3893,3893],"valid"],[[3894,3894],"valid",[],"NV8"],[[3895,3895],"valid"],[[3896,3896],"valid",[],"NV8"],[[3897,3897],"valid"],[[3898,3901],"valid",[],"NV8"],[[3902,3906],"valid"],[[3907,3907],"mapped",[3906,4023]],[[3908,3911],"valid"],[[3912,3912],"disallowed"],[[3913,3916],"valid"],[[3917,3917],"mapped",[3916,4023]],[[3918,3921],"valid"],[[3922,3922],"mapped",[3921,4023]],[[3923,3926],"valid"],[[3927,3927],"mapped",[3926,4023]],[[3928,3931],"valid"],[[3932,3932],"mapped",[3931,4023]],[[3933,3944],"valid"],[[3945,3945],"mapped",[3904,4021]],[[3946,3946],"valid"],[[3947,3948],"valid"],[[3949,3952],"disallowed"],[[3953,3954],"valid"],[[3955,3955],"mapped",[3953,3954]],[[3956,3956],"valid"],[[3957,3957],"mapped",[3953,3956]],[[3958,3958],"mapped",[4018,3968]],[[3959,3959],"mapped",[4018,3953,3968]],[[3960,3960],"mapped",[4019,3968]],[[3961,3961],"mapped",[4019,3953,3968]],[[3962,3968],"valid"],[[3969,3969],"mapped",[3953,3968]],[[3970,3972],"valid"],[[3973,3973],"valid",[],"NV8"],[[3974,3979],"valid"],[[3980,3983],"valid"],[[3984,3986],"valid"],[[3987,3987],"mapped",[3986,4023]],[[3988,3989],"valid"],[[3990,3990],"valid"],[[3991,3991],"valid"],[[3992,3992],"disallowed"],[[3993,3996],"valid"],[[3997,3997],"mapped",[3996,4023]],[[3998,4001],"valid"],[[4002,4002],"mapped",[4001,4023]],[[4003,4006],"valid"],[[4007,4007],"mapped",[4006,4023]],[[4008,4011],"valid"],[[4012,4012],"mapped",[4011,4023]],[[4013,4013],"valid"],[[4014,4016],"valid"],[[4017,4023],"valid"],[[4024,4024],"valid"],[[4025,4025],"mapped",[3984,4021]],[[4026,4028],"valid"],[[4029,4029],"disallowed"],[[4030,4037],"valid",[],"NV8"],[[4038,4038],"valid"],[[4039,4044],"valid",[],"NV8"],[[4045,4045],"disallowed"],[[4046,4046],"valid",[],"NV8"],[[4047,4047],"valid",[],"NV8"],[[4048,4049],"valid",[],"NV8"],[[4050,4052],"valid",[],"NV8"],[[4053,4056],"valid",[],"NV8"],[[4057,4058],"valid",[],"NV8"],[[4059,4095],"disallowed"],[[4096,4129],"valid"],[[4130,4130],"valid"],[[4131,4135],"valid"],[[4136,4136],"valid"],[[4137,4138],"valid"],[[4139,4139],"valid"],[[4140,4146],"valid"],[[4147,4149],"valid"],[[4150,4153],"valid"],[[4154,4159],"valid"],[[4160,4169],"valid"],[[4170,4175],"valid",[],"NV8"],[[4176,4185],"valid"],[[4186,4249],"valid"],[[4250,4253],"valid"],[[4254,4255],"valid",[],"NV8"],[[4256,4293],"disallowed"],[[4294,4294],"disallowed"],[[4295,4295],"mapped",[11559]],[[4296,4300],"disallowed"],[[4301,4301],"mapped",[11565]],[[4302,4303],"disallowed"],[[4304,4342],"valid"],[[4343,4344],"valid"],[[4345,4346],"valid"],[[4347,4347],"valid",[],"NV8"],[[4348,4348],"mapped",[4316]],[[4349,4351],"valid"],[[4352,4441],"valid",[],"NV8"],[[4442,4446],"valid",[],"NV8"],[[4447,4448],"disallowed"],[[4449,4514],"valid",[],"NV8"],[[4515,4519],"valid",[],"NV8"],[[4520,4601],"valid",[],"NV8"],[[4602,4607],"valid",[],"NV8"],[[4608,4614],"valid"],[[4615,4615],"valid"],[[4616,4678],"valid"],[[4679,4679],"valid"],[[4680,4680],"valid"],[[4681,4681],"disallowed"],[[4682,4685],"valid"],[[4686,4687],"disallowed"],[[4688,4694],"valid"],[[4695,4695],"disallowed"],[[4696,4696],"valid"],[[4697,4697],"disallowed"],[[4698,4701],"valid"],[[4702,4703],"disallowed"],[[4704,4742],"valid"],[[4743,4743],"valid"],[[4744,4744],"valid"],[[4745,4745],"disallowed"],[[4746,4749],"valid"],[[4750,4751],"disallowed"],[[4752,4782],"valid"],[[4783,4783],"valid"],[[4784,4784],"valid"],[[4785,4785],"disallowed"],[[4786,4789],"valid"],[[4790,4791],"disallowed"],[[4792,4798],"valid"],[[4799,4799],"disallowed"],[[4800,4800],"valid"],[[4801,4801],"disallowed"],[[4802,4805],"valid"],[[4806,4807],"disallowed"],[[4808,4814],"valid"],[[4815,4815],"valid"],[[4816,4822],"valid"],[[4823,4823],"disallowed"],[[4824,4846],"valid"],[[4847,4847],"valid"],[[4848,4878],"valid"],[[4879,4879],"valid"],[[4880,4880],"valid"],[[4881,4881],"disallowed"],[[4882,4885],"valid"],[[4886,4887],"disallowed"],[[4888,4894],"valid"],[[4895,4895],"valid"],[[4896,4934],"valid"],[[4935,4935],"valid"],[[4936,4954],"valid"],[[4955,4956],"disallowed"],[[4957,4958],"valid"],[[4959,4959],"valid"],[[4960,4960],"valid",[],"NV8"],[[4961,4988],"valid",[],"NV8"],[[4989,4991],"disallowed"],[[4992,5007],"valid"],[[5008,5017],"valid",[],"NV8"],[[5018,5023],"disallowed"],[[5024,5108],"valid"],[[5109,5109],"valid"],[[5110,5111],"disallowed"],[[5112,5112],"mapped",[5104]],[[5113,5113],"mapped",[5105]],[[5114,5114],"mapped",[5106]],[[5115,5115],"mapped",[5107]],[[5116,5116],"mapped",[5108]],[[5117,5117],"mapped",[5109]],[[5118,5119],"disallowed"],[[5120,5120],"valid",[],"NV8"],[[5121,5740],"valid"],[[5741,5742],"valid",[],"NV8"],[[5743,5750],"valid"],[[5751,5759],"valid"],[[5760,5760],"disallowed"],[[5761,5786],"valid"],[[5787,5788],"valid",[],"NV8"],[[5789,5791],"disallowed"],[[5792,5866],"valid"],[[5867,5872],"valid",[],"NV8"],[[5873,5880],"valid"],[[5881,5887],"disallowed"],[[5888,5900],"valid"],[[5901,5901],"disallowed"],[[5902,5908],"valid"],[[5909,5919],"disallowed"],[[5920,5940],"valid"],[[5941,5942],"valid",[],"NV8"],[[5943,5951],"disallowed"],[[5952,5971],"valid"],[[5972,5983],"disallowed"],[[5984,5996],"valid"],[[5997,5997],"disallowed"],[[5998,6000],"valid"],[[6001,6001],"disallowed"],[[6002,6003],"valid"],[[6004,6015],"disallowed"],[[6016,6067],"valid"],[[6068,6069],"disallowed"],[[6070,6099],"valid"],[[6100,6102],"valid",[],"NV8"],[[6103,6103],"valid"],[[6104,6107],"valid",[],"NV8"],[[6108,6108],"valid"],[[6109,6109],"valid"],[[6110,6111],"disallowed"],[[6112,6121],"valid"],[[6122,6127],"disallowed"],[[6128,6137],"valid",[],"NV8"],[[6138,6143],"disallowed"],[[6144,6149],"valid",[],"NV8"],[[6150,6150],"disallowed"],[[6151,6154],"valid",[],"NV8"],[[6155,6157],"ignored"],[[6158,6158],"disallowed"],[[6159,6159],"disallowed"],[[6160,6169],"valid"],[[6170,6175],"disallowed"],[[6176,6263],"valid"],[[6264,6271],"disallowed"],[[6272,6313],"valid"],[[6314,6314],"valid"],[[6315,6319],"disallowed"],[[6320,6389],"valid"],[[6390,6399],"disallowed"],[[6400,6428],"valid"],[[6429,6430],"valid"],[[6431,6431],"disallowed"],[[6432,6443],"valid"],[[6444,6447],"disallowed"],[[6448,6459],"valid"],[[6460,6463],"disallowed"],[[6464,6464],"valid",[],"NV8"],[[6465,6467],"disallowed"],[[6468,6469],"valid",[],"NV8"],[[6470,6509],"valid"],[[6510,6511],"disallowed"],[[6512,6516],"valid"],[[6517,6527],"disallowed"],[[6528,6569],"valid"],[[6570,6571],"valid"],[[6572,6575],"disallowed"],[[6576,6601],"valid"],[[6602,6607],"disallowed"],[[6608,6617],"valid"],[[6618,6618],"valid",[],"XV8"],[[6619,6621],"disallowed"],[[6622,6623],"valid",[],"NV8"],[[6624,6655],"valid",[],"NV8"],[[6656,6683],"valid"],[[6684,6685],"disallowed"],[[6686,6687],"valid",[],"NV8"],[[6688,6750],"valid"],[[6751,6751],"disallowed"],[[6752,6780],"valid"],[[6781,6782],"disallowed"],[[6783,6793],"valid"],[[6794,6799],"disallowed"],[[6800,6809],"valid"],[[6810,6815],"disallowed"],[[6816,6822],"valid",[],"NV8"],[[6823,6823],"valid"],[[6824,6829],"valid",[],"NV8"],[[6830,6831],"disallowed"],[[6832,6845],"valid"],[[6846,6846],"valid",[],"NV8"],[[6847,6911],"disallowed"],[[6912,6987],"valid"],[[6988,6991],"disallowed"],[[6992,7001],"valid"],[[7002,7018],"valid",[],"NV8"],[[7019,7027],"valid"],[[7028,7036],"valid",[],"NV8"],[[7037,7039],"disallowed"],[[7040,7082],"valid"],[[7083,7085],"valid"],[[7086,7097],"valid"],[[7098,7103],"valid"],[[7104,7155],"valid"],[[7156,7163],"disallowed"],[[7164,7167],"valid",[],"NV8"],[[7168,7223],"valid"],[[7224,7226],"disallowed"],[[7227,7231],"valid",[],"NV8"],[[7232,7241],"valid"],[[7242,7244],"disallowed"],[[7245,7293],"valid"],[[7294,7295],"valid",[],"NV8"],[[7296,7359],"disallowed"],[[7360,7367],"valid",[],"NV8"],[[7368,7375],"disallowed"],[[7376,7378],"valid"],[[7379,7379],"valid",[],"NV8"],[[7380,7410],"valid"],[[7411,7414],"valid"],[[7415,7415],"disallowed"],[[7416,7417],"valid"],[[7418,7423],"disallowed"],[[7424,7467],"valid"],[[7468,7468],"mapped",[97]],[[7469,7469],"mapped",[230]],[[7470,7470],"mapped",[98]],[[7471,7471],"valid"],[[7472,7472],"mapped",[100]],[[7473,7473],"mapped",[101]],[[7474,7474],"mapped",[477]],[[7475,7475],"mapped",[103]],[[7476,7476],"mapped",[104]],[[7477,7477],"mapped",[105]],[[7478,7478],"mapped",[106]],[[7479,7479],"mapped",[107]],[[7480,7480],"mapped",[108]],[[7481,7481],"mapped",[109]],[[7482,7482],"mapped",[110]],[[7483,7483],"valid"],[[7484,7484],"mapped",[111]],[[7485,7485],"mapped",[547]],[[7486,7486],"mapped",[112]],[[7487,7487],"mapped",[114]],[[7488,7488],"mapped",[116]],[[7489,7489],"mapped",[117]],[[7490,7490],"mapped",[119]],[[7491,7491],"mapped",[97]],[[7492,7492],"mapped",[592]],[[7493,7493],"mapped",[593]],[[7494,7494],"mapped",[7426]],[[7495,7495],"mapped",[98]],[[7496,7496],"mapped",[100]],[[7497,7497],"mapped",[101]],[[7498,7498],"mapped",[601]],[[7499,7499],"mapped",[603]],[[7500,7500],"mapped",[604]],[[7501,7501],"mapped",[103]],[[7502,7502],"valid"],[[7503,7503],"mapped",[107]],[[7504,7504],"mapped",[109]],[[7505,7505],"mapped",[331]],[[7506,7506],"mapped",[111]],[[7507,7507],"mapped",[596]],[[7508,7508],"mapped",[7446]],[[7509,7509],"mapped",[7447]],[[7510,7510],"mapped",[112]],[[7511,7511],"mapped",[116]],[[7512,7512],"mapped",[117]],[[7513,7513],"mapped",[7453]],[[7514,7514],"mapped",[623]],[[7515,7515],"mapped",[118]],[[7516,7516],"mapped",[7461]],[[7517,7517],"mapped",[946]],[[7518,7518],"mapped",[947]],[[7519,7519],"mapped",[948]],[[7520,7520],"mapped",[966]],[[7521,7521],"mapped",[967]],[[7522,7522],"mapped",[105]],[[7523,7523],"mapped",[114]],[[7524,7524],"mapped",[117]],[[7525,7525],"mapped",[118]],[[7526,7526],"mapped",[946]],[[7527,7527],"mapped",[947]],[[7528,7528],"mapped",[961]],[[7529,7529],"mapped",[966]],[[7530,7530],"mapped",[967]],[[7531,7531],"valid"],[[7532,7543],"valid"],[[7544,7544],"mapped",[1085]],[[7545,7578],"valid"],[[7579,7579],"mapped",[594]],[[7580,7580],"mapped",[99]],[[7581,7581],"mapped",[597]],[[7582,7582],"mapped",[240]],[[7583,7583],"mapped",[604]],[[7584,7584],"mapped",[102]],[[7585,7585],"mapped",[607]],[[7586,7586],"mapped",[609]],[[7587,7587],"mapped",[613]],[[7588,7588],"mapped",[616]],[[7589,7589],"mapped",[617]],[[7590,7590],"mapped",[618]],[[7591,7591],"mapped",[7547]],[[7592,7592],"mapped",[669]],[[7593,7593],"mapped",[621]],[[7594,7594],"mapped",[7557]],[[7595,7595],"mapped",[671]],[[7596,7596],"mapped",[625]],[[7597,7597],"mapped",[624]],[[7598,7598],"mapped",[626]],[[7599,7599],"mapped",[627]],[[7600,7600],"mapped",[628]],[[7601,7601],"mapped",[629]],[[7602,7602],"mapped",[632]],[[7603,7603],"mapped",[642]],[[7604,7604],"mapped",[643]],[[7605,7605],"mapped",[427]],[[7606,7606],"mapped",[649]],[[7607,7607],"mapped",[650]],[[7608,7608],"mapped",[7452]],[[7609,7609],"mapped",[651]],[[7610,7610],"mapped",[652]],[[7611,7611],"mapped",[122]],[[7612,7612],"mapped",[656]],[[7613,7613],"mapped",[657]],[[7614,7614],"mapped",[658]],[[7615,7615],"mapped",[952]],[[7616,7619],"valid"],[[7620,7626],"valid"],[[7627,7654],"valid"],[[7655,7669],"valid"],[[7670,7675],"disallowed"],[[7676,7676],"valid"],[[7677,7677],"valid"],[[7678,7679],"valid"],[[7680,7680],"mapped",[7681]],[[7681,7681],"valid"],[[7682,7682],"mapped",[7683]],[[7683,7683],"valid"],[[7684,7684],"mapped",[7685]],[[7685,7685],"valid"],[[7686,7686],"mapped",[7687]],[[7687,7687],"valid"],[[7688,7688],"mapped",[7689]],[[7689,7689],"valid"],[[7690,7690],"mapped",[7691]],[[7691,7691],"valid"],[[7692,7692],"mapped",[7693]],[[7693,7693],"valid"],[[7694,7694],"mapped",[7695]],[[7695,7695],"valid"],[[7696,7696],"mapped",[7697]],[[7697,7697],"valid"],[[7698,7698],"mapped",[7699]],[[7699,7699],"valid"],[[7700,7700],"mapped",[7701]],[[7701,7701],"valid"],[[7702,7702],"mapped",[7703]],[[7703,7703],"valid"],[[7704,7704],"mapped",[7705]],[[7705,7705],"valid"],[[7706,7706],"mapped",[7707]],[[7707,7707],"valid"],[[7708,7708],"mapped",[7709]],[[7709,7709],"valid"],[[7710,7710],"mapped",[7711]],[[7711,7711],"valid"],[[7712,7712],"mapped",[7713]],[[7713,7713],"valid"],[[7714,7714],"mapped",[7715]],[[7715,7715],"valid"],[[7716,7716],"mapped",[7717]],[[7717,7717],"valid"],[[7718,7718],"mapped",[7719]],[[7719,7719],"valid"],[[7720,7720],"mapped",[7721]],[[7721,7721],"valid"],[[7722,7722],"mapped",[7723]],[[7723,7723],"valid"],[[7724,7724],"mapped",[7725]],[[7725,7725],"valid"],[[7726,7726],"mapped",[7727]],[[7727,7727],"valid"],[[7728,7728],"mapped",[7729]],[[7729,7729],"valid"],[[7730,7730],"mapped",[7731]],[[7731,7731],"valid"],[[7732,7732],"mapped",[7733]],[[7733,7733],"valid"],[[7734,7734],"mapped",[7735]],[[7735,7735],"valid"],[[7736,7736],"mapped",[7737]],[[7737,7737],"valid"],[[7738,7738],"mapped",[7739]],[[7739,7739],"valid"],[[7740,7740],"mapped",[7741]],[[7741,7741],"valid"],[[7742,7742],"mapped",[7743]],[[7743,7743],"valid"],[[7744,7744],"mapped",[7745]],[[7745,7745],"valid"],[[7746,7746],"mapped",[7747]],[[7747,7747],"valid"],[[7748,7748],"mapped",[7749]],[[7749,7749],"valid"],[[7750,7750],"mapped",[7751]],[[7751,7751],"valid"],[[7752,7752],"mapped",[7753]],[[7753,7753],"valid"],[[7754,7754],"mapped",[7755]],[[7755,7755],"valid"],[[7756,7756],"mapped",[7757]],[[7757,7757],"valid"],[[7758,7758],"mapped",[7759]],[[7759,7759],"valid"],[[7760,7760],"mapped",[7761]],[[7761,7761],"valid"],[[7762,7762],"mapped",[7763]],[[7763,7763],"valid"],[[7764,7764],"mapped",[7765]],[[7765,7765],"valid"],[[7766,7766],"mapped",[7767]],[[7767,7767],"valid"],[[7768,7768],"mapped",[7769]],[[7769,7769],"valid"],[[7770,7770],"mapped",[7771]],[[7771,7771],"valid"],[[7772,7772],"mapped",[7773]],[[7773,7773],"valid"],[[7774,7774],"mapped",[7775]],[[7775,7775],"valid"],[[7776,7776],"mapped",[7777]],[[7777,7777],"valid"],[[7778,7778],"mapped",[7779]],[[7779,7779],"valid"],[[7780,7780],"mapped",[7781]],[[7781,7781],"valid"],[[7782,7782],"mapped",[7783]],[[7783,7783],"valid"],[[7784,7784],"mapped",[7785]],[[7785,7785],"valid"],[[7786,7786],"mapped",[7787]],[[7787,7787],"valid"],[[7788,7788],"mapped",[7789]],[[7789,7789],"valid"],[[7790,7790],"mapped",[7791]],[[7791,7791],"valid"],[[7792,7792],"mapped",[7793]],[[7793,7793],"valid"],[[7794,7794],"mapped",[7795]],[[7795,7795],"valid"],[[7796,7796],"mapped",[7797]],[[7797,7797],"valid"],[[7798,7798],"mapped",[7799]],[[7799,7799],"valid"],[[7800,7800],"mapped",[7801]],[[7801,7801],"valid"],[[7802,7802],"mapped",[7803]],[[7803,7803],"valid"],[[7804,7804],"mapped",[7805]],[[7805,7805],"valid"],[[7806,7806],"mapped",[7807]],[[7807,7807],"valid"],[[7808,7808],"mapped",[7809]],[[7809,7809],"valid"],[[7810,7810],"mapped",[7811]],[[7811,7811],"valid"],[[7812,7812],"mapped",[7813]],[[7813,7813],"valid"],[[7814,7814],"mapped",[7815]],[[7815,7815],"valid"],[[7816,7816],"mapped",[7817]],[[7817,7817],"valid"],[[7818,7818],"mapped",[7819]],[[7819,7819],"valid"],[[7820,7820],"mapped",[7821]],[[7821,7821],"valid"],[[7822,7822],"mapped",[7823]],[[7823,7823],"valid"],[[7824,7824],"mapped",[7825]],[[7825,7825],"valid"],[[7826,7826],"mapped",[7827]],[[7827,7827],"valid"],[[7828,7828],"mapped",[7829]],[[7829,7833],"valid"],[[7834,7834],"mapped",[97,702]],[[7835,7835],"mapped",[7777]],[[7836,7837],"valid"],[[7838,7838],"mapped",[115,115]],[[7839,7839],"valid"],[[7840,7840],"mapped",[7841]],[[7841,7841],"valid"],[[7842,7842],"mapped",[7843]],[[7843,7843],"valid"],[[7844,7844],"mapped",[7845]],[[7845,7845],"valid"],[[7846,7846],"mapped",[7847]],[[7847,7847],"valid"],[[7848,7848],"mapped",[7849]],[[7849,7849],"valid"],[[7850,7850],"mapped",[7851]],[[7851,7851],"valid"],[[7852,7852],"mapped",[7853]],[[7853,7853],"valid"],[[7854,7854],"mapped",[7855]],[[7855,7855],"valid"],[[7856,7856],"mapped",[7857]],[[7857,7857],"valid"],[[7858,7858],"mapped",[7859]],[[7859,7859],"valid"],[[7860,7860],"mapped",[7861]],[[7861,7861],"valid"],[[7862,7862],"mapped",[7863]],[[7863,7863],"valid"],[[7864,7864],"mapped",[7865]],[[7865,7865],"valid"],[[7866,7866],"mapped",[7867]],[[7867,7867],"valid"],[[7868,7868],"mapped",[7869]],[[7869,7869],"valid"],[[7870,7870],"mapped",[7871]],[[7871,7871],"valid"],[[7872,7872],"mapped",[7873]],[[7873,7873],"valid"],[[7874,7874],"mapped",[7875]],[[7875,7875],"valid"],[[7876,7876],"mapped",[7877]],[[7877,7877],"valid"],[[7878,7878],"mapped",[7879]],[[7879,7879],"valid"],[[7880,7880],"mapped",[7881]],[[7881,7881],"valid"],[[7882,7882],"mapped",[7883]],[[7883,7883],"valid"],[[7884,7884],"mapped",[7885]],[[7885,7885],"valid"],[[7886,7886],"mapped",[7887]],[[7887,7887],"valid"],[[7888,7888],"mapped",[7889]],[[7889,7889],"valid"],[[7890,7890],"mapped",[7891]],[[7891,7891],"valid"],[[7892,7892],"mapped",[7893]],[[7893,7893],"valid"],[[7894,7894],"mapped",[7895]],[[7895,7895],"valid"],[[7896,7896],"mapped",[7897]],[[7897,7897],"valid"],[[7898,7898],"mapped",[7899]],[[7899,7899],"valid"],[[7900,7900],"mapped",[7901]],[[7901,7901],"valid"],[[7902,7902],"mapped",[7903]],[[7903,7903],"valid"],[[7904,7904],"mapped",[7905]],[[7905,7905],"valid"],[[7906,7906],"mapped",[7907]],[[7907,7907],"valid"],[[7908,7908],"mapped",[7909]],[[7909,7909],"valid"],[[7910,7910],"mapped",[7911]],[[7911,7911],"valid"],[[7912,7912],"mapped",[7913]],[[7913,7913],"valid"],[[7914,7914],"mapped",[7915]],[[7915,7915],"valid"],[[7916,7916],"mapped",[7917]],[[7917,7917],"valid"],[[7918,7918],"mapped",[7919]],[[7919,7919],"valid"],[[7920,7920],"mapped",[7921]],[[7921,7921],"valid"],[[7922,7922],"mapped",[7923]],[[7923,7923],"valid"],[[7924,7924],"mapped",[7925]],[[7925,7925],"valid"],[[7926,7926],"mapped",[7927]],[[7927,7927],"valid"],[[7928,7928],"mapped",[7929]],[[7929,7929],"valid"],[[7930,7930],"mapped",[7931]],[[7931,7931],"valid"],[[7932,7932],"mapped",[7933]],[[7933,7933],"valid"],[[7934,7934],"mapped",[7935]],[[7935,7935],"valid"],[[7936,7943],"valid"],[[7944,7944],"mapped",[7936]],[[7945,7945],"mapped",[7937]],[[7946,7946],"mapped",[7938]],[[7947,7947],"mapped",[7939]],[[7948,7948],"mapped",[7940]],[[7949,7949],"mapped",[7941]],[[7950,7950],"mapped",[7942]],[[7951,7951],"mapped",[7943]],[[7952,7957],"valid"],[[7958,7959],"disallowed"],[[7960,7960],"mapped",[7952]],[[7961,7961],"mapped",[7953]],[[7962,7962],"mapped",[7954]],[[7963,7963],"mapped",[7955]],[[7964,7964],"mapped",[7956]],[[7965,7965],"mapped",[7957]],[[7966,7967],"disallowed"],[[7968,7975],"valid"],[[7976,7976],"mapped",[7968]],[[7977,7977],"mapped",[7969]],[[7978,7978],"mapped",[7970]],[[7979,7979],"mapped",[7971]],[[7980,7980],"mapped",[7972]],[[7981,7981],"mapped",[7973]],[[7982,7982],"mapped",[7974]],[[7983,7983],"mapped",[7975]],[[7984,7991],"valid"],[[7992,7992],"mapped",[7984]],[[7993,7993],"mapped",[7985]],[[7994,7994],"mapped",[7986]],[[7995,7995],"mapped",[7987]],[[7996,7996],"mapped",[7988]],[[7997,7997],"mapped",[7989]],[[7998,7998],"mapped",[7990]],[[7999,7999],"mapped",[7991]],[[8000,8005],"valid"],[[8006,8007],"disallowed"],[[8008,8008],"mapped",[8000]],[[8009,8009],"mapped",[8001]],[[8010,8010],"mapped",[8002]],[[8011,8011],"mapped",[8003]],[[8012,8012],"mapped",[8004]],[[8013,8013],"mapped",[8005]],[[8014,8015],"disallowed"],[[8016,8023],"valid"],[[8024,8024],"disallowed"],[[8025,8025],"mapped",[8017]],[[8026,8026],"disallowed"],[[8027,8027],"mapped",[8019]],[[8028,8028],"disallowed"],[[8029,8029],"mapped",[8021]],[[8030,8030],"disallowed"],[[8031,8031],"mapped",[8023]],[[8032,8039],"valid"],[[8040,8040],"mapped",[8032]],[[8041,8041],"mapped",[8033]],[[8042,8042],"mapped",[8034]],[[8043,8043],"mapped",[8035]],[[8044,8044],"mapped",[8036]],[[8045,8045],"mapped",[8037]],[[8046,8046],"mapped",[8038]],[[8047,8047],"mapped",[8039]],[[8048,8048],"valid"],[[8049,8049],"mapped",[940]],[[8050,8050],"valid"],[[8051,8051],"mapped",[941]],[[8052,8052],"valid"],[[8053,8053],"mapped",[942]],[[8054,8054],"valid"],[[8055,8055],"mapped",[943]],[[8056,8056],"valid"],[[8057,8057],"mapped",[972]],[[8058,8058],"valid"],[[8059,8059],"mapped",[973]],[[8060,8060],"valid"],[[8061,8061],"mapped",[974]],[[8062,8063],"disallowed"],[[8064,8064],"mapped",[7936,953]],[[8065,8065],"mapped",[7937,953]],[[8066,8066],"mapped",[7938,953]],[[8067,8067],"mapped",[7939,953]],[[8068,8068],"mapped",[7940,953]],[[8069,8069],"mapped",[7941,953]],[[8070,8070],"mapped",[7942,953]],[[8071,8071],"mapped",[7943,953]],[[8072,8072],"mapped",[7936,953]],[[8073,8073],"mapped",[7937,953]],[[8074,8074],"mapped",[7938,953]],[[8075,8075],"mapped",[7939,953]],[[8076,8076],"mapped",[7940,953]],[[8077,8077],"mapped",[7941,953]],[[8078,8078],"mapped",[7942,953]],[[8079,8079],"mapped",[7943,953]],[[8080,8080],"mapped",[7968,953]],[[8081,8081],"mapped",[7969,953]],[[8082,8082],"mapped",[7970,953]],[[8083,8083],"mapped",[7971,953]],[[8084,8084],"mapped",[7972,953]],[[8085,8085],"mapped",[7973,953]],[[8086,8086],"mapped",[7974,953]],[[8087,8087],"mapped",[7975,953]],[[8088,8088],"mapped",[7968,953]],[[8089,8089],"mapped",[7969,953]],[[8090,8090],"mapped",[7970,953]],[[8091,8091],"mapped",[7971,953]],[[8092,8092],"mapped",[7972,953]],[[8093,8093],"mapped",[7973,953]],[[8094,8094],"mapped",[7974,953]],[[8095,8095],"mapped",[7975,953]],[[8096,8096],"mapped",[8032,953]],[[8097,8097],"mapped",[8033,953]],[[8098,8098],"mapped",[8034,953]],[[8099,8099],"mapped",[8035,953]],[[8100,8100],"mapped",[8036,953]],[[8101,8101],"mapped",[8037,953]],[[8102,8102],"mapped",[8038,953]],[[8103,8103],"mapped",[8039,953]],[[8104,8104],"mapped",[8032,953]],[[8105,8105],"mapped",[8033,953]],[[8106,8106],"mapped",[8034,953]],[[8107,8107],"mapped",[8035,953]],[[8108,8108],"mapped",[8036,953]],[[8109,8109],"mapped",[8037,953]],[[8110,8110],"mapped",[8038,953]],[[8111,8111],"mapped",[8039,953]],[[8112,8113],"valid"],[[8114,8114],"mapped",[8048,953]],[[8115,8115],"mapped",[945,953]],[[8116,8116],"mapped",[940,953]],[[8117,8117],"disallowed"],[[8118,8118],"valid"],[[8119,8119],"mapped",[8118,953]],[[8120,8120],"mapped",[8112]],[[8121,8121],"mapped",[8113]],[[8122,8122],"mapped",[8048]],[[8123,8123],"mapped",[940]],[[8124,8124],"mapped",[945,953]],[[8125,8125],"disallowed_STD3_mapped",[32,787]],[[8126,8126],"mapped",[953]],[[8127,8127],"disallowed_STD3_mapped",[32,787]],[[8128,8128],"disallowed_STD3_mapped",[32,834]],[[8129,8129],"disallowed_STD3_mapped",[32,776,834]],[[8130,8130],"mapped",[8052,953]],[[8131,8131],"mapped",[951,953]],[[8132,8132],"mapped",[942,953]],[[8133,8133],"disallowed"],[[8134,8134],"valid"],[[8135,8135],"mapped",[8134,953]],[[8136,8136],"mapped",[8050]],[[8137,8137],"mapped",[941]],[[8138,8138],"mapped",[8052]],[[8139,8139],"mapped",[942]],[[8140,8140],"mapped",[951,953]],[[8141,8141],"disallowed_STD3_mapped",[32,787,768]],[[8142,8142],"disallowed_STD3_mapped",[32,787,769]],[[8143,8143],"disallowed_STD3_mapped",[32,787,834]],[[8144,8146],"valid"],[[8147,8147],"mapped",[912]],[[8148,8149],"disallowed"],[[8150,8151],"valid"],[[8152,8152],"mapped",[8144]],[[8153,8153],"mapped",[8145]],[[8154,8154],"mapped",[8054]],[[8155,8155],"mapped",[943]],[[8156,8156],"disallowed"],[[8157,8157],"disallowed_STD3_mapped",[32,788,768]],[[8158,8158],"disallowed_STD3_mapped",[32,788,769]],[[8159,8159],"disallowed_STD3_mapped",[32,788,834]],[[8160,8162],"valid"],[[8163,8163],"mapped",[944]],[[8164,8167],"valid"],[[8168,8168],"mapped",[8160]],[[8169,8169],"mapped",[8161]],[[8170,8170],"mapped",[8058]],[[8171,8171],"mapped",[973]],[[8172,8172],"mapped",[8165]],[[8173,8173],"disallowed_STD3_mapped",[32,776,768]],[[8174,8174],"disallowed_STD3_mapped",[32,776,769]],[[8175,8175],"disallowed_STD3_mapped",[96]],[[8176,8177],"disallowed"],[[8178,8178],"mapped",[8060,953]],[[8179,8179],"mapped",[969,953]],[[8180,8180],"mapped",[974,953]],[[8181,8181],"disallowed"],[[8182,8182],"valid"],[[8183,8183],"mapped",[8182,953]],[[8184,8184],"mapped",[8056]],[[8185,8185],"mapped",[972]],[[8186,8186],"mapped",[8060]],[[8187,8187],"mapped",[974]],[[8188,8188],"mapped",[969,953]],[[8189,8189],"disallowed_STD3_mapped",[32,769]],[[8190,8190],"disallowed_STD3_mapped",[32,788]],[[8191,8191],"disallowed"],[[8192,8202],"disallowed_STD3_mapped",[32]],[[8203,8203],"ignored"],[[8204,8205],"deviation",[]],[[8206,8207],"disallowed"],[[8208,8208],"valid",[],"NV8"],[[8209,8209],"mapped",[8208]],[[8210,8214],"valid",[],"NV8"],[[8215,8215],"disallowed_STD3_mapped",[32,819]],[[8216,8227],"valid",[],"NV8"],[[8228,8230],"disallowed"],[[8231,8231],"valid",[],"NV8"],[[8232,8238],"disallowed"],[[8239,8239],"disallowed_STD3_mapped",[32]],[[8240,8242],"valid",[],"NV8"],[[8243,8243],"mapped",[8242,8242]],[[8244,8244],"mapped",[8242,8242,8242]],[[8245,8245],"valid",[],"NV8"],[[8246,8246],"mapped",[8245,8245]],[[8247,8247],"mapped",[8245,8245,8245]],[[8248,8251],"valid",[],"NV8"],[[8252,8252],"disallowed_STD3_mapped",[33,33]],[[8253,8253],"valid",[],"NV8"],[[8254,8254],"disallowed_STD3_mapped",[32,773]],[[8255,8262],"valid",[],"NV8"],[[8263,8263],"disallowed_STD3_mapped",[63,63]],[[8264,8264],"disallowed_STD3_mapped",[63,33]],[[8265,8265],"disallowed_STD3_mapped",[33,63]],[[8266,8269],"valid",[],"NV8"],[[8270,8274],"valid",[],"NV8"],[[8275,8276],"valid",[],"NV8"],[[8277,8278],"valid",[],"NV8"],[[8279,8279],"mapped",[8242,8242,8242,8242]],[[8280,8286],"valid",[],"NV8"],[[8287,8287],"disallowed_STD3_mapped",[32]],[[8288,8288],"ignored"],[[8289,8291],"disallowed"],[[8292,8292],"ignored"],[[8293,8293],"disallowed"],[[8294,8297],"disallowed"],[[8298,8303],"disallowed"],[[8304,8304],"mapped",[48]],[[8305,8305],"mapped",[105]],[[8306,8307],"disallowed"],[[8308,8308],"mapped",[52]],[[8309,8309],"mapped",[53]],[[8310,8310],"mapped",[54]],[[8311,8311],"mapped",[55]],[[8312,8312],"mapped",[56]],[[8313,8313],"mapped",[57]],[[8314,8314],"disallowed_STD3_mapped",[43]],[[8315,8315],"mapped",[8722]],[[8316,8316],"disallowed_STD3_mapped",[61]],[[8317,8317],"disallowed_STD3_mapped",[40]],[[8318,8318],"disallowed_STD3_mapped",[41]],[[8319,8319],"mapped",[110]],[[8320,8320],"mapped",[48]],[[8321,8321],"mapped",[49]],[[8322,8322],"mapped",[50]],[[8323,8323],"mapped",[51]],[[8324,8324],"mapped",[52]],[[8325,8325],"mapped",[53]],[[8326,8326],"mapped",[54]],[[8327,8327],"mapped",[55]],[[8328,8328],"mapped",[56]],[[8329,8329],"mapped",[57]],[[8330,8330],"disallowed_STD3_mapped",[43]],[[8331,8331],"mapped",[8722]],[[8332,8332],"disallowed_STD3_mapped",[61]],[[8333,8333],"disallowed_STD3_mapped",[40]],[[8334,8334],"disallowed_STD3_mapped",[41]],[[8335,8335],"disallowed"],[[8336,8336],"mapped",[97]],[[8337,8337],"mapped",[101]],[[8338,8338],"mapped",[111]],[[8339,8339],"mapped",[120]],[[8340,8340],"mapped",[601]],[[8341,8341],"mapped",[104]],[[8342,8342],"mapped",[107]],[[8343,8343],"mapped",[108]],[[8344,8344],"mapped",[109]],[[8345,8345],"mapped",[110]],[[8346,8346],"mapped",[112]],[[8347,8347],"mapped",[115]],[[8348,8348],"mapped",[116]],[[8349,8351],"disallowed"],[[8352,8359],"valid",[],"NV8"],[[8360,8360],"mapped",[114,115]],[[8361,8362],"valid",[],"NV8"],[[8363,8363],"valid",[],"NV8"],[[8364,8364],"valid",[],"NV8"],[[8365,8367],"valid",[],"NV8"],[[8368,8369],"valid",[],"NV8"],[[8370,8373],"valid",[],"NV8"],[[8374,8376],"valid",[],"NV8"],[[8377,8377],"valid",[],"NV8"],[[8378,8378],"valid",[],"NV8"],[[8379,8381],"valid",[],"NV8"],[[8382,8382],"valid",[],"NV8"],[[8383,8399],"disallowed"],[[8400,8417],"valid",[],"NV8"],[[8418,8419],"valid",[],"NV8"],[[8420,8426],"valid",[],"NV8"],[[8427,8427],"valid",[],"NV8"],[[8428,8431],"valid",[],"NV8"],[[8432,8432],"valid",[],"NV8"],[[8433,8447],"disallowed"],[[8448,8448],"disallowed_STD3_mapped",[97,47,99]],[[8449,8449],"disallowed_STD3_mapped",[97,47,115]],[[8450,8450],"mapped",[99]],[[8451,8451],"mapped",[176,99]],[[8452,8452],"valid",[],"NV8"],[[8453,8453],"disallowed_STD3_mapped",[99,47,111]],[[8454,8454],"disallowed_STD3_mapped",[99,47,117]],[[8455,8455],"mapped",[603]],[[8456,8456],"valid",[],"NV8"],[[8457,8457],"mapped",[176,102]],[[8458,8458],"mapped",[103]],[[8459,8462],"mapped",[104]],[[8463,8463],"mapped",[295]],[[8464,8465],"mapped",[105]],[[8466,8467],"mapped",[108]],[[8468,8468],"valid",[],"NV8"],[[8469,8469],"mapped",[110]],[[8470,8470],"mapped",[110,111]],[[8471,8472],"valid",[],"NV8"],[[8473,8473],"mapped",[112]],[[8474,8474],"mapped",[113]],[[8475,8477],"mapped",[114]],[[8478,8479],"valid",[],"NV8"],[[8480,8480],"mapped",[115,109]],[[8481,8481],"mapped",[116,101,108]],[[8482,8482],"mapped",[116,109]],[[8483,8483],"valid",[],"NV8"],[[8484,8484],"mapped",[122]],[[8485,8485],"valid",[],"NV8"],[[8486,8486],"mapped",[969]],[[8487,8487],"valid",[],"NV8"],[[8488,8488],"mapped",[122]],[[8489,8489],"valid",[],"NV8"],[[8490,8490],"mapped",[107]],[[8491,8491],"mapped",[229]],[[8492,8492],"mapped",[98]],[[8493,8493],"mapped",[99]],[[8494,8494],"valid",[],"NV8"],[[8495,8496],"mapped",[101]],[[8497,8497],"mapped",[102]],[[8498,8498],"disallowed"],[[8499,8499],"mapped",[109]],[[8500,8500],"mapped",[111]],[[8501,8501],"mapped",[1488]],[[8502,8502],"mapped",[1489]],[[8503,8503],"mapped",[1490]],[[8504,8504],"mapped",[1491]],[[8505,8505],"mapped",[105]],[[8506,8506],"valid",[],"NV8"],[[8507,8507],"mapped",[102,97,120]],[[8508,8508],"mapped",[960]],[[8509,8510],"mapped",[947]],[[8511,8511],"mapped",[960]],[[8512,8512],"mapped",[8721]],[[8513,8516],"valid",[],"NV8"],[[8517,8518],"mapped",[100]],[[8519,8519],"mapped",[101]],[[8520,8520],"mapped",[105]],[[8521,8521],"mapped",[106]],[[8522,8523],"valid",[],"NV8"],[[8524,8524],"valid",[],"NV8"],[[8525,8525],"valid",[],"NV8"],[[8526,8526],"valid"],[[8527,8527],"valid",[],"NV8"],[[8528,8528],"mapped",[49,8260,55]],[[8529,8529],"mapped",[49,8260,57]],[[8530,8530],"mapped",[49,8260,49,48]],[[8531,8531],"mapped",[49,8260,51]],[[8532,8532],"mapped",[50,8260,51]],[[8533,8533],"mapped",[49,8260,53]],[[8534,8534],"mapped",[50,8260,53]],[[8535,8535],"mapped",[51,8260,53]],[[8536,8536],"mapped",[52,8260,53]],[[8537,8537],"mapped",[49,8260,54]],[[8538,8538],"mapped",[53,8260,54]],[[8539,8539],"mapped",[49,8260,56]],[[8540,8540],"mapped",[51,8260,56]],[[8541,8541],"mapped",[53,8260,56]],[[8542,8542],"mapped",[55,8260,56]],[[8543,8543],"mapped",[49,8260]],[[8544,8544],"mapped",[105]],[[8545,8545],"mapped",[105,105]],[[8546,8546],"mapped",[105,105,105]],[[8547,8547],"mapped",[105,118]],[[8548,8548],"mapped",[118]],[[8549,8549],"mapped",[118,105]],[[8550,8550],"mapped",[118,105,105]],[[8551,8551],"mapped",[118,105,105,105]],[[8552,8552],"mapped",[105,120]],[[8553,8553],"mapped",[120]],[[8554,8554],"mapped",[120,105]],[[8555,8555],"mapped",[120,105,105]],[[8556,8556],"mapped",[108]],[[8557,8557],"mapped",[99]],[[8558,8558],"mapped",[100]],[[8559,8559],"mapped",[109]],[[8560,8560],"mapped",[105]],[[8561,8561],"mapped",[105,105]],[[8562,8562],"mapped",[105,105,105]],[[8563,8563],"mapped",[105,118]],[[8564,8564],"mapped",[118]],[[8565,8565],"mapped",[118,105]],[[8566,8566],"mapped",[118,105,105]],[[8567,8567],"mapped",[118,105,105,105]],[[8568,8568],"mapped",[105,120]],[[8569,8569],"mapped",[120]],[[8570,8570],"mapped",[120,105]],[[8571,8571],"mapped",[120,105,105]],[[8572,8572],"mapped",[108]],[[8573,8573],"mapped",[99]],[[8574,8574],"mapped",[100]],[[8575,8575],"mapped",[109]],[[8576,8578],"valid",[],"NV8"],[[8579,8579],"disallowed"],[[8580,8580],"valid"],[[8581,8584],"valid",[],"NV8"],[[8585,8585],"mapped",[48,8260,51]],[[8586,8587],"valid",[],"NV8"],[[8588,8591],"disallowed"],[[8592,8682],"valid",[],"NV8"],[[8683,8691],"valid",[],"NV8"],[[8692,8703],"valid",[],"NV8"],[[8704,8747],"valid",[],"NV8"],[[8748,8748],"mapped",[8747,8747]],[[8749,8749],"mapped",[8747,8747,8747]],[[8750,8750],"valid",[],"NV8"],[[8751,8751],"mapped",[8750,8750]],[[8752,8752],"mapped",[8750,8750,8750]],[[8753,8799],"valid",[],"NV8"],[[8800,8800],"disallowed_STD3_valid"],[[8801,8813],"valid",[],"NV8"],[[8814,8815],"disallowed_STD3_valid"],[[8816,8945],"valid",[],"NV8"],[[8946,8959],"valid",[],"NV8"],[[8960,8960],"valid",[],"NV8"],[[8961,8961],"valid",[],"NV8"],[[8962,9000],"valid",[],"NV8"],[[9001,9001],"mapped",[12296]],[[9002,9002],"mapped",[12297]],[[9003,9082],"valid",[],"NV8"],[[9083,9083],"valid",[],"NV8"],[[9084,9084],"valid",[],"NV8"],[[9085,9114],"valid",[],"NV8"],[[9115,9166],"valid",[],"NV8"],[[9167,9168],"valid",[],"NV8"],[[9169,9179],"valid",[],"NV8"],[[9180,9191],"valid",[],"NV8"],[[9192,9192],"valid",[],"NV8"],[[9193,9203],"valid",[],"NV8"],[[9204,9210],"valid",[],"NV8"],[[9211,9215],"disallowed"],[[9216,9252],"valid",[],"NV8"],[[9253,9254],"valid",[],"NV8"],[[9255,9279],"disallowed"],[[9280,9290],"valid",[],"NV8"],[[9291,9311],"disallowed"],[[9312,9312],"mapped",[49]],[[9313,9313],"mapped",[50]],[[9314,9314],"mapped",[51]],[[9315,9315],"mapped",[52]],[[9316,9316],"mapped",[53]],[[9317,9317],"mapped",[54]],[[9318,9318],"mapped",[55]],[[9319,9319],"mapped",[56]],[[9320,9320],"mapped",[57]],[[9321,9321],"mapped",[49,48]],[[9322,9322],"mapped",[49,49]],[[9323,9323],"mapped",[49,50]],[[9324,9324],"mapped",[49,51]],[[9325,9325],"mapped",[49,52]],[[9326,9326],"mapped",[49,53]],[[9327,9327],"mapped",[49,54]],[[9328,9328],"mapped",[49,55]],[[9329,9329],"mapped",[49,56]],[[9330,9330],"mapped",[49,57]],[[9331,9331],"mapped",[50,48]],[[9332,9332],"disallowed_STD3_mapped",[40,49,41]],[[9333,9333],"disallowed_STD3_mapped",[40,50,41]],[[9334,9334],"disallowed_STD3_mapped",[40,51,41]],[[9335,9335],"disallowed_STD3_mapped",[40,52,41]],[[9336,9336],"disallowed_STD3_mapped",[40,53,41]],[[9337,9337],"disallowed_STD3_mapped",[40,54,41]],[[9338,9338],"disallowed_STD3_mapped",[40,55,41]],[[9339,9339],"disallowed_STD3_mapped",[40,56,41]],[[9340,9340],"disallowed_STD3_mapped",[40,57,41]],[[9341,9341],"disallowed_STD3_mapped",[40,49,48,41]],[[9342,9342],"disallowed_STD3_mapped",[40,49,49,41]],[[9343,9343],"disallowed_STD3_mapped",[40,49,50,41]],[[9344,9344],"disallowed_STD3_mapped",[40,49,51,41]],[[9345,9345],"disallowed_STD3_mapped",[40,49,52,41]],[[9346,9346],"disallowed_STD3_mapped",[40,49,53,41]],[[9347,9347],"disallowed_STD3_mapped",[40,49,54,41]],[[9348,9348],"disallowed_STD3_mapped",[40,49,55,41]],[[9349,9349],"disallowed_STD3_mapped",[40,49,56,41]],[[9350,9350],"disallowed_STD3_mapped",[40,49,57,41]],[[9351,9351],"disallowed_STD3_mapped",[40,50,48,41]],[[9352,9371],"disallowed"],[[9372,9372],"disallowed_STD3_mapped",[40,97,41]],[[9373,9373],"disallowed_STD3_mapped",[40,98,41]],[[9374,9374],"disallowed_STD3_mapped",[40,99,41]],[[9375,9375],"disallowed_STD3_mapped",[40,100,41]],[[9376,9376],"disallowed_STD3_mapped",[40,101,41]],[[9377,9377],"disallowed_STD3_mapped",[40,102,41]],[[9378,9378],"disallowed_STD3_mapped",[40,103,41]],[[9379,9379],"disallowed_STD3_mapped",[40,104,41]],[[9380,9380],"disallowed_STD3_mapped",[40,105,41]],[[9381,9381],"disallowed_STD3_mapped",[40,106,41]],[[9382,9382],"disallowed_STD3_mapped",[40,107,41]],[[9383,9383],"disallowed_STD3_mapped",[40,108,41]],[[9384,9384],"disallowed_STD3_mapped",[40,109,41]],[[9385,9385],"disallowed_STD3_mapped",[40,110,41]],[[9386,9386],"disallowed_STD3_mapped",[40,111,41]],[[9387,9387],"disallowed_STD3_mapped",[40,112,41]],[[9388,9388],"disallowed_STD3_mapped",[40,113,41]],[[9389,9389],"disallowed_STD3_mapped",[40,114,41]],[[9390,9390],"disallowed_STD3_mapped",[40,115,41]],[[9391,9391],"disallowed_STD3_mapped",[40,116,41]],[[9392,9392],"disallowed_STD3_mapped",[40,117,41]],[[9393,9393],"disallowed_STD3_mapped",[40,118,41]],[[9394,9394],"disallowed_STD3_mapped",[40,119,41]],[[9395,9395],"disallowed_STD3_mapped",[40,120,41]],[[9396,9396],"disallowed_STD3_mapped",[40,121,41]],[[9397,9397],"disallowed_STD3_mapped",[40,122,41]],[[9398,9398],"mapped",[97]],[[9399,9399],"mapped",[98]],[[9400,9400],"mapped",[99]],[[9401,9401],"mapped",[100]],[[9402,9402],"mapped",[101]],[[9403,9403],"mapped",[102]],[[9404,9404],"mapped",[103]],[[9405,9405],"mapped",[104]],[[9406,9406],"mapped",[105]],[[9407,9407],"mapped",[106]],[[9408,9408],"mapped",[107]],[[9409,9409],"mapped",[108]],[[9410,9410],"mapped",[109]],[[9411,9411],"mapped",[110]],[[9412,9412],"mapped",[111]],[[9413,9413],"mapped",[112]],[[9414,9414],"mapped",[113]],[[9415,9415],"mapped",[114]],[[9416,9416],"mapped",[115]],[[9417,9417],"mapped",[116]],[[9418,9418],"mapped",[117]],[[9419,9419],"mapped",[118]],[[9420,9420],"mapped",[119]],[[9421,9421],"mapped",[120]],[[9422,9422],"mapped",[121]],[[9423,9423],"mapped",[122]],[[9424,9424],"mapped",[97]],[[9425,9425],"mapped",[98]],[[9426,9426],"mapped",[99]],[[9427,9427],"mapped",[100]],[[9428,9428],"mapped",[101]],[[9429,9429],"mapped",[102]],[[9430,9430],"mapped",[103]],[[9431,9431],"mapped",[104]],[[9432,9432],"mapped",[105]],[[9433,9433],"mapped",[106]],[[9434,9434],"mapped",[107]],[[9435,9435],"mapped",[108]],[[9436,9436],"mapped",[109]],[[9437,9437],"mapped",[110]],[[9438,9438],"mapped",[111]],[[9439,9439],"mapped",[112]],[[9440,9440],"mapped",[113]],[[9441,9441],"mapped",[114]],[[9442,9442],"mapped",[115]],[[9443,9443],"mapped",[116]],[[9444,9444],"mapped",[117]],[[9445,9445],"mapped",[118]],[[9446,9446],"mapped",[119]],[[9447,9447],"mapped",[120]],[[9448,9448],"mapped",[121]],[[9449,9449],"mapped",[122]],[[9450,9450],"mapped",[48]],[[9451,9470],"valid",[],"NV8"],[[9471,9471],"valid",[],"NV8"],[[9472,9621],"valid",[],"NV8"],[[9622,9631],"valid",[],"NV8"],[[9632,9711],"valid",[],"NV8"],[[9712,9719],"valid",[],"NV8"],[[9720,9727],"valid",[],"NV8"],[[9728,9747],"valid",[],"NV8"],[[9748,9749],"valid",[],"NV8"],[[9750,9751],"valid",[],"NV8"],[[9752,9752],"valid",[],"NV8"],[[9753,9753],"valid",[],"NV8"],[[9754,9839],"valid",[],"NV8"],[[9840,9841],"valid",[],"NV8"],[[9842,9853],"valid",[],"NV8"],[[9854,9855],"valid",[],"NV8"],[[9856,9865],"valid",[],"NV8"],[[9866,9873],"valid",[],"NV8"],[[9874,9884],"valid",[],"NV8"],[[9885,9885],"valid",[],"NV8"],[[9886,9887],"valid",[],"NV8"],[[9888,9889],"valid",[],"NV8"],[[9890,9905],"valid",[],"NV8"],[[9906,9906],"valid",[],"NV8"],[[9907,9916],"valid",[],"NV8"],[[9917,9919],"valid",[],"NV8"],[[9920,9923],"valid",[],"NV8"],[[9924,9933],"valid",[],"NV8"],[[9934,9934],"valid",[],"NV8"],[[9935,9953],"valid",[],"NV8"],[[9954,9954],"valid",[],"NV8"],[[9955,9955],"valid",[],"NV8"],[[9956,9959],"valid",[],"NV8"],[[9960,9983],"valid",[],"NV8"],[[9984,9984],"valid",[],"NV8"],[[9985,9988],"valid",[],"NV8"],[[9989,9989],"valid",[],"NV8"],[[9990,9993],"valid",[],"NV8"],[[9994,9995],"valid",[],"NV8"],[[9996,10023],"valid",[],"NV8"],[[10024,10024],"valid",[],"NV8"],[[10025,10059],"valid",[],"NV8"],[[10060,10060],"valid",[],"NV8"],[[10061,10061],"valid",[],"NV8"],[[10062,10062],"valid",[],"NV8"],[[10063,10066],"valid",[],"NV8"],[[10067,10069],"valid",[],"NV8"],[[10070,10070],"valid",[],"NV8"],[[10071,10071],"valid",[],"NV8"],[[10072,10078],"valid",[],"NV8"],[[10079,10080],"valid",[],"NV8"],[[10081,10087],"valid",[],"NV8"],[[10088,10101],"valid",[],"NV8"],[[10102,10132],"valid",[],"NV8"],[[10133,10135],"valid",[],"NV8"],[[10136,10159],"valid",[],"NV8"],[[10160,10160],"valid",[],"NV8"],[[10161,10174],"valid",[],"NV8"],[[10175,10175],"valid",[],"NV8"],[[10176,10182],"valid",[],"NV8"],[[10183,10186],"valid",[],"NV8"],[[10187,10187],"valid",[],"NV8"],[[10188,10188],"valid",[],"NV8"],[[10189,10189],"valid",[],"NV8"],[[10190,10191],"valid",[],"NV8"],[[10192,10219],"valid",[],"NV8"],[[10220,10223],"valid",[],"NV8"],[[10224,10239],"valid",[],"NV8"],[[10240,10495],"valid",[],"NV8"],[[10496,10763],"valid",[],"NV8"],[[10764,10764],"mapped",[8747,8747,8747,8747]],[[10765,10867],"valid",[],"NV8"],[[10868,10868],"disallowed_STD3_mapped",[58,58,61]],[[10869,10869],"disallowed_STD3_mapped",[61,61]],[[10870,10870],"disallowed_STD3_mapped",[61,61,61]],[[10871,10971],"valid",[],"NV8"],[[10972,10972],"mapped",[10973,824]],[[10973,11007],"valid",[],"NV8"],[[11008,11021],"valid",[],"NV8"],[[11022,11027],"valid",[],"NV8"],[[11028,11034],"valid",[],"NV8"],[[11035,11039],"valid",[],"NV8"],[[11040,11043],"valid",[],"NV8"],[[11044,11084],"valid",[],"NV8"],[[11085,11087],"valid",[],"NV8"],[[11088,11092],"valid",[],"NV8"],[[11093,11097],"valid",[],"NV8"],[[11098,11123],"valid",[],"NV8"],[[11124,11125],"disallowed"],[[11126,11157],"valid",[],"NV8"],[[11158,11159],"disallowed"],[[11160,11193],"valid",[],"NV8"],[[11194,11196],"disallowed"],[[11197,11208],"valid",[],"NV8"],[[11209,11209],"disallowed"],[[11210,11217],"valid",[],"NV8"],[[11218,11243],"disallowed"],[[11244,11247],"valid",[],"NV8"],[[11248,11263],"disallowed"],[[11264,11264],"mapped",[11312]],[[11265,11265],"mapped",[11313]],[[11266,11266],"mapped",[11314]],[[11267,11267],"mapped",[11315]],[[11268,11268],"mapped",[11316]],[[11269,11269],"mapped",[11317]],[[11270,11270],"mapped",[11318]],[[11271,11271],"mapped",[11319]],[[11272,11272],"mapped",[11320]],[[11273,11273],"mapped",[11321]],[[11274,11274],"mapped",[11322]],[[11275,11275],"mapped",[11323]],[[11276,11276],"mapped",[11324]],[[11277,11277],"mapped",[11325]],[[11278,11278],"mapped",[11326]],[[11279,11279],"mapped",[11327]],[[11280,11280],"mapped",[11328]],[[11281,11281],"mapped",[11329]],[[11282,11282],"mapped",[11330]],[[11283,11283],"mapped",[11331]],[[11284,11284],"mapped",[11332]],[[11285,11285],"mapped",[11333]],[[11286,11286],"mapped",[11334]],[[11287,11287],"mapped",[11335]],[[11288,11288],"mapped",[11336]],[[11289,11289],"mapped",[11337]],[[11290,11290],"mapped",[11338]],[[11291,11291],"mapped",[11339]],[[11292,11292],"mapped",[11340]],[[11293,11293],"mapped",[11341]],[[11294,11294],"mapped",[11342]],[[11295,11295],"mapped",[11343]],[[11296,11296],"mapped",[11344]],[[11297,11297],"mapped",[11345]],[[11298,11298],"mapped",[11346]],[[11299,11299],"mapped",[11347]],[[11300,11300],"mapped",[11348]],[[11301,11301],"mapped",[11349]],[[11302,11302],"mapped",[11350]],[[11303,11303],"mapped",[11351]],[[11304,11304],"mapped",[11352]],[[11305,11305],"mapped",[11353]],[[11306,11306],"mapped",[11354]],[[11307,11307],"mapped",[11355]],[[11308,11308],"mapped",[11356]],[[11309,11309],"mapped",[11357]],[[11310,11310],"mapped",[11358]],[[11311,11311],"disallowed"],[[11312,11358],"valid"],[[11359,11359],"disallowed"],[[11360,11360],"mapped",[11361]],[[11361,11361],"valid"],[[11362,11362],"mapped",[619]],[[11363,11363],"mapped",[7549]],[[11364,11364],"mapped",[637]],[[11365,11366],"valid"],[[11367,11367],"mapped",[11368]],[[11368,11368],"valid"],[[11369,11369],"mapped",[11370]],[[11370,11370],"valid"],[[11371,11371],"mapped",[11372]],[[11372,11372],"valid"],[[11373,11373],"mapped",[593]],[[11374,11374],"mapped",[625]],[[11375,11375],"mapped",[592]],[[11376,11376],"mapped",[594]],[[11377,11377],"valid"],[[11378,11378],"mapped",[11379]],[[11379,11379],"valid"],[[11380,11380],"valid"],[[11381,11381],"mapped",[11382]],[[11382,11383],"valid"],[[11384,11387],"valid"],[[11388,11388],"mapped",[106]],[[11389,11389],"mapped",[118]],[[11390,11390],"mapped",[575]],[[11391,11391],"mapped",[576]],[[11392,11392],"mapped",[11393]],[[11393,11393],"valid"],[[11394,11394],"mapped",[11395]],[[11395,11395],"valid"],[[11396,11396],"mapped",[11397]],[[11397,11397],"valid"],[[11398,11398],"mapped",[11399]],[[11399,11399],"valid"],[[11400,11400],"mapped",[11401]],[[11401,11401],"valid"],[[11402,11402],"mapped",[11403]],[[11403,11403],"valid"],[[11404,11404],"mapped",[11405]],[[11405,11405],"valid"],[[11406,11406],"mapped",[11407]],[[11407,11407],"valid"],[[11408,11408],"mapped",[11409]],[[11409,11409],"valid"],[[11410,11410],"mapped",[11411]],[[11411,11411],"valid"],[[11412,11412],"mapped",[11413]],[[11413,11413],"valid"],[[11414,11414],"mapped",[11415]],[[11415,11415],"valid"],[[11416,11416],"mapped",[11417]],[[11417,11417],"valid"],[[11418,11418],"mapped",[11419]],[[11419,11419],"valid"],[[11420,11420],"mapped",[11421]],[[11421,11421],"valid"],[[11422,11422],"mapped",[11423]],[[11423,11423],"valid"],[[11424,11424],"mapped",[11425]],[[11425,11425],"valid"],[[11426,11426],"mapped",[11427]],[[11427,11427],"valid"],[[11428,11428],"mapped",[11429]],[[11429,11429],"valid"],[[11430,11430],"mapped",[11431]],[[11431,11431],"valid"],[[11432,11432],"mapped",[11433]],[[11433,11433],"valid"],[[11434,11434],"mapped",[11435]],[[11435,11435],"valid"],[[11436,11436],"mapped",[11437]],[[11437,11437],"valid"],[[11438,11438],"mapped",[11439]],[[11439,11439],"valid"],[[11440,11440],"mapped",[11441]],[[11441,11441],"valid"],[[11442,11442],"mapped",[11443]],[[11443,11443],"valid"],[[11444,11444],"mapped",[11445]],[[11445,11445],"valid"],[[11446,11446],"mapped",[11447]],[[11447,11447],"valid"],[[11448,11448],"mapped",[11449]],[[11449,11449],"valid"],[[11450,11450],"mapped",[11451]],[[11451,11451],"valid"],[[11452,11452],"mapped",[11453]],[[11453,11453],"valid"],[[11454,11454],"mapped",[11455]],[[11455,11455],"valid"],[[11456,11456],"mapped",[11457]],[[11457,11457],"valid"],[[11458,11458],"mapped",[11459]],[[11459,11459],"valid"],[[11460,11460],"mapped",[11461]],[[11461,11461],"valid"],[[11462,11462],"mapped",[11463]],[[11463,11463],"valid"],[[11464,11464],"mapped",[11465]],[[11465,11465],"valid"],[[11466,11466],"mapped",[11467]],[[11467,11467],"valid"],[[11468,11468],"mapped",[11469]],[[11469,11469],"valid"],[[11470,11470],"mapped",[11471]],[[11471,11471],"valid"],[[11472,11472],"mapped",[11473]],[[11473,11473],"valid"],[[11474,11474],"mapped",[11475]],[[11475,11475],"valid"],[[11476,11476],"mapped",[11477]],[[11477,11477],"valid"],[[11478,11478],"mapped",[11479]],[[11479,11479],"valid"],[[11480,11480],"mapped",[11481]],[[11481,11481],"valid"],[[11482,11482],"mapped",[11483]],[[11483,11483],"valid"],[[11484,11484],"mapped",[11485]],[[11485,11485],"valid"],[[11486,11486],"mapped",[11487]],[[11487,11487],"valid"],[[11488,11488],"mapped",[11489]],[[11489,11489],"valid"],[[11490,11490],"mapped",[11491]],[[11491,11492],"valid"],[[11493,11498],"valid",[],"NV8"],[[11499,11499],"mapped",[11500]],[[11500,11500],"valid"],[[11501,11501],"mapped",[11502]],[[11502,11505],"valid"],[[11506,11506],"mapped",[11507]],[[11507,11507],"valid"],[[11508,11512],"disallowed"],[[11513,11519],"valid",[],"NV8"],[[11520,11557],"valid"],[[11558,11558],"disallowed"],[[11559,11559],"valid"],[[11560,11564],"disallowed"],[[11565,11565],"valid"],[[11566,11567],"disallowed"],[[11568,11621],"valid"],[[11622,11623],"valid"],[[11624,11630],"disallowed"],[[11631,11631],"mapped",[11617]],[[11632,11632],"valid",[],"NV8"],[[11633,11646],"disallowed"],[[11647,11647],"valid"],[[11648,11670],"valid"],[[11671,11679],"disallowed"],[[11680,11686],"valid"],[[11687,11687],"disallowed"],[[11688,11694],"valid"],[[11695,11695],"disallowed"],[[11696,11702],"valid"],[[11703,11703],"disallowed"],[[11704,11710],"valid"],[[11711,11711],"disallowed"],[[11712,11718],"valid"],[[11719,11719],"disallowed"],[[11720,11726],"valid"],[[11727,11727],"disallowed"],[[11728,11734],"valid"],[[11735,11735],"disallowed"],[[11736,11742],"valid"],[[11743,11743],"disallowed"],[[11744,11775],"valid"],[[11776,11799],"valid",[],"NV8"],[[11800,11803],"valid",[],"NV8"],[[11804,11805],"valid",[],"NV8"],[[11806,11822],"valid",[],"NV8"],[[11823,11823],"valid"],[[11824,11824],"valid",[],"NV8"],[[11825,11825],"valid",[],"NV8"],[[11826,11835],"valid",[],"NV8"],[[11836,11842],"valid",[],"NV8"],[[11843,11903],"disallowed"],[[11904,11929],"valid",[],"NV8"],[[11930,11930],"disallowed"],[[11931,11934],"valid",[],"NV8"],[[11935,11935],"mapped",[27597]],[[11936,12018],"valid",[],"NV8"],[[12019,12019],"mapped",[40863]],[[12020,12031],"disallowed"],[[12032,12032],"mapped",[19968]],[[12033,12033],"mapped",[20008]],[[12034,12034],"mapped",[20022]],[[12035,12035],"mapped",[20031]],[[12036,12036],"mapped",[20057]],[[12037,12037],"mapped",[20101]],[[12038,12038],"mapped",[20108]],[[12039,12039],"mapped",[20128]],[[12040,12040],"mapped",[20154]],[[12041,12041],"mapped",[20799]],[[12042,12042],"mapped",[20837]],[[12043,12043],"mapped",[20843]],[[12044,12044],"mapped",[20866]],[[12045,12045],"mapped",[20886]],[[12046,12046],"mapped",[20907]],[[12047,12047],"mapped",[20960]],[[12048,12048],"mapped",[20981]],[[12049,12049],"mapped",[20992]],[[12050,12050],"mapped",[21147]],[[12051,12051],"mapped",[21241]],[[12052,12052],"mapped",[21269]],[[12053,12053],"mapped",[21274]],[[12054,12054],"mapped",[21304]],[[12055,12055],"mapped",[21313]],[[12056,12056],"mapped",[21340]],[[12057,12057],"mapped",[21353]],[[12058,12058],"mapped",[21378]],[[12059,12059],"mapped",[21430]],[[12060,12060],"mapped",[21448]],[[12061,12061],"mapped",[21475]],[[12062,12062],"mapped",[22231]],[[12063,12063],"mapped",[22303]],[[12064,12064],"mapped",[22763]],[[12065,12065],"mapped",[22786]],[[12066,12066],"mapped",[22794]],[[12067,12067],"mapped",[22805]],[[12068,12068],"mapped",[22823]],[[12069,12069],"mapped",[22899]],[[12070,12070],"mapped",[23376]],[[12071,12071],"mapped",[23424]],[[12072,12072],"mapped",[23544]],[[12073,12073],"mapped",[23567]],[[12074,12074],"mapped",[23586]],[[12075,12075],"mapped",[23608]],[[12076,12076],"mapped",[23662]],[[12077,12077],"mapped",[23665]],[[12078,12078],"mapped",[24027]],[[12079,12079],"mapped",[24037]],[[12080,12080],"mapped",[24049]],[[12081,12081],"mapped",[24062]],[[12082,12082],"mapped",[24178]],[[12083,12083],"mapped",[24186]],[[12084,12084],"mapped",[24191]],[[12085,12085],"mapped",[24308]],[[12086,12086],"mapped",[24318]],[[12087,12087],"mapped",[24331]],[[12088,12088],"mapped",[24339]],[[12089,12089],"mapped",[24400]],[[12090,12090],"mapped",[24417]],[[12091,12091],"mapped",[24435]],[[12092,12092],"mapped",[24515]],[[12093,12093],"mapped",[25096]],[[12094,12094],"mapped",[25142]],[[12095,12095],"mapped",[25163]],[[12096,12096],"mapped",[25903]],[[12097,12097],"mapped",[25908]],[[12098,12098],"mapped",[25991]],[[12099,12099],"mapped",[26007]],[[12100,12100],"mapped",[26020]],[[12101,12101],"mapped",[26041]],[[12102,12102],"mapped",[26080]],[[12103,12103],"mapped",[26085]],[[12104,12104],"mapped",[26352]],[[12105,12105],"mapped",[26376]],[[12106,12106],"mapped",[26408]],[[12107,12107],"mapped",[27424]],[[12108,12108],"mapped",[27490]],[[12109,12109],"mapped",[27513]],[[12110,12110],"mapped",[27571]],[[12111,12111],"mapped",[27595]],[[12112,12112],"mapped",[27604]],[[12113,12113],"mapped",[27611]],[[12114,12114],"mapped",[27663]],[[12115,12115],"mapped",[27668]],[[12116,12116],"mapped",[27700]],[[12117,12117],"mapped",[28779]],[[12118,12118],"mapped",[29226]],[[12119,12119],"mapped",[29238]],[[12120,12120],"mapped",[29243]],[[12121,12121],"mapped",[29247]],[[12122,12122],"mapped",[29255]],[[12123,12123],"mapped",[29273]],[[12124,12124],"mapped",[29275]],[[12125,12125],"mapped",[29356]],[[12126,12126],"mapped",[29572]],[[12127,12127],"mapped",[29577]],[[12128,12128],"mapped",[29916]],[[12129,12129],"mapped",[29926]],[[12130,12130],"mapped",[29976]],[[12131,12131],"mapped",[29983]],[[12132,12132],"mapped",[29992]],[[12133,12133],"mapped",[30000]],[[12134,12134],"mapped",[30091]],[[12135,12135],"mapped",[30098]],[[12136,12136],"mapped",[30326]],[[12137,12137],"mapped",[30333]],[[12138,12138],"mapped",[30382]],[[12139,12139],"mapped",[30399]],[[12140,12140],"mapped",[30446]],[[12141,12141],"mapped",[30683]],[[12142,12142],"mapped",[30690]],[[12143,12143],"mapped",[30707]],[[12144,12144],"mapped",[31034]],[[12145,12145],"mapped",[31160]],[[12146,12146],"mapped",[31166]],[[12147,12147],"mapped",[31348]],[[12148,12148],"mapped",[31435]],[[12149,12149],"mapped",[31481]],[[12150,12150],"mapped",[31859]],[[12151,12151],"mapped",[31992]],[[12152,12152],"mapped",[32566]],[[12153,12153],"mapped",[32593]],[[12154,12154],"mapped",[32650]],[[12155,12155],"mapped",[32701]],[[12156,12156],"mapped",[32769]],[[12157,12157],"mapped",[32780]],[[12158,12158],"mapped",[32786]],[[12159,12159],"mapped",[32819]],[[12160,12160],"mapped",[32895]],[[12161,12161],"mapped",[32905]],[[12162,12162],"mapped",[33251]],[[12163,12163],"mapped",[33258]],[[12164,12164],"mapped",[33267]],[[12165,12165],"mapped",[33276]],[[12166,12166],"mapped",[33292]],[[12167,12167],"mapped",[33307]],[[12168,12168],"mapped",[33311]],[[12169,12169],"mapped",[33390]],[[12170,12170],"mapped",[33394]],[[12171,12171],"mapped",[33400]],[[12172,12172],"mapped",[34381]],[[12173,12173],"mapped",[34411]],[[12174,12174],"mapped",[34880]],[[12175,12175],"mapped",[34892]],[[12176,12176],"mapped",[34915]],[[12177,12177],"mapped",[35198]],[[12178,12178],"mapped",[35211]],[[12179,12179],"mapped",[35282]],[[12180,12180],"mapped",[35328]],[[12181,12181],"mapped",[35895]],[[12182,12182],"mapped",[35910]],[[12183,12183],"mapped",[35925]],[[12184,12184],"mapped",[35960]],[[12185,12185],"mapped",[35997]],[[12186,12186],"mapped",[36196]],[[12187,12187],"mapped",[36208]],[[12188,12188],"mapped",[36275]],[[12189,12189],"mapped",[36523]],[[12190,12190],"mapped",[36554]],[[12191,12191],"mapped",[36763]],[[12192,12192],"mapped",[36784]],[[12193,12193],"mapped",[36789]],[[12194,12194],"mapped",[37009]],[[12195,12195],"mapped",[37193]],[[12196,12196],"mapped",[37318]],[[12197,12197],"mapped",[37324]],[[12198,12198],"mapped",[37329]],[[12199,12199],"mapped",[38263]],[[12200,12200],"mapped",[38272]],[[12201,12201],"mapped",[38428]],[[12202,12202],"mapped",[38582]],[[12203,12203],"mapped",[38585]],[[12204,12204],"mapped",[38632]],[[12205,12205],"mapped",[38737]],[[12206,12206],"mapped",[38750]],[[12207,12207],"mapped",[38754]],[[12208,12208],"mapped",[38761]],[[12209,12209],"mapped",[38859]],[[12210,12210],"mapped",[38893]],[[12211,12211],"mapped",[38899]],[[12212,12212],"mapped",[38913]],[[12213,12213],"mapped",[39080]],[[12214,12214],"mapped",[39131]],[[12215,12215],"mapped",[39135]],[[12216,12216],"mapped",[39318]],[[12217,12217],"mapped",[39321]],[[12218,12218],"mapped",[39340]],[[12219,12219],"mapped",[39592]],[[12220,12220],"mapped",[39640]],[[12221,12221],"mapped",[39647]],[[12222,12222],"mapped",[39717]],[[12223,12223],"mapped",[39727]],[[12224,12224],"mapped",[39730]],[[12225,12225],"mapped",[39740]],[[12226,12226],"mapped",[39770]],[[12227,12227],"mapped",[40165]],[[12228,12228],"mapped",[40565]],[[12229,12229],"mapped",[40575]],[[12230,12230],"mapped",[40613]],[[12231,12231],"mapped",[40635]],[[12232,12232],"mapped",[40643]],[[12233,12233],"mapped",[40653]],[[12234,12234],"mapped",[40657]],[[12235,12235],"mapped",[40697]],[[12236,12236],"mapped",[40701]],[[12237,12237],"mapped",[40718]],[[12238,12238],"mapped",[40723]],[[12239,12239],"mapped",[40736]],[[12240,12240],"mapped",[40763]],[[12241,12241],"mapped",[40778]],[[12242,12242],"mapped",[40786]],[[12243,12243],"mapped",[40845]],[[12244,12244],"mapped",[40860]],[[12245,12245],"mapped",[40864]],[[12246,12271],"disallowed"],[[12272,12283],"disallowed"],[[12284,12287],"disallowed"],[[12288,12288],"disallowed_STD3_mapped",[32]],[[12289,12289],"valid",[],"NV8"],[[12290,12290],"mapped",[46]],[[12291,12292],"valid",[],"NV8"],[[12293,12295],"valid"],[[12296,12329],"valid",[],"NV8"],[[12330,12333],"valid"],[[12334,12341],"valid",[],"NV8"],[[12342,12342],"mapped",[12306]],[[12343,12343],"valid",[],"NV8"],[[12344,12344],"mapped",[21313]],[[12345,12345],"mapped",[21316]],[[12346,12346],"mapped",[21317]],[[12347,12347],"valid",[],"NV8"],[[12348,12348],"valid"],[[12349,12349],"valid",[],"NV8"],[[12350,12350],"valid",[],"NV8"],[[12351,12351],"valid",[],"NV8"],[[12352,12352],"disallowed"],[[12353,12436],"valid"],[[12437,12438],"valid"],[[12439,12440],"disallowed"],[[12441,12442],"valid"],[[12443,12443],"disallowed_STD3_mapped",[32,12441]],[[12444,12444],"disallowed_STD3_mapped",[32,12442]],[[12445,12446],"valid"],[[12447,12447],"mapped",[12424,12426]],[[12448,12448],"valid",[],"NV8"],[[12449,12542],"valid"],[[12543,12543],"mapped",[12467,12488]],[[12544,12548],"disallowed"],[[12549,12588],"valid"],[[12589,12589],"valid"],[[12590,12592],"disallowed"],[[12593,12593],"mapped",[4352]],[[12594,12594],"mapped",[4353]],[[12595,12595],"mapped",[4522]],[[12596,12596],"mapped",[4354]],[[12597,12597],"mapped",[4524]],[[12598,12598],"mapped",[4525]],[[12599,12599],"mapped",[4355]],[[12600,12600],"mapped",[4356]],[[12601,12601],"mapped",[4357]],[[12602,12602],"mapped",[4528]],[[12603,12603],"mapped",[4529]],[[12604,12604],"mapped",[4530]],[[12605,12605],"mapped",[4531]],[[12606,12606],"mapped",[4532]],[[12607,12607],"mapped",[4533]],[[12608,12608],"mapped",[4378]],[[12609,12609],"mapped",[4358]],[[12610,12610],"mapped",[4359]],[[12611,12611],"mapped",[4360]],[[12612,12612],"mapped",[4385]],[[12613,12613],"mapped",[4361]],[[12614,12614],"mapped",[4362]],[[12615,12615],"mapped",[4363]],[[12616,12616],"mapped",[4364]],[[12617,12617],"mapped",[4365]],[[12618,12618],"mapped",[4366]],[[12619,12619],"mapped",[4367]],[[12620,12620],"mapped",[4368]],[[12621,12621],"mapped",[4369]],[[12622,12622],"mapped",[4370]],[[12623,12623],"mapped",[4449]],[[12624,12624],"mapped",[4450]],[[12625,12625],"mapped",[4451]],[[12626,12626],"mapped",[4452]],[[12627,12627],"mapped",[4453]],[[12628,12628],"mapped",[4454]],[[12629,12629],"mapped",[4455]],[[12630,12630],"mapped",[4456]],[[12631,12631],"mapped",[4457]],[[12632,12632],"mapped",[4458]],[[12633,12633],"mapped",[4459]],[[12634,12634],"mapped",[4460]],[[12635,12635],"mapped",[4461]],[[12636,12636],"mapped",[4462]],[[12637,12637],"mapped",[4463]],[[12638,12638],"mapped",[4464]],[[12639,12639],"mapped",[4465]],[[12640,12640],"mapped",[4466]],[[12641,12641],"mapped",[4467]],[[12642,12642],"mapped",[4468]],[[12643,12643],"mapped",[4469]],[[12644,12644],"disallowed"],[[12645,12645],"mapped",[4372]],[[12646,12646],"mapped",[4373]],[[12647,12647],"mapped",[4551]],[[12648,12648],"mapped",[4552]],[[12649,12649],"mapped",[4556]],[[12650,12650],"mapped",[4558]],[[12651,12651],"mapped",[4563]],[[12652,12652],"mapped",[4567]],[[12653,12653],"mapped",[4569]],[[12654,12654],"mapped",[4380]],[[12655,12655],"mapped",[4573]],[[12656,12656],"mapped",[4575]],[[12657,12657],"mapped",[4381]],[[12658,12658],"mapped",[4382]],[[12659,12659],"mapped",[4384]],[[12660,12660],"mapped",[4386]],[[12661,12661],"mapped",[4387]],[[12662,12662],"mapped",[4391]],[[12663,12663],"mapped",[4393]],[[12664,12664],"mapped",[4395]],[[12665,12665],"mapped",[4396]],[[12666,12666],"mapped",[4397]],[[12667,12667],"mapped",[4398]],[[12668,12668],"mapped",[4399]],[[12669,12669],"mapped",[4402]],[[12670,12670],"mapped",[4406]],[[12671,12671],"mapped",[4416]],[[12672,12672],"mapped",[4423]],[[12673,12673],"mapped",[4428]],[[12674,12674],"mapped",[4593]],[[12675,12675],"mapped",[4594]],[[12676,12676],"mapped",[4439]],[[12677,12677],"mapped",[4440]],[[12678,12678],"mapped",[4441]],[[12679,12679],"mapped",[4484]],[[12680,12680],"mapped",[4485]],[[12681,12681],"mapped",[4488]],[[12682,12682],"mapped",[4497]],[[12683,12683],"mapped",[4498]],[[12684,12684],"mapped",[4500]],[[12685,12685],"mapped",[4510]],[[12686,12686],"mapped",[4513]],[[12687,12687],"disallowed"],[[12688,12689],"valid",[],"NV8"],[[12690,12690],"mapped",[19968]],[[12691,12691],"mapped",[20108]],[[12692,12692],"mapped",[19977]],[[12693,12693],"mapped",[22235]],[[12694,12694],"mapped",[19978]],[[12695,12695],"mapped",[20013]],[[12696,12696],"mapped",[19979]],[[12697,12697],"mapped",[30002]],[[12698,12698],"mapped",[20057]],[[12699,12699],"mapped",[19993]],[[12700,12700],"mapped",[19969]],[[12701,12701],"mapped",[22825]],[[12702,12702],"mapped",[22320]],[[12703,12703],"mapped",[20154]],[[12704,12727],"valid"],[[12728,12730],"valid"],[[12731,12735],"disallowed"],[[12736,12751],"valid",[],"NV8"],[[12752,12771],"valid",[],"NV8"],[[12772,12783],"disallowed"],[[12784,12799],"valid"],[[12800,12800],"disallowed_STD3_mapped",[40,4352,41]],[[12801,12801],"disallowed_STD3_mapped",[40,4354,41]],[[12802,12802],"disallowed_STD3_mapped",[40,4355,41]],[[12803,12803],"disallowed_STD3_mapped",[40,4357,41]],[[12804,12804],"disallowed_STD3_mapped",[40,4358,41]],[[12805,12805],"disallowed_STD3_mapped",[40,4359,41]],[[12806,12806],"disallowed_STD3_mapped",[40,4361,41]],[[12807,12807],"disallowed_STD3_mapped",[40,4363,41]],[[12808,12808],"disallowed_STD3_mapped",[40,4364,41]],[[12809,12809],"disallowed_STD3_mapped",[40,4366,41]],[[12810,12810],"disallowed_STD3_mapped",[40,4367,41]],[[12811,12811],"disallowed_STD3_mapped",[40,4368,41]],[[12812,12812],"disallowed_STD3_mapped",[40,4369,41]],[[12813,12813],"disallowed_STD3_mapped",[40,4370,41]],[[12814,12814],"disallowed_STD3_mapped",[40,44032,41]],[[12815,12815],"disallowed_STD3_mapped",[40,45208,41]],[[12816,12816],"disallowed_STD3_mapped",[40,45796,41]],[[12817,12817],"disallowed_STD3_mapped",[40,46972,41]],[[12818,12818],"disallowed_STD3_mapped",[40,47560,41]],[[12819,12819],"disallowed_STD3_mapped",[40,48148,41]],[[12820,12820],"disallowed_STD3_mapped",[40,49324,41]],[[12821,12821],"disallowed_STD3_mapped",[40,50500,41]],[[12822,12822],"disallowed_STD3_mapped",[40,51088,41]],[[12823,12823],"disallowed_STD3_mapped",[40,52264,41]],[[12824,12824],"disallowed_STD3_mapped",[40,52852,41]],[[12825,12825],"disallowed_STD3_mapped",[40,53440,41]],[[12826,12826],"disallowed_STD3_mapped",[40,54028,41]],[[12827,12827],"disallowed_STD3_mapped",[40,54616,41]],[[12828,12828],"disallowed_STD3_mapped",[40,51452,41]],[[12829,12829],"disallowed_STD3_mapped",[40,50724,51204,41]],[[12830,12830],"disallowed_STD3_mapped",[40,50724,54980,41]],[[12831,12831],"disallowed"],[[12832,12832],"disallowed_STD3_mapped",[40,19968,41]],[[12833,12833],"disallowed_STD3_mapped",[40,20108,41]],[[12834,12834],"disallowed_STD3_mapped",[40,19977,41]],[[12835,12835],"disallowed_STD3_mapped",[40,22235,41]],[[12836,12836],"disallowed_STD3_mapped",[40,20116,41]],[[12837,12837],"disallowed_STD3_mapped",[40,20845,41]],[[12838,12838],"disallowed_STD3_mapped",[40,19971,41]],[[12839,12839],"disallowed_STD3_mapped",[40,20843,41]],[[12840,12840],"disallowed_STD3_mapped",[40,20061,41]],[[12841,12841],"disallowed_STD3_mapped",[40,21313,41]],[[12842,12842],"disallowed_STD3_mapped",[40,26376,41]],[[12843,12843],"disallowed_STD3_mapped",[40,28779,41]],[[12844,12844],"disallowed_STD3_mapped",[40,27700,41]],[[12845,12845],"disallowed_STD3_mapped",[40,26408,41]],[[12846,12846],"disallowed_STD3_mapped",[40,37329,41]],[[12847,12847],"disallowed_STD3_mapped",[40,22303,41]],[[12848,12848],"disallowed_STD3_mapped",[40,26085,41]],[[12849,12849],"disallowed_STD3_mapped",[40,26666,41]],[[12850,12850],"disallowed_STD3_mapped",[40,26377,41]],[[12851,12851],"disallowed_STD3_mapped",[40,31038,41]],[[12852,12852],"disallowed_STD3_mapped",[40,21517,41]],[[12853,12853],"disallowed_STD3_mapped",[40,29305,41]],[[12854,12854],"disallowed_STD3_mapped",[40,36001,41]],[[12855,12855],"disallowed_STD3_mapped",[40,31069,41]],[[12856,12856],"disallowed_STD3_mapped",[40,21172,41]],[[12857,12857],"disallowed_STD3_mapped",[40,20195,41]],[[12858,12858],"disallowed_STD3_mapped",[40,21628,41]],[[12859,12859],"disallowed_STD3_mapped",[40,23398,41]],[[12860,12860],"disallowed_STD3_mapped",[40,30435,41]],[[12861,12861],"disallowed_STD3_mapped",[40,20225,41]],[[12862,12862],"disallowed_STD3_mapped",[40,36039,41]],[[12863,12863],"disallowed_STD3_mapped",[40,21332,41]],[[12864,12864],"disallowed_STD3_mapped",[40,31085,41]],[[12865,12865],"disallowed_STD3_mapped",[40,20241,41]],[[12866,12866],"disallowed_STD3_mapped",[40,33258,41]],[[12867,12867],"disallowed_STD3_mapped",[40,33267,41]],[[12868,12868],"mapped",[21839]],[[12869,12869],"mapped",[24188]],[[12870,12870],"mapped",[25991]],[[12871,12871],"mapped",[31631]],[[12872,12879],"valid",[],"NV8"],[[12880,12880],"mapped",[112,116,101]],[[12881,12881],"mapped",[50,49]],[[12882,12882],"mapped",[50,50]],[[12883,12883],"mapped",[50,51]],[[12884,12884],"mapped",[50,52]],[[12885,12885],"mapped",[50,53]],[[12886,12886],"mapped",[50,54]],[[12887,12887],"mapped",[50,55]],[[12888,12888],"mapped",[50,56]],[[12889,12889],"mapped",[50,57]],[[12890,12890],"mapped",[51,48]],[[12891,12891],"mapped",[51,49]],[[12892,12892],"mapped",[51,50]],[[12893,12893],"mapped",[51,51]],[[12894,12894],"mapped",[51,52]],[[12895,12895],"mapped",[51,53]],[[12896,12896],"mapped",[4352]],[[12897,12897],"mapped",[4354]],[[12898,12898],"mapped",[4355]],[[12899,12899],"mapped",[4357]],[[12900,12900],"mapped",[4358]],[[12901,12901],"mapped",[4359]],[[12902,12902],"mapped",[4361]],[[12903,12903],"mapped",[4363]],[[12904,12904],"mapped",[4364]],[[12905,12905],"mapped",[4366]],[[12906,12906],"mapped",[4367]],[[12907,12907],"mapped",[4368]],[[12908,12908],"mapped",[4369]],[[12909,12909],"mapped",[4370]],[[12910,12910],"mapped",[44032]],[[12911,12911],"mapped",[45208]],[[12912,12912],"mapped",[45796]],[[12913,12913],"mapped",[46972]],[[12914,12914],"mapped",[47560]],[[12915,12915],"mapped",[48148]],[[12916,12916],"mapped",[49324]],[[12917,12917],"mapped",[50500]],[[12918,12918],"mapped",[51088]],[[12919,12919],"mapped",[52264]],[[12920,12920],"mapped",[52852]],[[12921,12921],"mapped",[53440]],[[12922,12922],"mapped",[54028]],[[12923,12923],"mapped",[54616]],[[12924,12924],"mapped",[52280,44256]],[[12925,12925],"mapped",[51452,51032]],[[12926,12926],"mapped",[50864]],[[12927,12927],"valid",[],"NV8"],[[12928,12928],"mapped",[19968]],[[12929,12929],"mapped",[20108]],[[12930,12930],"mapped",[19977]],[[12931,12931],"mapped",[22235]],[[12932,12932],"mapped",[20116]],[[12933,12933],"mapped",[20845]],[[12934,12934],"mapped",[19971]],[[12935,12935],"mapped",[20843]],[[12936,12936],"mapped",[20061]],[[12937,12937],"mapped",[21313]],[[12938,12938],"mapped",[26376]],[[12939,12939],"mapped",[28779]],[[12940,12940],"mapped",[27700]],[[12941,12941],"mapped",[26408]],[[12942,12942],"mapped",[37329]],[[12943,12943],"mapped",[22303]],[[12944,12944],"mapped",[26085]],[[12945,12945],"mapped",[26666]],[[12946,12946],"mapped",[26377]],[[12947,12947],"mapped",[31038]],[[12948,12948],"mapped",[21517]],[[12949,12949],"mapped",[29305]],[[12950,12950],"mapped",[36001]],[[12951,12951],"mapped",[31069]],[[12952,12952],"mapped",[21172]],[[12953,12953],"mapped",[31192]],[[12954,12954],"mapped",[30007]],[[12955,12955],"mapped",[22899]],[[12956,12956],"mapped",[36969]],[[12957,12957],"mapped",[20778]],[[12958,12958],"mapped",[21360]],[[12959,12959],"mapped",[27880]],[[12960,12960],"mapped",[38917]],[[12961,12961],"mapped",[20241]],[[12962,12962],"mapped",[20889]],[[12963,12963],"mapped",[27491]],[[12964,12964],"mapped",[19978]],[[12965,12965],"mapped",[20013]],[[12966,12966],"mapped",[19979]],[[12967,12967],"mapped",[24038]],[[12968,12968],"mapped",[21491]],[[12969,12969],"mapped",[21307]],[[12970,12970],"mapped",[23447]],[[12971,12971],"mapped",[23398]],[[12972,12972],"mapped",[30435]],[[12973,12973],"mapped",[20225]],[[12974,12974],"mapped",[36039]],[[12975,12975],"mapped",[21332]],[[12976,12976],"mapped",[22812]],[[12977,12977],"mapped",[51,54]],[[12978,12978],"mapped",[51,55]],[[12979,12979],"mapped",[51,56]],[[12980,12980],"mapped",[51,57]],[[12981,12981],"mapped",[52,48]],[[12982,12982],"mapped",[52,49]],[[12983,12983],"mapped",[52,50]],[[12984,12984],"mapped",[52,51]],[[12985,12985],"mapped",[52,52]],[[12986,12986],"mapped",[52,53]],[[12987,12987],"mapped",[52,54]],[[12988,12988],"mapped",[52,55]],[[12989,12989],"mapped",[52,56]],[[12990,12990],"mapped",[52,57]],[[12991,12991],"mapped",[53,48]],[[12992,12992],"mapped",[49,26376]],[[12993,12993],"mapped",[50,26376]],[[12994,12994],"mapped",[51,26376]],[[12995,12995],"mapped",[52,26376]],[[12996,12996],"mapped",[53,26376]],[[12997,12997],"mapped",[54,26376]],[[12998,12998],"mapped",[55,26376]],[[12999,12999],"mapped",[56,26376]],[[13000,13000],"mapped",[57,26376]],[[13001,13001],"mapped",[49,48,26376]],[[13002,13002],"mapped",[49,49,26376]],[[13003,13003],"mapped",[49,50,26376]],[[13004,13004],"mapped",[104,103]],[[13005,13005],"mapped",[101,114,103]],[[13006,13006],"mapped",[101,118]],[[13007,13007],"mapped",[108,116,100]],[[13008,13008],"mapped",[12450]],[[13009,13009],"mapped",[12452]],[[13010,13010],"mapped",[12454]],[[13011,13011],"mapped",[12456]],[[13012,13012],"mapped",[12458]],[[13013,13013],"mapped",[12459]],[[13014,13014],"mapped",[12461]],[[13015,13015],"mapped",[12463]],[[13016,13016],"mapped",[12465]],[[13017,13017],"mapped",[12467]],[[13018,13018],"mapped",[12469]],[[13019,13019],"mapped",[12471]],[[13020,13020],"mapped",[12473]],[[13021,13021],"mapped",[12475]],[[13022,13022],"mapped",[12477]],[[13023,13023],"mapped",[12479]],[[13024,13024],"mapped",[12481]],[[13025,13025],"mapped",[12484]],[[13026,13026],"mapped",[12486]],[[13027,13027],"mapped",[12488]],[[13028,13028],"mapped",[12490]],[[13029,13029],"mapped",[12491]],[[13030,13030],"mapped",[12492]],[[13031,13031],"mapped",[12493]],[[13032,13032],"mapped",[12494]],[[13033,13033],"mapped",[12495]],[[13034,13034],"mapped",[12498]],[[13035,13035],"mapped",[12501]],[[13036,13036],"mapped",[12504]],[[13037,13037],"mapped",[12507]],[[13038,13038],"mapped",[12510]],[[13039,13039],"mapped",[12511]],[[13040,13040],"mapped",[12512]],[[13041,13041],"mapped",[12513]],[[13042,13042],"mapped",[12514]],[[13043,13043],"mapped",[12516]],[[13044,13044],"mapped",[12518]],[[13045,13045],"mapped",[12520]],[[13046,13046],"mapped",[12521]],[[13047,13047],"mapped",[12522]],[[13048,13048],"mapped",[12523]],[[13049,13049],"mapped",[12524]],[[13050,13050],"mapped",[12525]],[[13051,13051],"mapped",[12527]],[[13052,13052],"mapped",[12528]],[[13053,13053],"mapped",[12529]],[[13054,13054],"mapped",[12530]],[[13055,13055],"disallowed"],[[13056,13056],"mapped",[12450,12497,12540,12488]],[[13057,13057],"mapped",[12450,12523,12501,12449]],[[13058,13058],"mapped",[12450,12531,12506,12450]],[[13059,13059],"mapped",[12450,12540,12523]],[[13060,13060],"mapped",[12452,12491,12531,12464]],[[13061,13061],"mapped",[12452,12531,12481]],[[13062,13062],"mapped",[12454,12457,12531]],[[13063,13063],"mapped",[12456,12473,12463,12540,12489]],[[13064,13064],"mapped",[12456,12540,12459,12540]],[[13065,13065],"mapped",[12458,12531,12473]],[[13066,13066],"mapped",[12458,12540,12512]],[[13067,13067],"mapped",[12459,12452,12522]],[[13068,13068],"mapped",[12459,12521,12483,12488]],[[13069,13069],"mapped",[12459,12525,12522,12540]],[[13070,13070],"mapped",[12460,12525,12531]],[[13071,13071],"mapped",[12460,12531,12510]],[[13072,13072],"mapped",[12462,12460]],[[13073,13073],"mapped",[12462,12491,12540]],[[13074,13074],"mapped",[12461,12517,12522,12540]],[[13075,13075],"mapped",[12462,12523,12480,12540]],[[13076,13076],"mapped",[12461,12525]],[[13077,13077],"mapped",[12461,12525,12464,12521,12512]],[[13078,13078],"mapped",[12461,12525,12513,12540,12488,12523]],[[13079,13079],"mapped",[12461,12525,12527,12483,12488]],[[13080,13080],"mapped",[12464,12521,12512]],[[13081,13081],"mapped",[12464,12521,12512,12488,12531]],[[13082,13082],"mapped",[12463,12523,12476,12452,12525]],[[13083,13083],"mapped",[12463,12525,12540,12493]],[[13084,13084],"mapped",[12465,12540,12473]],[[13085,13085],"mapped",[12467,12523,12490]],[[13086,13086],"mapped",[12467,12540,12509]],[[13087,13087],"mapped",[12469,12452,12463,12523]],[[13088,13088],"mapped",[12469,12531,12481,12540,12512]],[[13089,13089],"mapped",[12471,12522,12531,12464]],[[13090,13090],"mapped",[12475,12531,12481]],[[13091,13091],"mapped",[12475,12531,12488]],[[13092,13092],"mapped",[12480,12540,12473]],[[13093,13093],"mapped",[12487,12471]],[[13094,13094],"mapped",[12489,12523]],[[13095,13095],"mapped",[12488,12531]],[[13096,13096],"mapped",[12490,12494]],[[13097,13097],"mapped",[12494,12483,12488]],[[13098,13098],"mapped",[12495,12452,12484]],[[13099,13099],"mapped",[12497,12540,12475,12531,12488]],[[13100,13100],"mapped",[12497,12540,12484]],[[13101,13101],"mapped",[12496,12540,12524,12523]],[[13102,13102],"mapped",[12500,12450,12473,12488,12523]],[[13103,13103],"mapped",[12500,12463,12523]],[[13104,13104],"mapped",[12500,12467]],[[13105,13105],"mapped",[12499,12523]],[[13106,13106],"mapped",[12501,12449,12521,12483,12489]],[[13107,13107],"mapped",[12501,12451,12540,12488]],[[13108,13108],"mapped",[12502,12483,12471,12455,12523]],[[13109,13109],"mapped",[12501,12521,12531]],[[13110,13110],"mapped",[12504,12463,12479,12540,12523]],[[13111,13111],"mapped",[12506,12477]],[[13112,13112],"mapped",[12506,12491,12498]],[[13113,13113],"mapped",[12504,12523,12484]],[[13114,13114],"mapped",[12506,12531,12473]],[[13115,13115],"mapped",[12506,12540,12472]],[[13116,13116],"mapped",[12505,12540,12479]],[[13117,13117],"mapped",[12509,12452,12531,12488]],[[13118,13118],"mapped",[12508,12523,12488]],[[13119,13119],"mapped",[12507,12531]],[[13120,13120],"mapped",[12509,12531,12489]],[[13121,13121],"mapped",[12507,12540,12523]],[[13122,13122],"mapped",[12507,12540,12531]],[[13123,13123],"mapped",[12510,12452,12463,12525]],[[13124,13124],"mapped",[12510,12452,12523]],[[13125,13125],"mapped",[12510,12483,12495]],[[13126,13126],"mapped",[12510,12523,12463]],[[13127,13127],"mapped",[12510,12531,12471,12519,12531]],[[13128,13128],"mapped",[12511,12463,12525,12531]],[[13129,13129],"mapped",[12511,12522]],[[13130,13130],"mapped",[12511,12522,12496,12540,12523]],[[13131,13131],"mapped",[12513,12460]],[[13132,13132],"mapped",[12513,12460,12488,12531]],[[13133,13133],"mapped",[12513,12540,12488,12523]],[[13134,13134],"mapped",[12516,12540,12489]],[[13135,13135],"mapped",[12516,12540,12523]],[[13136,13136],"mapped",[12518,12450,12531]],[[13137,13137],"mapped",[12522,12483,12488,12523]],[[13138,13138],"mapped",[12522,12521]],[[13139,13139],"mapped",[12523,12500,12540]],[[13140,13140],"mapped",[12523,12540,12502,12523]],[[13141,13141],"mapped",[12524,12512]],[[13142,13142],"mapped",[12524,12531,12488,12466,12531]],[[13143,13143],"mapped",[12527,12483,12488]],[[13144,13144],"mapped",[48,28857]],[[13145,13145],"mapped",[49,28857]],[[13146,13146],"mapped",[50,28857]],[[13147,13147],"mapped",[51,28857]],[[13148,13148],"mapped",[52,28857]],[[13149,13149],"mapped",[53,28857]],[[13150,13150],"mapped",[54,28857]],[[13151,13151],"mapped",[55,28857]],[[13152,13152],"mapped",[56,28857]],[[13153,13153],"mapped",[57,28857]],[[13154,13154],"mapped",[49,48,28857]],[[13155,13155],"mapped",[49,49,28857]],[[13156,13156],"mapped",[49,50,28857]],[[13157,13157],"mapped",[49,51,28857]],[[13158,13158],"mapped",[49,52,28857]],[[13159,13159],"mapped",[49,53,28857]],[[13160,13160],"mapped",[49,54,28857]],[[13161,13161],"mapped",[49,55,28857]],[[13162,13162],"mapped",[49,56,28857]],[[13163,13163],"mapped",[49,57,28857]],[[13164,13164],"mapped",[50,48,28857]],[[13165,13165],"mapped",[50,49,28857]],[[13166,13166],"mapped",[50,50,28857]],[[13167,13167],"mapped",[50,51,28857]],[[13168,13168],"mapped",[50,52,28857]],[[13169,13169],"mapped",[104,112,97]],[[13170,13170],"mapped",[100,97]],[[13171,13171],"mapped",[97,117]],[[13172,13172],"mapped",[98,97,114]],[[13173,13173],"mapped",[111,118]],[[13174,13174],"mapped",[112,99]],[[13175,13175],"mapped",[100,109]],[[13176,13176],"mapped",[100,109,50]],[[13177,13177],"mapped",[100,109,51]],[[13178,13178],"mapped",[105,117]],[[13179,13179],"mapped",[24179,25104]],[[13180,13180],"mapped",[26157,21644]],[[13181,13181],"mapped",[22823,27491]],[[13182,13182],"mapped",[26126,27835]],[[13183,13183],"mapped",[26666,24335,20250,31038]],[[13184,13184],"mapped",[112,97]],[[13185,13185],"mapped",[110,97]],[[13186,13186],"mapped",[956,97]],[[13187,13187],"mapped",[109,97]],[[13188,13188],"mapped",[107,97]],[[13189,13189],"mapped",[107,98]],[[13190,13190],"mapped",[109,98]],[[13191,13191],"mapped",[103,98]],[[13192,13192],"mapped",[99,97,108]],[[13193,13193],"mapped",[107,99,97,108]],[[13194,13194],"mapped",[112,102]],[[13195,13195],"mapped",[110,102]],[[13196,13196],"mapped",[956,102]],[[13197,13197],"mapped",[956,103]],[[13198,13198],"mapped",[109,103]],[[13199,13199],"mapped",[107,103]],[[13200,13200],"mapped",[104,122]],[[13201,13201],"mapped",[107,104,122]],[[13202,13202],"mapped",[109,104,122]],[[13203,13203],"mapped",[103,104,122]],[[13204,13204],"mapped",[116,104,122]],[[13205,13205],"mapped",[956,108]],[[13206,13206],"mapped",[109,108]],[[13207,13207],"mapped",[100,108]],[[13208,13208],"mapped",[107,108]],[[13209,13209],"mapped",[102,109]],[[13210,13210],"mapped",[110,109]],[[13211,13211],"mapped",[956,109]],[[13212,13212],"mapped",[109,109]],[[13213,13213],"mapped",[99,109]],[[13214,13214],"mapped",[107,109]],[[13215,13215],"mapped",[109,109,50]],[[13216,13216],"mapped",[99,109,50]],[[13217,13217],"mapped",[109,50]],[[13218,13218],"mapped",[107,109,50]],[[13219,13219],"mapped",[109,109,51]],[[13220,13220],"mapped",[99,109,51]],[[13221,13221],"mapped",[109,51]],[[13222,13222],"mapped",[107,109,51]],[[13223,13223],"mapped",[109,8725,115]],[[13224,13224],"mapped",[109,8725,115,50]],[[13225,13225],"mapped",[112,97]],[[13226,13226],"mapped",[107,112,97]],[[13227,13227],"mapped",[109,112,97]],[[13228,13228],"mapped",[103,112,97]],[[13229,13229],"mapped",[114,97,100]],[[13230,13230],"mapped",[114,97,100,8725,115]],[[13231,13231],"mapped",[114,97,100,8725,115,50]],[[13232,13232],"mapped",[112,115]],[[13233,13233],"mapped",[110,115]],[[13234,13234],"mapped",[956,115]],[[13235,13235],"mapped",[109,115]],[[13236,13236],"mapped",[112,118]],[[13237,13237],"mapped",[110,118]],[[13238,13238],"mapped",[956,118]],[[13239,13239],"mapped",[109,118]],[[13240,13240],"mapped",[107,118]],[[13241,13241],"mapped",[109,118]],[[13242,13242],"mapped",[112,119]],[[13243,13243],"mapped",[110,119]],[[13244,13244],"mapped",[956,119]],[[13245,13245],"mapped",[109,119]],[[13246,13246],"mapped",[107,119]],[[13247,13247],"mapped",[109,119]],[[13248,13248],"mapped",[107,969]],[[13249,13249],"mapped",[109,969]],[[13250,13250],"disallowed"],[[13251,13251],"mapped",[98,113]],[[13252,13252],"mapped",[99,99]],[[13253,13253],"mapped",[99,100]],[[13254,13254],"mapped",[99,8725,107,103]],[[13255,13255],"disallowed"],[[13256,13256],"mapped",[100,98]],[[13257,13257],"mapped",[103,121]],[[13258,13258],"mapped",[104,97]],[[13259,13259],"mapped",[104,112]],[[13260,13260],"mapped",[105,110]],[[13261,13261],"mapped",[107,107]],[[13262,13262],"mapped",[107,109]],[[13263,13263],"mapped",[107,116]],[[13264,13264],"mapped",[108,109]],[[13265,13265],"mapped",[108,110]],[[13266,13266],"mapped",[108,111,103]],[[13267,13267],"mapped",[108,120]],[[13268,13268],"mapped",[109,98]],[[13269,13269],"mapped",[109,105,108]],[[13270,13270],"mapped",[109,111,108]],[[13271,13271],"mapped",[112,104]],[[13272,13272],"disallowed"],[[13273,13273],"mapped",[112,112,109]],[[13274,13274],"mapped",[112,114]],[[13275,13275],"mapped",[115,114]],[[13276,13276],"mapped",[115,118]],[[13277,13277],"mapped",[119,98]],[[13278,13278],"mapped",[118,8725,109]],[[13279,13279],"mapped",[97,8725,109]],[[13280,13280],"mapped",[49,26085]],[[13281,13281],"mapped",[50,26085]],[[13282,13282],"mapped",[51,26085]],[[13283,13283],"mapped",[52,26085]],[[13284,13284],"mapped",[53,26085]],[[13285,13285],"mapped",[54,26085]],[[13286,13286],"mapped",[55,26085]],[[13287,13287],"mapped",[56,26085]],[[13288,13288],"mapped",[57,26085]],[[13289,13289],"mapped",[49,48,26085]],[[13290,13290],"mapped",[49,49,26085]],[[13291,13291],"mapped",[49,50,26085]],[[13292,13292],"mapped",[49,51,26085]],[[13293,13293],"mapped",[49,52,26085]],[[13294,13294],"mapped",[49,53,26085]],[[13295,13295],"mapped",[49,54,26085]],[[13296,13296],"mapped",[49,55,26085]],[[13297,13297],"mapped",[49,56,26085]],[[13298,13298],"mapped",[49,57,26085]],[[13299,13299],"mapped",[50,48,26085]],[[13300,13300],"mapped",[50,49,26085]],[[13301,13301],"mapped",[50,50,26085]],[[13302,13302],"mapped",[50,51,26085]],[[13303,13303],"mapped",[50,52,26085]],[[13304,13304],"mapped",[50,53,26085]],[[13305,13305],"mapped",[50,54,26085]],[[13306,13306],"mapped",[50,55,26085]],[[13307,13307],"mapped",[50,56,26085]],[[13308,13308],"mapped",[50,57,26085]],[[13309,13309],"mapped",[51,48,26085]],[[13310,13310],"mapped",[51,49,26085]],[[13311,13311],"mapped",[103,97,108]],[[13312,19893],"valid"],[[19894,19903],"disallowed"],[[19904,19967],"valid",[],"NV8"],[[19968,40869],"valid"],[[40870,40891],"valid"],[[40892,40899],"valid"],[[40900,40907],"valid"],[[40908,40908],"valid"],[[40909,40917],"valid"],[[40918,40959],"disallowed"],[[40960,42124],"valid"],[[42125,42127],"disallowed"],[[42128,42145],"valid",[],"NV8"],[[42146,42147],"valid",[],"NV8"],[[42148,42163],"valid",[],"NV8"],[[42164,42164],"valid",[],"NV8"],[[42165,42176],"valid",[],"NV8"],[[42177,42177],"valid",[],"NV8"],[[42178,42180],"valid",[],"NV8"],[[42181,42181],"valid",[],"NV8"],[[42182,42182],"valid",[],"NV8"],[[42183,42191],"disallowed"],[[42192,42237],"valid"],[[42238,42239],"valid",[],"NV8"],[[42240,42508],"valid"],[[42509,42511],"valid",[],"NV8"],[[42512,42539],"valid"],[[42540,42559],"disallowed"],[[42560,42560],"mapped",[42561]],[[42561,42561],"valid"],[[42562,42562],"mapped",[42563]],[[42563,42563],"valid"],[[42564,42564],"mapped",[42565]],[[42565,42565],"valid"],[[42566,42566],"mapped",[42567]],[[42567,42567],"valid"],[[42568,42568],"mapped",[42569]],[[42569,42569],"valid"],[[42570,42570],"mapped",[42571]],[[42571,42571],"valid"],[[42572,42572],"mapped",[42573]],[[42573,42573],"valid"],[[42574,42574],"mapped",[42575]],[[42575,42575],"valid"],[[42576,42576],"mapped",[42577]],[[42577,42577],"valid"],[[42578,42578],"mapped",[42579]],[[42579,42579],"valid"],[[42580,42580],"mapped",[42581]],[[42581,42581],"valid"],[[42582,42582],"mapped",[42583]],[[42583,42583],"valid"],[[42584,42584],"mapped",[42585]],[[42585,42585],"valid"],[[42586,42586],"mapped",[42587]],[[42587,42587],"valid"],[[42588,42588],"mapped",[42589]],[[42589,42589],"valid"],[[42590,42590],"mapped",[42591]],[[42591,42591],"valid"],[[42592,42592],"mapped",[42593]],[[42593,42593],"valid"],[[42594,42594],"mapped",[42595]],[[42595,42595],"valid"],[[42596,42596],"mapped",[42597]],[[42597,42597],"valid"],[[42598,42598],"mapped",[42599]],[[42599,42599],"valid"],[[42600,42600],"mapped",[42601]],[[42601,42601],"valid"],[[42602,42602],"mapped",[42603]],[[42603,42603],"valid"],[[42604,42604],"mapped",[42605]],[[42605,42607],"valid"],[[42608,42611],"valid",[],"NV8"],[[42612,42619],"valid"],[[42620,42621],"valid"],[[42622,42622],"valid",[],"NV8"],[[42623,42623],"valid"],[[42624,42624],"mapped",[42625]],[[42625,42625],"valid"],[[42626,42626],"mapped",[42627]],[[42627,42627],"valid"],[[42628,42628],"mapped",[42629]],[[42629,42629],"valid"],[[42630,42630],"mapped",[42631]],[[42631,42631],"valid"],[[42632,42632],"mapped",[42633]],[[42633,42633],"valid"],[[42634,42634],"mapped",[42635]],[[42635,42635],"valid"],[[42636,42636],"mapped",[42637]],[[42637,42637],"valid"],[[42638,42638],"mapped",[42639]],[[42639,42639],"valid"],[[42640,42640],"mapped",[42641]],[[42641,42641],"valid"],[[42642,42642],"mapped",[42643]],[[42643,42643],"valid"],[[42644,42644],"mapped",[42645]],[[42645,42645],"valid"],[[42646,42646],"mapped",[42647]],[[42647,42647],"valid"],[[42648,42648],"mapped",[42649]],[[42649,42649],"valid"],[[42650,42650],"mapped",[42651]],[[42651,42651],"valid"],[[42652,42652],"mapped",[1098]],[[42653,42653],"mapped",[1100]],[[42654,42654],"valid"],[[42655,42655],"valid"],[[42656,42725],"valid"],[[42726,42735],"valid",[],"NV8"],[[42736,42737],"valid"],[[42738,42743],"valid",[],"NV8"],[[42744,42751],"disallowed"],[[42752,42774],"valid",[],"NV8"],[[42775,42778],"valid"],[[42779,42783],"valid"],[[42784,42785],"valid",[],"NV8"],[[42786,42786],"mapped",[42787]],[[42787,42787],"valid"],[[42788,42788],"mapped",[42789]],[[42789,42789],"valid"],[[42790,42790],"mapped",[42791]],[[42791,42791],"valid"],[[42792,42792],"mapped",[42793]],[[42793,42793],"valid"],[[42794,42794],"mapped",[42795]],[[42795,42795],"valid"],[[42796,42796],"mapped",[42797]],[[42797,42797],"valid"],[[42798,42798],"mapped",[42799]],[[42799,42801],"valid"],[[42802,42802],"mapped",[42803]],[[42803,42803],"valid"],[[42804,42804],"mapped",[42805]],[[42805,42805],"valid"],[[42806,42806],"mapped",[42807]],[[42807,42807],"valid"],[[42808,42808],"mapped",[42809]],[[42809,42809],"valid"],[[42810,42810],"mapped",[42811]],[[42811,42811],"valid"],[[42812,42812],"mapped",[42813]],[[42813,42813],"valid"],[[42814,42814],"mapped",[42815]],[[42815,42815],"valid"],[[42816,42816],"mapped",[42817]],[[42817,42817],"valid"],[[42818,42818],"mapped",[42819]],[[42819,42819],"valid"],[[42820,42820],"mapped",[42821]],[[42821,42821],"valid"],[[42822,42822],"mapped",[42823]],[[42823,42823],"valid"],[[42824,42824],"mapped",[42825]],[[42825,42825],"valid"],[[42826,42826],"mapped",[42827]],[[42827,42827],"valid"],[[42828,42828],"mapped",[42829]],[[42829,42829],"valid"],[[42830,42830],"mapped",[42831]],[[42831,42831],"valid"],[[42832,42832],"mapped",[42833]],[[42833,42833],"valid"],[[42834,42834],"mapped",[42835]],[[42835,42835],"valid"],[[42836,42836],"mapped",[42837]],[[42837,42837],"valid"],[[42838,42838],"mapped",[42839]],[[42839,42839],"valid"],[[42840,42840],"mapped",[42841]],[[42841,42841],"valid"],[[42842,42842],"mapped",[42843]],[[42843,42843],"valid"],[[42844,42844],"mapped",[42845]],[[42845,42845],"valid"],[[42846,42846],"mapped",[42847]],[[42847,42847],"valid"],[[42848,42848],"mapped",[42849]],[[42849,42849],"valid"],[[42850,42850],"mapped",[42851]],[[42851,42851],"valid"],[[42852,42852],"mapped",[42853]],[[42853,42853],"valid"],[[42854,42854],"mapped",[42855]],[[42855,42855],"valid"],[[42856,42856],"mapped",[42857]],[[42857,42857],"valid"],[[42858,42858],"mapped",[42859]],[[42859,42859],"valid"],[[42860,42860],"mapped",[42861]],[[42861,42861],"valid"],[[42862,42862],"mapped",[42863]],[[42863,42863],"valid"],[[42864,42864],"mapped",[42863]],[[42865,42872],"valid"],[[42873,42873],"mapped",[42874]],[[42874,42874],"valid"],[[42875,42875],"mapped",[42876]],[[42876,42876],"valid"],[[42877,42877],"mapped",[7545]],[[42878,42878],"mapped",[42879]],[[42879,42879],"valid"],[[42880,42880],"mapped",[42881]],[[42881,42881],"valid"],[[42882,42882],"mapped",[42883]],[[42883,42883],"valid"],[[42884,42884],"mapped",[42885]],[[42885,42885],"valid"],[[42886,42886],"mapped",[42887]],[[42887,42888],"valid"],[[42889,42890],"valid",[],"NV8"],[[42891,42891],"mapped",[42892]],[[42892,42892],"valid"],[[42893,42893],"mapped",[613]],[[42894,42894],"valid"],[[42895,42895],"valid"],[[42896,42896],"mapped",[42897]],[[42897,42897],"valid"],[[42898,42898],"mapped",[42899]],[[42899,42899],"valid"],[[42900,42901],"valid"],[[42902,42902],"mapped",[42903]],[[42903,42903],"valid"],[[42904,42904],"mapped",[42905]],[[42905,42905],"valid"],[[42906,42906],"mapped",[42907]],[[42907,42907],"valid"],[[42908,42908],"mapped",[42909]],[[42909,42909],"valid"],[[42910,42910],"mapped",[42911]],[[42911,42911],"valid"],[[42912,42912],"mapped",[42913]],[[42913,42913],"valid"],[[42914,42914],"mapped",[42915]],[[42915,42915],"valid"],[[42916,42916],"mapped",[42917]],[[42917,42917],"valid"],[[42918,42918],"mapped",[42919]],[[42919,42919],"valid"],[[42920,42920],"mapped",[42921]],[[42921,42921],"valid"],[[42922,42922],"mapped",[614]],[[42923,42923],"mapped",[604]],[[42924,42924],"mapped",[609]],[[42925,42925],"mapped",[620]],[[42926,42927],"disallowed"],[[42928,42928],"mapped",[670]],[[42929,42929],"mapped",[647]],[[42930,42930],"mapped",[669]],[[42931,42931],"mapped",[43859]],[[42932,42932],"mapped",[42933]],[[42933,42933],"valid"],[[42934,42934],"mapped",[42935]],[[42935,42935],"valid"],[[42936,42998],"disallowed"],[[42999,42999],"valid"],[[43000,43000],"mapped",[295]],[[43001,43001],"mapped",[339]],[[43002,43002],"valid"],[[43003,43007],"valid"],[[43008,43047],"valid"],[[43048,43051],"valid",[],"NV8"],[[43052,43055],"disallowed"],[[43056,43065],"valid",[],"NV8"],[[43066,43071],"disallowed"],[[43072,43123],"valid"],[[43124,43127],"valid",[],"NV8"],[[43128,43135],"disallowed"],[[43136,43204],"valid"],[[43205,43213],"disallowed"],[[43214,43215],"valid",[],"NV8"],[[43216,43225],"valid"],[[43226,43231],"disallowed"],[[43232,43255],"valid"],[[43256,43258],"valid",[],"NV8"],[[43259,43259],"valid"],[[43260,43260],"valid",[],"NV8"],[[43261,43261],"valid"],[[43262,43263],"disallowed"],[[43264,43309],"valid"],[[43310,43311],"valid",[],"NV8"],[[43312,43347],"valid"],[[43348,43358],"disallowed"],[[43359,43359],"valid",[],"NV8"],[[43360,43388],"valid",[],"NV8"],[[43389,43391],"disallowed"],[[43392,43456],"valid"],[[43457,43469],"valid",[],"NV8"],[[43470,43470],"disallowed"],[[43471,43481],"valid"],[[43482,43485],"disallowed"],[[43486,43487],"valid",[],"NV8"],[[43488,43518],"valid"],[[43519,43519],"disallowed"],[[43520,43574],"valid"],[[43575,43583],"disallowed"],[[43584,43597],"valid"],[[43598,43599],"disallowed"],[[43600,43609],"valid"],[[43610,43611],"disallowed"],[[43612,43615],"valid",[],"NV8"],[[43616,43638],"valid"],[[43639,43641],"valid",[],"NV8"],[[43642,43643],"valid"],[[43644,43647],"valid"],[[43648,43714],"valid"],[[43715,43738],"disallowed"],[[43739,43741],"valid"],[[43742,43743],"valid",[],"NV8"],[[43744,43759],"valid"],[[43760,43761],"valid",[],"NV8"],[[43762,43766],"valid"],[[43767,43776],"disallowed"],[[43777,43782],"valid"],[[43783,43784],"disallowed"],[[43785,43790],"valid"],[[43791,43792],"disallowed"],[[43793,43798],"valid"],[[43799,43807],"disallowed"],[[43808,43814],"valid"],[[43815,43815],"disallowed"],[[43816,43822],"valid"],[[43823,43823],"disallowed"],[[43824,43866],"valid"],[[43867,43867],"valid",[],"NV8"],[[43868,43868],"mapped",[42791]],[[43869,43869],"mapped",[43831]],[[43870,43870],"mapped",[619]],[[43871,43871],"mapped",[43858]],[[43872,43875],"valid"],[[43876,43877],"valid"],[[43878,43887],"disallowed"],[[43888,43888],"mapped",[5024]],[[43889,43889],"mapped",[5025]],[[43890,43890],"mapped",[5026]],[[43891,43891],"mapped",[5027]],[[43892,43892],"mapped",[5028]],[[43893,43893],"mapped",[5029]],[[43894,43894],"mapped",[5030]],[[43895,43895],"mapped",[5031]],[[43896,43896],"mapped",[5032]],[[43897,43897],"mapped",[5033]],[[43898,43898],"mapped",[5034]],[[43899,43899],"mapped",[5035]],[[43900,43900],"mapped",[5036]],[[43901,43901],"mapped",[5037]],[[43902,43902],"mapped",[5038]],[[43903,43903],"mapped",[5039]],[[43904,43904],"mapped",[5040]],[[43905,43905],"mapped",[5041]],[[43906,43906],"mapped",[5042]],[[43907,43907],"mapped",[5043]],[[43908,43908],"mapped",[5044]],[[43909,43909],"mapped",[5045]],[[43910,43910],"mapped",[5046]],[[43911,43911],"mapped",[5047]],[[43912,43912],"mapped",[5048]],[[43913,43913],"mapped",[5049]],[[43914,43914],"mapped",[5050]],[[43915,43915],"mapped",[5051]],[[43916,43916],"mapped",[5052]],[[43917,43917],"mapped",[5053]],[[43918,43918],"mapped",[5054]],[[43919,43919],"mapped",[5055]],[[43920,43920],"mapped",[5056]],[[43921,43921],"mapped",[5057]],[[43922,43922],"mapped",[5058]],[[43923,43923],"mapped",[5059]],[[43924,43924],"mapped",[5060]],[[43925,43925],"mapped",[5061]],[[43926,43926],"mapped",[5062]],[[43927,43927],"mapped",[5063]],[[43928,43928],"mapped",[5064]],[[43929,43929],"mapped",[5065]],[[43930,43930],"mapped",[5066]],[[43931,43931],"mapped",[5067]],[[43932,43932],"mapped",[5068]],[[43933,43933],"mapped",[5069]],[[43934,43934],"mapped",[5070]],[[43935,43935],"mapped",[5071]],[[43936,43936],"mapped",[5072]],[[43937,43937],"mapped",[5073]],[[43938,43938],"mapped",[5074]],[[43939,43939],"mapped",[5075]],[[43940,43940],"mapped",[5076]],[[43941,43941],"mapped",[5077]],[[43942,43942],"mapped",[5078]],[[43943,43943],"mapped",[5079]],[[43944,43944],"mapped",[5080]],[[43945,43945],"mapped",[5081]],[[43946,43946],"mapped",[5082]],[[43947,43947],"mapped",[5083]],[[43948,43948],"mapped",[5084]],[[43949,43949],"mapped",[5085]],[[43950,43950],"mapped",[5086]],[[43951,43951],"mapped",[5087]],[[43952,43952],"mapped",[5088]],[[43953,43953],"mapped",[5089]],[[43954,43954],"mapped",[5090]],[[43955,43955],"mapped",[5091]],[[43956,43956],"mapped",[5092]],[[43957,43957],"mapped",[5093]],[[43958,43958],"mapped",[5094]],[[43959,43959],"mapped",[5095]],[[43960,43960],"mapped",[5096]],[[43961,43961],"mapped",[5097]],[[43962,43962],"mapped",[5098]],[[43963,43963],"mapped",[5099]],[[43964,43964],"mapped",[5100]],[[43965,43965],"mapped",[5101]],[[43966,43966],"mapped",[5102]],[[43967,43967],"mapped",[5103]],[[43968,44010],"valid"],[[44011,44011],"valid",[],"NV8"],[[44012,44013],"valid"],[[44014,44015],"disallowed"],[[44016,44025],"valid"],[[44026,44031],"disallowed"],[[44032,55203],"valid"],[[55204,55215],"disallowed"],[[55216,55238],"valid",[],"NV8"],[[55239,55242],"disallowed"],[[55243,55291],"valid",[],"NV8"],[[55292,55295],"disallowed"],[[55296,57343],"disallowed"],[[57344,63743],"disallowed"],[[63744,63744],"mapped",[35912]],[[63745,63745],"mapped",[26356]],[[63746,63746],"mapped",[36554]],[[63747,63747],"mapped",[36040]],[[63748,63748],"mapped",[28369]],[[63749,63749],"mapped",[20018]],[[63750,63750],"mapped",[21477]],[[63751,63752],"mapped",[40860]],[[63753,63753],"mapped",[22865]],[[63754,63754],"mapped",[37329]],[[63755,63755],"mapped",[21895]],[[63756,63756],"mapped",[22856]],[[63757,63757],"mapped",[25078]],[[63758,63758],"mapped",[30313]],[[63759,63759],"mapped",[32645]],[[63760,63760],"mapped",[34367]],[[63761,63761],"mapped",[34746]],[[63762,63762],"mapped",[35064]],[[63763,63763],"mapped",[37007]],[[63764,63764],"mapped",[27138]],[[63765,63765],"mapped",[27931]],[[63766,63766],"mapped",[28889]],[[63767,63767],"mapped",[29662]],[[63768,63768],"mapped",[33853]],[[63769,63769],"mapped",[37226]],[[63770,63770],"mapped",[39409]],[[63771,63771],"mapped",[20098]],[[63772,63772],"mapped",[21365]],[[63773,63773],"mapped",[27396]],[[63774,63774],"mapped",[29211]],[[63775,63775],"mapped",[34349]],[[63776,63776],"mapped",[40478]],[[63777,63777],"mapped",[23888]],[[63778,63778],"mapped",[28651]],[[63779,63779],"mapped",[34253]],[[63780,63780],"mapped",[35172]],[[63781,63781],"mapped",[25289]],[[63782,63782],"mapped",[33240]],[[63783,63783],"mapped",[34847]],[[63784,63784],"mapped",[24266]],[[63785,63785],"mapped",[26391]],[[63786,63786],"mapped",[28010]],[[63787,63787],"mapped",[29436]],[[63788,63788],"mapped",[37070]],[[63789,63789],"mapped",[20358]],[[63790,63790],"mapped",[20919]],[[63791,63791],"mapped",[21214]],[[63792,63792],"mapped",[25796]],[[63793,63793],"mapped",[27347]],[[63794,63794],"mapped",[29200]],[[63795,63795],"mapped",[30439]],[[63796,63796],"mapped",[32769]],[[63797,63797],"mapped",[34310]],[[63798,63798],"mapped",[34396]],[[63799,63799],"mapped",[36335]],[[63800,63800],"mapped",[38706]],[[63801,63801],"mapped",[39791]],[[63802,63802],"mapped",[40442]],[[63803,63803],"mapped",[30860]],[[63804,63804],"mapped",[31103]],[[63805,63805],"mapped",[32160]],[[63806,63806],"mapped",[33737]],[[63807,63807],"mapped",[37636]],[[63808,63808],"mapped",[40575]],[[63809,63809],"mapped",[35542]],[[63810,63810],"mapped",[22751]],[[63811,63811],"mapped",[24324]],[[63812,63812],"mapped",[31840]],[[63813,63813],"mapped",[32894]],[[63814,63814],"mapped",[29282]],[[63815,63815],"mapped",[30922]],[[63816,63816],"mapped",[36034]],[[63817,63817],"mapped",[38647]],[[63818,63818],"mapped",[22744]],[[63819,63819],"mapped",[23650]],[[63820,63820],"mapped",[27155]],[[63821,63821],"mapped",[28122]],[[63822,63822],"mapped",[28431]],[[63823,63823],"mapped",[32047]],[[63824,63824],"mapped",[32311]],[[63825,63825],"mapped",[38475]],[[63826,63826],"mapped",[21202]],[[63827,63827],"mapped",[32907]],[[63828,63828],"mapped",[20956]],[[63829,63829],"mapped",[20940]],[[63830,63830],"mapped",[31260]],[[63831,63831],"mapped",[32190]],[[63832,63832],"mapped",[33777]],[[63833,63833],"mapped",[38517]],[[63834,63834],"mapped",[35712]],[[63835,63835],"mapped",[25295]],[[63836,63836],"mapped",[27138]],[[63837,63837],"mapped",[35582]],[[63838,63838],"mapped",[20025]],[[63839,63839],"mapped",[23527]],[[63840,63840],"mapped",[24594]],[[63841,63841],"mapped",[29575]],[[63842,63842],"mapped",[30064]],[[63843,63843],"mapped",[21271]],[[63844,63844],"mapped",[30971]],[[63845,63845],"mapped",[20415]],[[63846,63846],"mapped",[24489]],[[63847,63847],"mapped",[19981]],[[63848,63848],"mapped",[27852]],[[63849,63849],"mapped",[25976]],[[63850,63850],"mapped",[32034]],[[63851,63851],"mapped",[21443]],[[63852,63852],"mapped",[22622]],[[63853,63853],"mapped",[30465]],[[63854,63854],"mapped",[33865]],[[63855,63855],"mapped",[35498]],[[63856,63856],"mapped",[27578]],[[63857,63857],"mapped",[36784]],[[63858,63858],"mapped",[27784]],[[63859,63859],"mapped",[25342]],[[63860,63860],"mapped",[33509]],[[63861,63861],"mapped",[25504]],[[63862,63862],"mapped",[30053]],[[63863,63863],"mapped",[20142]],[[63864,63864],"mapped",[20841]],[[63865,63865],"mapped",[20937]],[[63866,63866],"mapped",[26753]],[[63867,63867],"mapped",[31975]],[[63868,63868],"mapped",[33391]],[[63869,63869],"mapped",[35538]],[[63870,63870],"mapped",[37327]],[[63871,63871],"mapped",[21237]],[[63872,63872],"mapped",[21570]],[[63873,63873],"mapped",[22899]],[[63874,63874],"mapped",[24300]],[[63875,63875],"mapped",[26053]],[[63876,63876],"mapped",[28670]],[[63877,63877],"mapped",[31018]],[[63878,63878],"mapped",[38317]],[[63879,63879],"mapped",[39530]],[[63880,63880],"mapped",[40599]],[[63881,63881],"mapped",[40654]],[[63882,63882],"mapped",[21147]],[[63883,63883],"mapped",[26310]],[[63884,63884],"mapped",[27511]],[[63885,63885],"mapped",[36706]],[[63886,63886],"mapped",[24180]],[[63887,63887],"mapped",[24976]],[[63888,63888],"mapped",[25088]],[[63889,63889],"mapped",[25754]],[[63890,63890],"mapped",[28451]],[[63891,63891],"mapped",[29001]],[[63892,63892],"mapped",[29833]],[[63893,63893],"mapped",[31178]],[[63894,63894],"mapped",[32244]],[[63895,63895],"mapped",[32879]],[[63896,63896],"mapped",[36646]],[[63897,63897],"mapped",[34030]],[[63898,63898],"mapped",[36899]],[[63899,63899],"mapped",[37706]],[[63900,63900],"mapped",[21015]],[[63901,63901],"mapped",[21155]],[[63902,63902],"mapped",[21693]],[[63903,63903],"mapped",[28872]],[[63904,63904],"mapped",[35010]],[[63905,63905],"mapped",[35498]],[[63906,63906],"mapped",[24265]],[[63907,63907],"mapped",[24565]],[[63908,63908],"mapped",[25467]],[[63909,63909],"mapped",[27566]],[[63910,63910],"mapped",[31806]],[[63911,63911],"mapped",[29557]],[[63912,63912],"mapped",[20196]],[[63913,63913],"mapped",[22265]],[[63914,63914],"mapped",[23527]],[[63915,63915],"mapped",[23994]],[[63916,63916],"mapped",[24604]],[[63917,63917],"mapped",[29618]],[[63918,63918],"mapped",[29801]],[[63919,63919],"mapped",[32666]],[[63920,63920],"mapped",[32838]],[[63921,63921],"mapped",[37428]],[[63922,63922],"mapped",[38646]],[[63923,63923],"mapped",[38728]],[[63924,63924],"mapped",[38936]],[[63925,63925],"mapped",[20363]],[[63926,63926],"mapped",[31150]],[[63927,63927],"mapped",[37300]],[[63928,63928],"mapped",[38584]],[[63929,63929],"mapped",[24801]],[[63930,63930],"mapped",[20102]],[[63931,63931],"mapped",[20698]],[[63932,63932],"mapped",[23534]],[[63933,63933],"mapped",[23615]],[[63934,63934],"mapped",[26009]],[[63935,63935],"mapped",[27138]],[[63936,63936],"mapped",[29134]],[[63937,63937],"mapped",[30274]],[[63938,63938],"mapped",[34044]],[[63939,63939],"mapped",[36988]],[[63940,63940],"mapped",[40845]],[[63941,63941],"mapped",[26248]],[[63942,63942],"mapped",[38446]],[[63943,63943],"mapped",[21129]],[[63944,63944],"mapped",[26491]],[[63945,63945],"mapped",[26611]],[[63946,63946],"mapped",[27969]],[[63947,63947],"mapped",[28316]],[[63948,63948],"mapped",[29705]],[[63949,63949],"mapped",[30041]],[[63950,63950],"mapped",[30827]],[[63951,63951],"mapped",[32016]],[[63952,63952],"mapped",[39006]],[[63953,63953],"mapped",[20845]],[[63954,63954],"mapped",[25134]],[[63955,63955],"mapped",[38520]],[[63956,63956],"mapped",[20523]],[[63957,63957],"mapped",[23833]],[[63958,63958],"mapped",[28138]],[[63959,63959],"mapped",[36650]],[[63960,63960],"mapped",[24459]],[[63961,63961],"mapped",[24900]],[[63962,63962],"mapped",[26647]],[[63963,63963],"mapped",[29575]],[[63964,63964],"mapped",[38534]],[[63965,63965],"mapped",[21033]],[[63966,63966],"mapped",[21519]],[[63967,63967],"mapped",[23653]],[[63968,63968],"mapped",[26131]],[[63969,63969],"mapped",[26446]],[[63970,63970],"mapped",[26792]],[[63971,63971],"mapped",[27877]],[[63972,63972],"mapped",[29702]],[[63973,63973],"mapped",[30178]],[[63974,63974],"mapped",[32633]],[[63975,63975],"mapped",[35023]],[[63976,63976],"mapped",[35041]],[[63977,63977],"mapped",[37324]],[[63978,63978],"mapped",[38626]],[[63979,63979],"mapped",[21311]],[[63980,63980],"mapped",[28346]],[[63981,63981],"mapped",[21533]],[[63982,63982],"mapped",[29136]],[[63983,63983],"mapped",[29848]],[[63984,63984],"mapped",[34298]],[[63985,63985],"mapped",[38563]],[[63986,63986],"mapped",[40023]],[[63987,63987],"mapped",[40607]],[[63988,63988],"mapped",[26519]],[[63989,63989],"mapped",[28107]],[[63990,63990],"mapped",[33256]],[[63991,63991],"mapped",[31435]],[[63992,63992],"mapped",[31520]],[[63993,63993],"mapped",[31890]],[[63994,63994],"mapped",[29376]],[[63995,63995],"mapped",[28825]],[[63996,63996],"mapped",[35672]],[[63997,63997],"mapped",[20160]],[[63998,63998],"mapped",[33590]],[[63999,63999],"mapped",[21050]],[[64000,64000],"mapped",[20999]],[[64001,64001],"mapped",[24230]],[[64002,64002],"mapped",[25299]],[[64003,64003],"mapped",[31958]],[[64004,64004],"mapped",[23429]],[[64005,64005],"mapped",[27934]],[[64006,64006],"mapped",[26292]],[[64007,64007],"mapped",[36667]],[[64008,64008],"mapped",[34892]],[[64009,64009],"mapped",[38477]],[[64010,64010],"mapped",[35211]],[[64011,64011],"mapped",[24275]],[[64012,64012],"mapped",[20800]],[[64013,64013],"mapped",[21952]],[[64014,64015],"valid"],[[64016,64016],"mapped",[22618]],[[64017,64017],"valid"],[[64018,64018],"mapped",[26228]],[[64019,64020],"valid"],[[64021,64021],"mapped",[20958]],[[64022,64022],"mapped",[29482]],[[64023,64023],"mapped",[30410]],[[64024,64024],"mapped",[31036]],[[64025,64025],"mapped",[31070]],[[64026,64026],"mapped",[31077]],[[64027,64027],"mapped",[31119]],[[64028,64028],"mapped",[38742]],[[64029,64029],"mapped",[31934]],[[64030,64030],"mapped",[32701]],[[64031,64031],"valid"],[[64032,64032],"mapped",[34322]],[[64033,64033],"valid"],[[64034,64034],"mapped",[35576]],[[64035,64036],"valid"],[[64037,64037],"mapped",[36920]],[[64038,64038],"mapped",[37117]],[[64039,64041],"valid"],[[64042,64042],"mapped",[39151]],[[64043,64043],"mapped",[39164]],[[64044,64044],"mapped",[39208]],[[64045,64045],"mapped",[40372]],[[64046,64046],"mapped",[37086]],[[64047,64047],"mapped",[38583]],[[64048,64048],"mapped",[20398]],[[64049,64049],"mapped",[20711]],[[64050,64050],"mapped",[20813]],[[64051,64051],"mapped",[21193]],[[64052,64052],"mapped",[21220]],[[64053,64053],"mapped",[21329]],[[64054,64054],"mapped",[21917]],[[64055,64055],"mapped",[22022]],[[64056,64056],"mapped",[22120]],[[64057,64057],"mapped",[22592]],[[64058,64058],"mapped",[22696]],[[64059,64059],"mapped",[23652]],[[64060,64060],"mapped",[23662]],[[64061,64061],"mapped",[24724]],[[64062,64062],"mapped",[24936]],[[64063,64063],"mapped",[24974]],[[64064,64064],"mapped",[25074]],[[64065,64065],"mapped",[25935]],[[64066,64066],"mapped",[26082]],[[64067,64067],"mapped",[26257]],[[64068,64068],"mapped",[26757]],[[64069,64069],"mapped",[28023]],[[64070,64070],"mapped",[28186]],[[64071,64071],"mapped",[28450]],[[64072,64072],"mapped",[29038]],[[64073,64073],"mapped",[29227]],[[64074,64074],"mapped",[29730]],[[64075,64075],"mapped",[30865]],[[64076,64076],"mapped",[31038]],[[64077,64077],"mapped",[31049]],[[64078,64078],"mapped",[31048]],[[64079,64079],"mapped",[31056]],[[64080,64080],"mapped",[31062]],[[64081,64081],"mapped",[31069]],[[64082,64082],"mapped",[31117]],[[64083,64083],"mapped",[31118]],[[64084,64084],"mapped",[31296]],[[64085,64085],"mapped",[31361]],[[64086,64086],"mapped",[31680]],[[64087,64087],"mapped",[32244]],[[64088,64088],"mapped",[32265]],[[64089,64089],"mapped",[32321]],[[64090,64090],"mapped",[32626]],[[64091,64091],"mapped",[32773]],[[64092,64092],"mapped",[33261]],[[64093,64094],"mapped",[33401]],[[64095,64095],"mapped",[33879]],[[64096,64096],"mapped",[35088]],[[64097,64097],"mapped",[35222]],[[64098,64098],"mapped",[35585]],[[64099,64099],"mapped",[35641]],[[64100,64100],"mapped",[36051]],[[64101,64101],"mapped",[36104]],[[64102,64102],"mapped",[36790]],[[64103,64103],"mapped",[36920]],[[64104,64104],"mapped",[38627]],[[64105,64105],"mapped",[38911]],[[64106,64106],"mapped",[38971]],[[64107,64107],"mapped",[24693]],[[64108,64108],"mapped",[148206]],[[64109,64109],"mapped",[33304]],[[64110,64111],"disallowed"],[[64112,64112],"mapped",[20006]],[[64113,64113],"mapped",[20917]],[[64114,64114],"mapped",[20840]],[[64115,64115],"mapped",[20352]],[[64116,64116],"mapped",[20805]],[[64117,64117],"mapped",[20864]],[[64118,64118],"mapped",[21191]],[[64119,64119],"mapped",[21242]],[[64120,64120],"mapped",[21917]],[[64121,64121],"mapped",[21845]],[[64122,64122],"mapped",[21913]],[[64123,64123],"mapped",[21986]],[[64124,64124],"mapped",[22618]],[[64125,64125],"mapped",[22707]],[[64126,64126],"mapped",[22852]],[[64127,64127],"mapped",[22868]],[[64128,64128],"mapped",[23138]],[[64129,64129],"mapped",[23336]],[[64130,64130],"mapped",[24274]],[[64131,64131],"mapped",[24281]],[[64132,64132],"mapped",[24425]],[[64133,64133],"mapped",[24493]],[[64134,64134],"mapped",[24792]],[[64135,64135],"mapped",[24910]],[[64136,64136],"mapped",[24840]],[[64137,64137],"mapped",[24974]],[[64138,64138],"mapped",[24928]],[[64139,64139],"mapped",[25074]],[[64140,64140],"mapped",[25140]],[[64141,64141],"mapped",[25540]],[[64142,64142],"mapped",[25628]],[[64143,64143],"mapped",[25682]],[[64144,64144],"mapped",[25942]],[[64145,64145],"mapped",[26228]],[[64146,64146],"mapped",[26391]],[[64147,64147],"mapped",[26395]],[[64148,64148],"mapped",[26454]],[[64149,64149],"mapped",[27513]],[[64150,64150],"mapped",[27578]],[[64151,64151],"mapped",[27969]],[[64152,64152],"mapped",[28379]],[[64153,64153],"mapped",[28363]],[[64154,64154],"mapped",[28450]],[[64155,64155],"mapped",[28702]],[[64156,64156],"mapped",[29038]],[[64157,64157],"mapped",[30631]],[[64158,64158],"mapped",[29237]],[[64159,64159],"mapped",[29359]],[[64160,64160],"mapped",[29482]],[[64161,64161],"mapped",[29809]],[[64162,64162],"mapped",[29958]],[[64163,64163],"mapped",[30011]],[[64164,64164],"mapped",[30237]],[[64165,64165],"mapped",[30239]],[[64166,64166],"mapped",[30410]],[[64167,64167],"mapped",[30427]],[[64168,64168],"mapped",[30452]],[[64169,64169],"mapped",[30538]],[[64170,64170],"mapped",[30528]],[[64171,64171],"mapped",[30924]],[[64172,64172],"mapped",[31409]],[[64173,64173],"mapped",[31680]],[[64174,64174],"mapped",[31867]],[[64175,64175],"mapped",[32091]],[[64176,64176],"mapped",[32244]],[[64177,64177],"mapped",[32574]],[[64178,64178],"mapped",[32773]],[[64179,64179],"mapped",[33618]],[[64180,64180],"mapped",[33775]],[[64181,64181],"mapped",[34681]],[[64182,64182],"mapped",[35137]],[[64183,64183],"mapped",[35206]],[[64184,64184],"mapped",[35222]],[[64185,64185],"mapped",[35519]],[[64186,64186],"mapped",[35576]],[[64187,64187],"mapped",[35531]],[[64188,64188],"mapped",[35585]],[[64189,64189],"mapped",[35582]],[[64190,64190],"mapped",[35565]],[[64191,64191],"mapped",[35641]],[[64192,64192],"mapped",[35722]],[[64193,64193],"mapped",[36104]],[[64194,64194],"mapped",[36664]],[[64195,64195],"mapped",[36978]],[[64196,64196],"mapped",[37273]],[[64197,64197],"mapped",[37494]],[[64198,64198],"mapped",[38524]],[[64199,64199],"mapped",[38627]],[[64200,64200],"mapped",[38742]],[[64201,64201],"mapped",[38875]],[[64202,64202],"mapped",[38911]],[[64203,64203],"mapped",[38923]],[[64204,64204],"mapped",[38971]],[[64205,64205],"mapped",[39698]],[[64206,64206],"mapped",[40860]],[[64207,64207],"mapped",[141386]],[[64208,64208],"mapped",[141380]],[[64209,64209],"mapped",[144341]],[[64210,64210],"mapped",[15261]],[[64211,64211],"mapped",[16408]],[[64212,64212],"mapped",[16441]],[[64213,64213],"mapped",[152137]],[[64214,64214],"mapped",[154832]],[[64215,64215],"mapped",[163539]],[[64216,64216],"mapped",[40771]],[[64217,64217],"mapped",[40846]],[[64218,64255],"disallowed"],[[64256,64256],"mapped",[102,102]],[[64257,64257],"mapped",[102,105]],[[64258,64258],"mapped",[102,108]],[[64259,64259],"mapped",[102,102,105]],[[64260,64260],"mapped",[102,102,108]],[[64261,64262],"mapped",[115,116]],[[64263,64274],"disallowed"],[[64275,64275],"mapped",[1396,1398]],[[64276,64276],"mapped",[1396,1381]],[[64277,64277],"mapped",[1396,1387]],[[64278,64278],"mapped",[1406,1398]],[[64279,64279],"mapped",[1396,1389]],[[64280,64284],"disallowed"],[[64285,64285],"mapped",[1497,1460]],[[64286,64286],"valid"],[[64287,64287],"mapped",[1522,1463]],[[64288,64288],"mapped",[1506]],[[64289,64289],"mapped",[1488]],[[64290,64290],"mapped",[1491]],[[64291,64291],"mapped",[1492]],[[64292,64292],"mapped",[1499]],[[64293,64293],"mapped",[1500]],[[64294,64294],"mapped",[1501]],[[64295,64295],"mapped",[1512]],[[64296,64296],"mapped",[1514]],[[64297,64297],"disallowed_STD3_mapped",[43]],[[64298,64298],"mapped",[1513,1473]],[[64299,64299],"mapped",[1513,1474]],[[64300,64300],"mapped",[1513,1468,1473]],[[64301,64301],"mapped",[1513,1468,1474]],[[64302,64302],"mapped",[1488,1463]],[[64303,64303],"mapped",[1488,1464]],[[64304,64304],"mapped",[1488,1468]],[[64305,64305],"mapped",[1489,1468]],[[64306,64306],"mapped",[1490,1468]],[[64307,64307],"mapped",[1491,1468]],[[64308,64308],"mapped",[1492,1468]],[[64309,64309],"mapped",[1493,1468]],[[64310,64310],"mapped",[1494,1468]],[[64311,64311],"disallowed"],[[64312,64312],"mapped",[1496,1468]],[[64313,64313],"mapped",[1497,1468]],[[64314,64314],"mapped",[1498,1468]],[[64315,64315],"mapped",[1499,1468]],[[64316,64316],"mapped",[1500,1468]],[[64317,64317],"disallowed"],[[64318,64318],"mapped",[1502,1468]],[[64319,64319],"disallowed"],[[64320,64320],"mapped",[1504,1468]],[[64321,64321],"mapped",[1505,1468]],[[64322,64322],"disallowed"],[[64323,64323],"mapped",[1507,1468]],[[64324,64324],"mapped",[1508,1468]],[[64325,64325],"disallowed"],[[64326,64326],"mapped",[1510,1468]],[[64327,64327],"mapped",[1511,1468]],[[64328,64328],"mapped",[1512,1468]],[[64329,64329],"mapped",[1513,1468]],[[64330,64330],"mapped",[1514,1468]],[[64331,64331],"mapped",[1493,1465]],[[64332,64332],"mapped",[1489,1471]],[[64333,64333],"mapped",[1499,1471]],[[64334,64334],"mapped",[1508,1471]],[[64335,64335],"mapped",[1488,1500]],[[64336,64337],"mapped",[1649]],[[64338,64341],"mapped",[1659]],[[64342,64345],"mapped",[1662]],[[64346,64349],"mapped",[1664]],[[64350,64353],"mapped",[1658]],[[64354,64357],"mapped",[1663]],[[64358,64361],"mapped",[1657]],[[64362,64365],"mapped",[1700]],[[64366,64369],"mapped",[1702]],[[64370,64373],"mapped",[1668]],[[64374,64377],"mapped",[1667]],[[64378,64381],"mapped",[1670]],[[64382,64385],"mapped",[1671]],[[64386,64387],"mapped",[1677]],[[64388,64389],"mapped",[1676]],[[64390,64391],"mapped",[1678]],[[64392,64393],"mapped",[1672]],[[64394,64395],"mapped",[1688]],[[64396,64397],"mapped",[1681]],[[64398,64401],"mapped",[1705]],[[64402,64405],"mapped",[1711]],[[64406,64409],"mapped",[1715]],[[64410,64413],"mapped",[1713]],[[64414,64415],"mapped",[1722]],[[64416,64419],"mapped",[1723]],[[64420,64421],"mapped",[1728]],[[64422,64425],"mapped",[1729]],[[64426,64429],"mapped",[1726]],[[64430,64431],"mapped",[1746]],[[64432,64433],"mapped",[1747]],[[64434,64449],"valid",[],"NV8"],[[64450,64466],"disallowed"],[[64467,64470],"mapped",[1709]],[[64471,64472],"mapped",[1735]],[[64473,64474],"mapped",[1734]],[[64475,64476],"mapped",[1736]],[[64477,64477],"mapped",[1735,1652]],[[64478,64479],"mapped",[1739]],[[64480,64481],"mapped",[1733]],[[64482,64483],"mapped",[1737]],[[64484,64487],"mapped",[1744]],[[64488,64489],"mapped",[1609]],[[64490,64491],"mapped",[1574,1575]],[[64492,64493],"mapped",[1574,1749]],[[64494,64495],"mapped",[1574,1608]],[[64496,64497],"mapped",[1574,1735]],[[64498,64499],"mapped",[1574,1734]],[[64500,64501],"mapped",[1574,1736]],[[64502,64504],"mapped",[1574,1744]],[[64505,64507],"mapped",[1574,1609]],[[64508,64511],"mapped",[1740]],[[64512,64512],"mapped",[1574,1580]],[[64513,64513],"mapped",[1574,1581]],[[64514,64514],"mapped",[1574,1605]],[[64515,64515],"mapped",[1574,1609]],[[64516,64516],"mapped",[1574,1610]],[[64517,64517],"mapped",[1576,1580]],[[64518,64518],"mapped",[1576,1581]],[[64519,64519],"mapped",[1576,1582]],[[64520,64520],"mapped",[1576,1605]],[[64521,64521],"mapped",[1576,1609]],[[64522,64522],"mapped",[1576,1610]],[[64523,64523],"mapped",[1578,1580]],[[64524,64524],"mapped",[1578,1581]],[[64525,64525],"mapped",[1578,1582]],[[64526,64526],"mapped",[1578,1605]],[[64527,64527],"mapped",[1578,1609]],[[64528,64528],"mapped",[1578,1610]],[[64529,64529],"mapped",[1579,1580]],[[64530,64530],"mapped",[1579,1605]],[[64531,64531],"mapped",[1579,1609]],[[64532,64532],"mapped",[1579,1610]],[[64533,64533],"mapped",[1580,1581]],[[64534,64534],"mapped",[1580,1605]],[[64535,64535],"mapped",[1581,1580]],[[64536,64536],"mapped",[1581,1605]],[[64537,64537],"mapped",[1582,1580]],[[64538,64538],"mapped",[1582,1581]],[[64539,64539],"mapped",[1582,1605]],[[64540,64540],"mapped",[1587,1580]],[[64541,64541],"mapped",[1587,1581]],[[64542,64542],"mapped",[1587,1582]],[[64543,64543],"mapped",[1587,1605]],[[64544,64544],"mapped",[1589,1581]],[[64545,64545],"mapped",[1589,1605]],[[64546,64546],"mapped",[1590,1580]],[[64547,64547],"mapped",[1590,1581]],[[64548,64548],"mapped",[1590,1582]],[[64549,64549],"mapped",[1590,1605]],[[64550,64550],"mapped",[1591,1581]],[[64551,64551],"mapped",[1591,1605]],[[64552,64552],"mapped",[1592,1605]],[[64553,64553],"mapped",[1593,1580]],[[64554,64554],"mapped",[1593,1605]],[[64555,64555],"mapped",[1594,1580]],[[64556,64556],"mapped",[1594,1605]],[[64557,64557],"mapped",[1601,1580]],[[64558,64558],"mapped",[1601,1581]],[[64559,64559],"mapped",[1601,1582]],[[64560,64560],"mapped",[1601,1605]],[[64561,64561],"mapped",[1601,1609]],[[64562,64562],"mapped",[1601,1610]],[[64563,64563],"mapped",[1602,1581]],[[64564,64564],"mapped",[1602,1605]],[[64565,64565],"mapped",[1602,1609]],[[64566,64566],"mapped",[1602,1610]],[[64567,64567],"mapped",[1603,1575]],[[64568,64568],"mapped",[1603,1580]],[[64569,64569],"mapped",[1603,1581]],[[64570,64570],"mapped",[1603,1582]],[[64571,64571],"mapped",[1603,1604]],[[64572,64572],"mapped",[1603,1605]],[[64573,64573],"mapped",[1603,1609]],[[64574,64574],"mapped",[1603,1610]],[[64575,64575],"mapped",[1604,1580]],[[64576,64576],"mapped",[1604,1581]],[[64577,64577],"mapped",[1604,1582]],[[64578,64578],"mapped",[1604,1605]],[[64579,64579],"mapped",[1604,1609]],[[64580,64580],"mapped",[1604,1610]],[[64581,64581],"mapped",[1605,1580]],[[64582,64582],"mapped",[1605,1581]],[[64583,64583],"mapped",[1605,1582]],[[64584,64584],"mapped",[1605,1605]],[[64585,64585],"mapped",[1605,1609]],[[64586,64586],"mapped",[1605,1610]],[[64587,64587],"mapped",[1606,1580]],[[64588,64588],"mapped",[1606,1581]],[[64589,64589],"mapped",[1606,1582]],[[64590,64590],"mapped",[1606,1605]],[[64591,64591],"mapped",[1606,1609]],[[64592,64592],"mapped",[1606,1610]],[[64593,64593],"mapped",[1607,1580]],[[64594,64594],"mapped",[1607,1605]],[[64595,64595],"mapped",[1607,1609]],[[64596,64596],"mapped",[1607,1610]],[[64597,64597],"mapped",[1610,1580]],[[64598,64598],"mapped",[1610,1581]],[[64599,64599],"mapped",[1610,1582]],[[64600,64600],"mapped",[1610,1605]],[[64601,64601],"mapped",[1610,1609]],[[64602,64602],"mapped",[1610,1610]],[[64603,64603],"mapped",[1584,1648]],[[64604,64604],"mapped",[1585,1648]],[[64605,64605],"mapped",[1609,1648]],[[64606,64606],"disallowed_STD3_mapped",[32,1612,1617]],[[64607,64607],"disallowed_STD3_mapped",[32,1613,1617]],[[64608,64608],"disallowed_STD3_mapped",[32,1614,1617]],[[64609,64609],"disallowed_STD3_mapped",[32,1615,1617]],[[64610,64610],"disallowed_STD3_mapped",[32,1616,1617]],[[64611,64611],"disallowed_STD3_mapped",[32,1617,1648]],[[64612,64612],"mapped",[1574,1585]],[[64613,64613],"mapped",[1574,1586]],[[64614,64614],"mapped",[1574,1605]],[[64615,64615],"mapped",[1574,1606]],[[64616,64616],"mapped",[1574,1609]],[[64617,64617],"mapped",[1574,1610]],[[64618,64618],"mapped",[1576,1585]],[[64619,64619],"mapped",[1576,1586]],[[64620,64620],"mapped",[1576,1605]],[[64621,64621],"mapped",[1576,1606]],[[64622,64622],"mapped",[1576,1609]],[[64623,64623],"mapped",[1576,1610]],[[64624,64624],"mapped",[1578,1585]],[[64625,64625],"mapped",[1578,1586]],[[64626,64626],"mapped",[1578,1605]],[[64627,64627],"mapped",[1578,1606]],[[64628,64628],"mapped",[1578,1609]],[[64629,64629],"mapped",[1578,1610]],[[64630,64630],"mapped",[1579,1585]],[[64631,64631],"mapped",[1579,1586]],[[64632,64632],"mapped",[1579,1605]],[[64633,64633],"mapped",[1579,1606]],[[64634,64634],"mapped",[1579,1609]],[[64635,64635],"mapped",[1579,1610]],[[64636,64636],"mapped",[1601,1609]],[[64637,64637],"mapped",[1601,1610]],[[64638,64638],"mapped",[1602,1609]],[[64639,64639],"mapped",[1602,1610]],[[64640,64640],"mapped",[1603,1575]],[[64641,64641],"mapped",[1603,1604]],[[64642,64642],"mapped",[1603,1605]],[[64643,64643],"mapped",[1603,1609]],[[64644,64644],"mapped",[1603,1610]],[[64645,64645],"mapped",[1604,1605]],[[64646,64646],"mapped",[1604,1609]],[[64647,64647],"mapped",[1604,1610]],[[64648,64648],"mapped",[1605,1575]],[[64649,64649],"mapped",[1605,1605]],[[64650,64650],"mapped",[1606,1585]],[[64651,64651],"mapped",[1606,1586]],[[64652,64652],"mapped",[1606,1605]],[[64653,64653],"mapped",[1606,1606]],[[64654,64654],"mapped",[1606,1609]],[[64655,64655],"mapped",[1606,1610]],[[64656,64656],"mapped",[1609,1648]],[[64657,64657],"mapped",[1610,1585]],[[64658,64658],"mapped",[1610,1586]],[[64659,64659],"mapped",[1610,1605]],[[64660,64660],"mapped",[1610,1606]],[[64661,64661],"mapped",[1610,1609]],[[64662,64662],"mapped",[1610,1610]],[[64663,64663],"mapped",[1574,1580]],[[64664,64664],"mapped",[1574,1581]],[[64665,64665],"mapped",[1574,1582]],[[64666,64666],"mapped",[1574,1605]],[[64667,64667],"mapped",[1574,1607]],[[64668,64668],"mapped",[1576,1580]],[[64669,64669],"mapped",[1576,1581]],[[64670,64670],"mapped",[1576,1582]],[[64671,64671],"mapped",[1576,1605]],[[64672,64672],"mapped",[1576,1607]],[[64673,64673],"mapped",[1578,1580]],[[64674,64674],"mapped",[1578,1581]],[[64675,64675],"mapped",[1578,1582]],[[64676,64676],"mapped",[1578,1605]],[[64677,64677],"mapped",[1578,1607]],[[64678,64678],"mapped",[1579,1605]],[[64679,64679],"mapped",[1580,1581]],[[64680,64680],"mapped",[1580,1605]],[[64681,64681],"mapped",[1581,1580]],[[64682,64682],"mapped",[1581,1605]],[[64683,64683],"mapped",[1582,1580]],[[64684,64684],"mapped",[1582,1605]],[[64685,64685],"mapped",[1587,1580]],[[64686,64686],"mapped",[1587,1581]],[[64687,64687],"mapped",[1587,1582]],[[64688,64688],"mapped",[1587,1605]],[[64689,64689],"mapped",[1589,1581]],[[64690,64690],"mapped",[1589,1582]],[[64691,64691],"mapped",[1589,1605]],[[64692,64692],"mapped",[1590,1580]],[[64693,64693],"mapped",[1590,1581]],[[64694,64694],"mapped",[1590,1582]],[[64695,64695],"mapped",[1590,1605]],[[64696,64696],"mapped",[1591,1581]],[[64697,64697],"mapped",[1592,1605]],[[64698,64698],"mapped",[1593,1580]],[[64699,64699],"mapped",[1593,1605]],[[64700,64700],"mapped",[1594,1580]],[[64701,64701],"mapped",[1594,1605]],[[64702,64702],"mapped",[1601,1580]],[[64703,64703],"mapped",[1601,1581]],[[64704,64704],"mapped",[1601,1582]],[[64705,64705],"mapped",[1601,1605]],[[64706,64706],"mapped",[1602,1581]],[[64707,64707],"mapped",[1602,1605]],[[64708,64708],"mapped",[1603,1580]],[[64709,64709],"mapped",[1603,1581]],[[64710,64710],"mapped",[1603,1582]],[[64711,64711],"mapped",[1603,1604]],[[64712,64712],"mapped",[1603,1605]],[[64713,64713],"mapped",[1604,1580]],[[64714,64714],"mapped",[1604,1581]],[[64715,64715],"mapped",[1604,1582]],[[64716,64716],"mapped",[1604,1605]],[[64717,64717],"mapped",[1604,1607]],[[64718,64718],"mapped",[1605,1580]],[[64719,64719],"mapped",[1605,1581]],[[64720,64720],"mapped",[1605,1582]],[[64721,64721],"mapped",[1605,1605]],[[64722,64722],"mapped",[1606,1580]],[[64723,64723],"mapped",[1606,1581]],[[64724,64724],"mapped",[1606,1582]],[[64725,64725],"mapped",[1606,1605]],[[64726,64726],"mapped",[1606,1607]],[[64727,64727],"mapped",[1607,1580]],[[64728,64728],"mapped",[1607,1605]],[[64729,64729],"mapped",[1607,1648]],[[64730,64730],"mapped",[1610,1580]],[[64731,64731],"mapped",[1610,1581]],[[64732,64732],"mapped",[1610,1582]],[[64733,64733],"mapped",[1610,1605]],[[64734,64734],"mapped",[1610,1607]],[[64735,64735],"mapped",[1574,1605]],[[64736,64736],"mapped",[1574,1607]],[[64737,64737],"mapped",[1576,1605]],[[64738,64738],"mapped",[1576,1607]],[[64739,64739],"mapped",[1578,1605]],[[64740,64740],"mapped",[1578,1607]],[[64741,64741],"mapped",[1579,1605]],[[64742,64742],"mapped",[1579,1607]],[[64743,64743],"mapped",[1587,1605]],[[64744,64744],"mapped",[1587,1607]],[[64745,64745],"mapped",[1588,1605]],[[64746,64746],"mapped",[1588,1607]],[[64747,64747],"mapped",[1603,1604]],[[64748,64748],"mapped",[1603,1605]],[[64749,64749],"mapped",[1604,1605]],[[64750,64750],"mapped",[1606,1605]],[[64751,64751],"mapped",[1606,1607]],[[64752,64752],"mapped",[1610,1605]],[[64753,64753],"mapped",[1610,1607]],[[64754,64754],"mapped",[1600,1614,1617]],[[64755,64755],"mapped",[1600,1615,1617]],[[64756,64756],"mapped",[1600,1616,1617]],[[64757,64757],"mapped",[1591,1609]],[[64758,64758],"mapped",[1591,1610]],[[64759,64759],"mapped",[1593,1609]],[[64760,64760],"mapped",[1593,1610]],[[64761,64761],"mapped",[1594,1609]],[[64762,64762],"mapped",[1594,1610]],[[64763,64763],"mapped",[1587,1609]],[[64764,64764],"mapped",[1587,1610]],[[64765,64765],"mapped",[1588,1609]],[[64766,64766],"mapped",[1588,1610]],[[64767,64767],"mapped",[1581,1609]],[[64768,64768],"mapped",[1581,1610]],[[64769,64769],"mapped",[1580,1609]],[[64770,64770],"mapped",[1580,1610]],[[64771,64771],"mapped",[1582,1609]],[[64772,64772],"mapped",[1582,1610]],[[64773,64773],"mapped",[1589,1609]],[[64774,64774],"mapped",[1589,1610]],[[64775,64775],"mapped",[1590,1609]],[[64776,64776],"mapped",[1590,1610]],[[64777,64777],"mapped",[1588,1580]],[[64778,64778],"mapped",[1588,1581]],[[64779,64779],"mapped",[1588,1582]],[[64780,64780],"mapped",[1588,1605]],[[64781,64781],"mapped",[1588,1585]],[[64782,64782],"mapped",[1587,1585]],[[64783,64783],"mapped",[1589,1585]],[[64784,64784],"mapped",[1590,1585]],[[64785,64785],"mapped",[1591,1609]],[[64786,64786],"mapped",[1591,1610]],[[64787,64787],"mapped",[1593,1609]],[[64788,64788],"mapped",[1593,1610]],[[64789,64789],"mapped",[1594,1609]],[[64790,64790],"mapped",[1594,1610]],[[64791,64791],"mapped",[1587,1609]],[[64792,64792],"mapped",[1587,1610]],[[64793,64793],"mapped",[1588,1609]],[[64794,64794],"mapped",[1588,1610]],[[64795,64795],"mapped",[1581,1609]],[[64796,64796],"mapped",[1581,1610]],[[64797,64797],"mapped",[1580,1609]],[[64798,64798],"mapped",[1580,1610]],[[64799,64799],"mapped",[1582,1609]],[[64800,64800],"mapped",[1582,1610]],[[64801,64801],"mapped",[1589,1609]],[[64802,64802],"mapped",[1589,1610]],[[64803,64803],"mapped",[1590,1609]],[[64804,64804],"mapped",[1590,1610]],[[64805,64805],"mapped",[1588,1580]],[[64806,64806],"mapped",[1588,1581]],[[64807,64807],"mapped",[1588,1582]],[[64808,64808],"mapped",[1588,1605]],[[64809,64809],"mapped",[1588,1585]],[[64810,64810],"mapped",[1587,1585]],[[64811,64811],"mapped",[1589,1585]],[[64812,64812],"mapped",[1590,1585]],[[64813,64813],"mapped",[1588,1580]],[[64814,64814],"mapped",[1588,1581]],[[64815,64815],"mapped",[1588,1582]],[[64816,64816],"mapped",[1588,1605]],[[64817,64817],"mapped",[1587,1607]],[[64818,64818],"mapped",[1588,1607]],[[64819,64819],"mapped",[1591,1605]],[[64820,64820],"mapped",[1587,1580]],[[64821,64821],"mapped",[1587,1581]],[[64822,64822],"mapped",[1587,1582]],[[64823,64823],"mapped",[1588,1580]],[[64824,64824],"mapped",[1588,1581]],[[64825,64825],"mapped",[1588,1582]],[[64826,64826],"mapped",[1591,1605]],[[64827,64827],"mapped",[1592,1605]],[[64828,64829],"mapped",[1575,1611]],[[64830,64831],"valid",[],"NV8"],[[64832,64847],"disallowed"],[[64848,64848],"mapped",[1578,1580,1605]],[[64849,64850],"mapped",[1578,1581,1580]],[[64851,64851],"mapped",[1578,1581,1605]],[[64852,64852],"mapped",[1578,1582,1605]],[[64853,64853],"mapped",[1578,1605,1580]],[[64854,64854],"mapped",[1578,1605,1581]],[[64855,64855],"mapped",[1578,1605,1582]],[[64856,64857],"mapped",[1580,1605,1581]],[[64858,64858],"mapped",[1581,1605,1610]],[[64859,64859],"mapped",[1581,1605,1609]],[[64860,64860],"mapped",[1587,1581,1580]],[[64861,64861],"mapped",[1587,1580,1581]],[[64862,64862],"mapped",[1587,1580,1609]],[[64863,64864],"mapped",[1587,1605,1581]],[[64865,64865],"mapped",[1587,1605,1580]],[[64866,64867],"mapped",[1587,1605,1605]],[[64868,64869],"mapped",[1589,1581,1581]],[[64870,64870],"mapped",[1589,1605,1605]],[[64871,64872],"mapped",[1588,1581,1605]],[[64873,64873],"mapped",[1588,1580,1610]],[[64874,64875],"mapped",[1588,1605,1582]],[[64876,64877],"mapped",[1588,1605,1605]],[[64878,64878],"mapped",[1590,1581,1609]],[[64879,64880],"mapped",[1590,1582,1605]],[[64881,64882],"mapped",[1591,1605,1581]],[[64883,64883],"mapped",[1591,1605,1605]],[[64884,64884],"mapped",[1591,1605,1610]],[[64885,64885],"mapped",[1593,1580,1605]],[[64886,64887],"mapped",[1593,1605,1605]],[[64888,64888],"mapped",[1593,1605,1609]],[[64889,64889],"mapped",[1594,1605,1605]],[[64890,64890],"mapped",[1594,1605,1610]],[[64891,64891],"mapped",[1594,1605,1609]],[[64892,64893],"mapped",[1601,1582,1605]],[[64894,64894],"mapped",[1602,1605,1581]],[[64895,64895],"mapped",[1602,1605,1605]],[[64896,64896],"mapped",[1604,1581,1605]],[[64897,64897],"mapped",[1604,1581,1610]],[[64898,64898],"mapped",[1604,1581,1609]],[[64899,64900],"mapped",[1604,1580,1580]],[[64901,64902],"mapped",[1604,1582,1605]],[[64903,64904],"mapped",[1604,1605,1581]],[[64905,64905],"mapped",[1605,1581,1580]],[[64906,64906],"mapped",[1605,1581,1605]],[[64907,64907],"mapped",[1605,1581,1610]],[[64908,64908],"mapped",[1605,1580,1581]],[[64909,64909],"mapped",[1605,1580,1605]],[[64910,64910],"mapped",[1605,1582,1580]],[[64911,64911],"mapped",[1605,1582,1605]],[[64912,64913],"disallowed"],[[64914,64914],"mapped",[1605,1580,1582]],[[64915,64915],"mapped",[1607,1605,1580]],[[64916,64916],"mapped",[1607,1605,1605]],[[64917,64917],"mapped",[1606,1581,1605]],[[64918,64918],"mapped",[1606,1581,1609]],[[64919,64920],"mapped",[1606,1580,1605]],[[64921,64921],"mapped",[1606,1580,1609]],[[64922,64922],"mapped",[1606,1605,1610]],[[64923,64923],"mapped",[1606,1605,1609]],[[64924,64925],"mapped",[1610,1605,1605]],[[64926,64926],"mapped",[1576,1582,1610]],[[64927,64927],"mapped",[1578,1580,1610]],[[64928,64928],"mapped",[1578,1580,1609]],[[64929,64929],"mapped",[1578,1582,1610]],[[64930,64930],"mapped",[1578,1582,1609]],[[64931,64931],"mapped",[1578,1605,1610]],[[64932,64932],"mapped",[1578,1605,1609]],[[64933,64933],"mapped",[1580,1605,1610]],[[64934,64934],"mapped",[1580,1581,1609]],[[64935,64935],"mapped",[1580,1605,1609]],[[64936,64936],"mapped",[1587,1582,1609]],[[64937,64937],"mapped",[1589,1581,1610]],[[64938,64938],"mapped",[1588,1581,1610]],[[64939,64939],"mapped",[1590,1581,1610]],[[64940,64940],"mapped",[1604,1580,1610]],[[64941,64941],"mapped",[1604,1605,1610]],[[64942,64942],"mapped",[1610,1581,1610]],[[64943,64943],"mapped",[1610,1580,1610]],[[64944,64944],"mapped",[1610,1605,1610]],[[64945,64945],"mapped",[1605,1605,1610]],[[64946,64946],"mapped",[1602,1605,1610]],[[64947,64947],"mapped",[1606,1581,1610]],[[64948,64948],"mapped",[1602,1605,1581]],[[64949,64949],"mapped",[1604,1581,1605]],[[64950,64950],"mapped",[1593,1605,1610]],[[64951,64951],"mapped",[1603,1605,1610]],[[64952,64952],"mapped",[1606,1580,1581]],[[64953,64953],"mapped",[1605,1582,1610]],[[64954,64954],"mapped",[1604,1580,1605]],[[64955,64955],"mapped",[1603,1605,1605]],[[64956,64956],"mapped",[1604,1580,1605]],[[64957,64957],"mapped",[1606,1580,1581]],[[64958,64958],"mapped",[1580,1581,1610]],[[64959,64959],"mapped",[1581,1580,1610]],[[64960,64960],"mapped",[1605,1580,1610]],[[64961,64961],"mapped",[1601,1605,1610]],[[64962,64962],"mapped",[1576,1581,1610]],[[64963,64963],"mapped",[1603,1605,1605]],[[64964,64964],"mapped",[1593,1580,1605]],[[64965,64965],"mapped",[1589,1605,1605]],[[64966,64966],"mapped",[1587,1582,1610]],[[64967,64967],"mapped",[1606,1580,1610]],[[64968,64975],"disallowed"],[[64976,65007],"disallowed"],[[65008,65008],"mapped",[1589,1604,1746]],[[65009,65009],"mapped",[1602,1604,1746]],[[65010,65010],"mapped",[1575,1604,1604,1607]],[[65011,65011],"mapped",[1575,1603,1576,1585]],[[65012,65012],"mapped",[1605,1581,1605,1583]],[[65013,65013],"mapped",[1589,1604,1593,1605]],[[65014,65014],"mapped",[1585,1587,1608,1604]],[[65015,65015],"mapped",[1593,1604,1610,1607]],[[65016,65016],"mapped",[1608,1587,1604,1605]],[[65017,65017],"mapped",[1589,1604,1609]],[[65018,65018],"disallowed_STD3_mapped",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],"disallowed_STD3_mapped",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],"mapped",[1585,1740,1575,1604]],[[65021,65021],"valid",[],"NV8"],[[65022,65023],"disallowed"],[[65024,65039],"ignored"],[[65040,65040],"disallowed_STD3_mapped",[44]],[[65041,65041],"mapped",[12289]],[[65042,65042],"disallowed"],[[65043,65043],"disallowed_STD3_mapped",[58]],[[65044,65044],"disallowed_STD3_mapped",[59]],[[65045,65045],"disallowed_STD3_mapped",[33]],[[65046,65046],"disallowed_STD3_mapped",[63]],[[65047,65047],"mapped",[12310]],[[65048,65048],"mapped",[12311]],[[65049,65049],"disallowed"],[[65050,65055],"disallowed"],[[65056,65059],"valid"],[[65060,65062],"valid"],[[65063,65069],"valid"],[[65070,65071],"valid"],[[65072,65072],"disallowed"],[[65073,65073],"mapped",[8212]],[[65074,65074],"mapped",[8211]],[[65075,65076],"disallowed_STD3_mapped",[95]],[[65077,65077],"disallowed_STD3_mapped",[40]],[[65078,65078],"disallowed_STD3_mapped",[41]],[[65079,65079],"disallowed_STD3_mapped",[123]],[[65080,65080],"disallowed_STD3_mapped",[125]],[[65081,65081],"mapped",[12308]],[[65082,65082],"mapped",[12309]],[[65083,65083],"mapped",[12304]],[[65084,65084],"mapped",[12305]],[[65085,65085],"mapped",[12298]],[[65086,65086],"mapped",[12299]],[[65087,65087],"mapped",[12296]],[[65088,65088],"mapped",[12297]],[[65089,65089],"mapped",[12300]],[[65090,65090],"mapped",[12301]],[[65091,65091],"mapped",[12302]],[[65092,65092],"mapped",[12303]],[[65093,65094],"valid",[],"NV8"],[[65095,65095],"disallowed_STD3_mapped",[91]],[[65096,65096],"disallowed_STD3_mapped",[93]],[[65097,65100],"disallowed_STD3_mapped",[32,773]],[[65101,65103],"disallowed_STD3_mapped",[95]],[[65104,65104],"disallowed_STD3_mapped",[44]],[[65105,65105],"mapped",[12289]],[[65106,65106],"disallowed"],[[65107,65107],"disallowed"],[[65108,65108],"disallowed_STD3_mapped",[59]],[[65109,65109],"disallowed_STD3_mapped",[58]],[[65110,65110],"disallowed_STD3_mapped",[63]],[[65111,65111],"disallowed_STD3_mapped",[33]],[[65112,65112],"mapped",[8212]],[[65113,65113],"disallowed_STD3_mapped",[40]],[[65114,65114],"disallowed_STD3_mapped",[41]],[[65115,65115],"disallowed_STD3_mapped",[123]],[[65116,65116],"disallowed_STD3_mapped",[125]],[[65117,65117],"mapped",[12308]],[[65118,65118],"mapped",[12309]],[[65119,65119],"disallowed_STD3_mapped",[35]],[[65120,65120],"disallowed_STD3_mapped",[38]],[[65121,65121],"disallowed_STD3_mapped",[42]],[[65122,65122],"disallowed_STD3_mapped",[43]],[[65123,65123],"mapped",[45]],[[65124,65124],"disallowed_STD3_mapped",[60]],[[65125,65125],"disallowed_STD3_mapped",[62]],[[65126,65126],"disallowed_STD3_mapped",[61]],[[65127,65127],"disallowed"],[[65128,65128],"disallowed_STD3_mapped",[92]],[[65129,65129],"disallowed_STD3_mapped",[36]],[[65130,65130],"disallowed_STD3_mapped",[37]],[[65131,65131],"disallowed_STD3_mapped",[64]],[[65132,65135],"disallowed"],[[65136,65136],"disallowed_STD3_mapped",[32,1611]],[[65137,65137],"mapped",[1600,1611]],[[65138,65138],"disallowed_STD3_mapped",[32,1612]],[[65139,65139],"valid"],[[65140,65140],"disallowed_STD3_mapped",[32,1613]],[[65141,65141],"disallowed"],[[65142,65142],"disallowed_STD3_mapped",[32,1614]],[[65143,65143],"mapped",[1600,1614]],[[65144,65144],"disallowed_STD3_mapped",[32,1615]],[[65145,65145],"mapped",[1600,1615]],[[65146,65146],"disallowed_STD3_mapped",[32,1616]],[[65147,65147],"mapped",[1600,1616]],[[65148,65148],"disallowed_STD3_mapped",[32,1617]],[[65149,65149],"mapped",[1600,1617]],[[65150,65150],"disallowed_STD3_mapped",[32,1618]],[[65151,65151],"mapped",[1600,1618]],[[65152,65152],"mapped",[1569]],[[65153,65154],"mapped",[1570]],[[65155,65156],"mapped",[1571]],[[65157,65158],"mapped",[1572]],[[65159,65160],"mapped",[1573]],[[65161,65164],"mapped",[1574]],[[65165,65166],"mapped",[1575]],[[65167,65170],"mapped",[1576]],[[65171,65172],"mapped",[1577]],[[65173,65176],"mapped",[1578]],[[65177,65180],"mapped",[1579]],[[65181,65184],"mapped",[1580]],[[65185,65188],"mapped",[1581]],[[65189,65192],"mapped",[1582]],[[65193,65194],"mapped",[1583]],[[65195,65196],"mapped",[1584]],[[65197,65198],"mapped",[1585]],[[65199,65200],"mapped",[1586]],[[65201,65204],"mapped",[1587]],[[65205,65208],"mapped",[1588]],[[65209,65212],"mapped",[1589]],[[65213,65216],"mapped",[1590]],[[65217,65220],"mapped",[1591]],[[65221,65224],"mapped",[1592]],[[65225,65228],"mapped",[1593]],[[65229,65232],"mapped",[1594]],[[65233,65236],"mapped",[1601]],[[65237,65240],"mapped",[1602]],[[65241,65244],"mapped",[1603]],[[65245,65248],"mapped",[1604]],[[65249,65252],"mapped",[1605]],[[65253,65256],"mapped",[1606]],[[65257,65260],"mapped",[1607]],[[65261,65262],"mapped",[1608]],[[65263,65264],"mapped",[1609]],[[65265,65268],"mapped",[1610]],[[65269,65270],"mapped",[1604,1570]],[[65271,65272],"mapped",[1604,1571]],[[65273,65274],"mapped",[1604,1573]],[[65275,65276],"mapped",[1604,1575]],[[65277,65278],"disallowed"],[[65279,65279],"ignored"],[[65280,65280],"disallowed"],[[65281,65281],"disallowed_STD3_mapped",[33]],[[65282,65282],"disallowed_STD3_mapped",[34]],[[65283,65283],"disallowed_STD3_mapped",[35]],[[65284,65284],"disallowed_STD3_mapped",[36]],[[65285,65285],"disallowed_STD3_mapped",[37]],[[65286,65286],"disallowed_STD3_mapped",[38]],[[65287,65287],"disallowed_STD3_mapped",[39]],[[65288,65288],"disallowed_STD3_mapped",[40]],[[65289,65289],"disallowed_STD3_mapped",[41]],[[65290,65290],"disallowed_STD3_mapped",[42]],[[65291,65291],"disallowed_STD3_mapped",[43]],[[65292,65292],"disallowed_STD3_mapped",[44]],[[65293,65293],"mapped",[45]],[[65294,65294],"mapped",[46]],[[65295,65295],"disallowed_STD3_mapped",[47]],[[65296,65296],"mapped",[48]],[[65297,65297],"mapped",[49]],[[65298,65298],"mapped",[50]],[[65299,65299],"mapped",[51]],[[65300,65300],"mapped",[52]],[[65301,65301],"mapped",[53]],[[65302,65302],"mapped",[54]],[[65303,65303],"mapped",[55]],[[65304,65304],"mapped",[56]],[[65305,65305],"mapped",[57]],[[65306,65306],"disallowed_STD3_mapped",[58]],[[65307,65307],"disallowed_STD3_mapped",[59]],[[65308,65308],"disallowed_STD3_mapped",[60]],[[65309,65309],"disallowed_STD3_mapped",[61]],[[65310,65310],"disallowed_STD3_mapped",[62]],[[65311,65311],"disallowed_STD3_mapped",[63]],[[65312,65312],"disallowed_STD3_mapped",[64]],[[65313,65313],"mapped",[97]],[[65314,65314],"mapped",[98]],[[65315,65315],"mapped",[99]],[[65316,65316],"mapped",[100]],[[65317,65317],"mapped",[101]],[[65318,65318],"mapped",[102]],[[65319,65319],"mapped",[103]],[[65320,65320],"mapped",[104]],[[65321,65321],"mapped",[105]],[[65322,65322],"mapped",[106]],[[65323,65323],"mapped",[107]],[[65324,65324],"mapped",[108]],[[65325,65325],"mapped",[109]],[[65326,65326],"mapped",[110]],[[65327,65327],"mapped",[111]],[[65328,65328],"mapped",[112]],[[65329,65329],"mapped",[113]],[[65330,65330],"mapped",[114]],[[65331,65331],"mapped",[115]],[[65332,65332],"mapped",[116]],[[65333,65333],"mapped",[117]],[[65334,65334],"mapped",[118]],[[65335,65335],"mapped",[119]],[[65336,65336],"mapped",[120]],[[65337,65337],"mapped",[121]],[[65338,65338],"mapped",[122]],[[65339,65339],"disallowed_STD3_mapped",[91]],[[65340,65340],"disallowed_STD3_mapped",[92]],[[65341,65341],"disallowed_STD3_mapped",[93]],[[65342,65342],"disallowed_STD3_mapped",[94]],[[65343,65343],"disallowed_STD3_mapped",[95]],[[65344,65344],"disallowed_STD3_mapped",[96]],[[65345,65345],"mapped",[97]],[[65346,65346],"mapped",[98]],[[65347,65347],"mapped",[99]],[[65348,65348],"mapped",[100]],[[65349,65349],"mapped",[101]],[[65350,65350],"mapped",[102]],[[65351,65351],"mapped",[103]],[[65352,65352],"mapped",[104]],[[65353,65353],"mapped",[105]],[[65354,65354],"mapped",[106]],[[65355,65355],"mapped",[107]],[[65356,65356],"mapped",[108]],[[65357,65357],"mapped",[109]],[[65358,65358],"mapped",[110]],[[65359,65359],"mapped",[111]],[[65360,65360],"mapped",[112]],[[65361,65361],"mapped",[113]],[[65362,65362],"mapped",[114]],[[65363,65363],"mapped",[115]],[[65364,65364],"mapped",[116]],[[65365,65365],"mapped",[117]],[[65366,65366],"mapped",[118]],[[65367,65367],"mapped",[119]],[[65368,65368],"mapped",[120]],[[65369,65369],"mapped",[121]],[[65370,65370],"mapped",[122]],[[65371,65371],"disallowed_STD3_mapped",[123]],[[65372,65372],"disallowed_STD3_mapped",[124]],[[65373,65373],"disallowed_STD3_mapped",[125]],[[65374,65374],"disallowed_STD3_mapped",[126]],[[65375,65375],"mapped",[10629]],[[65376,65376],"mapped",[10630]],[[65377,65377],"mapped",[46]],[[65378,65378],"mapped",[12300]],[[65379,65379],"mapped",[12301]],[[65380,65380],"mapped",[12289]],[[65381,65381],"mapped",[12539]],[[65382,65382],"mapped",[12530]],[[65383,65383],"mapped",[12449]],[[65384,65384],"mapped",[12451]],[[65385,65385],"mapped",[12453]],[[65386,65386],"mapped",[12455]],[[65387,65387],"mapped",[12457]],[[65388,65388],"mapped",[12515]],[[65389,65389],"mapped",[12517]],[[65390,65390],"mapped",[12519]],[[65391,65391],"mapped",[12483]],[[65392,65392],"mapped",[12540]],[[65393,65393],"mapped",[12450]],[[65394,65394],"mapped",[12452]],[[65395,65395],"mapped",[12454]],[[65396,65396],"mapped",[12456]],[[65397,65397],"mapped",[12458]],[[65398,65398],"mapped",[12459]],[[65399,65399],"mapped",[12461]],[[65400,65400],"mapped",[12463]],[[65401,65401],"mapped",[12465]],[[65402,65402],"mapped",[12467]],[[65403,65403],"mapped",[12469]],[[65404,65404],"mapped",[12471]],[[65405,65405],"mapped",[12473]],[[65406,65406],"mapped",[12475]],[[65407,65407],"mapped",[12477]],[[65408,65408],"mapped",[12479]],[[65409,65409],"mapped",[12481]],[[65410,65410],"mapped",[12484]],[[65411,65411],"mapped",[12486]],[[65412,65412],"mapped",[12488]],[[65413,65413],"mapped",[12490]],[[65414,65414],"mapped",[12491]],[[65415,65415],"mapped",[12492]],[[65416,65416],"mapped",[12493]],[[65417,65417],"mapped",[12494]],[[65418,65418],"mapped",[12495]],[[65419,65419],"mapped",[12498]],[[65420,65420],"mapped",[12501]],[[65421,65421],"mapped",[12504]],[[65422,65422],"mapped",[12507]],[[65423,65423],"mapped",[12510]],[[65424,65424],"mapped",[12511]],[[65425,65425],"mapped",[12512]],[[65426,65426],"mapped",[12513]],[[65427,65427],"mapped",[12514]],[[65428,65428],"mapped",[12516]],[[65429,65429],"mapped",[12518]],[[65430,65430],"mapped",[12520]],[[65431,65431],"mapped",[12521]],[[65432,65432],"mapped",[12522]],[[65433,65433],"mapped",[12523]],[[65434,65434],"mapped",[12524]],[[65435,65435],"mapped",[12525]],[[65436,65436],"mapped",[12527]],[[65437,65437],"mapped",[12531]],[[65438,65438],"mapped",[12441]],[[65439,65439],"mapped",[12442]],[[65440,65440],"disallowed"],[[65441,65441],"mapped",[4352]],[[65442,65442],"mapped",[4353]],[[65443,65443],"mapped",[4522]],[[65444,65444],"mapped",[4354]],[[65445,65445],"mapped",[4524]],[[65446,65446],"mapped",[4525]],[[65447,65447],"mapped",[4355]],[[65448,65448],"mapped",[4356]],[[65449,65449],"mapped",[4357]],[[65450,65450],"mapped",[4528]],[[65451,65451],"mapped",[4529]],[[65452,65452],"mapped",[4530]],[[65453,65453],"mapped",[4531]],[[65454,65454],"mapped",[4532]],[[65455,65455],"mapped",[4533]],[[65456,65456],"mapped",[4378]],[[65457,65457],"mapped",[4358]],[[65458,65458],"mapped",[4359]],[[65459,65459],"mapped",[4360]],[[65460,65460],"mapped",[4385]],[[65461,65461],"mapped",[4361]],[[65462,65462],"mapped",[4362]],[[65463,65463],"mapped",[4363]],[[65464,65464],"mapped",[4364]],[[65465,65465],"mapped",[4365]],[[65466,65466],"mapped",[4366]],[[65467,65467],"mapped",[4367]],[[65468,65468],"mapped",[4368]],[[65469,65469],"mapped",[4369]],[[65470,65470],"mapped",[4370]],[[65471,65473],"disallowed"],[[65474,65474],"mapped",[4449]],[[65475,65475],"mapped",[4450]],[[65476,65476],"mapped",[4451]],[[65477,65477],"mapped",[4452]],[[65478,65478],"mapped",[4453]],[[65479,65479],"mapped",[4454]],[[65480,65481],"disallowed"],[[65482,65482],"mapped",[4455]],[[65483,65483],"mapped",[4456]],[[65484,65484],"mapped",[4457]],[[65485,65485],"mapped",[4458]],[[65486,65486],"mapped",[4459]],[[65487,65487],"mapped",[4460]],[[65488,65489],"disallowed"],[[65490,65490],"mapped",[4461]],[[65491,65491],"mapped",[4462]],[[65492,65492],"mapped",[4463]],[[65493,65493],"mapped",[4464]],[[65494,65494],"mapped",[4465]],[[65495,65495],"mapped",[4466]],[[65496,65497],"disallowed"],[[65498,65498],"mapped",[4467]],[[65499,65499],"mapped",[4468]],[[65500,65500],"mapped",[4469]],[[65501,65503],"disallowed"],[[65504,65504],"mapped",[162]],[[65505,65505],"mapped",[163]],[[65506,65506],"mapped",[172]],[[65507,65507],"disallowed_STD3_mapped",[32,772]],[[65508,65508],"mapped",[166]],[[65509,65509],"mapped",[165]],[[65510,65510],"mapped",[8361]],[[65511,65511],"disallowed"],[[65512,65512],"mapped",[9474]],[[65513,65513],"mapped",[8592]],[[65514,65514],"mapped",[8593]],[[65515,65515],"mapped",[8594]],[[65516,65516],"mapped",[8595]],[[65517,65517],"mapped",[9632]],[[65518,65518],"mapped",[9675]],[[65519,65528],"disallowed"],[[65529,65531],"disallowed"],[[65532,65532],"disallowed"],[[65533,65533],"disallowed"],[[65534,65535],"disallowed"],[[65536,65547],"valid"],[[65548,65548],"disallowed"],[[65549,65574],"valid"],[[65575,65575],"disallowed"],[[65576,65594],"valid"],[[65595,65595],"disallowed"],[[65596,65597],"valid"],[[65598,65598],"disallowed"],[[65599,65613],"valid"],[[65614,65615],"disallowed"],[[65616,65629],"valid"],[[65630,65663],"disallowed"],[[65664,65786],"valid"],[[65787,65791],"disallowed"],[[65792,65794],"valid",[],"NV8"],[[65795,65798],"disallowed"],[[65799,65843],"valid",[],"NV8"],[[65844,65846],"disallowed"],[[65847,65855],"valid",[],"NV8"],[[65856,65930],"valid",[],"NV8"],[[65931,65932],"valid",[],"NV8"],[[65933,65935],"disallowed"],[[65936,65947],"valid",[],"NV8"],[[65948,65951],"disallowed"],[[65952,65952],"valid",[],"NV8"],[[65953,65999],"disallowed"],[[66000,66044],"valid",[],"NV8"],[[66045,66045],"valid"],[[66046,66175],"disallowed"],[[66176,66204],"valid"],[[66205,66207],"disallowed"],[[66208,66256],"valid"],[[66257,66271],"disallowed"],[[66272,66272],"valid"],[[66273,66299],"valid",[],"NV8"],[[66300,66303],"disallowed"],[[66304,66334],"valid"],[[66335,66335],"valid"],[[66336,66339],"valid",[],"NV8"],[[66340,66351],"disallowed"],[[66352,66368],"valid"],[[66369,66369],"valid",[],"NV8"],[[66370,66377],"valid"],[[66378,66378],"valid",[],"NV8"],[[66379,66383],"disallowed"],[[66384,66426],"valid"],[[66427,66431],"disallowed"],[[66432,66461],"valid"],[[66462,66462],"disallowed"],[[66463,66463],"valid",[],"NV8"],[[66464,66499],"valid"],[[66500,66503],"disallowed"],[[66504,66511],"valid"],[[66512,66517],"valid",[],"NV8"],[[66518,66559],"disallowed"],[[66560,66560],"mapped",[66600]],[[66561,66561],"mapped",[66601]],[[66562,66562],"mapped",[66602]],[[66563,66563],"mapped",[66603]],[[66564,66564],"mapped",[66604]],[[66565,66565],"mapped",[66605]],[[66566,66566],"mapped",[66606]],[[66567,66567],"mapped",[66607]],[[66568,66568],"mapped",[66608]],[[66569,66569],"mapped",[66609]],[[66570,66570],"mapped",[66610]],[[66571,66571],"mapped",[66611]],[[66572,66572],"mapped",[66612]],[[66573,66573],"mapped",[66613]],[[66574,66574],"mapped",[66614]],[[66575,66575],"mapped",[66615]],[[66576,66576],"mapped",[66616]],[[66577,66577],"mapped",[66617]],[[66578,66578],"mapped",[66618]],[[66579,66579],"mapped",[66619]],[[66580,66580],"mapped",[66620]],[[66581,66581],"mapped",[66621]],[[66582,66582],"mapped",[66622]],[[66583,66583],"mapped",[66623]],[[66584,66584],"mapped",[66624]],[[66585,66585],"mapped",[66625]],[[66586,66586],"mapped",[66626]],[[66587,66587],"mapped",[66627]],[[66588,66588],"mapped",[66628]],[[66589,66589],"mapped",[66629]],[[66590,66590],"mapped",[66630]],[[66591,66591],"mapped",[66631]],[[66592,66592],"mapped",[66632]],[[66593,66593],"mapped",[66633]],[[66594,66594],"mapped",[66634]],[[66595,66595],"mapped",[66635]],[[66596,66596],"mapped",[66636]],[[66597,66597],"mapped",[66637]],[[66598,66598],"mapped",[66638]],[[66599,66599],"mapped",[66639]],[[66600,66637],"valid"],[[66638,66717],"valid"],[[66718,66719],"disallowed"],[[66720,66729],"valid"],[[66730,66815],"disallowed"],[[66816,66855],"valid"],[[66856,66863],"disallowed"],[[66864,66915],"valid"],[[66916,66926],"disallowed"],[[66927,66927],"valid",[],"NV8"],[[66928,67071],"disallowed"],[[67072,67382],"valid"],[[67383,67391],"disallowed"],[[67392,67413],"valid"],[[67414,67423],"disallowed"],[[67424,67431],"valid"],[[67432,67583],"disallowed"],[[67584,67589],"valid"],[[67590,67591],"disallowed"],[[67592,67592],"valid"],[[67593,67593],"disallowed"],[[67594,67637],"valid"],[[67638,67638],"disallowed"],[[67639,67640],"valid"],[[67641,67643],"disallowed"],[[67644,67644],"valid"],[[67645,67646],"disallowed"],[[67647,67647],"valid"],[[67648,67669],"valid"],[[67670,67670],"disallowed"],[[67671,67679],"valid",[],"NV8"],[[67680,67702],"valid"],[[67703,67711],"valid",[],"NV8"],[[67712,67742],"valid"],[[67743,67750],"disallowed"],[[67751,67759],"valid",[],"NV8"],[[67760,67807],"disallowed"],[[67808,67826],"valid"],[[67827,67827],"disallowed"],[[67828,67829],"valid"],[[67830,67834],"disallowed"],[[67835,67839],"valid",[],"NV8"],[[67840,67861],"valid"],[[67862,67865],"valid",[],"NV8"],[[67866,67867],"valid",[],"NV8"],[[67868,67870],"disallowed"],[[67871,67871],"valid",[],"NV8"],[[67872,67897],"valid"],[[67898,67902],"disallowed"],[[67903,67903],"valid",[],"NV8"],[[67904,67967],"disallowed"],[[67968,68023],"valid"],[[68024,68027],"disallowed"],[[68028,68029],"valid",[],"NV8"],[[68030,68031],"valid"],[[68032,68047],"valid",[],"NV8"],[[68048,68049],"disallowed"],[[68050,68095],"valid",[],"NV8"],[[68096,68099],"valid"],[[68100,68100],"disallowed"],[[68101,68102],"valid"],[[68103,68107],"disallowed"],[[68108,68115],"valid"],[[68116,68116],"disallowed"],[[68117,68119],"valid"],[[68120,68120],"disallowed"],[[68121,68147],"valid"],[[68148,68151],"disallowed"],[[68152,68154],"valid"],[[68155,68158],"disallowed"],[[68159,68159],"valid"],[[68160,68167],"valid",[],"NV8"],[[68168,68175],"disallowed"],[[68176,68184],"valid",[],"NV8"],[[68185,68191],"disallowed"],[[68192,68220],"valid"],[[68221,68223],"valid",[],"NV8"],[[68224,68252],"valid"],[[68253,68255],"valid",[],"NV8"],[[68256,68287],"disallowed"],[[68288,68295],"valid"],[[68296,68296],"valid",[],"NV8"],[[68297,68326],"valid"],[[68327,68330],"disallowed"],[[68331,68342],"valid",[],"NV8"],[[68343,68351],"disallowed"],[[68352,68405],"valid"],[[68406,68408],"disallowed"],[[68409,68415],"valid",[],"NV8"],[[68416,68437],"valid"],[[68438,68439],"disallowed"],[[68440,68447],"valid",[],"NV8"],[[68448,68466],"valid"],[[68467,68471],"disallowed"],[[68472,68479],"valid",[],"NV8"],[[68480,68497],"valid"],[[68498,68504],"disallowed"],[[68505,68508],"valid",[],"NV8"],[[68509,68520],"disallowed"],[[68521,68527],"valid",[],"NV8"],[[68528,68607],"disallowed"],[[68608,68680],"valid"],[[68681,68735],"disallowed"],[[68736,68736],"mapped",[68800]],[[68737,68737],"mapped",[68801]],[[68738,68738],"mapped",[68802]],[[68739,68739],"mapped",[68803]],[[68740,68740],"mapped",[68804]],[[68741,68741],"mapped",[68805]],[[68742,68742],"mapped",[68806]],[[68743,68743],"mapped",[68807]],[[68744,68744],"mapped",[68808]],[[68745,68745],"mapped",[68809]],[[68746,68746],"mapped",[68810]],[[68747,68747],"mapped",[68811]],[[68748,68748],"mapped",[68812]],[[68749,68749],"mapped",[68813]],[[68750,68750],"mapped",[68814]],[[68751,68751],"mapped",[68815]],[[68752,68752],"mapped",[68816]],[[68753,68753],"mapped",[68817]],[[68754,68754],"mapped",[68818]],[[68755,68755],"mapped",[68819]],[[68756,68756],"mapped",[68820]],[[68757,68757],"mapped",[68821]],[[68758,68758],"mapped",[68822]],[[68759,68759],"mapped",[68823]],[[68760,68760],"mapped",[68824]],[[68761,68761],"mapped",[68825]],[[68762,68762],"mapped",[68826]],[[68763,68763],"mapped",[68827]],[[68764,68764],"mapped",[68828]],[[68765,68765],"mapped",[68829]],[[68766,68766],"mapped",[68830]],[[68767,68767],"mapped",[68831]],[[68768,68768],"mapped",[68832]],[[68769,68769],"mapped",[68833]],[[68770,68770],"mapped",[68834]],[[68771,68771],"mapped",[68835]],[[68772,68772],"mapped",[68836]],[[68773,68773],"mapped",[68837]],[[68774,68774],"mapped",[68838]],[[68775,68775],"mapped",[68839]],[[68776,68776],"mapped",[68840]],[[68777,68777],"mapped",[68841]],[[68778,68778],"mapped",[68842]],[[68779,68779],"mapped",[68843]],[[68780,68780],"mapped",[68844]],[[68781,68781],"mapped",[68845]],[[68782,68782],"mapped",[68846]],[[68783,68783],"mapped",[68847]],[[68784,68784],"mapped",[68848]],[[68785,68785],"mapped",[68849]],[[68786,68786],"mapped",[68850]],[[68787,68799],"disallowed"],[[68800,68850],"valid"],[[68851,68857],"disallowed"],[[68858,68863],"valid",[],"NV8"],[[68864,69215],"disallowed"],[[69216,69246],"valid",[],"NV8"],[[69247,69631],"disallowed"],[[69632,69702],"valid"],[[69703,69709],"valid",[],"NV8"],[[69710,69713],"disallowed"],[[69714,69733],"valid",[],"NV8"],[[69734,69743],"valid"],[[69744,69758],"disallowed"],[[69759,69759],"valid"],[[69760,69818],"valid"],[[69819,69820],"valid",[],"NV8"],[[69821,69821],"disallowed"],[[69822,69825],"valid",[],"NV8"],[[69826,69839],"disallowed"],[[69840,69864],"valid"],[[69865,69871],"disallowed"],[[69872,69881],"valid"],[[69882,69887],"disallowed"],[[69888,69940],"valid"],[[69941,69941],"disallowed"],[[69942,69951],"valid"],[[69952,69955],"valid",[],"NV8"],[[69956,69967],"disallowed"],[[69968,70003],"valid"],[[70004,70005],"valid",[],"NV8"],[[70006,70006],"valid"],[[70007,70015],"disallowed"],[[70016,70084],"valid"],[[70085,70088],"valid",[],"NV8"],[[70089,70089],"valid",[],"NV8"],[[70090,70092],"valid"],[[70093,70093],"valid",[],"NV8"],[[70094,70095],"disallowed"],[[70096,70105],"valid"],[[70106,70106],"valid"],[[70107,70107],"valid",[],"NV8"],[[70108,70108],"valid"],[[70109,70111],"valid",[],"NV8"],[[70112,70112],"disallowed"],[[70113,70132],"valid",[],"NV8"],[[70133,70143],"disallowed"],[[70144,70161],"valid"],[[70162,70162],"disallowed"],[[70163,70199],"valid"],[[70200,70205],"valid",[],"NV8"],[[70206,70271],"disallowed"],[[70272,70278],"valid"],[[70279,70279],"disallowed"],[[70280,70280],"valid"],[[70281,70281],"disallowed"],[[70282,70285],"valid"],[[70286,70286],"disallowed"],[[70287,70301],"valid"],[[70302,70302],"disallowed"],[[70303,70312],"valid"],[[70313,70313],"valid",[],"NV8"],[[70314,70319],"disallowed"],[[70320,70378],"valid"],[[70379,70383],"disallowed"],[[70384,70393],"valid"],[[70394,70399],"disallowed"],[[70400,70400],"valid"],[[70401,70403],"valid"],[[70404,70404],"disallowed"],[[70405,70412],"valid"],[[70413,70414],"disallowed"],[[70415,70416],"valid"],[[70417,70418],"disallowed"],[[70419,70440],"valid"],[[70441,70441],"disallowed"],[[70442,70448],"valid"],[[70449,70449],"disallowed"],[[70450,70451],"valid"],[[70452,70452],"disallowed"],[[70453,70457],"valid"],[[70458,70459],"disallowed"],[[70460,70468],"valid"],[[70469,70470],"disallowed"],[[70471,70472],"valid"],[[70473,70474],"disallowed"],[[70475,70477],"valid"],[[70478,70479],"disallowed"],[[70480,70480],"valid"],[[70481,70486],"disallowed"],[[70487,70487],"valid"],[[70488,70492],"disallowed"],[[70493,70499],"valid"],[[70500,70501],"disallowed"],[[70502,70508],"valid"],[[70509,70511],"disallowed"],[[70512,70516],"valid"],[[70517,70783],"disallowed"],[[70784,70853],"valid"],[[70854,70854],"valid",[],"NV8"],[[70855,70855],"valid"],[[70856,70863],"disallowed"],[[70864,70873],"valid"],[[70874,71039],"disallowed"],[[71040,71093],"valid"],[[71094,71095],"disallowed"],[[71096,71104],"valid"],[[71105,71113],"valid",[],"NV8"],[[71114,71127],"valid",[],"NV8"],[[71128,71133],"valid"],[[71134,71167],"disallowed"],[[71168,71232],"valid"],[[71233,71235],"valid",[],"NV8"],[[71236,71236],"valid"],[[71237,71247],"disallowed"],[[71248,71257],"valid"],[[71258,71295],"disallowed"],[[71296,71351],"valid"],[[71352,71359],"disallowed"],[[71360,71369],"valid"],[[71370,71423],"disallowed"],[[71424,71449],"valid"],[[71450,71452],"disallowed"],[[71453,71467],"valid"],[[71468,71471],"disallowed"],[[71472,71481],"valid"],[[71482,71487],"valid",[],"NV8"],[[71488,71839],"disallowed"],[[71840,71840],"mapped",[71872]],[[71841,71841],"mapped",[71873]],[[71842,71842],"mapped",[71874]],[[71843,71843],"mapped",[71875]],[[71844,71844],"mapped",[71876]],[[71845,71845],"mapped",[71877]],[[71846,71846],"mapped",[71878]],[[71847,71847],"mapped",[71879]],[[71848,71848],"mapped",[71880]],[[71849,71849],"mapped",[71881]],[[71850,71850],"mapped",[71882]],[[71851,71851],"mapped",[71883]],[[71852,71852],"mapped",[71884]],[[71853,71853],"mapped",[71885]],[[71854,71854],"mapped",[71886]],[[71855,71855],"mapped",[71887]],[[71856,71856],"mapped",[71888]],[[71857,71857],"mapped",[71889]],[[71858,71858],"mapped",[71890]],[[71859,71859],"mapped",[71891]],[[71860,71860],"mapped",[71892]],[[71861,71861],"mapped",[71893]],[[71862,71862],"mapped",[71894]],[[71863,71863],"mapped",[71895]],[[71864,71864],"mapped",[71896]],[[71865,71865],"mapped",[71897]],[[71866,71866],"mapped",[71898]],[[71867,71867],"mapped",[71899]],[[71868,71868],"mapped",[71900]],[[71869,71869],"mapped",[71901]],[[71870,71870],"mapped",[71902]],[[71871,71871],"mapped",[71903]],[[71872,71913],"valid"],[[71914,71922],"valid",[],"NV8"],[[71923,71934],"disallowed"],[[71935,71935],"valid"],[[71936,72383],"disallowed"],[[72384,72440],"valid"],[[72441,73727],"disallowed"],[[73728,74606],"valid"],[[74607,74648],"valid"],[[74649,74649],"valid"],[[74650,74751],"disallowed"],[[74752,74850],"valid",[],"NV8"],[[74851,74862],"valid",[],"NV8"],[[74863,74863],"disallowed"],[[74864,74867],"valid",[],"NV8"],[[74868,74868],"valid",[],"NV8"],[[74869,74879],"disallowed"],[[74880,75075],"valid"],[[75076,77823],"disallowed"],[[77824,78894],"valid"],[[78895,82943],"disallowed"],[[82944,83526],"valid"],[[83527,92159],"disallowed"],[[92160,92728],"valid"],[[92729,92735],"disallowed"],[[92736,92766],"valid"],[[92767,92767],"disallowed"],[[92768,92777],"valid"],[[92778,92781],"disallowed"],[[92782,92783],"valid",[],"NV8"],[[92784,92879],"disallowed"],[[92880,92909],"valid"],[[92910,92911],"disallowed"],[[92912,92916],"valid"],[[92917,92917],"valid",[],"NV8"],[[92918,92927],"disallowed"],[[92928,92982],"valid"],[[92983,92991],"valid",[],"NV8"],[[92992,92995],"valid"],[[92996,92997],"valid",[],"NV8"],[[92998,93007],"disallowed"],[[93008,93017],"valid"],[[93018,93018],"disallowed"],[[93019,93025],"valid",[],"NV8"],[[93026,93026],"disallowed"],[[93027,93047],"valid"],[[93048,93052],"disallowed"],[[93053,93071],"valid"],[[93072,93951],"disallowed"],[[93952,94020],"valid"],[[94021,94031],"disallowed"],[[94032,94078],"valid"],[[94079,94094],"disallowed"],[[94095,94111],"valid"],[[94112,110591],"disallowed"],[[110592,110593],"valid"],[[110594,113663],"disallowed"],[[113664,113770],"valid"],[[113771,113775],"disallowed"],[[113776,113788],"valid"],[[113789,113791],"disallowed"],[[113792,113800],"valid"],[[113801,113807],"disallowed"],[[113808,113817],"valid"],[[113818,113819],"disallowed"],[[113820,113820],"valid",[],"NV8"],[[113821,113822],"valid"],[[113823,113823],"valid",[],"NV8"],[[113824,113827],"ignored"],[[113828,118783],"disallowed"],[[118784,119029],"valid",[],"NV8"],[[119030,119039],"disallowed"],[[119040,119078],"valid",[],"NV8"],[[119079,119080],"disallowed"],[[119081,119081],"valid",[],"NV8"],[[119082,119133],"valid",[],"NV8"],[[119134,119134],"mapped",[119127,119141]],[[119135,119135],"mapped",[119128,119141]],[[119136,119136],"mapped",[119128,119141,119150]],[[119137,119137],"mapped",[119128,119141,119151]],[[119138,119138],"mapped",[119128,119141,119152]],[[119139,119139],"mapped",[119128,119141,119153]],[[119140,119140],"mapped",[119128,119141,119154]],[[119141,119154],"valid",[],"NV8"],[[119155,119162],"disallowed"],[[119163,119226],"valid",[],"NV8"],[[119227,119227],"mapped",[119225,119141]],[[119228,119228],"mapped",[119226,119141]],[[119229,119229],"mapped",[119225,119141,119150]],[[119230,119230],"mapped",[119226,119141,119150]],[[119231,119231],"mapped",[119225,119141,119151]],[[119232,119232],"mapped",[119226,119141,119151]],[[119233,119261],"valid",[],"NV8"],[[119262,119272],"valid",[],"NV8"],[[119273,119295],"disallowed"],[[119296,119365],"valid",[],"NV8"],[[119366,119551],"disallowed"],[[119552,119638],"valid",[],"NV8"],[[119639,119647],"disallowed"],[[119648,119665],"valid",[],"NV8"],[[119666,119807],"disallowed"],[[119808,119808],"mapped",[97]],[[119809,119809],"mapped",[98]],[[119810,119810],"mapped",[99]],[[119811,119811],"mapped",[100]],[[119812,119812],"mapped",[101]],[[119813,119813],"mapped",[102]],[[119814,119814],"mapped",[103]],[[119815,119815],"mapped",[104]],[[119816,119816],"mapped",[105]],[[119817,119817],"mapped",[106]],[[119818,119818],"mapped",[107]],[[119819,119819],"mapped",[108]],[[119820,119820],"mapped",[109]],[[119821,119821],"mapped",[110]],[[119822,119822],"mapped",[111]],[[119823,119823],"mapped",[112]],[[119824,119824],"mapped",[113]],[[119825,119825],"mapped",[114]],[[119826,119826],"mapped",[115]],[[119827,119827],"mapped",[116]],[[119828,119828],"mapped",[117]],[[119829,119829],"mapped",[118]],[[119830,119830],"mapped",[119]],[[119831,119831],"mapped",[120]],[[119832,119832],"mapped",[121]],[[119833,119833],"mapped",[122]],[[119834,119834],"mapped",[97]],[[119835,119835],"mapped",[98]],[[119836,119836],"mapped",[99]],[[119837,119837],"mapped",[100]],[[119838,119838],"mapped",[101]],[[119839,119839],"mapped",[102]],[[119840,119840],"mapped",[103]],[[119841,119841],"mapped",[104]],[[119842,119842],"mapped",[105]],[[119843,119843],"mapped",[106]],[[119844,119844],"mapped",[107]],[[119845,119845],"mapped",[108]],[[119846,119846],"mapped",[109]],[[119847,119847],"mapped",[110]],[[119848,119848],"mapped",[111]],[[119849,119849],"mapped",[112]],[[119850,119850],"mapped",[113]],[[119851,119851],"mapped",[114]],[[119852,119852],"mapped",[115]],[[119853,119853],"mapped",[116]],[[119854,119854],"mapped",[117]],[[119855,119855],"mapped",[118]],[[119856,119856],"mapped",[119]],[[119857,119857],"mapped",[120]],[[119858,119858],"mapped",[121]],[[119859,119859],"mapped",[122]],[[119860,119860],"mapped",[97]],[[119861,119861],"mapped",[98]],[[119862,119862],"mapped",[99]],[[119863,119863],"mapped",[100]],[[119864,119864],"mapped",[101]],[[119865,119865],"mapped",[102]],[[119866,119866],"mapped",[103]],[[119867,119867],"mapped",[104]],[[119868,119868],"mapped",[105]],[[119869,119869],"mapped",[106]],[[119870,119870],"mapped",[107]],[[119871,119871],"mapped",[108]],[[119872,119872],"mapped",[109]],[[119873,119873],"mapped",[110]],[[119874,119874],"mapped",[111]],[[119875,119875],"mapped",[112]],[[119876,119876],"mapped",[113]],[[119877,119877],"mapped",[114]],[[119878,119878],"mapped",[115]],[[119879,119879],"mapped",[116]],[[119880,119880],"mapped",[117]],[[119881,119881],"mapped",[118]],[[119882,119882],"mapped",[119]],[[119883,119883],"mapped",[120]],[[119884,119884],"mapped",[121]],[[119885,119885],"mapped",[122]],[[119886,119886],"mapped",[97]],[[119887,119887],"mapped",[98]],[[119888,119888],"mapped",[99]],[[119889,119889],"mapped",[100]],[[119890,119890],"mapped",[101]],[[119891,119891],"mapped",[102]],[[119892,119892],"mapped",[103]],[[119893,119893],"disallowed"],[[119894,119894],"mapped",[105]],[[119895,119895],"mapped",[106]],[[119896,119896],"mapped",[107]],[[119897,119897],"mapped",[108]],[[119898,119898],"mapped",[109]],[[119899,119899],"mapped",[110]],[[119900,119900],"mapped",[111]],[[119901,119901],"mapped",[112]],[[119902,119902],"mapped",[113]],[[119903,119903],"mapped",[114]],[[119904,119904],"mapped",[115]],[[119905,119905],"mapped",[116]],[[119906,119906],"mapped",[117]],[[119907,119907],"mapped",[118]],[[119908,119908],"mapped",[119]],[[119909,119909],"mapped",[120]],[[119910,119910],"mapped",[121]],[[119911,119911],"mapped",[122]],[[119912,119912],"mapped",[97]],[[119913,119913],"mapped",[98]],[[119914,119914],"mapped",[99]],[[119915,119915],"mapped",[100]],[[119916,119916],"mapped",[101]],[[119917,119917],"mapped",[102]],[[119918,119918],"mapped",[103]],[[119919,119919],"mapped",[104]],[[119920,119920],"mapped",[105]],[[119921,119921],"mapped",[106]],[[119922,119922],"mapped",[107]],[[119923,119923],"mapped",[108]],[[119924,119924],"mapped",[109]],[[119925,119925],"mapped",[110]],[[119926,119926],"mapped",[111]],[[119927,119927],"mapped",[112]],[[119928,119928],"mapped",[113]],[[119929,119929],"mapped",[114]],[[119930,119930],"mapped",[115]],[[119931,119931],"mapped",[116]],[[119932,119932],"mapped",[117]],[[119933,119933],"mapped",[118]],[[119934,119934],"mapped",[119]],[[119935,119935],"mapped",[120]],[[119936,119936],"mapped",[121]],[[119937,119937],"mapped",[122]],[[119938,119938],"mapped",[97]],[[119939,119939],"mapped",[98]],[[119940,119940],"mapped",[99]],[[119941,119941],"mapped",[100]],[[119942,119942],"mapped",[101]],[[119943,119943],"mapped",[102]],[[119944,119944],"mapped",[103]],[[119945,119945],"mapped",[104]],[[119946,119946],"mapped",[105]],[[119947,119947],"mapped",[106]],[[119948,119948],"mapped",[107]],[[119949,119949],"mapped",[108]],[[119950,119950],"mapped",[109]],[[119951,119951],"mapped",[110]],[[119952,119952],"mapped",[111]],[[119953,119953],"mapped",[112]],[[119954,119954],"mapped",[113]],[[119955,119955],"mapped",[114]],[[119956,119956],"mapped",[115]],[[119957,119957],"mapped",[116]],[[119958,119958],"mapped",[117]],[[119959,119959],"mapped",[118]],[[119960,119960],"mapped",[119]],[[119961,119961],"mapped",[120]],[[119962,119962],"mapped",[121]],[[119963,119963],"mapped",[122]],[[119964,119964],"mapped",[97]],[[119965,119965],"disallowed"],[[119966,119966],"mapped",[99]],[[119967,119967],"mapped",[100]],[[119968,119969],"disallowed"],[[119970,119970],"mapped",[103]],[[119971,119972],"disallowed"],[[119973,119973],"mapped",[106]],[[119974,119974],"mapped",[107]],[[119975,119976],"disallowed"],[[119977,119977],"mapped",[110]],[[119978,119978],"mapped",[111]],[[119979,119979],"mapped",[112]],[[119980,119980],"mapped",[113]],[[119981,119981],"disallowed"],[[119982,119982],"mapped",[115]],[[119983,119983],"mapped",[116]],[[119984,119984],"mapped",[117]],[[119985,119985],"mapped",[118]],[[119986,119986],"mapped",[119]],[[119987,119987],"mapped",[120]],[[119988,119988],"mapped",[121]],[[119989,119989],"mapped",[122]],[[119990,119990],"mapped",[97]],[[119991,119991],"mapped",[98]],[[119992,119992],"mapped",[99]],[[119993,119993],"mapped",[100]],[[119994,119994],"disallowed"],[[119995,119995],"mapped",[102]],[[119996,119996],"disallowed"],[[119997,119997],"mapped",[104]],[[119998,119998],"mapped",[105]],[[119999,119999],"mapped",[106]],[[120000,120000],"mapped",[107]],[[120001,120001],"mapped",[108]],[[120002,120002],"mapped",[109]],[[120003,120003],"mapped",[110]],[[120004,120004],"disallowed"],[[120005,120005],"mapped",[112]],[[120006,120006],"mapped",[113]],[[120007,120007],"mapped",[114]],[[120008,120008],"mapped",[115]],[[120009,120009],"mapped",[116]],[[120010,120010],"mapped",[117]],[[120011,120011],"mapped",[118]],[[120012,120012],"mapped",[119]],[[120013,120013],"mapped",[120]],[[120014,120014],"mapped",[121]],[[120015,120015],"mapped",[122]],[[120016,120016],"mapped",[97]],[[120017,120017],"mapped",[98]],[[120018,120018],"mapped",[99]],[[120019,120019],"mapped",[100]],[[120020,120020],"mapped",[101]],[[120021,120021],"mapped",[102]],[[120022,120022],"mapped",[103]],[[120023,120023],"mapped",[104]],[[120024,120024],"mapped",[105]],[[120025,120025],"mapped",[106]],[[120026,120026],"mapped",[107]],[[120027,120027],"mapped",[108]],[[120028,120028],"mapped",[109]],[[120029,120029],"mapped",[110]],[[120030,120030],"mapped",[111]],[[120031,120031],"mapped",[112]],[[120032,120032],"mapped",[113]],[[120033,120033],"mapped",[114]],[[120034,120034],"mapped",[115]],[[120035,120035],"mapped",[116]],[[120036,120036],"mapped",[117]],[[120037,120037],"mapped",[118]],[[120038,120038],"mapped",[119]],[[120039,120039],"mapped",[120]],[[120040,120040],"mapped",[121]],[[120041,120041],"mapped",[122]],[[120042,120042],"mapped",[97]],[[120043,120043],"mapped",[98]],[[120044,120044],"mapped",[99]],[[120045,120045],"mapped",[100]],[[120046,120046],"mapped",[101]],[[120047,120047],"mapped",[102]],[[120048,120048],"mapped",[103]],[[120049,120049],"mapped",[104]],[[120050,120050],"mapped",[105]],[[120051,120051],"mapped",[106]],[[120052,120052],"mapped",[107]],[[120053,120053],"mapped",[108]],[[120054,120054],"mapped",[109]],[[120055,120055],"mapped",[110]],[[120056,120056],"mapped",[111]],[[120057,120057],"mapped",[112]],[[120058,120058],"mapped",[113]],[[120059,120059],"mapped",[114]],[[120060,120060],"mapped",[115]],[[120061,120061],"mapped",[116]],[[120062,120062],"mapped",[117]],[[120063,120063],"mapped",[118]],[[120064,120064],"mapped",[119]],[[120065,120065],"mapped",[120]],[[120066,120066],"mapped",[121]],[[120067,120067],"mapped",[122]],[[120068,120068],"mapped",[97]],[[120069,120069],"mapped",[98]],[[120070,120070],"disallowed"],[[120071,120071],"mapped",[100]],[[120072,120072],"mapped",[101]],[[120073,120073],"mapped",[102]],[[120074,120074],"mapped",[103]],[[120075,120076],"disallowed"],[[120077,120077],"mapped",[106]],[[120078,120078],"mapped",[107]],[[120079,120079],"mapped",[108]],[[120080,120080],"mapped",[109]],[[120081,120081],"mapped",[110]],[[120082,120082],"mapped",[111]],[[120083,120083],"mapped",[112]],[[120084,120084],"mapped",[113]],[[120085,120085],"disallowed"],[[120086,120086],"mapped",[115]],[[120087,120087],"mapped",[116]],[[120088,120088],"mapped",[117]],[[120089,120089],"mapped",[118]],[[120090,120090],"mapped",[119]],[[120091,120091],"mapped",[120]],[[120092,120092],"mapped",[121]],[[120093,120093],"disallowed"],[[120094,120094],"mapped",[97]],[[120095,120095],"mapped",[98]],[[120096,120096],"mapped",[99]],[[120097,120097],"mapped",[100]],[[120098,120098],"mapped",[101]],[[120099,120099],"mapped",[102]],[[120100,120100],"mapped",[103]],[[120101,120101],"mapped",[104]],[[120102,120102],"mapped",[105]],[[120103,120103],"mapped",[106]],[[120104,120104],"mapped",[107]],[[120105,120105],"mapped",[108]],[[120106,120106],"mapped",[109]],[[120107,120107],"mapped",[110]],[[120108,120108],"mapped",[111]],[[120109,120109],"mapped",[112]],[[120110,120110],"mapped",[113]],[[120111,120111],"mapped",[114]],[[120112,120112],"mapped",[115]],[[120113,120113],"mapped",[116]],[[120114,120114],"mapped",[117]],[[120115,120115],"mapped",[118]],[[120116,120116],"mapped",[119]],[[120117,120117],"mapped",[120]],[[120118,120118],"mapped",[121]],[[120119,120119],"mapped",[122]],[[120120,120120],"mapped",[97]],[[120121,120121],"mapped",[98]],[[120122,120122],"disallowed"],[[120123,120123],"mapped",[100]],[[120124,120124],"mapped",[101]],[[120125,120125],"mapped",[102]],[[120126,120126],"mapped",[103]],[[120127,120127],"disallowed"],[[120128,120128],"mapped",[105]],[[120129,120129],"mapped",[106]],[[120130,120130],"mapped",[107]],[[120131,120131],"mapped",[108]],[[120132,120132],"mapped",[109]],[[120133,120133],"disallowed"],[[120134,120134],"mapped",[111]],[[120135,120137],"disallowed"],[[120138,120138],"mapped",[115]],[[120139,120139],"mapped",[116]],[[120140,120140],"mapped",[117]],[[120141,120141],"mapped",[118]],[[120142,120142],"mapped",[119]],[[120143,120143],"mapped",[120]],[[120144,120144],"mapped",[121]],[[120145,120145],"disallowed"],[[120146,120146],"mapped",[97]],[[120147,120147],"mapped",[98]],[[120148,120148],"mapped",[99]],[[120149,120149],"mapped",[100]],[[120150,120150],"mapped",[101]],[[120151,120151],"mapped",[102]],[[120152,120152],"mapped",[103]],[[120153,120153],"mapped",[104]],[[120154,120154],"mapped",[105]],[[120155,120155],"mapped",[106]],[[120156,120156],"mapped",[107]],[[120157,120157],"mapped",[108]],[[120158,120158],"mapped",[109]],[[120159,120159],"mapped",[110]],[[120160,120160],"mapped",[111]],[[120161,120161],"mapped",[112]],[[120162,120162],"mapped",[113]],[[120163,120163],"mapped",[114]],[[120164,120164],"mapped",[115]],[[120165,120165],"mapped",[116]],[[120166,120166],"mapped",[117]],[[120167,120167],"mapped",[118]],[[120168,120168],"mapped",[119]],[[120169,120169],"mapped",[120]],[[120170,120170],"mapped",[121]],[[120171,120171],"mapped",[122]],[[120172,120172],"mapped",[97]],[[120173,120173],"mapped",[98]],[[120174,120174],"mapped",[99]],[[120175,120175],"mapped",[100]],[[120176,120176],"mapped",[101]],[[120177,120177],"mapped",[102]],[[120178,120178],"mapped",[103]],[[120179,120179],"mapped",[104]],[[120180,120180],"mapped",[105]],[[120181,120181],"mapped",[106]],[[120182,120182],"mapped",[107]],[[120183,120183],"mapped",[108]],[[120184,120184],"mapped",[109]],[[120185,120185],"mapped",[110]],[[120186,120186],"mapped",[111]],[[120187,120187],"mapped",[112]],[[120188,120188],"mapped",[113]],[[120189,120189],"mapped",[114]],[[120190,120190],"mapped",[115]],[[120191,120191],"mapped",[116]],[[120192,120192],"mapped",[117]],[[120193,120193],"mapped",[118]],[[120194,120194],"mapped",[119]],[[120195,120195],"mapped",[120]],[[120196,120196],"mapped",[121]],[[120197,120197],"mapped",[122]],[[120198,120198],"mapped",[97]],[[120199,120199],"mapped",[98]],[[120200,120200],"mapped",[99]],[[120201,120201],"mapped",[100]],[[120202,120202],"mapped",[101]],[[120203,120203],"mapped",[102]],[[120204,120204],"mapped",[103]],[[120205,120205],"mapped",[104]],[[120206,120206],"mapped",[105]],[[120207,120207],"mapped",[106]],[[120208,120208],"mapped",[107]],[[120209,120209],"mapped",[108]],[[120210,120210],"mapped",[109]],[[120211,120211],"mapped",[110]],[[120212,120212],"mapped",[111]],[[120213,120213],"mapped",[112]],[[120214,120214],"mapped",[113]],[[120215,120215],"mapped",[114]],[[120216,120216],"mapped",[115]],[[120217,120217],"mapped",[116]],[[120218,120218],"mapped",[117]],[[120219,120219],"mapped",[118]],[[120220,120220],"mapped",[119]],[[120221,120221],"mapped",[120]],[[120222,120222],"mapped",[121]],[[120223,120223],"mapped",[122]],[[120224,120224],"mapped",[97]],[[120225,120225],"mapped",[98]],[[120226,120226],"mapped",[99]],[[120227,120227],"mapped",[100]],[[120228,120228],"mapped",[101]],[[120229,120229],"mapped",[102]],[[120230,120230],"mapped",[103]],[[120231,120231],"mapped",[104]],[[120232,120232],"mapped",[105]],[[120233,120233],"mapped",[106]],[[120234,120234],"mapped",[107]],[[120235,120235],"mapped",[108]],[[120236,120236],"mapped",[109]],[[120237,120237],"mapped",[110]],[[120238,120238],"mapped",[111]],[[120239,120239],"mapped",[112]],[[120240,120240],"mapped",[113]],[[120241,120241],"mapped",[114]],[[120242,120242],"mapped",[115]],[[120243,120243],"mapped",[116]],[[120244,120244],"mapped",[117]],[[120245,120245],"mapped",[118]],[[120246,120246],"mapped",[119]],[[120247,120247],"mapped",[120]],[[120248,120248],"mapped",[121]],[[120249,120249],"mapped",[122]],[[120250,120250],"mapped",[97]],[[120251,120251],"mapped",[98]],[[120252,120252],"mapped",[99]],[[120253,120253],"mapped",[100]],[[120254,120254],"mapped",[101]],[[120255,120255],"mapped",[102]],[[120256,120256],"mapped",[103]],[[120257,120257],"mapped",[104]],[[120258,120258],"mapped",[105]],[[120259,120259],"mapped",[106]],[[120260,120260],"mapped",[107]],[[120261,120261],"mapped",[108]],[[120262,120262],"mapped",[109]],[[120263,120263],"mapped",[110]],[[120264,120264],"mapped",[111]],[[120265,120265],"mapped",[112]],[[120266,120266],"mapped",[113]],[[120267,120267],"mapped",[114]],[[120268,120268],"mapped",[115]],[[120269,120269],"mapped",[116]],[[120270,120270],"mapped",[117]],[[120271,120271],"mapped",[118]],[[120272,120272],"mapped",[119]],[[120273,120273],"mapped",[120]],[[120274,120274],"mapped",[121]],[[120275,120275],"mapped",[122]],[[120276,120276],"mapped",[97]],[[120277,120277],"mapped",[98]],[[120278,120278],"mapped",[99]],[[120279,120279],"mapped",[100]],[[120280,120280],"mapped",[101]],[[120281,120281],"mapped",[102]],[[120282,120282],"mapped",[103]],[[120283,120283],"mapped",[104]],[[120284,120284],"mapped",[105]],[[120285,120285],"mapped",[106]],[[120286,120286],"mapped",[107]],[[120287,120287],"mapped",[108]],[[120288,120288],"mapped",[109]],[[120289,120289],"mapped",[110]],[[120290,120290],"mapped",[111]],[[120291,120291],"mapped",[112]],[[120292,120292],"mapped",[113]],[[120293,120293],"mapped",[114]],[[120294,120294],"mapped",[115]],[[120295,120295],"mapped",[116]],[[120296,120296],"mapped",[117]],[[120297,120297],"mapped",[118]],[[120298,120298],"mapped",[119]],[[120299,120299],"mapped",[120]],[[120300,120300],"mapped",[121]],[[120301,120301],"mapped",[122]],[[120302,120302],"mapped",[97]],[[120303,120303],"mapped",[98]],[[120304,120304],"mapped",[99]],[[120305,120305],"mapped",[100]],[[120306,120306],"mapped",[101]],[[120307,120307],"mapped",[102]],[[120308,120308],"mapped",[103]],[[120309,120309],"mapped",[104]],[[120310,120310],"mapped",[105]],[[120311,120311],"mapped",[106]],[[120312,120312],"mapped",[107]],[[120313,120313],"mapped",[108]],[[120314,120314],"mapped",[109]],[[120315,120315],"mapped",[110]],[[120316,120316],"mapped",[111]],[[120317,120317],"mapped",[112]],[[120318,120318],"mapped",[113]],[[120319,120319],"mapped",[114]],[[120320,120320],"mapped",[115]],[[120321,120321],"mapped",[116]],[[120322,120322],"mapped",[117]],[[120323,120323],"mapped",[118]],[[120324,120324],"mapped",[119]],[[120325,120325],"mapped",[120]],[[120326,120326],"mapped",[121]],[[120327,120327],"mapped",[122]],[[120328,120328],"mapped",[97]],[[120329,120329],"mapped",[98]],[[120330,120330],"mapped",[99]],[[120331,120331],"mapped",[100]],[[120332,120332],"mapped",[101]],[[120333,120333],"mapped",[102]],[[120334,120334],"mapped",[103]],[[120335,120335],"mapped",[104]],[[120336,120336],"mapped",[105]],[[120337,120337],"mapped",[106]],[[120338,120338],"mapped",[107]],[[120339,120339],"mapped",[108]],[[120340,120340],"mapped",[109]],[[120341,120341],"mapped",[110]],[[120342,120342],"mapped",[111]],[[120343,120343],"mapped",[112]],[[120344,120344],"mapped",[113]],[[120345,120345],"mapped",[114]],[[120346,120346],"mapped",[115]],[[120347,120347],"mapped",[116]],[[120348,120348],"mapped",[117]],[[120349,120349],"mapped",[118]],[[120350,120350],"mapped",[119]],[[120351,120351],"mapped",[120]],[[120352,120352],"mapped",[121]],[[120353,120353],"mapped",[122]],[[120354,120354],"mapped",[97]],[[120355,120355],"mapped",[98]],[[120356,120356],"mapped",[99]],[[120357,120357],"mapped",[100]],[[120358,120358],"mapped",[101]],[[120359,120359],"mapped",[102]],[[120360,120360],"mapped",[103]],[[120361,120361],"mapped",[104]],[[120362,120362],"mapped",[105]],[[120363,120363],"mapped",[106]],[[120364,120364],"mapped",[107]],[[120365,120365],"mapped",[108]],[[120366,120366],"mapped",[109]],[[120367,120367],"mapped",[110]],[[120368,120368],"mapped",[111]],[[120369,120369],"mapped",[112]],[[120370,120370],"mapped",[113]],[[120371,120371],"mapped",[114]],[[120372,120372],"mapped",[115]],[[120373,120373],"mapped",[116]],[[120374,120374],"mapped",[117]],[[120375,120375],"mapped",[118]],[[120376,120376],"mapped",[119]],[[120377,120377],"mapped",[120]],[[120378,120378],"mapped",[121]],[[120379,120379],"mapped",[122]],[[120380,120380],"mapped",[97]],[[120381,120381],"mapped",[98]],[[120382,120382],"mapped",[99]],[[120383,120383],"mapped",[100]],[[120384,120384],"mapped",[101]],[[120385,120385],"mapped",[102]],[[120386,120386],"mapped",[103]],[[120387,120387],"mapped",[104]],[[120388,120388],"mapped",[105]],[[120389,120389],"mapped",[106]],[[120390,120390],"mapped",[107]],[[120391,120391],"mapped",[108]],[[120392,120392],"mapped",[109]],[[120393,120393],"mapped",[110]],[[120394,120394],"mapped",[111]],[[120395,120395],"mapped",[112]],[[120396,120396],"mapped",[113]],[[120397,120397],"mapped",[114]],[[120398,120398],"mapped",[115]],[[120399,120399],"mapped",[116]],[[120400,120400],"mapped",[117]],[[120401,120401],"mapped",[118]],[[120402,120402],"mapped",[119]],[[120403,120403],"mapped",[120]],[[120404,120404],"mapped",[121]],[[120405,120405],"mapped",[122]],[[120406,120406],"mapped",[97]],[[120407,120407],"mapped",[98]],[[120408,120408],"mapped",[99]],[[120409,120409],"mapped",[100]],[[120410,120410],"mapped",[101]],[[120411,120411],"mapped",[102]],[[120412,120412],"mapped",[103]],[[120413,120413],"mapped",[104]],[[120414,120414],"mapped",[105]],[[120415,120415],"mapped",[106]],[[120416,120416],"mapped",[107]],[[120417,120417],"mapped",[108]],[[120418,120418],"mapped",[109]],[[120419,120419],"mapped",[110]],[[120420,120420],"mapped",[111]],[[120421,120421],"mapped",[112]],[[120422,120422],"mapped",[113]],[[120423,120423],"mapped",[114]],[[120424,120424],"mapped",[115]],[[120425,120425],"mapped",[116]],[[120426,120426],"mapped",[117]],[[120427,120427],"mapped",[118]],[[120428,120428],"mapped",[119]],[[120429,120429],"mapped",[120]],[[120430,120430],"mapped",[121]],[[120431,120431],"mapped",[122]],[[120432,120432],"mapped",[97]],[[120433,120433],"mapped",[98]],[[120434,120434],"mapped",[99]],[[120435,120435],"mapped",[100]],[[120436,120436],"mapped",[101]],[[120437,120437],"mapped",[102]],[[120438,120438],"mapped",[103]],[[120439,120439],"mapped",[104]],[[120440,120440],"mapped",[105]],[[120441,120441],"mapped",[106]],[[120442,120442],"mapped",[107]],[[120443,120443],"mapped",[108]],[[120444,120444],"mapped",[109]],[[120445,120445],"mapped",[110]],[[120446,120446],"mapped",[111]],[[120447,120447],"mapped",[112]],[[120448,120448],"mapped",[113]],[[120449,120449],"mapped",[114]],[[120450,120450],"mapped",[115]],[[120451,120451],"mapped",[116]],[[120452,120452],"mapped",[117]],[[120453,120453],"mapped",[118]],[[120454,120454],"mapped",[119]],[[120455,120455],"mapped",[120]],[[120456,120456],"mapped",[121]],[[120457,120457],"mapped",[122]],[[120458,120458],"mapped",[97]],[[120459,120459],"mapped",[98]],[[120460,120460],"mapped",[99]],[[120461,120461],"mapped",[100]],[[120462,120462],"mapped",[101]],[[120463,120463],"mapped",[102]],[[120464,120464],"mapped",[103]],[[120465,120465],"mapped",[104]],[[120466,120466],"mapped",[105]],[[120467,120467],"mapped",[106]],[[120468,120468],"mapped",[107]],[[120469,120469],"mapped",[108]],[[120470,120470],"mapped",[109]],[[120471,120471],"mapped",[110]],[[120472,120472],"mapped",[111]],[[120473,120473],"mapped",[112]],[[120474,120474],"mapped",[113]],[[120475,120475],"mapped",[114]],[[120476,120476],"mapped",[115]],[[120477,120477],"mapped",[116]],[[120478,120478],"mapped",[117]],[[120479,120479],"mapped",[118]],[[120480,120480],"mapped",[119]],[[120481,120481],"mapped",[120]],[[120482,120482],"mapped",[121]],[[120483,120483],"mapped",[122]],[[120484,120484],"mapped",[305]],[[120485,120485],"mapped",[567]],[[120486,120487],"disallowed"],[[120488,120488],"mapped",[945]],[[120489,120489],"mapped",[946]],[[120490,120490],"mapped",[947]],[[120491,120491],"mapped",[948]],[[120492,120492],"mapped",[949]],[[120493,120493],"mapped",[950]],[[120494,120494],"mapped",[951]],[[120495,120495],"mapped",[952]],[[120496,120496],"mapped",[953]],[[120497,120497],"mapped",[954]],[[120498,120498],"mapped",[955]],[[120499,120499],"mapped",[956]],[[120500,120500],"mapped",[957]],[[120501,120501],"mapped",[958]],[[120502,120502],"mapped",[959]],[[120503,120503],"mapped",[960]],[[120504,120504],"mapped",[961]],[[120505,120505],"mapped",[952]],[[120506,120506],"mapped",[963]],[[120507,120507],"mapped",[964]],[[120508,120508],"mapped",[965]],[[120509,120509],"mapped",[966]],[[120510,120510],"mapped",[967]],[[120511,120511],"mapped",[968]],[[120512,120512],"mapped",[969]],[[120513,120513],"mapped",[8711]],[[120514,120514],"mapped",[945]],[[120515,120515],"mapped",[946]],[[120516,120516],"mapped",[947]],[[120517,120517],"mapped",[948]],[[120518,120518],"mapped",[949]],[[120519,120519],"mapped",[950]],[[120520,120520],"mapped",[951]],[[120521,120521],"mapped",[952]],[[120522,120522],"mapped",[953]],[[120523,120523],"mapped",[954]],[[120524,120524],"mapped",[955]],[[120525,120525],"mapped",[956]],[[120526,120526],"mapped",[957]],[[120527,120527],"mapped",[958]],[[120528,120528],"mapped",[959]],[[120529,120529],"mapped",[960]],[[120530,120530],"mapped",[961]],[[120531,120532],"mapped",[963]],[[120533,120533],"mapped",[964]],[[120534,120534],"mapped",[965]],[[120535,120535],"mapped",[966]],[[120536,120536],"mapped",[967]],[[120537,120537],"mapped",[968]],[[120538,120538],"mapped",[969]],[[120539,120539],"mapped",[8706]],[[120540,120540],"mapped",[949]],[[120541,120541],"mapped",[952]],[[120542,120542],"mapped",[954]],[[120543,120543],"mapped",[966]],[[120544,120544],"mapped",[961]],[[120545,120545],"mapped",[960]],[[120546,120546],"mapped",[945]],[[120547,120547],"mapped",[946]],[[120548,120548],"mapped",[947]],[[120549,120549],"mapped",[948]],[[120550,120550],"mapped",[949]],[[120551,120551],"mapped",[950]],[[120552,120552],"mapped",[951]],[[120553,120553],"mapped",[952]],[[120554,120554],"mapped",[953]],[[120555,120555],"mapped",[954]],[[120556,120556],"mapped",[955]],[[120557,120557],"mapped",[956]],[[120558,120558],"mapped",[957]],[[120559,120559],"mapped",[958]],[[120560,120560],"mapped",[959]],[[120561,120561],"mapped",[960]],[[120562,120562],"mapped",[961]],[[120563,120563],"mapped",[952]],[[120564,120564],"mapped",[963]],[[120565,120565],"mapped",[964]],[[120566,120566],"mapped",[965]],[[120567,120567],"mapped",[966]],[[120568,120568],"mapped",[967]],[[120569,120569],"mapped",[968]],[[120570,120570],"mapped",[969]],[[120571,120571],"mapped",[8711]],[[120572,120572],"mapped",[945]],[[120573,120573],"mapped",[946]],[[120574,120574],"mapped",[947]],[[120575,120575],"mapped",[948]],[[120576,120576],"mapped",[949]],[[120577,120577],"mapped",[950]],[[120578,120578],"mapped",[951]],[[120579,120579],"mapped",[952]],[[120580,120580],"mapped",[953]],[[120581,120581],"mapped",[954]],[[120582,120582],"mapped",[955]],[[120583,120583],"mapped",[956]],[[120584,120584],"mapped",[957]],[[120585,120585],"mapped",[958]],[[120586,120586],"mapped",[959]],[[120587,120587],"mapped",[960]],[[120588,120588],"mapped",[961]],[[120589,120590],"mapped",[963]],[[120591,120591],"mapped",[964]],[[120592,120592],"mapped",[965]],[[120593,120593],"mapped",[966]],[[120594,120594],"mapped",[967]],[[120595,120595],"mapped",[968]],[[120596,120596],"mapped",[969]],[[120597,120597],"mapped",[8706]],[[120598,120598],"mapped",[949]],[[120599,120599],"mapped",[952]],[[120600,120600],"mapped",[954]],[[120601,120601],"mapped",[966]],[[120602,120602],"mapped",[961]],[[120603,120603],"mapped",[960]],[[120604,120604],"mapped",[945]],[[120605,120605],"mapped",[946]],[[120606,120606],"mapped",[947]],[[120607,120607],"mapped",[948]],[[120608,120608],"mapped",[949]],[[120609,120609],"mapped",[950]],[[120610,120610],"mapped",[951]],[[120611,120611],"mapped",[952]],[[120612,120612],"mapped",[953]],[[120613,120613],"mapped",[954]],[[120614,120614],"mapped",[955]],[[120615,120615],"mapped",[956]],[[120616,120616],"mapped",[957]],[[120617,120617],"mapped",[958]],[[120618,120618],"mapped",[959]],[[120619,120619],"mapped",[960]],[[120620,120620],"mapped",[961]],[[120621,120621],"mapped",[952]],[[120622,120622],"mapped",[963]],[[120623,120623],"mapped",[964]],[[120624,120624],"mapped",[965]],[[120625,120625],"mapped",[966]],[[120626,120626],"mapped",[967]],[[120627,120627],"mapped",[968]],[[120628,120628],"mapped",[969]],[[120629,120629],"mapped",[8711]],[[120630,120630],"mapped",[945]],[[120631,120631],"mapped",[946]],[[120632,120632],"mapped",[947]],[[120633,120633],"mapped",[948]],[[120634,120634],"mapped",[949]],[[120635,120635],"mapped",[950]],[[120636,120636],"mapped",[951]],[[120637,120637],"mapped",[952]],[[120638,120638],"mapped",[953]],[[120639,120639],"mapped",[954]],[[120640,120640],"mapped",[955]],[[120641,120641],"mapped",[956]],[[120642,120642],"mapped",[957]],[[120643,120643],"mapped",[958]],[[120644,120644],"mapped",[959]],[[120645,120645],"mapped",[960]],[[120646,120646],"mapped",[961]],[[120647,120648],"mapped",[963]],[[120649,120649],"mapped",[964]],[[120650,120650],"mapped",[965]],[[120651,120651],"mapped",[966]],[[120652,120652],"mapped",[967]],[[120653,120653],"mapped",[968]],[[120654,120654],"mapped",[969]],[[120655,120655],"mapped",[8706]],[[120656,120656],"mapped",[949]],[[120657,120657],"mapped",[952]],[[120658,120658],"mapped",[954]],[[120659,120659],"mapped",[966]],[[120660,120660],"mapped",[961]],[[120661,120661],"mapped",[960]],[[120662,120662],"mapped",[945]],[[120663,120663],"mapped",[946]],[[120664,120664],"mapped",[947]],[[120665,120665],"mapped",[948]],[[120666,120666],"mapped",[949]],[[120667,120667],"mapped",[950]],[[120668,120668],"mapped",[951]],[[120669,120669],"mapped",[952]],[[120670,120670],"mapped",[953]],[[120671,120671],"mapped",[954]],[[120672,120672],"mapped",[955]],[[120673,120673],"mapped",[956]],[[120674,120674],"mapped",[957]],[[120675,120675],"mapped",[958]],[[120676,120676],"mapped",[959]],[[120677,120677],"mapped",[960]],[[120678,120678],"mapped",[961]],[[120679,120679],"mapped",[952]],[[120680,120680],"mapped",[963]],[[120681,120681],"mapped",[964]],[[120682,120682],"mapped",[965]],[[120683,120683],"mapped",[966]],[[120684,120684],"mapped",[967]],[[120685,120685],"mapped",[968]],[[120686,120686],"mapped",[969]],[[120687,120687],"mapped",[8711]],[[120688,120688],"mapped",[945]],[[120689,120689],"mapped",[946]],[[120690,120690],"mapped",[947]],[[120691,120691],"mapped",[948]],[[120692,120692],"mapped",[949]],[[120693,120693],"mapped",[950]],[[120694,120694],"mapped",[951]],[[120695,120695],"mapped",[952]],[[120696,120696],"mapped",[953]],[[120697,120697],"mapped",[954]],[[120698,120698],"mapped",[955]],[[120699,120699],"mapped",[956]],[[120700,120700],"mapped",[957]],[[120701,120701],"mapped",[958]],[[120702,120702],"mapped",[959]],[[120703,120703],"mapped",[960]],[[120704,120704],"mapped",[961]],[[120705,120706],"mapped",[963]],[[120707,120707],"mapped",[964]],[[120708,120708],"mapped",[965]],[[120709,120709],"mapped",[966]],[[120710,120710],"mapped",[967]],[[120711,120711],"mapped",[968]],[[120712,120712],"mapped",[969]],[[120713,120713],"mapped",[8706]],[[120714,120714],"mapped",[949]],[[120715,120715],"mapped",[952]],[[120716,120716],"mapped",[954]],[[120717,120717],"mapped",[966]],[[120718,120718],"mapped",[961]],[[120719,120719],"mapped",[960]],[[120720,120720],"mapped",[945]],[[120721,120721],"mapped",[946]],[[120722,120722],"mapped",[947]],[[120723,120723],"mapped",[948]],[[120724,120724],"mapped",[949]],[[120725,120725],"mapped",[950]],[[120726,120726],"mapped",[951]],[[120727,120727],"mapped",[952]],[[120728,120728],"mapped",[953]],[[120729,120729],"mapped",[954]],[[120730,120730],"mapped",[955]],[[120731,120731],"mapped",[956]],[[120732,120732],"mapped",[957]],[[120733,120733],"mapped",[958]],[[120734,120734],"mapped",[959]],[[120735,120735],"mapped",[960]],[[120736,120736],"mapped",[961]],[[120737,120737],"mapped",[952]],[[120738,120738],"mapped",[963]],[[120739,120739],"mapped",[964]],[[120740,120740],"mapped",[965]],[[120741,120741],"mapped",[966]],[[120742,120742],"mapped",[967]],[[120743,120743],"mapped",[968]],[[120744,120744],"mapped",[969]],[[120745,120745],"mapped",[8711]],[[120746,120746],"mapped",[945]],[[120747,120747],"mapped",[946]],[[120748,120748],"mapped",[947]],[[120749,120749],"mapped",[948]],[[120750,120750],"mapped",[949]],[[120751,120751],"mapped",[950]],[[120752,120752],"mapped",[951]],[[120753,120753],"mapped",[952]],[[120754,120754],"mapped",[953]],[[120755,120755],"mapped",[954]],[[120756,120756],"mapped",[955]],[[120757,120757],"mapped",[956]],[[120758,120758],"mapped",[957]],[[120759,120759],"mapped",[958]],[[120760,120760],"mapped",[959]],[[120761,120761],"mapped",[960]],[[120762,120762],"mapped",[961]],[[120763,120764],"mapped",[963]],[[120765,120765],"mapped",[964]],[[120766,120766],"mapped",[965]],[[120767,120767],"mapped",[966]],[[120768,120768],"mapped",[967]],[[120769,120769],"mapped",[968]],[[120770,120770],"mapped",[969]],[[120771,120771],"mapped",[8706]],[[120772,120772],"mapped",[949]],[[120773,120773],"mapped",[952]],[[120774,120774],"mapped",[954]],[[120775,120775],"mapped",[966]],[[120776,120776],"mapped",[961]],[[120777,120777],"mapped",[960]],[[120778,120779],"mapped",[989]],[[120780,120781],"disallowed"],[[120782,120782],"mapped",[48]],[[120783,120783],"mapped",[49]],[[120784,120784],"mapped",[50]],[[120785,120785],"mapped",[51]],[[120786,120786],"mapped",[52]],[[120787,120787],"mapped",[53]],[[120788,120788],"mapped",[54]],[[120789,120789],"mapped",[55]],[[120790,120790],"mapped",[56]],[[120791,120791],"mapped",[57]],[[120792,120792],"mapped",[48]],[[120793,120793],"mapped",[49]],[[120794,120794],"mapped",[50]],[[120795,120795],"mapped",[51]],[[120796,120796],"mapped",[52]],[[120797,120797],"mapped",[53]],[[120798,120798],"mapped",[54]],[[120799,120799],"mapped",[55]],[[120800,120800],"mapped",[56]],[[120801,120801],"mapped",[57]],[[120802,120802],"mapped",[48]],[[120803,120803],"mapped",[49]],[[120804,120804],"mapped",[50]],[[120805,120805],"mapped",[51]],[[120806,120806],"mapped",[52]],[[120807,120807],"mapped",[53]],[[120808,120808],"mapped",[54]],[[120809,120809],"mapped",[55]],[[120810,120810],"mapped",[56]],[[120811,120811],"mapped",[57]],[[120812,120812],"mapped",[48]],[[120813,120813],"mapped",[49]],[[120814,120814],"mapped",[50]],[[120815,120815],"mapped",[51]],[[120816,120816],"mapped",[52]],[[120817,120817],"mapped",[53]],[[120818,120818],"mapped",[54]],[[120819,120819],"mapped",[55]],[[120820,120820],"mapped",[56]],[[120821,120821],"mapped",[57]],[[120822,120822],"mapped",[48]],[[120823,120823],"mapped",[49]],[[120824,120824],"mapped",[50]],[[120825,120825],"mapped",[51]],[[120826,120826],"mapped",[52]],[[120827,120827],"mapped",[53]],[[120828,120828],"mapped",[54]],[[120829,120829],"mapped",[55]],[[120830,120830],"mapped",[56]],[[120831,120831],"mapped",[57]],[[120832,121343],"valid",[],"NV8"],[[121344,121398],"valid"],[[121399,121402],"valid",[],"NV8"],[[121403,121452],"valid"],[[121453,121460],"valid",[],"NV8"],[[121461,121461],"valid"],[[121462,121475],"valid",[],"NV8"],[[121476,121476],"valid"],[[121477,121483],"valid",[],"NV8"],[[121484,121498],"disallowed"],[[121499,121503],"valid"],[[121504,121504],"disallowed"],[[121505,121519],"valid"],[[121520,124927],"disallowed"],[[124928,125124],"valid"],[[125125,125126],"disallowed"],[[125127,125135],"valid",[],"NV8"],[[125136,125142],"valid"],[[125143,126463],"disallowed"],[[126464,126464],"mapped",[1575]],[[126465,126465],"mapped",[1576]],[[126466,126466],"mapped",[1580]],[[126467,126467],"mapped",[1583]],[[126468,126468],"disallowed"],[[126469,126469],"mapped",[1608]],[[126470,126470],"mapped",[1586]],[[126471,126471],"mapped",[1581]],[[126472,126472],"mapped",[1591]],[[126473,126473],"mapped",[1610]],[[126474,126474],"mapped",[1603]],[[126475,126475],"mapped",[1604]],[[126476,126476],"mapped",[1605]],[[126477,126477],"mapped",[1606]],[[126478,126478],"mapped",[1587]],[[126479,126479],"mapped",[1593]],[[126480,126480],"mapped",[1601]],[[126481,126481],"mapped",[1589]],[[126482,126482],"mapped",[1602]],[[126483,126483],"mapped",[1585]],[[126484,126484],"mapped",[1588]],[[126485,126485],"mapped",[1578]],[[126486,126486],"mapped",[1579]],[[126487,126487],"mapped",[1582]],[[126488,126488],"mapped",[1584]],[[126489,126489],"mapped",[1590]],[[126490,126490],"mapped",[1592]],[[126491,126491],"mapped",[1594]],[[126492,126492],"mapped",[1646]],[[126493,126493],"mapped",[1722]],[[126494,126494],"mapped",[1697]],[[126495,126495],"mapped",[1647]],[[126496,126496],"disallowed"],[[126497,126497],"mapped",[1576]],[[126498,126498],"mapped",[1580]],[[126499,126499],"disallowed"],[[126500,126500],"mapped",[1607]],[[126501,126502],"disallowed"],[[126503,126503],"mapped",[1581]],[[126504,126504],"disallowed"],[[126505,126505],"mapped",[1610]],[[126506,126506],"mapped",[1603]],[[126507,126507],"mapped",[1604]],[[126508,126508],"mapped",[1605]],[[126509,126509],"mapped",[1606]],[[126510,126510],"mapped",[1587]],[[126511,126511],"mapped",[1593]],[[126512,126512],"mapped",[1601]],[[126513,126513],"mapped",[1589]],[[126514,126514],"mapped",[1602]],[[126515,126515],"disallowed"],[[126516,126516],"mapped",[1588]],[[126517,126517],"mapped",[1578]],[[126518,126518],"mapped",[1579]],[[126519,126519],"mapped",[1582]],[[126520,126520],"disallowed"],[[126521,126521],"mapped",[1590]],[[126522,126522],"disallowed"],[[126523,126523],"mapped",[1594]],[[126524,126529],"disallowed"],[[126530,126530],"mapped",[1580]],[[126531,126534],"disallowed"],[[126535,126535],"mapped",[1581]],[[126536,126536],"disallowed"],[[126537,126537],"mapped",[1610]],[[126538,126538],"disallowed"],[[126539,126539],"mapped",[1604]],[[126540,126540],"disallowed"],[[126541,126541],"mapped",[1606]],[[126542,126542],"mapped",[1587]],[[126543,126543],"mapped",[1593]],[[126544,126544],"disallowed"],[[126545,126545],"mapped",[1589]],[[126546,126546],"mapped",[1602]],[[126547,126547],"disallowed"],[[126548,126548],"mapped",[1588]],[[126549,126550],"disallowed"],[[126551,126551],"mapped",[1582]],[[126552,126552],"disallowed"],[[126553,126553],"mapped",[1590]],[[126554,126554],"disallowed"],[[126555,126555],"mapped",[1594]],[[126556,126556],"disallowed"],[[126557,126557],"mapped",[1722]],[[126558,126558],"disallowed"],[[126559,126559],"mapped",[1647]],[[126560,126560],"disallowed"],[[126561,126561],"mapped",[1576]],[[126562,126562],"mapped",[1580]],[[126563,126563],"disallowed"],[[126564,126564],"mapped",[1607]],[[126565,126566],"disallowed"],[[126567,126567],"mapped",[1581]],[[126568,126568],"mapped",[1591]],[[126569,126569],"mapped",[1610]],[[126570,126570],"mapped",[1603]],[[126571,126571],"disallowed"],[[126572,126572],"mapped",[1605]],[[126573,126573],"mapped",[1606]],[[126574,126574],"mapped",[1587]],[[126575,126575],"mapped",[1593]],[[126576,126576],"mapped",[1601]],[[126577,126577],"mapped",[1589]],[[126578,126578],"mapped",[1602]],[[126579,126579],"disallowed"],[[126580,126580],"mapped",[1588]],[[126581,126581],"mapped",[1578]],[[126582,126582],"mapped",[1579]],[[126583,126583],"mapped",[1582]],[[126584,126584],"disallowed"],[[126585,126585],"mapped",[1590]],[[126586,126586],"mapped",[1592]],[[126587,126587],"mapped",[1594]],[[126588,126588],"mapped",[1646]],[[126589,126589],"disallowed"],[[126590,126590],"mapped",[1697]],[[126591,126591],"disallowed"],[[126592,126592],"mapped",[1575]],[[126593,126593],"mapped",[1576]],[[126594,126594],"mapped",[1580]],[[126595,126595],"mapped",[1583]],[[126596,126596],"mapped",[1607]],[[126597,126597],"mapped",[1608]],[[126598,126598],"mapped",[1586]],[[126599,126599],"mapped",[1581]],[[126600,126600],"mapped",[1591]],[[126601,126601],"mapped",[1610]],[[126602,126602],"disallowed"],[[126603,126603],"mapped",[1604]],[[126604,126604],"mapped",[1605]],[[126605,126605],"mapped",[1606]],[[126606,126606],"mapped",[1587]],[[126607,126607],"mapped",[1593]],[[126608,126608],"mapped",[1601]],[[126609,126609],"mapped",[1589]],[[126610,126610],"mapped",[1602]],[[126611,126611],"mapped",[1585]],[[126612,126612],"mapped",[1588]],[[126613,126613],"mapped",[1578]],[[126614,126614],"mapped",[1579]],[[126615,126615],"mapped",[1582]],[[126616,126616],"mapped",[1584]],[[126617,126617],"mapped",[1590]],[[126618,126618],"mapped",[1592]],[[126619,126619],"mapped",[1594]],[[126620,126624],"disallowed"],[[126625,126625],"mapped",[1576]],[[126626,126626],"mapped",[1580]],[[126627,126627],"mapped",[1583]],[[126628,126628],"disallowed"],[[126629,126629],"mapped",[1608]],[[126630,126630],"mapped",[1586]],[[126631,126631],"mapped",[1581]],[[126632,126632],"mapped",[1591]],[[126633,126633],"mapped",[1610]],[[126634,126634],"disallowed"],[[126635,126635],"mapped",[1604]],[[126636,126636],"mapped",[1605]],[[126637,126637],"mapped",[1606]],[[126638,126638],"mapped",[1587]],[[126639,126639],"mapped",[1593]],[[126640,126640],"mapped",[1601]],[[126641,126641],"mapped",[1589]],[[126642,126642],"mapped",[1602]],[[126643,126643],"mapped",[1585]],[[126644,126644],"mapped",[1588]],[[126645,126645],"mapped",[1578]],[[126646,126646],"mapped",[1579]],[[126647,126647],"mapped",[1582]],[[126648,126648],"mapped",[1584]],[[126649,126649],"mapped",[1590]],[[126650,126650],"mapped",[1592]],[[126651,126651],"mapped",[1594]],[[126652,126703],"disallowed"],[[126704,126705],"valid",[],"NV8"],[[126706,126975],"disallowed"],[[126976,127019],"valid",[],"NV8"],[[127020,127023],"disallowed"],[[127024,127123],"valid",[],"NV8"],[[127124,127135],"disallowed"],[[127136,127150],"valid",[],"NV8"],[[127151,127152],"disallowed"],[[127153,127166],"valid",[],"NV8"],[[127167,127167],"valid",[],"NV8"],[[127168,127168],"disallowed"],[[127169,127183],"valid",[],"NV8"],[[127184,127184],"disallowed"],[[127185,127199],"valid",[],"NV8"],[[127200,127221],"valid",[],"NV8"],[[127222,127231],"disallowed"],[[127232,127232],"disallowed"],[[127233,127233],"disallowed_STD3_mapped",[48,44]],[[127234,127234],"disallowed_STD3_mapped",[49,44]],[[127235,127235],"disallowed_STD3_mapped",[50,44]],[[127236,127236],"disallowed_STD3_mapped",[51,44]],[[127237,127237],"disallowed_STD3_mapped",[52,44]],[[127238,127238],"disallowed_STD3_mapped",[53,44]],[[127239,127239],"disallowed_STD3_mapped",[54,44]],[[127240,127240],"disallowed_STD3_mapped",[55,44]],[[127241,127241],"disallowed_STD3_mapped",[56,44]],[[127242,127242],"disallowed_STD3_mapped",[57,44]],[[127243,127244],"valid",[],"NV8"],[[127245,127247],"disallowed"],[[127248,127248],"disallowed_STD3_mapped",[40,97,41]],[[127249,127249],"disallowed_STD3_mapped",[40,98,41]],[[127250,127250],"disallowed_STD3_mapped",[40,99,41]],[[127251,127251],"disallowed_STD3_mapped",[40,100,41]],[[127252,127252],"disallowed_STD3_mapped",[40,101,41]],[[127253,127253],"disallowed_STD3_mapped",[40,102,41]],[[127254,127254],"disallowed_STD3_mapped",[40,103,41]],[[127255,127255],"disallowed_STD3_mapped",[40,104,41]],[[127256,127256],"disallowed_STD3_mapped",[40,105,41]],[[127257,127257],"disallowed_STD3_mapped",[40,106,41]],[[127258,127258],"disallowed_STD3_mapped",[40,107,41]],[[127259,127259],"disallowed_STD3_mapped",[40,108,41]],[[127260,127260],"disallowed_STD3_mapped",[40,109,41]],[[127261,127261],"disallowed_STD3_mapped",[40,110,41]],[[127262,127262],"disallowed_STD3_mapped",[40,111,41]],[[127263,127263],"disallowed_STD3_mapped",[40,112,41]],[[127264,127264],"disallowed_STD3_mapped",[40,113,41]],[[127265,127265],"disallowed_STD3_mapped",[40,114,41]],[[127266,127266],"disallowed_STD3_mapped",[40,115,41]],[[127267,127267],"disallowed_STD3_mapped",[40,116,41]],[[127268,127268],"disallowed_STD3_mapped",[40,117,41]],[[127269,127269],"disallowed_STD3_mapped",[40,118,41]],[[127270,127270],"disallowed_STD3_mapped",[40,119,41]],[[127271,127271],"disallowed_STD3_mapped",[40,120,41]],[[127272,127272],"disallowed_STD3_mapped",[40,121,41]],[[127273,127273],"disallowed_STD3_mapped",[40,122,41]],[[127274,127274],"mapped",[12308,115,12309]],[[127275,127275],"mapped",[99]],[[127276,127276],"mapped",[114]],[[127277,127277],"mapped",[99,100]],[[127278,127278],"mapped",[119,122]],[[127279,127279],"disallowed"],[[127280,127280],"mapped",[97]],[[127281,127281],"mapped",[98]],[[127282,127282],"mapped",[99]],[[127283,127283],"mapped",[100]],[[127284,127284],"mapped",[101]],[[127285,127285],"mapped",[102]],[[127286,127286],"mapped",[103]],[[127287,127287],"mapped",[104]],[[127288,127288],"mapped",[105]],[[127289,127289],"mapped",[106]],[[127290,127290],"mapped",[107]],[[127291,127291],"mapped",[108]],[[127292,127292],"mapped",[109]],[[127293,127293],"mapped",[110]],[[127294,127294],"mapped",[111]],[[127295,127295],"mapped",[112]],[[127296,127296],"mapped",[113]],[[127297,127297],"mapped",[114]],[[127298,127298],"mapped",[115]],[[127299,127299],"mapped",[116]],[[127300,127300],"mapped",[117]],[[127301,127301],"mapped",[118]],[[127302,127302],"mapped",[119]],[[127303,127303],"mapped",[120]],[[127304,127304],"mapped",[121]],[[127305,127305],"mapped",[122]],[[127306,127306],"mapped",[104,118]],[[127307,127307],"mapped",[109,118]],[[127308,127308],"mapped",[115,100]],[[127309,127309],"mapped",[115,115]],[[127310,127310],"mapped",[112,112,118]],[[127311,127311],"mapped",[119,99]],[[127312,127318],"valid",[],"NV8"],[[127319,127319],"valid",[],"NV8"],[[127320,127326],"valid",[],"NV8"],[[127327,127327],"valid",[],"NV8"],[[127328,127337],"valid",[],"NV8"],[[127338,127338],"mapped",[109,99]],[[127339,127339],"mapped",[109,100]],[[127340,127343],"disallowed"],[[127344,127352],"valid",[],"NV8"],[[127353,127353],"valid",[],"NV8"],[[127354,127354],"valid",[],"NV8"],[[127355,127356],"valid",[],"NV8"],[[127357,127358],"valid",[],"NV8"],[[127359,127359],"valid",[],"NV8"],[[127360,127369],"valid",[],"NV8"],[[127370,127373],"valid",[],"NV8"],[[127374,127375],"valid",[],"NV8"],[[127376,127376],"mapped",[100,106]],[[127377,127386],"valid",[],"NV8"],[[127387,127461],"disallowed"],[[127462,127487],"valid",[],"NV8"],[[127488,127488],"mapped",[12411,12363]],[[127489,127489],"mapped",[12467,12467]],[[127490,127490],"mapped",[12469]],[[127491,127503],"disallowed"],[[127504,127504],"mapped",[25163]],[[127505,127505],"mapped",[23383]],[[127506,127506],"mapped",[21452]],[[127507,127507],"mapped",[12487]],[[127508,127508],"mapped",[20108]],[[127509,127509],"mapped",[22810]],[[127510,127510],"mapped",[35299]],[[127511,127511],"mapped",[22825]],[[127512,127512],"mapped",[20132]],[[127513,127513],"mapped",[26144]],[[127514,127514],"mapped",[28961]],[[127515,127515],"mapped",[26009]],[[127516,127516],"mapped",[21069]],[[127517,127517],"mapped",[24460]],[[127518,127518],"mapped",[20877]],[[127519,127519],"mapped",[26032]],[[127520,127520],"mapped",[21021]],[[127521,127521],"mapped",[32066]],[[127522,127522],"mapped",[29983]],[[127523,127523],"mapped",[36009]],[[127524,127524],"mapped",[22768]],[[127525,127525],"mapped",[21561]],[[127526,127526],"mapped",[28436]],[[127527,127527],"mapped",[25237]],[[127528,127528],"mapped",[25429]],[[127529,127529],"mapped",[19968]],[[127530,127530],"mapped",[19977]],[[127531,127531],"mapped",[36938]],[[127532,127532],"mapped",[24038]],[[127533,127533],"mapped",[20013]],[[127534,127534],"mapped",[21491]],[[127535,127535],"mapped",[25351]],[[127536,127536],"mapped",[36208]],[[127537,127537],"mapped",[25171]],[[127538,127538],"mapped",[31105]],[[127539,127539],"mapped",[31354]],[[127540,127540],"mapped",[21512]],[[127541,127541],"mapped",[28288]],[[127542,127542],"mapped",[26377]],[[127543,127543],"mapped",[26376]],[[127544,127544],"mapped",[30003]],[[127545,127545],"mapped",[21106]],[[127546,127546],"mapped",[21942]],[[127547,127551],"disallowed"],[[127552,127552],"mapped",[12308,26412,12309]],[[127553,127553],"mapped",[12308,19977,12309]],[[127554,127554],"mapped",[12308,20108,12309]],[[127555,127555],"mapped",[12308,23433,12309]],[[127556,127556],"mapped",[12308,28857,12309]],[[127557,127557],"mapped",[12308,25171,12309]],[[127558,127558],"mapped",[12308,30423,12309]],[[127559,127559],"mapped",[12308,21213,12309]],[[127560,127560],"mapped",[12308,25943,12309]],[[127561,127567],"disallowed"],[[127568,127568],"mapped",[24471]],[[127569,127569],"mapped",[21487]],[[127570,127743],"disallowed"],[[127744,127776],"valid",[],"NV8"],[[127777,127788],"valid",[],"NV8"],[[127789,127791],"valid",[],"NV8"],[[127792,127797],"valid",[],"NV8"],[[127798,127798],"valid",[],"NV8"],[[127799,127868],"valid",[],"NV8"],[[127869,127869],"valid",[],"NV8"],[[127870,127871],"valid",[],"NV8"],[[127872,127891],"valid",[],"NV8"],[[127892,127903],"valid",[],"NV8"],[[127904,127940],"valid",[],"NV8"],[[127941,127941],"valid",[],"NV8"],[[127942,127946],"valid",[],"NV8"],[[127947,127950],"valid",[],"NV8"],[[127951,127955],"valid",[],"NV8"],[[127956,127967],"valid",[],"NV8"],[[127968,127984],"valid",[],"NV8"],[[127985,127991],"valid",[],"NV8"],[[127992,127999],"valid",[],"NV8"],[[128000,128062],"valid",[],"NV8"],[[128063,128063],"valid",[],"NV8"],[[128064,128064],"valid",[],"NV8"],[[128065,128065],"valid",[],"NV8"],[[128066,128247],"valid",[],"NV8"],[[128248,128248],"valid",[],"NV8"],[[128249,128252],"valid",[],"NV8"],[[128253,128254],"valid",[],"NV8"],[[128255,128255],"valid",[],"NV8"],[[128256,128317],"valid",[],"NV8"],[[128318,128319],"valid",[],"NV8"],[[128320,128323],"valid",[],"NV8"],[[128324,128330],"valid",[],"NV8"],[[128331,128335],"valid",[],"NV8"],[[128336,128359],"valid",[],"NV8"],[[128360,128377],"valid",[],"NV8"],[[128378,128378],"disallowed"],[[128379,128419],"valid",[],"NV8"],[[128420,128420],"disallowed"],[[128421,128506],"valid",[],"NV8"],[[128507,128511],"valid",[],"NV8"],[[128512,128512],"valid",[],"NV8"],[[128513,128528],"valid",[],"NV8"],[[128529,128529],"valid",[],"NV8"],[[128530,128532],"valid",[],"NV8"],[[128533,128533],"valid",[],"NV8"],[[128534,128534],"valid",[],"NV8"],[[128535,128535],"valid",[],"NV8"],[[128536,128536],"valid",[],"NV8"],[[128537,128537],"valid",[],"NV8"],[[128538,128538],"valid",[],"NV8"],[[128539,128539],"valid",[],"NV8"],[[128540,128542],"valid",[],"NV8"],[[128543,128543],"valid",[],"NV8"],[[128544,128549],"valid",[],"NV8"],[[128550,128551],"valid",[],"NV8"],[[128552,128555],"valid",[],"NV8"],[[128556,128556],"valid",[],"NV8"],[[128557,128557],"valid",[],"NV8"],[[128558,128559],"valid",[],"NV8"],[[128560,128563],"valid",[],"NV8"],[[128564,128564],"valid",[],"NV8"],[[128565,128576],"valid",[],"NV8"],[[128577,128578],"valid",[],"NV8"],[[128579,128580],"valid",[],"NV8"],[[128581,128591],"valid",[],"NV8"],[[128592,128639],"valid",[],"NV8"],[[128640,128709],"valid",[],"NV8"],[[128710,128719],"valid",[],"NV8"],[[128720,128720],"valid",[],"NV8"],[[128721,128735],"disallowed"],[[128736,128748],"valid",[],"NV8"],[[128749,128751],"disallowed"],[[128752,128755],"valid",[],"NV8"],[[128756,128767],"disallowed"],[[128768,128883],"valid",[],"NV8"],[[128884,128895],"disallowed"],[[128896,128980],"valid",[],"NV8"],[[128981,129023],"disallowed"],[[129024,129035],"valid",[],"NV8"],[[129036,129039],"disallowed"],[[129040,129095],"valid",[],"NV8"],[[129096,129103],"disallowed"],[[129104,129113],"valid",[],"NV8"],[[129114,129119],"disallowed"],[[129120,129159],"valid",[],"NV8"],[[129160,129167],"disallowed"],[[129168,129197],"valid",[],"NV8"],[[129198,129295],"disallowed"],[[129296,129304],"valid",[],"NV8"],[[129305,129407],"disallowed"],[[129408,129412],"valid",[],"NV8"],[[129413,129471],"disallowed"],[[129472,129472],"valid",[],"NV8"],[[129473,131069],"disallowed"],[[131070,131071],"disallowed"],[[131072,173782],"valid"],[[173783,173823],"disallowed"],[[173824,177972],"valid"],[[177973,177983],"disallowed"],[[177984,178205],"valid"],[[178206,178207],"disallowed"],[[178208,183969],"valid"],[[183970,194559],"disallowed"],[[194560,194560],"mapped",[20029]],[[194561,194561],"mapped",[20024]],[[194562,194562],"mapped",[20033]],[[194563,194563],"mapped",[131362]],[[194564,194564],"mapped",[20320]],[[194565,194565],"mapped",[20398]],[[194566,194566],"mapped",[20411]],[[194567,194567],"mapped",[20482]],[[194568,194568],"mapped",[20602]],[[194569,194569],"mapped",[20633]],[[194570,194570],"mapped",[20711]],[[194571,194571],"mapped",[20687]],[[194572,194572],"mapped",[13470]],[[194573,194573],"mapped",[132666]],[[194574,194574],"mapped",[20813]],[[194575,194575],"mapped",[20820]],[[194576,194576],"mapped",[20836]],[[194577,194577],"mapped",[20855]],[[194578,194578],"mapped",[132380]],[[194579,194579],"mapped",[13497]],[[194580,194580],"mapped",[20839]],[[194581,194581],"mapped",[20877]],[[194582,194582],"mapped",[132427]],[[194583,194583],"mapped",[20887]],[[194584,194584],"mapped",[20900]],[[194585,194585],"mapped",[20172]],[[194586,194586],"mapped",[20908]],[[194587,194587],"mapped",[20917]],[[194588,194588],"mapped",[168415]],[[194589,194589],"mapped",[20981]],[[194590,194590],"mapped",[20995]],[[194591,194591],"mapped",[13535]],[[194592,194592],"mapped",[21051]],[[194593,194593],"mapped",[21062]],[[194594,194594],"mapped",[21106]],[[194595,194595],"mapped",[21111]],[[194596,194596],"mapped",[13589]],[[194597,194597],"mapped",[21191]],[[194598,194598],"mapped",[21193]],[[194599,194599],"mapped",[21220]],[[194600,194600],"mapped",[21242]],[[194601,194601],"mapped",[21253]],[[194602,194602],"mapped",[21254]],[[194603,194603],"mapped",[21271]],[[194604,194604],"mapped",[21321]],[[194605,194605],"mapped",[21329]],[[194606,194606],"mapped",[21338]],[[194607,194607],"mapped",[21363]],[[194608,194608],"mapped",[21373]],[[194609,194611],"mapped",[21375]],[[194612,194612],"mapped",[133676]],[[194613,194613],"mapped",[28784]],[[194614,194614],"mapped",[21450]],[[194615,194615],"mapped",[21471]],[[194616,194616],"mapped",[133987]],[[194617,194617],"mapped",[21483]],[[194618,194618],"mapped",[21489]],[[194619,194619],"mapped",[21510]],[[194620,194620],"mapped",[21662]],[[194621,194621],"mapped",[21560]],[[194622,194622],"mapped",[21576]],[[194623,194623],"mapped",[21608]],[[194624,194624],"mapped",[21666]],[[194625,194625],"mapped",[21750]],[[194626,194626],"mapped",[21776]],[[194627,194627],"mapped",[21843]],[[194628,194628],"mapped",[21859]],[[194629,194630],"mapped",[21892]],[[194631,194631],"mapped",[21913]],[[194632,194632],"mapped",[21931]],[[194633,194633],"mapped",[21939]],[[194634,194634],"mapped",[21954]],[[194635,194635],"mapped",[22294]],[[194636,194636],"mapped",[22022]],[[194637,194637],"mapped",[22295]],[[194638,194638],"mapped",[22097]],[[194639,194639],"mapped",[22132]],[[194640,194640],"mapped",[20999]],[[194641,194641],"mapped",[22766]],[[194642,194642],"mapped",[22478]],[[194643,194643],"mapped",[22516]],[[194644,194644],"mapped",[22541]],[[194645,194645],"mapped",[22411]],[[194646,194646],"mapped",[22578]],[[194647,194647],"mapped",[22577]],[[194648,194648],"mapped",[22700]],[[194649,194649],"mapped",[136420]],[[194650,194650],"mapped",[22770]],[[194651,194651],"mapped",[22775]],[[194652,194652],"mapped",[22790]],[[194653,194653],"mapped",[22810]],[[194654,194654],"mapped",[22818]],[[194655,194655],"mapped",[22882]],[[194656,194656],"mapped",[136872]],[[194657,194657],"mapped",[136938]],[[194658,194658],"mapped",[23020]],[[194659,194659],"mapped",[23067]],[[194660,194660],"mapped",[23079]],[[194661,194661],"mapped",[23000]],[[194662,194662],"mapped",[23142]],[[194663,194663],"mapped",[14062]],[[194664,194664],"disallowed"],[[194665,194665],"mapped",[23304]],[[194666,194667],"mapped",[23358]],[[194668,194668],"mapped",[137672]],[[194669,194669],"mapped",[23491]],[[194670,194670],"mapped",[23512]],[[194671,194671],"mapped",[23527]],[[194672,194672],"mapped",[23539]],[[194673,194673],"mapped",[138008]],[[194674,194674],"mapped",[23551]],[[194675,194675],"mapped",[23558]],[[194676,194676],"disallowed"],[[194677,194677],"mapped",[23586]],[[194678,194678],"mapped",[14209]],[[194679,194679],"mapped",[23648]],[[194680,194680],"mapped",[23662]],[[194681,194681],"mapped",[23744]],[[194682,194682],"mapped",[23693]],[[194683,194683],"mapped",[138724]],[[194684,194684],"mapped",[23875]],[[194685,194685],"mapped",[138726]],[[194686,194686],"mapped",[23918]],[[194687,194687],"mapped",[23915]],[[194688,194688],"mapped",[23932]],[[194689,194689],"mapped",[24033]],[[194690,194690],"mapped",[24034]],[[194691,194691],"mapped",[14383]],[[194692,194692],"mapped",[24061]],[[194693,194693],"mapped",[24104]],[[194694,194694],"mapped",[24125]],[[194695,194695],"mapped",[24169]],[[194696,194696],"mapped",[14434]],[[194697,194697],"mapped",[139651]],[[194698,194698],"mapped",[14460]],[[194699,194699],"mapped",[24240]],[[194700,194700],"mapped",[24243]],[[194701,194701],"mapped",[24246]],[[194702,194702],"mapped",[24266]],[[194703,194703],"mapped",[172946]],[[194704,194704],"mapped",[24318]],[[194705,194706],"mapped",[140081]],[[194707,194707],"mapped",[33281]],[[194708,194709],"mapped",[24354]],[[194710,194710],"mapped",[14535]],[[194711,194711],"mapped",[144056]],[[194712,194712],"mapped",[156122]],[[194713,194713],"mapped",[24418]],[[194714,194714],"mapped",[24427]],[[194715,194715],"mapped",[14563]],[[194716,194716],"mapped",[24474]],[[194717,194717],"mapped",[24525]],[[194718,194718],"mapped",[24535]],[[194719,194719],"mapped",[24569]],[[194720,194720],"mapped",[24705]],[[194721,194721],"mapped",[14650]],[[194722,194722],"mapped",[14620]],[[194723,194723],"mapped",[24724]],[[194724,194724],"mapped",[141012]],[[194725,194725],"mapped",[24775]],[[194726,194726],"mapped",[24904]],[[194727,194727],"mapped",[24908]],[[194728,194728],"mapped",[24910]],[[194729,194729],"mapped",[24908]],[[194730,194730],"mapped",[24954]],[[194731,194731],"mapped",[24974]],[[194732,194732],"mapped",[25010]],[[194733,194733],"mapped",[24996]],[[194734,194734],"mapped",[25007]],[[194735,194735],"mapped",[25054]],[[194736,194736],"mapped",[25074]],[[194737,194737],"mapped",[25078]],[[194738,194738],"mapped",[25104]],[[194739,194739],"mapped",[25115]],[[194740,194740],"mapped",[25181]],[[194741,194741],"mapped",[25265]],[[194742,194742],"mapped",[25300]],[[194743,194743],"mapped",[25424]],[[194744,194744],"mapped",[142092]],[[194745,194745],"mapped",[25405]],[[194746,194746],"mapped",[25340]],[[194747,194747],"mapped",[25448]],[[194748,194748],"mapped",[25475]],[[194749,194749],"mapped",[25572]],[[194750,194750],"mapped",[142321]],[[194751,194751],"mapped",[25634]],[[194752,194752],"mapped",[25541]],[[194753,194753],"mapped",[25513]],[[194754,194754],"mapped",[14894]],[[194755,194755],"mapped",[25705]],[[194756,194756],"mapped",[25726]],[[194757,194757],"mapped",[25757]],[[194758,194758],"mapped",[25719]],[[194759,194759],"mapped",[14956]],[[194760,194760],"mapped",[25935]],[[194761,194761],"mapped",[25964]],[[194762,194762],"mapped",[143370]],[[194763,194763],"mapped",[26083]],[[194764,194764],"mapped",[26360]],[[194765,194765],"mapped",[26185]],[[194766,194766],"mapped",[15129]],[[194767,194767],"mapped",[26257]],[[194768,194768],"mapped",[15112]],[[194769,194769],"mapped",[15076]],[[194770,194770],"mapped",[20882]],[[194771,194771],"mapped",[20885]],[[194772,194772],"mapped",[26368]],[[194773,194773],"mapped",[26268]],[[194774,194774],"mapped",[32941]],[[194775,194775],"mapped",[17369]],[[194776,194776],"mapped",[26391]],[[194777,194777],"mapped",[26395]],[[194778,194778],"mapped",[26401]],[[194779,194779],"mapped",[26462]],[[194780,194780],"mapped",[26451]],[[194781,194781],"mapped",[144323]],[[194782,194782],"mapped",[15177]],[[194783,194783],"mapped",[26618]],[[194784,194784],"mapped",[26501]],[[194785,194785],"mapped",[26706]],[[194786,194786],"mapped",[26757]],[[194787,194787],"mapped",[144493]],[[194788,194788],"mapped",[26766]],[[194789,194789],"mapped",[26655]],[[194790,194790],"mapped",[26900]],[[194791,194791],"mapped",[15261]],[[194792,194792],"mapped",[26946]],[[194793,194793],"mapped",[27043]],[[194794,194794],"mapped",[27114]],[[194795,194795],"mapped",[27304]],[[194796,194796],"mapped",[145059]],[[194797,194797],"mapped",[27355]],[[194798,194798],"mapped",[15384]],[[194799,194799],"mapped",[27425]],[[194800,194800],"mapped",[145575]],[[194801,194801],"mapped",[27476]],[[194802,194802],"mapped",[15438]],[[194803,194803],"mapped",[27506]],[[194804,194804],"mapped",[27551]],[[194805,194805],"mapped",[27578]],[[194806,194806],"mapped",[27579]],[[194807,194807],"mapped",[146061]],[[194808,194808],"mapped",[138507]],[[194809,194809],"mapped",[146170]],[[194810,194810],"mapped",[27726]],[[194811,194811],"mapped",[146620]],[[194812,194812],"mapped",[27839]],[[194813,194813],"mapped",[27853]],[[194814,194814],"mapped",[27751]],[[194815,194815],"mapped",[27926]],[[194816,194816],"mapped",[27966]],[[194817,194817],"mapped",[28023]],[[194818,194818],"mapped",[27969]],[[194819,194819],"mapped",[28009]],[[194820,194820],"mapped",[28024]],[[194821,194821],"mapped",[28037]],[[194822,194822],"mapped",[146718]],[[194823,194823],"mapped",[27956]],[[194824,194824],"mapped",[28207]],[[194825,194825],"mapped",[28270]],[[194826,194826],"mapped",[15667]],[[194827,194827],"mapped",[28363]],[[194828,194828],"mapped",[28359]],[[194829,194829],"mapped",[147153]],[[194830,194830],"mapped",[28153]],[[194831,194831],"mapped",[28526]],[[194832,194832],"mapped",[147294]],[[194833,194833],"mapped",[147342]],[[194834,194834],"mapped",[28614]],[[194835,194835],"mapped",[28729]],[[194836,194836],"mapped",[28702]],[[194837,194837],"mapped",[28699]],[[194838,194838],"mapped",[15766]],[[194839,194839],"mapped",[28746]],[[194840,194840],"mapped",[28797]],[[194841,194841],"mapped",[28791]],[[194842,194842],"mapped",[28845]],[[194843,194843],"mapped",[132389]],[[194844,194844],"mapped",[28997]],[[194845,194845],"mapped",[148067]],[[194846,194846],"mapped",[29084]],[[194847,194847],"disallowed"],[[194848,194848],"mapped",[29224]],[[194849,194849],"mapped",[29237]],[[194850,194850],"mapped",[29264]],[[194851,194851],"mapped",[149000]],[[194852,194852],"mapped",[29312]],[[194853,194853],"mapped",[29333]],[[194854,194854],"mapped",[149301]],[[194855,194855],"mapped",[149524]],[[194856,194856],"mapped",[29562]],[[194857,194857],"mapped",[29579]],[[194858,194858],"mapped",[16044]],[[194859,194859],"mapped",[29605]],[[194860,194861],"mapped",[16056]],[[194862,194862],"mapped",[29767]],[[194863,194863],"mapped",[29788]],[[194864,194864],"mapped",[29809]],[[194865,194865],"mapped",[29829]],[[194866,194866],"mapped",[29898]],[[194867,194867],"mapped",[16155]],[[194868,194868],"mapped",[29988]],[[194869,194869],"mapped",[150582]],[[194870,194870],"mapped",[30014]],[[194871,194871],"mapped",[150674]],[[194872,194872],"mapped",[30064]],[[194873,194873],"mapped",[139679]],[[194874,194874],"mapped",[30224]],[[194875,194875],"mapped",[151457]],[[194876,194876],"mapped",[151480]],[[194877,194877],"mapped",[151620]],[[194878,194878],"mapped",[16380]],[[194879,194879],"mapped",[16392]],[[194880,194880],"mapped",[30452]],[[194881,194881],"mapped",[151795]],[[194882,194882],"mapped",[151794]],[[194883,194883],"mapped",[151833]],[[194884,194884],"mapped",[151859]],[[194885,194885],"mapped",[30494]],[[194886,194887],"mapped",[30495]],[[194888,194888],"mapped",[30538]],[[194889,194889],"mapped",[16441]],[[194890,194890],"mapped",[30603]],[[194891,194891],"mapped",[16454]],[[194892,194892],"mapped",[16534]],[[194893,194893],"mapped",[152605]],[[194894,194894],"mapped",[30798]],[[194895,194895],"mapped",[30860]],[[194896,194896],"mapped",[30924]],[[194897,194897],"mapped",[16611]],[[194898,194898],"mapped",[153126]],[[194899,194899],"mapped",[31062]],[[194900,194900],"mapped",[153242]],[[194901,194901],"mapped",[153285]],[[194902,194902],"mapped",[31119]],[[194903,194903],"mapped",[31211]],[[194904,194904],"mapped",[16687]],[[194905,194905],"mapped",[31296]],[[194906,194906],"mapped",[31306]],[[194907,194907],"mapped",[31311]],[[194908,194908],"mapped",[153980]],[[194909,194910],"mapped",[154279]],[[194911,194911],"disallowed"],[[194912,194912],"mapped",[16898]],[[194913,194913],"mapped",[154539]],[[194914,194914],"mapped",[31686]],[[194915,194915],"mapped",[31689]],[[194916,194916],"mapped",[16935]],[[194917,194917],"mapped",[154752]],[[194918,194918],"mapped",[31954]],[[194919,194919],"mapped",[17056]],[[194920,194920],"mapped",[31976]],[[194921,194921],"mapped",[31971]],[[194922,194922],"mapped",[32000]],[[194923,194923],"mapped",[155526]],[[194924,194924],"mapped",[32099]],[[194925,194925],"mapped",[17153]],[[194926,194926],"mapped",[32199]],[[194927,194927],"mapped",[32258]],[[194928,194928],"mapped",[32325]],[[194929,194929],"mapped",[17204]],[[194930,194930],"mapped",[156200]],[[194931,194931],"mapped",[156231]],[[194932,194932],"mapped",[17241]],[[194933,194933],"mapped",[156377]],[[194934,194934],"mapped",[32634]],[[194935,194935],"mapped",[156478]],[[194936,194936],"mapped",[32661]],[[194937,194937],"mapped",[32762]],[[194938,194938],"mapped",[32773]],[[194939,194939],"mapped",[156890]],[[194940,194940],"mapped",[156963]],[[194941,194941],"mapped",[32864]],[[194942,194942],"mapped",[157096]],[[194943,194943],"mapped",[32880]],[[194944,194944],"mapped",[144223]],[[194945,194945],"mapped",[17365]],[[194946,194946],"mapped",[32946]],[[194947,194947],"mapped",[33027]],[[194948,194948],"mapped",[17419]],[[194949,194949],"mapped",[33086]],[[194950,194950],"mapped",[23221]],[[194951,194951],"mapped",[157607]],[[194952,194952],"mapped",[157621]],[[194953,194953],"mapped",[144275]],[[194954,194954],"mapped",[144284]],[[194955,194955],"mapped",[33281]],[[194956,194956],"mapped",[33284]],[[194957,194957],"mapped",[36766]],[[194958,194958],"mapped",[17515]],[[194959,194959],"mapped",[33425]],[[194960,194960],"mapped",[33419]],[[194961,194961],"mapped",[33437]],[[194962,194962],"mapped",[21171]],[[194963,194963],"mapped",[33457]],[[194964,194964],"mapped",[33459]],[[194965,194965],"mapped",[33469]],[[194966,194966],"mapped",[33510]],[[194967,194967],"mapped",[158524]],[[194968,194968],"mapped",[33509]],[[194969,194969],"mapped",[33565]],[[194970,194970],"mapped",[33635]],[[194971,194971],"mapped",[33709]],[[194972,194972],"mapped",[33571]],[[194973,194973],"mapped",[33725]],[[194974,194974],"mapped",[33767]],[[194975,194975],"mapped",[33879]],[[194976,194976],"mapped",[33619]],[[194977,194977],"mapped",[33738]],[[194978,194978],"mapped",[33740]],[[194979,194979],"mapped",[33756]],[[194980,194980],"mapped",[158774]],[[194981,194981],"mapped",[159083]],[[194982,194982],"mapped",[158933]],[[194983,194983],"mapped",[17707]],[[194984,194984],"mapped",[34033]],[[194985,194985],"mapped",[34035]],[[194986,194986],"mapped",[34070]],[[194987,194987],"mapped",[160714]],[[194988,194988],"mapped",[34148]],[[194989,194989],"mapped",[159532]],[[194990,194990],"mapped",[17757]],[[194991,194991],"mapped",[17761]],[[194992,194992],"mapped",[159665]],[[194993,194993],"mapped",[159954]],[[194994,194994],"mapped",[17771]],[[194995,194995],"mapped",[34384]],[[194996,194996],"mapped",[34396]],[[194997,194997],"mapped",[34407]],[[194998,194998],"mapped",[34409]],[[194999,194999],"mapped",[34473]],[[195000,195000],"mapped",[34440]],[[195001,195001],"mapped",[34574]],[[195002,195002],"mapped",[34530]],[[195003,195003],"mapped",[34681]],[[195004,195004],"mapped",[34600]],[[195005,195005],"mapped",[34667]],[[195006,195006],"mapped",[34694]],[[195007,195007],"disallowed"],[[195008,195008],"mapped",[34785]],[[195009,195009],"mapped",[34817]],[[195010,195010],"mapped",[17913]],[[195011,195011],"mapped",[34912]],[[195012,195012],"mapped",[34915]],[[195013,195013],"mapped",[161383]],[[195014,195014],"mapped",[35031]],[[195015,195015],"mapped",[35038]],[[195016,195016],"mapped",[17973]],[[195017,195017],"mapped",[35066]],[[195018,195018],"mapped",[13499]],[[195019,195019],"mapped",[161966]],[[195020,195020],"mapped",[162150]],[[195021,195021],"mapped",[18110]],[[195022,195022],"mapped",[18119]],[[195023,195023],"mapped",[35488]],[[195024,195024],"mapped",[35565]],[[195025,195025],"mapped",[35722]],[[195026,195026],"mapped",[35925]],[[195027,195027],"mapped",[162984]],[[195028,195028],"mapped",[36011]],[[195029,195029],"mapped",[36033]],[[195030,195030],"mapped",[36123]],[[195031,195031],"mapped",[36215]],[[195032,195032],"mapped",[163631]],[[195033,195033],"mapped",[133124]],[[195034,195034],"mapped",[36299]],[[195035,195035],"mapped",[36284]],[[195036,195036],"mapped",[36336]],[[195037,195037],"mapped",[133342]],[[195038,195038],"mapped",[36564]],[[195039,195039],"mapped",[36664]],[[195040,195040],"mapped",[165330]],[[195041,195041],"mapped",[165357]],[[195042,195042],"mapped",[37012]],[[195043,195043],"mapped",[37105]],[[195044,195044],"mapped",[37137]],[[195045,195045],"mapped",[165678]],[[195046,195046],"mapped",[37147]],[[195047,195047],"mapped",[37432]],[[195048,195048],"mapped",[37591]],[[195049,195049],"mapped",[37592]],[[195050,195050],"mapped",[37500]],[[195051,195051],"mapped",[37881]],[[195052,195052],"mapped",[37909]],[[195053,195053],"mapped",[166906]],[[195054,195054],"mapped",[38283]],[[195055,195055],"mapped",[18837]],[[195056,195056],"mapped",[38327]],[[195057,195057],"mapped",[167287]],[[195058,195058],"mapped",[18918]],[[195059,195059],"mapped",[38595]],[[195060,195060],"mapped",[23986]],[[195061,195061],"mapped",[38691]],[[195062,195062],"mapped",[168261]],[[195063,195063],"mapped",[168474]],[[195064,195064],"mapped",[19054]],[[195065,195065],"mapped",[19062]],[[195066,195066],"mapped",[38880]],[[195067,195067],"mapped",[168970]],[[195068,195068],"mapped",[19122]],[[195069,195069],"mapped",[169110]],[[195070,195071],"mapped",[38923]],[[195072,195072],"mapped",[38953]],[[195073,195073],"mapped",[169398]],[[195074,195074],"mapped",[39138]],[[195075,195075],"mapped",[19251]],[[195076,195076],"mapped",[39209]],[[195077,195077],"mapped",[39335]],[[195078,195078],"mapped",[39362]],[[195079,195079],"mapped",[39422]],[[195080,195080],"mapped",[19406]],[[195081,195081],"mapped",[170800]],[[195082,195082],"mapped",[39698]],[[195083,195083],"mapped",[40000]],[[195084,195084],"mapped",[40189]],[[195085,195085],"mapped",[19662]],[[195086,195086],"mapped",[19693]],[[195087,195087],"mapped",[40295]],[[195088,195088],"mapped",[172238]],[[195089,195089],"mapped",[19704]],[[195090,195090],"mapped",[172293]],[[195091,195091],"mapped",[172558]],[[195092,195092],"mapped",[172689]],[[195093,195093],"mapped",[40635]],[[195094,195094],"mapped",[19798]],[[195095,195095],"mapped",[40697]],[[195096,195096],"mapped",[40702]],[[195097,195097],"mapped",[40709]],[[195098,195098],"mapped",[40719]],[[195099,195099],"mapped",[40726]],[[195100,195100],"mapped",[40763]],[[195101,195101],"mapped",[173568]],[[195102,196605],"disallowed"],[[196606,196607],"disallowed"],[[196608,262141],"disallowed"],[[262142,262143],"disallowed"],[[262144,327677],"disallowed"],[[327678,327679],"disallowed"],[[327680,393213],"disallowed"],[[393214,393215],"disallowed"],[[393216,458749],"disallowed"],[[458750,458751],"disallowed"],[[458752,524285],"disallowed"],[[524286,524287],"disallowed"],[[524288,589821],"disallowed"],[[589822,589823],"disallowed"],[[589824,655357],"disallowed"],[[655358,655359],"disallowed"],[[655360,720893],"disallowed"],[[720894,720895],"disallowed"],[[720896,786429],"disallowed"],[[786430,786431],"disallowed"],[[786432,851965],"disallowed"],[[851966,851967],"disallowed"],[[851968,917501],"disallowed"],[[917502,917503],"disallowed"],[[917504,917504],"disallowed"],[[917505,917505],"disallowed"],[[917506,917535],"disallowed"],[[917536,917631],"disallowed"],[[917632,917759],"disallowed"],[[917760,917999],"ignored"],[[918000,983037],"disallowed"],[[983038,983039],"disallowed"],[[983040,1048573],"disallowed"],[[1048574,1048575],"disallowed"],[[1048576,1114109],"disallowed"],[[1114110,1114111],"disallowed"]]');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nccwpck_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__nccwpck_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__nccwpck_require__.o(definition, key) && !__nccwpck_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__nccwpck_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__nccwpck_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__nccwpck_require__.f).reduce((promises, key) => {
/******/ 				__nccwpck_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__nccwpck_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".index.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__nccwpck_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__nccwpck_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__nccwpck_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/******/ 	/* webpack/runtime/require chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "loaded", otherwise not loaded yet
/******/ 		var installedChunks = {
/******/ 			792: 1
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__nccwpck_require__.o(moreModules, moduleId)) {
/******/ 					__nccwpck_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__nccwpck_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++)
/******/ 				installedChunks[chunkIds[i]] = 1;
/******/ 		
/******/ 		};
/******/ 		
/******/ 		// require() chunk loading for javascript
/******/ 		__nccwpck_require__.f.require = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					installChunk(require("./" + __nccwpck_require__.u(chunkId)));
/******/ 				} else installedChunks[chunkId] = 1;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// NAMESPACE OBJECT: ./node_modules/@sinclair/typebox/build/esm/type/type/type.mjs
var type_type_namespaceObject = {};
__nccwpck_require__.r(type_type_namespaceObject);
__nccwpck_require__.d(type_type_namespaceObject, {
  Any: () => (Any),
  Array: () => (array_Array),
  AsyncIterator: () => (AsyncIterator),
  Awaited: () => (Awaited),
  BigInt: () => (bigint_BigInt),
  Boolean: () => (boolean_Boolean),
  Capitalize: () => (Capitalize),
  Composite: () => (Composite),
  Const: () => (Const),
  Constructor: () => (Constructor),
  ConstructorParameters: () => (ConstructorParameters),
  Date: () => (date_Date),
  Enum: () => (Enum),
  Exclude: () => (Exclude),
  Extends: () => (Extends),
  Extract: () => (Extract),
  Function: () => (function_Function),
  Index: () => (Index),
  InstanceType: () => (InstanceType),
  Integer: () => (Integer),
  Intersect: () => (Intersect),
  Iterator: () => (Iterator),
  KeyOf: () => (KeyOf),
  Literal: () => (Literal),
  Lowercase: () => (Lowercase),
  Mapped: () => (Mapped),
  Module: () => (Module),
  Never: () => (Never),
  Not: () => (Not),
  Null: () => (Null),
  Number: () => (number_Number),
  Object: () => (object_Object),
  Omit: () => (Omit),
  Optional: () => (Optional),
  Parameters: () => (Parameters),
  Partial: () => (Partial),
  Pick: () => (Pick),
  Promise: () => (promise_Promise),
  Readonly: () => (Readonly),
  ReadonlyOptional: () => (ReadonlyOptional),
  Record: () => (Record),
  Recursive: () => (Recursive),
  Ref: () => (Ref),
  RegExp: () => (regexp_RegExp),
  Required: () => (Required),
  Rest: () => (Rest),
  ReturnType: () => (ReturnType),
  String: () => (string_String),
  Symbol: () => (symbol_Symbol),
  TemplateLiteral: () => (TemplateLiteral),
  Transform: () => (Transform),
  Tuple: () => (Tuple),
  Uint8Array: () => (uint8array_Uint8Array),
  Uncapitalize: () => (Uncapitalize),
  Undefined: () => (Undefined),
  Union: () => (Union),
  Unknown: () => (Unknown),
  Unsafe: () => (Unsafe),
  Uppercase: () => (Uppercase),
  Void: () => (Void)
});

;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/ubiquity-os-logger/dist/index.js
// src/constants.ts
var COLORS = {
  reset: "\x1B[0m",
  bright: "\x1B[1m",
  dim: "\x1B[2m",
  underscore: "\x1B[4m",
  blink: "\x1B[5m",
  reverse: "\x1B[7m",
  hidden: "\x1B[8m",
  fgBlack: "\x1B[30m",
  fgRed: "\x1B[31m",
  fgGreen: "\x1B[32m",
  fgYellow: "\x1B[33m",
  fgBlue: "\x1B[34m",
  fgMagenta: "\x1B[35m",
  fgCyan: "\x1B[36m",
  fgWhite: "\x1B[37m",
  bgBlack: "\x1B[40m",
  bgRed: "\x1B[41m",
  bgGreen: "\x1B[42m",
  bgYellow: "\x1B[43m",
  bgBlue: "\x1B[44m",
  bgMagenta: "\x1B[45m",
  bgCyan: "\x1B[46m",
  bgWhite: "\x1B[47m"
};
var LOG_LEVEL = {
  FATAL: "fatal",
  ERROR: "error",
  WARN: "warn",
  INFO: "info",
  VERBOSE: "verbose",
  DEBUG: "debug"
};

// src/pretty-logs.ts
var PrettyLogs = class {
  constructor() {
    this.ok = this.ok.bind(this);
    this.info = this.info.bind(this);
    this.error = this.error.bind(this);
    this.fatal = this.fatal.bind(this);
    this.warn = this.warn.bind(this);
    this.debug = this.debug.bind(this);
    this.verbose = this.verbose.bind(this);
  }
  fatal(message, metadata) {
    this._logWithStack(LOG_LEVEL.FATAL, message, metadata);
  }
  error(message, metadata) {
    this._logWithStack(LOG_LEVEL.ERROR, message, metadata);
  }
  warn(message, metadata) {
    this._logWithStack(LOG_LEVEL.WARN, message, metadata);
  }
  ok(message, metadata) {
    this._logWithStack("ok", message, metadata);
  }
  info(message, metadata) {
    this._logWithStack(LOG_LEVEL.INFO, message, metadata);
  }
  debug(message, metadata) {
    this._logWithStack(LOG_LEVEL.DEBUG, message, metadata);
  }
  verbose(message, metadata) {
    this._logWithStack(LOG_LEVEL.VERBOSE, message, metadata);
  }
  _logWithStack(type, message, metaData) {
    this._log(type, message);
    if (typeof metaData === "string") {
      this._log(type, metaData);
      return;
    }
    if (metaData) {
      const metadata = metaData;
      let stack = metadata?.error?.stack || metadata?.stack;
      if (!stack) {
        const stackTrace = new Error().stack?.split("\n");
        if (stackTrace) {
          stackTrace.splice(0, 4);
          stack = stackTrace.filter((line) => line.includes(".ts:")).join("\n");
        }
      }
      const newMetadata = { ...metadata };
      delete newMetadata.message;
      delete newMetadata.name;
      delete newMetadata.stack;
      if (!this._isEmpty(newMetadata)) {
        this._log(type, newMetadata);
      }
      if (typeof stack == "string") {
        const prettyStack = this._formatStackTrace(stack, 1);
        const colorizedStack = this._colorizeText(prettyStack, COLORS.dim);
        this._log(type, colorizedStack);
      } else if (stack) {
        const prettyStack = this._formatStackTrace(stack.join("\n"), 1);
        const colorizedStack = this._colorizeText(prettyStack, COLORS.dim);
        this._log(type, colorizedStack);
      } else {
        throw new Error("Stack is null");
      }
    }
  }
  _colorizeText(text, color) {
    if (!color) {
      throw new Error(`Invalid color: ${color}`);
    }
    return color.concat(text).concat(COLORS.reset);
  }
  _formatStackTrace(stack, linesToRemove = 0, prefix = "") {
    const lines = stack.split("\n");
    for (let i = 0; i < linesToRemove; i++) {
      lines.shift();
    }
    return lines.map((line) => `${prefix}${line.replace(/\s*at\s*/, "  \u21B3  ")}`).join("\n");
  }
  _isEmpty(obj) {
    return !Reflect.ownKeys(obj).some((key) => typeof obj[String(key)] !== "function");
  }
  _log(type, message) {
    const defaultSymbols = {
      fatal: "\xD7",
      ok: "\u2713",
      warn: "\u26A0",
      error: "\u26A0",
      info: "\u203A",
      debug: "\u203A\u203A",
      verbose: "\u{1F4AC}"
    };
    const symbol = defaultSymbols[type];
    const messageFormatted = typeof message === "string" ? message : JSON.stringify(message, null, 2);
    const lines = messageFormatted.split("\n");
    const logString = lines.map((line, index) => {
      const prefix = index === 0 ? `	${symbol}` : `	${" ".repeat(symbol.length)}`;
      return `${prefix} ${line}`;
    }).join("\n");
    const fullLogString = logString;
    const colorMap = {
      fatal: ["error", COLORS.fgRed],
      ok: ["log", COLORS.fgGreen],
      warn: ["warn", COLORS.fgYellow],
      error: ["warn", COLORS.fgYellow],
      info: ["info", COLORS.dim],
      debug: ["debug", COLORS.fgMagenta],
      verbose: ["debug", COLORS.dim]
    };
    const _console = console[colorMap[type][0]];
    if (typeof _console === "function" && fullLogString.length > 12) {
      _console(this._colorizeText(fullLogString, colorMap[type][1]));
    } else if (fullLogString.length <= 12) {
      return;
    } else {
      throw new Error(fullLogString);
    }
  }
};

// src/types/log-types.ts
var LogReturn = class {
  logMessage;
  metadata;
  constructor(logMessage, metadata) {
    this.logMessage = logMessage;
    this.metadata = metadata;
  }
};

// src/logs.ts
var dist_Logs = class _Logs {
  _maxLevel = -1;
  static console;
  _log({ level, consoleLog, logMessage, metadata, type }) {
    if (this._getNumericLevel(level) <= this._maxLevel) {
      consoleLog(logMessage, metadata);
    }
    return new LogReturn(
      {
        raw: logMessage,
        diff: this._diffColorCommentMessage(type, logMessage),
        type,
        level
      },
      metadata
    );
  }
  _addDiagnosticInformation(metadata) {
    if (!metadata) {
      metadata = {};
    } else if (typeof metadata !== "object") {
      metadata = { message: metadata };
    }
    const stackLines = new Error().stack?.split("\n") || [];
    if (stackLines.length > 3) {
      const callerLine = stackLines[3];
      const match = callerLine.match(/at (\S+)/);
      if (match) {
        metadata.caller = match[1];
      }
    }
    return metadata;
  }
  ok(log, metadata) {
    metadata = this._addDiagnosticInformation(metadata);
    return this._log({
      level: LOG_LEVEL.INFO,
      consoleLog: _Logs.console.ok,
      logMessage: log,
      metadata,
      type: "ok"
    });
  }
  info(log, metadata) {
    metadata = this._addDiagnosticInformation(metadata);
    return this._log({
      level: LOG_LEVEL.INFO,
      consoleLog: _Logs.console.info,
      logMessage: log,
      metadata,
      type: "info"
    });
  }
  warn(log, metadata) {
    metadata = this._addDiagnosticInformation(metadata);
    return this._log({
      level: LOG_LEVEL.WARN,
      consoleLog: _Logs.console.warn,
      logMessage: log,
      metadata,
      type: "warn"
    });
  }
  error(log, metadata) {
    metadata = this._addDiagnosticInformation(metadata);
    return this._log({
      level: LOG_LEVEL.ERROR,
      consoleLog: _Logs.console.error,
      logMessage: log,
      metadata,
      type: "error"
    });
  }
  debug(log, metadata) {
    metadata = this._addDiagnosticInformation(metadata);
    return this._log({
      level: LOG_LEVEL.DEBUG,
      consoleLog: _Logs.console.debug,
      logMessage: log,
      metadata,
      type: "debug"
    });
  }
  fatal(log, metadata) {
    if (!metadata) {
      metadata = _Logs.convertErrorsIntoObjects(new Error(log));
      const stack = metadata.stack;
      stack.splice(1, 1);
      metadata.stack = stack;
    }
    if (metadata instanceof Error) {
      metadata = _Logs.convertErrorsIntoObjects(metadata);
      const stack = metadata.stack;
      stack.splice(1, 1);
      metadata.stack = stack;
    }
    metadata = this._addDiagnosticInformation(metadata);
    return this._log({
      level: LOG_LEVEL.FATAL,
      consoleLog: _Logs.console.fatal,
      logMessage: log,
      metadata,
      type: "fatal"
    });
  }
  verbose(log, metadata) {
    metadata = this._addDiagnosticInformation(metadata);
    return this._log({
      level: LOG_LEVEL.VERBOSE,
      consoleLog: _Logs.console.verbose,
      logMessage: log,
      metadata,
      type: "verbose"
    });
  }
  constructor(logLevel) {
    this._maxLevel = this._getNumericLevel(logLevel);
    _Logs.console = new PrettyLogs();
  }
  _diffColorCommentMessage(type, message) {
    const diffPrefix = {
      fatal: "> [!CAUTION]",
      error: "> [!CAUTION]",
      warn: "> [!WARNING]",
      ok: "> [!TIP]",
      info: "> [!NOTE]",
      debug: "> [!IMPORTANT]",
      verbose: "> [!NOTE]"
    };
    const selected = diffPrefix[type];
    if (selected) {
      message = message.trim().split("\n").map((line) => `> ${line}`).join("\n");
    }
    return [selected, message].join("\n");
  }
  _getNumericLevel(level) {
    switch (level) {
      case LOG_LEVEL.FATAL:
        return 0;
      case LOG_LEVEL.ERROR:
        return 1;
      case LOG_LEVEL.WARN:
        return 2;
      case LOG_LEVEL.INFO:
        return 3;
      case LOG_LEVEL.VERBOSE:
        return 4;
      case LOG_LEVEL.DEBUG:
        return 5;
      default:
        return -1;
    }
  }
  static convertErrorsIntoObjects(obj) {
    if (obj instanceof Error) {
      return {
        message: obj.message,
        name: obj.name,
        stack: obj.stack ? obj.stack.split("\n") : null
      };
    } else if (typeof obj === "object" && obj !== null) {
      const keys = Object.keys(obj);
      keys.forEach((key) => {
        obj[key] = this.convertErrorsIntoObjects(obj[key]);
      });
    }
    return obj;
  }
};

// src/utils.ts
var ansiEscapeCodes = /\x1b\[\d+m|\s/g;
function cleanLogs(spy) {
  const strs = spy.mock.calls.map((call) => call.map((str) => str?.toString()).join(" "));
  return strs.flat().map((str) => cleanLogString(str));
}
function cleanLogString(logString) {
  return logString.replaceAll(ansiEscapeCodes, "").replaceAll(/\n/g, "").replaceAll(/\r/g, "").replaceAll(/\t/g, "").trim();
}
function cleanSpyLogs(spy) {
  return cleanLogs(spy);
}


;// CONCATENATED MODULE: ./node_modules/hono/dist/compose.js
// src/compose.ts
var compose = (middleware, onError, onNotFound) => {
  return (context, next) => {
    let index = -1;
    return dispatch(0);
    async function dispatch(i) {
      if (i <= index) {
        throw new Error("next() called multiple times");
      }
      index = i;
      let res;
      let isError = false;
      let handler;
      if (middleware[i]) {
        handler = middleware[i][0][0];
        context.req.routeIndex = i;
      } else {
        handler = i === middleware.length && next || void 0;
      }
      if (handler) {
        try {
          res = await handler(context, () => dispatch(i + 1));
        } catch (err) {
          if (err instanceof Error && onError) {
            context.error = err;
            res = await onError(err, context);
            isError = true;
          } else {
            throw err;
          }
        }
      } else {
        if (context.finalized === false && onNotFound) {
          res = await onNotFound(context);
        }
      }
      if (res && (context.finalized === false || isError)) {
        context.res = res;
      }
      return context;
    }
  };
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/utils/body.js
// src/utils/body.ts

var parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {
  const { all = false, dot = false } = options;
  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;
  const contentType = headers.get("Content-Type");
  if (contentType?.startsWith("multipart/form-data") || contentType?.startsWith("application/x-www-form-urlencoded")) {
    return parseFormData(request, { all, dot });
  }
  return {};
};
async function parseFormData(request, options) {
  const formData = await request.formData();
  if (formData) {
    return convertFormDataToBodyData(formData, options);
  }
  return {};
}
function convertFormDataToBodyData(formData, options) {
  const form = /* @__PURE__ */ Object.create(null);
  formData.forEach((value, key) => {
    const shouldParseAllValues = options.all || key.endsWith("[]");
    if (!shouldParseAllValues) {
      form[key] = value;
    } else {
      handleParsingAllValues(form, key, value);
    }
  });
  if (options.dot) {
    Object.entries(form).forEach(([key, value]) => {
      const shouldParseDotValues = key.includes(".");
      if (shouldParseDotValues) {
        handleParsingNestedValues(form, key, value);
        delete form[key];
      }
    });
  }
  return form;
}
var handleParsingAllValues = (form, key, value) => {
  if (form[key] !== void 0) {
    if (Array.isArray(form[key])) {
      ;
      form[key].push(value);
    } else {
      form[key] = [form[key], value];
    }
  } else {
    form[key] = value;
  }
};
var handleParsingNestedValues = (form, key, value) => {
  let nestedForm = form;
  const keys = key.split(".");
  keys.forEach((key2, index) => {
    if (index === keys.length - 1) {
      nestedForm[key2] = value;
    } else {
      if (!nestedForm[key2] || typeof nestedForm[key2] !== "object" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {
        nestedForm[key2] = /* @__PURE__ */ Object.create(null);
      }
      nestedForm = nestedForm[key2];
    }
  });
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/utils/url.js
// src/utils/url.ts
var splitPath = (path) => {
  const paths = path.split("/");
  if (paths[0] === "") {
    paths.shift();
  }
  return paths;
};
var splitRoutingPath = (routePath) => {
  const { groups, path } = extractGroupsFromPath(routePath);
  const paths = splitPath(path);
  return replaceGroupMarks(paths, groups);
};
var extractGroupsFromPath = (path) => {
  const groups = [];
  path = path.replace(/\{[^}]+\}/g, (match, index) => {
    const mark = `@${index}`;
    groups.push([mark, match]);
    return mark;
  });
  return { groups, path };
};
var replaceGroupMarks = (paths, groups) => {
  for (let i = groups.length - 1; i >= 0; i--) {
    const [mark] = groups[i];
    for (let j = paths.length - 1; j >= 0; j--) {
      if (paths[j].includes(mark)) {
        paths[j] = paths[j].replace(mark, groups[i][1]);
        break;
      }
    }
  }
  return paths;
};
var patternCache = {};
var getPattern = (label, next) => {
  if (label === "*") {
    return "*";
  }
  const match = label.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
  if (match) {
    const cacheKey = `${label}#${next}`;
    if (!patternCache[cacheKey]) {
      if (match[2]) {
        patternCache[cacheKey] = next && next[0] !== ":" && next[0] !== "*" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];
      } else {
        patternCache[cacheKey] = [label, match[1], true];
      }
    }
    return patternCache[cacheKey];
  }
  return null;
};
var tryDecode = (str, decoder) => {
  try {
    return decoder(str);
  } catch {
    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {
      try {
        return decoder(match);
      } catch {
        return match;
      }
    });
  }
};
var tryDecodeURI = (str) => tryDecode(str, decodeURI);
var getPath = (request) => {
  const url = request.url;
  const start = url.indexOf("/", 8);
  let i = start;
  for (; i < url.length; i++) {
    const charCode = url.charCodeAt(i);
    if (charCode === 37) {
      const queryIndex = url.indexOf("?", i);
      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);
      return tryDecodeURI(path.includes("%25") ? path.replace(/%25/g, "%2525") : path);
    } else if (charCode === 63) {
      break;
    }
  }
  return url.slice(start, i);
};
var getQueryStrings = (url) => {
  const queryIndex = url.indexOf("?", 8);
  return queryIndex === -1 ? "" : "?" + url.slice(queryIndex + 1);
};
var getPathNoStrict = (request) => {
  const result = getPath(request);
  return result.length > 1 && result.at(-1) === "/" ? result.slice(0, -1) : result;
};
var mergePath = (base, sub, ...rest) => {
  if (rest.length) {
    sub = mergePath(sub, ...rest);
  }
  return `${base?.[0] === "/" ? "" : "/"}${base}${sub === "/" ? "" : `${base?.at(-1) === "/" ? "" : "/"}${sub?.[0] === "/" ? sub.slice(1) : sub}`}`;
};
var checkOptionalParameter = (path) => {
  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(":")) {
    return null;
  }
  const segments = path.split("/");
  const results = [];
  let basePath = "";
  segments.forEach((segment) => {
    if (segment !== "" && !/\:/.test(segment)) {
      basePath += "/" + segment;
    } else if (/\:/.test(segment)) {
      if (/\?/.test(segment)) {
        if (results.length === 0 && basePath === "") {
          results.push("/");
        } else {
          results.push(basePath);
        }
        const optionalSegment = segment.replace("?", "");
        basePath += "/" + optionalSegment;
        results.push(basePath);
      } else {
        basePath += "/" + segment;
      }
    }
  });
  return results.filter((v, i, a) => a.indexOf(v) === i);
};
var _decodeURI = (value) => {
  if (!/[%+]/.test(value)) {
    return value;
  }
  if (value.indexOf("+") !== -1) {
    value = value.replace(/\+/g, " ");
  }
  return value.indexOf("%") !== -1 ? decodeURIComponent_(value) : value;
};
var _getQueryParam = (url, key, multiple) => {
  let encoded;
  if (!multiple && key && !/[%+]/.test(key)) {
    let keyIndex2 = url.indexOf(`?${key}`, 8);
    if (keyIndex2 === -1) {
      keyIndex2 = url.indexOf(`&${key}`, 8);
    }
    while (keyIndex2 !== -1) {
      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);
      if (trailingKeyCode === 61) {
        const valueIndex = keyIndex2 + key.length + 2;
        const endIndex = url.indexOf("&", valueIndex);
        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));
      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {
        return "";
      }
      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);
    }
    encoded = /[%+]/.test(url);
    if (!encoded) {
      return void 0;
    }
  }
  const results = {};
  encoded ??= /[%+]/.test(url);
  let keyIndex = url.indexOf("?", 8);
  while (keyIndex !== -1) {
    const nextKeyIndex = url.indexOf("&", keyIndex + 1);
    let valueIndex = url.indexOf("=", keyIndex);
    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {
      valueIndex = -1;
    }
    let name = url.slice(
      keyIndex + 1,
      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex
    );
    if (encoded) {
      name = _decodeURI(name);
    }
    keyIndex = nextKeyIndex;
    if (name === "") {
      continue;
    }
    let value;
    if (valueIndex === -1) {
      value = "";
    } else {
      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);
      if (encoded) {
        value = _decodeURI(value);
      }
    }
    if (multiple) {
      if (!(results[name] && Array.isArray(results[name]))) {
        results[name] = [];
      }
      ;
      results[name].push(value);
    } else {
      results[name] ??= value;
    }
  }
  return key ? results[key] : results;
};
var getQueryParam = _getQueryParam;
var getQueryParams = (url, key) => {
  return _getQueryParam(url, key, true);
};
var decodeURIComponent_ = decodeURIComponent;


;// CONCATENATED MODULE: ./node_modules/hono/dist/request.js
// src/request.ts


var tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);
var HonoRequest = class {
  raw;
  #validatedData;
  #matchResult;
  routeIndex = 0;
  path;
  bodyCache = {};
  constructor(request, path = "/", matchResult = [[]]) {
    this.raw = request;
    this.path = path;
    this.#matchResult = matchResult;
    this.#validatedData = {};
  }
  param(key) {
    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();
  }
  #getDecodedParam(key) {
    const paramKey = this.#matchResult[0][this.routeIndex][1][key];
    const param = this.#getParamValue(paramKey);
    return param ? /\%/.test(param) ? tryDecodeURIComponent(param) : param : void 0;
  }
  #getAllDecodedParams() {
    const decoded = {};
    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);
    for (const key of keys) {
      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);
      if (value && typeof value === "string") {
        decoded[key] = /\%/.test(value) ? tryDecodeURIComponent(value) : value;
      }
    }
    return decoded;
  }
  #getParamValue(paramKey) {
    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;
  }
  query(key) {
    return getQueryParam(this.url, key);
  }
  queries(key) {
    return getQueryParams(this.url, key);
  }
  header(name) {
    if (name) {
      return this.raw.headers.get(name) ?? void 0;
    }
    const headerData = {};
    this.raw.headers.forEach((value, key) => {
      headerData[key] = value;
    });
    return headerData;
  }
  async parseBody(options) {
    return this.bodyCache.parsedBody ??= await parseBody(this, options);
  }
  #cachedBody = (key) => {
    const { bodyCache, raw } = this;
    const cachedBody = bodyCache[key];
    if (cachedBody) {
      return cachedBody;
    }
    const anyCachedKey = Object.keys(bodyCache)[0];
    if (anyCachedKey) {
      return bodyCache[anyCachedKey].then((body) => {
        if (anyCachedKey === "json") {
          body = JSON.stringify(body);
        }
        return new Response(body)[key]();
      });
    }
    return bodyCache[key] = raw[key]();
  };
  json() {
    return this.#cachedBody("json");
  }
  text() {
    return this.#cachedBody("text");
  }
  arrayBuffer() {
    return this.#cachedBody("arrayBuffer");
  }
  blob() {
    return this.#cachedBody("blob");
  }
  formData() {
    return this.#cachedBody("formData");
  }
  addValidatedData(target, data) {
    this.#validatedData[target] = data;
  }
  valid(target) {
    return this.#validatedData[target];
  }
  get url() {
    return this.raw.url;
  }
  get method() {
    return this.raw.method;
  }
  get matchedRoutes() {
    return this.#matchResult[0].map(([[, route]]) => route);
  }
  get routePath() {
    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;
  }
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/utils/html.js
// src/utils/html.ts
var HtmlEscapedCallbackPhase = {
  Stringify: 1,
  BeforeStream: 2,
  Stream: 3
};
var raw = (value, callbacks) => {
  const escapedString = new String(value);
  escapedString.isEscaped = true;
  escapedString.callbacks = callbacks;
  return escapedString;
};
var escapeRe = /[&<>'"]/;
var stringBufferToString = async (buffer, callbacks) => {
  let str = "";
  callbacks ||= [];
  const resolvedBuffer = await Promise.all(buffer);
  for (let i = resolvedBuffer.length - 1; ; i--) {
    str += resolvedBuffer[i];
    i--;
    if (i < 0) {
      break;
    }
    let r = resolvedBuffer[i];
    if (typeof r === "object") {
      callbacks.push(...r.callbacks || []);
    }
    const isEscaped = r.isEscaped;
    r = await (typeof r === "object" ? r.toString() : r);
    if (typeof r === "object") {
      callbacks.push(...r.callbacks || []);
    }
    if (r.isEscaped ?? isEscaped) {
      str += r;
    } else {
      const buf = [str];
      escapeToBuffer(r, buf);
      str = buf[0];
    }
  }
  return raw(str, callbacks);
};
var escapeToBuffer = (str, buffer) => {
  const match = str.search(escapeRe);
  if (match === -1) {
    buffer[0] += str;
    return;
  }
  let escape;
  let index;
  let lastIndex = 0;
  for (index = match; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        escape = "&quot;";
        break;
      case 39:
        escape = "&#39;";
        break;
      case 38:
        escape = "&amp;";
        break;
      case 60:
        escape = "&lt;";
        break;
      case 62:
        escape = "&gt;";
        break;
      default:
        continue;
    }
    buffer[0] += str.substring(lastIndex, index) + escape;
    lastIndex = index + 1;
  }
  buffer[0] += str.substring(lastIndex, index);
};
var resolveCallbackSync = (str) => {
  const callbacks = str.callbacks;
  if (!callbacks?.length) {
    return str;
  }
  const buffer = [str];
  const context = {};
  callbacks.forEach((c) => c({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));
  return buffer[0];
};
var resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {
  if (typeof str === "object" && !(str instanceof String)) {
    if (!(str instanceof Promise)) {
      str = str.toString();
    }
    if (str instanceof Promise) {
      str = await str;
    }
  }
  const callbacks = str.callbacks;
  if (!callbacks?.length) {
    return Promise.resolve(str);
  }
  if (buffer) {
    buffer[0] += str;
  } else {
    buffer = [str];
  }
  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(
    (res) => Promise.all(
      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))
    ).then(() => buffer[0])
  );
  if (preserveCallbacks) {
    return raw(await resStr, callbacks);
  } else {
    return resStr;
  }
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/context.js
// src/context.ts


var TEXT_PLAIN = "text/plain; charset=UTF-8";
var setHeaders = (headers, map = {}) => {
  for (const key of Object.keys(map)) {
    headers.set(key, map[key]);
  }
  return headers;
};
var Context = class {
  #rawRequest;
  #req;
  env = {};
  #var;
  finalized = false;
  error;
  #status = 200;
  #executionCtx;
  #headers;
  #preparedHeaders;
  #res;
  #isFresh = true;
  #layout;
  #renderer;
  #notFoundHandler;
  #matchResult;
  #path;
  constructor(req, options) {
    this.#rawRequest = req;
    if (options) {
      this.#executionCtx = options.executionCtx;
      this.env = options.env;
      this.#notFoundHandler = options.notFoundHandler;
      this.#path = options.path;
      this.#matchResult = options.matchResult;
    }
  }
  get req() {
    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);
    return this.#req;
  }
  get event() {
    if (this.#executionCtx && "respondWith" in this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no FetchEvent");
    }
  }
  get executionCtx() {
    if (this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no ExecutionContext");
    }
  }
  get res() {
    this.#isFresh = false;
    return this.#res ||= new Response("404 Not Found", { status: 404 });
  }
  set res(_res) {
    this.#isFresh = false;
    if (this.#res && _res) {
      try {
        for (const [k, v] of this.#res.headers.entries()) {
          if (k === "content-type") {
            continue;
          }
          if (k === "set-cookie") {
            const cookies = this.#res.headers.getSetCookie();
            _res.headers.delete("set-cookie");
            for (const cookie of cookies) {
              _res.headers.append("set-cookie", cookie);
            }
          } else {
            _res.headers.set(k, v);
          }
        }
      } catch (e) {
        if (e instanceof TypeError && e.message.includes("immutable")) {
          this.res = new Response(_res.body, {
            headers: _res.headers,
            status: _res.status
          });
          return;
        } else {
          throw e;
        }
      }
    }
    this.#res = _res;
    this.finalized = true;
  }
  render = (...args) => {
    this.#renderer ??= (content) => this.html(content);
    return this.#renderer(...args);
  };
  setLayout = (layout) => this.#layout = layout;
  getLayout = () => this.#layout;
  setRenderer = (renderer) => {
    this.#renderer = renderer;
  };
  header = (name, value, options) => {
    if (value === void 0) {
      if (this.#headers) {
        this.#headers.delete(name);
      } else if (this.#preparedHeaders) {
        delete this.#preparedHeaders[name.toLocaleLowerCase()];
      }
      if (this.finalized) {
        this.res.headers.delete(name);
      }
      return;
    }
    if (options?.append) {
      if (!this.#headers) {
        this.#isFresh = false;
        this.#headers = new Headers(this.#preparedHeaders);
        this.#preparedHeaders = {};
      }
      this.#headers.append(name, value);
    } else {
      if (this.#headers) {
        this.#headers.set(name, value);
      } else {
        this.#preparedHeaders ??= {};
        this.#preparedHeaders[name.toLowerCase()] = value;
      }
    }
    if (this.finalized) {
      if (options?.append) {
        this.res.headers.append(name, value);
      } else {
        this.res.headers.set(name, value);
      }
    }
  };
  status = (status) => {
    this.#isFresh = false;
    this.#status = status;
  };
  set = (key, value) => {
    this.#var ??= /* @__PURE__ */ new Map();
    this.#var.set(key, value);
  };
  get = (key) => {
    return this.#var ? this.#var.get(key) : void 0;
  };
  get var() {
    if (!this.#var) {
      return {};
    }
    return Object.fromEntries(this.#var);
  }
  #newResponse(data, arg, headers) {
    if (this.#isFresh && !headers && !arg && this.#status === 200) {
      return new Response(data, {
        headers: this.#preparedHeaders
      });
    }
    if (arg && typeof arg !== "number") {
      const header = new Headers(arg.headers);
      if (this.#headers) {
        this.#headers.forEach((v, k) => {
          if (k === "set-cookie") {
            header.append(k, v);
          } else {
            header.set(k, v);
          }
        });
      }
      const headers2 = setHeaders(header, this.#preparedHeaders);
      return new Response(data, {
        headers: headers2,
        status: arg.status ?? this.#status
      });
    }
    const status = typeof arg === "number" ? arg : this.#status;
    this.#preparedHeaders ??= {};
    this.#headers ??= new Headers();
    setHeaders(this.#headers, this.#preparedHeaders);
    if (this.#res) {
      this.#res.headers.forEach((v, k) => {
        if (k === "set-cookie") {
          this.#headers?.append(k, v);
        } else {
          this.#headers?.set(k, v);
        }
      });
      setHeaders(this.#headers, this.#preparedHeaders);
    }
    headers ??= {};
    for (const [k, v] of Object.entries(headers)) {
      if (typeof v === "string") {
        this.#headers.set(k, v);
      } else {
        this.#headers.delete(k);
        for (const v2 of v) {
          this.#headers.append(k, v2);
        }
      }
    }
    return new Response(data, {
      status,
      headers: this.#headers
    });
  }
  newResponse = (...args) => this.#newResponse(...args);
  body = (data, arg, headers) => {
    return typeof arg === "number" ? this.#newResponse(data, arg, headers) : this.#newResponse(data, arg);
  };
  text = (text, arg, headers) => {
    if (!this.#preparedHeaders) {
      if (this.#isFresh && !headers && !arg) {
        return new Response(text);
      }
      this.#preparedHeaders = {};
    }
    this.#preparedHeaders["content-type"] = TEXT_PLAIN;
    if (typeof arg === "number") {
      return this.#newResponse(text, arg, headers);
    }
    return this.#newResponse(text, arg);
  };
  json = (object, arg, headers) => {
    const body = JSON.stringify(object);
    this.#preparedHeaders ??= {};
    this.#preparedHeaders["content-type"] = "application/json";
    return typeof arg === "number" ? this.#newResponse(body, arg, headers) : this.#newResponse(body, arg);
  };
  html = (html, arg, headers) => {
    this.#preparedHeaders ??= {};
    this.#preparedHeaders["content-type"] = "text/html; charset=UTF-8";
    if (typeof html === "object") {
      return resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then((html2) => {
        return typeof arg === "number" ? this.#newResponse(html2, arg, headers) : this.#newResponse(html2, arg);
      });
    }
    return typeof arg === "number" ? this.#newResponse(html, arg, headers) : this.#newResponse(html, arg);
  };
  redirect = (location, status) => {
    this.#headers ??= new Headers();
    this.#headers.set("Location", String(location));
    return this.newResponse(null, status ?? 302);
  };
  notFound = () => {
    this.#notFoundHandler ??= () => new Response();
    return this.#notFoundHandler(this);
  };
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/router.js
// src/router.ts
var METHOD_NAME_ALL = "ALL";
var METHOD_NAME_ALL_LOWERCASE = "all";
var METHODS = ["get", "post", "put", "delete", "options", "patch"];
var MESSAGE_MATCHER_IS_ALREADY_BUILT = "Can not add a route since the matcher is already built.";
var UnsupportedPathError = class extends Error {
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/utils/constants.js
// src/utils/constants.ts
var COMPOSED_HANDLER = "__COMPOSED_HANDLER";


;// CONCATENATED MODULE: ./node_modules/hono/dist/hono-base.js
// src/hono-base.ts





var notFoundHandler = (c) => {
  return c.text("404 Not Found", 404);
};
var errorHandler = (err, c) => {
  if ("getResponse" in err) {
    return err.getResponse();
  }
  console.error(err);
  return c.text("Internal Server Error", 500);
};
var hono_base_Hono = class {
  get;
  post;
  put;
  delete;
  options;
  patch;
  all;
  on;
  use;
  router;
  getPath;
  _basePath = "/";
  #path = "/";
  routes = [];
  constructor(options = {}) {
    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];
    allMethods.forEach((method) => {
      this[method] = (args1, ...args) => {
        if (typeof args1 === "string") {
          this.#path = args1;
        } else {
          this.#addRoute(method, this.#path, args1);
        }
        args.forEach((handler) => {
          this.#addRoute(method, this.#path, handler);
        });
        return this;
      };
    });
    this.on = (method, path, ...handlers) => {
      for (const p of [path].flat()) {
        this.#path = p;
        for (const m of [method].flat()) {
          handlers.map((handler) => {
            this.#addRoute(m.toUpperCase(), this.#path, handler);
          });
        }
      }
      return this;
    };
    this.use = (arg1, ...handlers) => {
      if (typeof arg1 === "string") {
        this.#path = arg1;
      } else {
        this.#path = "*";
        handlers.unshift(arg1);
      }
      handlers.forEach((handler) => {
        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);
      });
      return this;
    };
    const { strict, ...optionsWithoutStrict } = options;
    Object.assign(this, optionsWithoutStrict);
    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;
  }
  #clone() {
    const clone = new hono_base_Hono({
      router: this.router,
      getPath: this.getPath
    });
    clone.routes = this.routes;
    return clone;
  }
  #notFoundHandler = notFoundHandler;
  errorHandler = errorHandler;
  route(path, app) {
    const subApp = this.basePath(path);
    app.routes.map((r) => {
      let handler;
      if (app.errorHandler === errorHandler) {
        handler = r.handler;
      } else {
        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;
        handler[COMPOSED_HANDLER] = r.handler;
      }
      subApp.#addRoute(r.method, r.path, handler);
    });
    return this;
  }
  basePath(path) {
    const subApp = this.#clone();
    subApp._basePath = mergePath(this._basePath, path);
    return subApp;
  }
  onError = (handler) => {
    this.errorHandler = handler;
    return this;
  };
  notFound = (handler) => {
    this.#notFoundHandler = handler;
    return this;
  };
  mount(path, applicationHandler, options) {
    let replaceRequest;
    let optionHandler;
    if (options) {
      if (typeof options === "function") {
        optionHandler = options;
      } else {
        optionHandler = options.optionHandler;
        replaceRequest = options.replaceRequest;
      }
    }
    const getOptions = optionHandler ? (c) => {
      const options2 = optionHandler(c);
      return Array.isArray(options2) ? options2 : [options2];
    } : (c) => {
      let executionContext = void 0;
      try {
        executionContext = c.executionCtx;
      } catch {
      }
      return [c.env, executionContext];
    };
    replaceRequest ||= (() => {
      const mergedPath = mergePath(this._basePath, path);
      const pathPrefixLength = mergedPath === "/" ? 0 : mergedPath.length;
      return (request) => {
        const url = new URL(request.url);
        url.pathname = url.pathname.slice(pathPrefixLength) || "/";
        return new Request(url, request);
      };
    })();
    const handler = async (c, next) => {
      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));
      if (res) {
        return res;
      }
      await next();
    };
    this.#addRoute(METHOD_NAME_ALL, mergePath(path, "*"), handler);
    return this;
  }
  #addRoute(method, path, handler) {
    method = method.toUpperCase();
    path = mergePath(this._basePath, path);
    const r = { path, method, handler };
    this.router.add(method, path, [handler, r]);
    this.routes.push(r);
  }
  #handleError(err, c) {
    if (err instanceof Error) {
      return this.errorHandler(err, c);
    }
    throw err;
  }
  #dispatch(request, executionCtx, env, method) {
    if (method === "HEAD") {
      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, "GET")))();
    }
    const path = this.getPath(request, { env });
    const matchResult = this.router.match(method, path);
    const c = new Context(request, {
      path,
      matchResult,
      env,
      executionCtx,
      notFoundHandler: this.#notFoundHandler
    });
    if (matchResult[0].length === 1) {
      let res;
      try {
        res = matchResult[0][0][0][0](c, async () => {
          c.res = await this.#notFoundHandler(c);
        });
      } catch (err) {
        return this.#handleError(err, c);
      }
      return res instanceof Promise ? res.then(
        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))
      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);
    }
    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);
    return (async () => {
      try {
        const context = await composed(c);
        if (!context.finalized) {
          throw new Error(
            "Context is not finalized. Did you forget to return a Response object or `await next()`?"
          );
        }
        return context.res;
      } catch (err) {
        return this.#handleError(err, c);
      }
    })();
  }
  fetch = (request, ...rest) => {
    return this.#dispatch(request, rest[1], rest[0], request.method);
  };
  request = (input, requestInit, Env, executionCtx) => {
    if (input instanceof Request) {
      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);
    }
    input = input.toString();
    return this.fetch(
      new Request(
        /^https?:\/\//.test(input) ? input : `http://localhost${mergePath("/", input)}`,
        requestInit
      ),
      Env,
      executionCtx
    );
  };
  fire = () => {
    addEventListener("fetch", (event) => {
      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));
    });
  };
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/router/reg-exp-router/node.js
// src/router/reg-exp-router/node.ts
var LABEL_REG_EXP_STR = "[^/]+";
var ONLY_WILDCARD_REG_EXP_STR = ".*";
var TAIL_WILDCARD_REG_EXP_STR = "(?:|/.*)";
var PATH_ERROR = Symbol();
var regExpMetaChars = new Set(".\\+*[^]$()");
function compareKey(a, b) {
  if (a.length === 1) {
    return b.length === 1 ? a < b ? -1 : 1 : -1;
  }
  if (b.length === 1) {
    return 1;
  }
  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {
    return 1;
  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {
    return -1;
  }
  if (a === LABEL_REG_EXP_STR) {
    return 1;
  } else if (b === LABEL_REG_EXP_STR) {
    return -1;
  }
  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;
}
var Node = class {
  #index;
  #varIndex;
  #children = /* @__PURE__ */ Object.create(null);
  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {
    if (tokens.length === 0) {
      if (this.#index !== void 0) {
        throw PATH_ERROR;
      }
      if (pathErrorCheckOnly) {
        return;
      }
      this.#index = index;
      return;
    }
    const [token, ...restTokens] = tokens;
    const pattern = token === "*" ? restTokens.length === 0 ? ["", "", ONLY_WILDCARD_REG_EXP_STR] : ["", "", LABEL_REG_EXP_STR] : token === "/*" ? ["", "", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
    let node;
    if (pattern) {
      const name = pattern[1];
      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;
      if (name && pattern[2]) {
        regexpStr = regexpStr.replace(/^\((?!\?:)(?=[^)]+\)$)/, "(?:");
        if (/\((?!\?:)/.test(regexpStr)) {
          throw PATH_ERROR;
        }
      }
      node = this.#children[regexpStr];
      if (!node) {
        if (Object.keys(this.#children).some(
          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.#children[regexpStr] = new Node();
        if (name !== "") {
          node.#varIndex = context.varIndex++;
        }
      }
      if (!pathErrorCheckOnly && name !== "") {
        paramMap.push([name, node.#varIndex]);
      }
    } else {
      node = this.#children[token];
      if (!node) {
        if (Object.keys(this.#children).some(
          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.#children[token] = new Node();
      }
    }
    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);
  }
  buildRegExpStr() {
    const childKeys = Object.keys(this.#children).sort(compareKey);
    const strList = childKeys.map((k) => {
      const c = this.#children[k];
      return (typeof c.#varIndex === "number" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\${k}` : k) + c.buildRegExpStr();
    });
    if (typeof this.#index === "number") {
      strList.unshift(`#${this.#index}`);
    }
    if (strList.length === 0) {
      return "";
    }
    if (strList.length === 1) {
      return strList[0];
    }
    return "(?:" + strList.join("|") + ")";
  }
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/router/reg-exp-router/trie.js
// src/router/reg-exp-router/trie.ts

var Trie = class {
  #context = { varIndex: 0 };
  #root = new Node();
  insert(path, index, pathErrorCheckOnly) {
    const paramAssoc = [];
    const groups = [];
    for (let i = 0; ; ) {
      let replaced = false;
      path = path.replace(/\{[^}]+\}/g, (m) => {
        const mark = `@\\${i}`;
        groups[i] = [mark, m];
        i++;
        replaced = true;
        return mark;
      });
      if (!replaced) {
        break;
      }
    }
    const tokens = path.match(/(?::[^\/]+)|(?:\/\*$)|./g) || [];
    for (let i = groups.length - 1; i >= 0; i--) {
      const [mark] = groups[i];
      for (let j = tokens.length - 1; j >= 0; j--) {
        if (tokens[j].indexOf(mark) !== -1) {
          tokens[j] = tokens[j].replace(mark, groups[i][1]);
          break;
        }
      }
    }
    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);
    return paramAssoc;
  }
  buildRegExp() {
    let regexp = this.#root.buildRegExpStr();
    if (regexp === "") {
      return [/^$/, [], []];
    }
    let captureIndex = 0;
    const indexReplacementMap = [];
    const paramReplacementMap = [];
    regexp = regexp.replace(/#(\d+)|@(\d+)|\.\*\$/g, (_, handlerIndex, paramIndex) => {
      if (handlerIndex !== void 0) {
        indexReplacementMap[++captureIndex] = Number(handlerIndex);
        return "$()";
      }
      if (paramIndex !== void 0) {
        paramReplacementMap[Number(paramIndex)] = ++captureIndex;
        return "";
      }
      return "";
    });
    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];
  }
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/router/reg-exp-router/router.js
// src/router/reg-exp-router/router.ts




var emptyParam = [];
var nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];
var wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
function buildWildcardRegExp(path) {
  return wildcardRegExpCache[path] ??= new RegExp(
    path === "*" ? "" : `^${path.replace(
      /\/\*$|([.\\+*[^\]$()])/g,
      (_, metaChar) => metaChar ? `\\${metaChar}` : "(?:|/.*)"
    )}$`
  );
}
function clearWildcardRegExpCache() {
  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
}
function buildMatcherFromPreprocessedRoutes(routes) {
  const trie = new Trie();
  const handlerData = [];
  if (routes.length === 0) {
    return nullMatcher;
  }
  const routesWithStaticPathFlag = routes.map(
    (route) => [!/\*|\/:/.test(route[0]), ...route]
  ).sort(
    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length
  );
  const staticMap = /* @__PURE__ */ Object.create(null);
  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {
    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];
    if (pathErrorCheckOnly) {
      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];
    } else {
      j++;
    }
    let paramAssoc;
    try {
      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);
    } catch (e) {
      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;
    }
    if (pathErrorCheckOnly) {
      continue;
    }
    handlerData[j] = handlers.map(([h, paramCount]) => {
      const paramIndexMap = /* @__PURE__ */ Object.create(null);
      paramCount -= 1;
      for (; paramCount >= 0; paramCount--) {
        const [key, value] = paramAssoc[paramCount];
        paramIndexMap[key] = value;
      }
      return [h, paramIndexMap];
    });
  }
  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();
  for (let i = 0, len = handlerData.length; i < len; i++) {
    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {
      const map = handlerData[i][j]?.[1];
      if (!map) {
        continue;
      }
      const keys = Object.keys(map);
      for (let k = 0, len3 = keys.length; k < len3; k++) {
        map[keys[k]] = paramReplacementMap[map[keys[k]]];
      }
    }
  }
  const handlerMap = [];
  for (const i in indexReplacementMap) {
    handlerMap[i] = handlerData[indexReplacementMap[i]];
  }
  return [regexp, handlerMap, staticMap];
}
function findMiddleware(middleware, path) {
  if (!middleware) {
    return void 0;
  }
  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {
    if (buildWildcardRegExp(k).test(path)) {
      return [...middleware[k]];
    }
  }
  return void 0;
}
var RegExpRouter = class {
  name = "RegExpRouter";
  #middleware;
  #routes;
  constructor() {
    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
  }
  add(method, path, handler) {
    const middleware = this.#middleware;
    const routes = this.#routes;
    if (!middleware || !routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    if (!middleware[method]) {
      ;
      [middleware, routes].forEach((handlerMap) => {
        handlerMap[method] = /* @__PURE__ */ Object.create(null);
        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {
          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];
        });
      });
    }
    if (path === "/*") {
      path = "*";
    }
    const paramCount = (path.match(/\/:/g) || []).length;
    if (/\*$/.test(path)) {
      const re = buildWildcardRegExp(path);
      if (method === METHOD_NAME_ALL) {
        Object.keys(middleware).forEach((m) => {
          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];
        });
      } else {
        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];
      }
      Object.keys(middleware).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          Object.keys(middleware[m]).forEach((p) => {
            re.test(p) && middleware[m][p].push([handler, paramCount]);
          });
        }
      });
      Object.keys(routes).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          Object.keys(routes[m]).forEach(
            (p) => re.test(p) && routes[m][p].push([handler, paramCount])
          );
        }
      });
      return;
    }
    const paths = checkOptionalParameter(path) || [path];
    for (let i = 0, len = paths.length; i < len; i++) {
      const path2 = paths[i];
      Object.keys(routes).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          routes[m][path2] ||= [
            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []
          ];
          routes[m][path2].push([handler, paramCount - len + i + 1]);
        }
      });
    }
  }
  match(method, path) {
    clearWildcardRegExpCache();
    const matchers = this.#buildAllMatchers();
    this.match = (method2, path2) => {
      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];
      const staticMatch = matcher[2][path2];
      if (staticMatch) {
        return staticMatch;
      }
      const match = path2.match(matcher[0]);
      if (!match) {
        return [[], emptyParam];
      }
      const index = match.indexOf("", 1);
      return [matcher[1][index], match];
    };
    return this.match(method, path);
  }
  #buildAllMatchers() {
    const matchers = /* @__PURE__ */ Object.create(null);
    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {
      matchers[method] ||= this.#buildMatcher(method);
    });
    this.#middleware = this.#routes = void 0;
    return matchers;
  }
  #buildMatcher(method) {
    const routes = [];
    let hasOwnRoute = method === METHOD_NAME_ALL;
    [this.#middleware, this.#routes].forEach((r) => {
      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];
      if (ownRoute.length !== 0) {
        hasOwnRoute ||= true;
        routes.push(...ownRoute);
      } else if (method !== METHOD_NAME_ALL) {
        routes.push(
          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])
        );
      }
    });
    if (!hasOwnRoute) {
      return null;
    } else {
      return buildMatcherFromPreprocessedRoutes(routes);
    }
  }
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/router/reg-exp-router/index.js
// src/router/reg-exp-router/index.ts



;// CONCATENATED MODULE: ./node_modules/hono/dist/router/smart-router/router.js
// src/router/smart-router/router.ts

var SmartRouter = class {
  name = "SmartRouter";
  #routers = [];
  #routes = [];
  constructor(init) {
    this.#routers = init.routers;
  }
  add(method, path, handler) {
    if (!this.#routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    this.#routes.push([method, path, handler]);
  }
  match(method, path) {
    if (!this.#routes) {
      throw new Error("Fatal error");
    }
    const routers = this.#routers;
    const routes = this.#routes;
    const len = routers.length;
    let i = 0;
    let res;
    for (; i < len; i++) {
      const router = routers[i];
      try {
        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {
          router.add(...routes[i2]);
        }
        res = router.match(method, path);
      } catch (e) {
        if (e instanceof UnsupportedPathError) {
          continue;
        }
        throw e;
      }
      this.match = router.match.bind(router);
      this.#routers = [router];
      this.#routes = void 0;
      break;
    }
    if (i === len) {
      throw new Error("Fatal error");
    }
    this.name = `SmartRouter + ${this.activeRouter.name}`;
    return res;
  }
  get activeRouter() {
    if (this.#routes || this.#routers.length !== 1) {
      throw new Error("No active router has been determined yet.");
    }
    return this.#routers[0];
  }
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/router/trie-router/node.js
// src/router/trie-router/node.ts


var emptyParams = /* @__PURE__ */ Object.create(null);
var node_Node = class {
  #methods;
  #children;
  #patterns;
  #order = 0;
  #params = emptyParams;
  constructor(method, handler, children) {
    this.#children = children || /* @__PURE__ */ Object.create(null);
    this.#methods = [];
    if (method && handler) {
      const m = /* @__PURE__ */ Object.create(null);
      m[method] = { handler, possibleKeys: [], score: 0 };
      this.#methods = [m];
    }
    this.#patterns = [];
  }
  insert(method, path, handler) {
    this.#order = ++this.#order;
    let curNode = this;
    const parts = splitRoutingPath(path);
    const possibleKeys = [];
    for (let i = 0, len = parts.length; i < len; i++) {
      const p = parts[i];
      const nextP = parts[i + 1];
      const pattern = getPattern(p, nextP);
      const key = Array.isArray(pattern) ? pattern[0] : p;
      if (Object.keys(curNode.#children).includes(key)) {
        curNode = curNode.#children[key];
        const pattern2 = getPattern(p, nextP);
        if (pattern2) {
          possibleKeys.push(pattern2[1]);
        }
        continue;
      }
      curNode.#children[key] = new node_Node();
      if (pattern) {
        curNode.#patterns.push(pattern);
        possibleKeys.push(pattern[1]);
      }
      curNode = curNode.#children[key];
    }
    const m = /* @__PURE__ */ Object.create(null);
    const handlerSet = {
      handler,
      possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),
      score: this.#order
    };
    m[method] = handlerSet;
    curNode.#methods.push(m);
    return curNode;
  }
  #getHandlerSets(node, method, nodeParams, params) {
    const handlerSets = [];
    for (let i = 0, len = node.#methods.length; i < len; i++) {
      const m = node.#methods[i];
      const handlerSet = m[method] || m[METHOD_NAME_ALL];
      const processedSet = {};
      if (handlerSet !== void 0) {
        handlerSet.params = /* @__PURE__ */ Object.create(null);
        handlerSets.push(handlerSet);
        if (nodeParams !== emptyParams || params && params !== emptyParams) {
          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {
            const key = handlerSet.possibleKeys[i2];
            const processed = processedSet[handlerSet.score];
            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];
            processedSet[handlerSet.score] = true;
          }
        }
      }
    }
    return handlerSets;
  }
  search(method, path) {
    const handlerSets = [];
    this.#params = emptyParams;
    const curNode = this;
    let curNodes = [curNode];
    const parts = splitPath(path);
    const curNodesQueue = [];
    for (let i = 0, len = parts.length; i < len; i++) {
      const part = parts[i];
      const isLast = i === len - 1;
      const tempNodes = [];
      for (let j = 0, len2 = curNodes.length; j < len2; j++) {
        const node = curNodes[j];
        const nextNode = node.#children[part];
        if (nextNode) {
          nextNode.#params = node.#params;
          if (isLast) {
            if (nextNode.#children["*"]) {
              handlerSets.push(
                ...this.#getHandlerSets(nextNode.#children["*"], method, node.#params)
              );
            }
            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));
          } else {
            tempNodes.push(nextNode);
          }
        }
        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {
          const pattern = node.#patterns[k];
          const params = node.#params === emptyParams ? {} : { ...node.#params };
          if (pattern === "*") {
            const astNode = node.#children["*"];
            if (astNode) {
              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));
              astNode.#params = params;
              tempNodes.push(astNode);
            }
            continue;
          }
          if (part === "") {
            continue;
          }
          const [key, name, matcher] = pattern;
          const child = node.#children[key];
          const restPathString = parts.slice(i).join("/");
          if (matcher instanceof RegExp) {
            const m = matcher.exec(restPathString);
            if (m) {
              params[name] = m[0];
              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));
              if (Object.keys(child.#children).length) {
                child.#params = params;
                const componentCount = m[0].match(/\//)?.length ?? 0;
                const targetCurNodes = curNodesQueue[componentCount] ||= [];
                targetCurNodes.push(child);
              }
              continue;
            }
          }
          if (matcher === true || matcher.test(part)) {
            params[name] = part;
            if (isLast) {
              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));
              if (child.#children["*"]) {
                handlerSets.push(
                  ...this.#getHandlerSets(child.#children["*"], method, params, node.#params)
                );
              }
            } else {
              child.#params = params;
              tempNodes.push(child);
            }
          }
        }
      }
      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);
    }
    if (handlerSets.length > 1) {
      handlerSets.sort((a, b) => {
        return a.score - b.score;
      });
    }
    return [handlerSets.map(({ handler, params }) => [handler, params])];
  }
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/router/trie-router/router.js
// src/router/trie-router/router.ts


var TrieRouter = class {
  name = "TrieRouter";
  #node;
  constructor() {
    this.#node = new node_Node();
  }
  add(method, path, handler) {
    const results = checkOptionalParameter(path);
    if (results) {
      for (let i = 0, len = results.length; i < len; i++) {
        this.#node.insert(method, results[i], handler);
      }
      return;
    }
    this.#node.insert(method, path, handler);
  }
  match(method, path) {
    return this.#node.search(method, path);
  }
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/router/trie-router/index.js
// src/router/trie-router/index.ts



;// CONCATENATED MODULE: ./node_modules/hono/dist/hono.js
// src/hono.ts




var hono_Hono = class extends hono_base_Hono {
  constructor(options = {}) {
    super(options);
    this.router = options.router ?? new SmartRouter({
      routers: [new RegExpRouter(), new TrieRouter()]
    });
  }
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/index.js
// src/index.ts



;// CONCATENATED MODULE: ./node_modules/hono/dist/helper/adapter/index.js
// src/helper/adapter/index.ts
var env = (c, runtime) => {
  const global = globalThis;
  const globalEnv = global?.process?.env;
  runtime ??= getRuntimeKey();
  const runtimeEnvHandlers = {
    bun: () => globalEnv,
    node: () => globalEnv,
    "edge-light": () => globalEnv,
    deno: () => {
      return Deno.env.toObject();
    },
    workerd: () => c.env,
    fastly: () => ({}),
    other: () => ({})
  };
  return runtimeEnvHandlers[runtime]();
};
var knownUserAgents = {
  deno: "Deno",
  bun: "Bun",
  workerd: "Cloudflare-Workers",
  node: "Node.js"
};
var getRuntimeKey = () => {
  const global = globalThis;
  const userAgentSupported = typeof navigator !== "undefined" && typeof navigator.userAgent === "string";
  if (userAgentSupported) {
    for (const [runtimeKey, userAgent] of Object.entries(knownUserAgents)) {
      if (checkUserAgentEquals(userAgent)) {
        return runtimeKey;
      }
    }
  }
  if (typeof global?.EdgeRuntime === "string") {
    return "edge-light";
  }
  if (global?.fastly !== void 0) {
    return "fastly";
  }
  if (global?.process?.release?.name === "node") {
    return "node";
  }
  return "other";
};
var checkUserAgentEquals = (platform) => {
  const userAgent = navigator.userAgent;
  return userAgent.startsWith(platform);
};


;// CONCATENATED MODULE: ./node_modules/hono/dist/http-exception.js
// src/http-exception.ts
var http_exception_HTTPException = class extends Error {
  res;
  status;
  constructor(status = 500, options) {
    super(options?.message, { cause: options?.cause });
    this.res = options?.res;
    this.status = status;
  }
  getResponse() {
    if (this.res) {
      const newResponse = new Response(this.res.body, {
        status: this.status,
        headers: this.res.headers
      });
      return newResponse;
    }
    return new Response(this.message, {
      status: this.status
    });
  }
};


// EXTERNAL MODULE: ./node_modules/@actions/github/lib/github.js
var github = __nccwpck_require__(1685);
;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/node_modules/universal-user-agent/index.js
function getUserAgent() {
  if (typeof navigator === "object" && "userAgent" in navigator) {
    return navigator.userAgent;
  }

  if (typeof process === "object" && process.version !== undefined) {
    return `Node.js/${process.version.substr(1)} (${process.platform}; ${
      process.arch
    })`;
  }

  return "<environment undetectable>";
}

;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/node_modules/before-after-hook/lib/register.js
// @ts-check

function register(state, name, method, options) {
  if (typeof method !== "function") {
    throw new Error("method for before hook must be a function");
  }

  if (!options) {
    options = {};
  }

  if (Array.isArray(name)) {
    return name.reverse().reduce((callback, name) => {
      return register.bind(null, state, name, callback, options);
    }, method)();
  }

  return Promise.resolve().then(() => {
    if (!state.registry[name]) {
      return method(options);
    }

    return state.registry[name].reduce((method, registered) => {
      return registered.hook.bind(null, method, options);
    }, method)();
  });
}

;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/node_modules/before-after-hook/lib/add.js
// @ts-check

function addHook(state, kind, name, hook) {
  const orig = hook;
  if (!state.registry[name]) {
    state.registry[name] = [];
  }

  if (kind === "before") {
    hook = (method, options) => {
      return Promise.resolve()
        .then(orig.bind(null, options))
        .then(method.bind(null, options));
    };
  }

  if (kind === "after") {
    hook = (method, options) => {
      let result;
      return Promise.resolve()
        .then(method.bind(null, options))
        .then((result_) => {
          result = result_;
          return orig(result, options);
        })
        .then(() => {
          return result;
        });
    };
  }

  if (kind === "error") {
    hook = (method, options) => {
      return Promise.resolve()
        .then(method.bind(null, options))
        .catch((error) => {
          return orig(error, options);
        });
    };
  }

  state.registry[name].push({
    hook: hook,
    orig: orig,
  });
}

;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/node_modules/before-after-hook/lib/remove.js
// @ts-check

function removeHook(state, name, method) {
  if (!state.registry[name]) {
    return;
  }

  const index = state.registry[name]
    .map((registered) => {
      return registered.orig;
    })
    .indexOf(method);

  if (index === -1) {
    return;
  }

  state.registry[name].splice(index, 1);
}

;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/node_modules/before-after-hook/index.js
// @ts-check





// bind with array of arguments: https://stackoverflow.com/a/21792913
const bind = Function.bind;
const bindable = bind.bind(bind);

function bindApi(hook, state, name) {
  const removeHookRef = bindable(removeHook, null).apply(
    null,
    name ? [state, name] : [state]
  );
  hook.api = { remove: removeHookRef };
  hook.remove = removeHookRef;
  ["before", "error", "after", "wrap"].forEach((kind) => {
    const args = name ? [state, kind, name] : [state, kind];
    hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);
  });
}

function Singular() {
  const singularHookName = Symbol("Singular");
  const singularHookState = {
    registry: {},
  };
  const singularHook = register.bind(null, singularHookState, singularHookName);
  bindApi(singularHook, singularHookState, singularHookName);
  return singularHook;
}

function Collection() {
  const state = {
    registry: {},
  };

  const hook = register.bind(null, state);
  bindApi(hook, state);

  return hook;
}

/* harmony default export */ const before_after_hook = ({ Singular, Collection });

;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/node_modules/@octokit/request/node_modules/@octokit/endpoint/dist-bundle/index.js
// pkg/dist-src/defaults.js


// pkg/dist-src/version.js
var VERSION = "0.0.0-development";

// pkg/dist-src/defaults.js
var userAgent = `octokit-endpoint.js/${VERSION} ${getUserAgent()}`;
var DEFAULTS = {
  method: "GET",
  baseUrl: "https://api.github.com",
  headers: {
    accept: "application/vnd.github.v3+json",
    "user-agent": userAgent
  },
  mediaType: {
    format: ""
  }
};

// pkg/dist-src/util/lowercase-keys.js
function lowercaseKeys(object) {
  if (!object) {
    return {};
  }
  return Object.keys(object).reduce((newObj, key) => {
    newObj[key.toLowerCase()] = object[key];
    return newObj;
  }, {});
}

// pkg/dist-src/util/is-plain-object.js
function isPlainObject(value) {
  if (typeof value !== "object" || value === null) return false;
  if (Object.prototype.toString.call(value) !== "[object Object]") return false;
  const proto = Object.getPrototypeOf(value);
  if (proto === null) return true;
  const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
}

// pkg/dist-src/util/merge-deep.js
function mergeDeep(defaults, options) {
  const result = Object.assign({}, defaults);
  Object.keys(options).forEach((key) => {
    if (isPlainObject(options[key])) {
      if (!(key in defaults)) Object.assign(result, { [key]: options[key] });
      else result[key] = mergeDeep(defaults[key], options[key]);
    } else {
      Object.assign(result, { [key]: options[key] });
    }
  });
  return result;
}

// pkg/dist-src/util/remove-undefined-properties.js
function removeUndefinedProperties(obj) {
  for (const key in obj) {
    if (obj[key] === void 0) {
      delete obj[key];
    }
  }
  return obj;
}

// pkg/dist-src/merge.js
function merge(defaults, route, options) {
  if (typeof route === "string") {
    let [method, url] = route.split(" ");
    options = Object.assign(url ? { method, url } : { url: method }, options);
  } else {
    options = Object.assign({}, route);
  }
  options.headers = lowercaseKeys(options.headers);
  removeUndefinedProperties(options);
  removeUndefinedProperties(options.headers);
  const mergedOptions = mergeDeep(defaults || {}, options);
  if (options.url === "/graphql") {
    if (defaults && defaults.mediaType.previews?.length) {
      mergedOptions.mediaType.previews = defaults.mediaType.previews.filter(
        (preview) => !mergedOptions.mediaType.previews.includes(preview)
      ).concat(mergedOptions.mediaType.previews);
    }
    mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview) => preview.replace(/-preview/, ""));
  }
  return mergedOptions;
}

// pkg/dist-src/util/add-query-parameters.js
function addQueryParameters(url, parameters) {
  const separator = /\?/.test(url) ? "&" : "?";
  const names = Object.keys(parameters);
  if (names.length === 0) {
    return url;
  }
  return url + separator + names.map((name) => {
    if (name === "q") {
      return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
    }
    return `${name}=${encodeURIComponent(parameters[name])}`;
  }).join("&");
}

// pkg/dist-src/util/extract-url-variable-names.js
var urlVariableRegex = /\{[^{}}]+\}/g;
function removeNonChars(variableName) {
  return variableName.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g, "").split(/,/);
}
function extractUrlVariableNames(url) {
  const matches = url.match(urlVariableRegex);
  if (!matches) {
    return [];
  }
  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
}

// pkg/dist-src/util/omit.js
function omit(object, keysToOmit) {
  const result = { __proto__: null };
  for (const key of Object.keys(object)) {
    if (keysToOmit.indexOf(key) === -1) {
      result[key] = object[key];
    }
  }
  return result;
}

// pkg/dist-src/util/url-template.js
function encodeReserved(str) {
  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
    if (!/%[0-9A-Fa-f]/.test(part)) {
      part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
    }
    return part;
  }).join("");
}
function encodeUnreserved(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function encodeValue(operator, value, key) {
  value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
  if (key) {
    return encodeUnreserved(key) + "=" + value;
  } else {
    return value;
  }
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function isKeyOperator(operator) {
  return operator === ";" || operator === "&" || operator === "?";
}
function getValues(context, operator, key, modifier) {
  var value = context[key], result = [];
  if (isDefined(value) && value !== "") {
    if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
      value = value.toString();
      if (modifier && modifier !== "*") {
        value = value.substring(0, parseInt(modifier, 10));
      }
      result.push(
        encodeValue(operator, value, isKeyOperator(operator) ? key : "")
      );
    } else {
      if (modifier === "*") {
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            result.push(
              encodeValue(operator, value2, isKeyOperator(operator) ? key : "")
            );
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              result.push(encodeValue(operator, value[k], k));
            }
          });
        }
      } else {
        const tmp = [];
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            tmp.push(encodeValue(operator, value2));
          });
        } else {
          Object.keys(value).forEach(function(k) {
            if (isDefined(value[k])) {
              tmp.push(encodeUnreserved(k));
              tmp.push(encodeValue(operator, value[k].toString()));
            }
          });
        }
        if (isKeyOperator(operator)) {
          result.push(encodeUnreserved(key) + "=" + tmp.join(","));
        } else if (tmp.length !== 0) {
          result.push(tmp.join(","));
        }
      }
    }
  } else {
    if (operator === ";") {
      if (isDefined(value)) {
        result.push(encodeUnreserved(key));
      }
    } else if (value === "" && (operator === "&" || operator === "?")) {
      result.push(encodeUnreserved(key) + "=");
    } else if (value === "") {
      result.push("");
    }
  }
  return result;
}
function parseUrl(template) {
  return {
    expand: expand.bind(null, template)
  };
}
function expand(template, context) {
  var operators = ["+", "#", ".", "/", ";", "?", "&"];
  template = template.replace(
    /\{([^\{\}]+)\}|([^\{\}]+)/g,
    function(_, expression, literal) {
      if (expression) {
        let operator = "";
        const values = [];
        if (operators.indexOf(expression.charAt(0)) !== -1) {
          operator = expression.charAt(0);
          expression = expression.substr(1);
        }
        expression.split(/,/g).forEach(function(variable) {
          var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
          values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
        });
        if (operator && operator !== "+") {
          var separator = ",";
          if (operator === "?") {
            separator = "&";
          } else if (operator !== "#") {
            separator = operator;
          }
          return (values.length !== 0 ? operator : "") + values.join(separator);
        } else {
          return values.join(",");
        }
      } else {
        return encodeReserved(literal);
      }
    }
  );
  if (template === "/") {
    return template;
  } else {
    return template.replace(/\/$/, "");
  }
}

// pkg/dist-src/parse.js
function parse(options) {
  let method = options.method.toUpperCase();
  let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
  let headers = Object.assign({}, options.headers);
  let body;
  let parameters = omit(options, [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "mediaType"
  ]);
  const urlVariableNames = extractUrlVariableNames(url);
  url = parseUrl(url).expand(parameters);
  if (!/^http/.test(url)) {
    url = options.baseUrl + url;
  }
  const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
  const remainingParameters = omit(parameters, omittedParameters);
  const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
  if (!isBinaryRequest) {
    if (options.mediaType.format) {
      headers.accept = headers.accept.split(/,/).map(
        (format) => format.replace(
          /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
          `application/vnd$1$2.${options.mediaType.format}`
        )
      ).join(",");
    }
    if (url.endsWith("/graphql")) {
      if (options.mediaType.previews?.length) {
        const previewsFromAcceptHeader = headers.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g) || [];
        headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
          const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
          return `application/vnd.github.${preview}-preview${format}`;
        }).join(",");
      }
    }
  }
  if (["GET", "HEAD"].includes(method)) {
    url = addQueryParameters(url, remainingParameters);
  } else {
    if ("data" in remainingParameters) {
      body = remainingParameters.data;
    } else {
      if (Object.keys(remainingParameters).length) {
        body = remainingParameters;
      }
    }
  }
  if (!headers["content-type"] && typeof body !== "undefined") {
    headers["content-type"] = "application/json; charset=utf-8";
  }
  if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
    body = "";
  }
  return Object.assign(
    { method, url, headers },
    typeof body !== "undefined" ? { body } : null,
    options.request ? { request: options.request } : null
  );
}

// pkg/dist-src/endpoint-with-defaults.js
function endpointWithDefaults(defaults, route, options) {
  return parse(merge(defaults, route, options));
}

// pkg/dist-src/with-defaults.js
function withDefaults(oldDefaults, newDefaults) {
  const DEFAULTS2 = merge(oldDefaults, newDefaults);
  const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
  return Object.assign(endpoint2, {
    DEFAULTS: DEFAULTS2,
    defaults: withDefaults.bind(null, DEFAULTS2),
    merge: merge.bind(null, DEFAULTS2),
    parse
  });
}

// pkg/dist-src/index.js
var endpoint = withDefaults(null, DEFAULTS);


// EXTERNAL MODULE: ./node_modules/fast-content-type-parse/index.js
var fast_content_type_parse = __nccwpck_require__(4807);
;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/node_modules/@octokit/request-error/dist-src/index.js
class RequestError extends Error {
  name;
  /**
   * http status code
   */
  status;
  /**
   * Request options that lead to the error.
   */
  request;
  /**
   * Response object if a response was received
   */
  response;
  constructor(message, statusCode, options) {
    super(message);
    this.name = "HttpError";
    this.status = Number.parseInt(statusCode);
    if (Number.isNaN(this.status)) {
      this.status = 0;
    }
    if ("response" in options) {
      this.response = options.response;
    }
    const requestCopy = Object.assign({}, options.request);
    if (options.request.headers.authorization) {
      requestCopy.headers = Object.assign({}, options.request.headers, {
        authorization: options.request.headers.authorization.replace(
          /(?<! ) .*$/,
          " [REDACTED]"
        )
      });
    }
    requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
    this.request = requestCopy;
  }
}


;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/node_modules/@octokit/request/dist-bundle/index.js
// pkg/dist-src/index.js


// pkg/dist-src/defaults.js


// pkg/dist-src/version.js
var dist_bundle_VERSION = "0.0.0-development";

// pkg/dist-src/defaults.js
var defaults_default = {
  headers: {
    "user-agent": `octokit-request.js/${dist_bundle_VERSION} ${getUserAgent()}`
  }
};

// pkg/dist-src/fetch-wrapper.js


// pkg/dist-src/is-plain-object.js
function dist_bundle_isPlainObject(value) {
  if (typeof value !== "object" || value === null) return false;
  if (Object.prototype.toString.call(value) !== "[object Object]") return false;
  const proto = Object.getPrototypeOf(value);
  if (proto === null) return true;
  const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
}

// pkg/dist-src/fetch-wrapper.js

async function fetchWrapper(requestOptions) {
  const fetch = requestOptions.request?.fetch || globalThis.fetch;
  if (!fetch) {
    throw new Error(
      "fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing"
    );
  }
  const log = requestOptions.request?.log || console;
  const parseSuccessResponseBody = requestOptions.request?.parseSuccessResponseBody !== false;
  const body = dist_bundle_isPlainObject(requestOptions.body) || Array.isArray(requestOptions.body) ? JSON.stringify(requestOptions.body) : requestOptions.body;
  const requestHeaders = Object.fromEntries(
    Object.entries(requestOptions.headers).map(([name, value]) => [
      name,
      String(value)
    ])
  );
  let fetchResponse;
  try {
    fetchResponse = await fetch(requestOptions.url, {
      method: requestOptions.method,
      body,
      redirect: requestOptions.request?.redirect,
      headers: requestHeaders,
      signal: requestOptions.request?.signal,
      // duplex must be set if request.body is ReadableStream or Async Iterables.
      // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.
      ...requestOptions.body && { duplex: "half" }
    });
  } catch (error) {
    let message = "Unknown Error";
    if (error instanceof Error) {
      if (error.name === "AbortError") {
        error.status = 500;
        throw error;
      }
      message = error.message;
      if (error.name === "TypeError" && "cause" in error) {
        if (error.cause instanceof Error) {
          message = error.cause.message;
        } else if (typeof error.cause === "string") {
          message = error.cause;
        }
      }
    }
    const requestError = new RequestError(message, 500, {
      request: requestOptions
    });
    requestError.cause = error;
    throw requestError;
  }
  const status = fetchResponse.status;
  const url = fetchResponse.url;
  const responseHeaders = {};
  for (const [key, value] of fetchResponse.headers) {
    responseHeaders[key] = value;
  }
  const octokitResponse = {
    url,
    status,
    headers: responseHeaders,
    data: ""
  };
  if ("deprecation" in responseHeaders) {
    const matches = responseHeaders.link && responseHeaders.link.match(/<([^<>]+)>; rel="deprecation"/);
    const deprecationLink = matches && matches.pop();
    log.warn(
      `[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${responseHeaders.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`
    );
  }
  if (status === 204 || status === 205) {
    return octokitResponse;
  }
  if (requestOptions.method === "HEAD") {
    if (status < 400) {
      return octokitResponse;
    }
    throw new RequestError(fetchResponse.statusText, status, {
      response: octokitResponse,
      request: requestOptions
    });
  }
  if (status === 304) {
    octokitResponse.data = await getResponseData(fetchResponse);
    throw new RequestError("Not modified", status, {
      response: octokitResponse,
      request: requestOptions
    });
  }
  if (status >= 400) {
    octokitResponse.data = await getResponseData(fetchResponse);
    throw new RequestError(toErrorMessage(octokitResponse.data), status, {
      response: octokitResponse,
      request: requestOptions
    });
  }
  octokitResponse.data = parseSuccessResponseBody ? await getResponseData(fetchResponse) : fetchResponse.body;
  return octokitResponse;
}
async function getResponseData(response) {
  const contentType = response.headers.get("content-type");
  if (!contentType) {
    return response.text().catch(() => "");
  }
  const mimetype = (0,fast_content_type_parse/* safeParse */.xL)(contentType);
  if (isJSONResponse(mimetype)) {
    let text = "";
    try {
      text = await response.text();
      return JSON.parse(text);
    } catch (err) {
      return text;
    }
  } else if (mimetype.type.startsWith("text/") || mimetype.parameters.charset?.toLowerCase() === "utf-8") {
    return response.text().catch(() => "");
  } else {
    return response.arrayBuffer().catch(() => new ArrayBuffer(0));
  }
}
function isJSONResponse(mimetype) {
  return mimetype.type === "application/json" || mimetype.type === "application/scim+json";
}
function toErrorMessage(data) {
  if (typeof data === "string") {
    return data;
  }
  if (data instanceof ArrayBuffer) {
    return "Unknown error";
  }
  if ("message" in data) {
    const suffix = "documentation_url" in data ? ` - ${data.documentation_url}` : "";
    return Array.isArray(data.errors) ? `${data.message}: ${data.errors.map((v) => JSON.stringify(v)).join(", ")}${suffix}` : `${data.message}${suffix}`;
  }
  return `Unknown error: ${JSON.stringify(data)}`;
}

// pkg/dist-src/with-defaults.js
function dist_bundle_withDefaults(oldEndpoint, newDefaults) {
  const endpoint2 = oldEndpoint.defaults(newDefaults);
  const newApi = function(route, parameters) {
    const endpointOptions = endpoint2.merge(route, parameters);
    if (!endpointOptions.request || !endpointOptions.request.hook) {
      return fetchWrapper(endpoint2.parse(endpointOptions));
    }
    const request2 = (route2, parameters2) => {
      return fetchWrapper(
        endpoint2.parse(endpoint2.merge(route2, parameters2))
      );
    };
    Object.assign(request2, {
      endpoint: endpoint2,
      defaults: dist_bundle_withDefaults.bind(null, endpoint2)
    });
    return endpointOptions.request.hook(request2, endpointOptions);
  };
  return Object.assign(newApi, {
    endpoint: endpoint2,
    defaults: dist_bundle_withDefaults.bind(null, endpoint2)
  });
}

// pkg/dist-src/index.js
var request = dist_bundle_withDefaults(endpoint, defaults_default);


;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/node_modules/@octokit/graphql/dist-bundle/index.js
// pkg/dist-src/index.js



// pkg/dist-src/version.js
var graphql_dist_bundle_VERSION = "0.0.0-development";

// pkg/dist-src/with-defaults.js


// pkg/dist-src/graphql.js


// pkg/dist-src/error.js
function _buildMessageForResponseErrors(data) {
  return `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n");
}
var GraphqlResponseError = class extends Error {
  constructor(request2, headers, response) {
    super(_buildMessageForResponseErrors(response));
    this.request = request2;
    this.headers = headers;
    this.response = response;
    this.errors = response.errors;
    this.data = response.data;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
  name = "GraphqlResponseError";
  errors;
  data;
};

// pkg/dist-src/graphql.js
var NON_VARIABLE_OPTIONS = [
  "method",
  "baseUrl",
  "url",
  "headers",
  "request",
  "query",
  "mediaType",
  "operationName"
];
var FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
function graphql(request2, query, options) {
  if (options) {
    if (typeof query === "string" && "query" in options) {
      return Promise.reject(
        new Error(`[@octokit/graphql] "query" cannot be used as variable name`)
      );
    }
    for (const key in options) {
      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key)) continue;
      return Promise.reject(
        new Error(
          `[@octokit/graphql] "${key}" cannot be used as variable name`
        )
      );
    }
  }
  const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
  const requestOptions = Object.keys(
    parsedOptions
  ).reduce((result, key) => {
    if (NON_VARIABLE_OPTIONS.includes(key)) {
      result[key] = parsedOptions[key];
      return result;
    }
    if (!result.variables) {
      result.variables = {};
    }
    result.variables[key] = parsedOptions[key];
    return result;
  }, {});
  const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
  }
  return request2(requestOptions).then((response) => {
    if (response.data.errors) {
      const headers = {};
      for (const key of Object.keys(response.headers)) {
        headers[key] = response.headers[key];
      }
      throw new GraphqlResponseError(
        requestOptions,
        headers,
        response.data
      );
    }
    return response.data.data;
  });
}

// pkg/dist-src/with-defaults.js
function graphql_dist_bundle_withDefaults(request2, newDefaults) {
  const newRequest = request2.defaults(newDefaults);
  const newApi = (query, options) => {
    return graphql(newRequest, query, options);
  };
  return Object.assign(newApi, {
    defaults: graphql_dist_bundle_withDefaults.bind(null, newRequest),
    endpoint: newRequest.endpoint
  });
}

// pkg/dist-src/index.js
var graphql2 = graphql_dist_bundle_withDefaults(request, {
  headers: {
    "user-agent": `octokit-graphql.js/${graphql_dist_bundle_VERSION} ${getUserAgent()}`
  },
  method: "POST",
  url: "/graphql"
});
function withCustomRequest(customRequest) {
  return graphql_dist_bundle_withDefaults(customRequest, {
    method: "POST",
    url: "/graphql"
  });
}


;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/node_modules/@octokit/auth-token/dist-bundle/index.js
// pkg/dist-src/is-jwt.js
var b64url = "(?:[a-zA-Z0-9_-]+)";
var sep = "\\.";
var jwtRE = new RegExp(`^${b64url}${sep}${b64url}${sep}${b64url}$`);
var isJWT = jwtRE.test.bind(jwtRE);

// pkg/dist-src/auth.js
async function auth(token) {
  const isApp = isJWT(token);
  const isInstallation = token.startsWith("v1.") || token.startsWith("ghs_");
  const isUserToServer = token.startsWith("ghu_");
  const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
  return {
    type: "token",
    token,
    tokenType
  };
}

// pkg/dist-src/with-authorization-prefix.js
function withAuthorizationPrefix(token) {
  if (token.split(/\./).length === 3) {
    return `bearer ${token}`;
  }
  return `token ${token}`;
}

// pkg/dist-src/hook.js
async function hook(token, request, route, parameters) {
  const endpoint = request.endpoint.merge(
    route,
    parameters
  );
  endpoint.headers.authorization = withAuthorizationPrefix(token);
  return request(endpoint);
}

// pkg/dist-src/index.js
var createTokenAuth = function createTokenAuth2(token) {
  if (!token) {
    throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
  }
  if (typeof token !== "string") {
    throw new Error(
      "[@octokit/auth-token] Token passed to createTokenAuth is not a string"
    );
  }
  token = token.replace(/^(token|bearer) +/i, "");
  return Object.assign(auth.bind(null, token), {
    hook: hook.bind(null, token)
  });
};


;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/dist-src/version.js
const version_VERSION = "6.1.4";


;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/core/dist-src/index.js






const noop = () => {
};
const consoleWarn = console.warn.bind(console);
const consoleError = console.error.bind(console);
const userAgentTrail = `octokit-core.js/${version_VERSION} ${getUserAgent()}`;
class Octokit {
  static VERSION = version_VERSION;
  static defaults(defaults) {
    const OctokitWithDefaults = class extends this {
      constructor(...args) {
        const options = args[0] || {};
        if (typeof defaults === "function") {
          super(defaults(options));
          return;
        }
        super(
          Object.assign(
            {},
            defaults,
            options,
            options.userAgent && defaults.userAgent ? {
              userAgent: `${options.userAgent} ${defaults.userAgent}`
            } : null
          )
        );
      }
    };
    return OctokitWithDefaults;
  }
  static plugins = [];
  /**
   * Attach a plugin (or many) to your Octokit instance.
   *
   * @example
   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
   */
  static plugin(...newPlugins) {
    const currentPlugins = this.plugins;
    const NewOctokit = class extends this {
      static plugins = currentPlugins.concat(
        newPlugins.filter((plugin) => !currentPlugins.includes(plugin))
      );
    };
    return NewOctokit;
  }
  constructor(options = {}) {
    const hook = new before_after_hook.Collection();
    const requestDefaults = {
      baseUrl: request.endpoint.DEFAULTS.baseUrl,
      headers: {},
      request: Object.assign({}, options.request, {
        // @ts-ignore internal usage only, no need to type
        hook: hook.bind(null, "request")
      }),
      mediaType: {
        previews: [],
        format: ""
      }
    };
    requestDefaults.headers["user-agent"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;
    if (options.baseUrl) {
      requestDefaults.baseUrl = options.baseUrl;
    }
    if (options.previews) {
      requestDefaults.mediaType.previews = options.previews;
    }
    if (options.timeZone) {
      requestDefaults.headers["time-zone"] = options.timeZone;
    }
    this.request = request.defaults(requestDefaults);
    this.graphql = withCustomRequest(this.request).defaults(requestDefaults);
    this.log = Object.assign(
      {
        debug: noop,
        info: noop,
        warn: consoleWarn,
        error: consoleError
      },
      options.log
    );
    this.hook = hook;
    if (!options.authStrategy) {
      if (!options.auth) {
        this.auth = async () => ({
          type: "unauthenticated"
        });
      } else {
        const auth = createTokenAuth(options.auth);
        hook.wrap("request", auth.hook);
        this.auth = auth;
      }
    } else {
      const { authStrategy, ...otherOptions } = options;
      const auth = authStrategy(
        Object.assign(
          {
            request: this.request,
            log: this.log,
            // we pass the current octokit instance as well as its constructor options
            // to allow for authentication strategies that return a new octokit instance
            // that shares the same internal state as the current one. The original
            // requirement for this was the "event-octokit" authentication strategy
            // of https://github.com/probot/octokit-auth-probot.
            octokit: this,
            octokitOptions: otherOptions
          },
          options.auth
        )
      );
      hook.wrap("request", auth.hook);
      this.auth = auth;
    }
    const classConstructor = this.constructor;
    for (let i = 0; i < classConstructor.plugins.length; ++i) {
      Object.assign(this, classConstructor.plugins[i](this, options));
    }
  }
  // assigned during constructor
  request;
  graphql;
  log;
  hook;
  // TODO: type `octokit.auth` based on passed options.authStrategy
  auth;
}


;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/plugin-paginate-rest/dist-bundle/index.js
// pkg/dist-src/version.js
var plugin_paginate_rest_dist_bundle_VERSION = "0.0.0-development";

// pkg/dist-src/normalize-paginated-list-response.js
function normalizePaginatedListResponse(response) {
  if (!response.data) {
    return {
      ...response,
      data: []
    };
  }
  const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
  if (!responseNeedsNormalization) return response;
  const incompleteResults = response.data.incomplete_results;
  const repositorySelection = response.data.repository_selection;
  const totalCount = response.data.total_count;
  delete response.data.incomplete_results;
  delete response.data.repository_selection;
  delete response.data.total_count;
  const namespaceKey = Object.keys(response.data)[0];
  const data = response.data[namespaceKey];
  response.data = data;
  if (typeof incompleteResults !== "undefined") {
    response.data.incomplete_results = incompleteResults;
  }
  if (typeof repositorySelection !== "undefined") {
    response.data.repository_selection = repositorySelection;
  }
  response.data.total_count = totalCount;
  return response;
}

// pkg/dist-src/iterator.js
function iterator(octokit, route, parameters) {
  const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
  const requestMethod = typeof route === "function" ? route : octokit.request;
  const method = options.method;
  const headers = options.headers;
  let url = options.url;
  return {
    [Symbol.asyncIterator]: () => ({
      async next() {
        if (!url) return { done: true };
        try {
          const response = await requestMethod({ method, url, headers });
          const normalizedResponse = normalizePaginatedListResponse(response);
          url = ((normalizedResponse.headers.link || "").match(
            /<([^<>]+)>;\s*rel="next"/
          ) || [])[1];
          return { value: normalizedResponse };
        } catch (error) {
          if (error.status !== 409) throw error;
          url = "";
          return {
            value: {
              status: 200,
              headers: {},
              data: []
            }
          };
        }
      }
    })
  };
}

// pkg/dist-src/paginate.js
function paginate(octokit, route, parameters, mapFn) {
  if (typeof parameters === "function") {
    mapFn = parameters;
    parameters = void 0;
  }
  return gather(
    octokit,
    [],
    iterator(octokit, route, parameters)[Symbol.asyncIterator](),
    mapFn
  );
}
function gather(octokit, results, iterator2, mapFn) {
  return iterator2.next().then((result) => {
    if (result.done) {
      return results;
    }
    let earlyExit = false;
    function done() {
      earlyExit = true;
    }
    results = results.concat(
      mapFn ? mapFn(result.value, done) : result.value.data
    );
    if (earlyExit) {
      return results;
    }
    return gather(octokit, results, iterator2, mapFn);
  });
}

// pkg/dist-src/compose-paginate.js
var composePaginateRest = Object.assign(paginate, {
  iterator
});

// pkg/dist-src/generated/paginating-endpoints.js
var paginatingEndpoints = (/* unused pure expression or super */ null && ([
  "GET /advisories",
  "GET /app/hook/deliveries",
  "GET /app/installation-requests",
  "GET /app/installations",
  "GET /assignments/{assignment_id}/accepted_assignments",
  "GET /classrooms",
  "GET /classrooms/{classroom_id}/assignments",
  "GET /enterprises/{enterprise}/code-security/configurations",
  "GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories",
  "GET /enterprises/{enterprise}/dependabot/alerts",
  "GET /enterprises/{enterprise}/secret-scanning/alerts",
  "GET /events",
  "GET /gists",
  "GET /gists/public",
  "GET /gists/starred",
  "GET /gists/{gist_id}/comments",
  "GET /gists/{gist_id}/commits",
  "GET /gists/{gist_id}/forks",
  "GET /installation/repositories",
  "GET /issues",
  "GET /licenses",
  "GET /marketplace_listing/plans",
  "GET /marketplace_listing/plans/{plan_id}/accounts",
  "GET /marketplace_listing/stubbed/plans",
  "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
  "GET /networks/{owner}/{repo}/events",
  "GET /notifications",
  "GET /organizations",
  "GET /orgs/{org}/actions/cache/usage-by-repository",
  "GET /orgs/{org}/actions/hosted-runners",
  "GET /orgs/{org}/actions/permissions/repositories",
  "GET /orgs/{org}/actions/runner-groups",
  "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners",
  "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
  "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
  "GET /orgs/{org}/actions/runners",
  "GET /orgs/{org}/actions/secrets",
  "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/actions/variables",
  "GET /orgs/{org}/actions/variables/{name}/repositories",
  "GET /orgs/{org}/attestations/{subject_digest}",
  "GET /orgs/{org}/blocks",
  "GET /orgs/{org}/code-scanning/alerts",
  "GET /orgs/{org}/code-security/configurations",
  "GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories",
  "GET /orgs/{org}/codespaces",
  "GET /orgs/{org}/codespaces/secrets",
  "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/copilot/billing/seats",
  "GET /orgs/{org}/copilot/metrics",
  "GET /orgs/{org}/copilot/usage",
  "GET /orgs/{org}/dependabot/alerts",
  "GET /orgs/{org}/dependabot/secrets",
  "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
  "GET /orgs/{org}/events",
  "GET /orgs/{org}/failed_invitations",
  "GET /orgs/{org}/hooks",
  "GET /orgs/{org}/hooks/{hook_id}/deliveries",
  "GET /orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}",
  "GET /orgs/{org}/insights/api/subject-stats",
  "GET /orgs/{org}/insights/api/user-stats/{user_id}",
  "GET /orgs/{org}/installations",
  "GET /orgs/{org}/invitations",
  "GET /orgs/{org}/invitations/{invitation_id}/teams",
  "GET /orgs/{org}/issues",
  "GET /orgs/{org}/members",
  "GET /orgs/{org}/members/{username}/codespaces",
  "GET /orgs/{org}/migrations",
  "GET /orgs/{org}/migrations/{migration_id}/repositories",
  "GET /orgs/{org}/organization-roles/{role_id}/teams",
  "GET /orgs/{org}/organization-roles/{role_id}/users",
  "GET /orgs/{org}/outside_collaborators",
  "GET /orgs/{org}/packages",
  "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
  "GET /orgs/{org}/personal-access-token-requests",
  "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
  "GET /orgs/{org}/personal-access-tokens",
  "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
  "GET /orgs/{org}/private-registries",
  "GET /orgs/{org}/projects",
  "GET /orgs/{org}/properties/values",
  "GET /orgs/{org}/public_members",
  "GET /orgs/{org}/repos",
  "GET /orgs/{org}/rulesets",
  "GET /orgs/{org}/rulesets/rule-suites",
  "GET /orgs/{org}/rulesets/{ruleset_id}/history",
  "GET /orgs/{org}/secret-scanning/alerts",
  "GET /orgs/{org}/security-advisories",
  "GET /orgs/{org}/settings/network-configurations",
  "GET /orgs/{org}/team/{team_slug}/copilot/metrics",
  "GET /orgs/{org}/team/{team_slug}/copilot/usage",
  "GET /orgs/{org}/teams",
  "GET /orgs/{org}/teams/{team_slug}/discussions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
  "GET /orgs/{org}/teams/{team_slug}/invitations",
  "GET /orgs/{org}/teams/{team_slug}/members",
  "GET /orgs/{org}/teams/{team_slug}/projects",
  "GET /orgs/{org}/teams/{team_slug}/repos",
  "GET /orgs/{org}/teams/{team_slug}/teams",
  "GET /projects/columns/{column_id}/cards",
  "GET /projects/{project_id}/collaborators",
  "GET /projects/{project_id}/columns",
  "GET /repos/{owner}/{repo}/actions/artifacts",
  "GET /repos/{owner}/{repo}/actions/caches",
  "GET /repos/{owner}/{repo}/actions/organization-secrets",
  "GET /repos/{owner}/{repo}/actions/organization-variables",
  "GET /repos/{owner}/{repo}/actions/runners",
  "GET /repos/{owner}/{repo}/actions/runs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
  "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
  "GET /repos/{owner}/{repo}/actions/secrets",
  "GET /repos/{owner}/{repo}/actions/variables",
  "GET /repos/{owner}/{repo}/actions/workflows",
  "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
  "GET /repos/{owner}/{repo}/activity",
  "GET /repos/{owner}/{repo}/assignees",
  "GET /repos/{owner}/{repo}/attestations/{subject_digest}",
  "GET /repos/{owner}/{repo}/branches",
  "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
  "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
  "GET /repos/{owner}/{repo}/code-scanning/alerts",
  "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
  "GET /repos/{owner}/{repo}/code-scanning/analyses",
  "GET /repos/{owner}/{repo}/codespaces",
  "GET /repos/{owner}/{repo}/codespaces/devcontainers",
  "GET /repos/{owner}/{repo}/codespaces/secrets",
  "GET /repos/{owner}/{repo}/collaborators",
  "GET /repos/{owner}/{repo}/comments",
  "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/commits",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
  "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
  "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
  "GET /repos/{owner}/{repo}/commits/{ref}/status",
  "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
  "GET /repos/{owner}/{repo}/contributors",
  "GET /repos/{owner}/{repo}/dependabot/alerts",
  "GET /repos/{owner}/{repo}/dependabot/secrets",
  "GET /repos/{owner}/{repo}/deployments",
  "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
  "GET /repos/{owner}/{repo}/environments",
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
  "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
  "GET /repos/{owner}/{repo}/environments/{environment_name}/secrets",
  "GET /repos/{owner}/{repo}/environments/{environment_name}/variables",
  "GET /repos/{owner}/{repo}/events",
  "GET /repos/{owner}/{repo}/forks",
  "GET /repos/{owner}/{repo}/hooks",
  "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
  "GET /repos/{owner}/{repo}/invitations",
  "GET /repos/{owner}/{repo}/issues",
  "GET /repos/{owner}/{repo}/issues/comments",
  "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/issues/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues",
  "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
  "GET /repos/{owner}/{repo}/keys",
  "GET /repos/{owner}/{repo}/labels",
  "GET /repos/{owner}/{repo}/milestones",
  "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
  "GET /repos/{owner}/{repo}/notifications",
  "GET /repos/{owner}/{repo}/pages/builds",
  "GET /repos/{owner}/{repo}/projects",
  "GET /repos/{owner}/{repo}/pulls",
  "GET /repos/{owner}/{repo}/pulls/comments",
  "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
  "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
  "GET /repos/{owner}/{repo}/releases",
  "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
  "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
  "GET /repos/{owner}/{repo}/rules/branches/{branch}",
  "GET /repos/{owner}/{repo}/rulesets",
  "GET /repos/{owner}/{repo}/rulesets/rule-suites",
  "GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts",
  "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
  "GET /repos/{owner}/{repo}/security-advisories",
  "GET /repos/{owner}/{repo}/stargazers",
  "GET /repos/{owner}/{repo}/subscribers",
  "GET /repos/{owner}/{repo}/tags",
  "GET /repos/{owner}/{repo}/teams",
  "GET /repos/{owner}/{repo}/topics",
  "GET /repositories",
  "GET /search/code",
  "GET /search/commits",
  "GET /search/issues",
  "GET /search/labels",
  "GET /search/repositories",
  "GET /search/topics",
  "GET /search/users",
  "GET /teams/{team_id}/discussions",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments",
  "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
  "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
  "GET /teams/{team_id}/invitations",
  "GET /teams/{team_id}/members",
  "GET /teams/{team_id}/projects",
  "GET /teams/{team_id}/repos",
  "GET /teams/{team_id}/teams",
  "GET /user/blocks",
  "GET /user/codespaces",
  "GET /user/codespaces/secrets",
  "GET /user/emails",
  "GET /user/followers",
  "GET /user/following",
  "GET /user/gpg_keys",
  "GET /user/installations",
  "GET /user/installations/{installation_id}/repositories",
  "GET /user/issues",
  "GET /user/keys",
  "GET /user/marketplace_purchases",
  "GET /user/marketplace_purchases/stubbed",
  "GET /user/memberships/orgs",
  "GET /user/migrations",
  "GET /user/migrations/{migration_id}/repositories",
  "GET /user/orgs",
  "GET /user/packages",
  "GET /user/packages/{package_type}/{package_name}/versions",
  "GET /user/public_emails",
  "GET /user/repos",
  "GET /user/repository_invitations",
  "GET /user/social_accounts",
  "GET /user/ssh_signing_keys",
  "GET /user/starred",
  "GET /user/subscriptions",
  "GET /user/teams",
  "GET /users",
  "GET /users/{username}/attestations/{subject_digest}",
  "GET /users/{username}/events",
  "GET /users/{username}/events/orgs/{org}",
  "GET /users/{username}/events/public",
  "GET /users/{username}/followers",
  "GET /users/{username}/following",
  "GET /users/{username}/gists",
  "GET /users/{username}/gpg_keys",
  "GET /users/{username}/keys",
  "GET /users/{username}/orgs",
  "GET /users/{username}/packages",
  "GET /users/{username}/projects",
  "GET /users/{username}/received_events",
  "GET /users/{username}/received_events/public",
  "GET /users/{username}/repos",
  "GET /users/{username}/social_accounts",
  "GET /users/{username}/ssh_signing_keys",
  "GET /users/{username}/starred",
  "GET /users/{username}/subscriptions"
]));

// pkg/dist-src/paginating-endpoints.js
function isPaginatingEndpoint(arg) {
  if (typeof arg === "string") {
    return paginatingEndpoints.includes(arg);
  } else {
    return false;
  }
}

// pkg/dist-src/index.js
function paginateRest(octokit) {
  return {
    paginate: Object.assign(paginate.bind(null, octokit), {
      iterator: iterator.bind(null, octokit)
    })
  };
}
paginateRest.VERSION = plugin_paginate_rest_dist_bundle_VERSION;


;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/version.js
const dist_src_version_VERSION = "13.5.0";

//# sourceMappingURL=version.js.map

;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/generated/endpoints.js
const Endpoints = {
  actions: {
    addCustomLabelsToSelfHostedRunnerForOrg: [
      "POST /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    addCustomLabelsToSelfHostedRunnerForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    addRepoAccessToSelfHostedRunnerGroupInOrg: [
      "PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"
    ],
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    addSelectedRepoToOrgVariable: [
      "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    ],
    approveWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"
    ],
    cancelWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
    ],
    createEnvironmentVariable: [
      "POST /repos/{owner}/{repo}/environments/{environment_name}/variables"
    ],
    createHostedRunnerForOrg: ["POST /orgs/{org}/actions/hosted-runners"],
    createOrUpdateEnvironmentSecret: [
      "PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"
    ],
    createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    createOrgVariable: ["POST /orgs/{org}/actions/variables"],
    createRegistrationTokenForOrg: [
      "POST /orgs/{org}/actions/runners/registration-token"
    ],
    createRegistrationTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/registration-token"
    ],
    createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
    createRemoveTokenForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/remove-token"
    ],
    createRepoVariable: ["POST /repos/{owner}/{repo}/actions/variables"],
    createWorkflowDispatch: [
      "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
    ],
    deleteActionsCacheById: [
      "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"
    ],
    deleteActionsCacheByKey: [
      "DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"
    ],
    deleteArtifact: [
      "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
    ],
    deleteEnvironmentSecret: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"
    ],
    deleteEnvironmentVariable: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"
    ],
    deleteHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
    deleteOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"
    ],
    deleteRepoVariable: [
      "DELETE /repos/{owner}/{repo}/actions/variables/{name}"
    ],
    deleteSelfHostedRunnerFromOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}"
    ],
    deleteSelfHostedRunnerFromRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
    deleteWorkflowRunLogs: [
      "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    disableSelectedRepositoryGithubActionsOrganization: [
      "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    disableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
    ],
    downloadArtifact: [
      "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
    ],
    downloadJobLogsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
    ],
    downloadWorkflowRunAttemptLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
    ],
    downloadWorkflowRunLogs: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
    ],
    enableSelectedRepositoryGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
    ],
    enableWorkflow: [
      "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
    ],
    forceCancelWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"
    ],
    generateRunnerJitconfigForOrg: [
      "POST /orgs/{org}/actions/runners/generate-jitconfig"
    ],
    generateRunnerJitconfigForRepo: [
      "POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"
    ],
    getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
    getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
    getActionsCacheUsageByRepoForOrg: [
      "GET /orgs/{org}/actions/cache/usage-by-repository"
    ],
    getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
    getAllowedActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/selected-actions"
    ],
    getAllowedActionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
    getCustomOidcSubClaimForRepo: [
      "GET /repos/{owner}/{repo}/actions/oidc/customization/sub"
    ],
    getEnvironmentPublicKey: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"
    ],
    getEnvironmentSecret: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"
    ],
    getEnvironmentVariable: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"
    ],
    getGithubActionsDefaultWorkflowPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions/workflow"
    ],
    getGithubActionsDefaultWorkflowPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    getGithubActionsPermissionsOrganization: [
      "GET /orgs/{org}/actions/permissions"
    ],
    getGithubActionsPermissionsRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions"
    ],
    getHostedRunnerForOrg: [
      "GET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    ],
    getHostedRunnersGithubOwnedImagesForOrg: [
      "GET /orgs/{org}/actions/hosted-runners/images/github-owned"
    ],
    getHostedRunnersLimitsForOrg: [
      "GET /orgs/{org}/actions/hosted-runners/limits"
    ],
    getHostedRunnersMachineSpecsForOrg: [
      "GET /orgs/{org}/actions/hosted-runners/machine-sizes"
    ],
    getHostedRunnersPartnerImagesForOrg: [
      "GET /orgs/{org}/actions/hosted-runners/images/partner"
    ],
    getHostedRunnersPlatformsForOrg: [
      "GET /orgs/{org}/actions/hosted-runners/platforms"
    ],
    getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
    getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
    getOrgVariable: ["GET /orgs/{org}/actions/variables/{name}"],
    getPendingDeploymentsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    getRepoPermissions: [
      "GET /repos/{owner}/{repo}/actions/permissions",
      {},
      { renamed: ["actions", "getGithubActionsPermissionsRepository"] }
    ],
    getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
    getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
    getRepoVariable: ["GET /repos/{owner}/{repo}/actions/variables/{name}"],
    getReviewsForRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
    ],
    getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
    getSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}"
    ],
    getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
    getWorkflowAccessToRepository: [
      "GET /repos/{owner}/{repo}/actions/permissions/access"
    ],
    getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
    getWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
    ],
    getWorkflowRunUsage: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"
    ],
    getWorkflowUsage: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
    ],
    listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
    listEnvironmentSecrets: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"
    ],
    listEnvironmentVariables: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/variables"
    ],
    listGithubHostedRunnersInGroupForOrg: [
      "GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners"
    ],
    listHostedRunnersForOrg: ["GET /orgs/{org}/actions/hosted-runners"],
    listJobsForWorkflowRun: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
    ],
    listJobsForWorkflowRunAttempt: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
    ],
    listLabelsForSelfHostedRunnerForOrg: [
      "GET /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    listLabelsForSelfHostedRunnerForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
    listOrgVariables: ["GET /orgs/{org}/actions/variables"],
    listRepoOrganizationSecrets: [
      "GET /repos/{owner}/{repo}/actions/organization-secrets"
    ],
    listRepoOrganizationVariables: [
      "GET /repos/{owner}/{repo}/actions/organization-variables"
    ],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
    listRepoVariables: ["GET /repos/{owner}/{repo}/actions/variables"],
    listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
    listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
    listRunnerApplicationsForRepo: [
      "GET /repos/{owner}/{repo}/actions/runners/downloads"
    ],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    listSelectedReposForOrgVariable: [
      "GET /orgs/{org}/actions/variables/{name}/repositories"
    ],
    listSelectedRepositoriesEnabledGithubActionsOrganization: [
      "GET /orgs/{org}/actions/permissions/repositories"
    ],
    listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
    listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
    listWorkflowRunArtifacts: [
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
    ],
    listWorkflowRuns: [
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
    ],
    listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
    reRunJobForWorkflowRun: [
      "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
    ],
    reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
    reRunWorkflowFailedJobs: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    removeCustomLabelFromSelfHostedRunnerForOrg: [
      "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeCustomLabelFromSelfHostedRunnerForRepo: [
      "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
    ],
    removeSelectedRepoFromOrgVariable: [
      "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
    ],
    reviewCustomGatesForRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"
    ],
    reviewPendingDeploymentsForRun: [
      "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
    ],
    setAllowedActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/selected-actions"
    ],
    setAllowedActionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
    ],
    setCustomLabelsForSelfHostedRunnerForOrg: [
      "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
    ],
    setCustomLabelsForSelfHostedRunnerForRepo: [
      "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
    ],
    setCustomOidcSubClaimForRepo: [
      "PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"
    ],
    setGithubActionsDefaultWorkflowPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/workflow"
    ],
    setGithubActionsDefaultWorkflowPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/workflow"
    ],
    setGithubActionsPermissionsOrganization: [
      "PUT /orgs/{org}/actions/permissions"
    ],
    setGithubActionsPermissionsRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
    ],
    setSelectedReposForOrgVariable: [
      "PUT /orgs/{org}/actions/variables/{name}/repositories"
    ],
    setSelectedRepositoriesEnabledGithubActionsOrganization: [
      "PUT /orgs/{org}/actions/permissions/repositories"
    ],
    setWorkflowAccessToRepository: [
      "PUT /repos/{owner}/{repo}/actions/permissions/access"
    ],
    updateEnvironmentVariable: [
      "PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"
    ],
    updateHostedRunnerForOrg: [
      "PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"
    ],
    updateOrgVariable: ["PATCH /orgs/{org}/actions/variables/{name}"],
    updateRepoVariable: [
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}"
    ]
  },
  activity: {
    checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
    deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
    deleteThreadSubscription: [
      "DELETE /notifications/threads/{thread_id}/subscription"
    ],
    getFeeds: ["GET /feeds"],
    getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
    getThread: ["GET /notifications/threads/{thread_id}"],
    getThreadSubscriptionForAuthenticatedUser: [
      "GET /notifications/threads/{thread_id}/subscription"
    ],
    listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
    listNotificationsForAuthenticatedUser: ["GET /notifications"],
    listOrgEventsForAuthenticatedUser: [
      "GET /users/{username}/events/orgs/{org}"
    ],
    listPublicEvents: ["GET /events"],
    listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
    listPublicEventsForUser: ["GET /users/{username}/events/public"],
    listPublicOrgEvents: ["GET /orgs/{org}/events"],
    listReceivedEventsForUser: ["GET /users/{username}/received_events"],
    listReceivedPublicEventsForUser: [
      "GET /users/{username}/received_events/public"
    ],
    listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
    listRepoNotificationsForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/notifications"
    ],
    listReposStarredByAuthenticatedUser: ["GET /user/starred"],
    listReposStarredByUser: ["GET /users/{username}/starred"],
    listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
    listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
    listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
    listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
    markNotificationsAsRead: ["PUT /notifications"],
    markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
    markThreadAsDone: ["DELETE /notifications/threads/{thread_id}"],
    markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
    setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
    setThreadSubscription: [
      "PUT /notifications/threads/{thread_id}/subscription"
    ],
    starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
    unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
  },
  apps: {
    addRepoToInstallation: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
    ],
    addRepoToInstallationForAuthenticatedUser: [
      "PUT /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    checkToken: ["POST /applications/{client_id}/token"],
    createFromManifest: ["POST /app-manifests/{code}/conversions"],
    createInstallationAccessToken: [
      "POST /app/installations/{installation_id}/access_tokens"
    ],
    deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
    deleteInstallation: ["DELETE /app/installations/{installation_id}"],
    deleteToken: ["DELETE /applications/{client_id}/token"],
    getAuthenticated: ["GET /app"],
    getBySlug: ["GET /apps/{app_slug}"],
    getInstallation: ["GET /app/installations/{installation_id}"],
    getOrgInstallation: ["GET /orgs/{org}/installation"],
    getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
    getSubscriptionPlanForAccount: [
      "GET /marketplace_listing/accounts/{account_id}"
    ],
    getSubscriptionPlanForAccountStubbed: [
      "GET /marketplace_listing/stubbed/accounts/{account_id}"
    ],
    getUserInstallation: ["GET /users/{username}/installation"],
    getWebhookConfigForApp: ["GET /app/hook/config"],
    getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
    listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
    listAccountsForPlanStubbed: [
      "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"
    ],
    listInstallationReposForAuthenticatedUser: [
      "GET /user/installations/{installation_id}/repositories"
    ],
    listInstallationRequestsForAuthenticatedApp: [
      "GET /app/installation-requests"
    ],
    listInstallations: ["GET /app/installations"],
    listInstallationsForAuthenticatedUser: ["GET /user/installations"],
    listPlans: ["GET /marketplace_listing/plans"],
    listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
    listReposAccessibleToInstallation: ["GET /installation/repositories"],
    listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
    listSubscriptionsForAuthenticatedUserStubbed: [
      "GET /user/marketplace_purchases/stubbed"
    ],
    listWebhookDeliveries: ["GET /app/hook/deliveries"],
    redeliverWebhookDelivery: [
      "POST /app/hook/deliveries/{delivery_id}/attempts"
    ],
    removeRepoFromInstallation: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
      {},
      { renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
    ],
    removeRepoFromInstallationForAuthenticatedUser: [
      "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
    ],
    resetToken: ["PATCH /applications/{client_id}/token"],
    revokeInstallationAccessToken: ["DELETE /installation/token"],
    scopeToken: ["POST /applications/{client_id}/token/scoped"],
    suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
    unsuspendInstallation: [
      "DELETE /app/installations/{installation_id}/suspended"
    ],
    updateWebhookConfigForApp: ["PATCH /app/hook/config"]
  },
  billing: {
    getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
    getGithubActionsBillingUser: [
      "GET /users/{username}/settings/billing/actions"
    ],
    getGithubBillingUsageReportOrg: [
      "GET /organizations/{org}/settings/billing/usage"
    ],
    getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
    getGithubPackagesBillingUser: [
      "GET /users/{username}/settings/billing/packages"
    ],
    getSharedStorageBillingOrg: [
      "GET /orgs/{org}/settings/billing/shared-storage"
    ],
    getSharedStorageBillingUser: [
      "GET /users/{username}/settings/billing/shared-storage"
    ]
  },
  checks: {
    create: ["POST /repos/{owner}/{repo}/check-runs"],
    createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
    get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
    getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
    listAnnotations: [
      "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
    ],
    listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
    listForSuite: [
      "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
    ],
    listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
    rerequestRun: [
      "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"
    ],
    rerequestSuite: [
      "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
    ],
    setSuitesPreferences: [
      "PATCH /repos/{owner}/{repo}/check-suites/preferences"
    ],
    update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
  },
  codeScanning: {
    commitAutofix: [
      "POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"
    ],
    createAutofix: [
      "POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"
    ],
    createVariantAnalysis: [
      "POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"
    ],
    deleteAnalysis: [
      "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
    ],
    deleteCodeqlDatabase: [
      "DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"
    ],
    getAlert: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
      {},
      { renamedParameters: { alert_id: "alert_number" } }
    ],
    getAnalysis: [
      "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
    ],
    getAutofix: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"
    ],
    getCodeqlDatabase: [
      "GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"
    ],
    getDefaultSetup: ["GET /repos/{owner}/{repo}/code-scanning/default-setup"],
    getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
    getVariantAnalysis: [
      "GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"
    ],
    getVariantAnalysisRepoTask: [
      "GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"
    ],
    listAlertInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
    listAlertsInstances: [
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      {},
      { renamed: ["codeScanning", "listAlertInstances"] }
    ],
    listCodeqlDatabases: [
      "GET /repos/{owner}/{repo}/code-scanning/codeql/databases"
    ],
    listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
    ],
    updateDefaultSetup: [
      "PATCH /repos/{owner}/{repo}/code-scanning/default-setup"
    ],
    uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
  },
  codeSecurity: {
    attachConfiguration: [
      "POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"
    ],
    attachEnterpriseConfiguration: [
      "POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"
    ],
    createConfiguration: ["POST /orgs/{org}/code-security/configurations"],
    createConfigurationForEnterprise: [
      "POST /enterprises/{enterprise}/code-security/configurations"
    ],
    deleteConfiguration: [
      "DELETE /orgs/{org}/code-security/configurations/{configuration_id}"
    ],
    deleteConfigurationForEnterprise: [
      "DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"
    ],
    detachConfiguration: [
      "DELETE /orgs/{org}/code-security/configurations/detach"
    ],
    getConfiguration: [
      "GET /orgs/{org}/code-security/configurations/{configuration_id}"
    ],
    getConfigurationForRepository: [
      "GET /repos/{owner}/{repo}/code-security-configuration"
    ],
    getConfigurationsForEnterprise: [
      "GET /enterprises/{enterprise}/code-security/configurations"
    ],
    getConfigurationsForOrg: ["GET /orgs/{org}/code-security/configurations"],
    getDefaultConfigurations: [
      "GET /orgs/{org}/code-security/configurations/defaults"
    ],
    getDefaultConfigurationsForEnterprise: [
      "GET /enterprises/{enterprise}/code-security/configurations/defaults"
    ],
    getRepositoriesForConfiguration: [
      "GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"
    ],
    getRepositoriesForEnterpriseConfiguration: [
      "GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"
    ],
    getSingleConfigurationForEnterprise: [
      "GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"
    ],
    setConfigurationAsDefault: [
      "PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"
    ],
    setConfigurationAsDefaultForEnterprise: [
      "PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"
    ],
    updateConfiguration: [
      "PATCH /orgs/{org}/code-security/configurations/{configuration_id}"
    ],
    updateEnterpriseConfiguration: [
      "PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"
    ]
  },
  codesOfConduct: {
    getAllCodesOfConduct: ["GET /codes_of_conduct"],
    getConductCode: ["GET /codes_of_conduct/{key}"]
  },
  codespaces: {
    addRepositoryForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    checkPermissionsForDevcontainer: [
      "GET /repos/{owner}/{repo}/codespaces/permissions_check"
    ],
    codespaceMachinesForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/machines"
    ],
    createForAuthenticatedUser: ["POST /user/codespaces"],
    createOrUpdateOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}"
    ],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    createOrUpdateSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}"
    ],
    createWithPrForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
    ],
    createWithRepoForAuthenticatedUser: [
      "POST /repos/{owner}/{repo}/codespaces"
    ],
    deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
    deleteFromOrganization: [
      "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    deleteSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}"
    ],
    exportForAuthenticatedUser: [
      "POST /user/codespaces/{codespace_name}/exports"
    ],
    getCodespacesForUserInOrg: [
      "GET /orgs/{org}/members/{username}/codespaces"
    ],
    getExportDetailsForAuthenticatedUser: [
      "GET /user/codespaces/{codespace_name}/exports/{export_id}"
    ],
    getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
    getOrgPublicKey: ["GET /orgs/{org}/codespaces/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}"],
    getPublicKeyForAuthenticatedUser: [
      "GET /user/codespaces/secrets/public-key"
    ],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
    ],
    getSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}"
    ],
    listDevcontainersInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/devcontainers"
    ],
    listForAuthenticatedUser: ["GET /user/codespaces"],
    listInOrganization: [
      "GET /orgs/{org}/codespaces",
      {},
      { renamedParameters: { org_id: "org" } }
    ],
    listInRepositoryForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces"
    ],
    listOrgSecrets: ["GET /orgs/{org}/codespaces/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
    listRepositoriesForSecretForAuthenticatedUser: [
      "GET /user/codespaces/secrets/{secret_name}/repositories"
    ],
    listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
    ],
    preFlightWithRepoForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/new"
    ],
    publishForAuthenticatedUser: [
      "POST /user/codespaces/{codespace_name}/publish"
    ],
    removeRepositoryForSecretForAuthenticatedUser: [
      "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
    ],
    repoMachinesForAuthenticatedUser: [
      "GET /repos/{owner}/{repo}/codespaces/machines"
    ],
    setRepositoriesForSecretForAuthenticatedUser: [
      "PUT /user/codespaces/secrets/{secret_name}/repositories"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
    ],
    startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
    stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
    stopInOrganization: [
      "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"
    ],
    updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
  },
  copilot: {
    addCopilotSeatsForTeams: [
      "POST /orgs/{org}/copilot/billing/selected_teams"
    ],
    addCopilotSeatsForUsers: [
      "POST /orgs/{org}/copilot/billing/selected_users"
    ],
    cancelCopilotSeatAssignmentForTeams: [
      "DELETE /orgs/{org}/copilot/billing/selected_teams"
    ],
    cancelCopilotSeatAssignmentForUsers: [
      "DELETE /orgs/{org}/copilot/billing/selected_users"
    ],
    copilotMetricsForOrganization: ["GET /orgs/{org}/copilot/metrics"],
    copilotMetricsForTeam: ["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],
    getCopilotOrganizationDetails: ["GET /orgs/{org}/copilot/billing"],
    getCopilotSeatDetailsForUser: [
      "GET /orgs/{org}/members/{username}/copilot"
    ],
    listCopilotSeats: ["GET /orgs/{org}/copilot/billing/seats"],
    usageMetricsForOrg: ["GET /orgs/{org}/copilot/usage"],
    usageMetricsForTeam: ["GET /orgs/{org}/team/{team_slug}/copilot/usage"]
  },
  dependabot: {
    addSelectedRepoToOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    createOrUpdateOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}"
    ],
    createOrUpdateRepoSecret: [
      "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
    deleteRepoSecret: [
      "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    getAlert: ["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],
    getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
    getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
    getRepoPublicKey: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/public-key"
    ],
    getRepoSecret: [
      "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
    ],
    listAlertsForEnterprise: [
      "GET /enterprises/{enterprise}/dependabot/alerts"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/dependabot/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/dependabot/alerts"],
    listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
    listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
    listSelectedReposForOrgSecret: [
      "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ],
    removeSelectedRepoFromOrgSecret: [
      "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
    ],
    setSelectedReposForOrgSecret: [
      "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
    ],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"
    ]
  },
  dependencyGraph: {
    createRepositorySnapshot: [
      "POST /repos/{owner}/{repo}/dependency-graph/snapshots"
    ],
    diffRange: [
      "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
    ],
    exportSbom: ["GET /repos/{owner}/{repo}/dependency-graph/sbom"]
  },
  emojis: { get: ["GET /emojis"] },
  gists: {
    checkIsStarred: ["GET /gists/{gist_id}/star"],
    create: ["POST /gists"],
    createComment: ["POST /gists/{gist_id}/comments"],
    delete: ["DELETE /gists/{gist_id}"],
    deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
    fork: ["POST /gists/{gist_id}/forks"],
    get: ["GET /gists/{gist_id}"],
    getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
    getRevision: ["GET /gists/{gist_id}/{sha}"],
    list: ["GET /gists"],
    listComments: ["GET /gists/{gist_id}/comments"],
    listCommits: ["GET /gists/{gist_id}/commits"],
    listForUser: ["GET /users/{username}/gists"],
    listForks: ["GET /gists/{gist_id}/forks"],
    listPublic: ["GET /gists/public"],
    listStarred: ["GET /gists/starred"],
    star: ["PUT /gists/{gist_id}/star"],
    unstar: ["DELETE /gists/{gist_id}/star"],
    update: ["PATCH /gists/{gist_id}"],
    updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
  },
  git: {
    createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
    createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
    createRef: ["POST /repos/{owner}/{repo}/git/refs"],
    createTag: ["POST /repos/{owner}/{repo}/git/tags"],
    createTree: ["POST /repos/{owner}/{repo}/git/trees"],
    deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
    getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
    getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
    getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
    getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
    getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
    listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
    updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
  },
  gitignore: {
    getAllTemplates: ["GET /gitignore/templates"],
    getTemplate: ["GET /gitignore/templates/{name}"]
  },
  hostedCompute: {
    createNetworkConfigurationForOrg: [
      "POST /orgs/{org}/settings/network-configurations"
    ],
    deleteNetworkConfigurationFromOrg: [
      "DELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}"
    ],
    getNetworkConfigurationForOrg: [
      "GET /orgs/{org}/settings/network-configurations/{network_configuration_id}"
    ],
    getNetworkSettingsForOrg: [
      "GET /orgs/{org}/settings/network-settings/{network_settings_id}"
    ],
    listNetworkConfigurationsForOrg: [
      "GET /orgs/{org}/settings/network-configurations"
    ],
    updateNetworkConfigurationForOrg: [
      "PATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}"
    ]
  },
  interactions: {
    getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
    getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
    getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
    getRestrictionsForYourPublicRepos: [
      "GET /user/interaction-limits",
      {},
      { renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
    ],
    removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
    removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
    removeRestrictionsForRepo: [
      "DELETE /repos/{owner}/{repo}/interaction-limits"
    ],
    removeRestrictionsForYourPublicRepos: [
      "DELETE /user/interaction-limits",
      {},
      { renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
    ],
    setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
    setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
    setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
    setRestrictionsForYourPublicRepos: [
      "PUT /user/interaction-limits",
      {},
      { renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
    ]
  },
  issues: {
    addAssignees: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    addSubIssue: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"
    ],
    checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
    checkUserCanBeAssignedToIssue: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"
    ],
    create: ["POST /repos/{owner}/{repo}/issues"],
    createComment: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/comments"
    ],
    createLabel: ["POST /repos/{owner}/{repo}/labels"],
    createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
    deleteComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"
    ],
    deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
    deleteMilestone: [
      "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"
    ],
    get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
    getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
    getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
    getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
    list: ["GET /issues"],
    listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
    listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
    listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
    listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
    listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
    listEventsForTimeline: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"
    ],
    listForAuthenticatedUser: ["GET /user/issues"],
    listForOrg: ["GET /orgs/{org}/issues"],
    listForRepo: ["GET /repos/{owner}/{repo}/issues"],
    listLabelsForMilestone: [
      "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
    ],
    listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
    listLabelsOnIssue: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
    listSubIssues: [
      "GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"
    ],
    lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    removeAllLabels: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"
    ],
    removeAssignees: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"
    ],
    removeLabel: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
    ],
    removeSubIssue: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"
    ],
    reprioritizeSubIssue: [
      "PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"
    ],
    setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
    unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
    update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
    updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
    updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
    updateMilestone: [
      "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"
    ]
  },
  licenses: {
    get: ["GET /licenses/{license}"],
    getAllCommonlyUsed: ["GET /licenses"],
    getForRepo: ["GET /repos/{owner}/{repo}/license"]
  },
  markdown: {
    render: ["POST /markdown"],
    renderRaw: [
      "POST /markdown/raw",
      { headers: { "content-type": "text/plain; charset=utf-8" } }
    ]
  },
  meta: {
    get: ["GET /meta"],
    getAllVersions: ["GET /versions"],
    getOctocat: ["GET /octocat"],
    getZen: ["GET /zen"],
    root: ["GET /"]
  },
  migrations: {
    deleteArchiveForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/archive"
    ],
    deleteArchiveForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/archive"
    ],
    downloadArchiveForOrg: [
      "GET /orgs/{org}/migrations/{migration_id}/archive"
    ],
    getArchiveForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/archive"
    ],
    getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
    getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
    listForAuthenticatedUser: ["GET /user/migrations"],
    listForOrg: ["GET /orgs/{org}/migrations"],
    listReposForAuthenticatedUser: [
      "GET /user/migrations/{migration_id}/repositories"
    ],
    listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
    listReposForUser: [
      "GET /user/migrations/{migration_id}/repositories",
      {},
      { renamed: ["migrations", "listReposForAuthenticatedUser"] }
    ],
    startForAuthenticatedUser: ["POST /user/migrations"],
    startForOrg: ["POST /orgs/{org}/migrations"],
    unlockRepoForAuthenticatedUser: [
      "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
    ],
    unlockRepoForOrg: [
      "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
    ]
  },
  oidc: {
    getOidcCustomSubTemplateForOrg: [
      "GET /orgs/{org}/actions/oidc/customization/sub"
    ],
    updateOidcCustomSubTemplateForOrg: [
      "PUT /orgs/{org}/actions/oidc/customization/sub"
    ]
  },
  orgs: {
    addSecurityManagerTeam: [
      "PUT /orgs/{org}/security-managers/teams/{team_slug}",
      {},
      {
        deprecated: "octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"
      }
    ],
    assignTeamToOrgRole: [
      "PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"
    ],
    assignUserToOrgRole: [
      "PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"
    ],
    blockUser: ["PUT /orgs/{org}/blocks/{username}"],
    cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
    checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
    checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
    checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
    convertMemberToOutsideCollaborator: [
      "PUT /orgs/{org}/outside_collaborators/{username}"
    ],
    createInvitation: ["POST /orgs/{org}/invitations"],
    createIssueType: ["POST /orgs/{org}/issue-types"],
    createOrUpdateCustomProperties: ["PATCH /orgs/{org}/properties/schema"],
    createOrUpdateCustomPropertiesValuesForRepos: [
      "PATCH /orgs/{org}/properties/values"
    ],
    createOrUpdateCustomProperty: [
      "PUT /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    createWebhook: ["POST /orgs/{org}/hooks"],
    delete: ["DELETE /orgs/{org}"],
    deleteIssueType: ["DELETE /orgs/{org}/issue-types/{issue_type_id}"],
    deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
    enableOrDisableSecurityProductOnAllOrgRepos: [
      "POST /orgs/{org}/{security_product}/{enablement}",
      {},
      {
        deprecated: "octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"
      }
    ],
    get: ["GET /orgs/{org}"],
    getAllCustomProperties: ["GET /orgs/{org}/properties/schema"],
    getCustomProperty: [
      "GET /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
    getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
    getOrgRole: ["GET /orgs/{org}/organization-roles/{role_id}"],
    getOrgRulesetHistory: ["GET /orgs/{org}/rulesets/{ruleset_id}/history"],
    getOrgRulesetVersion: [
      "GET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}"
    ],
    getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
    getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
    getWebhookDelivery: [
      "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    list: ["GET /organizations"],
    listAppInstallations: ["GET /orgs/{org}/installations"],
    listAttestations: ["GET /orgs/{org}/attestations/{subject_digest}"],
    listBlockedUsers: ["GET /orgs/{org}/blocks"],
    listCustomPropertiesValuesForRepos: ["GET /orgs/{org}/properties/values"],
    listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
    listForAuthenticatedUser: ["GET /user/orgs"],
    listForUser: ["GET /users/{username}/orgs"],
    listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
    listIssueTypes: ["GET /orgs/{org}/issue-types"],
    listMembers: ["GET /orgs/{org}/members"],
    listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
    listOrgRoleTeams: ["GET /orgs/{org}/organization-roles/{role_id}/teams"],
    listOrgRoleUsers: ["GET /orgs/{org}/organization-roles/{role_id}/users"],
    listOrgRoles: ["GET /orgs/{org}/organization-roles"],
    listOrganizationFineGrainedPermissions: [
      "GET /orgs/{org}/organization-fine-grained-permissions"
    ],
    listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
    listPatGrantRepositories: [
      "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"
    ],
    listPatGrantRequestRepositories: [
      "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"
    ],
    listPatGrantRequests: ["GET /orgs/{org}/personal-access-token-requests"],
    listPatGrants: ["GET /orgs/{org}/personal-access-tokens"],
    listPendingInvitations: ["GET /orgs/{org}/invitations"],
    listPublicMembers: ["GET /orgs/{org}/public_members"],
    listSecurityManagerTeams: [
      "GET /orgs/{org}/security-managers",
      {},
      {
        deprecated: "octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"
      }
    ],
    listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
    listWebhooks: ["GET /orgs/{org}/hooks"],
    pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeCustomProperty: [
      "DELETE /orgs/{org}/properties/schema/{custom_property_name}"
    ],
    removeMember: ["DELETE /orgs/{org}/members/{username}"],
    removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
    removeOutsideCollaborator: [
      "DELETE /orgs/{org}/outside_collaborators/{username}"
    ],
    removePublicMembershipForAuthenticatedUser: [
      "DELETE /orgs/{org}/public_members/{username}"
    ],
    removeSecurityManagerTeam: [
      "DELETE /orgs/{org}/security-managers/teams/{team_slug}",
      {},
      {
        deprecated: "octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"
      }
    ],
    reviewPatGrantRequest: [
      "POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"
    ],
    reviewPatGrantRequestsInBulk: [
      "POST /orgs/{org}/personal-access-token-requests"
    ],
    revokeAllOrgRolesTeam: [
      "DELETE /orgs/{org}/organization-roles/teams/{team_slug}"
    ],
    revokeAllOrgRolesUser: [
      "DELETE /orgs/{org}/organization-roles/users/{username}"
    ],
    revokeOrgRoleTeam: [
      "DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"
    ],
    revokeOrgRoleUser: [
      "DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"
    ],
    setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
    setPublicMembershipForAuthenticatedUser: [
      "PUT /orgs/{org}/public_members/{username}"
    ],
    unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
    update: ["PATCH /orgs/{org}"],
    updateIssueType: ["PUT /orgs/{org}/issue-types/{issue_type_id}"],
    updateMembershipForAuthenticatedUser: [
      "PATCH /user/memberships/orgs/{org}"
    ],
    updatePatAccess: ["POST /orgs/{org}/personal-access-tokens/{pat_id}"],
    updatePatAccesses: ["POST /orgs/{org}/personal-access-tokens"],
    updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
    updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
  },
  packages: {
    deletePackageForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}"
    ],
    deletePackageForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    deletePackageForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}"
    ],
    deletePackageVersionForAuthenticatedUser: [
      "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForOrg: [
      "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    deletePackageVersionForUser: [
      "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getAllPackageVersionsForAPackageOwnedByAnOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
      {},
      { renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
    ],
    getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions",
      {},
      {
        renamed: [
          "packages",
          "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"
        ]
      }
    ],
    getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByOrg: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
    ],
    getAllPackageVersionsForPackageOwnedByUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions"
    ],
    getPackageForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}"
    ],
    getPackageForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}"
    ],
    getPackageForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}"
    ],
    getPackageVersionForAuthenticatedUser: [
      "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForOrganization: [
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    getPackageVersionForUser: [
      "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
    ],
    listDockerMigrationConflictingPackagesForAuthenticatedUser: [
      "GET /user/docker/conflicts"
    ],
    listDockerMigrationConflictingPackagesForOrganization: [
      "GET /orgs/{org}/docker/conflicts"
    ],
    listDockerMigrationConflictingPackagesForUser: [
      "GET /users/{username}/docker/conflicts"
    ],
    listPackagesForAuthenticatedUser: ["GET /user/packages"],
    listPackagesForOrganization: ["GET /orgs/{org}/packages"],
    listPackagesForUser: ["GET /users/{username}/packages"],
    restorePackageForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
    ],
    restorePackageVersionForAuthenticatedUser: [
      "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForOrg: [
      "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ],
    restorePackageVersionForUser: [
      "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
    ]
  },
  privateRegistries: {
    createOrgPrivateRegistry: ["POST /orgs/{org}/private-registries"],
    deleteOrgPrivateRegistry: [
      "DELETE /orgs/{org}/private-registries/{secret_name}"
    ],
    getOrgPrivateRegistry: ["GET /orgs/{org}/private-registries/{secret_name}"],
    getOrgPublicKey: ["GET /orgs/{org}/private-registries/public-key"],
    listOrgPrivateRegistries: ["GET /orgs/{org}/private-registries"],
    updateOrgPrivateRegistry: [
      "PATCH /orgs/{org}/private-registries/{secret_name}"
    ]
  },
  projects: {
    addCollaborator: [
      "PUT /projects/{project_id}/collaborators/{username}",
      {},
      {
        deprecated: "octokit.rest.projects.addCollaborator() is deprecated, see https://docs.github.com/rest/projects/collaborators#add-project-collaborator"
      }
    ],
    createCard: [
      "POST /projects/columns/{column_id}/cards",
      {},
      {
        deprecated: "octokit.rest.projects.createCard() is deprecated, see https://docs.github.com/rest/projects/cards#create-a-project-card"
      }
    ],
    createColumn: [
      "POST /projects/{project_id}/columns",
      {},
      {
        deprecated: "octokit.rest.projects.createColumn() is deprecated, see https://docs.github.com/rest/projects/columns#create-a-project-column"
      }
    ],
    createForAuthenticatedUser: [
      "POST /user/projects",
      {},
      {
        deprecated: "octokit.rest.projects.createForAuthenticatedUser() is deprecated, see https://docs.github.com/rest/projects/projects#create-a-user-project"
      }
    ],
    createForOrg: [
      "POST /orgs/{org}/projects",
      {},
      {
        deprecated: "octokit.rest.projects.createForOrg() is deprecated, see https://docs.github.com/rest/projects/projects#create-an-organization-project"
      }
    ],
    createForRepo: [
      "POST /repos/{owner}/{repo}/projects",
      {},
      {
        deprecated: "octokit.rest.projects.createForRepo() is deprecated, see https://docs.github.com/rest/projects/projects#create-a-repository-project"
      }
    ],
    delete: [
      "DELETE /projects/{project_id}",
      {},
      {
        deprecated: "octokit.rest.projects.delete() is deprecated, see https://docs.github.com/rest/projects/projects#delete-a-project"
      }
    ],
    deleteCard: [
      "DELETE /projects/columns/cards/{card_id}",
      {},
      {
        deprecated: "octokit.rest.projects.deleteCard() is deprecated, see https://docs.github.com/rest/projects/cards#delete-a-project-card"
      }
    ],
    deleteColumn: [
      "DELETE /projects/columns/{column_id}",
      {},
      {
        deprecated: "octokit.rest.projects.deleteColumn() is deprecated, see https://docs.github.com/rest/projects/columns#delete-a-project-column"
      }
    ],
    get: [
      "GET /projects/{project_id}",
      {},
      {
        deprecated: "octokit.rest.projects.get() is deprecated, see https://docs.github.com/rest/projects/projects#get-a-project"
      }
    ],
    getCard: [
      "GET /projects/columns/cards/{card_id}",
      {},
      {
        deprecated: "octokit.rest.projects.getCard() is deprecated, see https://docs.github.com/rest/projects/cards#get-a-project-card"
      }
    ],
    getColumn: [
      "GET /projects/columns/{column_id}",
      {},
      {
        deprecated: "octokit.rest.projects.getColumn() is deprecated, see https://docs.github.com/rest/projects/columns#get-a-project-column"
      }
    ],
    getPermissionForUser: [
      "GET /projects/{project_id}/collaborators/{username}/permission",
      {},
      {
        deprecated: "octokit.rest.projects.getPermissionForUser() is deprecated, see https://docs.github.com/rest/projects/collaborators#get-project-permission-for-a-user"
      }
    ],
    listCards: [
      "GET /projects/columns/{column_id}/cards",
      {},
      {
        deprecated: "octokit.rest.projects.listCards() is deprecated, see https://docs.github.com/rest/projects/cards#list-project-cards"
      }
    ],
    listCollaborators: [
      "GET /projects/{project_id}/collaborators",
      {},
      {
        deprecated: "octokit.rest.projects.listCollaborators() is deprecated, see https://docs.github.com/rest/projects/collaborators#list-project-collaborators"
      }
    ],
    listColumns: [
      "GET /projects/{project_id}/columns",
      {},
      {
        deprecated: "octokit.rest.projects.listColumns() is deprecated, see https://docs.github.com/rest/projects/columns#list-project-columns"
      }
    ],
    listForOrg: [
      "GET /orgs/{org}/projects",
      {},
      {
        deprecated: "octokit.rest.projects.listForOrg() is deprecated, see https://docs.github.com/rest/projects/projects#list-organization-projects"
      }
    ],
    listForRepo: [
      "GET /repos/{owner}/{repo}/projects",
      {},
      {
        deprecated: "octokit.rest.projects.listForRepo() is deprecated, see https://docs.github.com/rest/projects/projects#list-repository-projects"
      }
    ],
    listForUser: [
      "GET /users/{username}/projects",
      {},
      {
        deprecated: "octokit.rest.projects.listForUser() is deprecated, see https://docs.github.com/rest/projects/projects#list-user-projects"
      }
    ],
    moveCard: [
      "POST /projects/columns/cards/{card_id}/moves",
      {},
      {
        deprecated: "octokit.rest.projects.moveCard() is deprecated, see https://docs.github.com/rest/projects/cards#move-a-project-card"
      }
    ],
    moveColumn: [
      "POST /projects/columns/{column_id}/moves",
      {},
      {
        deprecated: "octokit.rest.projects.moveColumn() is deprecated, see https://docs.github.com/rest/projects/columns#move-a-project-column"
      }
    ],
    removeCollaborator: [
      "DELETE /projects/{project_id}/collaborators/{username}",
      {},
      {
        deprecated: "octokit.rest.projects.removeCollaborator() is deprecated, see https://docs.github.com/rest/projects/collaborators#remove-user-as-a-collaborator"
      }
    ],
    update: [
      "PATCH /projects/{project_id}",
      {},
      {
        deprecated: "octokit.rest.projects.update() is deprecated, see https://docs.github.com/rest/projects/projects#update-a-project"
      }
    ],
    updateCard: [
      "PATCH /projects/columns/cards/{card_id}",
      {},
      {
        deprecated: "octokit.rest.projects.updateCard() is deprecated, see https://docs.github.com/rest/projects/cards#update-an-existing-project-card"
      }
    ],
    updateColumn: [
      "PATCH /projects/columns/{column_id}",
      {},
      {
        deprecated: "octokit.rest.projects.updateColumn() is deprecated, see https://docs.github.com/rest/projects/columns#update-an-existing-project-column"
      }
    ]
  },
  pulls: {
    checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    create: ["POST /repos/{owner}/{repo}/pulls"],
    createReplyForReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
    ],
    createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    createReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    deletePendingReview: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    deleteReviewComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ],
    dismissReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
    ],
    get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
    getReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
    list: ["GET /repos/{owner}/{repo}/pulls"],
    listCommentsForReview: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
    listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
    listRequestedReviewers: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    listReviewComments: [
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"
    ],
    listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
    listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
    merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
    removeRequestedReviewers: [
      "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    requestReviewers: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
    ],
    submitReview: [
      "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
    ],
    update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
    updateBranch: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
    ],
    updateReview: [
      "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
    ],
    updateReviewComment: [
      "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"
    ]
  },
  rateLimit: { get: ["GET /rate_limit"] },
  reactions: {
    createForCommitComment: [
      "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    createForIssue: [
      "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"
    ],
    createForIssueComment: [
      "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    createForPullRequestReviewComment: [
      "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    createForRelease: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    createForTeamDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    createForTeamDiscussionInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ],
    deleteForCommitComment: [
      "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForIssue: [
      "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
    ],
    deleteForIssueComment: [
      "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForPullRequestComment: [
      "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
    ],
    deleteForRelease: [
      "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussion: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
    ],
    deleteForTeamDiscussionComment: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
    ],
    listForCommitComment: [
      "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"
    ],
    listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
    listForIssueComment: [
      "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
    ],
    listForPullRequestReviewComment: [
      "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
    ],
    listForRelease: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/reactions"
    ],
    listForTeamDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
    ],
    listForTeamDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
    ]
  },
  repos: {
    acceptInvitation: [
      "PATCH /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
    ],
    acceptInvitationForAuthenticatedUser: [
      "PATCH /user/repository_invitations/{invitation_id}"
    ],
    addAppAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
    addStatusCheckContexts: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    addTeamAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    addUserAccessRestrictions: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    cancelPagesDeployment: [
      "POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"
    ],
    checkAutomatedSecurityFixes: [
      "GET /repos/{owner}/{repo}/automated-security-fixes"
    ],
    checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
    checkPrivateVulnerabilityReporting: [
      "GET /repos/{owner}/{repo}/private-vulnerability-reporting"
    ],
    checkVulnerabilityAlerts: [
      "GET /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
    compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
    compareCommitsWithBasehead: [
      "GET /repos/{owner}/{repo}/compare/{basehead}"
    ],
    createAttestation: ["POST /repos/{owner}/{repo}/attestations"],
    createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
    createCommitComment: [
      "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    createCommitSignatureProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
    createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
    createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
    createDeploymentBranchPolicy: [
      "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
    ],
    createDeploymentProtectionRule: [
      "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
    ],
    createDeploymentStatus: [
      "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
    createForAuthenticatedUser: ["POST /user/repos"],
    createFork: ["POST /repos/{owner}/{repo}/forks"],
    createInOrg: ["POST /orgs/{org}/repos"],
    createOrUpdateCustomPropertiesValues: [
      "PATCH /repos/{owner}/{repo}/properties/values"
    ],
    createOrUpdateEnvironment: [
      "PUT /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
    createOrgRuleset: ["POST /orgs/{org}/rulesets"],
    createPagesDeployment: ["POST /repos/{owner}/{repo}/pages/deployments"],
    createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
    createRelease: ["POST /repos/{owner}/{repo}/releases"],
    createRepoRuleset: ["POST /repos/{owner}/{repo}/rulesets"],
    createUsingTemplate: [
      "POST /repos/{template_owner}/{template_repo}/generate"
    ],
    createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
    declineInvitation: [
      "DELETE /user/repository_invitations/{invitation_id}",
      {},
      { renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
    ],
    declineInvitationForAuthenticatedUser: [
      "DELETE /user/repository_invitations/{invitation_id}"
    ],
    delete: ["DELETE /repos/{owner}/{repo}"],
    deleteAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    deleteAdminBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    deleteAnEnvironment: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    deleteBranchProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
    deleteCommitSignatureProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
    deleteDeployment: [
      "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"
    ],
    deleteDeploymentBranchPolicy: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
    deleteInvitation: [
      "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    deleteOrgRuleset: ["DELETE /orgs/{org}/rulesets/{ruleset_id}"],
    deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
    deletePullRequestReviewProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
    deleteReleaseAsset: [
      "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    deleteRepoRuleset: ["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
    disableAutomatedSecurityFixes: [
      "DELETE /repos/{owner}/{repo}/automated-security-fixes"
    ],
    disableDeploymentProtectionRule: [
      "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
    ],
    disablePrivateVulnerabilityReporting: [
      "DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"
    ],
    disableVulnerabilityAlerts: [
      "DELETE /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    downloadArchive: [
      "GET /repos/{owner}/{repo}/zipball/{ref}",
      {},
      { renamed: ["repos", "downloadZipballArchive"] }
    ],
    downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
    downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
    enableAutomatedSecurityFixes: [
      "PUT /repos/{owner}/{repo}/automated-security-fixes"
    ],
    enablePrivateVulnerabilityReporting: [
      "PUT /repos/{owner}/{repo}/private-vulnerability-reporting"
    ],
    enableVulnerabilityAlerts: [
      "PUT /repos/{owner}/{repo}/vulnerability-alerts"
    ],
    generateReleaseNotes: [
      "POST /repos/{owner}/{repo}/releases/generate-notes"
    ],
    get: ["GET /repos/{owner}/{repo}"],
    getAccessRestrictions: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
    ],
    getAdminBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    getAllDeploymentProtectionRules: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
    ],
    getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
    getAllStatusCheckContexts: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
    ],
    getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
    getAppsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
    ],
    getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
    getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
    getBranchProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    getBranchRules: ["GET /repos/{owner}/{repo}/rules/branches/{branch}"],
    getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
    getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
    getCollaboratorPermissionLevel: [
      "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
    ],
    getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
    getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
    getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
    getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
    getCommitSignatureProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
    ],
    getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
    getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
    getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
    getCustomDeploymentProtectionRule: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
    ],
    getCustomPropertiesValues: ["GET /repos/{owner}/{repo}/properties/values"],
    getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
    getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
    getDeploymentBranchPolicy: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    getDeploymentStatus: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
    ],
    getEnvironment: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}"
    ],
    getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
    getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
    getOrgRuleSuite: ["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],
    getOrgRuleSuites: ["GET /orgs/{org}/rulesets/rule-suites"],
    getOrgRuleset: ["GET /orgs/{org}/rulesets/{ruleset_id}"],
    getOrgRulesets: ["GET /orgs/{org}/rulesets"],
    getPages: ["GET /repos/{owner}/{repo}/pages"],
    getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
    getPagesDeployment: [
      "GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"
    ],
    getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
    getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
    getPullRequestReviewProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
    getReadme: ["GET /repos/{owner}/{repo}/readme"],
    getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
    getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
    getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
    getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
    getRepoRuleSuite: [
      "GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"
    ],
    getRepoRuleSuites: ["GET /repos/{owner}/{repo}/rulesets/rule-suites"],
    getRepoRuleset: ["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    getRepoRulesetHistory: [
      "GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history"
    ],
    getRepoRulesetVersion: [
      "GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}"
    ],
    getRepoRulesets: ["GET /repos/{owner}/{repo}/rulesets"],
    getStatusChecksProtection: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    getTeamsWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
    ],
    getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
    getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
    getUsersWithAccessToProtectedBranch: [
      "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
    ],
    getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
    getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
    getWebhookConfigForRepo: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    getWebhookDelivery: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
    ],
    listActivities: ["GET /repos/{owner}/{repo}/activity"],
    listAttestations: [
      "GET /repos/{owner}/{repo}/attestations/{subject_digest}"
    ],
    listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
    listBranches: ["GET /repos/{owner}/{repo}/branches"],
    listBranchesForHeadCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
    ],
    listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
    listCommentsForCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"
    ],
    listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
    listCommitStatusesForRef: [
      "GET /repos/{owner}/{repo}/commits/{ref}/statuses"
    ],
    listCommits: ["GET /repos/{owner}/{repo}/commits"],
    listContributors: ["GET /repos/{owner}/{repo}/contributors"],
    listCustomDeploymentRuleIntegrations: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"
    ],
    listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
    listDeploymentBranchPolicies: [
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
    ],
    listDeploymentStatuses: [
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
    ],
    listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
    listForAuthenticatedUser: ["GET /user/repos"],
    listForOrg: ["GET /orgs/{org}/repos"],
    listForUser: ["GET /users/{username}/repos"],
    listForks: ["GET /repos/{owner}/{repo}/forks"],
    listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
    listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
    listLanguages: ["GET /repos/{owner}/{repo}/languages"],
    listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
    listPublic: ["GET /repositories"],
    listPullRequestsAssociatedWithCommit: [
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
    ],
    listReleaseAssets: [
      "GET /repos/{owner}/{repo}/releases/{release_id}/assets"
    ],
    listReleases: ["GET /repos/{owner}/{repo}/releases"],
    listTags: ["GET /repos/{owner}/{repo}/tags"],
    listTeams: ["GET /repos/{owner}/{repo}/teams"],
    listWebhookDeliveries: [
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
    ],
    listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
    merge: ["POST /repos/{owner}/{repo}/merges"],
    mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
    pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
    redeliverWebhookDelivery: [
      "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
    ],
    removeAppAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    removeCollaborator: [
      "DELETE /repos/{owner}/{repo}/collaborators/{username}"
    ],
    removeStatusCheckContexts: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    removeStatusCheckProtection: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    removeTeamAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    removeUserAccessRestrictions: [
      "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
    replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
    requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
    setAdminBranchProtection: [
      "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
    ],
    setAppAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
      {},
      { mapToData: "apps" }
    ],
    setStatusCheckContexts: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
      {},
      { mapToData: "contexts" }
    ],
    setTeamAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
      {},
      { mapToData: "teams" }
    ],
    setUserAccessRestrictions: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
      {},
      { mapToData: "users" }
    ],
    testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
    transfer: ["POST /repos/{owner}/{repo}/transfer"],
    update: ["PATCH /repos/{owner}/{repo}"],
    updateBranchProtection: [
      "PUT /repos/{owner}/{repo}/branches/{branch}/protection"
    ],
    updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
    updateDeploymentBranchPolicy: [
      "PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
    ],
    updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
    updateInvitation: [
      "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"
    ],
    updateOrgRuleset: ["PUT /orgs/{org}/rulesets/{ruleset_id}"],
    updatePullRequestReviewProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
    ],
    updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
    updateReleaseAsset: [
      "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"
    ],
    updateRepoRuleset: ["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
    updateStatusCheckPotection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
      {},
      { renamed: ["repos", "updateStatusCheckProtection"] }
    ],
    updateStatusCheckProtection: [
      "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
    ],
    updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
    updateWebhookConfigForRepo: [
      "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"
    ],
    uploadReleaseAsset: [
      "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
      { baseUrl: "https://uploads.github.com" }
    ]
  },
  search: {
    code: ["GET /search/code"],
    commits: ["GET /search/commits"],
    issuesAndPullRequests: [
      "GET /search/issues",
      {},
      {
        deprecated: "octokit.rest.search.issuesAndPullRequests() is deprecated, see https://docs.github.com/rest/search/search#search-issues-and-pull-requests"
      }
    ],
    labels: ["GET /search/labels"],
    repos: ["GET /search/repositories"],
    topics: ["GET /search/topics"],
    users: ["GET /search/users"]
  },
  secretScanning: {
    createPushProtectionBypass: [
      "POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"
    ],
    getAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ],
    getScanHistory: ["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],
    listAlertsForEnterprise: [
      "GET /enterprises/{enterprise}/secret-scanning/alerts"
    ],
    listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
    listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
    listLocationsForAlert: [
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
    ],
    updateAlert: [
      "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
    ]
  },
  securityAdvisories: {
    createFork: [
      "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"
    ],
    createPrivateVulnerabilityReport: [
      "POST /repos/{owner}/{repo}/security-advisories/reports"
    ],
    createRepositoryAdvisory: [
      "POST /repos/{owner}/{repo}/security-advisories"
    ],
    createRepositoryAdvisoryCveRequest: [
      "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"
    ],
    getGlobalAdvisory: ["GET /advisories/{ghsa_id}"],
    getRepositoryAdvisory: [
      "GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    ],
    listGlobalAdvisories: ["GET /advisories"],
    listOrgRepositoryAdvisories: ["GET /orgs/{org}/security-advisories"],
    listRepositoryAdvisories: ["GET /repos/{owner}/{repo}/security-advisories"],
    updateRepositoryAdvisory: [
      "PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
    ]
  },
  teams: {
    addOrUpdateMembershipForUserInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    addOrUpdateProjectPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",
      {},
      {
        deprecated: "octokit.rest.teams.addOrUpdateProjectPermissionsInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions"
      }
    ],
    addOrUpdateProjectPermissionsLegacy: [
      "PUT /teams/{team_id}/projects/{project_id}",
      {},
      {
        deprecated: "octokit.rest.teams.addOrUpdateProjectPermissionsLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions-legacy"
      }
    ],
    addOrUpdateRepoPermissionsInOrg: [
      "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    checkPermissionsForProjectInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",
      {},
      {
        deprecated: "octokit.rest.teams.checkPermissionsForProjectInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project"
      }
    ],
    checkPermissionsForProjectLegacy: [
      "GET /teams/{team_id}/projects/{project_id}",
      {},
      {
        deprecated: "octokit.rest.teams.checkPermissionsForProjectLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project-legacy"
      }
    ],
    checkPermissionsForRepoInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    create: ["POST /orgs/{org}/teams"],
    createDiscussionCommentInOrg: [
      "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
    deleteDiscussionCommentInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    deleteDiscussionInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
    getByName: ["GET /orgs/{org}/teams/{team_slug}"],
    getDiscussionCommentInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    getDiscussionInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    getMembershipForUserInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    list: ["GET /orgs/{org}/teams"],
    listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
    listDiscussionCommentsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
    ],
    listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
    listForAuthenticatedUser: ["GET /user/teams"],
    listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
    listPendingInvitationsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/invitations"
    ],
    listProjectsInOrg: [
      "GET /orgs/{org}/teams/{team_slug}/projects",
      {},
      {
        deprecated: "octokit.rest.teams.listProjectsInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#list-team-projects"
      }
    ],
    listProjectsLegacy: [
      "GET /teams/{team_id}/projects",
      {},
      {
        deprecated: "octokit.rest.teams.listProjectsLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#list-team-projects-legacy"
      }
    ],
    listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
    removeMembershipForUserInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
    ],
    removeProjectInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}",
      {},
      {
        deprecated: "octokit.rest.teams.removeProjectInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team"
      }
    ],
    removeProjectLegacy: [
      "DELETE /teams/{team_id}/projects/{project_id}",
      {},
      {
        deprecated: "octokit.rest.teams.removeProjectLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team-legacy"
      }
    ],
    removeRepoInOrg: [
      "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
    ],
    updateDiscussionCommentInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
    ],
    updateDiscussionInOrg: [
      "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
    ],
    updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
  },
  users: {
    addEmailForAuthenticated: [
      "POST /user/emails",
      {},
      { renamed: ["users", "addEmailForAuthenticatedUser"] }
    ],
    addEmailForAuthenticatedUser: ["POST /user/emails"],
    addSocialAccountForAuthenticatedUser: ["POST /user/social_accounts"],
    block: ["PUT /user/blocks/{username}"],
    checkBlocked: ["GET /user/blocks/{username}"],
    checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
    checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
    createGpgKeyForAuthenticated: [
      "POST /user/gpg_keys",
      {},
      { renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
    ],
    createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
    createPublicSshKeyForAuthenticated: [
      "POST /user/keys",
      {},
      { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
    ],
    createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
    createSshSigningKeyForAuthenticatedUser: ["POST /user/ssh_signing_keys"],
    deleteEmailForAuthenticated: [
      "DELETE /user/emails",
      {},
      { renamed: ["users", "deleteEmailForAuthenticatedUser"] }
    ],
    deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
    deleteGpgKeyForAuthenticated: [
      "DELETE /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
    ],
    deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
    deletePublicSshKeyForAuthenticated: [
      "DELETE /user/keys/{key_id}",
      {},
      { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
    ],
    deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
    deleteSocialAccountForAuthenticatedUser: ["DELETE /user/social_accounts"],
    deleteSshSigningKeyForAuthenticatedUser: [
      "DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"
    ],
    follow: ["PUT /user/following/{username}"],
    getAuthenticated: ["GET /user"],
    getById: ["GET /user/{account_id}"],
    getByUsername: ["GET /users/{username}"],
    getContextForUser: ["GET /users/{username}/hovercard"],
    getGpgKeyForAuthenticated: [
      "GET /user/gpg_keys/{gpg_key_id}",
      {},
      { renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
    ],
    getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
    getPublicSshKeyForAuthenticated: [
      "GET /user/keys/{key_id}",
      {},
      { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
    ],
    getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
    getSshSigningKeyForAuthenticatedUser: [
      "GET /user/ssh_signing_keys/{ssh_signing_key_id}"
    ],
    list: ["GET /users"],
    listAttestations: ["GET /users/{username}/attestations/{subject_digest}"],
    listBlockedByAuthenticated: [
      "GET /user/blocks",
      {},
      { renamed: ["users", "listBlockedByAuthenticatedUser"] }
    ],
    listBlockedByAuthenticatedUser: ["GET /user/blocks"],
    listEmailsForAuthenticated: [
      "GET /user/emails",
      {},
      { renamed: ["users", "listEmailsForAuthenticatedUser"] }
    ],
    listEmailsForAuthenticatedUser: ["GET /user/emails"],
    listFollowedByAuthenticated: [
      "GET /user/following",
      {},
      { renamed: ["users", "listFollowedByAuthenticatedUser"] }
    ],
    listFollowedByAuthenticatedUser: ["GET /user/following"],
    listFollowersForAuthenticatedUser: ["GET /user/followers"],
    listFollowersForUser: ["GET /users/{username}/followers"],
    listFollowingForUser: ["GET /users/{username}/following"],
    listGpgKeysForAuthenticated: [
      "GET /user/gpg_keys",
      {},
      { renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
    ],
    listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
    listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
    listPublicEmailsForAuthenticated: [
      "GET /user/public_emails",
      {},
      { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
    ],
    listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
    listPublicKeysForUser: ["GET /users/{username}/keys"],
    listPublicSshKeysForAuthenticated: [
      "GET /user/keys",
      {},
      { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
    ],
    listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
    listSocialAccountsForAuthenticatedUser: ["GET /user/social_accounts"],
    listSocialAccountsForUser: ["GET /users/{username}/social_accounts"],
    listSshSigningKeysForAuthenticatedUser: ["GET /user/ssh_signing_keys"],
    listSshSigningKeysForUser: ["GET /users/{username}/ssh_signing_keys"],
    setPrimaryEmailVisibilityForAuthenticated: [
      "PATCH /user/email/visibility",
      {},
      { renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
    ],
    setPrimaryEmailVisibilityForAuthenticatedUser: [
      "PATCH /user/email/visibility"
    ],
    unblock: ["DELETE /user/blocks/{username}"],
    unfollow: ["DELETE /user/following/{username}"],
    updateAuthenticated: ["PATCH /user"]
  }
};
var endpoints_default = Endpoints;

//# sourceMappingURL=endpoints.js.map

;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/endpoints-to-methods.js

const endpointMethodsMap = /* @__PURE__ */ new Map();
for (const [scope, endpoints] of Object.entries(endpoints_default)) {
  for (const [methodName, endpoint] of Object.entries(endpoints)) {
    const [route, defaults, decorations] = endpoint;
    const [method, url] = route.split(/ /);
    const endpointDefaults = Object.assign(
      {
        method,
        url
      },
      defaults
    );
    if (!endpointMethodsMap.has(scope)) {
      endpointMethodsMap.set(scope, /* @__PURE__ */ new Map());
    }
    endpointMethodsMap.get(scope).set(methodName, {
      scope,
      methodName,
      endpointDefaults,
      decorations
    });
  }
}
const handler = {
  has({ scope }, methodName) {
    return endpointMethodsMap.get(scope).has(methodName);
  },
  getOwnPropertyDescriptor(target, methodName) {
    return {
      value: this.get(target, methodName),
      // ensures method is in the cache
      configurable: true,
      writable: true,
      enumerable: true
    };
  },
  defineProperty(target, methodName, descriptor) {
    Object.defineProperty(target.cache, methodName, descriptor);
    return true;
  },
  deleteProperty(target, methodName) {
    delete target.cache[methodName];
    return true;
  },
  ownKeys({ scope }) {
    return [...endpointMethodsMap.get(scope).keys()];
  },
  set(target, methodName, value) {
    return target.cache[methodName] = value;
  },
  get({ octokit, scope, cache }, methodName) {
    if (cache[methodName]) {
      return cache[methodName];
    }
    const method = endpointMethodsMap.get(scope).get(methodName);
    if (!method) {
      return void 0;
    }
    const { endpointDefaults, decorations } = method;
    if (decorations) {
      cache[methodName] = decorate(
        octokit,
        scope,
        methodName,
        endpointDefaults,
        decorations
      );
    } else {
      cache[methodName] = octokit.request.defaults(endpointDefaults);
    }
    return cache[methodName];
  }
};
function endpointsToMethods(octokit) {
  const newMethods = {};
  for (const scope of endpointMethodsMap.keys()) {
    newMethods[scope] = new Proxy({ octokit, scope, cache: {} }, handler);
  }
  return newMethods;
}
function decorate(octokit, scope, methodName, defaults, decorations) {
  const requestWithDefaults = octokit.request.defaults(defaults);
  function withDecorations(...args) {
    let options = requestWithDefaults.endpoint.merge(...args);
    if (decorations.mapToData) {
      options = Object.assign({}, options, {
        data: options[decorations.mapToData],
        [decorations.mapToData]: void 0
      });
      return requestWithDefaults(options);
    }
    if (decorations.renamed) {
      const [newScope, newMethodName] = decorations.renamed;
      octokit.log.warn(
        `octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`
      );
    }
    if (decorations.deprecated) {
      octokit.log.warn(decorations.deprecated);
    }
    if (decorations.renamedParameters) {
      const options2 = requestWithDefaults.endpoint.merge(...args);
      for (const [name, alias] of Object.entries(
        decorations.renamedParameters
      )) {
        if (name in options2) {
          octokit.log.warn(
            `"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`
          );
          if (!(alias in options2)) {
            options2[alias] = options2[name];
          }
          delete options2[name];
        }
      }
      return requestWithDefaults(options2);
    }
    return requestWithDefaults(...args);
  }
  return Object.assign(withDecorations, requestWithDefaults);
}

//# sourceMappingURL=endpoints-to-methods.js.map

;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/node_modules/@octokit/plugin-rest-endpoint-methods/dist-src/index.js


function restEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit);
  return {
    rest: api
  };
}
restEndpointMethods.VERSION = dist_src_version_VERSION;
function legacyRestEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit);
  return {
    ...api,
    rest: api
  };
}
legacyRestEndpointMethods.VERSION = dist_src_version_VERSION;

//# sourceMappingURL=index.js.map

// EXTERNAL MODULE: ./node_modules/bottleneck/light.js
var light = __nccwpck_require__(9430);
;// CONCATENATED MODULE: ./node_modules/@octokit/plugin-retry/node_modules/@octokit/request-error/dist-src/index.js
class dist_src_RequestError extends Error {
  name;
  /**
   * http status code
   */
  status;
  /**
   * Request options that lead to the error.
   */
  request;
  /**
   * Response object if a response was received
   */
  response;
  constructor(message, statusCode, options) {
    super(message);
    this.name = "HttpError";
    this.status = Number.parseInt(statusCode);
    if (Number.isNaN(this.status)) {
      this.status = 0;
    }
    if ("response" in options) {
      this.response = options.response;
    }
    const requestCopy = Object.assign({}, options.request);
    if (options.request.headers.authorization) {
      requestCopy.headers = Object.assign({}, options.request.headers, {
        authorization: options.request.headers.authorization.replace(
          /(?<! ) .*$/,
          " [REDACTED]"
        )
      });
    }
    requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
    this.request = requestCopy;
  }
}


;// CONCATENATED MODULE: ./node_modules/@octokit/plugin-retry/dist-bundle/index.js
// pkg/dist-src/version.js
var plugin_retry_dist_bundle_VERSION = "0.0.0-development";

// pkg/dist-src/error-request.js
async function errorRequest(state, octokit, error, options) {
  if (!error.request || !error.request.request) {
    throw error;
  }
  if (error.status >= 400 && !state.doNotRetry.includes(error.status)) {
    const retries = options.request.retries != null ? options.request.retries : state.retries;
    const retryAfter = Math.pow((options.request.retryCount || 0) + 1, 2);
    throw octokit.retry.retryRequest(error, retries, retryAfter);
  }
  throw error;
}

// pkg/dist-src/wrap-request.js


async function wrapRequest(state, octokit, request, options) {
  const limiter = new light();
  limiter.on("failed", function(error, info) {
    const maxRetries = ~~error.request.request.retries;
    const after = ~~error.request.request.retryAfter;
    options.request.retryCount = info.retryCount + 1;
    if (maxRetries > info.retryCount) {
      return after * state.retryAfterBaseValue;
    }
  });
  return limiter.schedule(
    requestWithGraphqlErrorHandling.bind(null, state, octokit, request),
    options
  );
}
async function requestWithGraphqlErrorHandling(state, octokit, request, options) {
  const response = await request(request, options);
  if (response.data && response.data.errors && response.data.errors.length > 0 && /Something went wrong while executing your query/.test(
    response.data.errors[0].message
  )) {
    const error = new dist_src_RequestError(response.data.errors[0].message, 500, {
      request: options,
      response
    });
    return errorRequest(state, octokit, error, options);
  }
  return response;
}

// pkg/dist-src/index.js
function retry(octokit, octokitOptions) {
  const state = Object.assign(
    {
      enabled: true,
      retryAfterBaseValue: 1e3,
      doNotRetry: [400, 401, 403, 404, 410, 422, 451],
      retries: 3
    },
    octokitOptions.retry
  );
  if (state.enabled) {
    octokit.hook.error("request", errorRequest.bind(null, state, octokit));
    octokit.hook.wrap("request", wrapRequest.bind(null, state, octokit));
  }
  return {
    retry: {
      retryRequest: (error, retries, retryAfter) => {
        error.request.request = Object.assign({}, error.request.request, {
          retries,
          retryAfter
        });
        return error;
      }
    }
  };
}
retry.VERSION = plugin_retry_dist_bundle_VERSION;


;// CONCATENATED MODULE: ./node_modules/@octokit/plugin-throttling/dist-bundle/index.js
// pkg/dist-src/index.js


// pkg/dist-src/version.js
var plugin_throttling_dist_bundle_VERSION = "0.0.0-development";

// pkg/dist-src/wrap-request.js
var dist_bundle_noop = () => Promise.resolve();
function dist_bundle_wrapRequest(state, request, options) {
  return state.retryLimiter.schedule(doRequest, state, request, options);
}
async function doRequest(state, request, options) {
  const isWrite = options.method !== "GET" && options.method !== "HEAD";
  const { pathname } = new URL(options.url, "http://github.test");
  const isSearch = options.method === "GET" && pathname.startsWith("/search/");
  const isGraphQL = pathname.startsWith("/graphql");
  const retryCount = ~~request.retryCount;
  const jobOptions = retryCount > 0 ? { priority: 0, weight: 0 } : {};
  if (state.clustering) {
    jobOptions.expiration = 1e3 * 60;
  }
  if (isWrite || isGraphQL) {
    await state.write.key(state.id).schedule(jobOptions, dist_bundle_noop);
  }
  if (isWrite && state.triggersNotification(pathname)) {
    await state.notifications.key(state.id).schedule(jobOptions, dist_bundle_noop);
  }
  if (isSearch) {
    await state.search.key(state.id).schedule(jobOptions, dist_bundle_noop);
  }
  const req = state.global.key(state.id).schedule(jobOptions, request, options);
  if (isGraphQL) {
    const res = await req;
    if (res.data.errors != null && res.data.errors.some((error) => error.type === "RATE_LIMITED")) {
      const error = Object.assign(new Error("GraphQL Rate Limit Exceeded"), {
        response: res,
        data: res.data
      });
      throw error;
    }
  }
  return req;
}

// pkg/dist-src/generated/triggers-notification-paths.js
var triggers_notification_paths_default = [
  "/orgs/{org}/invitations",
  "/orgs/{org}/invitations/{invitation_id}",
  "/orgs/{org}/teams/{team_slug}/discussions",
  "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
  "/repos/{owner}/{repo}/collaborators/{username}",
  "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
  "/repos/{owner}/{repo}/issues",
  "/repos/{owner}/{repo}/issues/{issue_number}/comments",
  "/repos/{owner}/{repo}/issues/{issue_number}/sub_issue",
  "/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority",
  "/repos/{owner}/{repo}/pulls",
  "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
  "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
  "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
  "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
  "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
  "/repos/{owner}/{repo}/releases",
  "/teams/{team_id}/discussions",
  "/teams/{team_id}/discussions/{discussion_number}/comments"
];

// pkg/dist-src/route-matcher.js
function routeMatcher(paths) {
  const regexes = paths.map(
    (path) => path.split("/").map((c) => c.startsWith("{") ? "(?:.+?)" : c).join("/")
  );
  const regex2 = `^(?:${regexes.map((r) => `(?:${r})`).join("|")})[^/]*$`;
  return new RegExp(regex2, "i");
}

// pkg/dist-src/index.js
var regex = routeMatcher(triggers_notification_paths_default);
var triggersNotification = regex.test.bind(regex);
var groups = {};
var createGroups = function(Bottleneck, common) {
  groups.global = new Bottleneck.Group({
    id: "octokit-global",
    maxConcurrent: 10,
    ...common
  });
  groups.search = new Bottleneck.Group({
    id: "octokit-search",
    maxConcurrent: 1,
    minTime: 2e3,
    ...common
  });
  groups.write = new Bottleneck.Group({
    id: "octokit-write",
    maxConcurrent: 1,
    minTime: 1e3,
    ...common
  });
  groups.notifications = new Bottleneck.Group({
    id: "octokit-notifications",
    maxConcurrent: 1,
    minTime: 3e3,
    ...common
  });
};
function throttling(octokit, octokitOptions) {
  const {
    enabled = true,
    Bottleneck = light,
    id = "no-id",
    timeout = 1e3 * 60 * 2,
    // Redis TTL: 2 minutes
    connection
  } = octokitOptions.throttle || {};
  if (!enabled) {
    return {};
  }
  const common = { timeout };
  if (typeof connection !== "undefined") {
    common.connection = connection;
  }
  if (groups.global == null) {
    createGroups(Bottleneck, common);
  }
  const state = Object.assign(
    {
      clustering: connection != null,
      triggersNotification,
      fallbackSecondaryRateRetryAfter: 60,
      retryAfterBaseValue: 1e3,
      retryLimiter: new Bottleneck(),
      id,
      ...groups
    },
    octokitOptions.throttle
  );
  if (typeof state.onSecondaryRateLimit !== "function" || typeof state.onRateLimit !== "function") {
    throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);
  }
  const events = {};
  const emitter = new Bottleneck.Events(events);
  events.on("secondary-limit", state.onSecondaryRateLimit);
  events.on("rate-limit", state.onRateLimit);
  events.on(
    "error",
    (e) => octokit.log.warn("Error in throttling-plugin limit handler", e)
  );
  state.retryLimiter.on("failed", async function(error, info) {
    const [state2, request, options] = info.args;
    const { pathname } = new URL(options.url, "http://github.test");
    const shouldRetryGraphQL = pathname.startsWith("/graphql") && error.status !== 401;
    if (!(shouldRetryGraphQL || error.status === 403 || error.status === 429)) {
      return;
    }
    const retryCount = ~~request.retryCount;
    request.retryCount = retryCount;
    options.request.retryCount = retryCount;
    const { wantRetry, retryAfter = 0 } = await async function() {
      if (/\bsecondary rate\b/i.test(error.message)) {
        const retryAfter2 = Number(error.response.headers["retry-after"]) || state2.fallbackSecondaryRateRetryAfter;
        const wantRetry2 = await emitter.trigger(
          "secondary-limit",
          retryAfter2,
          options,
          octokit,
          retryCount
        );
        return { wantRetry: wantRetry2, retryAfter: retryAfter2 };
      }
      if (error.response.headers != null && error.response.headers["x-ratelimit-remaining"] === "0" || (error.response.data?.errors ?? []).some(
        (error2) => error2.type === "RATE_LIMITED"
      )) {
        const rateLimitReset = new Date(
          ~~error.response.headers["x-ratelimit-reset"] * 1e3
        ).getTime();
        const retryAfter2 = Math.max(
          // Add one second so we retry _after_ the reset time
          // https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#exceeding-the-rate-limit
          Math.ceil((rateLimitReset - Date.now()) / 1e3) + 1,
          0
        );
        const wantRetry2 = await emitter.trigger(
          "rate-limit",
          retryAfter2,
          options,
          octokit,
          retryCount
        );
        return { wantRetry: wantRetry2, retryAfter: retryAfter2 };
      }
      return {};
    }();
    if (wantRetry) {
      request.retryCount++;
      return retryAfter * state2.retryAfterBaseValue;
    }
  });
  octokit.hook.wrap("request", dist_bundle_wrapRequest.bind(null, state));
  return {};
}
throttling.VERSION = plugin_throttling_dist_bundle_VERSION;
throttling.triggersNotification = triggersNotification;


;// CONCATENATED MODULE: ./node_modules/@octokit/plugin-paginate-graphql/dist-bundle/index.js
// pkg/dist-src/errors.js
var generateMessage = (path, cursorValue) => `The cursor at "${path.join(
  ","
)}" did not change its value "${cursorValue}" after a page transition. Please make sure your that your query is set up correctly.`;
var MissingCursorChange = class extends Error {
  constructor(pageInfo, cursorValue) {
    super(generateMessage(pageInfo.pathInQuery, cursorValue));
    this.pageInfo = pageInfo;
    this.cursorValue = cursorValue;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
  name = "MissingCursorChangeError";
};
var MissingPageInfo = class extends Error {
  constructor(response) {
    super(
      `No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(
        response,
        null,
        2
      )}`
    );
    this.response = response;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
  name = "MissingPageInfo";
};

// pkg/dist-src/object-helpers.js
var isObject = (value) => Object.prototype.toString.call(value) === "[object Object]";
function findPaginatedResourcePath(responseData) {
  const paginatedResourcePath = deepFindPathToProperty(
    responseData,
    "pageInfo"
  );
  if (paginatedResourcePath.length === 0) {
    throw new MissingPageInfo(responseData);
  }
  return paginatedResourcePath;
}
var deepFindPathToProperty = (object, searchProp, path = []) => {
  for (const key of Object.keys(object)) {
    const currentPath = [...path, key];
    const currentValue = object[key];
    if (isObject(currentValue)) {
      if (currentValue.hasOwnProperty(searchProp)) {
        return currentPath;
      }
      const result = deepFindPathToProperty(
        currentValue,
        searchProp,
        currentPath
      );
      if (result.length > 0) {
        return result;
      }
    }
  }
  return [];
};
var get = (object, path) => {
  return path.reduce((current, nextProperty) => current[nextProperty], object);
};
var set = (object, path, mutator) => {
  const lastProperty = path[path.length - 1];
  const parentPath = [...path].slice(0, -1);
  const parent = get(object, parentPath);
  if (typeof mutator === "function") {
    parent[lastProperty] = mutator(parent[lastProperty]);
  } else {
    parent[lastProperty] = mutator;
  }
};

// pkg/dist-src/extract-page-info.js
var extractPageInfos = (responseData) => {
  const pageInfoPath = findPaginatedResourcePath(responseData);
  return {
    pathInQuery: pageInfoPath,
    pageInfo: get(responseData, [...pageInfoPath, "pageInfo"])
  };
};

// pkg/dist-src/page-info.js
var isForwardSearch = (givenPageInfo) => {
  return givenPageInfo.hasOwnProperty("hasNextPage");
};
var getCursorFrom = (pageInfo) => isForwardSearch(pageInfo) ? pageInfo.endCursor : pageInfo.startCursor;
var hasAnotherPage = (pageInfo) => isForwardSearch(pageInfo) ? pageInfo.hasNextPage : pageInfo.hasPreviousPage;

// pkg/dist-src/iterator.js
var createIterator = (octokit) => {
  return (query, initialParameters = {}) => {
    let nextPageExists = true;
    let parameters = { ...initialParameters };
    return {
      [Symbol.asyncIterator]: () => ({
        async next() {
          if (!nextPageExists) return { done: true, value: {} };
          const response = await octokit.graphql(
            query,
            parameters
          );
          const pageInfoContext = extractPageInfos(response);
          const nextCursorValue = getCursorFrom(pageInfoContext.pageInfo);
          nextPageExists = hasAnotherPage(pageInfoContext.pageInfo);
          if (nextPageExists && nextCursorValue === parameters.cursor) {
            throw new MissingCursorChange(pageInfoContext, nextCursorValue);
          }
          parameters = {
            ...parameters,
            cursor: nextCursorValue
          };
          return { done: false, value: response };
        }
      })
    };
  };
};

// pkg/dist-src/merge-responses.js
var mergeResponses = (response1, response2) => {
  if (Object.keys(response1).length === 0) {
    return Object.assign(response1, response2);
  }
  const path = findPaginatedResourcePath(response1);
  const nodesPath = [...path, "nodes"];
  const newNodes = get(response2, nodesPath);
  if (newNodes) {
    set(response1, nodesPath, (values) => {
      return [...values, ...newNodes];
    });
  }
  const edgesPath = [...path, "edges"];
  const newEdges = get(response2, edgesPath);
  if (newEdges) {
    set(response1, edgesPath, (values) => {
      return [...values, ...newEdges];
    });
  }
  const pageInfoPath = [...path, "pageInfo"];
  set(response1, pageInfoPath, get(response2, pageInfoPath));
  return response1;
};

// pkg/dist-src/paginate.js
var createPaginate = (octokit) => {
  const iterator = createIterator(octokit);
  return async (query, initialParameters = {}) => {
    let mergedResponse = {};
    for await (const response of iterator(
      query,
      initialParameters
    )) {
      mergedResponse = mergeResponses(mergedResponse, response);
    }
    return mergedResponse;
  };
};

// pkg/dist-src/version.js
var plugin_paginate_graphql_dist_bundle_VERSION = "0.0.0-development";

// pkg/dist-src/index.js
function paginateGraphQL(octokit) {
  return {
    graphql: Object.assign(octokit.graphql, {
      paginate: Object.assign(createPaginate(octokit), {
        iterator: createIterator(octokit)
      })
    })
  };
}


;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/value/guard/guard.mjs
// --------------------------------------------------------------------------
// Iterators
// --------------------------------------------------------------------------
/** Returns true if this value is an async iterator */
function IsAsyncIterator(value) {
    return IsObject(value) && Symbol.asyncIterator in value;
}
/** Returns true if this value is an iterator */
function IsIterator(value) {
    return IsObject(value) && Symbol.iterator in value;
}
// --------------------------------------------------------------------------
// Object Instances
// --------------------------------------------------------------------------
/** Returns true if this value is not an instance of a class */
function IsStandardObject(value) {
    return IsObject(value) && (Object.getPrototypeOf(value) === Object.prototype || Object.getPrototypeOf(value) === null);
}
/** Returns true if this value is an instance of a class */
function IsInstanceObject(value) {
    return IsObject(value) && !IsArray(value) && IsFunction(value.constructor) && value.constructor.name !== 'Object';
}
// --------------------------------------------------------------------------
// JavaScript
// --------------------------------------------------------------------------
/** Returns true if this value is a Promise */
function IsPromise(value) {
    return value instanceof Promise;
}
/** Returns true if this value is a Date */
function IsDate(value) {
    return value instanceof Date && Number.isFinite(value.getTime());
}
/** Returns true if this value is an instance of Map<K, T> */
function IsMap(value) {
    return value instanceof globalThis.Map;
}
/** Returns true if this value is an instance of Set<T> */
function IsSet(value) {
    return value instanceof globalThis.Set;
}
/** Returns true if this value is RegExp */
function IsRegExp(value) {
    return value instanceof globalThis.RegExp;
}
/** Returns true if this value is a typed array */
function IsTypedArray(value) {
    return ArrayBuffer.isView(value);
}
/** Returns true if the value is a Int8Array */
function IsInt8Array(value) {
    return value instanceof globalThis.Int8Array;
}
/** Returns true if the value is a Uint8Array */
function IsUint8Array(value) {
    return value instanceof globalThis.Uint8Array;
}
/** Returns true if the value is a Uint8ClampedArray */
function IsUint8ClampedArray(value) {
    return value instanceof globalThis.Uint8ClampedArray;
}
/** Returns true if the value is a Int16Array */
function IsInt16Array(value) {
    return value instanceof globalThis.Int16Array;
}
/** Returns true if the value is a Uint16Array */
function IsUint16Array(value) {
    return value instanceof globalThis.Uint16Array;
}
/** Returns true if the value is a Int32Array */
function IsInt32Array(value) {
    return value instanceof globalThis.Int32Array;
}
/** Returns true if the value is a Uint32Array */
function IsUint32Array(value) {
    return value instanceof globalThis.Uint32Array;
}
/** Returns true if the value is a Float32Array */
function IsFloat32Array(value) {
    return value instanceof globalThis.Float32Array;
}
/** Returns true if the value is a Float64Array */
function IsFloat64Array(value) {
    return value instanceof globalThis.Float64Array;
}
/** Returns true if the value is a BigInt64Array */
function IsBigInt64Array(value) {
    return value instanceof globalThis.BigInt64Array;
}
/** Returns true if the value is a BigUint64Array */
function IsBigUint64Array(value) {
    return value instanceof globalThis.BigUint64Array;
}
// --------------------------------------------------------------------------
// PropertyKey
// --------------------------------------------------------------------------
/** Returns true if this value has this property key */
function HasPropertyKey(value, key) {
    return key in value;
}
// --------------------------------------------------------------------------
// Standard
// --------------------------------------------------------------------------
/** Returns true of this value is an object type */
function IsObject(value) {
    return value !== null && typeof value === 'object';
}
/** Returns true if this value is an array, but not a typed array */
function IsArray(value) {
    return Array.isArray(value) && !ArrayBuffer.isView(value);
}
/** Returns true if this value is an undefined */
function IsUndefined(value) {
    return value === undefined;
}
/** Returns true if this value is an null */
function IsNull(value) {
    return value === null;
}
/** Returns true if this value is an boolean */
function IsBoolean(value) {
    return typeof value === 'boolean';
}
/** Returns true if this value is an number */
function IsNumber(value) {
    return typeof value === 'number';
}
/** Returns true if this value is an integer */
function IsInteger(value) {
    return Number.isInteger(value);
}
/** Returns true if this value is bigint */
function IsBigInt(value) {
    return typeof value === 'bigint';
}
/** Returns true if this value is string */
function IsString(value) {
    return typeof value === 'string';
}
/** Returns true if this value is a function */
function IsFunction(value) {
    return typeof value === 'function';
}
/** Returns true if this value is a symbol */
function IsSymbol(value) {
    return typeof value === 'symbol';
}
/** Returns true if this value is a value type such as number, string, boolean */
function IsValueType(value) {
    // prettier-ignore
    return (IsBigInt(value) ||
        IsBoolean(value) ||
        IsNull(value) ||
        IsNumber(value) ||
        IsString(value) ||
        IsSymbol(value) ||
        IsUndefined(value));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/system/policy.mjs

var TypeSystemPolicy;
(function (TypeSystemPolicy) {
    // ------------------------------------------------------------------
    // TypeSystemPolicy: Instancing
    // ------------------------------------------------------------------
    /**
     * Configures the instantiation behavior of TypeBox types. The `default` option assigns raw JavaScript
     * references for embedded types, which may cause side effects if type properties are explicitly updated
     * outside the TypeBox type builder. The `clone` option creates copies of any shared types upon creation,
     * preventing unintended side effects. The `freeze` option applies `Object.freeze()` to the type, making
     * it fully readonly and immutable. Implementations should use `default` whenever possible, as it is the
     * fastest way to instantiate types. The default setting is `default`.
     */
    TypeSystemPolicy.InstanceMode = 'default';
    // ------------------------------------------------------------------
    // TypeSystemPolicy: Checking
    // ------------------------------------------------------------------
    /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */
    TypeSystemPolicy.ExactOptionalPropertyTypes = false;
    /** Sets whether arrays should be treated as a kind of objects. The default is `false` */
    TypeSystemPolicy.AllowArrayObject = false;
    /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */
    TypeSystemPolicy.AllowNaN = false;
    /** Sets whether `null` should validate for void types. The default is `false` */
    TypeSystemPolicy.AllowNullVoid = false;
    /** Checks this value using the ExactOptionalPropertyTypes policy */
    function IsExactOptionalProperty(value, key) {
        return TypeSystemPolicy.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;
    }
    TypeSystemPolicy.IsExactOptionalProperty = IsExactOptionalProperty;
    /** Checks this value using the AllowArrayObjects policy */
    function IsObjectLike(value) {
        const isObject = IsObject(value);
        return TypeSystemPolicy.AllowArrayObject ? isObject : isObject && !IsArray(value);
    }
    TypeSystemPolicy.IsObjectLike = IsObjectLike;
    /** Checks this value as a record using the AllowArrayObjects policy */
    function IsRecordLike(value) {
        return IsObjectLike(value) && !(value instanceof Date) && !(value instanceof Uint8Array);
    }
    TypeSystemPolicy.IsRecordLike = IsRecordLike;
    /** Checks this value using the AllowNaN policy */
    function IsNumberLike(value) {
        return TypeSystemPolicy.AllowNaN ? IsNumber(value) : Number.isFinite(value);
    }
    TypeSystemPolicy.IsNumberLike = IsNumberLike;
    /** Checks this value using the AllowVoidNull policy */
    function IsVoidLike(value) {
        const isUndefined = IsUndefined(value);
        return TypeSystemPolicy.AllowNullVoid ? isUndefined || value === null : isUndefined;
    }
    TypeSystemPolicy.IsVoidLike = IsVoidLike;
})(TypeSystemPolicy || (TypeSystemPolicy = {}));

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/guard/value.mjs
// --------------------------------------------------------------------------
// PropertyKey
// --------------------------------------------------------------------------
/** Returns true if this value has this property key */
function value_HasPropertyKey(value, key) {
    return key in value;
}
// --------------------------------------------------------------------------
// Object Instances
// --------------------------------------------------------------------------
/** Returns true if this value is an async iterator */
function value_IsAsyncIterator(value) {
    return value_IsObject(value) && !value_IsArray(value) && !value_IsUint8Array(value) && Symbol.asyncIterator in value;
}
/** Returns true if this value is an array */
function value_IsArray(value) {
    return Array.isArray(value);
}
/** Returns true if this value is bigint */
function value_IsBigInt(value) {
    return typeof value === 'bigint';
}
/** Returns true if this value is a boolean */
function value_IsBoolean(value) {
    return typeof value === 'boolean';
}
/** Returns true if this value is a Date object */
function value_IsDate(value) {
    return value instanceof globalThis.Date;
}
/** Returns true if this value is a function */
function value_IsFunction(value) {
    return typeof value === 'function';
}
/** Returns true if this value is an iterator */
function value_IsIterator(value) {
    return value_IsObject(value) && !value_IsArray(value) && !value_IsUint8Array(value) && Symbol.iterator in value;
}
/** Returns true if this value is null */
function value_IsNull(value) {
    return value === null;
}
/** Returns true if this value is number */
function value_IsNumber(value) {
    return typeof value === 'number';
}
/** Returns true if this value is an object */
function value_IsObject(value) {
    return typeof value === 'object' && value !== null;
}
/** Returns true if this value is RegExp */
function value_IsRegExp(value) {
    return value instanceof globalThis.RegExp;
}
/** Returns true if this value is string */
function value_IsString(value) {
    return typeof value === 'string';
}
/** Returns true if this value is symbol */
function value_IsSymbol(value) {
    return typeof value === 'symbol';
}
/** Returns true if this value is a Uint8Array */
function value_IsUint8Array(value) {
    return value instanceof globalThis.Uint8Array;
}
/** Returns true if this value is undefined */
function value_IsUndefined(value) {
    return value === undefined;
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/create/immutable.mjs

function ImmutableArray(value) {
    return globalThis.Object.freeze(value).map((value) => Immutable(value));
}
function ImmutableDate(value) {
    return value;
}
function ImmutableUint8Array(value) {
    return value;
}
function ImmutableRegExp(value) {
    return value;
}
function ImmutableObject(value) {
    const result = {};
    for (const key of Object.getOwnPropertyNames(value)) {
        result[key] = Immutable(value[key]);
    }
    for (const key of Object.getOwnPropertySymbols(value)) {
        result[key] = Immutable(value[key]);
    }
    return globalThis.Object.freeze(result);
}
/** Specialized deep immutable value. Applies freeze recursively to the given value */
// prettier-ignore
function Immutable(value) {
    return (value_IsArray(value) ? ImmutableArray(value) :
        value_IsDate(value) ? ImmutableDate(value) :
            value_IsUint8Array(value) ? ImmutableUint8Array(value) :
                value_IsRegExp(value) ? ImmutableRegExp(value) :
                    value_IsObject(value) ? ImmutableObject(value) :
                        value);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/clone/value.mjs

function ArrayType(value) {
    return value.map((value) => Visit(value));
}
function DateType(value) {
    return new Date(value.getTime());
}
function Uint8ArrayType(value) {
    return new Uint8Array(value);
}
function RegExpType(value) {
    return new RegExp(value.source, value.flags);
}
function ObjectType(value) {
    const result = {};
    for (const key of Object.getOwnPropertyNames(value)) {
        result[key] = Visit(value[key]);
    }
    for (const key of Object.getOwnPropertySymbols(value)) {
        result[key] = Visit(value[key]);
    }
    return result;
}
// prettier-ignore
function Visit(value) {
    return (value_IsArray(value) ? ArrayType(value) :
        value_IsDate(value) ? DateType(value) :
            value_IsUint8Array(value) ? Uint8ArrayType(value) :
                value_IsRegExp(value) ? RegExpType(value) :
                    value_IsObject(value) ? ObjectType(value) :
                        value);
}
/** Clones a value */
function Clone(value) {
    return Visit(value);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/create/type.mjs



/** Creates TypeBox schematics using the configured InstanceMode */
function CreateType(schema, options) {
    const result = options !== undefined ? { ...options, ...schema } : schema;
    switch (TypeSystemPolicy.InstanceMode) {
        case 'freeze':
            return Immutable(result);
        case 'clone':
            return Clone(result);
        default:
            return result;
    }
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/symbols/symbols.mjs
/** Symbol key applied to transform types */
const TransformKind = Symbol.for('TypeBox.Transform');
/** Symbol key applied to readonly types */
const symbols_ReadonlyKind = Symbol.for('TypeBox.Readonly');
/** Symbol key applied to optional types */
const OptionalKind = Symbol.for('TypeBox.Optional');
/** Symbol key applied to types */
const symbols_Hint = Symbol.for('TypeBox.Hint');
/** Symbol key applied to types */
const Kind = Symbol.for('TypeBox.Kind');

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/any/any.mjs


/** `[Json]` Creates an Any type */
function Any(options) {
    return CreateType({ [Kind]: 'Any' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/array/array.mjs


/** `[Json]` Creates an Array type */
function array_Array(items, options) {
    return CreateType({ [Kind]: 'Array', type: 'array', items }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/async-iterator/async-iterator.mjs


/** `[JavaScript]` Creates a AsyncIterator type */
function AsyncIterator(items, options) {
    return CreateType({ [Kind]: 'AsyncIterator', type: 'AsyncIterator', items }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/computed/computed.mjs


/** `[Internal]` Creates a deferred computed type. This type is used exclusively in modules to defer resolution of computable types that contain interior references  */
function Computed(target, parameters, options) {
    return CreateType({ [Kind]: 'Computed', target, parameters }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/never/never.mjs


/** `[Json]` Creates a Never type */
function Never(options) {
    return CreateType({ [Kind]: 'Never', not: {} }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/guard/kind.mjs


/** `[Kind-Only]` Returns true if this value has a Readonly symbol */
function IsReadonly(value) {
    return value_IsObject(value) && value[symbols_ReadonlyKind] === 'Readonly';
}
/** `[Kind-Only]` Returns true if this value has a Optional symbol */
function IsOptional(value) {
    return value_IsObject(value) && value[OptionalKind] === 'Optional';
}
/** `[Kind-Only]` Returns true if the given value is TAny */
function IsAny(value) {
    return IsKindOf(value, 'Any');
}
/** `[Kind-Only]` Returns true if the given value is TArray */
function kind_IsArray(value) {
    return IsKindOf(value, 'Array');
}
/** `[Kind-Only]` Returns true if the given value is TAsyncIterator */
function kind_IsAsyncIterator(value) {
    return IsKindOf(value, 'AsyncIterator');
}
/** `[Kind-Only]` Returns true if the given value is TBigInt */
function kind_IsBigInt(value) {
    return IsKindOf(value, 'BigInt');
}
/** `[Kind-Only]` Returns true if the given value is TBoolean */
function kind_IsBoolean(value) {
    return IsKindOf(value, 'Boolean');
}
/** `[Kind-Only]` Returns true if the given value is TComputed */
function IsComputed(value) {
    return IsKindOf(value, 'Computed');
}
/** `[Kind-Only]` Returns true if the given value is TConstructor */
function IsConstructor(value) {
    return IsKindOf(value, 'Constructor');
}
/** `[Kind-Only]` Returns true if the given value is TDate */
function kind_IsDate(value) {
    return IsKindOf(value, 'Date');
}
/** `[Kind-Only]` Returns true if the given value is TFunction */
function kind_IsFunction(value) {
    return IsKindOf(value, 'Function');
}
/** `[Kind-Only]` Returns true if the given value is TInteger */
function IsImport(value) {
    return IsKindOf(value, 'Import');
}
/** `[Kind-Only]` Returns true if the given value is TInteger */
function kind_IsInteger(value) {
    return IsKindOf(value, 'Integer');
}
/** `[Kind-Only]` Returns true if the given schema is TProperties */
function IsProperties(value) {
    return ValueGuard.IsObject(value);
}
/** `[Kind-Only]` Returns true if the given value is TIntersect */
function IsIntersect(value) {
    return IsKindOf(value, 'Intersect');
}
/** `[Kind-Only]` Returns true if the given value is TIterator */
function kind_IsIterator(value) {
    return IsKindOf(value, 'Iterator');
}
/** `[Kind-Only]` Returns true if the given value is a TKind with the given name. */
function IsKindOf(value, kind) {
    return value_IsObject(value) && Kind in value && value[Kind] === kind;
}
/** `[Kind-Only]` Returns true if the given value is TLiteral<string> */
function IsLiteralString(value) {
    return IsLiteral(value) && ValueGuard.IsString(value.const);
}
/** `[Kind-Only]` Returns true if the given value is TLiteral<number> */
function IsLiteralNumber(value) {
    return IsLiteral(value) && ValueGuard.IsNumber(value.const);
}
/** `[Kind-Only]` Returns true if the given value is TLiteral<boolean> */
function IsLiteralBoolean(value) {
    return IsLiteral(value) && ValueGuard.IsBoolean(value.const);
}
/** `[Kind-Only]` Returns true if the given value is TLiteralValue */
function IsLiteralValue(value) {
    return value_IsBoolean(value) || value_IsNumber(value) || value_IsString(value);
}
/** `[Kind-Only]` Returns true if the given value is TLiteral */
function IsLiteral(value) {
    return IsKindOf(value, 'Literal');
}
/** `[Kind-Only]` Returns true if the given value is a TMappedKey */
function IsMappedKey(value) {
    return IsKindOf(value, 'MappedKey');
}
/** `[Kind-Only]` Returns true if the given value is TMappedResult */
function IsMappedResult(value) {
    return IsKindOf(value, 'MappedResult');
}
/** `[Kind-Only]` Returns true if the given value is TNever */
function IsNever(value) {
    return IsKindOf(value, 'Never');
}
/** `[Kind-Only]` Returns true if the given value is TNot */
function IsNot(value) {
    return IsKindOf(value, 'Not');
}
/** `[Kind-Only]` Returns true if the given value is TNull */
function kind_IsNull(value) {
    return IsKindOf(value, 'Null');
}
/** `[Kind-Only]` Returns true if the given value is TNumber */
function kind_IsNumber(value) {
    return IsKindOf(value, 'Number');
}
/** `[Kind-Only]` Returns true if the given value is TObject */
function kind_IsObject(value) {
    return IsKindOf(value, 'Object');
}
/** `[Kind-Only]` Returns true if the given value is TPromise */
function kind_IsPromise(value) {
    return IsKindOf(value, 'Promise');
}
/** `[Kind-Only]` Returns true if the given value is TRecord */
function IsRecord(value) {
    return IsKindOf(value, 'Record');
}
/** `[Kind-Only]` Returns true if this value is TRecursive */
function IsRecursive(value) {
    return ValueGuard.IsObject(value) && Hint in value && value[Hint] === 'Recursive';
}
/** `[Kind-Only]` Returns true if the given value is TRef */
function IsRef(value) {
    return IsKindOf(value, 'Ref');
}
/** `[Kind-Only]` Returns true if the given value is TRegExp */
function kind_IsRegExp(value) {
    return IsKindOf(value, 'RegExp');
}
/** `[Kind-Only]` Returns true if the given value is TString */
function kind_IsString(value) {
    return IsKindOf(value, 'String');
}
/** `[Kind-Only]` Returns true if the given value is TSymbol */
function kind_IsSymbol(value) {
    return IsKindOf(value, 'Symbol');
}
/** `[Kind-Only]` Returns true if the given value is TTemplateLiteral */
function IsTemplateLiteral(value) {
    return IsKindOf(value, 'TemplateLiteral');
}
/** `[Kind-Only]` Returns true if the given value is TThis */
function IsThis(value) {
    return IsKindOf(value, 'This');
}
/** `[Kind-Only]` Returns true of this value is TTransform */
function IsTransform(value) {
    return value_IsObject(value) && TransformKind in value;
}
/** `[Kind-Only]` Returns true if the given value is TTuple */
function IsTuple(value) {
    return IsKindOf(value, 'Tuple');
}
/** `[Kind-Only]` Returns true if the given value is TUndefined */
function kind_IsUndefined(value) {
    return IsKindOf(value, 'Undefined');
}
/** `[Kind-Only]` Returns true if the given value is TUnion */
function IsUnion(value) {
    return IsKindOf(value, 'Union');
}
/** `[Kind-Only]` Returns true if the given value is TUint8Array */
function kind_IsUint8Array(value) {
    return IsKindOf(value, 'Uint8Array');
}
/** `[Kind-Only]` Returns true if the given value is TUnknown */
function IsUnknown(value) {
    return IsKindOf(value, 'Unknown');
}
/** `[Kind-Only]` Returns true if the given value is a raw TUnsafe */
function IsUnsafe(value) {
    return IsKindOf(value, 'Unsafe');
}
/** `[Kind-Only]` Returns true if the given value is TVoid */
function IsVoid(value) {
    return IsKindOf(value, 'Void');
}
/** `[Kind-Only]` Returns true if the given value is TKind */
function IsKind(value) {
    return value_IsObject(value) && Kind in value && value_IsString(value[Kind]);
}
/** `[Kind-Only]` Returns true if the given value is TSchema */
function IsSchema(value) {
    // prettier-ignore
    return (IsAny(value) ||
        kind_IsArray(value) ||
        kind_IsBoolean(value) ||
        kind_IsBigInt(value) ||
        kind_IsAsyncIterator(value) ||
        IsConstructor(value) ||
        kind_IsDate(value) ||
        kind_IsFunction(value) ||
        kind_IsInteger(value) ||
        IsIntersect(value) ||
        kind_IsIterator(value) ||
        IsLiteral(value) ||
        IsMappedKey(value) ||
        IsMappedResult(value) ||
        IsNever(value) ||
        IsNot(value) ||
        kind_IsNull(value) ||
        kind_IsNumber(value) ||
        kind_IsObject(value) ||
        kind_IsPromise(value) ||
        IsRecord(value) ||
        IsRef(value) ||
        kind_IsRegExp(value) ||
        kind_IsString(value) ||
        kind_IsSymbol(value) ||
        IsTemplateLiteral(value) ||
        IsThis(value) ||
        IsTuple(value) ||
        kind_IsUndefined(value) ||
        IsUnion(value) ||
        kind_IsUint8Array(value) ||
        IsUnknown(value) ||
        IsUnsafe(value) ||
        IsVoid(value) ||
        IsKind(value));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/intersect/intersect-create.mjs


// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// IntersectCreate
// ------------------------------------------------------------------
// prettier-ignore
function IntersectCreate(T, options = {}) {
    const allObjects = T.every((schema) => kind_IsObject(schema));
    const clonedUnevaluatedProperties = IsSchema(options.unevaluatedProperties)
        ? { unevaluatedProperties: options.unevaluatedProperties }
        : {};
    return CreateType((options.unevaluatedProperties === false || IsSchema(options.unevaluatedProperties) || allObjects
        ? { ...clonedUnevaluatedProperties, [Kind]: 'Intersect', type: 'object', allOf: T }
        : { ...clonedUnevaluatedProperties, [Kind]: 'Intersect', allOf: T }), options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/intersect/intersect.mjs



// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

/** `[Json]` Creates an evaluated Intersect type */
function Intersect(types, options) {
    if (types.length === 1)
        return CreateType(types[0], options);
    if (types.length === 0)
        return Never(options);
    if (types.some((schema) => IsTransform(schema)))
        throw new Error('Cannot intersect transform types');
    return IntersectCreate(types, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/union/union-create.mjs


function UnionCreate(T, options) {
    return CreateType({ [Kind]: 'Union', anyOf: T }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/union/union.mjs



/** `[Json]` Creates a Union type */
function Union(types, options) {
    // prettier-ignore
    return (types.length === 0 ? Never(options) :
        types.length === 1 ? CreateType(types[0], options) :
            UnionCreate(types, options));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/ref/ref.mjs


/** `[Json]` Creates a Ref type. The referenced type must contain a $id */
function Ref($ref, options) {
    return CreateType({ [Kind]: 'Ref', $ref }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/awaited/awaited.mjs





// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function FromComputed(target, parameters) {
    return Computed('Awaited', [Computed(target, parameters)]);
}
// prettier-ignore
function FromRef($ref) {
    return Computed('Awaited', [Ref($ref)]);
}
// prettier-ignore
function FromIntersect(types) {
    return Intersect(FromRest(types));
}
// prettier-ignore
function FromUnion(types) {
    return Union(FromRest(types));
}
// prettier-ignore
function FromPromise(type) {
    return Awaited(type);
}
// prettier-ignore
function FromRest(types) {
    return types.map(type => Awaited(type));
}
/** `[JavaScript]` Constructs a type by recursively unwrapping Promise types */
function Awaited(type, options) {
    return CreateType(IsComputed(type) ? FromComputed(type.target, type.parameters) : IsIntersect(type) ? FromIntersect(type.allOf) : IsUnion(type) ? FromUnion(type.anyOf) : kind_IsPromise(type) ? FromPromise(type.item) : IsRef(type) ? FromRef(type.$ref) : type, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/bigint/bigint.mjs


/** `[JavaScript]` Creates a BigInt type */
function bigint_BigInt(options) {
    return CreateType({ [Kind]: 'BigInt', type: 'bigint' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/boolean/boolean.mjs


/** `[Json]` Creates a Boolean type */
function boolean_Boolean(options) {
    return CreateType({ [Kind]: 'Boolean', type: 'boolean' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/discard/discard.mjs
function DiscardKey(value, key) {
    const { [key]: _, ...rest } = value;
    return rest;
}
/** Discards property keys from the given value. This function returns a shallow Clone. */
function Discard(value, keys) {
    return keys.reduce((acc, key) => DiscardKey(acc, key), value);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/mapped/mapped-result.mjs


// prettier-ignore
function MappedResult(properties) {
    return CreateType({
        [Kind]: 'MappedResult',
        properties
    });
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/optional/optional-from-mapped-result.mjs


// prettier-ignore
function FromProperties(P, F) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = Optional(P[K2], F);
    return Acc;
}
// prettier-ignore
function FromMappedResult(R, F) {
    return FromProperties(R.properties, F);
}
// prettier-ignore
function OptionalFromMappedResult(R, F) {
    const P = FromMappedResult(R, F);
    return MappedResult(P);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/optional/optional.mjs





function RemoveOptional(schema) {
    return CreateType(Discard(schema, [OptionalKind]));
}
function AddOptional(schema) {
    return CreateType({ ...schema, [OptionalKind]: 'Optional' });
}
// prettier-ignore
function OptionalWithFlag(schema, F) {
    return (F === false
        ? RemoveOptional(schema)
        : AddOptional(schema));
}
/** `[Json]` Creates a Optional property */
function Optional(schema, enable) {
    const F = enable ?? true;
    return IsMappedResult(schema) ? OptionalFromMappedResult(schema, F) : OptionalWithFlag(schema, F);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/intersect/intersect-evaluated.mjs






// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function IsIntersectOptional(types) {
    return types.every(left => IsOptional(left));
}
// prettier-ignore
function RemoveOptionalFromType(type) {
    return (Discard(type, [OptionalKind]));
}
// prettier-ignore
function RemoveOptionalFromRest(types) {
    return types.map(left => IsOptional(left) ? RemoveOptionalFromType(left) : left);
}
// prettier-ignore
function ResolveIntersect(types, options) {
    return (IsIntersectOptional(types)
        ? Optional(IntersectCreate(RemoveOptionalFromRest(types), options))
        : IntersectCreate(RemoveOptionalFromRest(types), options));
}
/** `[Json]` Creates an evaluated Intersect type */
function IntersectEvaluated(types, options = {}) {
    if (types.length === 1)
        return CreateType(types[0], options);
    if (types.length === 0)
        return Never(options);
    if (types.some((schema) => IsTransform(schema)))
        throw new Error('Cannot intersect transform types');
    return ResolveIntersect(types, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/literal/literal.mjs


/** `[Json]` Creates a Literal type */
function Literal(value, options) {
    return CreateType({
        [Kind]: 'Literal',
        const: value,
        type: typeof value,
    }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/union/union-evaluated.mjs






// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function IsUnionOptional(types) {
    return types.some(type => IsOptional(type));
}
// prettier-ignore
function union_evaluated_RemoveOptionalFromRest(types) {
    return types.map(left => IsOptional(left) ? union_evaluated_RemoveOptionalFromType(left) : left);
}
// prettier-ignore
function union_evaluated_RemoveOptionalFromType(T) {
    return (Discard(T, [OptionalKind]));
}
// prettier-ignore
function ResolveUnion(types, options) {
    const isOptional = IsUnionOptional(types);
    return (isOptional
        ? Optional(UnionCreate(union_evaluated_RemoveOptionalFromRest(types), options))
        : UnionCreate(union_evaluated_RemoveOptionalFromRest(types), options));
}
/** `[Json]` Creates an evaluated Union type */
function UnionEvaluated(T, options) {
    // prettier-ignore
    return (T.length === 1 ? CreateType(T[0], options) :
        T.length === 0 ? Never(options) :
            ResolveUnion(T, options));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/error/error.mjs
/** The base Error type thrown for all TypeBox exceptions  */
class error_TypeBoxError extends Error {
    constructor(message) {
        super(message);
    }
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/template-literal/parse.mjs

// ------------------------------------------------------------------
// TemplateLiteralParserError
// ------------------------------------------------------------------
class TemplateLiteralParserError extends error_TypeBoxError {
}
// -------------------------------------------------------------------
// Unescape
//
// Unescape for these control characters specifically. Note that this
// function is only called on non union group content, and where we
// still want to allow the user to embed control characters in that
// content. For review.
// -------------------------------------------------------------------
// prettier-ignore
function Unescape(pattern) {
    return pattern
        .replace(/\\\$/g, '$')
        .replace(/\\\*/g, '*')
        .replace(/\\\^/g, '^')
        .replace(/\\\|/g, '|')
        .replace(/\\\(/g, '(')
        .replace(/\\\)/g, ')');
}
// -------------------------------------------------------------------
// Control Characters
// -------------------------------------------------------------------
function IsNonEscaped(pattern, index, char) {
    return pattern[index] === char && pattern.charCodeAt(index - 1) !== 92;
}
function IsOpenParen(pattern, index) {
    return IsNonEscaped(pattern, index, '(');
}
function IsCloseParen(pattern, index) {
    return IsNonEscaped(pattern, index, ')');
}
function IsSeparator(pattern, index) {
    return IsNonEscaped(pattern, index, '|');
}
// -------------------------------------------------------------------
// Control Groups
// -------------------------------------------------------------------
function IsGroup(pattern) {
    if (!(IsOpenParen(pattern, 0) && IsCloseParen(pattern, pattern.length - 1)))
        return false;
    let count = 0;
    for (let index = 0; index < pattern.length; index++) {
        if (IsOpenParen(pattern, index))
            count += 1;
        if (IsCloseParen(pattern, index))
            count -= 1;
        if (count === 0 && index !== pattern.length - 1)
            return false;
    }
    return true;
}
// prettier-ignore
function InGroup(pattern) {
    return pattern.slice(1, pattern.length - 1);
}
// prettier-ignore
function IsPrecedenceOr(pattern) {
    let count = 0;
    for (let index = 0; index < pattern.length; index++) {
        if (IsOpenParen(pattern, index))
            count += 1;
        if (IsCloseParen(pattern, index))
            count -= 1;
        if (IsSeparator(pattern, index) && count === 0)
            return true;
    }
    return false;
}
// prettier-ignore
function IsPrecedenceAnd(pattern) {
    for (let index = 0; index < pattern.length; index++) {
        if (IsOpenParen(pattern, index))
            return true;
    }
    return false;
}
// prettier-ignore
function Or(pattern) {
    let [count, start] = [0, 0];
    const expressions = [];
    for (let index = 0; index < pattern.length; index++) {
        if (IsOpenParen(pattern, index))
            count += 1;
        if (IsCloseParen(pattern, index))
            count -= 1;
        if (IsSeparator(pattern, index) && count === 0) {
            const range = pattern.slice(start, index);
            if (range.length > 0)
                expressions.push(TemplateLiteralParse(range));
            start = index + 1;
        }
    }
    const range = pattern.slice(start);
    if (range.length > 0)
        expressions.push(TemplateLiteralParse(range));
    if (expressions.length === 0)
        return { type: 'const', const: '' };
    if (expressions.length === 1)
        return expressions[0];
    return { type: 'or', expr: expressions };
}
// prettier-ignore
function And(pattern) {
    function Group(value, index) {
        if (!IsOpenParen(value, index))
            throw new TemplateLiteralParserError(`TemplateLiteralParser: Index must point to open parens`);
        let count = 0;
        for (let scan = index; scan < value.length; scan++) {
            if (IsOpenParen(value, scan))
                count += 1;
            if (IsCloseParen(value, scan))
                count -= 1;
            if (count === 0)
                return [index, scan];
        }
        throw new TemplateLiteralParserError(`TemplateLiteralParser: Unclosed group parens in expression`);
    }
    function Range(pattern, index) {
        for (let scan = index; scan < pattern.length; scan++) {
            if (IsOpenParen(pattern, scan))
                return [index, scan];
        }
        return [index, pattern.length];
    }
    const expressions = [];
    for (let index = 0; index < pattern.length; index++) {
        if (IsOpenParen(pattern, index)) {
            const [start, end] = Group(pattern, index);
            const range = pattern.slice(start, end + 1);
            expressions.push(TemplateLiteralParse(range));
            index = end;
        }
        else {
            const [start, end] = Range(pattern, index);
            const range = pattern.slice(start, end);
            if (range.length > 0)
                expressions.push(TemplateLiteralParse(range));
            index = end - 1;
        }
    }
    return ((expressions.length === 0) ? { type: 'const', const: '' } :
        (expressions.length === 1) ? expressions[0] :
            { type: 'and', expr: expressions });
}
// ------------------------------------------------------------------
// TemplateLiteralParse
// ------------------------------------------------------------------
/** Parses a pattern and returns an expression tree */
function TemplateLiteralParse(pattern) {
    // prettier-ignore
    return (IsGroup(pattern) ? TemplateLiteralParse(InGroup(pattern)) :
        IsPrecedenceOr(pattern) ? Or(pattern) :
            IsPrecedenceAnd(pattern) ? And(pattern) :
                { type: 'const', const: Unescape(pattern) });
}
// ------------------------------------------------------------------
// TemplateLiteralParseExact
// ------------------------------------------------------------------
/** Parses a pattern and strips forward and trailing ^ and $ */
function TemplateLiteralParseExact(pattern) {
    return TemplateLiteralParse(pattern.slice(1, pattern.length - 1));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/template-literal/finite.mjs


// ------------------------------------------------------------------
// TemplateLiteralFiniteError
// ------------------------------------------------------------------
class TemplateLiteralFiniteError extends error_TypeBoxError {
}
// ------------------------------------------------------------------
// IsTemplateLiteralFiniteCheck
// ------------------------------------------------------------------
// prettier-ignore
function IsNumberExpression(expression) {
    return (expression.type === 'or' &&
        expression.expr.length === 2 &&
        expression.expr[0].type === 'const' &&
        expression.expr[0].const === '0' &&
        expression.expr[1].type === 'const' &&
        expression.expr[1].const === '[1-9][0-9]*');
}
// prettier-ignore
function IsBooleanExpression(expression) {
    return (expression.type === 'or' &&
        expression.expr.length === 2 &&
        expression.expr[0].type === 'const' &&
        expression.expr[0].const === 'true' &&
        expression.expr[1].type === 'const' &&
        expression.expr[1].const === 'false');
}
// prettier-ignore
function IsStringExpression(expression) {
    return expression.type === 'const' && expression.const === '.*';
}
// ------------------------------------------------------------------
// IsTemplateLiteralExpressionFinite
// ------------------------------------------------------------------
// prettier-ignore
function IsTemplateLiteralExpressionFinite(expression) {
    return (IsNumberExpression(expression) || IsStringExpression(expression) ? false :
        IsBooleanExpression(expression) ? true :
            (expression.type === 'and') ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) :
                (expression.type === 'or') ? expression.expr.every((expr) => IsTemplateLiteralExpressionFinite(expr)) :
                    (expression.type === 'const') ? true :
                        (() => { throw new TemplateLiteralFiniteError(`Unknown expression type`); })());
}
/** Returns true if this TemplateLiteral resolves to a finite set of values */
function IsTemplateLiteralFinite(schema) {
    const expression = TemplateLiteralParseExact(schema.pattern);
    return IsTemplateLiteralExpressionFinite(expression);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/template-literal/generate.mjs



// ------------------------------------------------------------------
// TemplateLiteralGenerateError
// ------------------------------------------------------------------
class TemplateLiteralGenerateError extends error_TypeBoxError {
}
// ------------------------------------------------------------------
// TemplateLiteralExpressionGenerate
// ------------------------------------------------------------------
// prettier-ignore
function* GenerateReduce(buffer) {
    if (buffer.length === 1)
        return yield* buffer[0];
    for (const left of buffer[0]) {
        for (const right of GenerateReduce(buffer.slice(1))) {
            yield `${left}${right}`;
        }
    }
}
// prettier-ignore
function* GenerateAnd(expression) {
    return yield* GenerateReduce(expression.expr.map((expr) => [...TemplateLiteralExpressionGenerate(expr)]));
}
// prettier-ignore
function* GenerateOr(expression) {
    for (const expr of expression.expr)
        yield* TemplateLiteralExpressionGenerate(expr);
}
// prettier-ignore
function* GenerateConst(expression) {
    return yield expression.const;
}
function* TemplateLiteralExpressionGenerate(expression) {
    return expression.type === 'and'
        ? yield* GenerateAnd(expression)
        : expression.type === 'or'
            ? yield* GenerateOr(expression)
            : expression.type === 'const'
                ? yield* GenerateConst(expression)
                : (() => {
                    throw new TemplateLiteralGenerateError('Unknown expression');
                })();
}
/** Generates a tuple of strings from the given TemplateLiteral. Returns an empty tuple if infinite. */
function TemplateLiteralGenerate(schema) {
    const expression = TemplateLiteralParseExact(schema.pattern);
    // prettier-ignore
    return (IsTemplateLiteralExpressionFinite(expression)
        ? [...TemplateLiteralExpressionGenerate(expression)]
        : []);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-property-keys.mjs

// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function FromTemplateLiteral(templateLiteral) {
    const result = TemplateLiteralGenerate(templateLiteral);
    return result.map(S => S.toString());
}
// prettier-ignore
function indexed_property_keys_FromUnion(type) {
    const result = [];
    for (const left of type)
        result.push(...IndexPropertyKeys(left));
    return result;
}
// prettier-ignore
function FromLiteral(T) {
    return ([T.toString()] // TS 5.4 observes TLiteralValue as not having a toString()
    );
}
/** Returns a tuple of PropertyKeys derived from the given TSchema */
// prettier-ignore
function IndexPropertyKeys(type) {
    return [...new Set((IsTemplateLiteral(type) ? FromTemplateLiteral(type) :
            IsUnion(type) ? indexed_property_keys_FromUnion(type.anyOf) :
                IsLiteral(type) ? FromLiteral(type.const) :
                    kind_IsNumber(type) ? ['[number]'] :
                        kind_IsInteger(type) ? ['[number]'] :
                            []))];
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-from-mapped-key.mjs



// prettier-ignore
function MappedIndexPropertyKey(type, key, options) {
    return { [key]: Index(type, [key], Clone(options)) };
}
// prettier-ignore
function MappedIndexPropertyKeys(type, propertyKeys, options) {
    return propertyKeys.reduce((result, left) => {
        return { ...result, ...MappedIndexPropertyKey(type, left, options) };
    }, {});
}
// prettier-ignore
function MappedIndexProperties(type, mappedKey, options) {
    return MappedIndexPropertyKeys(type, mappedKey.keys, options);
}
// prettier-ignore
function IndexFromMappedKey(type, mappedKey, options) {
    const properties = MappedIndexProperties(type, mappedKey, options);
    return MappedResult(properties);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/indexed/indexed-from-mapped-result.mjs



// prettier-ignore
function indexed_from_mapped_result_FromProperties(type, properties, options) {
    const result = {};
    for (const K2 of Object.getOwnPropertyNames(properties)) {
        const keys = IndexPropertyKeys(properties[K2]);
        result[K2] = Index(type, keys, options);
    }
    return result;
}
// prettier-ignore
function indexed_from_mapped_result_FromMappedResult(type, mappedResult, options) {
    return indexed_from_mapped_result_FromProperties(type, mappedResult.properties, options);
}
// prettier-ignore
function IndexFromMappedResult(type, mappedResult, options) {
    const properties = indexed_from_mapped_result_FromMappedResult(type, mappedResult, options);
    return MappedResult(properties);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/indexed/indexed.mjs






// ------------------------------------------------------------------
// Infrastructure
// ------------------------------------------------------------------



// ------------------------------------------------------------------
// KindGuard
// ------------------------------------------------------------------


// prettier-ignore
function indexed_FromRest(types, key) {
    return types.map(left => IndexFromPropertyKey(left, key));
}
// prettier-ignore
function FromIntersectRest(types) {
    return types.filter(left => !IsNever(left));
}
// prettier-ignore
function indexed_FromIntersect(types, key) {
    return (IntersectEvaluated(FromIntersectRest(indexed_FromRest(types, key))));
}
// prettier-ignore
function FromUnionRest(types) {
    return (types.some(L => IsNever(L))
        ? []
        : types);
}
// prettier-ignore
function indexed_FromUnion(types, key) {
    return (UnionEvaluated(FromUnionRest(indexed_FromRest(types, key))));
}
// prettier-ignore
function FromTuple(types, key) {
    return (key === '[number]' ? UnionEvaluated(types) :
        key in types ? types[key] :
            Never());
}
// prettier-ignore
function FromArray(type, key) {
    // ... ?
    return (key === '[number]' ? type : Never());
}
// prettier-ignore
function FromProperty(properties, key) {
    return (key in properties ? properties[key] : Never());
}
// prettier-ignore
function IndexFromPropertyKey(type, key) {
    return (IsIntersect(type) ? indexed_FromIntersect(type.allOf, key) :
        IsUnion(type) ? indexed_FromUnion(type.anyOf, key) :
            IsTuple(type) ? FromTuple(type.items ?? [], key) :
                kind_IsArray(type) ? FromArray(type.items, key) :
                    kind_IsObject(type) ? FromProperty(type.properties, key) :
                        Never());
}
// prettier-ignore
function IndexFromPropertyKeys(type, propertyKeys) {
    return propertyKeys.map(left => IndexFromPropertyKey(type, left));
}
// prettier-ignore
function FromType(type, propertyKeys) {
    const result = IndexFromPropertyKeys(type, propertyKeys);
    return UnionEvaluated(result);
}
// prettier-ignore
function UnionFromPropertyKeys(propertyKeys) {
    const result = propertyKeys.reduce((result, key) => IsLiteralValue(key) ? [...result, Literal(key)] : result, []);
    return UnionEvaluated(result);
}
/** `[Json]` Returns an Indexed property type for the given keys */
// prettier-ignore
function Index(type, key, options) {
    const typeKey = value_IsArray(key) ? UnionFromPropertyKeys(key) : key;
    const propertyKeys = IsSchema(key) ? IndexPropertyKeys(key) : key;
    const isTypeRef = IsRef(type);
    const isKeyRef = IsRef(key);
    return (IsMappedResult(key) ? IndexFromMappedResult(type, key, options) :
        IsMappedKey(key) ? IndexFromMappedKey(type, key, options) :
            (isTypeRef && isKeyRef) ? Computed('Index', [type, typeKey], options) :
                (!isTypeRef && isKeyRef) ? Computed('Index', [type, typeKey], options) :
                    (isTypeRef && !isKeyRef) ? Computed('Index', [type, typeKey], options) :
                        CreateType(FromType(type, propertyKeys), options));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/sets/set.mjs
/** Returns true if element right is in the set of left */
// prettier-ignore
function SetIncludes(T, S) {
    return T.includes(S);
}
/** Returns true if left is a subset of right */
function SetIsSubset(T, S) {
    return T.every((L) => SetIncludes(S, L));
}
/** Returns a distinct set of elements */
function SetDistinct(T) {
    return [...new Set(T)];
}
/** Returns the Intersect of the given sets */
function SetIntersect(T, S) {
    return T.filter((L) => S.includes(L));
}
/** Returns the Union of the given sets */
function SetUnion(T, S) {
    return [...T, ...S];
}
/** Returns the Complement by omitting elements in T that are in S */
// prettier-ignore
function SetComplement(T, S) {
    return T.filter(L => !S.includes(L));
}
// prettier-ignore
function SetIntersectManyResolve(T, Init) {
    return T.reduce((Acc, L) => {
        return SetIntersect(Acc, L);
    }, Init);
}
// prettier-ignore
function SetIntersectMany(T) {
    return (T.length === 1
        ? T[0]
        // Use left to initialize the accumulator for resolve
        : T.length > 1
            ? SetIntersectManyResolve(T.slice(1), T[0])
            : []);
}
/** Returns the Union of multiple sets */
function SetUnionMany(T) {
    const Acc = [];
    for (const L of T)
        Acc.push(...L);
    return Acc;
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-property-keys.mjs

// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function keyof_property_keys_FromRest(types) {
    const result = [];
    for (const L of types)
        result.push(KeyOfPropertyKeys(L));
    return result;
}
// prettier-ignore
function keyof_property_keys_FromIntersect(types) {
    const propertyKeysArray = keyof_property_keys_FromRest(types);
    const propertyKeys = SetUnionMany(propertyKeysArray);
    return propertyKeys;
}
// prettier-ignore
function keyof_property_keys_FromUnion(types) {
    const propertyKeysArray = keyof_property_keys_FromRest(types);
    const propertyKeys = SetIntersectMany(propertyKeysArray);
    return propertyKeys;
}
// prettier-ignore
function keyof_property_keys_FromTuple(types) {
    return types.map((_, indexer) => indexer.toString());
}
// prettier-ignore
function keyof_property_keys_FromArray(_) {
    return (['[number]']);
}
// prettier-ignore
function keyof_property_keys_FromProperties(T) {
    return (globalThis.Object.getOwnPropertyNames(T));
}
// ------------------------------------------------------------------
// FromPatternProperties
// ------------------------------------------------------------------
// prettier-ignore
function FromPatternProperties(patternProperties) {
    if (!includePatternProperties)
        return [];
    const patternPropertyKeys = globalThis.Object.getOwnPropertyNames(patternProperties);
    return patternPropertyKeys.map(key => {
        return (key[0] === '^' && key[key.length - 1] === '$')
            ? key.slice(1, key.length - 1)
            : key;
    });
}
/** Returns a tuple of PropertyKeys derived from the given TSchema. */
// prettier-ignore
function KeyOfPropertyKeys(type) {
    return (IsIntersect(type) ? keyof_property_keys_FromIntersect(type.allOf) :
        IsUnion(type) ? keyof_property_keys_FromUnion(type.anyOf) :
            IsTuple(type) ? keyof_property_keys_FromTuple(type.items ?? []) :
                kind_IsArray(type) ? keyof_property_keys_FromArray(type.items) :
                    kind_IsObject(type) ? keyof_property_keys_FromProperties(type.properties) :
                        IsRecord(type) ? FromPatternProperties(type.patternProperties) :
                            []);
}
// ----------------------------------------------------------------
// KeyOfPattern
// ----------------------------------------------------------------
let includePatternProperties = false;
/** Returns a regular expression pattern derived from the given TSchema */
function KeyOfPattern(schema) {
    includePatternProperties = true;
    const keys = KeyOfPropertyKeys(schema);
    includePatternProperties = false;
    const pattern = keys.map((key) => `(${key})`);
    return `^(${pattern.join('|')})$`;
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/object/object.mjs


// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

function RequiredKeys(properties) {
    const keys = [];
    for (let key in properties) {
        if (!IsOptional(properties[key]))
            keys.push(key);
    }
    return keys;
}
/** `[Json]` Creates an Object type */
function _Object(properties, options) {
    const required = RequiredKeys(properties);
    const schematic = required.length > 0 ? { [Kind]: 'Object', type: 'object', properties, required } : { [Kind]: 'Object', type: 'object', properties };
    return CreateType(schematic, options);
}
/** `[Json]` Creates an Object type */
var object_Object = _Object;

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/composite/composite.mjs





// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function CompositeKeys(T) {
    const Acc = [];
    for (const L of T)
        Acc.push(...KeyOfPropertyKeys(L));
    return SetDistinct(Acc);
}
// prettier-ignore
function FilterNever(T) {
    return T.filter(L => !IsNever(L));
}
// prettier-ignore
function CompositeProperty(T, K) {
    const Acc = [];
    for (const L of T)
        Acc.push(...IndexFromPropertyKeys(L, [K]));
    return FilterNever(Acc);
}
// prettier-ignore
function CompositeProperties(T, K) {
    const Acc = {};
    for (const L of K) {
        Acc[L] = IntersectEvaluated(CompositeProperty(T, L));
    }
    return Acc;
}
// prettier-ignore
function Composite(T, options) {
    const K = CompositeKeys(T);
    const P = CompositeProperties(T, K);
    const R = object_Object(P, options);
    return R;
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/date/date.mjs


/** `[JavaScript]` Creates a Date type */
function date_Date(options) {
    return CreateType({ [Kind]: 'Date', type: 'Date' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/function/function.mjs


/** `[JavaScript]` Creates a Function type */
function function_Function(parameters, returns, options) {
    return CreateType({ [Kind]: 'Function', type: 'Function', parameters, returns }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/null/null.mjs


/** `[Json]` Creates a Null type */
function Null(options) {
    return CreateType({ [Kind]: 'Null', type: 'null' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/symbol/symbol.mjs


/** `[JavaScript]` Creates a Symbol type */
function symbol_Symbol(options) {
    return CreateType({ [Kind]: 'Symbol', type: 'symbol' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/tuple/tuple.mjs


/** `[Json]` Creates a Tuple type */
function Tuple(types, options) {
    // prettier-ignore
    return CreateType(types.length > 0 ?
        { [Kind]: 'Tuple', type: 'array', items: types, additionalItems: false, minItems: types.length, maxItems: types.length } :
        { [Kind]: 'Tuple', type: 'array', minItems: types.length, maxItems: types.length }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/readonly/readonly-from-mapped-result.mjs


// prettier-ignore
function readonly_from_mapped_result_FromProperties(K, F) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(K))
        Acc[K2] = Readonly(K[K2], F);
    return Acc;
}
// prettier-ignore
function readonly_from_mapped_result_FromMappedResult(R, F) {
    return readonly_from_mapped_result_FromProperties(R.properties, F);
}
// prettier-ignore
function ReadonlyFromMappedResult(R, F) {
    const P = readonly_from_mapped_result_FromMappedResult(R, F);
    return MappedResult(P);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/readonly/readonly.mjs





function RemoveReadonly(schema) {
    return CreateType(Discard(schema, [symbols_ReadonlyKind]));
}
function AddReadonly(schema) {
    return CreateType({ ...schema, [symbols_ReadonlyKind]: 'Readonly' });
}
// prettier-ignore
function ReadonlyWithFlag(schema, F) {
    return (F === false
        ? RemoveReadonly(schema)
        : AddReadonly(schema));
}
/** `[Json]` Creates a Readonly property */
function Readonly(schema, enable) {
    const F = enable ?? true;
    return IsMappedResult(schema) ? ReadonlyFromMappedResult(schema, F) : ReadonlyWithFlag(schema, F);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/undefined/undefined.mjs


/** `[JavaScript]` Creates a Undefined type */
function Undefined(options) {
    return CreateType({ [Kind]: 'Undefined', type: 'undefined' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/uint8array/uint8array.mjs


/** `[JavaScript]` Creates a Uint8Array type */
function uint8array_Uint8Array(options) {
    return CreateType({ [Kind]: 'Uint8Array', type: 'Uint8Array' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/unknown/unknown.mjs


/** `[Json]` Creates an Unknown type */
function Unknown(options) {
    return CreateType({ [Kind]: 'Unknown' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/const/const.mjs














// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------

// prettier-ignore
function const_FromArray(T) {
    return T.map(L => FromValue(L, false));
}
// prettier-ignore
function const_FromProperties(value) {
    const Acc = {};
    for (const K of globalThis.Object.getOwnPropertyNames(value))
        Acc[K] = Readonly(FromValue(value[K], false));
    return Acc;
}
function ConditionalReadonly(T, root) {
    return (root === true ? T : Readonly(T));
}
// prettier-ignore
function FromValue(value, root) {
    return (value_IsAsyncIterator(value) ? ConditionalReadonly(Any(), root) :
        value_IsIterator(value) ? ConditionalReadonly(Any(), root) :
            value_IsArray(value) ? Readonly(Tuple(const_FromArray(value))) :
                value_IsUint8Array(value) ? uint8array_Uint8Array() :
                    value_IsDate(value) ? date_Date() :
                        value_IsObject(value) ? ConditionalReadonly(object_Object(const_FromProperties(value)), root) :
                            value_IsFunction(value) ? ConditionalReadonly(function_Function([], Unknown()), root) :
                                value_IsUndefined(value) ? Undefined() :
                                    value_IsNull(value) ? Null() :
                                        value_IsSymbol(value) ? symbol_Symbol() :
                                            value_IsBigInt(value) ? bigint_BigInt() :
                                                value_IsNumber(value) ? Literal(value) :
                                                    value_IsBoolean(value) ? Literal(value) :
                                                        value_IsString(value) ? Literal(value) :
                                                            object_Object({}));
}
/** `[JavaScript]` Creates a readonly const type from the given value. */
function Const(T, options) {
    return CreateType(FromValue(T, true), options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/constructor/constructor.mjs


/** `[JavaScript]` Creates a Constructor type */
function Constructor(parameters, returns, options) {
    return CreateType({ [Kind]: 'Constructor', type: 'Constructor', parameters, returns }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/constructor-parameters/constructor-parameters.mjs

/** `[JavaScript]` Extracts the ConstructorParameters from the given Constructor type */
function ConstructorParameters(schema, options) {
    return Tuple(schema.parameters, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/enum/enum.mjs



// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------

/** `[Json]` Creates a Enum type */
function Enum(item, options) {
    if (value_IsUndefined(item))
        throw new Error('Enum undefined or empty');
    const values1 = globalThis.Object.getOwnPropertyNames(item)
        .filter((key) => isNaN(key))
        .map((key) => item[key]);
    const values2 = [...new Set(values1)];
    const anyOf = values2.map((value) => Literal(value));
    return Union(anyOf, { ...options, [symbols_Hint]: 'Enum' });
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/number/number.mjs


/** `[Json]` Creates a Number type */
function number_Number(options) {
    return CreateType({ [Kind]: 'Number', type: 'number' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/string/string.mjs


/** `[Json]` Creates a String type */
function string_String(options) {
    return CreateType({ [Kind]: 'String', type: 'string' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/template-literal/union.mjs



/** Returns a Union from the given TemplateLiteral */
function TemplateLiteralToUnion(schema) {
    const R = TemplateLiteralGenerate(schema);
    const L = R.map((S) => Literal(S));
    return UnionEvaluated(L);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/patterns/patterns.mjs
const PatternBoolean = '(true|false)';
const PatternNumber = '(0|[1-9][0-9]*)';
const PatternString = '(.*)';
const PatternNever = '(?!.*)';
const PatternBooleanExact = (/* unused pure expression or super */ null && (`^${PatternBoolean}$`));
const PatternNumberExact = `^${PatternNumber}$`;
const PatternStringExact = `^${PatternString}$`;
const PatternNeverExact = `^${PatternNever}$`;

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/guard/type.mjs



class TypeGuardUnknownTypeError extends (/* unused pure expression or super */ null && (TypeBoxError)) {
}
const KnownTypes = [
    'Any',
    'Array',
    'AsyncIterator',
    'BigInt',
    'Boolean',
    'Computed',
    'Constructor',
    'Date',
    'Enum',
    'Function',
    'Integer',
    'Intersect',
    'Iterator',
    'Literal',
    'MappedKey',
    'MappedResult',
    'Not',
    'Null',
    'Number',
    'Object',
    'Promise',
    'Record',
    'Ref',
    'RegExp',
    'String',
    'Symbol',
    'TemplateLiteral',
    'This',
    'Tuple',
    'Undefined',
    'Union',
    'Uint8Array',
    'Unknown',
    'Void',
];
function IsPattern(value) {
    try {
        new RegExp(value);
        return true;
    }
    catch {
        return false;
    }
}
function IsControlCharacterFree(value) {
    if (!value_IsString(value))
        return false;
    for (let i = 0; i < value.length; i++) {
        const code = value.charCodeAt(i);
        if ((code >= 7 && code <= 13) || code === 27 || code === 127) {
            return false;
        }
    }
    return true;
}
function IsAdditionalProperties(value) {
    return IsOptionalBoolean(value) || type_IsSchema(value);
}
function IsOptionalBigInt(value) {
    return value_IsUndefined(value) || value_IsBigInt(value);
}
function IsOptionalNumber(value) {
    return value_IsUndefined(value) || value_IsNumber(value);
}
function IsOptionalBoolean(value) {
    return value_IsUndefined(value) || value_IsBoolean(value);
}
function IsOptionalString(value) {
    return value_IsUndefined(value) || value_IsString(value);
}
function IsOptionalPattern(value) {
    return value_IsUndefined(value) || (value_IsString(value) && IsControlCharacterFree(value) && IsPattern(value));
}
function IsOptionalFormat(value) {
    return value_IsUndefined(value) || (value_IsString(value) && IsControlCharacterFree(value));
}
function IsOptionalSchema(value) {
    return value_IsUndefined(value) || type_IsSchema(value);
}
// ------------------------------------------------------------------
// Modifiers
// ------------------------------------------------------------------
/** Returns true if this value has a Readonly symbol */
function type_IsReadonly(value) {
    return ValueGuard.IsObject(value) && value[ReadonlyKind] === 'Readonly';
}
/** Returns true if this value has a Optional symbol */
function type_IsOptional(value) {
    return value_IsObject(value) && value[OptionalKind] === 'Optional';
}
// ------------------------------------------------------------------
// Types
// ------------------------------------------------------------------
/** Returns true if the given value is TAny */
function type_IsAny(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Any') &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TArray */
function type_IsArray(value) {
    return (type_IsKindOf(value, 'Array') &&
        value.type === 'array' &&
        IsOptionalString(value.$id) &&
        type_IsSchema(value.items) &&
        IsOptionalNumber(value.minItems) &&
        IsOptionalNumber(value.maxItems) &&
        IsOptionalBoolean(value.uniqueItems) &&
        IsOptionalSchema(value.contains) &&
        IsOptionalNumber(value.minContains) &&
        IsOptionalNumber(value.maxContains));
}
/** Returns true if the given value is TAsyncIterator */
function type_IsAsyncIterator(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'AsyncIterator') &&
        value.type === 'AsyncIterator' &&
        IsOptionalString(value.$id) &&
        type_IsSchema(value.items));
}
/** Returns true if the given value is TBigInt */
function type_IsBigInt(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'BigInt') &&
        value.type === 'bigint' &&
        IsOptionalString(value.$id) &&
        IsOptionalBigInt(value.exclusiveMaximum) &&
        IsOptionalBigInt(value.exclusiveMinimum) &&
        IsOptionalBigInt(value.maximum) &&
        IsOptionalBigInt(value.minimum) &&
        IsOptionalBigInt(value.multipleOf));
}
/** Returns true if the given value is TBoolean */
function type_IsBoolean(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Boolean') &&
        value.type === 'boolean' &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TComputed */
function type_IsComputed(value) {
    return type_IsKindOf(value, 'Computed') && type_IsString(value.target) && ValueGuard.IsArray(value.parameters) && value.parameters.every((schema) => type_IsSchema(schema));
}
/** Returns true if the given value is TConstructor */
function type_IsConstructor(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Constructor') &&
        value.type === 'Constructor' &&
        IsOptionalString(value.$id) &&
        value_IsArray(value.parameters) &&
        value.parameters.every(schema => type_IsSchema(schema)) &&
        type_IsSchema(value.returns));
}
/** Returns true if the given value is TDate */
function type_IsDate(value) {
    return (type_IsKindOf(value, 'Date') &&
        value.type === 'Date' &&
        IsOptionalString(value.$id) &&
        IsOptionalNumber(value.exclusiveMaximumTimestamp) &&
        IsOptionalNumber(value.exclusiveMinimumTimestamp) &&
        IsOptionalNumber(value.maximumTimestamp) &&
        IsOptionalNumber(value.minimumTimestamp) &&
        IsOptionalNumber(value.multipleOfTimestamp));
}
/** Returns true if the given value is TFunction */
function type_IsFunction(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Function') &&
        value.type === 'Function' &&
        IsOptionalString(value.$id) &&
        value_IsArray(value.parameters) &&
        value.parameters.every(schema => type_IsSchema(schema)) &&
        type_IsSchema(value.returns));
}
/** Returns true if the given value is TImport */
function type_IsImport(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Import') &&
        ValueGuard.HasPropertyKey(value, '$defs') &&
        ValueGuard.IsObject(value.$defs) &&
        type_IsProperties(value.$defs) &&
        ValueGuard.HasPropertyKey(value, '$ref') &&
        ValueGuard.IsString(value.$ref) &&
        value.$ref in value.$defs // required
    );
}
/** Returns true if the given value is TInteger */
function type_IsInteger(value) {
    return (type_IsKindOf(value, 'Integer') &&
        value.type === 'integer' &&
        IsOptionalString(value.$id) &&
        IsOptionalNumber(value.exclusiveMaximum) &&
        IsOptionalNumber(value.exclusiveMinimum) &&
        IsOptionalNumber(value.maximum) &&
        IsOptionalNumber(value.minimum) &&
        IsOptionalNumber(value.multipleOf));
}
/** Returns true if the given schema is TProperties */
function type_IsProperties(value) {
    // prettier-ignore
    return (value_IsObject(value) &&
        Object.entries(value).every(([key, schema]) => IsControlCharacterFree(key) && type_IsSchema(schema)));
}
/** Returns true if the given value is TIntersect */
function type_IsIntersect(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Intersect') &&
        (value_IsString(value.type) && value.type !== 'object' ? false : true) &&
        value_IsArray(value.allOf) &&
        value.allOf.every(schema => type_IsSchema(schema) && !type_IsTransform(schema)) &&
        IsOptionalString(value.type) &&
        (IsOptionalBoolean(value.unevaluatedProperties) || IsOptionalSchema(value.unevaluatedProperties)) &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TIterator */
function type_IsIterator(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Iterator') &&
        value.type === 'Iterator' &&
        IsOptionalString(value.$id) &&
        type_IsSchema(value.items));
}
/** Returns true if the given value is a TKind with the given name. */
function type_IsKindOf(value, kind) {
    return value_IsObject(value) && Kind in value && value[Kind] === kind;
}
/** Returns true if the given value is TLiteral<string> */
function type_IsLiteralString(value) {
    return type_IsLiteral(value) && value_IsString(value.const);
}
/** Returns true if the given value is TLiteral<number> */
function type_IsLiteralNumber(value) {
    return type_IsLiteral(value) && value_IsNumber(value.const);
}
/** Returns true if the given value is TLiteral<boolean> */
function type_IsLiteralBoolean(value) {
    return type_IsLiteral(value) && value_IsBoolean(value.const);
}
/** Returns true if the given value is TLiteral */
function type_IsLiteral(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Literal') &&
        IsOptionalString(value.$id) && type_IsLiteralValue(value.const));
}
/** Returns true if the given value is a TLiteralValue */
function type_IsLiteralValue(value) {
    return value_IsBoolean(value) || value_IsNumber(value) || value_IsString(value);
}
/** Returns true if the given value is a TMappedKey */
function type_IsMappedKey(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'MappedKey') &&
        value_IsArray(value.keys) &&
        value.keys.every(key => value_IsNumber(key) || value_IsString(key)));
}
/** Returns true if the given value is TMappedResult */
function type_IsMappedResult(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'MappedResult') &&
        type_IsProperties(value.properties));
}
/** Returns true if the given value is TNever */
function type_IsNever(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Never') &&
        value_IsObject(value.not) &&
        Object.getOwnPropertyNames(value.not).length === 0);
}
/** Returns true if the given value is TNot */
function type_IsNot(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Not') &&
        type_IsSchema(value.not));
}
/** Returns true if the given value is TNull */
function type_IsNull(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Null') &&
        value.type === 'null' &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TNumber */
function type_IsNumber(value) {
    return (type_IsKindOf(value, 'Number') &&
        value.type === 'number' &&
        IsOptionalString(value.$id) &&
        IsOptionalNumber(value.exclusiveMaximum) &&
        IsOptionalNumber(value.exclusiveMinimum) &&
        IsOptionalNumber(value.maximum) &&
        IsOptionalNumber(value.minimum) &&
        IsOptionalNumber(value.multipleOf));
}
/** Returns true if the given value is TObject */
function type_IsObject(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Object') &&
        value.type === 'object' &&
        IsOptionalString(value.$id) &&
        type_IsProperties(value.properties) &&
        IsAdditionalProperties(value.additionalProperties) &&
        IsOptionalNumber(value.minProperties) &&
        IsOptionalNumber(value.maxProperties));
}
/** Returns true if the given value is TPromise */
function type_IsPromise(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Promise') &&
        value.type === 'Promise' &&
        IsOptionalString(value.$id) &&
        type_IsSchema(value.item));
}
/** Returns true if the given value is TRecord */
function type_IsRecord(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Record') &&
        value.type === 'object' &&
        IsOptionalString(value.$id) &&
        IsAdditionalProperties(value.additionalProperties) &&
        value_IsObject(value.patternProperties) &&
        ((schema) => {
            const keys = Object.getOwnPropertyNames(schema.patternProperties);
            return (keys.length === 1 &&
                IsPattern(keys[0]) &&
                value_IsObject(schema.patternProperties) &&
                type_IsSchema(schema.patternProperties[keys[0]]));
        })(value));
}
/** Returns true if this value is TRecursive */
function type_IsRecursive(value) {
    return ValueGuard.IsObject(value) && Hint in value && value[Hint] === 'Recursive';
}
/** Returns true if the given value is TRef */
function type_IsRef(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Ref') &&
        IsOptionalString(value.$id) &&
        value_IsString(value.$ref));
}
/** Returns true if the given value is TRegExp */
function type_IsRegExp(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'RegExp') &&
        IsOptionalString(value.$id) &&
        value_IsString(value.source) &&
        value_IsString(value.flags) &&
        IsOptionalNumber(value.maxLength) &&
        IsOptionalNumber(value.minLength));
}
/** Returns true if the given value is TString */
function type_IsString(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'String') &&
        value.type === 'string' &&
        IsOptionalString(value.$id) &&
        IsOptionalNumber(value.minLength) &&
        IsOptionalNumber(value.maxLength) &&
        IsOptionalPattern(value.pattern) &&
        IsOptionalFormat(value.format));
}
/** Returns true if the given value is TSymbol */
function type_IsSymbol(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Symbol') &&
        value.type === 'symbol' &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TTemplateLiteral */
function type_IsTemplateLiteral(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'TemplateLiteral') &&
        value.type === 'string' &&
        value_IsString(value.pattern) &&
        value.pattern[0] === '^' &&
        value.pattern[value.pattern.length - 1] === '$');
}
/** Returns true if the given value is TThis */
function type_IsThis(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'This') &&
        IsOptionalString(value.$id) &&
        value_IsString(value.$ref));
}
/** Returns true of this value is TTransform */
function type_IsTransform(value) {
    return value_IsObject(value) && TransformKind in value;
}
/** Returns true if the given value is TTuple */
function type_IsTuple(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Tuple') &&
        value.type === 'array' &&
        IsOptionalString(value.$id) &&
        value_IsNumber(value.minItems) &&
        value_IsNumber(value.maxItems) &&
        value.minItems === value.maxItems &&
        (( // empty
        value_IsUndefined(value.items) &&
            value_IsUndefined(value.additionalItems) &&
            value.minItems === 0) || (value_IsArray(value.items) &&
            value.items.every(schema => type_IsSchema(schema)))));
}
/** Returns true if the given value is TUndefined */
function type_IsUndefined(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Undefined') &&
        value.type === 'undefined' &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TUnion<Literal<string | number>[]> */
function IsUnionLiteral(value) {
    return type_IsUnion(value) && value.anyOf.every((schema) => type_IsLiteralString(schema) || type_IsLiteralNumber(schema));
}
/** Returns true if the given value is TUnion */
function type_IsUnion(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Union') &&
        IsOptionalString(value.$id) &&
        value_IsObject(value) &&
        value_IsArray(value.anyOf) &&
        value.anyOf.every(schema => type_IsSchema(schema)));
}
/** Returns true if the given value is TUint8Array */
function type_IsUint8Array(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Uint8Array') &&
        value.type === 'Uint8Array' &&
        IsOptionalString(value.$id) &&
        IsOptionalNumber(value.minByteLength) &&
        IsOptionalNumber(value.maxByteLength));
}
/** Returns true if the given value is TUnknown */
function type_IsUnknown(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Unknown') &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is a raw TUnsafe */
function type_IsUnsafe(value) {
    return type_IsKindOf(value, 'Unsafe');
}
/** Returns true if the given value is TVoid */
function type_IsVoid(value) {
    // prettier-ignore
    return (type_IsKindOf(value, 'Void') &&
        value.type === 'void' &&
        IsOptionalString(value.$id));
}
/** Returns true if the given value is TKind */
function type_IsKind(value) {
    return value_IsObject(value) && Kind in value && value_IsString(value[Kind]) && !KnownTypes.includes(value[Kind]);
}
/** Returns true if the given value is TSchema */
function type_IsSchema(value) {
    // prettier-ignore
    return (value_IsObject(value)) && (type_IsAny(value) ||
        type_IsArray(value) ||
        type_IsBoolean(value) ||
        type_IsBigInt(value) ||
        type_IsAsyncIterator(value) ||
        type_IsConstructor(value) ||
        type_IsDate(value) ||
        type_IsFunction(value) ||
        type_IsInteger(value) ||
        type_IsIntersect(value) ||
        type_IsIterator(value) ||
        type_IsLiteral(value) ||
        type_IsMappedKey(value) ||
        type_IsMappedResult(value) ||
        type_IsNever(value) ||
        type_IsNot(value) ||
        type_IsNull(value) ||
        type_IsNumber(value) ||
        type_IsObject(value) ||
        type_IsPromise(value) ||
        type_IsRecord(value) ||
        type_IsRef(value) ||
        type_IsRegExp(value) ||
        type_IsString(value) ||
        type_IsSymbol(value) ||
        type_IsTemplateLiteral(value) ||
        type_IsThis(value) ||
        type_IsTuple(value) ||
        type_IsUndefined(value) ||
        type_IsUnion(value) ||
        type_IsUint8Array(value) ||
        type_IsUnknown(value) ||
        type_IsUnsafe(value) ||
        type_IsVoid(value) ||
        type_IsKind(value));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/extends/extends-check.mjs










class ExtendsResolverError extends error_TypeBoxError {
}
var ExtendsResult;
(function (ExtendsResult) {
    ExtendsResult[ExtendsResult["Union"] = 0] = "Union";
    ExtendsResult[ExtendsResult["True"] = 1] = "True";
    ExtendsResult[ExtendsResult["False"] = 2] = "False";
})(ExtendsResult || (ExtendsResult = {}));
// ------------------------------------------------------------------
// IntoBooleanResult
// ------------------------------------------------------------------
// prettier-ignore
function IntoBooleanResult(result) {
    return result === ExtendsResult.False ? result : ExtendsResult.True;
}
// ------------------------------------------------------------------
// Throw
// ------------------------------------------------------------------
// prettier-ignore
function Throw(message) {
    throw new ExtendsResolverError(message);
}
// ------------------------------------------------------------------
// StructuralRight
// ------------------------------------------------------------------
// prettier-ignore
function IsStructuralRight(right) {
    return (type_IsNever(right) ||
        type_IsIntersect(right) ||
        type_IsUnion(right) ||
        type_IsUnknown(right) ||
        type_IsAny(right));
}
// prettier-ignore
function StructuralRight(left, right) {
    return (type_IsNever(right) ? FromNeverRight(left, right) :
        type_IsIntersect(right) ? FromIntersectRight(left, right) :
            type_IsUnion(right) ? FromUnionRight(left, right) :
                type_IsUnknown(right) ? FromUnknownRight(left, right) :
                    type_IsAny(right) ? FromAnyRight(left, right) :
                        Throw('StructuralRight'));
}
// ------------------------------------------------------------------
// Any
// ------------------------------------------------------------------
// prettier-ignore
function FromAnyRight(left, right) {
    return ExtendsResult.True;
}
// prettier-ignore
function FromAny(left, right) {
    return (type_IsIntersect(right) ? FromIntersectRight(left, right) :
        (type_IsUnion(right) && right.anyOf.some((schema) => type_IsAny(schema) || type_IsUnknown(schema))) ? ExtendsResult.True :
            type_IsUnion(right) ? ExtendsResult.Union :
                type_IsUnknown(right) ? ExtendsResult.True :
                    type_IsAny(right) ? ExtendsResult.True :
                        ExtendsResult.Union);
}
// ------------------------------------------------------------------
// Array
// ------------------------------------------------------------------
// prettier-ignore
function FromArrayRight(left, right) {
    return (type_IsUnknown(left) ? ExtendsResult.False :
        type_IsAny(left) ? ExtendsResult.Union :
            type_IsNever(left) ? ExtendsResult.True :
                ExtendsResult.False);
}
// prettier-ignore
function extends_check_FromArray(left, right) {
    return (type_IsObject(right) && IsObjectArrayLike(right) ? ExtendsResult.True :
        IsStructuralRight(right) ? StructuralRight(left, right) :
            !type_IsArray(right) ? ExtendsResult.False :
                IntoBooleanResult(extends_check_Visit(left.items, right.items)));
}
// ------------------------------------------------------------------
// AsyncIterator
// ------------------------------------------------------------------
// prettier-ignore
function FromAsyncIterator(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        !type_IsAsyncIterator(right) ? ExtendsResult.False :
            IntoBooleanResult(extends_check_Visit(left.items, right.items)));
}
// ------------------------------------------------------------------
// BigInt
// ------------------------------------------------------------------
// prettier-ignore
function FromBigInt(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            type_IsRecord(right) ? FromRecordRight(left, right) :
                type_IsBigInt(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Boolean
// ------------------------------------------------------------------
// prettier-ignore
function FromBooleanRight(left, right) {
    return (type_IsLiteralBoolean(left) ? ExtendsResult.True :
        type_IsBoolean(left) ? ExtendsResult.True :
            ExtendsResult.False);
}
// prettier-ignore
function FromBoolean(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            type_IsRecord(right) ? FromRecordRight(left, right) :
                type_IsBoolean(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Constructor
// ------------------------------------------------------------------
// prettier-ignore
function FromConstructor(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            !type_IsConstructor(right) ? ExtendsResult.False :
                left.parameters.length > right.parameters.length ? ExtendsResult.False :
                    (!left.parameters.every((schema, index) => IntoBooleanResult(extends_check_Visit(right.parameters[index], schema)) === ExtendsResult.True)) ? ExtendsResult.False :
                        IntoBooleanResult(extends_check_Visit(left.returns, right.returns)));
}
// ------------------------------------------------------------------
// Date
// ------------------------------------------------------------------
// prettier-ignore
function FromDate(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            type_IsRecord(right) ? FromRecordRight(left, right) :
                type_IsDate(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Function
// ------------------------------------------------------------------
// prettier-ignore
function FromFunction(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            !type_IsFunction(right) ? ExtendsResult.False :
                left.parameters.length > right.parameters.length ? ExtendsResult.False :
                    (!left.parameters.every((schema, index) => IntoBooleanResult(extends_check_Visit(right.parameters[index], schema)) === ExtendsResult.True)) ? ExtendsResult.False :
                        IntoBooleanResult(extends_check_Visit(left.returns, right.returns)));
}
// ------------------------------------------------------------------
// Integer
// ------------------------------------------------------------------
// prettier-ignore
function FromIntegerRight(left, right) {
    return (type_IsLiteral(left) && value_IsNumber(left.const) ? ExtendsResult.True :
        type_IsNumber(left) || type_IsInteger(left) ? ExtendsResult.True :
            ExtendsResult.False);
}
// prettier-ignore
function FromInteger(left, right) {
    return (type_IsInteger(right) || type_IsNumber(right) ? ExtendsResult.True :
        IsStructuralRight(right) ? StructuralRight(left, right) :
            type_IsObject(right) ? FromObjectRight(left, right) :
                type_IsRecord(right) ? FromRecordRight(left, right) :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Intersect
// ------------------------------------------------------------------
// prettier-ignore
function FromIntersectRight(left, right) {
    return right.allOf.every((schema) => extends_check_Visit(left, schema) === ExtendsResult.True)
        ? ExtendsResult.True
        : ExtendsResult.False;
}
// prettier-ignore
function extends_check_FromIntersect(left, right) {
    return left.allOf.some((schema) => extends_check_Visit(schema, right) === ExtendsResult.True)
        ? ExtendsResult.True
        : ExtendsResult.False;
}
// ------------------------------------------------------------------
// Iterator
// ------------------------------------------------------------------
// prettier-ignore
function FromIterator(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        !type_IsIterator(right) ? ExtendsResult.False :
            IntoBooleanResult(extends_check_Visit(left.items, right.items)));
}
// ------------------------------------------------------------------
// Literal
// ------------------------------------------------------------------
// prettier-ignore
function extends_check_FromLiteral(left, right) {
    return (type_IsLiteral(right) && right.const === left.const ? ExtendsResult.True :
        IsStructuralRight(right) ? StructuralRight(left, right) :
            type_IsObject(right) ? FromObjectRight(left, right) :
                type_IsRecord(right) ? FromRecordRight(left, right) :
                    type_IsString(right) ? FromStringRight(left, right) :
                        type_IsNumber(right) ? FromNumberRight(left, right) :
                            type_IsInteger(right) ? FromIntegerRight(left, right) :
                                type_IsBoolean(right) ? FromBooleanRight(left, right) :
                                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Never
// ------------------------------------------------------------------
// prettier-ignore
function FromNeverRight(left, right) {
    return ExtendsResult.False;
}
// prettier-ignore
function FromNever(left, right) {
    return ExtendsResult.True;
}
// ------------------------------------------------------------------
// Not
// ------------------------------------------------------------------
// prettier-ignore
function UnwrapTNot(schema) {
    let [current, depth] = [schema, 0];
    while (true) {
        if (!type_IsNot(current))
            break;
        current = current.not;
        depth += 1;
    }
    return depth % 2 === 0 ? current : Unknown();
}
// prettier-ignore
function FromNot(left, right) {
    // TypeScript has no concept of negated types, and attempts to correctly check the negated
    // type at runtime would put TypeBox at odds with TypeScripts ability to statically infer
    // the type. Instead we unwrap to either unknown or T and continue evaluating.
    // prettier-ignore
    return (type_IsNot(left) ? extends_check_Visit(UnwrapTNot(left), right) :
        type_IsNot(right) ? extends_check_Visit(left, UnwrapTNot(right)) :
            Throw('Invalid fallthrough for Not'));
}
// ------------------------------------------------------------------
// Null
// ------------------------------------------------------------------
// prettier-ignore
function FromNull(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            type_IsRecord(right) ? FromRecordRight(left, right) :
                type_IsNull(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Number
// ------------------------------------------------------------------
// prettier-ignore
function FromNumberRight(left, right) {
    return (type_IsLiteralNumber(left) ? ExtendsResult.True :
        type_IsNumber(left) || type_IsInteger(left) ? ExtendsResult.True :
            ExtendsResult.False);
}
// prettier-ignore
function FromNumber(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            type_IsRecord(right) ? FromRecordRight(left, right) :
                type_IsInteger(right) || type_IsNumber(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Object
// ------------------------------------------------------------------
// prettier-ignore
function IsObjectPropertyCount(schema, count) {
    return Object.getOwnPropertyNames(schema.properties).length === count;
}
// prettier-ignore
function IsObjectStringLike(schema) {
    return IsObjectArrayLike(schema);
}
// prettier-ignore
function IsObjectSymbolLike(schema) {
    return IsObjectPropertyCount(schema, 0) || (IsObjectPropertyCount(schema, 1) && 'description' in schema.properties && type_IsUnion(schema.properties.description) && schema.properties.description.anyOf.length === 2 && ((type_IsString(schema.properties.description.anyOf[0]) &&
        type_IsUndefined(schema.properties.description.anyOf[1])) || (type_IsString(schema.properties.description.anyOf[1]) &&
        type_IsUndefined(schema.properties.description.anyOf[0]))));
}
// prettier-ignore
function IsObjectNumberLike(schema) {
    return IsObjectPropertyCount(schema, 0);
}
// prettier-ignore
function IsObjectBooleanLike(schema) {
    return IsObjectPropertyCount(schema, 0);
}
// prettier-ignore
function IsObjectBigIntLike(schema) {
    return IsObjectPropertyCount(schema, 0);
}
// prettier-ignore
function IsObjectDateLike(schema) {
    return IsObjectPropertyCount(schema, 0);
}
// prettier-ignore
function IsObjectUint8ArrayLike(schema) {
    return IsObjectArrayLike(schema);
}
// prettier-ignore
function IsObjectFunctionLike(schema) {
    const length = number_Number();
    return IsObjectPropertyCount(schema, 0) || (IsObjectPropertyCount(schema, 1) && 'length' in schema.properties && IntoBooleanResult(extends_check_Visit(schema.properties['length'], length)) === ExtendsResult.True);
}
// prettier-ignore
function IsObjectConstructorLike(schema) {
    return IsObjectPropertyCount(schema, 0);
}
// prettier-ignore
function IsObjectArrayLike(schema) {
    const length = number_Number();
    return IsObjectPropertyCount(schema, 0) || (IsObjectPropertyCount(schema, 1) && 'length' in schema.properties && IntoBooleanResult(extends_check_Visit(schema.properties['length'], length)) === ExtendsResult.True);
}
// prettier-ignore
function IsObjectPromiseLike(schema) {
    const then = function_Function([Any()], Any());
    return IsObjectPropertyCount(schema, 0) || (IsObjectPropertyCount(schema, 1) && 'then' in schema.properties && IntoBooleanResult(extends_check_Visit(schema.properties['then'], then)) === ExtendsResult.True);
}
// ------------------------------------------------------------------
// Property
// ------------------------------------------------------------------
// prettier-ignore
function Property(left, right) {
    return (extends_check_Visit(left, right) === ExtendsResult.False ? ExtendsResult.False :
        type_IsOptional(left) && !type_IsOptional(right) ? ExtendsResult.False :
            ExtendsResult.True);
}
// prettier-ignore
function FromObjectRight(left, right) {
    return (type_IsUnknown(left) ? ExtendsResult.False :
        type_IsAny(left) ? ExtendsResult.Union : (type_IsNever(left) ||
            (type_IsLiteralString(left) && IsObjectStringLike(right)) ||
            (type_IsLiteralNumber(left) && IsObjectNumberLike(right)) ||
            (type_IsLiteralBoolean(left) && IsObjectBooleanLike(right)) ||
            (type_IsSymbol(left) && IsObjectSymbolLike(right)) ||
            (type_IsBigInt(left) && IsObjectBigIntLike(right)) ||
            (type_IsString(left) && IsObjectStringLike(right)) ||
            (type_IsSymbol(left) && IsObjectSymbolLike(right)) ||
            (type_IsNumber(left) && IsObjectNumberLike(right)) ||
            (type_IsInteger(left) && IsObjectNumberLike(right)) ||
            (type_IsBoolean(left) && IsObjectBooleanLike(right)) ||
            (type_IsUint8Array(left) && IsObjectUint8ArrayLike(right)) ||
            (type_IsDate(left) && IsObjectDateLike(right)) ||
            (type_IsConstructor(left) && IsObjectConstructorLike(right)) ||
            (type_IsFunction(left) && IsObjectFunctionLike(right))) ? ExtendsResult.True :
            (type_IsRecord(left) && type_IsString(RecordKey(left))) ? (() => {
                // When expressing a Record with literal key values, the Record is converted into a Object with
                // the Hint assigned as `Record`. This is used to invert the extends logic.
                return right[symbols_Hint] === 'Record' ? ExtendsResult.True : ExtendsResult.False;
            })() :
                (type_IsRecord(left) && type_IsNumber(RecordKey(left))) ? (() => {
                    return IsObjectPropertyCount(right, 0) ? ExtendsResult.True : ExtendsResult.False;
                })() :
                    ExtendsResult.False);
}
// prettier-ignore
function FromObject(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsRecord(right) ? FromRecordRight(left, right) :
            !type_IsObject(right) ? ExtendsResult.False :
                (() => {
                    for (const key of Object.getOwnPropertyNames(right.properties)) {
                        if (!(key in left.properties) && !type_IsOptional(right.properties[key])) {
                            return ExtendsResult.False;
                        }
                        if (type_IsOptional(right.properties[key])) {
                            return ExtendsResult.True;
                        }
                        if (Property(left.properties[key], right.properties[key]) === ExtendsResult.False) {
                            return ExtendsResult.False;
                        }
                    }
                    return ExtendsResult.True;
                })());
}
// ------------------------------------------------------------------
// Promise
// ------------------------------------------------------------------
// prettier-ignore
function extends_check_FromPromise(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) && IsObjectPromiseLike(right) ? ExtendsResult.True :
            !type_IsPromise(right) ? ExtendsResult.False :
                IntoBooleanResult(extends_check_Visit(left.item, right.item)));
}
// ------------------------------------------------------------------
// Record
// ------------------------------------------------------------------
// prettier-ignore
function RecordKey(schema) {
    return (PatternNumberExact in schema.patternProperties ? number_Number() :
        PatternStringExact in schema.patternProperties ? string_String() :
            Throw('Unknown record key pattern'));
}
// prettier-ignore
function RecordValue(schema) {
    return (PatternNumberExact in schema.patternProperties ? schema.patternProperties[PatternNumberExact] :
        PatternStringExact in schema.patternProperties ? schema.patternProperties[PatternStringExact] :
            Throw('Unable to get record value schema'));
}
// prettier-ignore
function FromRecordRight(left, right) {
    const [Key, Value] = [RecordKey(right), RecordValue(right)];
    return ((type_IsLiteralString(left) && type_IsNumber(Key) && IntoBooleanResult(extends_check_Visit(left, Value)) === ExtendsResult.True) ? ExtendsResult.True :
        type_IsUint8Array(left) && type_IsNumber(Key) ? extends_check_Visit(left, Value) :
            type_IsString(left) && type_IsNumber(Key) ? extends_check_Visit(left, Value) :
                type_IsArray(left) && type_IsNumber(Key) ? extends_check_Visit(left, Value) :
                    type_IsObject(left) ? (() => {
                        for (const key of Object.getOwnPropertyNames(left.properties)) {
                            if (Property(Value, left.properties[key]) === ExtendsResult.False) {
                                return ExtendsResult.False;
                            }
                        }
                        return ExtendsResult.True;
                    })() :
                        ExtendsResult.False);
}
// prettier-ignore
function FromRecord(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            !type_IsRecord(right) ? ExtendsResult.False :
                extends_check_Visit(RecordValue(left), RecordValue(right)));
}
// ------------------------------------------------------------------
// RegExp
// ------------------------------------------------------------------
// prettier-ignore
function FromRegExp(left, right) {
    // Note: RegExp types evaluate as strings, not RegExp objects.
    // Here we remap either into string and continue evaluating.
    const L = type_IsRegExp(left) ? string_String() : left;
    const R = type_IsRegExp(right) ? string_String() : right;
    return extends_check_Visit(L, R);
}
// ------------------------------------------------------------------
// String
// ------------------------------------------------------------------
// prettier-ignore
function FromStringRight(left, right) {
    return (type_IsLiteral(left) && value_IsString(left.const) ? ExtendsResult.True :
        type_IsString(left) ? ExtendsResult.True :
            ExtendsResult.False);
}
// prettier-ignore
function FromString(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            type_IsRecord(right) ? FromRecordRight(left, right) :
                type_IsString(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Symbol
// ------------------------------------------------------------------
// prettier-ignore
function FromSymbol(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            type_IsRecord(right) ? FromRecordRight(left, right) :
                type_IsSymbol(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// TemplateLiteral
// ------------------------------------------------------------------
// prettier-ignore
function extends_check_FromTemplateLiteral(left, right) {
    // TemplateLiteral types are resolved to either unions for finite expressions or string
    // for infinite expressions. Here we call to TemplateLiteralResolver to resolve for
    // either type and continue evaluating.
    return (type_IsTemplateLiteral(left) ? extends_check_Visit(TemplateLiteralToUnion(left), right) :
        type_IsTemplateLiteral(right) ? extends_check_Visit(left, TemplateLiteralToUnion(right)) :
            Throw('Invalid fallthrough for TemplateLiteral'));
}
// ------------------------------------------------------------------
// Tuple
// ------------------------------------------------------------------
// prettier-ignore
function IsArrayOfTuple(left, right) {
    return (type_IsArray(right) &&
        left.items !== undefined &&
        left.items.every((schema) => extends_check_Visit(schema, right.items) === ExtendsResult.True));
}
// prettier-ignore
function FromTupleRight(left, right) {
    return (type_IsNever(left) ? ExtendsResult.True :
        type_IsUnknown(left) ? ExtendsResult.False :
            type_IsAny(left) ? ExtendsResult.Union :
                ExtendsResult.False);
}
// prettier-ignore
function extends_check_FromTuple(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) && IsObjectArrayLike(right) ? ExtendsResult.True :
            type_IsArray(right) && IsArrayOfTuple(left, right) ? ExtendsResult.True :
                !type_IsTuple(right) ? ExtendsResult.False :
                    (value_IsUndefined(left.items) && !value_IsUndefined(right.items)) || (!value_IsUndefined(left.items) && value_IsUndefined(right.items)) ? ExtendsResult.False :
                        (value_IsUndefined(left.items) && !value_IsUndefined(right.items)) ? ExtendsResult.True :
                            left.items.every((schema, index) => extends_check_Visit(schema, right.items[index]) === ExtendsResult.True) ? ExtendsResult.True :
                                ExtendsResult.False);
}
// ------------------------------------------------------------------
// Uint8Array
// ------------------------------------------------------------------
// prettier-ignore
function FromUint8Array(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            type_IsRecord(right) ? FromRecordRight(left, right) :
                type_IsUint8Array(right) ? ExtendsResult.True :
                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Undefined
// ------------------------------------------------------------------
// prettier-ignore
function FromUndefined(left, right) {
    return (IsStructuralRight(right) ? StructuralRight(left, right) :
        type_IsObject(right) ? FromObjectRight(left, right) :
            type_IsRecord(right) ? FromRecordRight(left, right) :
                type_IsVoid(right) ? FromVoidRight(left, right) :
                    type_IsUndefined(right) ? ExtendsResult.True :
                        ExtendsResult.False);
}
// ------------------------------------------------------------------
// Union
// ------------------------------------------------------------------
// prettier-ignore
function FromUnionRight(left, right) {
    return right.anyOf.some((schema) => extends_check_Visit(left, schema) === ExtendsResult.True)
        ? ExtendsResult.True
        : ExtendsResult.False;
}
// prettier-ignore
function extends_check_FromUnion(left, right) {
    return left.anyOf.every((schema) => extends_check_Visit(schema, right) === ExtendsResult.True)
        ? ExtendsResult.True
        : ExtendsResult.False;
}
// ------------------------------------------------------------------
// Unknown
// ------------------------------------------------------------------
// prettier-ignore
function FromUnknownRight(left, right) {
    return ExtendsResult.True;
}
// prettier-ignore
function FromUnknown(left, right) {
    return (type_IsNever(right) ? FromNeverRight(left, right) :
        type_IsIntersect(right) ? FromIntersectRight(left, right) :
            type_IsUnion(right) ? FromUnionRight(left, right) :
                type_IsAny(right) ? FromAnyRight(left, right) :
                    type_IsString(right) ? FromStringRight(left, right) :
                        type_IsNumber(right) ? FromNumberRight(left, right) :
                            type_IsInteger(right) ? FromIntegerRight(left, right) :
                                type_IsBoolean(right) ? FromBooleanRight(left, right) :
                                    type_IsArray(right) ? FromArrayRight(left, right) :
                                        type_IsTuple(right) ? FromTupleRight(left, right) :
                                            type_IsObject(right) ? FromObjectRight(left, right) :
                                                type_IsUnknown(right) ? ExtendsResult.True :
                                                    ExtendsResult.False);
}
// ------------------------------------------------------------------
// Void
// ------------------------------------------------------------------
// prettier-ignore
function FromVoidRight(left, right) {
    return (type_IsUndefined(left) ? ExtendsResult.True :
        type_IsUndefined(left) ? ExtendsResult.True :
            ExtendsResult.False);
}
// prettier-ignore
function FromVoid(left, right) {
    return (type_IsIntersect(right) ? FromIntersectRight(left, right) :
        type_IsUnion(right) ? FromUnionRight(left, right) :
            type_IsUnknown(right) ? FromUnknownRight(left, right) :
                type_IsAny(right) ? FromAnyRight(left, right) :
                    type_IsObject(right) ? FromObjectRight(left, right) :
                        type_IsVoid(right) ? ExtendsResult.True :
                            ExtendsResult.False);
}
// prettier-ignore
function extends_check_Visit(left, right) {
    return (
    // resolvable
    (type_IsTemplateLiteral(left) || type_IsTemplateLiteral(right)) ? extends_check_FromTemplateLiteral(left, right) :
        (type_IsRegExp(left) || type_IsRegExp(right)) ? FromRegExp(left, right) :
            (type_IsNot(left) || type_IsNot(right)) ? FromNot(left, right) :
                // standard
                type_IsAny(left) ? FromAny(left, right) :
                    type_IsArray(left) ? extends_check_FromArray(left, right) :
                        type_IsBigInt(left) ? FromBigInt(left, right) :
                            type_IsBoolean(left) ? FromBoolean(left, right) :
                                type_IsAsyncIterator(left) ? FromAsyncIterator(left, right) :
                                    type_IsConstructor(left) ? FromConstructor(left, right) :
                                        type_IsDate(left) ? FromDate(left, right) :
                                            type_IsFunction(left) ? FromFunction(left, right) :
                                                type_IsInteger(left) ? FromInteger(left, right) :
                                                    type_IsIntersect(left) ? extends_check_FromIntersect(left, right) :
                                                        type_IsIterator(left) ? FromIterator(left, right) :
                                                            type_IsLiteral(left) ? extends_check_FromLiteral(left, right) :
                                                                type_IsNever(left) ? FromNever(left, right) :
                                                                    type_IsNull(left) ? FromNull(left, right) :
                                                                        type_IsNumber(left) ? FromNumber(left, right) :
                                                                            type_IsObject(left) ? FromObject(left, right) :
                                                                                type_IsRecord(left) ? FromRecord(left, right) :
                                                                                    type_IsString(left) ? FromString(left, right) :
                                                                                        type_IsSymbol(left) ? FromSymbol(left, right) :
                                                                                            type_IsTuple(left) ? extends_check_FromTuple(left, right) :
                                                                                                type_IsPromise(left) ? extends_check_FromPromise(left, right) :
                                                                                                    type_IsUint8Array(left) ? FromUint8Array(left, right) :
                                                                                                        type_IsUndefined(left) ? FromUndefined(left, right) :
                                                                                                            type_IsUnion(left) ? extends_check_FromUnion(left, right) :
                                                                                                                type_IsUnknown(left) ? FromUnknown(left, right) :
                                                                                                                    type_IsVoid(left) ? FromVoid(left, right) :
                                                                                                                        Throw(`Unknown left type operand '${left[Kind]}'`));
}
function ExtendsCheck(left, right) {
    return extends_check_Visit(left, right);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/exclude/exclude-from-mapped-result.mjs


// prettier-ignore
function exclude_from_mapped_result_FromProperties(P, U) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = Exclude(P[K2], U);
    return Acc;
}
// prettier-ignore
function exclude_from_mapped_result_FromMappedResult(R, T) {
    return exclude_from_mapped_result_FromProperties(R.properties, T);
}
// prettier-ignore
function ExcludeFromMappedResult(R, T) {
    const P = exclude_from_mapped_result_FromMappedResult(R, T);
    return MappedResult(P);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/exclude/exclude-from-template-literal.mjs


function ExcludeFromTemplateLiteral(L, R) {
    return Exclude(TemplateLiteralToUnion(L), R);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/exclude/exclude.mjs






// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

function ExcludeRest(L, R) {
    const excluded = L.filter((inner) => ExtendsCheck(inner, R) === ExtendsResult.False);
    return excluded.length === 1 ? excluded[0] : Union(excluded);
}
/** `[Json]` Constructs a type by excluding from unionType all union members that are assignable to excludedMembers */
function Exclude(L, R, options = {}) {
    // overloads
    if (IsTemplateLiteral(L))
        return CreateType(ExcludeFromTemplateLiteral(L, R), options);
    if (IsMappedResult(L))
        return CreateType(ExcludeFromMappedResult(L, R), options);
    // prettier-ignore
    return CreateType(IsUnion(L) ? ExcludeRest(L.anyOf, R) :
        ExtendsCheck(L, R) !== ExtendsResult.False ? Never() : L, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/extends/extends-from-mapped-key.mjs




// prettier-ignore
function FromPropertyKey(K, U, L, R, options) {
    return {
        [K]: Extends(Literal(K), U, L, R, Clone(options))
    };
}
// prettier-ignore
function FromPropertyKeys(K, U, L, R, options) {
    return K.reduce((Acc, LK) => {
        return { ...Acc, ...FromPropertyKey(LK, U, L, R, options) };
    }, {});
}
// prettier-ignore
function FromMappedKey(K, U, L, R, options) {
    return FromPropertyKeys(K.keys, U, L, R, options);
}
// prettier-ignore
function ExtendsFromMappedKey(T, U, L, R, options) {
    const P = FromMappedKey(T, U, L, R, options);
    return MappedResult(P);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/extends/extends-from-mapped-result.mjs



// prettier-ignore
function extends_from_mapped_result_FromProperties(P, Right, True, False, options) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = Extends(P[K2], Right, True, False, Clone(options));
    return Acc;
}
// prettier-ignore
function extends_from_mapped_result_FromMappedResult(Left, Right, True, False, options) {
    return extends_from_mapped_result_FromProperties(Left.properties, Right, True, False, options);
}
// prettier-ignore
function ExtendsFromMappedResult(Left, Right, True, False, options) {
    const P = extends_from_mapped_result_FromMappedResult(Left, Right, True, False, options);
    return MappedResult(P);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/extends/extends.mjs





// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function ExtendsResolve(left, right, trueType, falseType) {
    const R = ExtendsCheck(left, right);
    return (R === ExtendsResult.Union ? Union([trueType, falseType]) :
        R === ExtendsResult.True ? trueType :
            falseType);
}
/** `[Json]` Creates a Conditional type */
function Extends(L, R, T, F, options) {
    // prettier-ignore
    return (IsMappedResult(L) ? ExtendsFromMappedResult(L, R, T, F, options) :
        IsMappedKey(L) ? CreateType(ExtendsFromMappedKey(L, R, T, F, options)) :
            CreateType(ExtendsResolve(L, R, T, F), options));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/extract/extract-from-mapped-result.mjs


// prettier-ignore
function extract_from_mapped_result_FromProperties(P, T) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = Extract(P[K2], T);
    return Acc;
}
// prettier-ignore
function extract_from_mapped_result_FromMappedResult(R, T) {
    return extract_from_mapped_result_FromProperties(R.properties, T);
}
// prettier-ignore
function ExtractFromMappedResult(R, T) {
    const P = extract_from_mapped_result_FromMappedResult(R, T);
    return MappedResult(P);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/extract/extract-from-template-literal.mjs


function ExtractFromTemplateLiteral(L, R) {
    return Extract(TemplateLiteralToUnion(L), R);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/extract/extract.mjs






// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

function ExtractRest(L, R) {
    const extracted = L.filter((inner) => ExtendsCheck(inner, R) !== ExtendsResult.False);
    return extracted.length === 1 ? extracted[0] : Union(extracted);
}
/** `[Json]` Constructs a type by extracting from type all union members that are assignable to union */
function Extract(L, R, options) {
    // overloads
    if (IsTemplateLiteral(L))
        return CreateType(ExtractFromTemplateLiteral(L, R), options);
    if (IsMappedResult(L))
        return CreateType(ExtractFromMappedResult(L, R), options);
    // prettier-ignore
    return CreateType(IsUnion(L) ? ExtractRest(L.anyOf, R) :
        ExtendsCheck(L, R) !== ExtendsResult.False ? L : Never(), options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/instance-type/instance-type.mjs

/** `[JavaScript]` Extracts the InstanceType from the given Constructor type */
function InstanceType(schema, options) {
    return CreateType(schema.returns, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/integer/integer.mjs


/** `[Json]` Creates an Integer type */
function Integer(options) {
    return CreateType({ [Kind]: 'Integer', type: 'integer' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/template-literal/syntax.mjs







// ------------------------------------------------------------------
// SyntaxParsers
// ------------------------------------------------------------------
// prettier-ignore
function* syntax_FromUnion(syntax) {
    const trim = syntax.trim().replace(/"|'/g, '');
    return (trim === 'boolean' ? yield boolean_Boolean() :
        trim === 'number' ? yield number_Number() :
            trim === 'bigint' ? yield bigint_BigInt() :
                trim === 'string' ? yield string_String() :
                    yield (() => {
                        const literals = trim.split('|').map((literal) => Literal(literal.trim()));
                        return (literals.length === 0 ? Never() :
                            literals.length === 1 ? literals[0] :
                                UnionEvaluated(literals));
                    })());
}
// prettier-ignore
function* FromTerminal(syntax) {
    if (syntax[1] !== '{') {
        const L = Literal('$');
        const R = FromSyntax(syntax.slice(1));
        return yield* [L, ...R];
    }
    for (let i = 2; i < syntax.length; i++) {
        if (syntax[i] === '}') {
            const L = syntax_FromUnion(syntax.slice(2, i));
            const R = FromSyntax(syntax.slice(i + 1));
            return yield* [...L, ...R];
        }
    }
    yield Literal(syntax);
}
// prettier-ignore
function* FromSyntax(syntax) {
    for (let i = 0; i < syntax.length; i++) {
        if (syntax[i] === '$') {
            const L = Literal(syntax.slice(0, i));
            const R = FromTerminal(syntax.slice(i));
            return yield* [L, ...R];
        }
    }
    yield Literal(syntax);
}
/** Parses TemplateLiteralSyntax and returns a tuple of TemplateLiteralKinds */
function TemplateLiteralSyntax(syntax) {
    return [...FromSyntax(syntax)];
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/template-literal/pattern.mjs



// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// TemplateLiteralPatternError
// ------------------------------------------------------------------
class TemplateLiteralPatternError extends error_TypeBoxError {
}
// ------------------------------------------------------------------
// TemplateLiteralPattern
// ------------------------------------------------------------------
function Escape(value) {
    return value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
// prettier-ignore
function pattern_Visit(schema, acc) {
    return (IsTemplateLiteral(schema) ? schema.pattern.slice(1, schema.pattern.length - 1) :
        IsUnion(schema) ? `(${schema.anyOf.map((schema) => pattern_Visit(schema, acc)).join('|')})` :
            kind_IsNumber(schema) ? `${acc}${PatternNumber}` :
                kind_IsInteger(schema) ? `${acc}${PatternNumber}` :
                    kind_IsBigInt(schema) ? `${acc}${PatternNumber}` :
                        kind_IsString(schema) ? `${acc}${PatternString}` :
                            IsLiteral(schema) ? `${acc}${Escape(schema.const.toString())}` :
                                kind_IsBoolean(schema) ? `${acc}${PatternBoolean}` :
                                    (() => { throw new TemplateLiteralPatternError(`Unexpected Kind '${schema[Kind]}'`); })());
}
function TemplateLiteralPattern(kinds) {
    return `^${kinds.map((schema) => pattern_Visit(schema, '')).join('')}\$`;
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/template-literal/template-literal.mjs





/** `[Json]` Creates a TemplateLiteral type */
// prettier-ignore
function TemplateLiteral(unresolved, options) {
    const pattern = value_IsString(unresolved)
        ? TemplateLiteralPattern(TemplateLiteralSyntax(unresolved))
        : TemplateLiteralPattern(unresolved);
    return CreateType({ [Kind]: 'TemplateLiteral', type: 'string', pattern }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/intrinsic/intrinsic-from-mapped-key.mjs




// prettier-ignore
function MappedIntrinsicPropertyKey(K, M, options) {
    return {
        [K]: Intrinsic(Literal(K), M, Clone(options))
    };
}
// prettier-ignore
function MappedIntrinsicPropertyKeys(K, M, options) {
    const result = K.reduce((Acc, L) => {
        return { ...Acc, ...MappedIntrinsicPropertyKey(L, M, options) };
    }, {});
    return result;
}
// prettier-ignore
function MappedIntrinsicProperties(T, M, options) {
    return MappedIntrinsicPropertyKeys(T['keys'], M, options);
}
// prettier-ignore
function IntrinsicFromMappedKey(T, M, options) {
    const P = MappedIntrinsicProperties(T, M, options);
    return MappedResult(P);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/intrinsic/intrinsic.mjs





// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// Apply
// ------------------------------------------------------------------
function ApplyUncapitalize(value) {
    const [first, rest] = [value.slice(0, 1), value.slice(1)];
    return [first.toLowerCase(), rest].join('');
}
function ApplyCapitalize(value) {
    const [first, rest] = [value.slice(0, 1), value.slice(1)];
    return [first.toUpperCase(), rest].join('');
}
function ApplyUppercase(value) {
    return value.toUpperCase();
}
function ApplyLowercase(value) {
    return value.toLowerCase();
}
function intrinsic_FromTemplateLiteral(schema, mode, options) {
    // note: template literals require special runtime handling as they are encoded in string patterns.
    // This diverges from the mapped type which would otherwise map on the template literal kind.
    const expression = TemplateLiteralParseExact(schema.pattern);
    const finite = IsTemplateLiteralExpressionFinite(expression);
    if (!finite)
        return { ...schema, pattern: FromLiteralValue(schema.pattern, mode) };
    const strings = [...TemplateLiteralExpressionGenerate(expression)];
    const literals = strings.map((value) => Literal(value));
    const mapped = intrinsic_FromRest(literals, mode);
    const union = Union(mapped);
    return TemplateLiteral([union], options);
}
// prettier-ignore
function FromLiteralValue(value, mode) {
    return (typeof value === 'string' ? (mode === 'Uncapitalize' ? ApplyUncapitalize(value) :
        mode === 'Capitalize' ? ApplyCapitalize(value) :
            mode === 'Uppercase' ? ApplyUppercase(value) :
                mode === 'Lowercase' ? ApplyLowercase(value) :
                    value) : value.toString());
}
// prettier-ignore
function intrinsic_FromRest(T, M) {
    return T.map(L => Intrinsic(L, M));
}
/** Applies an intrinsic string manipulation to the given type. */
function Intrinsic(schema, mode, options = {}) {
    // prettier-ignore
    return (
    // Intrinsic-Mapped-Inference
    IsMappedKey(schema) ? IntrinsicFromMappedKey(schema, mode, options) :
        // Standard-Inference
        IsTemplateLiteral(schema) ? intrinsic_FromTemplateLiteral(schema, mode, options) :
            IsUnion(schema) ? Union(intrinsic_FromRest(schema.anyOf, mode), options) :
                IsLiteral(schema) ? Literal(FromLiteralValue(schema.const, mode), options) :
                    // Default Type
                    CreateType(schema, options));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/intrinsic/capitalize.mjs

/** `[Json]` Intrinsic function to Capitalize LiteralString types */
function Capitalize(T, options = {}) {
    return Intrinsic(T, 'Capitalize', options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/intrinsic/uncapitalize.mjs

/** `[Json]` Intrinsic function to Uncapitalize LiteralString types */
function Uncapitalize(T, options = {}) {
    return Intrinsic(T, 'Uncapitalize', options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/intrinsic/lowercase.mjs

/** `[Json]` Intrinsic function to Lowercase LiteralString types */
function Lowercase(T, options = {}) {
    return Intrinsic(T, 'Lowercase', options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/intrinsic/uppercase.mjs

/** `[Json]` Intrinsic function to Uppercase LiteralString types */
function Uppercase(T, options = {}) {
    return Intrinsic(T, 'Uppercase', options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/iterator/iterator.mjs


/** `[JavaScript]` Creates an Iterator type */
function Iterator(items, options) {
    return CreateType({ [Kind]: 'Iterator', type: 'Iterator', items }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-from-mapped-result.mjs



// prettier-ignore
function keyof_from_mapped_result_FromProperties(properties, options) {
    const result = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(properties))
        result[K2] = KeyOf(properties[K2], Clone(options));
    return result;
}
// prettier-ignore
function keyof_from_mapped_result_FromMappedResult(mappedResult, options) {
    return keyof_from_mapped_result_FromProperties(mappedResult.properties, options);
}
// prettier-ignore
function KeyOfFromMappedResult(mappedResult, options) {
    const properties = keyof_from_mapped_result_FromMappedResult(mappedResult, options);
    return MappedResult(properties);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/keyof/keyof.mjs








// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function keyof_FromComputed(target, parameters) {
    return Computed('KeyOf', [Computed(target, parameters)]);
}
// prettier-ignore
function keyof_FromRef($ref) {
    return Computed('KeyOf', [Ref($ref)]);
}
// prettier-ignore
function KeyOfFromType(type, options) {
    const propertyKeys = KeyOfPropertyKeys(type);
    const propertyKeyTypes = KeyOfPropertyKeysToRest(propertyKeys);
    const result = UnionEvaluated(propertyKeyTypes);
    return CreateType(result, options);
}
// prettier-ignore
function KeyOfPropertyKeysToRest(propertyKeys) {
    return propertyKeys.map(L => L === '[number]' ? number_Number() : Literal(L));
}
/** `[Json]` Creates a KeyOf type */
function KeyOf(type, options) {
    return (IsComputed(type) ? keyof_FromComputed(type.target, type.parameters) : IsRef(type) ? keyof_FromRef(type.$ref) : IsMappedResult(type) ? KeyOfFromMappedResult(type, options) : KeyOfFromType(type, options));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/promise/promise.mjs


/** `[JavaScript]` Creates a Promise type */
function promise_Promise(item, options) {
    return CreateType({ [Kind]: 'Promise', type: 'Promise', item }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/mapped/mapped.mjs


// evaluation types














// operator

// mapping types

// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function mapped_FromMappedResult(K, P) {
    return (K in P
        ? FromSchemaType(K, P[K])
        : MappedResult(P));
}
// prettier-ignore
function MappedKeyToKnownMappedResultProperties(K) {
    return { [K]: Literal(K) };
}
// prettier-ignore
function MappedKeyToUnknownMappedResultProperties(P) {
    const Acc = {};
    for (const L of P)
        Acc[L] = Literal(L);
    return Acc;
}
// prettier-ignore
function MappedKeyToMappedResultProperties(K, P) {
    return (SetIncludes(P, K)
        ? MappedKeyToKnownMappedResultProperties(K)
        : MappedKeyToUnknownMappedResultProperties(P));
}
// prettier-ignore
function mapped_FromMappedKey(K, P) {
    const R = MappedKeyToMappedResultProperties(K, P);
    return mapped_FromMappedResult(K, R);
}
// prettier-ignore
function mapped_FromRest(K, T) {
    return T.map(L => FromSchemaType(K, L));
}
// prettier-ignore
function mapped_FromProperties(K, T) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(T))
        Acc[K2] = FromSchemaType(K, T[K2]);
    return Acc;
}
// prettier-ignore
function FromSchemaType(K, T) {
    // required to retain user defined options for mapped type
    const options = { ...T };
    return (
    // unevaluated modifier types
    IsOptional(T) ? Optional(FromSchemaType(K, Discard(T, [OptionalKind]))) :
        IsReadonly(T) ? Readonly(FromSchemaType(K, Discard(T, [symbols_ReadonlyKind]))) :
            // unevaluated mapped types
            IsMappedResult(T) ? mapped_FromMappedResult(K, T.properties) :
                IsMappedKey(T) ? mapped_FromMappedKey(K, T.keys) :
                    // unevaluated types
                    IsConstructor(T) ? Constructor(mapped_FromRest(K, T.parameters), FromSchemaType(K, T.returns), options) :
                        kind_IsFunction(T) ? function_Function(mapped_FromRest(K, T.parameters), FromSchemaType(K, T.returns), options) :
                            kind_IsAsyncIterator(T) ? AsyncIterator(FromSchemaType(K, T.items), options) :
                                kind_IsIterator(T) ? Iterator(FromSchemaType(K, T.items), options) :
                                    IsIntersect(T) ? Intersect(mapped_FromRest(K, T.allOf), options) :
                                        IsUnion(T) ? Union(mapped_FromRest(K, T.anyOf), options) :
                                            IsTuple(T) ? Tuple(mapped_FromRest(K, T.items ?? []), options) :
                                                kind_IsObject(T) ? object_Object(mapped_FromProperties(K, T.properties), options) :
                                                    kind_IsArray(T) ? array_Array(FromSchemaType(K, T.items), options) :
                                                        kind_IsPromise(T) ? promise_Promise(FromSchemaType(K, T.item), options) :
                                                            T);
}
// prettier-ignore
function MappedFunctionReturnType(K, T) {
    const Acc = {};
    for (const L of K)
        Acc[L] = FromSchemaType(L, T);
    return Acc;
}
/** `[Json]` Creates a Mapped object type */
function Mapped(key, map, options) {
    const K = IsSchema(key) ? IndexPropertyKeys(key) : key;
    const RT = map({ [Kind]: 'MappedKey', keys: K });
    const R = MappedFunctionReturnType(K, RT);
    return object_Object(R, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/omit/omit-from-mapped-key.mjs



// prettier-ignore
function omit_from_mapped_key_FromPropertyKey(type, key, options) {
    return { [key]: Omit(type, [key], Clone(options)) };
}
// prettier-ignore
function omit_from_mapped_key_FromPropertyKeys(type, propertyKeys, options) {
    return propertyKeys.reduce((Acc, LK) => {
        return { ...Acc, ...omit_from_mapped_key_FromPropertyKey(type, LK, options) };
    }, {});
}
// prettier-ignore
function omit_from_mapped_key_FromMappedKey(type, mappedKey, options) {
    return omit_from_mapped_key_FromPropertyKeys(type, mappedKey.keys, options);
}
// prettier-ignore
function OmitFromMappedKey(type, mappedKey, options) {
    const properties = omit_from_mapped_key_FromMappedKey(type, mappedKey, options);
    return MappedResult(properties);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/omit/omit-from-mapped-result.mjs



// prettier-ignore
function omit_from_mapped_result_FromProperties(properties, propertyKeys, options) {
    const result = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(properties))
        result[K2] = Omit(properties[K2], propertyKeys, Clone(options));
    return result;
}
// prettier-ignore
function omit_from_mapped_result_FromMappedResult(mappedResult, propertyKeys, options) {
    return omit_from_mapped_result_FromProperties(mappedResult.properties, propertyKeys, options);
}
// prettier-ignore
function OmitFromMappedResult(mappedResult, propertyKeys, options) {
    const properties = omit_from_mapped_result_FromMappedResult(mappedResult, propertyKeys, options);
    return MappedResult(properties);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/omit/omit.mjs









// ------------------------------------------------------------------
// Mapped
// ------------------------------------------------------------------


// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------


// prettier-ignore
function omit_FromIntersect(types, propertyKeys) {
    return types.map((type) => OmitResolve(type, propertyKeys));
}
// prettier-ignore
function omit_FromUnion(types, propertyKeys) {
    return types.map((type) => OmitResolve(type, propertyKeys));
}
// ------------------------------------------------------------------
// FromProperty
// ------------------------------------------------------------------
// prettier-ignore
function omit_FromProperty(properties, key) {
    const { [key]: _, ...R } = properties;
    return R;
}
// prettier-ignore
function omit_FromProperties(properties, propertyKeys) {
    return propertyKeys.reduce((T, K2) => omit_FromProperty(T, K2), properties);
}
// prettier-ignore
function omit_FromObject(properties, propertyKeys) {
    const options = Discard(properties, [TransformKind, '$id', 'required', 'properties']);
    const omittedProperties = omit_FromProperties(properties['properties'], propertyKeys);
    return object_Object(omittedProperties, options);
}
// prettier-ignore
function omit_UnionFromPropertyKeys(propertyKeys) {
    const result = propertyKeys.reduce((result, key) => IsLiteralValue(key) ? [...result, Literal(key)] : result, []);
    return Union(result);
}
// prettier-ignore
function OmitResolve(properties, propertyKeys) {
    return (IsIntersect(properties) ? Intersect(omit_FromIntersect(properties.allOf, propertyKeys)) :
        IsUnion(properties) ? Union(omit_FromUnion(properties.anyOf, propertyKeys)) :
            kind_IsObject(properties) ? omit_FromObject(properties, propertyKeys) :
                object_Object({}));
}
/** `[Json]` Constructs a type whose keys are picked from the given type */
// prettier-ignore
function Omit(type, key, options) {
    const typeKey = value_IsArray(key) ? omit_UnionFromPropertyKeys(key) : key;
    const propertyKeys = IsSchema(key) ? IndexPropertyKeys(key) : key;
    const isTypeRef = IsRef(type);
    const isKeyRef = IsRef(key);
    return (IsMappedResult(type) ? OmitFromMappedResult(type, propertyKeys, options) :
        IsMappedKey(key) ? OmitFromMappedKey(type, key, options) :
            (isTypeRef && isKeyRef) ? Computed('Omit', [type, typeKey], options) :
                (!isTypeRef && isKeyRef) ? Computed('Omit', [type, typeKey], options) :
                    (isTypeRef && !isKeyRef) ? Computed('Omit', [type, typeKey], options) :
                        CreateType({ ...OmitResolve(type, propertyKeys), ...options }));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/pick/pick-from-mapped-key.mjs



// prettier-ignore
function pick_from_mapped_key_FromPropertyKey(type, key, options) {
    return {
        [key]: Pick(type, [key], Clone(options))
    };
}
// prettier-ignore
function pick_from_mapped_key_FromPropertyKeys(type, propertyKeys, options) {
    return propertyKeys.reduce((result, leftKey) => {
        return { ...result, ...pick_from_mapped_key_FromPropertyKey(type, leftKey, options) };
    }, {});
}
// prettier-ignore
function pick_from_mapped_key_FromMappedKey(type, mappedKey, options) {
    return pick_from_mapped_key_FromPropertyKeys(type, mappedKey.keys, options);
}
// prettier-ignore
function PickFromMappedKey(type, mappedKey, options) {
    const properties = pick_from_mapped_key_FromMappedKey(type, mappedKey, options);
    return MappedResult(properties);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/pick/pick-from-mapped-result.mjs



// prettier-ignore
function pick_from_mapped_result_FromProperties(properties, propertyKeys, options) {
    const result = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(properties))
        result[K2] = Pick(properties[K2], propertyKeys, Clone(options));
    return result;
}
// prettier-ignore
function pick_from_mapped_result_FromMappedResult(mappedResult, propertyKeys, options) {
    return pick_from_mapped_result_FromProperties(mappedResult.properties, propertyKeys, options);
}
// prettier-ignore
function PickFromMappedResult(mappedResult, propertyKeys, options) {
    const properties = pick_from_mapped_result_FromMappedResult(mappedResult, propertyKeys, options);
    return MappedResult(properties);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/pick/pick.mjs









// ------------------------------------------------------------------
// Guards
// ------------------------------------------------------------------


// ------------------------------------------------------------------
// Infrastructure
// ------------------------------------------------------------------


function pick_FromIntersect(types, propertyKeys) {
    return types.map((type) => PickResolve(type, propertyKeys));
}
// prettier-ignore
function pick_FromUnion(types, propertyKeys) {
    return types.map((type) => PickResolve(type, propertyKeys));
}
// prettier-ignore
function pick_FromProperties(properties, propertyKeys) {
    const result = {};
    for (const K2 of propertyKeys)
        if (K2 in properties)
            result[K2] = properties[K2];
    return result;
}
// prettier-ignore
function pick_FromObject(T, K) {
    const options = Discard(T, [TransformKind, '$id', 'required', 'properties']);
    const properties = pick_FromProperties(T['properties'], K);
    return object_Object(properties, options);
}
// prettier-ignore
function pick_UnionFromPropertyKeys(propertyKeys) {
    const result = propertyKeys.reduce((result, key) => IsLiteralValue(key) ? [...result, Literal(key)] : result, []);
    return Union(result);
}
// prettier-ignore
function PickResolve(properties, propertyKeys) {
    return (IsIntersect(properties) ? Intersect(pick_FromIntersect(properties.allOf, propertyKeys)) :
        IsUnion(properties) ? Union(pick_FromUnion(properties.anyOf, propertyKeys)) :
            kind_IsObject(properties) ? pick_FromObject(properties, propertyKeys) :
                object_Object({}));
}
/** `[Json]` Constructs a type whose keys are picked from the given type */
// prettier-ignore
function Pick(type, key, options) {
    const typeKey = value_IsArray(key) ? pick_UnionFromPropertyKeys(key) : key;
    const propertyKeys = IsSchema(key) ? IndexPropertyKeys(key) : key;
    const isTypeRef = IsRef(type);
    const isKeyRef = IsRef(key);
    return (IsMappedResult(type) ? PickFromMappedResult(type, propertyKeys, options) :
        IsMappedKey(key) ? PickFromMappedKey(type, key, options) :
            (isTypeRef && isKeyRef) ? Computed('Pick', [type, typeKey], options) :
                (!isTypeRef && isKeyRef) ? Computed('Pick', [type, typeKey], options) :
                    (isTypeRef && !isKeyRef) ? Computed('Pick', [type, typeKey], options) :
                        CreateType({ ...PickResolve(type, propertyKeys), ...options }));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/partial/partial-from-mapped-result.mjs



// prettier-ignore
function partial_from_mapped_result_FromProperties(K, options) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(K))
        Acc[K2] = Partial(K[K2], Clone(options));
    return Acc;
}
// prettier-ignore
function partial_from_mapped_result_FromMappedResult(R, options) {
    return partial_from_mapped_result_FromProperties(R.properties, options);
}
// prettier-ignore
function PartialFromMappedResult(R, options) {
    const P = partial_from_mapped_result_FromMappedResult(R, options);
    return MappedResult(P);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/partial/partial.mjs










// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function partial_FromComputed(target, parameters) {
    return Computed('Partial', [Computed(target, parameters)]);
}
// prettier-ignore
function partial_FromRef($ref) {
    return Computed('Partial', [Ref($ref)]);
}
// prettier-ignore
function partial_FromProperties(properties) {
    const partialProperties = {};
    for (const K of globalThis.Object.getOwnPropertyNames(properties))
        partialProperties[K] = Optional(properties[K]);
    return partialProperties;
}
// prettier-ignore
function partial_FromObject(T) {
    const options = Discard(T, [TransformKind, '$id', 'required', 'properties']);
    const properties = partial_FromProperties(T['properties']);
    return object_Object(properties, options);
}
// prettier-ignore
function partial_FromRest(types) {
    return types.map(type => PartialResolve(type));
}
// ------------------------------------------------------------------
// PartialResolve
// ------------------------------------------------------------------
// prettier-ignore
function PartialResolve(type) {
    return (IsComputed(type) ? partial_FromComputed(type.target, type.parameters) :
        IsRef(type) ? partial_FromRef(type.$ref) :
            IsIntersect(type) ? Intersect(partial_FromRest(type.allOf)) :
                IsUnion(type) ? Union(partial_FromRest(type.anyOf)) :
                    kind_IsObject(type) ? partial_FromObject(type) :
                        object_Object({}));
}
/** `[Json]` Constructs a type where all properties are optional */
function Partial(type, options) {
    if (IsMappedResult(type)) {
        return PartialFromMappedResult(type, options);
    }
    else {
        // special: mapping types require overridable options
        return CreateType({ ...PartialResolve(type), ...options });
    }
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/record/record.mjs









// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// RecordCreateFromPattern
// ------------------------------------------------------------------
// prettier-ignore
function RecordCreateFromPattern(pattern, T, options) {
    return CreateType({
        [Kind]: 'Record',
        type: 'object',
        patternProperties: { [pattern]: T }
    }, options);
}
// ------------------------------------------------------------------
// RecordCreateFromKeys
// ------------------------------------------------------------------
// prettier-ignore
function RecordCreateFromKeys(K, T, options) {
    const Acc = {};
    for (const K2 of K)
        Acc[K2] = T;
    return object_Object(Acc, { ...options, [symbols_Hint]: 'Record' });
}
// prettier-ignore
function FromTemplateLiteralKey(K, T, options) {
    return (IsTemplateLiteralFinite(K)
        ? RecordCreateFromKeys(IndexPropertyKeys(K), T, options)
        : RecordCreateFromPattern(K.pattern, T, options));
}
// prettier-ignore
function FromUnionKey(K, T, options) {
    return RecordCreateFromKeys(IndexPropertyKeys(Union(K)), T, options);
}
// prettier-ignore
function FromLiteralKey(K, T, options) {
    return RecordCreateFromKeys([K.toString()], T, options);
}
// prettier-ignore
function FromRegExpKey(K, T, options) {
    return RecordCreateFromPattern(K.source, T, options);
}
// prettier-ignore
function FromStringKey(K, T, options) {
    const pattern = value_IsUndefined(K.pattern) ? PatternStringExact : K.pattern;
    return RecordCreateFromPattern(pattern, T, options);
}
// prettier-ignore
function FromAnyKey(K, T, options) {
    return RecordCreateFromPattern(PatternStringExact, T, options);
}
// prettier-ignore
function FromNeverKey(K, T, options) {
    return RecordCreateFromPattern(PatternNeverExact, T, options);
}
// prettier-ignore
function FromIntegerKey(_, T, options) {
    return RecordCreateFromPattern(PatternNumberExact, T, options);
}
// prettier-ignore
function FromNumberKey(_, T, options) {
    return RecordCreateFromPattern(PatternNumberExact, T, options);
}
// ------------------------------------------------------------------
// TRecordOrObject
// ------------------------------------------------------------------
/** `[Json]` Creates a Record type */
function Record(key, type, options = {}) {
    // prettier-ignore
    return (IsRef(type) ? Computed('Record', [key, type]) :
        IsRef(key) ? Computed('Record', [key, type]) :
            IsUnion(key) ? FromUnionKey(key.anyOf, type, options) :
                IsTemplateLiteral(key) ? FromTemplateLiteralKey(key, type, options) :
                    IsLiteral(key) ? FromLiteralKey(key.const, type, options) :
                        kind_IsInteger(key) ? FromIntegerKey(key, type, options) :
                            kind_IsNumber(key) ? FromNumberKey(key, type, options) :
                                kind_IsRegExp(key) ? FromRegExpKey(key, type, options) :
                                    kind_IsString(key) ? FromStringKey(key, type, options) :
                                        IsAny(key) ? FromAnyKey(key, type, options) :
                                            IsNever(key) ? FromNeverKey(key, type, options) :
                                                Never(options));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/required/required-from-mapped-result.mjs


// prettier-ignore
function required_from_mapped_result_FromProperties(P, options) {
    const Acc = {};
    for (const K2 of globalThis.Object.getOwnPropertyNames(P))
        Acc[K2] = Required(P[K2], options);
    return Acc;
}
// prettier-ignore
function required_from_mapped_result_FromMappedResult(R, options) {
    return required_from_mapped_result_FromProperties(R.properties, options);
}
// prettier-ignore
function RequiredFromMappedResult(R, options) {
    const P = required_from_mapped_result_FromMappedResult(R, options);
    return MappedResult(P);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/required/required.mjs









// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function required_FromComputed(target, parameters) {
    return Computed('Required', [Computed(target, parameters)]);
}
// prettier-ignore
function required_FromRef($ref) {
    return Computed('Required', [Ref($ref)]);
}
// prettier-ignore
function required_FromProperties(properties) {
    const requiredProperties = {};
    for (const K of globalThis.Object.getOwnPropertyNames(properties))
        requiredProperties[K] = Discard(properties[K], [OptionalKind]);
    return requiredProperties;
}
// prettier-ignore
function required_FromObject(type) {
    const options = Discard(type, [TransformKind, '$id', 'required', 'properties']);
    const properties = required_FromProperties(type['properties']);
    return object_Object(properties, options);
}
// prettier-ignore
function required_FromRest(types) {
    return types.map(type => RequiredResolve(type));
}
// ------------------------------------------------------------------
// RequiredResolve
// ------------------------------------------------------------------
// prettier-ignore
function RequiredResolve(type) {
    return (IsComputed(type) ? required_FromComputed(type.target, type.parameters) :
        IsRef(type) ? required_FromRef(type.$ref) :
            IsIntersect(type) ? Intersect(required_FromRest(type.allOf)) :
                IsUnion(type) ? Union(required_FromRest(type.anyOf)) :
                    kind_IsObject(type) ? required_FromObject(type) :
                        object_Object({}));
}
/** `[Json]` Constructs a type where all properties are required */
function Required(type, options) {
    if (IsMappedResult(type)) {
        return RequiredFromMappedResult(type, options);
    }
    else {
        // special: mapping types require overridable options
        return CreateType({ ...RequiredResolve(type), ...options });
    }
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/module/compute.mjs



















// ------------------------------------------------------------------
// KindGuard
// ------------------------------------------------------------------

// prettier-ignore
function DerefParameters(moduleProperties, types) {
    return types.map((type) => {
        return IsRef(type)
            ? Deref(moduleProperties, type.$ref)
            : compute_FromType(moduleProperties, type);
    });
}
// prettier-ignore
function Deref(moduleProperties, ref) {
    return (ref in moduleProperties
        ? IsRef(moduleProperties[ref])
            ? Deref(moduleProperties, moduleProperties[ref].$ref)
            : compute_FromType(moduleProperties, moduleProperties[ref])
        : Never());
}
// prettier-ignore
function FromAwaited(parameters) {
    return Awaited(parameters[0]);
}
// prettier-ignore
function FromIndex(parameters) {
    return Index(parameters[0], parameters[1]);
}
// prettier-ignore
function FromKeyOf(parameters) {
    return KeyOf(parameters[0]);
}
// prettier-ignore
function FromPartial(parameters) {
    return Partial(parameters[0]);
}
// prettier-ignore
function FromOmit(parameters) {
    return Omit(parameters[0], parameters[1]);
}
// prettier-ignore
function FromPick(parameters) {
    return Pick(parameters[0], parameters[1]);
}
// prettier-ignore
function compute_FromRecord(parameters) {
    return Record(parameters[0], parameters[1]);
}
// prettier-ignore
function FromRequired(parameters) {
    return Required(parameters[0]);
}
// prettier-ignore
function compute_FromComputed(moduleProperties, target, parameters) {
    const dereferenced = DerefParameters(moduleProperties, parameters);
    return (target === 'Awaited' ? FromAwaited(dereferenced) :
        target === 'Index' ? FromIndex(dereferenced) :
            target === 'KeyOf' ? FromKeyOf(dereferenced) :
                target === 'Partial' ? FromPartial(dereferenced) :
                    target === 'Omit' ? FromOmit(dereferenced) :
                        target === 'Pick' ? FromPick(dereferenced) :
                            target === 'Record' ? compute_FromRecord(dereferenced) :
                                target === 'Required' ? FromRequired(dereferenced) :
                                    Never());
}
function compute_FromObject(moduleProperties, properties) {
    return object_Object(globalThis.Object.keys(properties).reduce((result, key) => {
        return { ...result, [key]: compute_FromType(moduleProperties, properties[key]) };
    }, {}));
}
// prettier-ignore
function compute_FromConstructor(moduleProperties, parameters, instanceType) {
    return Constructor(compute_FromRest(moduleProperties, parameters), compute_FromType(moduleProperties, instanceType));
}
// prettier-ignore
function compute_FromFunction(moduleProperties, parameters, returnType) {
    return function_Function(compute_FromRest(moduleProperties, parameters), compute_FromType(moduleProperties, returnType));
}
function compute_FromTuple(moduleProperties, types) {
    return Tuple(compute_FromRest(moduleProperties, types));
}
function compute_FromIntersect(moduleProperties, types) {
    return Intersect(compute_FromRest(moduleProperties, types));
}
function compute_FromUnion(moduleProperties, types) {
    return Union(compute_FromRest(moduleProperties, types));
}
function compute_FromArray(moduleProperties, type) {
    return array_Array(compute_FromType(moduleProperties, type));
}
function compute_FromAsyncIterator(moduleProperties, type) {
    return AsyncIterator(compute_FromType(moduleProperties, type));
}
function compute_FromIterator(moduleProperties, type) {
    return Iterator(compute_FromType(moduleProperties, type));
}
function compute_FromRest(moduleProperties, types) {
    return types.map((type) => compute_FromType(moduleProperties, type));
}
// prettier-ignore
function compute_FromType(moduleProperties, type) {
    return (
    // Note: The 'as never' is required due to excessive resolution of TIndex. In fact TIndex, TPick, TOmit and
    // all need re-implementation to remove the PropertyKey[] selector. Reimplementation of these types should
    // be a priority as there is a potential for the current inference to break on TS compiler changes.
    IsComputed(type) ? CreateType(compute_FromComputed(moduleProperties, type.target, type.parameters)) :
        kind_IsObject(type) ? CreateType(compute_FromObject(moduleProperties, type.properties), type) :
            IsConstructor(type) ? CreateType(compute_FromConstructor(moduleProperties, type.parameters, type.returns), type) :
                kind_IsFunction(type) ? CreateType(compute_FromFunction(moduleProperties, type.parameters, type.returns), type) :
                    IsTuple(type) ? CreateType(compute_FromTuple(moduleProperties, type.items || []), type) :
                        IsIntersect(type) ? CreateType(compute_FromIntersect(moduleProperties, type.allOf), type) :
                            IsUnion(type) ? CreateType(compute_FromUnion(moduleProperties, type.anyOf), type) :
                                kind_IsArray(type) ? CreateType(compute_FromArray(moduleProperties, type.items), type) :
                                    kind_IsAsyncIterator(type) ? CreateType(compute_FromAsyncIterator(moduleProperties, type.items), type) :
                                        kind_IsIterator(type) ? CreateType(compute_FromIterator(moduleProperties, type.items), type) :
                                            type);
}
// prettier-ignore
function ComputeType(moduleProperties, key) {
    return (key in moduleProperties
        ? compute_FromType(moduleProperties, moduleProperties[key])
        : Never());
}
// prettier-ignore
function ComputeModuleProperties(moduleProperties) {
    return globalThis.Object.getOwnPropertyNames(moduleProperties).reduce((result, key) => {
        return { ...result, [key]: ComputeType(moduleProperties, key) };
    }, {});
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/module/module.mjs


// ------------------------------------------------------------------
// Module Infrastructure Types
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// Module
// ------------------------------------------------------------------
// prettier-ignore
class TModule {
    constructor($defs) {
        const computed = ComputeModuleProperties($defs);
        const identified = this.WithIdentifiers(computed);
        this.$defs = identified;
    }
    /** `[Json]` Imports a Type by Key. */
    Import(key, options) {
        return CreateType({ [Kind]: 'Import', $defs: this.$defs, $ref: key }, options);
    }
    // prettier-ignore
    WithIdentifiers($defs) {
        return globalThis.Object.getOwnPropertyNames($defs).reduce((result, key) => {
            return { ...result, [key]: { ...$defs[key], $id: key } };
        }, {});
    }
}
/** `[Json]` Creates a Type Definition Module. */
function Module(properties) {
    return new TModule(properties);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/not/not.mjs


/** `[Json]` Creates a Not type */
function Not(type, options) {
    return CreateType({ [Kind]: 'Not', not: type }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/parameters/parameters.mjs

/** `[JavaScript]` Extracts the Parameters from the given Function type */
function Parameters(schema, options) {
    return Tuple(schema.parameters, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/readonly-optional/readonly-optional.mjs


/** `[Json]` Creates a Readonly and Optional property */
function ReadonlyOptional(schema) {
    return Readonly(Optional(schema));
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/clone/type.mjs

/** Clones a Rest */
function CloneRest(schemas) {
    return schemas.map((schema) => CloneType(schema));
}
/** Clones a Type */
function CloneType(schema, options) {
    return options === undefined ? Clone(schema) : Clone({ ...options, ...schema });
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/recursive/recursive.mjs




// Auto Tracked For Recursive Types without ID's
let Ordinal = 0;
/** `[Json]` Creates a Recursive type */
function Recursive(callback, options = {}) {
    if (value_IsUndefined(options.$id))
        options.$id = `T${Ordinal++}`;
    const thisType = CloneType(callback({ [Kind]: 'This', $ref: `${options.$id}` }));
    thisType.$id = options.$id;
    // prettier-ignore
    return CreateType({ [symbols_Hint]: 'Recursive', ...thisType }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/regexp/regexp.mjs



/** `[JavaScript]` Creates a RegExp type */
function regexp_RegExp(unresolved, options) {
    const expr = value_IsString(unresolved) ? new globalThis.RegExp(unresolved) : unresolved;
    return CreateType({ [Kind]: 'RegExp', type: 'RegExp', source: expr.source, flags: expr.flags }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/rest/rest.mjs
// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// prettier-ignore
function RestResolve(T) {
    return (IsIntersect(T) ? T.allOf :
        IsUnion(T) ? T.anyOf :
            IsTuple(T) ? T.items ?? [] :
                []);
}
/** `[Json]` Extracts interior Rest elements from Tuple, Intersect and Union types */
function Rest(T) {
    return RestResolve(T);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/return-type/return-type.mjs

/** `[JavaScript]` Extracts the ReturnType from the given Function type */
function ReturnType(schema, options) {
    return CreateType(schema.returns, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/transform/transform.mjs

// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// TransformBuilders
// ------------------------------------------------------------------
class TransformDecodeBuilder {
    constructor(schema) {
        this.schema = schema;
    }
    Decode(decode) {
        return new TransformEncodeBuilder(this.schema, decode);
    }
}
// prettier-ignore
class TransformEncodeBuilder {
    constructor(schema, decode) {
        this.schema = schema;
        this.decode = decode;
    }
    EncodeTransform(encode, schema) {
        const Encode = (value) => schema[TransformKind].Encode(encode(value));
        const Decode = (value) => this.decode(schema[TransformKind].Decode(value));
        const Codec = { Encode: Encode, Decode: Decode };
        return { ...schema, [TransformKind]: Codec };
    }
    EncodeSchema(encode, schema) {
        const Codec = { Decode: this.decode, Encode: encode };
        return { ...schema, [TransformKind]: Codec };
    }
    Encode(encode) {
        return (IsTransform(this.schema) ? this.EncodeTransform(encode, this.schema) : this.EncodeSchema(encode, this.schema));
    }
}
/** `[Json]` Creates a Transform type */
function Transform(schema) {
    return new TransformDecodeBuilder(schema);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/unsafe/unsafe.mjs


/** `[Json]` Creates a Unsafe type that will infers as the generic argument T */
function Unsafe(options = {}) {
    return CreateType({ [Kind]: options[Kind] ?? 'Unsafe' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/void/void.mjs


/** `[JavaScript]` Creates a Void type */
function Void(options) {
    return CreateType({ [Kind]: 'Void', type: 'void' }, options);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/type/type.mjs
// ------------------------------------------------------------------
// Type: Module
// ------------------------------------------------------------------


























































;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/type/index.mjs
// ------------------------------------------------------------------
// JsonTypeBuilder
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// JavaScriptTypeBuilder
// ------------------------------------------------------------------


/** JavaScript Type Builder with Static Resolution for TypeScript */
const Type = type_type_namespaceObject;



;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/keyof/keyof-property-entries.mjs


/**
 * `[Utility]` Resolves an array of keys and schemas from the given schema. This method is faster
 * than obtaining the keys and resolving each individually via indexing. This method was written
 * accellerate Intersect and Union encoding.
 */
function KeyOfPropertyEntries(schema) {
    const keys = KeyOfPropertyKeys(schema);
    const schemas = IndexFromPropertyKeys(schema, keys);
    return keys.map((_, index) => [keys[index], schemas[index]]);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/value/deref/deref.mjs



class TypeDereferenceError extends error_TypeBoxError {
    constructor(schema) {
        super(`Unable to dereference schema with $id '${schema.$ref}'`);
        this.schema = schema;
    }
}
function Resolve(schema, references) {
    const target = references.find((target) => target.$id === schema.$ref);
    if (target === undefined)
        throw new TypeDereferenceError(schema);
    return deref_Deref(target, references);
}
/** `[Internal]` Pushes a schema onto references if the schema has an $id and does not exist on references */
function Pushref(schema, references) {
    if (!IsString(schema.$id) || references.some((target) => target.$id === schema.$id))
        return references;
    references.push(schema);
    return references;
}
/** `[Internal]` Dereferences a schema from the references array or throws if not found */
function deref_Deref(schema, references) {
    // prettier-ignore
    return (schema[Kind] === 'This' || schema[Kind] === 'Ref')
        ? Resolve(schema, references)
        : schema;
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/value/hash/hash.mjs


// ------------------------------------------------------------------
// Errors
// ------------------------------------------------------------------
class ValueHashError extends error_TypeBoxError {
    constructor(value) {
        super(`Unable to hash value`);
        this.value = value;
    }
}
// ------------------------------------------------------------------
// ByteMarker
// ------------------------------------------------------------------
var ByteMarker;
(function (ByteMarker) {
    ByteMarker[ByteMarker["Undefined"] = 0] = "Undefined";
    ByteMarker[ByteMarker["Null"] = 1] = "Null";
    ByteMarker[ByteMarker["Boolean"] = 2] = "Boolean";
    ByteMarker[ByteMarker["Number"] = 3] = "Number";
    ByteMarker[ByteMarker["String"] = 4] = "String";
    ByteMarker[ByteMarker["Object"] = 5] = "Object";
    ByteMarker[ByteMarker["Array"] = 6] = "Array";
    ByteMarker[ByteMarker["Date"] = 7] = "Date";
    ByteMarker[ByteMarker["Uint8Array"] = 8] = "Uint8Array";
    ByteMarker[ByteMarker["Symbol"] = 9] = "Symbol";
    ByteMarker[ByteMarker["BigInt"] = 10] = "BigInt";
})(ByteMarker || (ByteMarker = {}));
// ------------------------------------------------------------------
// State
// ------------------------------------------------------------------
let Accumulator = BigInt('14695981039346656037');
const [Prime, Size] = [BigInt('1099511628211'), BigInt('18446744073709551616' /* 2 ^ 64 */)];
const Bytes = Array.from({ length: 256 }).map((_, i) => BigInt(i));
const F64 = new Float64Array(1);
const F64In = new DataView(F64.buffer);
const F64Out = new Uint8Array(F64.buffer);
// ------------------------------------------------------------------
// NumberToBytes
// ------------------------------------------------------------------
function* NumberToBytes(value) {
    const byteCount = value === 0 ? 1 : Math.ceil(Math.floor(Math.log2(value) + 1) / 8);
    for (let i = 0; i < byteCount; i++) {
        yield (value >> (8 * (byteCount - 1 - i))) & 0xff;
    }
}
// ------------------------------------------------------------------
// Hashing Functions
// ------------------------------------------------------------------
function hash_ArrayType(value) {
    FNV1A64(ByteMarker.Array);
    for (const item of value) {
        hash_Visit(item);
    }
}
function BooleanType(value) {
    FNV1A64(ByteMarker.Boolean);
    FNV1A64(value ? 1 : 0);
}
function BigIntType(value) {
    FNV1A64(ByteMarker.BigInt);
    F64In.setBigInt64(0, value);
    for (const byte of F64Out) {
        FNV1A64(byte);
    }
}
function hash_DateType(value) {
    FNV1A64(ByteMarker.Date);
    hash_Visit(value.getTime());
}
function NullType(value) {
    FNV1A64(ByteMarker.Null);
}
function NumberType(value) {
    FNV1A64(ByteMarker.Number);
    F64In.setFloat64(0, value);
    for (const byte of F64Out) {
        FNV1A64(byte);
    }
}
function hash_ObjectType(value) {
    FNV1A64(ByteMarker.Object);
    for (const key of globalThis.Object.getOwnPropertyNames(value).sort()) {
        hash_Visit(key);
        hash_Visit(value[key]);
    }
}
function StringType(value) {
    FNV1A64(ByteMarker.String);
    for (let i = 0; i < value.length; i++) {
        for (const byte of NumberToBytes(value.charCodeAt(i))) {
            FNV1A64(byte);
        }
    }
}
function SymbolType(value) {
    FNV1A64(ByteMarker.Symbol);
    hash_Visit(value.description);
}
function hash_Uint8ArrayType(value) {
    FNV1A64(ByteMarker.Uint8Array);
    for (let i = 0; i < value.length; i++) {
        FNV1A64(value[i]);
    }
}
function UndefinedType(value) {
    return FNV1A64(ByteMarker.Undefined);
}
function hash_Visit(value) {
    if (IsArray(value))
        return hash_ArrayType(value);
    if (IsBoolean(value))
        return BooleanType(value);
    if (IsBigInt(value))
        return BigIntType(value);
    if (IsDate(value))
        return hash_DateType(value);
    if (IsNull(value))
        return NullType(value);
    if (IsNumber(value))
        return NumberType(value);
    if (IsObject(value))
        return hash_ObjectType(value);
    if (IsString(value))
        return StringType(value);
    if (IsSymbol(value))
        return SymbolType(value);
    if (IsUint8Array(value))
        return hash_Uint8ArrayType(value);
    if (IsUndefined(value))
        return UndefinedType(value);
    throw new ValueHashError(value);
}
function FNV1A64(byte) {
    Accumulator = Accumulator ^ Bytes[byte];
    Accumulator = (Accumulator * Prime) % Size;
}
// ------------------------------------------------------------------
// Hash
// ------------------------------------------------------------------
/** Creates a FNV1A-64 non cryptographic hash of the given value */
function Hash(value) {
    Accumulator = BigInt('14695981039346656037');
    hash_Visit(value);
    return Accumulator;
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/extends/extends-undefined.mjs

/** Fast undefined check used for properties of type undefined */
function extends_undefined_Intersect(schema) {
    return schema.allOf.every((schema) => ExtendsUndefinedCheck(schema));
}
function extends_undefined_Union(schema) {
    return schema.anyOf.some((schema) => ExtendsUndefinedCheck(schema));
}
function extends_undefined_Not(schema) {
    return !ExtendsUndefinedCheck(schema.not);
}
/** Fast undefined check used for properties of type undefined */
// prettier-ignore
function ExtendsUndefinedCheck(schema) {
    return (schema[Kind] === 'Intersect' ? extends_undefined_Intersect(schema) :
        schema[Kind] === 'Union' ? extends_undefined_Union(schema) :
            schema[Kind] === 'Not' ? extends_undefined_Not(schema) :
                schema[Kind] === 'Undefined' ? true :
                    false);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/registry/format.mjs
/** A registry for user defined string formats */
const map = new Map();
/** Returns the entries in this registry */
function Entries() {
    return new Map(map);
}
/** Clears all user defined string formats */
function Clear() {
    return map.clear();
}
/** Deletes a registered format */
function Delete(format) {
    return map.delete(format);
}
/** Returns true if the user defined string format exists */
function Has(format) {
    return map.has(format);
}
/** Sets a validation function for a user defined string format */
function format_Set(format, func) {
    map.set(format, func);
}
/** Gets a validation function for a user defined string format */
function Get(format) {
    return map.get(format);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/type/registry/type.mjs
/** A registry for user defined types */
const type_map = new Map();
/** Returns the entries in this registry */
function type_Entries() {
    return new Map(type_map);
}
/** Clears all user defined types */
function type_Clear() {
    return type_map.clear();
}
/** Deletes a registered type */
function type_Delete(kind) {
    return type_map.delete(kind);
}
/** Returns true if this registry contains this kind */
function type_Has(kind) {
    return type_map.has(kind);
}
/** Sets a validation function for a user defined type */
function type_Set(kind, func) {
    type_map.set(kind, func);
}
/** Gets a custom validation function for a user defined type */
function type_Get(kind) {
    return type_map.get(kind);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/value/check/check.mjs









// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// KindGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// Errors
// ------------------------------------------------------------------
class ValueCheckUnknownTypeError extends error_TypeBoxError {
    constructor(schema) {
        super(`Unknown type`);
        this.schema = schema;
    }
}
// ------------------------------------------------------------------
// TypeGuards
// ------------------------------------------------------------------
function IsAnyOrUnknown(schema) {
    return schema[Kind] === 'Any' || schema[Kind] === 'Unknown';
}
// ------------------------------------------------------------------
// Guards
// ------------------------------------------------------------------
function IsDefined(value) {
    return value !== undefined;
}
// ------------------------------------------------------------------
// Types
// ------------------------------------------------------------------
function check_FromAny(schema, references, value) {
    return true;
}
function check_FromArray(schema, references, value) {
    if (!IsArray(value))
        return false;
    if (IsDefined(schema.minItems) && !(value.length >= schema.minItems)) {
        return false;
    }
    if (IsDefined(schema.maxItems) && !(value.length <= schema.maxItems)) {
        return false;
    }
    if (!value.every((value) => check_Visit(schema.items, references, value))) {
        return false;
    }
    // prettier-ignore
    if (schema.uniqueItems === true && !((function () { const set = new Set(); for (const element of value) {
        const hashed = Hash(element);
        if (set.has(hashed)) {
            return false;
        }
        else {
            set.add(hashed);
        }
    } return true; })())) {
        return false;
    }
    // contains
    if (!(IsDefined(schema.contains) || IsNumber(schema.minContains) || IsNumber(schema.maxContains))) {
        return true; // exit
    }
    const containsSchema = IsDefined(schema.contains) ? schema.contains : Never();
    const containsCount = value.reduce((acc, value) => (check_Visit(containsSchema, references, value) ? acc + 1 : acc), 0);
    if (containsCount === 0) {
        return false;
    }
    if (IsNumber(schema.minContains) && containsCount < schema.minContains) {
        return false;
    }
    if (IsNumber(schema.maxContains) && containsCount > schema.maxContains) {
        return false;
    }
    return true;
}
function check_FromAsyncIterator(schema, references, value) {
    return IsAsyncIterator(value);
}
function check_FromBigInt(schema, references, value) {
    if (!IsBigInt(value))
        return false;
    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        return false;
    }
    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        return false;
    }
    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        return false;
    }
    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        return false;
    }
    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === BigInt(0))) {
        return false;
    }
    return true;
}
function check_FromBoolean(schema, references, value) {
    return IsBoolean(value);
}
function check_FromConstructor(schema, references, value) {
    return check_Visit(schema.returns, references, value.prototype);
}
function check_FromDate(schema, references, value) {
    if (!IsDate(value))
        return false;
    if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {
        return false;
    }
    if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {
        return false;
    }
    if (IsDefined(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {
        return false;
    }
    if (IsDefined(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {
        return false;
    }
    if (IsDefined(schema.multipleOfTimestamp) && !(value.getTime() % schema.multipleOfTimestamp === 0)) {
        return false;
    }
    return true;
}
function check_FromFunction(schema, references, value) {
    return IsFunction(value);
}
function FromImport(schema, references, value) {
    const definitions = globalThis.Object.values(schema.$defs);
    const target = schema.$defs[schema.$ref];
    return check_Visit(target, [...references, ...definitions], value);
}
function check_FromInteger(schema, references, value) {
    if (!IsInteger(value)) {
        return false;
    }
    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        return false;
    }
    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        return false;
    }
    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        return false;
    }
    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        return false;
    }
    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
        return false;
    }
    return true;
}
function check_FromIntersect(schema, references, value) {
    const check1 = schema.allOf.every((schema) => check_Visit(schema, references, value));
    if (schema.unevaluatedProperties === false) {
        const keyPattern = new RegExp(KeyOfPattern(schema));
        const check2 = Object.getOwnPropertyNames(value).every((key) => keyPattern.test(key));
        return check1 && check2;
    }
    else if (IsSchema(schema.unevaluatedProperties)) {
        const keyCheck = new RegExp(KeyOfPattern(schema));
        const check2 = Object.getOwnPropertyNames(value).every((key) => keyCheck.test(key) || check_Visit(schema.unevaluatedProperties, references, value[key]));
        return check1 && check2;
    }
    else {
        return check1;
    }
}
function check_FromIterator(schema, references, value) {
    return IsIterator(value);
}
function check_FromLiteral(schema, references, value) {
    return value === schema.const;
}
function check_FromNever(schema, references, value) {
    return false;
}
function check_FromNot(schema, references, value) {
    return !check_Visit(schema.not, references, value);
}
function check_FromNull(schema, references, value) {
    return IsNull(value);
}
function check_FromNumber(schema, references, value) {
    if (!TypeSystemPolicy.IsNumberLike(value))
        return false;
    if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        return false;
    }
    if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        return false;
    }
    if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        return false;
    }
    if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        return false;
    }
    if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
        return false;
    }
    return true;
}
function check_FromObject(schema, references, value) {
    if (!TypeSystemPolicy.IsObjectLike(value))
        return false;
    if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
        return false;
    }
    if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
        return false;
    }
    const knownKeys = Object.getOwnPropertyNames(schema.properties);
    for (const knownKey of knownKeys) {
        const property = schema.properties[knownKey];
        if (schema.required && schema.required.includes(knownKey)) {
            if (!check_Visit(property, references, value[knownKey])) {
                return false;
            }
            if ((ExtendsUndefinedCheck(property) || IsAnyOrUnknown(property)) && !(knownKey in value)) {
                return false;
            }
        }
        else {
            if (TypeSystemPolicy.IsExactOptionalProperty(value, knownKey) && !check_Visit(property, references, value[knownKey])) {
                return false;
            }
        }
    }
    if (schema.additionalProperties === false) {
        const valueKeys = Object.getOwnPropertyNames(value);
        // optimization: value is valid if schemaKey length matches the valueKey length
        if (schema.required && schema.required.length === knownKeys.length && valueKeys.length === knownKeys.length) {
            return true;
        }
        else {
            return valueKeys.every((valueKey) => knownKeys.includes(valueKey));
        }
    }
    else if (typeof schema.additionalProperties === 'object') {
        const valueKeys = Object.getOwnPropertyNames(value);
        return valueKeys.every((key) => knownKeys.includes(key) || check_Visit(schema.additionalProperties, references, value[key]));
    }
    else {
        return true;
    }
}
function check_FromPromise(schema, references, value) {
    return IsPromise(value);
}
function check_FromRecord(schema, references, value) {
    if (!TypeSystemPolicy.IsRecordLike(value)) {
        return false;
    }
    if (IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
        return false;
    }
    if (IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
        return false;
    }
    const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];
    const regex = new RegExp(patternKey);
    // prettier-ignore
    const check1 = Object.entries(value).every(([key, value]) => {
        return (regex.test(key)) ? check_Visit(patternSchema, references, value) : true;
    });
    // prettier-ignore
    const check2 = typeof schema.additionalProperties === 'object' ? Object.entries(value).every(([key, value]) => {
        return (!regex.test(key)) ? check_Visit(schema.additionalProperties, references, value) : true;
    }) : true;
    const check3 = schema.additionalProperties === false
        ? Object.getOwnPropertyNames(value).every((key) => {
            return regex.test(key);
        })
        : true;
    return check1 && check2 && check3;
}
function check_FromRef(schema, references, value) {
    return check_Visit(deref_Deref(schema, references), references, value);
}
function check_FromRegExp(schema, references, value) {
    const regex = new RegExp(schema.source, schema.flags);
    if (IsDefined(schema.minLength)) {
        if (!(value.length >= schema.minLength))
            return false;
    }
    if (IsDefined(schema.maxLength)) {
        if (!(value.length <= schema.maxLength))
            return false;
    }
    return regex.test(value);
}
function check_FromString(schema, references, value) {
    if (!IsString(value)) {
        return false;
    }
    if (IsDefined(schema.minLength)) {
        if (!(value.length >= schema.minLength))
            return false;
    }
    if (IsDefined(schema.maxLength)) {
        if (!(value.length <= schema.maxLength))
            return false;
    }
    if (IsDefined(schema.pattern)) {
        const regex = new RegExp(schema.pattern);
        if (!regex.test(value))
            return false;
    }
    if (IsDefined(schema.format)) {
        if (!Has(schema.format))
            return false;
        const func = Get(schema.format);
        return func(value);
    }
    return true;
}
function check_FromSymbol(schema, references, value) {
    return IsSymbol(value);
}
function check_FromTemplateLiteral(schema, references, value) {
    return IsString(value) && new RegExp(schema.pattern).test(value);
}
function FromThis(schema, references, value) {
    return check_Visit(deref_Deref(schema, references), references, value);
}
function check_FromTuple(schema, references, value) {
    if (!IsArray(value)) {
        return false;
    }
    if (schema.items === undefined && !(value.length === 0)) {
        return false;
    }
    if (!(value.length === schema.maxItems)) {
        return false;
    }
    if (!schema.items) {
        return true;
    }
    for (let i = 0; i < schema.items.length; i++) {
        if (!check_Visit(schema.items[i], references, value[i]))
            return false;
    }
    return true;
}
function check_FromUndefined(schema, references, value) {
    return IsUndefined(value);
}
function check_FromUnion(schema, references, value) {
    return schema.anyOf.some((inner) => check_Visit(inner, references, value));
}
function check_FromUint8Array(schema, references, value) {
    if (!IsUint8Array(value)) {
        return false;
    }
    if (IsDefined(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {
        return false;
    }
    if (IsDefined(schema.minByteLength) && !(value.length >= schema.minByteLength)) {
        return false;
    }
    return true;
}
function check_FromUnknown(schema, references, value) {
    return true;
}
function check_FromVoid(schema, references, value) {
    return TypeSystemPolicy.IsVoidLike(value);
}
function FromKind(schema, references, value) {
    if (!type_Has(schema[Kind]))
        return false;
    const func = type_Get(schema[Kind]);
    return func(schema, value);
}
function check_Visit(schema, references, value) {
    const references_ = IsDefined(schema.$id) ? Pushref(schema, references) : references;
    const schema_ = schema;
    switch (schema_[Kind]) {
        case 'Any':
            return check_FromAny(schema_, references_, value);
        case 'Array':
            return check_FromArray(schema_, references_, value);
        case 'AsyncIterator':
            return check_FromAsyncIterator(schema_, references_, value);
        case 'BigInt':
            return check_FromBigInt(schema_, references_, value);
        case 'Boolean':
            return check_FromBoolean(schema_, references_, value);
        case 'Constructor':
            return check_FromConstructor(schema_, references_, value);
        case 'Date':
            return check_FromDate(schema_, references_, value);
        case 'Function':
            return check_FromFunction(schema_, references_, value);
        case 'Import':
            return FromImport(schema_, references_, value);
        case 'Integer':
            return check_FromInteger(schema_, references_, value);
        case 'Intersect':
            return check_FromIntersect(schema_, references_, value);
        case 'Iterator':
            return check_FromIterator(schema_, references_, value);
        case 'Literal':
            return check_FromLiteral(schema_, references_, value);
        case 'Never':
            return check_FromNever(schema_, references_, value);
        case 'Not':
            return check_FromNot(schema_, references_, value);
        case 'Null':
            return check_FromNull(schema_, references_, value);
        case 'Number':
            return check_FromNumber(schema_, references_, value);
        case 'Object':
            return check_FromObject(schema_, references_, value);
        case 'Promise':
            return check_FromPromise(schema_, references_, value);
        case 'Record':
            return check_FromRecord(schema_, references_, value);
        case 'Ref':
            return check_FromRef(schema_, references_, value);
        case 'RegExp':
            return check_FromRegExp(schema_, references_, value);
        case 'String':
            return check_FromString(schema_, references_, value);
        case 'Symbol':
            return check_FromSymbol(schema_, references_, value);
        case 'TemplateLiteral':
            return check_FromTemplateLiteral(schema_, references_, value);
        case 'This':
            return FromThis(schema_, references_, value);
        case 'Tuple':
            return check_FromTuple(schema_, references_, value);
        case 'Undefined':
            return check_FromUndefined(schema_, references_, value);
        case 'Union':
            return check_FromUnion(schema_, references_, value);
        case 'Uint8Array':
            return check_FromUint8Array(schema_, references_, value);
        case 'Unknown':
            return check_FromUnknown(schema_, references_, value);
        case 'Void':
            return check_FromVoid(schema_, references_, value);
        default:
            if (!type_Has(schema_[Kind]))
                throw new ValueCheckUnknownTypeError(schema_);
            return FromKind(schema_, references_, value);
    }
}
/** Returns true if the value matches the given type. */
function Check(...args) {
    return args.length === 3 ? check_Visit(args[0], args[1], args[2]) : check_Visit(args[0], [], args[1]);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/value/transform/decode.mjs






// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// KindGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// Errors
// ------------------------------------------------------------------
// thrown externally
// prettier-ignore
class TransformDecodeCheckError extends error_TypeBoxError {
    constructor(schema, value, error) {
        super(`Unable to decode value as it does not match the expected schema`);
        this.schema = schema;
        this.value = value;
        this.error = error;
    }
}
// prettier-ignore
class TransformDecodeError extends error_TypeBoxError {
    constructor(schema, path, value, error) {
        super(error instanceof Error ? error.message : 'Unknown error');
        this.schema = schema;
        this.path = path;
        this.value = value;
        this.error = error;
    }
}
// ------------------------------------------------------------------
// Decode
// ------------------------------------------------------------------
// prettier-ignore
function Default(schema, path, value) {
    try {
        return IsTransform(schema) ? schema[TransformKind].Decode(value) : value;
    }
    catch (error) {
        throw new TransformDecodeError(schema, path, value, error);
    }
}
// prettier-ignore
function decode_FromArray(schema, references, path, value) {
    return (IsArray(value))
        ? Default(schema, path, value.map((value, index) => decode_Visit(schema.items, references, `${path}/${index}`, value)))
        : Default(schema, path, value);
}
// prettier-ignore
function decode_FromIntersect(schema, references, path, value) {
    if (!IsObject(value) || IsValueType(value))
        return Default(schema, path, value);
    const knownEntries = KeyOfPropertyEntries(schema);
    const knownKeys = knownEntries.map(entry => entry[0]);
    const knownProperties = { ...value };
    for (const [knownKey, knownSchema] of knownEntries)
        if (knownKey in knownProperties) {
            knownProperties[knownKey] = decode_Visit(knownSchema, references, `${path}/${knownKey}`, knownProperties[knownKey]);
        }
    if (!IsTransform(schema.unevaluatedProperties)) {
        return Default(schema, path, knownProperties);
    }
    const unknownKeys = Object.getOwnPropertyNames(knownProperties);
    const unevaluatedProperties = schema.unevaluatedProperties;
    const unknownProperties = { ...knownProperties };
    for (const key of unknownKeys)
        if (!knownKeys.includes(key)) {
            unknownProperties[key] = Default(unevaluatedProperties, `${path}/${key}`, unknownProperties[key]);
        }
    return Default(schema, path, unknownProperties);
}
// prettier-ignore
function decode_FromImport(schema, references, path, value) {
    const definitions = globalThis.Object.values(schema.$defs);
    const target = schema.$defs[schema.$ref];
    const transform = schema[TransformKind];
    // Note: we need to re-spec the target as TSchema + [TransformKind]
    const transformTarget = { [TransformKind]: transform, ...target };
    return decode_Visit(transformTarget, [...references, ...definitions], path, value);
}
function decode_FromNot(schema, references, path, value) {
    return Default(schema, path, decode_Visit(schema.not, references, path, value));
}
// prettier-ignore
function decode_FromObject(schema, references, path, value) {
    if (!IsObject(value))
        return Default(schema, path, value);
    const knownKeys = KeyOfPropertyKeys(schema);
    const knownProperties = { ...value };
    for (const key of knownKeys) {
        if (!HasPropertyKey(knownProperties, key))
            continue;
        // if the property value is undefined, but the target is not, nor does it satisfy exact optional 
        // property policy, then we need to continue. This is a special case for optional property handling 
        // where a transforms wrapped in a optional modifiers should not run.
        if (IsUndefined(knownProperties[key]) && (!kind_IsUndefined(schema.properties[key]) ||
            TypeSystemPolicy.IsExactOptionalProperty(knownProperties, key)))
            continue;
        // decode property
        knownProperties[key] = decode_Visit(schema.properties[key], references, `${path}/${key}`, knownProperties[key]);
    }
    if (!IsSchema(schema.additionalProperties)) {
        return Default(schema, path, knownProperties);
    }
    const unknownKeys = Object.getOwnPropertyNames(knownProperties);
    const additionalProperties = schema.additionalProperties;
    const unknownProperties = { ...knownProperties };
    for (const key of unknownKeys)
        if (!knownKeys.includes(key)) {
            unknownProperties[key] = Default(additionalProperties, `${path}/${key}`, unknownProperties[key]);
        }
    return Default(schema, path, unknownProperties);
}
// prettier-ignore
function decode_FromRecord(schema, references, path, value) {
    if (!IsObject(value))
        return Default(schema, path, value);
    const pattern = Object.getOwnPropertyNames(schema.patternProperties)[0];
    const knownKeys = new RegExp(pattern);
    const knownProperties = { ...value };
    for (const key of Object.getOwnPropertyNames(value))
        if (knownKeys.test(key)) {
            knownProperties[key] = decode_Visit(schema.patternProperties[pattern], references, `${path}/${key}`, knownProperties[key]);
        }
    if (!IsSchema(schema.additionalProperties)) {
        return Default(schema, path, knownProperties);
    }
    const unknownKeys = Object.getOwnPropertyNames(knownProperties);
    const additionalProperties = schema.additionalProperties;
    const unknownProperties = { ...knownProperties };
    for (const key of unknownKeys)
        if (!knownKeys.test(key)) {
            unknownProperties[key] = Default(additionalProperties, `${path}/${key}`, unknownProperties[key]);
        }
    return Default(schema, path, unknownProperties);
}
// prettier-ignore
function decode_FromRef(schema, references, path, value) {
    const target = deref_Deref(schema, references);
    return Default(schema, path, decode_Visit(target, references, path, value));
}
// prettier-ignore
function decode_FromThis(schema, references, path, value) {
    const target = deref_Deref(schema, references);
    return Default(schema, path, decode_Visit(target, references, path, value));
}
// prettier-ignore
function decode_FromTuple(schema, references, path, value) {
    return (IsArray(value) && IsArray(schema.items))
        ? Default(schema, path, schema.items.map((schema, index) => decode_Visit(schema, references, `${path}/${index}`, value[index])))
        : Default(schema, path, value);
}
// prettier-ignore
function decode_FromUnion(schema, references, path, value) {
    for (const subschema of schema.anyOf) {
        if (!Check(subschema, references, value))
            continue;
        // note: ensure interior is decoded first
        const decoded = decode_Visit(subschema, references, path, value);
        return Default(schema, path, decoded);
    }
    return Default(schema, path, value);
}
// prettier-ignore
function decode_Visit(schema, references, path, value) {
    const references_ = Pushref(schema, references);
    const schema_ = schema;
    switch (schema[Kind]) {
        case 'Array':
            return decode_FromArray(schema_, references_, path, value);
        case 'Import':
            return decode_FromImport(schema_, references_, path, value);
        case 'Intersect':
            return decode_FromIntersect(schema_, references_, path, value);
        case 'Not':
            return decode_FromNot(schema_, references_, path, value);
        case 'Object':
            return decode_FromObject(schema_, references_, path, value);
        case 'Record':
            return decode_FromRecord(schema_, references_, path, value);
        case 'Ref':
            return decode_FromRef(schema_, references_, path, value);
        case 'Symbol':
            return Default(schema_, path, value);
        case 'This':
            return decode_FromThis(schema_, references_, path, value);
        case 'Tuple':
            return decode_FromTuple(schema_, references_, path, value);
        case 'Union':
            return decode_FromUnion(schema_, references_, path, value);
        default:
            return Default(schema_, path, value);
    }
}
/**
 * `[Internal]` Decodes the value and returns the result. This function requires that
 * the caller `Check` the value before use. Passing unchecked values may result in
 * undefined behavior. Refer to the `Value.Decode()` for implementation details.
 */
function TransformDecode(schema, references, value) {
    return decode_Visit(schema, references, '', value);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/value/transform/has.mjs


// ------------------------------------------------------------------
// KindGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------

// prettier-ignore
function has_FromArray(schema, references) {
    return IsTransform(schema) || has_Visit(schema.items, references);
}
// prettier-ignore
function has_FromAsyncIterator(schema, references) {
    return IsTransform(schema) || has_Visit(schema.items, references);
}
// prettier-ignore
function has_FromConstructor(schema, references) {
    return IsTransform(schema) || has_Visit(schema.returns, references) || schema.parameters.some((schema) => has_Visit(schema, references));
}
// prettier-ignore
function has_FromFunction(schema, references) {
    return IsTransform(schema) || has_Visit(schema.returns, references) || schema.parameters.some((schema) => has_Visit(schema, references));
}
// prettier-ignore
function has_FromIntersect(schema, references) {
    return IsTransform(schema) || IsTransform(schema.unevaluatedProperties) || schema.allOf.some((schema) => has_Visit(schema, references));
}
// prettier-ignore
function has_FromIterator(schema, references) {
    return IsTransform(schema) || has_Visit(schema.items, references);
}
// prettier-ignore
function has_FromNot(schema, references) {
    return IsTransform(schema) || has_Visit(schema.not, references);
}
// prettier-ignore
function has_FromObject(schema, references) {
    return (IsTransform(schema) ||
        Object.values(schema.properties).some((schema) => has_Visit(schema, references)) ||
        (IsSchema(schema.additionalProperties) && has_Visit(schema.additionalProperties, references)));
}
// prettier-ignore
function has_FromPromise(schema, references) {
    return IsTransform(schema) || has_Visit(schema.item, references);
}
// prettier-ignore
function has_FromRecord(schema, references) {
    const pattern = Object.getOwnPropertyNames(schema.patternProperties)[0];
    const property = schema.patternProperties[pattern];
    return IsTransform(schema) || has_Visit(property, references) || (IsSchema(schema.additionalProperties) && IsTransform(schema.additionalProperties));
}
// prettier-ignore
function has_FromRef(schema, references) {
    if (IsTransform(schema))
        return true;
    return has_Visit(deref_Deref(schema, references), references);
}
// prettier-ignore
function has_FromThis(schema, references) {
    if (IsTransform(schema))
        return true;
    return has_Visit(deref_Deref(schema, references), references);
}
// prettier-ignore
function has_FromTuple(schema, references) {
    return IsTransform(schema) || (!IsUndefined(schema.items) && schema.items.some((schema) => has_Visit(schema, references)));
}
// prettier-ignore
function has_FromUnion(schema, references) {
    return IsTransform(schema) || schema.anyOf.some((schema) => has_Visit(schema, references));
}
// prettier-ignore
function has_Visit(schema, references) {
    const references_ = Pushref(schema, references);
    const schema_ = schema;
    if (schema.$id && visited.has(schema.$id))
        return false;
    if (schema.$id)
        visited.add(schema.$id);
    switch (schema[Kind]) {
        case 'Array':
            return has_FromArray(schema_, references_);
        case 'AsyncIterator':
            return has_FromAsyncIterator(schema_, references_);
        case 'Constructor':
            return has_FromConstructor(schema_, references_);
        case 'Function':
            return has_FromFunction(schema_, references_);
        case 'Intersect':
            return has_FromIntersect(schema_, references_);
        case 'Iterator':
            return has_FromIterator(schema_, references_);
        case 'Not':
            return has_FromNot(schema_, references_);
        case 'Object':
            return has_FromObject(schema_, references_);
        case 'Promise':
            return has_FromPromise(schema_, references_);
        case 'Record':
            return has_FromRecord(schema_, references_);
        case 'Ref':
            return has_FromRef(schema_, references_);
        case 'This':
            return has_FromThis(schema_, references_);
        case 'Tuple':
            return has_FromTuple(schema_, references_);
        case 'Union':
            return has_FromUnion(schema_, references_);
        default:
            return IsTransform(schema);
    }
}
const visited = new Set();
/** Returns true if this schema contains a transform codec */
function HasTransform(schema, references) {
    visited.clear();
    return has_Visit(schema, references);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/errors/function.mjs


/** Creates an error message using en-US as the default locale */
function DefaultErrorFunction(error) {
    switch (error.errorType) {
        case ValueErrorType.ArrayContains:
            return 'Expected array to contain at least one matching value';
        case ValueErrorType.ArrayMaxContains:
            return `Expected array to contain no more than ${error.schema.maxContains} matching values`;
        case ValueErrorType.ArrayMinContains:
            return `Expected array to contain at least ${error.schema.minContains} matching values`;
        case ValueErrorType.ArrayMaxItems:
            return `Expected array length to be less or equal to ${error.schema.maxItems}`;
        case ValueErrorType.ArrayMinItems:
            return `Expected array length to be greater or equal to ${error.schema.minItems}`;
        case ValueErrorType.ArrayUniqueItems:
            return 'Expected array elements to be unique';
        case ValueErrorType.Array:
            return 'Expected array';
        case ValueErrorType.AsyncIterator:
            return 'Expected AsyncIterator';
        case ValueErrorType.BigIntExclusiveMaximum:
            return `Expected bigint to be less than ${error.schema.exclusiveMaximum}`;
        case ValueErrorType.BigIntExclusiveMinimum:
            return `Expected bigint to be greater than ${error.schema.exclusiveMinimum}`;
        case ValueErrorType.BigIntMaximum:
            return `Expected bigint to be less or equal to ${error.schema.maximum}`;
        case ValueErrorType.BigIntMinimum:
            return `Expected bigint to be greater or equal to ${error.schema.minimum}`;
        case ValueErrorType.BigIntMultipleOf:
            return `Expected bigint to be a multiple of ${error.schema.multipleOf}`;
        case ValueErrorType.BigInt:
            return 'Expected bigint';
        case ValueErrorType.Boolean:
            return 'Expected boolean';
        case ValueErrorType.DateExclusiveMinimumTimestamp:
            return `Expected Date timestamp to be greater than ${error.schema.exclusiveMinimumTimestamp}`;
        case ValueErrorType.DateExclusiveMaximumTimestamp:
            return `Expected Date timestamp to be less than ${error.schema.exclusiveMaximumTimestamp}`;
        case ValueErrorType.DateMinimumTimestamp:
            return `Expected Date timestamp to be greater or equal to ${error.schema.minimumTimestamp}`;
        case ValueErrorType.DateMaximumTimestamp:
            return `Expected Date timestamp to be less or equal to ${error.schema.maximumTimestamp}`;
        case ValueErrorType.DateMultipleOfTimestamp:
            return `Expected Date timestamp to be a multiple of ${error.schema.multipleOfTimestamp}`;
        case ValueErrorType.Date:
            return 'Expected Date';
        case ValueErrorType.Function:
            return 'Expected function';
        case ValueErrorType.IntegerExclusiveMaximum:
            return `Expected integer to be less than ${error.schema.exclusiveMaximum}`;
        case ValueErrorType.IntegerExclusiveMinimum:
            return `Expected integer to be greater than ${error.schema.exclusiveMinimum}`;
        case ValueErrorType.IntegerMaximum:
            return `Expected integer to be less or equal to ${error.schema.maximum}`;
        case ValueErrorType.IntegerMinimum:
            return `Expected integer to be greater or equal to ${error.schema.minimum}`;
        case ValueErrorType.IntegerMultipleOf:
            return `Expected integer to be a multiple of ${error.schema.multipleOf}`;
        case ValueErrorType.Integer:
            return 'Expected integer';
        case ValueErrorType.IntersectUnevaluatedProperties:
            return 'Unexpected property';
        case ValueErrorType.Intersect:
            return 'Expected all values to match';
        case ValueErrorType.Iterator:
            return 'Expected Iterator';
        case ValueErrorType.Literal:
            return `Expected ${typeof error.schema.const === 'string' ? `'${error.schema.const}'` : error.schema.const}`;
        case ValueErrorType.Never:
            return 'Never';
        case ValueErrorType.Not:
            return 'Value should not match';
        case ValueErrorType.Null:
            return 'Expected null';
        case ValueErrorType.NumberExclusiveMaximum:
            return `Expected number to be less than ${error.schema.exclusiveMaximum}`;
        case ValueErrorType.NumberExclusiveMinimum:
            return `Expected number to be greater than ${error.schema.exclusiveMinimum}`;
        case ValueErrorType.NumberMaximum:
            return `Expected number to be less or equal to ${error.schema.maximum}`;
        case ValueErrorType.NumberMinimum:
            return `Expected number to be greater or equal to ${error.schema.minimum}`;
        case ValueErrorType.NumberMultipleOf:
            return `Expected number to be a multiple of ${error.schema.multipleOf}`;
        case ValueErrorType.Number:
            return 'Expected number';
        case ValueErrorType.Object:
            return 'Expected object';
        case ValueErrorType.ObjectAdditionalProperties:
            return 'Unexpected property';
        case ValueErrorType.ObjectMaxProperties:
            return `Expected object to have no more than ${error.schema.maxProperties} properties`;
        case ValueErrorType.ObjectMinProperties:
            return `Expected object to have at least ${error.schema.minProperties} properties`;
        case ValueErrorType.ObjectRequiredProperty:
            return 'Expected required property';
        case ValueErrorType.Promise:
            return 'Expected Promise';
        case ValueErrorType.RegExp:
            return 'Expected string to match regular expression';
        case ValueErrorType.StringFormatUnknown:
            return `Unknown format '${error.schema.format}'`;
        case ValueErrorType.StringFormat:
            return `Expected string to match '${error.schema.format}' format`;
        case ValueErrorType.StringMaxLength:
            return `Expected string length less or equal to ${error.schema.maxLength}`;
        case ValueErrorType.StringMinLength:
            return `Expected string length greater or equal to ${error.schema.minLength}`;
        case ValueErrorType.StringPattern:
            return `Expected string to match '${error.schema.pattern}'`;
        case ValueErrorType.String:
            return 'Expected string';
        case ValueErrorType.Symbol:
            return 'Expected symbol';
        case ValueErrorType.TupleLength:
            return `Expected tuple to have ${error.schema.maxItems || 0} elements`;
        case ValueErrorType.Tuple:
            return 'Expected tuple';
        case ValueErrorType.Uint8ArrayMaxByteLength:
            return `Expected byte length less or equal to ${error.schema.maxByteLength}`;
        case ValueErrorType.Uint8ArrayMinByteLength:
            return `Expected byte length greater or equal to ${error.schema.minByteLength}`;
        case ValueErrorType.Uint8Array:
            return 'Expected Uint8Array';
        case ValueErrorType.Undefined:
            return 'Expected undefined';
        case ValueErrorType.Union:
            return 'Expected union value';
        case ValueErrorType.Void:
            return 'Expected void';
        case ValueErrorType.Kind:
            return `Expected kind '${error.schema[Kind]}'`;
        default:
            return 'Unknown error type';
    }
}
/** Manages error message providers */
let errorFunction = DefaultErrorFunction;
/** Sets the error function used to generate error messages. */
function SetErrorFunction(callback) {
    errorFunction = callback;
}
/** Gets the error function used to generate error messages */
function GetErrorFunction() {
    return errorFunction;
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/errors/errors.mjs











// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------
// prettier-ignore

// ------------------------------------------------------------------
// ValueErrorType
// ------------------------------------------------------------------
var ValueErrorType;
(function (ValueErrorType) {
    ValueErrorType[ValueErrorType["ArrayContains"] = 0] = "ArrayContains";
    ValueErrorType[ValueErrorType["ArrayMaxContains"] = 1] = "ArrayMaxContains";
    ValueErrorType[ValueErrorType["ArrayMaxItems"] = 2] = "ArrayMaxItems";
    ValueErrorType[ValueErrorType["ArrayMinContains"] = 3] = "ArrayMinContains";
    ValueErrorType[ValueErrorType["ArrayMinItems"] = 4] = "ArrayMinItems";
    ValueErrorType[ValueErrorType["ArrayUniqueItems"] = 5] = "ArrayUniqueItems";
    ValueErrorType[ValueErrorType["Array"] = 6] = "Array";
    ValueErrorType[ValueErrorType["AsyncIterator"] = 7] = "AsyncIterator";
    ValueErrorType[ValueErrorType["BigIntExclusiveMaximum"] = 8] = "BigIntExclusiveMaximum";
    ValueErrorType[ValueErrorType["BigIntExclusiveMinimum"] = 9] = "BigIntExclusiveMinimum";
    ValueErrorType[ValueErrorType["BigIntMaximum"] = 10] = "BigIntMaximum";
    ValueErrorType[ValueErrorType["BigIntMinimum"] = 11] = "BigIntMinimum";
    ValueErrorType[ValueErrorType["BigIntMultipleOf"] = 12] = "BigIntMultipleOf";
    ValueErrorType[ValueErrorType["BigInt"] = 13] = "BigInt";
    ValueErrorType[ValueErrorType["Boolean"] = 14] = "Boolean";
    ValueErrorType[ValueErrorType["DateExclusiveMaximumTimestamp"] = 15] = "DateExclusiveMaximumTimestamp";
    ValueErrorType[ValueErrorType["DateExclusiveMinimumTimestamp"] = 16] = "DateExclusiveMinimumTimestamp";
    ValueErrorType[ValueErrorType["DateMaximumTimestamp"] = 17] = "DateMaximumTimestamp";
    ValueErrorType[ValueErrorType["DateMinimumTimestamp"] = 18] = "DateMinimumTimestamp";
    ValueErrorType[ValueErrorType["DateMultipleOfTimestamp"] = 19] = "DateMultipleOfTimestamp";
    ValueErrorType[ValueErrorType["Date"] = 20] = "Date";
    ValueErrorType[ValueErrorType["Function"] = 21] = "Function";
    ValueErrorType[ValueErrorType["IntegerExclusiveMaximum"] = 22] = "IntegerExclusiveMaximum";
    ValueErrorType[ValueErrorType["IntegerExclusiveMinimum"] = 23] = "IntegerExclusiveMinimum";
    ValueErrorType[ValueErrorType["IntegerMaximum"] = 24] = "IntegerMaximum";
    ValueErrorType[ValueErrorType["IntegerMinimum"] = 25] = "IntegerMinimum";
    ValueErrorType[ValueErrorType["IntegerMultipleOf"] = 26] = "IntegerMultipleOf";
    ValueErrorType[ValueErrorType["Integer"] = 27] = "Integer";
    ValueErrorType[ValueErrorType["IntersectUnevaluatedProperties"] = 28] = "IntersectUnevaluatedProperties";
    ValueErrorType[ValueErrorType["Intersect"] = 29] = "Intersect";
    ValueErrorType[ValueErrorType["Iterator"] = 30] = "Iterator";
    ValueErrorType[ValueErrorType["Kind"] = 31] = "Kind";
    ValueErrorType[ValueErrorType["Literal"] = 32] = "Literal";
    ValueErrorType[ValueErrorType["Never"] = 33] = "Never";
    ValueErrorType[ValueErrorType["Not"] = 34] = "Not";
    ValueErrorType[ValueErrorType["Null"] = 35] = "Null";
    ValueErrorType[ValueErrorType["NumberExclusiveMaximum"] = 36] = "NumberExclusiveMaximum";
    ValueErrorType[ValueErrorType["NumberExclusiveMinimum"] = 37] = "NumberExclusiveMinimum";
    ValueErrorType[ValueErrorType["NumberMaximum"] = 38] = "NumberMaximum";
    ValueErrorType[ValueErrorType["NumberMinimum"] = 39] = "NumberMinimum";
    ValueErrorType[ValueErrorType["NumberMultipleOf"] = 40] = "NumberMultipleOf";
    ValueErrorType[ValueErrorType["Number"] = 41] = "Number";
    ValueErrorType[ValueErrorType["ObjectAdditionalProperties"] = 42] = "ObjectAdditionalProperties";
    ValueErrorType[ValueErrorType["ObjectMaxProperties"] = 43] = "ObjectMaxProperties";
    ValueErrorType[ValueErrorType["ObjectMinProperties"] = 44] = "ObjectMinProperties";
    ValueErrorType[ValueErrorType["ObjectRequiredProperty"] = 45] = "ObjectRequiredProperty";
    ValueErrorType[ValueErrorType["Object"] = 46] = "Object";
    ValueErrorType[ValueErrorType["Promise"] = 47] = "Promise";
    ValueErrorType[ValueErrorType["RegExp"] = 48] = "RegExp";
    ValueErrorType[ValueErrorType["StringFormatUnknown"] = 49] = "StringFormatUnknown";
    ValueErrorType[ValueErrorType["StringFormat"] = 50] = "StringFormat";
    ValueErrorType[ValueErrorType["StringMaxLength"] = 51] = "StringMaxLength";
    ValueErrorType[ValueErrorType["StringMinLength"] = 52] = "StringMinLength";
    ValueErrorType[ValueErrorType["StringPattern"] = 53] = "StringPattern";
    ValueErrorType[ValueErrorType["String"] = 54] = "String";
    ValueErrorType[ValueErrorType["Symbol"] = 55] = "Symbol";
    ValueErrorType[ValueErrorType["TupleLength"] = 56] = "TupleLength";
    ValueErrorType[ValueErrorType["Tuple"] = 57] = "Tuple";
    ValueErrorType[ValueErrorType["Uint8ArrayMaxByteLength"] = 58] = "Uint8ArrayMaxByteLength";
    ValueErrorType[ValueErrorType["Uint8ArrayMinByteLength"] = 59] = "Uint8ArrayMinByteLength";
    ValueErrorType[ValueErrorType["Uint8Array"] = 60] = "Uint8Array";
    ValueErrorType[ValueErrorType["Undefined"] = 61] = "Undefined";
    ValueErrorType[ValueErrorType["Union"] = 62] = "Union";
    ValueErrorType[ValueErrorType["Void"] = 63] = "Void";
})(ValueErrorType || (ValueErrorType = {}));
// ------------------------------------------------------------------
// ValueErrors
// ------------------------------------------------------------------
class ValueErrorsUnknownTypeError extends error_TypeBoxError {
    constructor(schema) {
        super('Unknown type');
        this.schema = schema;
    }
}
// ------------------------------------------------------------------
// EscapeKey
// ------------------------------------------------------------------
function EscapeKey(key) {
    return key.replace(/~/g, '~0').replace(/\//g, '~1'); // RFC6901 Path
}
// ------------------------------------------------------------------
// Guards
// ------------------------------------------------------------------
function errors_IsDefined(value) {
    return value !== undefined;
}
// ------------------------------------------------------------------
// ValueErrorIterator
// ------------------------------------------------------------------
class ValueErrorIterator {
    constructor(iterator) {
        this.iterator = iterator;
    }
    [Symbol.iterator]() {
        return this.iterator;
    }
    /** Returns the first value error or undefined if no errors */
    First() {
        const next = this.iterator.next();
        return next.done ? undefined : next.value;
    }
}
// --------------------------------------------------------------------------
// Create
// --------------------------------------------------------------------------
function Create(errorType, schema, path, value, errors = []) {
    return {
        type: errorType,
        schema,
        path,
        value,
        message: GetErrorFunction()({ errorType, path, schema, value, errors }),
        errors,
    };
}
// --------------------------------------------------------------------------
// Types
// --------------------------------------------------------------------------
function* errors_FromAny(schema, references, path, value) { }
function* errors_FromArray(schema, references, path, value) {
    if (!IsArray(value)) {
        return yield Create(ValueErrorType.Array, schema, path, value);
    }
    if (errors_IsDefined(schema.minItems) && !(value.length >= schema.minItems)) {
        yield Create(ValueErrorType.ArrayMinItems, schema, path, value);
    }
    if (errors_IsDefined(schema.maxItems) && !(value.length <= schema.maxItems)) {
        yield Create(ValueErrorType.ArrayMaxItems, schema, path, value);
    }
    for (let i = 0; i < value.length; i++) {
        yield* errors_Visit(schema.items, references, `${path}/${i}`, value[i]);
    }
    // prettier-ignore
    if (schema.uniqueItems === true && !((function () { const set = new Set(); for (const element of value) {
        const hashed = Hash(element);
        if (set.has(hashed)) {
            return false;
        }
        else {
            set.add(hashed);
        }
    } return true; })())) {
        yield Create(ValueErrorType.ArrayUniqueItems, schema, path, value);
    }
    // contains
    if (!(errors_IsDefined(schema.contains) || errors_IsDefined(schema.minContains) || errors_IsDefined(schema.maxContains))) {
        return;
    }
    const containsSchema = errors_IsDefined(schema.contains) ? schema.contains : Never();
    const containsCount = value.reduce((acc, value, index) => (errors_Visit(containsSchema, references, `${path}${index}`, value).next().done === true ? acc + 1 : acc), 0);
    if (containsCount === 0) {
        yield Create(ValueErrorType.ArrayContains, schema, path, value);
    }
    if (IsNumber(schema.minContains) && containsCount < schema.minContains) {
        yield Create(ValueErrorType.ArrayMinContains, schema, path, value);
    }
    if (IsNumber(schema.maxContains) && containsCount > schema.maxContains) {
        yield Create(ValueErrorType.ArrayMaxContains, schema, path, value);
    }
}
function* errors_FromAsyncIterator(schema, references, path, value) {
    if (!IsAsyncIterator(value))
        yield Create(ValueErrorType.AsyncIterator, schema, path, value);
}
function* errors_FromBigInt(schema, references, path, value) {
    if (!IsBigInt(value))
        return yield Create(ValueErrorType.BigInt, schema, path, value);
    if (errors_IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        yield Create(ValueErrorType.BigIntExclusiveMaximum, schema, path, value);
    }
    if (errors_IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        yield Create(ValueErrorType.BigIntExclusiveMinimum, schema, path, value);
    }
    if (errors_IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        yield Create(ValueErrorType.BigIntMaximum, schema, path, value);
    }
    if (errors_IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        yield Create(ValueErrorType.BigIntMinimum, schema, path, value);
    }
    if (errors_IsDefined(schema.multipleOf) && !(value % schema.multipleOf === BigInt(0))) {
        yield Create(ValueErrorType.BigIntMultipleOf, schema, path, value);
    }
}
function* errors_FromBoolean(schema, references, path, value) {
    if (!IsBoolean(value))
        yield Create(ValueErrorType.Boolean, schema, path, value);
}
function* errors_FromConstructor(schema, references, path, value) {
    yield* errors_Visit(schema.returns, references, path, value.prototype);
}
function* errors_FromDate(schema, references, path, value) {
    if (!IsDate(value))
        return yield Create(ValueErrorType.Date, schema, path, value);
    if (errors_IsDefined(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {
        yield Create(ValueErrorType.DateExclusiveMaximumTimestamp, schema, path, value);
    }
    if (errors_IsDefined(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {
        yield Create(ValueErrorType.DateExclusiveMinimumTimestamp, schema, path, value);
    }
    if (errors_IsDefined(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {
        yield Create(ValueErrorType.DateMaximumTimestamp, schema, path, value);
    }
    if (errors_IsDefined(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {
        yield Create(ValueErrorType.DateMinimumTimestamp, schema, path, value);
    }
    if (errors_IsDefined(schema.multipleOfTimestamp) && !(value.getTime() % schema.multipleOfTimestamp === 0)) {
        yield Create(ValueErrorType.DateMultipleOfTimestamp, schema, path, value);
    }
}
function* errors_FromFunction(schema, references, path, value) {
    if (!IsFunction(value))
        yield Create(ValueErrorType.Function, schema, path, value);
}
function* errors_FromImport(schema, references, path, value) {
    const definitions = globalThis.Object.values(schema.$defs);
    const target = schema.$defs[schema.$ref];
    yield* errors_Visit(target, [...references, ...definitions], path, value);
}
function* errors_FromInteger(schema, references, path, value) {
    if (!IsInteger(value))
        return yield Create(ValueErrorType.Integer, schema, path, value);
    if (errors_IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        yield Create(ValueErrorType.IntegerExclusiveMaximum, schema, path, value);
    }
    if (errors_IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        yield Create(ValueErrorType.IntegerExclusiveMinimum, schema, path, value);
    }
    if (errors_IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        yield Create(ValueErrorType.IntegerMaximum, schema, path, value);
    }
    if (errors_IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        yield Create(ValueErrorType.IntegerMinimum, schema, path, value);
    }
    if (errors_IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
        yield Create(ValueErrorType.IntegerMultipleOf, schema, path, value);
    }
}
function* errors_FromIntersect(schema, references, path, value) {
    let hasError = false;
    for (const inner of schema.allOf) {
        for (const error of errors_Visit(inner, references, path, value)) {
            hasError = true;
            yield error;
        }
    }
    if (hasError) {
        return yield Create(ValueErrorType.Intersect, schema, path, value);
    }
    if (schema.unevaluatedProperties === false) {
        const keyCheck = new RegExp(KeyOfPattern(schema));
        for (const valueKey of Object.getOwnPropertyNames(value)) {
            if (!keyCheck.test(valueKey)) {
                yield Create(ValueErrorType.IntersectUnevaluatedProperties, schema, `${path}/${valueKey}`, value);
            }
        }
    }
    if (typeof schema.unevaluatedProperties === 'object') {
        const keyCheck = new RegExp(KeyOfPattern(schema));
        for (const valueKey of Object.getOwnPropertyNames(value)) {
            if (!keyCheck.test(valueKey)) {
                const next = errors_Visit(schema.unevaluatedProperties, references, `${path}/${valueKey}`, value[valueKey]).next();
                if (!next.done)
                    yield next.value; // yield interior
            }
        }
    }
}
function* errors_FromIterator(schema, references, path, value) {
    if (!IsIterator(value))
        yield Create(ValueErrorType.Iterator, schema, path, value);
}
function* errors_FromLiteral(schema, references, path, value) {
    if (!(value === schema.const))
        yield Create(ValueErrorType.Literal, schema, path, value);
}
function* errors_FromNever(schema, references, path, value) {
    yield Create(ValueErrorType.Never, schema, path, value);
}
function* errors_FromNot(schema, references, path, value) {
    if (errors_Visit(schema.not, references, path, value).next().done === true)
        yield Create(ValueErrorType.Not, schema, path, value);
}
function* errors_FromNull(schema, references, path, value) {
    if (!IsNull(value))
        yield Create(ValueErrorType.Null, schema, path, value);
}
function* errors_FromNumber(schema, references, path, value) {
    if (!TypeSystemPolicy.IsNumberLike(value))
        return yield Create(ValueErrorType.Number, schema, path, value);
    if (errors_IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {
        yield Create(ValueErrorType.NumberExclusiveMaximum, schema, path, value);
    }
    if (errors_IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {
        yield Create(ValueErrorType.NumberExclusiveMinimum, schema, path, value);
    }
    if (errors_IsDefined(schema.maximum) && !(value <= schema.maximum)) {
        yield Create(ValueErrorType.NumberMaximum, schema, path, value);
    }
    if (errors_IsDefined(schema.minimum) && !(value >= schema.minimum)) {
        yield Create(ValueErrorType.NumberMinimum, schema, path, value);
    }
    if (errors_IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {
        yield Create(ValueErrorType.NumberMultipleOf, schema, path, value);
    }
}
function* errors_FromObject(schema, references, path, value) {
    if (!TypeSystemPolicy.IsObjectLike(value))
        return yield Create(ValueErrorType.Object, schema, path, value);
    if (errors_IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
        yield Create(ValueErrorType.ObjectMinProperties, schema, path, value);
    }
    if (errors_IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
        yield Create(ValueErrorType.ObjectMaxProperties, schema, path, value);
    }
    const requiredKeys = Array.isArray(schema.required) ? schema.required : [];
    const knownKeys = Object.getOwnPropertyNames(schema.properties);
    const unknownKeys = Object.getOwnPropertyNames(value);
    for (const requiredKey of requiredKeys) {
        if (unknownKeys.includes(requiredKey))
            continue;
        yield Create(ValueErrorType.ObjectRequiredProperty, schema.properties[requiredKey], `${path}/${EscapeKey(requiredKey)}`, undefined);
    }
    if (schema.additionalProperties === false) {
        for (const valueKey of unknownKeys) {
            if (!knownKeys.includes(valueKey)) {
                yield Create(ValueErrorType.ObjectAdditionalProperties, schema, `${path}/${EscapeKey(valueKey)}`, value[valueKey]);
            }
        }
    }
    if (typeof schema.additionalProperties === 'object') {
        for (const valueKey of unknownKeys) {
            if (knownKeys.includes(valueKey))
                continue;
            yield* errors_Visit(schema.additionalProperties, references, `${path}/${EscapeKey(valueKey)}`, value[valueKey]);
        }
    }
    for (const knownKey of knownKeys) {
        const property = schema.properties[knownKey];
        if (schema.required && schema.required.includes(knownKey)) {
            yield* errors_Visit(property, references, `${path}/${EscapeKey(knownKey)}`, value[knownKey]);
            if (ExtendsUndefinedCheck(schema) && !(knownKey in value)) {
                yield Create(ValueErrorType.ObjectRequiredProperty, property, `${path}/${EscapeKey(knownKey)}`, undefined);
            }
        }
        else {
            if (TypeSystemPolicy.IsExactOptionalProperty(value, knownKey)) {
                yield* errors_Visit(property, references, `${path}/${EscapeKey(knownKey)}`, value[knownKey]);
            }
        }
    }
}
function* errors_FromPromise(schema, references, path, value) {
    if (!IsPromise(value))
        yield Create(ValueErrorType.Promise, schema, path, value);
}
function* errors_FromRecord(schema, references, path, value) {
    if (!TypeSystemPolicy.IsRecordLike(value))
        return yield Create(ValueErrorType.Object, schema, path, value);
    if (errors_IsDefined(schema.minProperties) && !(Object.getOwnPropertyNames(value).length >= schema.minProperties)) {
        yield Create(ValueErrorType.ObjectMinProperties, schema, path, value);
    }
    if (errors_IsDefined(schema.maxProperties) && !(Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {
        yield Create(ValueErrorType.ObjectMaxProperties, schema, path, value);
    }
    const [patternKey, patternSchema] = Object.entries(schema.patternProperties)[0];
    const regex = new RegExp(patternKey);
    for (const [propertyKey, propertyValue] of Object.entries(value)) {
        if (regex.test(propertyKey))
            yield* errors_Visit(patternSchema, references, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
    }
    if (typeof schema.additionalProperties === 'object') {
        for (const [propertyKey, propertyValue] of Object.entries(value)) {
            if (!regex.test(propertyKey))
                yield* errors_Visit(schema.additionalProperties, references, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
        }
    }
    if (schema.additionalProperties === false) {
        for (const [propertyKey, propertyValue] of Object.entries(value)) {
            if (regex.test(propertyKey))
                continue;
            return yield Create(ValueErrorType.ObjectAdditionalProperties, schema, `${path}/${EscapeKey(propertyKey)}`, propertyValue);
        }
    }
}
function* errors_FromRef(schema, references, path, value) {
    yield* errors_Visit(deref_Deref(schema, references), references, path, value);
}
function* errors_FromRegExp(schema, references, path, value) {
    if (!IsString(value))
        return yield Create(ValueErrorType.String, schema, path, value);
    if (errors_IsDefined(schema.minLength) && !(value.length >= schema.minLength)) {
        yield Create(ValueErrorType.StringMinLength, schema, path, value);
    }
    if (errors_IsDefined(schema.maxLength) && !(value.length <= schema.maxLength)) {
        yield Create(ValueErrorType.StringMaxLength, schema, path, value);
    }
    const regex = new RegExp(schema.source, schema.flags);
    if (!regex.test(value)) {
        return yield Create(ValueErrorType.RegExp, schema, path, value);
    }
}
function* errors_FromString(schema, references, path, value) {
    if (!IsString(value))
        return yield Create(ValueErrorType.String, schema, path, value);
    if (errors_IsDefined(schema.minLength) && !(value.length >= schema.minLength)) {
        yield Create(ValueErrorType.StringMinLength, schema, path, value);
    }
    if (errors_IsDefined(schema.maxLength) && !(value.length <= schema.maxLength)) {
        yield Create(ValueErrorType.StringMaxLength, schema, path, value);
    }
    if (IsString(schema.pattern)) {
        const regex = new RegExp(schema.pattern);
        if (!regex.test(value)) {
            yield Create(ValueErrorType.StringPattern, schema, path, value);
        }
    }
    if (IsString(schema.format)) {
        if (!Has(schema.format)) {
            yield Create(ValueErrorType.StringFormatUnknown, schema, path, value);
        }
        else {
            const format = Get(schema.format);
            if (!format(value)) {
                yield Create(ValueErrorType.StringFormat, schema, path, value);
            }
        }
    }
}
function* errors_FromSymbol(schema, references, path, value) {
    if (!IsSymbol(value))
        yield Create(ValueErrorType.Symbol, schema, path, value);
}
function* errors_FromTemplateLiteral(schema, references, path, value) {
    if (!IsString(value))
        return yield Create(ValueErrorType.String, schema, path, value);
    const regex = new RegExp(schema.pattern);
    if (!regex.test(value)) {
        yield Create(ValueErrorType.StringPattern, schema, path, value);
    }
}
function* errors_FromThis(schema, references, path, value) {
    yield* errors_Visit(deref_Deref(schema, references), references, path, value);
}
function* errors_FromTuple(schema, references, path, value) {
    if (!IsArray(value))
        return yield Create(ValueErrorType.Tuple, schema, path, value);
    if (schema.items === undefined && !(value.length === 0)) {
        return yield Create(ValueErrorType.TupleLength, schema, path, value);
    }
    if (!(value.length === schema.maxItems)) {
        return yield Create(ValueErrorType.TupleLength, schema, path, value);
    }
    if (!schema.items) {
        return;
    }
    for (let i = 0; i < schema.items.length; i++) {
        yield* errors_Visit(schema.items[i], references, `${path}/${i}`, value[i]);
    }
}
function* errors_FromUndefined(schema, references, path, value) {
    if (!IsUndefined(value))
        yield Create(ValueErrorType.Undefined, schema, path, value);
}
function* errors_FromUnion(schema, references, path, value) {
    if (Check(schema, references, value))
        return;
    const errors = schema.anyOf.map((variant) => new ValueErrorIterator(errors_Visit(variant, references, path, value)));
    yield Create(ValueErrorType.Union, schema, path, value, errors);
}
function* errors_FromUint8Array(schema, references, path, value) {
    if (!IsUint8Array(value))
        return yield Create(ValueErrorType.Uint8Array, schema, path, value);
    if (errors_IsDefined(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {
        yield Create(ValueErrorType.Uint8ArrayMaxByteLength, schema, path, value);
    }
    if (errors_IsDefined(schema.minByteLength) && !(value.length >= schema.minByteLength)) {
        yield Create(ValueErrorType.Uint8ArrayMinByteLength, schema, path, value);
    }
}
function* errors_FromUnknown(schema, references, path, value) { }
function* errors_FromVoid(schema, references, path, value) {
    if (!TypeSystemPolicy.IsVoidLike(value))
        yield Create(ValueErrorType.Void, schema, path, value);
}
function* errors_FromKind(schema, references, path, value) {
    const check = type_Get(schema[Kind]);
    if (!check(schema, value))
        yield Create(ValueErrorType.Kind, schema, path, value);
}
function* errors_Visit(schema, references, path, value) {
    const references_ = errors_IsDefined(schema.$id) ? [...references, schema] : references;
    const schema_ = schema;
    switch (schema_[Kind]) {
        case 'Any':
            return yield* errors_FromAny(schema_, references_, path, value);
        case 'Array':
            return yield* errors_FromArray(schema_, references_, path, value);
        case 'AsyncIterator':
            return yield* errors_FromAsyncIterator(schema_, references_, path, value);
        case 'BigInt':
            return yield* errors_FromBigInt(schema_, references_, path, value);
        case 'Boolean':
            return yield* errors_FromBoolean(schema_, references_, path, value);
        case 'Constructor':
            return yield* errors_FromConstructor(schema_, references_, path, value);
        case 'Date':
            return yield* errors_FromDate(schema_, references_, path, value);
        case 'Function':
            return yield* errors_FromFunction(schema_, references_, path, value);
        case 'Import':
            return yield* errors_FromImport(schema_, references_, path, value);
        case 'Integer':
            return yield* errors_FromInteger(schema_, references_, path, value);
        case 'Intersect':
            return yield* errors_FromIntersect(schema_, references_, path, value);
        case 'Iterator':
            return yield* errors_FromIterator(schema_, references_, path, value);
        case 'Literal':
            return yield* errors_FromLiteral(schema_, references_, path, value);
        case 'Never':
            return yield* errors_FromNever(schema_, references_, path, value);
        case 'Not':
            return yield* errors_FromNot(schema_, references_, path, value);
        case 'Null':
            return yield* errors_FromNull(schema_, references_, path, value);
        case 'Number':
            return yield* errors_FromNumber(schema_, references_, path, value);
        case 'Object':
            return yield* errors_FromObject(schema_, references_, path, value);
        case 'Promise':
            return yield* errors_FromPromise(schema_, references_, path, value);
        case 'Record':
            return yield* errors_FromRecord(schema_, references_, path, value);
        case 'Ref':
            return yield* errors_FromRef(schema_, references_, path, value);
        case 'RegExp':
            return yield* errors_FromRegExp(schema_, references_, path, value);
        case 'String':
            return yield* errors_FromString(schema_, references_, path, value);
        case 'Symbol':
            return yield* errors_FromSymbol(schema_, references_, path, value);
        case 'TemplateLiteral':
            return yield* errors_FromTemplateLiteral(schema_, references_, path, value);
        case 'This':
            return yield* errors_FromThis(schema_, references_, path, value);
        case 'Tuple':
            return yield* errors_FromTuple(schema_, references_, path, value);
        case 'Undefined':
            return yield* errors_FromUndefined(schema_, references_, path, value);
        case 'Union':
            return yield* errors_FromUnion(schema_, references_, path, value);
        case 'Uint8Array':
            return yield* errors_FromUint8Array(schema_, references_, path, value);
        case 'Unknown':
            return yield* errors_FromUnknown(schema_, references_, path, value);
        case 'Void':
            return yield* errors_FromVoid(schema_, references_, path, value);
        default:
            if (!type_Has(schema_[Kind]))
                throw new ValueErrorsUnknownTypeError(schema);
            return yield* errors_FromKind(schema_, references_, path, value);
    }
}
/** Returns an iterator for each error in this value. */
function Errors(...args) {
    const iterator = args.length === 3 ? errors_Visit(args[0], args[1], '', args[2]) : errors_Visit(args[0], [], '', args[1]);
    return new ValueErrorIterator(iterator);
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/value/decode/decode.mjs



/** Decodes a value or throws if error */
function Decode(...args) {
    const [schema, references, value] = args.length === 3 ? [args[0], args[1], args[2]] : [args[0], [], args[1]];
    if (!Check(schema, references, value))
        throw new TransformDecodeCheckError(schema, value, Errors(schema, references, value).First());
    return HasTransform(schema, references) ? TransformDecode(schema, references, value) : value;
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/value/clone/clone.mjs
// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// Clonable
// ------------------------------------------------------------------
function clone_FromObject(value) {
    const Acc = {};
    for (const key of Object.getOwnPropertyNames(value)) {
        Acc[key] = clone_Clone(value[key]);
    }
    for (const key of Object.getOwnPropertySymbols(value)) {
        Acc[key] = clone_Clone(value[key]);
    }
    return Acc;
}
function clone_FromArray(value) {
    return value.map((element) => clone_Clone(element));
}
function FromTypedArray(value) {
    return value.slice();
}
function FromMap(value) {
    return new Map(clone_Clone([...value.entries()]));
}
function FromSet(value) {
    return new Set(clone_Clone([...value.entries()]));
}
function clone_FromDate(value) {
    return new Date(value.toISOString());
}
function clone_FromValue(value) {
    return value;
}
// ------------------------------------------------------------------
// Clone
// ------------------------------------------------------------------
/** Returns a clone of the given value */
function clone_Clone(value) {
    if (IsArray(value))
        return clone_FromArray(value);
    if (IsDate(value))
        return clone_FromDate(value);
    if (IsTypedArray(value))
        return FromTypedArray(value);
    if (IsMap(value))
        return FromMap(value);
    if (IsSet(value))
        return FromSet(value);
    if (IsObject(value))
        return clone_FromObject(value);
    if (IsValueType(value))
        return clone_FromValue(value);
    throw new Error('ValueClone: Unable to clone value');
}

;// CONCATENATED MODULE: ./node_modules/@sinclair/typebox/build/esm/value/default/default.mjs




// ------------------------------------------------------------------
// ValueGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// TypeGuard
// ------------------------------------------------------------------

// ------------------------------------------------------------------
// ValueOrDefault
// ------------------------------------------------------------------
function ValueOrDefault(schema, value) {
    const defaultValue = HasPropertyKey(schema, 'default') ? schema.default : undefined;
    const clone = IsFunction(defaultValue) ? defaultValue() : clone_Clone(defaultValue);
    return IsUndefined(value) ? clone : IsObject(value) && IsObject(clone) ? Object.assign(clone, value) : value;
}
// ------------------------------------------------------------------
// HasDefaultProperty
// ------------------------------------------------------------------
function HasDefaultProperty(schema) {
    return IsKind(schema) && 'default' in schema;
}
// ------------------------------------------------------------------
// Types
// ------------------------------------------------------------------
function default_FromArray(schema, references, value) {
    // if the value is an array, we attempt to initialize it's elements
    if (IsArray(value)) {
        for (let i = 0; i < value.length; i++) {
            value[i] = default_Visit(schema.items, references, value[i]);
        }
        return value;
    }
    // ... otherwise use default initialization
    const defaulted = ValueOrDefault(schema, value);
    if (!IsArray(defaulted))
        return defaulted;
    for (let i = 0; i < defaulted.length; i++) {
        defaulted[i] = default_Visit(schema.items, references, defaulted[i]);
    }
    return defaulted;
}
function default_FromDate(schema, references, value) {
    // special case intercept for dates
    return IsDate(value) ? value : ValueOrDefault(schema, value);
}
function default_FromImport(schema, references, value) {
    const definitions = globalThis.Object.values(schema.$defs);
    const target = schema.$defs[schema.$ref];
    return default_Visit(target, [...references, ...definitions], value);
}
function default_FromIntersect(schema, references, value) {
    const defaulted = ValueOrDefault(schema, value);
    return schema.allOf.reduce((acc, schema) => {
        const next = default_Visit(schema, references, defaulted);
        return IsObject(next) ? { ...acc, ...next } : next;
    }, {});
}
function default_FromObject(schema, references, value) {
    const defaulted = ValueOrDefault(schema, value);
    // return defaulted
    if (!IsObject(defaulted))
        return defaulted;
    const knownPropertyKeys = Object.getOwnPropertyNames(schema.properties);
    // properties
    for (const key of knownPropertyKeys) {
        // note: we need to traverse into the object and test if the return value
        // yielded a non undefined result. Here we interpret an undefined result as
        // a non assignable property and continue.
        const propertyValue = default_Visit(schema.properties[key], references, defaulted[key]);
        if (IsUndefined(propertyValue))
            continue;
        defaulted[key] = default_Visit(schema.properties[key], references, defaulted[key]);
    }
    // return if not additional properties
    if (!HasDefaultProperty(schema.additionalProperties))
        return defaulted;
    // additional properties
    for (const key of Object.getOwnPropertyNames(defaulted)) {
        if (knownPropertyKeys.includes(key))
            continue;
        defaulted[key] = default_Visit(schema.additionalProperties, references, defaulted[key]);
    }
    return defaulted;
}
function default_FromRecord(schema, references, value) {
    const defaulted = ValueOrDefault(schema, value);
    if (!IsObject(defaulted))
        return defaulted;
    const additionalPropertiesSchema = schema.additionalProperties;
    const [propertyKeyPattern, propertySchema] = Object.entries(schema.patternProperties)[0];
    const knownPropertyKey = new RegExp(propertyKeyPattern);
    // properties
    for (const key of Object.getOwnPropertyNames(defaulted)) {
        if (!(knownPropertyKey.test(key) && HasDefaultProperty(propertySchema)))
            continue;
        defaulted[key] = default_Visit(propertySchema, references, defaulted[key]);
    }
    // return if not additional properties
    if (!HasDefaultProperty(additionalPropertiesSchema))
        return defaulted;
    // additional properties
    for (const key of Object.getOwnPropertyNames(defaulted)) {
        if (knownPropertyKey.test(key))
            continue;
        defaulted[key] = default_Visit(additionalPropertiesSchema, references, defaulted[key]);
    }
    return defaulted;
}
function default_FromRef(schema, references, value) {
    return default_Visit(deref_Deref(schema, references), references, ValueOrDefault(schema, value));
}
function default_FromThis(schema, references, value) {
    return default_Visit(deref_Deref(schema, references), references, value);
}
function default_FromTuple(schema, references, value) {
    const defaulted = ValueOrDefault(schema, value);
    if (!IsArray(defaulted) || IsUndefined(schema.items))
        return defaulted;
    const [items, max] = [schema.items, Math.max(schema.items.length, defaulted.length)];
    for (let i = 0; i < max; i++) {
        if (i < items.length)
            defaulted[i] = default_Visit(items[i], references, defaulted[i]);
    }
    return defaulted;
}
function default_FromUnion(schema, references, value) {
    const defaulted = ValueOrDefault(schema, value);
    for (const inner of schema.anyOf) {
        const result = default_Visit(inner, references, clone_Clone(defaulted));
        if (Check(inner, references, result)) {
            return result;
        }
    }
    return defaulted;
}
function default_Visit(schema, references, value) {
    const references_ = Pushref(schema, references);
    const schema_ = schema;
    switch (schema_[Kind]) {
        case 'Array':
            return default_FromArray(schema_, references_, value);
        case 'Date':
            return default_FromDate(schema_, references_, value);
        case 'Import':
            return default_FromImport(schema_, references_, value);
        case 'Intersect':
            return default_FromIntersect(schema_, references_, value);
        case 'Object':
            return default_FromObject(schema_, references_, value);
        case 'Record':
            return default_FromRecord(schema_, references_, value);
        case 'Ref':
            return default_FromRef(schema_, references_, value);
        case 'This':
            return default_FromThis(schema_, references_, value);
        case 'Tuple':
            return default_FromTuple(schema_, references_, value);
        case 'Union':
            return default_FromUnion(schema_, references_, value);
        default:
            return ValueOrDefault(schema_, value);
    }
}
/** `[Mutable]` Generates missing properties on a value using default schema annotations if available. This function does not check the value and returns an unknown type. You should Check the result before use. Default is a mutable operation. To avoid mutation, Clone the value first. */
function default_Default(...args) {
    return args.length === 3 ? default_Visit(args[0], args[1], args[2]) : default_Visit(args[0], [], args[1]);
}

// EXTERNAL MODULE: ./node_modules/@actions/core/lib/core.js
var core = __nccwpck_require__(641);
// EXTERNAL MODULE: ./node_modules/dotenv/lib/main.js
var main = __nccwpck_require__(8806);
;// CONCATENATED MODULE: ./node_modules/@ubiquity-os/plugin-sdk/dist/index.mjs
// src/server.ts






// src/helpers/runtime-info.ts


var PluginRuntimeInfo = class _PluginRuntimeInfo {
  static _instance = null;
  _env = {};
  constructor(env) {
    if (env) {
      this._env = env;
    }
  }
  static getInstance(env) {
    if (!_PluginRuntimeInfo._instance) {
      _PluginRuntimeInfo._instance = getRuntimeKey() === "workerd" ? new CfRuntimeInfo(env) : new NodeRuntimeInfo(env);
    }
    return _PluginRuntimeInfo._instance;
  }
};
var CfRuntimeInfo = class extends PluginRuntimeInfo {
  get version() {
    return Promise.resolve(this._env.CLOUDFLARE_VERSION_METADATA?.id ?? "CLOUDFLARE_VERSION_METADATA");
  }
  get runUrl() {
    const accountId = this._env.CLOUDFLARE_ACCOUNT_ID ?? "<missing-cloudflare-account-id>";
    const workerName = this._env.CLOUDFLARE_WORKER_NAME;
    const toTime = Date.now() + 6e4;
    const fromTime = Date.now() - 6e4;
    const timeParam = encodeURIComponent(`{"type":"absolute","to":${toTime},"from":${fromTime}}`);
    return `https://dash.cloudflare.com/${accountId}/workers/services/view/${workerName}/production/observability/logs?granularity=0&time=${timeParam}`;
  }
};
var NodeRuntimeInfo = class extends PluginRuntimeInfo {
  get version() {
    return Promise.resolve(github.context.sha);
  }
  get runUrl() {
    return github.context.payload.repository ? `${github.context.payload.repository?.html_url}/actions/runs/${github.context.runId}` : "http://localhost";
  }
};

// src/util.ts


// src/constants.ts
var KERNEL_PUBLIC_KEY = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs96DOU+JqM8SyNXOB6u3
uBKIFiyrcST/LZTYN6y7LeJlyCuGPqSDrWCfjU9Ph5PLf9TWiNmeM8DGaOpwEFC7
U3NRxOSglo4plnQ5zRwIHHXvxyK400sQP2oISXymISuBQWjEIqkC9DybQrKwNzf+
I0JHWPqmwMIw26UvVOtXGOOWBqTkk+N2+/9f8eDIJP5QQVwwszc8s1rXOsLMlVIf
wShw7GO4E2jyK8TSJKpyjV8eb1JJMDwFhPiRrtZfQJUtDf2mV/67shQww61BH2Y/
Plnalo58kWIbkqZoq1yJrL5sFb73osM5+vADTXVn79bkvea7W19nSkdMiarYt4Hq
JQIDAQAB
-----END PUBLIC KEY-----
`;

// src/util.ts
function sanitizeMetadata(obj) {
  return JSON.stringify(obj, null, 2).replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/--/g, "&#45;&#45;");
}
function getPluginOptions(options) {
  return {
    // Important to use || and not ?? to not consider empty strings
    kernelPublicKey: options?.kernelPublicKey || KERNEL_PUBLIC_KEY,
    logLevel: options?.logLevel || LOG_LEVEL.INFO,
    postCommentOnError: options?.postCommentOnError ?? true,
    settingsSchema: options?.settingsSchema,
    envSchema: options?.envSchema,
    commandSchema: options?.commandSchema,
    bypassSignatureVerification: options?.bypassSignatureVerification || false
  };
}

// src/comment.ts
var CommentHandler = class _CommentHandler {
  static HEADER_NAME = "UbiquityOS";
  _lastCommentId = { reviewCommentId: null, issueCommentId: null };
  async _updateIssueComment(context2, params) {
    if (!this._lastCommentId.issueCommentId) {
      throw context2.logger.error("issueCommentId is missing");
    }
    const commentData = await context2.octokit.rest.issues.updateComment({
      owner: params.owner,
      repo: params.repo,
      comment_id: this._lastCommentId.issueCommentId,
      body: params.body
    });
    return { ...commentData.data, issueNumber: params.issueNumber };
  }
  async _updateReviewComment(context2, params) {
    if (!this._lastCommentId.reviewCommentId) {
      throw context2.logger.error("reviewCommentId is missing");
    }
    const commentData = await context2.octokit.rest.pulls.updateReviewComment({
      owner: params.owner,
      repo: params.repo,
      comment_id: this._lastCommentId.reviewCommentId,
      body: params.body
    });
    return { ...commentData.data, issueNumber: params.issueNumber };
  }
  async _createNewComment(context2, params) {
    if (params.commentId) {
      const commentData2 = await context2.octokit.rest.pulls.createReplyForReviewComment({
        owner: params.owner,
        repo: params.repo,
        pull_number: params.issueNumber,
        comment_id: params.commentId,
        body: params.body
      });
      this._lastCommentId.reviewCommentId = commentData2.data.id;
      return { ...commentData2.data, issueNumber: params.issueNumber };
    }
    const commentData = await context2.octokit.rest.issues.createComment({
      owner: params.owner,
      repo: params.repo,
      issue_number: params.issueNumber,
      body: params.body
    });
    this._lastCommentId.issueCommentId = commentData.data.id;
    return { ...commentData.data, issueNumber: params.issueNumber };
  }
  _getIssueNumber(context2) {
    if ("issue" in context2.payload) return context2.payload.issue.number;
    if ("pull_request" in context2.payload) return context2.payload.pull_request.number;
    if ("discussion" in context2.payload) return context2.payload.discussion.number;
    return void 0;
  }
  _getCommentId(context2) {
    return "pull_request" in context2.payload && "comment" in context2.payload ? context2.payload.comment.id : void 0;
  }
  _extractIssueContext(context2) {
    if (!("repository" in context2.payload) || !context2.payload.repository?.owner?.login) {
      return null;
    }
    const issueNumber = this._getIssueNumber(context2);
    if (!issueNumber) return null;
    return {
      issueNumber,
      commentId: this._getCommentId(context2),
      owner: context2.payload.repository.owner.login,
      repo: context2.payload.repository.name
    };
  }
  async _processMessage(context2, message) {
    if (message instanceof Error) {
      const metadata2 = {
        message: message.message,
        name: message.name,
        stack: message.stack
      };
      return { metadata: metadata2, logMessage: context2.logger.error(message.message).logMessage };
    }
    const metadata = message.metadata ? {
      ...message.metadata,
      message: message.metadata.message,
      stack: message.metadata.stack || message.metadata.error?.stack,
      caller: message.metadata.caller || message.metadata.error?.stack?.split("\n")[2]?.match(/at (\S+)/)?.[1]
    } : { ...message };
    return { metadata, logMessage: message.logMessage };
  }
  _getInstigatorName(context2) {
    if ("installation" in context2.payload && context2.payload.installation && "account" in context2.payload.installation && context2.payload.installation?.account?.name) {
      return context2.payload.installation?.account?.name;
    }
    return context2.payload.sender?.login || _CommentHandler.HEADER_NAME;
  }
  async _createMetadataContent(context2, metadata) {
    const jsonPretty = sanitizeMetadata(metadata);
    const instigatorName = this._getInstigatorName(context2);
    const runUrl = PluginRuntimeInfo.getInstance().runUrl;
    const version = await PluginRuntimeInfo.getInstance().version;
    const callingFnName = metadata.caller || "anonymous";
    return {
      header: `<!-- ${_CommentHandler.HEADER_NAME} - ${callingFnName} - ${version} - @${instigatorName} - ${runUrl}`,
      jsonPretty
    };
  }
  _formatMetadataContent(logMessage, header, jsonPretty) {
    const metadataVisible = ["```json", jsonPretty, "```"].join("\n");
    const metadataHidden = [header, jsonPretty, "-->"].join("\n");
    return logMessage?.type === "fatal" ? [metadataVisible, metadataHidden].join("\n") : metadataHidden;
  }
  async _createCommentBody(context2, message, options) {
    const { metadata, logMessage } = await this._processMessage(context2, message);
    const { header, jsonPretty } = await this._createMetadataContent(context2, metadata);
    const metadataContent = this._formatMetadataContent(logMessage, header, jsonPretty);
    return `${options.raw ? logMessage?.raw : logMessage?.diff}

${metadataContent}
`;
  }
  async postComment(context2, message, options = { updateComment: true, raw: false }) {
    const issueContext = this._extractIssueContext(context2);
    if (!issueContext) {
      context2.logger.info("Cannot post comment: missing issue context in payload");
      return null;
    }
    const body = await this._createCommentBody(context2, message, options);
    const { issueNumber, commentId, owner, repo } = issueContext;
    const params = { owner, repo, body, issueNumber };
    if (options.updateComment) {
      if (this._lastCommentId.issueCommentId && !("pull_request" in context2.payload && "comment" in context2.payload)) {
        return this._updateIssueComment(context2, params);
      }
      if (this._lastCommentId.reviewCommentId && "pull_request" in context2.payload && "comment" in context2.payload) {
        return this._updateReviewComment(context2, params);
      }
    }
    return this._createNewComment(context2, { ...params, commentId });
  }
};

// src/error.ts

function transformError(context2, error) {
  let loggerError;
  if (error instanceof AggregateError) {
    loggerError = context2.logger.error(
      error.errors.map((err) => {
        if (err instanceof LogReturn) {
          return err.logMessage.raw;
        } else if (err instanceof Error) {
          return err.message;
        } else {
          return err;
        }
      }).join("\n\n"),
      { error }
    );
  } else if (error instanceof Error || error instanceof LogReturn) {
    loggerError = error;
  } else {
    loggerError = context2.logger.error(String(error));
  }
  return loggerError;
}

// src/octokit.ts






var defaultOptions = {
  throttle: {
    onAbuseLimit: (retryAfter, options, octokit) => {
      octokit.log.warn(`Abuse limit hit with "${options.method} ${options.url}", retrying in ${retryAfter} seconds.`);
      return true;
    },
    onRateLimit: (retryAfter, options, octokit) => {
      octokit.log.warn(`Rate limit hit with "${options.method} ${options.url}", retrying in ${retryAfter} seconds.`);
      return true;
    },
    onSecondaryRateLimit: (retryAfter, options, octokit) => {
      octokit.log.warn(`Secondary rate limit hit with "${options.method} ${options.url}", retrying in ${retryAfter} seconds.`);
      return true;
    }
  }
};
var customOctokit = Octokit.plugin(throttling, retry, paginateRest, restEndpointMethods, paginateGraphQL).defaults((instanceOptions) => {
  return { ...defaultOptions, ...instanceOptions };
});

// src/signature.ts
async function verifySignature(publicKeyPem, inputs, signature) {
  try {
    const inputsOrdered = {
      stateId: inputs.stateId,
      eventName: inputs.eventName,
      eventPayload: inputs.eventPayload,
      settings: inputs.settings,
      authToken: inputs.authToken,
      ref: inputs.ref,
      command: inputs.command
    };
    const pemContents = publicKeyPem.replace("-----BEGIN PUBLIC KEY-----", "").replace("-----END PUBLIC KEY-----", "").trim();
    const binaryDer = Uint8Array.from(atob(pemContents), (c) => c.charCodeAt(0));
    const publicKey = await crypto.subtle.importKey(
      "spki",
      binaryDer,
      {
        name: "RSASSA-PKCS1-v1_5",
        hash: "SHA-256"
      },
      true,
      ["verify"]
    );
    const signatureArray = Uint8Array.from(atob(signature), (c) => c.charCodeAt(0));
    const dataArray = new TextEncoder().encode(JSON.stringify(inputsOrdered));
    return await crypto.subtle.verify("RSASSA-PKCS1-v1_5", publicKey, signatureArray, dataArray);
  } catch (error) {
    console.error(error);
    return false;
  }
}

// src/types/input-schema.ts


// src/types/command.ts

var commandCallSchema = Type.Union([Type.Null(), Type.Object({ name: Type.String(), parameters: Type.Unknown() })]);

// src/types/util.ts


function jsonType(type) {
  return Type.Transform(Type.String()).Decode((value) => {
    const parsed = JSON.parse(value);
    return Decode(type, default_Default(type, parsed));
  }).Encode((value) => JSON.stringify(value));
}

// src/types/input-schema.ts
var inputSchema = Type.Object({
  stateId: Type.String(),
  eventName: Type.String(),
  eventPayload: jsonType(Type.Record(Type.String(), Type.Any())),
  command: jsonType(commandCallSchema),
  authToken: Type.String(),
  settings: jsonType(Type.Record(Type.String(), Type.Any())),
  ref: Type.String(),
  signature: Type.String()
});

// src/server.ts
function createPlugin(handler, manifest, options) {
  const pluginOptions = getPluginOptions(options);
  const app = new Hono();
  app.get("/manifest.json", (ctx) => {
    return ctx.json(manifest);
  });
  app.post("/", async function appPost(ctx) {
    if (ctx.req.header("content-type") !== "application/json") {
      throw new HTTPException(400, { message: "Content-Type must be application/json" });
    }
    const body = await ctx.req.json();
    const inputSchemaErrors = [...Value2.Errors(inputSchema, body)];
    if (inputSchemaErrors.length) {
      console.dir(inputSchemaErrors, { depth: null });
      throw new HTTPException(400, { message: "Invalid body" });
    }
    const signature = body.signature;
    if (!pluginOptions.bypassSignatureVerification && !await verifySignature(pluginOptions.kernelPublicKey, body, signature)) {
      throw new HTTPException(400, { message: "Invalid signature" });
    }
    const inputs = Value2.Decode(inputSchema, body);
    let config2;
    if (pluginOptions.settingsSchema) {
      try {
        config2 = Value2.Decode(pluginOptions.settingsSchema, Value2.Default(pluginOptions.settingsSchema, inputs.settings));
      } catch (e) {
        console.dir(...Value2.Errors(pluginOptions.settingsSchema, inputs.settings), { depth: null });
        throw e;
      }
    } else {
      config2 = inputs.settings;
    }
    let env;
    const honoEnvironment = honoEnv(ctx);
    if (pluginOptions.envSchema) {
      try {
        env = Value2.Decode(pluginOptions.envSchema, Value2.Default(pluginOptions.envSchema, honoEnvironment));
      } catch (e) {
        console.dir(...Value2.Errors(pluginOptions.envSchema, honoEnvironment), { depth: null });
        throw e;
      }
    } else {
      env = ctx.env;
    }
    const workerName = new URL(inputs.ref).hostname.split(".")[0];
    PluginRuntimeInfo.getInstance({ ...env, CLOUDFLARE_WORKER_NAME: workerName });
    let command = null;
    if (inputs.command && pluginOptions.commandSchema) {
      try {
        command = Value2.Decode(pluginOptions.commandSchema, Value2.Default(pluginOptions.commandSchema, inputs.command));
      } catch (e) {
        console.log(...Value2.Errors(pluginOptions.commandSchema, inputs.command), { depth: null });
        throw e;
      }
    } else if (inputs.command) {
      command = inputs.command;
    }
    const context2 = {
      eventName: inputs.eventName,
      payload: inputs.eventPayload,
      command,
      octokit: new customOctokit({ auth: inputs.authToken }),
      config: config2,
      env,
      logger: new Logs(pluginOptions.logLevel),
      commentHandler: new CommentHandler()
    };
    try {
      const result = await handler(context2);
      return ctx.json({ stateId: inputs.stateId, output: result ?? {} });
    } catch (error) {
      console.error(error);
      const loggerError = transformError(context2, error);
      if (pluginOptions.postCommentOnError && loggerError) {
        await context2.commentHandler.postComment(context2, loggerError);
      }
      throw new HTTPException(500, { message: "Unexpected error" });
    }
  });
  return app;
}

// src/actions.ts





(0,main.config)();
async function createActionsPlugin(handler, options) {
  const pluginOptions = getPluginOptions(options);
  const pluginGithubToken = process.env.PLUGIN_GITHUB_TOKEN;
  if (!pluginGithubToken) {
    core.setFailed("Error: PLUGIN_GITHUB_TOKEN env is not set");
    return;
  }
  const body = github.context.payload.inputs;
  const inputSchemaErrors = [...Errors(inputSchema, body)];
  if (inputSchemaErrors.length) {
    console.dir(inputSchemaErrors, { depth: null });
    core.setFailed(`Error: Invalid inputs payload: ${inputSchemaErrors.map((o) => o.message).join(", ")}`);
    return;
  }
  const signature = body.signature;
  if (!pluginOptions.bypassSignatureVerification && !await verifySignature(pluginOptions.kernelPublicKey, body, signature)) {
    core.setFailed(`Error: Invalid signature`);
    return;
  }
  const inputs = Decode(inputSchema, body);
  let config2;
  if (pluginOptions.settingsSchema) {
    try {
      config2 = Decode(pluginOptions.settingsSchema, default_Default(pluginOptions.settingsSchema, inputs.settings));
    } catch (e) {
      console.dir(...Errors(pluginOptions.settingsSchema, inputs.settings), { depth: null });
      core.setFailed(`Error: Invalid settings provided.`);
      throw e;
    }
  } else {
    config2 = inputs.settings;
  }
  let env;
  if (pluginOptions.envSchema) {
    try {
      env = Decode(pluginOptions.envSchema, default_Default(pluginOptions.envSchema, process.env));
    } catch (e) {
      console.dir(...Errors(pluginOptions.envSchema, process.env), { depth: null });
      core.setFailed(`Error: Invalid environment provided.`);
      throw e;
    }
  } else {
    env = process.env;
  }
  let command = null;
  if (inputs.command && pluginOptions.commandSchema) {
    try {
      command = Decode(pluginOptions.commandSchema, default_Default(pluginOptions.commandSchema, inputs.command));
    } catch (e) {
      console.dir(...Errors(pluginOptions.commandSchema, inputs.command), { depth: null });
      throw e;
    }
  } else if (inputs.command) {
    command = inputs.command;
  }
  const context2 = {
    eventName: inputs.eventName,
    payload: inputs.eventPayload,
    command,
    octokit: new customOctokit({ auth: inputs.authToken }),
    config: config2,
    env,
    logger: new dist_Logs(pluginOptions.logLevel),
    commentHandler: new CommentHandler()
  };
  try {
    const result = await handler(context2);
    core.setOutput("result", result);
    await returnDataToKernel(pluginGithubToken, inputs.stateId, result);
  } catch (error) {
    console.error(error);
    const loggerError = transformError(context2, error);
    if (loggerError instanceof LogReturn) {
      core.setFailed(loggerError.logMessage.diff);
    } else if (loggerError instanceof Error) {
      core.setFailed(loggerError);
    }
    if (pluginOptions.postCommentOnError && loggerError) {
      await context2.commentHandler.postComment(context2, loggerError);
    }
  }
}
async function returnDataToKernel(repoToken, stateId, output) {
  const octokit = new customOctokit({ auth: repoToken });
  await octokit.rest.repos.createDispatchEvent({
    owner: github.context.repo.owner,
    repo: github.context.repo.repo,
    event_type: "return-data-to-ubiquity-os-kernel",
    client_payload: {
      state_id: stateId,
      output: output ? JSON.stringify(output) : null
    }
  });
}


;// CONCATENATED MODULE: ./src/types/env.ts


/**
 * Define sensitive environment variables here.
 *
 * These are fed into the worker/workflow as `env` and are
 * taken from either `dev.vars` or repository secrets.
 * They are used with `process.env` but are type-safe.
 */
const envSchema = Type.Object({
    OPENROUTER_API_KEY: Type.String(),
    UBIQUITY_OS_APP_NAME: Type.String({ default: "UbiquityOS" }),
    KERNEL_PUBLIC_KEY: Type.String({ default: "" }),
    LOG_LEVEL: Type.Enum(LOG_LEVEL, { default: LOG_LEVEL.INFO }),
}, { default: {} });

;// CONCATENATED MODULE: ./src/types/plugin-input.ts

/**
 * This should contain the properties of the bot config
 * that are required for the plugin to function.
 *
 * The kernel will extract those and pass them to the plugin,
 * which are built into the context object from setup().
 */
const pluginSettingsSchema = Type.Object({
    openRouterAiModel: Type.String({ default: "anthropic/claude-3.7-sonnet" }),
    openRouterBaseUrl: Type.String({ default: "https://openrouter.ai/api/v1" }),
}, { default: {} });

;// CONCATENATED MODULE: ./src/handlers/prompt.ts
const llmQuery = `Rewrite the issue specification based on the provided GitHub conversation. The conversation is ordered chronologically, with the first comment being the original issue body.
Consider the following guidelines:
1. Give highest priority to the original issue body (first comment), as it represents the issue author's initial intent
2. Give additional weight to any messages from the issue author (the person who wrote the first comment)
3. Incorporate clarifications and additional requirements from subsequent comments
4. Resolve any contradictions by favoring more recent comments, especially those from the issue author
5. Remove any ambiguities in the original specification
6. Format the specification in a clear, structured manner
7. Output ONLY the rewritten specification without additional commentary
Output the rewritten specification in markdown format.`;
function createSpecRewriteSysMsg(githubConversation, botName, issueAuthor) {
    // Extract the issue author from the first comment
    return [
        "You are tasked with rewriting GitHub issue specifications based on the entire conversation history. Your goal is to create a clear, comprehensive specification that incorporates all relevant information from the discussion.",
        "\n",
        "Guidelines:",
        "- The first comment in the conversation is the original issue body and should be given the highest weight",
        `- Comments from the issue author (${issueAuthor}) should be given additional weight`,
        "- Subsequent comments may contain clarifications, additional requirements, or modifications",
        "- When conflicts exist between comments, generally favor more recent information, especially from the issue author",
        "- Remove ambiguities and vague requirements",
        "- Organize the specification in a logical structure with clear sections",
        "- Include acceptance criteria when possible",
        "\n",
        `Your name is: ${botName}`,
        "\n",
        "GitHub Conversation (in chronological order):",
        githubConversation.join("\n"),
    ].join("\n");
}

;// CONCATENATED MODULE: ./src/adapters/open-router/helpers/open-router.ts
class SuperOpenRouter {
    client;
    context;
    constructor(client, context) {
        this.context = context;
        this.client = client;
    }
}

;// CONCATENATED MODULE: ./src/adapters/open-router/helpers/completions.ts


class OpenRouterCompletion extends SuperOpenRouter {
    constructor(client, context) {
        super(client, context);
    }
    async getModelMaxTokenLimit() {
        const response = await fetch("https://openrouter.ai/api/v1/models");
        const data = (await response.json());
        const model = data["data"].find((m) => m.id === this.context.config.openRouterAiModel);
        return model ? model.top_provider.context_length : null;
    }
    async getModelMaxOutputLimit() {
        const response = await fetch("https://openrouter.ai/api/v1/models");
        const data = (await response.json());
        const model = data["data"].find((m) => m.id === this.context.config.openRouterAiModel);
        return model ? model.top_provider.max_completion_tokens : null;
    }
    async createCompletion(model, githubConversation, botName, maxTokens) {
        const sysMsg = createSpecRewriteSysMsg(githubConversation, botName, this.context.payload.issue.user?.login);
        this.context.logger.debug(`System message: ${sysMsg}`);
        const res = (await this.client.chat.completions.create({
            model: model,
            messages: [
                {
                    role: "system",
                    content: sysMsg,
                },
                {
                    role: "user",
                    content: llmQuery,
                },
            ],
            max_tokens: maxTokens,
            temperature: 0,
        }));
        if (!res.choices || res.choices.length === 0) {
            throw this.context.logger.error(`Unexpected no response from LLM, Reason: ${res.error ? res.error.message : "No reason specified"}`);
        }
        const answer = res.choices[0].message.content;
        if (!answer) {
            throw this.context.logger.error("Unexpected response format: Expected text block");
        }
        const inputTokens = res.usage?.prompt_tokens;
        const completionTokens = res.usage?.completion_tokens;
        if (inputTokens && completionTokens) {
            this.context.logger.info(`Number of tokens used: ${inputTokens + completionTokens}`);
        }
        else {
            this.context.logger.info(`LLM did not output usage statistics`);
        }
        return answer;
    }
}

;// CONCATENATED MODULE: ./src/adapters/index.ts


function createAdapters(openRouter, context) {
    return {
        openRouter: {
            completions: new OpenRouterCompletion(openRouter, context),
            super: new SuperOpenRouter(openRouter, context),
        },
    };
}

// EXTERNAL MODULE: ./node_modules/@anthropic-ai/tokenizer/dist/cjs/index.js
var cjs = __nccwpck_require__(2597);
;// CONCATENATED MODULE: ./src/helpers/conversation-parsing.ts

/**
 * Fetches the conversation for a single GitHub issue including the original issue body
 * and all comments, formats them as "author: comment", and keeps track of token count.
 */
async function fetchIssueConversation(context, tokenLimits) {
    const conversation = [];
    const owner = context.payload.repository.owner.login;
    const repo = context.payload.repository.name;
    const issueNumber = context.payload.issue.number;
    const issue = context.payload.issue;
    const issueBody = `${issue.user?.login}: ${issue.body || "No description provided"}`;
    conversation.push(issueBody);
    const issueBodyTokenCount = (0,cjs.countTokens)(issueBody);
    tokenLimits.tokensRemaining -= issueBodyTokenCount;
    if (tokenLimits.tokensRemaining <= 0) {
        context.logger.info("Token limit reached after adding issue body, returning conversation as is");
        return conversation;
    }
    // Fetch all comments for the issue and remove issue body
    const comments = await context.octokit
        .paginate(context.octokit.rest.issues.listComments, {
        owner,
        repo,
        issue_number: issueNumber,
        per_page: 100,
    })
        .then((response) => response.splice(1));
    // get comments by newest first
    const sortedComments = comments.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
    for (const comment of sortedComments) {
        const formattedComment = `${comment.user?.login}: ${comment.body}`;
        const commentTokenCount = (0,cjs.countTokens)(formattedComment);
        // Check if adding this comment would exceed token limit
        if (tokenLimits.tokensRemaining - commentTokenCount <= 0) {
            context.logger.info("Token limit would be exceeded, stopping comment collection");
            break;
        }
        // Add comment at index 1 pushing existing comment forward and update token counts
        conversation.splice(1, 0, formattedComment);
        tokenLimits.tokensRemaining -= commentTokenCount;
    }
    return conversation;
}

;// CONCATENATED MODULE: ./src/handlers/spec-rewriter.ts



const ADMIN_ROLES = ["admin", "owner", "billing_manager"];
const COLLABORATOR_ROLES = ["write", "member", "collaborator"];
class SpecificationRewriter {
    context;
    constructor(context) {
        this.context = context;
    }
    async performSpecRewrite() {
        if (!(await this.canUserRewrite(this.context))) {
            throw this.context.logger.error("User does not have sufficient permissions to rewrite spec");
        }
        const rewrittenSpec = await this.rewriteSpec();
        await this.context.octokit.rest.issues.update({
            owner: this.context.payload.repository.owner.login,
            repo: this.context.payload.repository.name,
            issue_number: this.context.payload.issue.number,
            body: rewrittenSpec,
        });
        return { status: 200, reason: "Success" };
    }
    async rewriteSpec() {
        const { env: { UBIQUITY_OS_APP_NAME }, config: { openRouterAiModel }, adapters: { openRouter: { completions }, }, } = this.context;
        const sysPromptTokenCount = (0,cjs.countTokens)(createSpecRewriteSysMsg([], UBIQUITY_OS_APP_NAME, ""));
        const queryTokenCount = (0,cjs.countTokens)(llmQuery);
        const modelMaxTokenLimit = await this.context.adapters.openRouter.completions.getModelMaxTokenLimit();
        const maxCompletionTokens = await this.context.adapters.openRouter.completions.getModelMaxOutputLimit();
        if (!modelMaxTokenLimit || !maxCompletionTokens) {
            throw this.context.logger.error(`The token limits for configured model ${this.context.config.openRouterAiModel} were not found`);
        }
        const tokenLimits = {
            modelMaxTokenLimit,
            maxCompletionTokens,
            tokensRemaining: 0,
        };
        // what we start out with to include files
        tokenLimits.tokensRemaining = tokenLimits.modelMaxTokenLimit - tokenLimits.maxCompletionTokens - sysPromptTokenCount - queryTokenCount;
        const githubConversation = await fetchIssueConversation(this.context, tokenLimits);
        return await completions.createCompletion(openRouterAiModel, githubConversation, UBIQUITY_OS_APP_NAME, modelMaxTokenLimit);
    }
    async getUserRole(context) {
        const orgLogin = context.payload.organization?.login;
        const user = context.payload.sender.login;
        const { logger, octokit } = context;
        try {
            // Validate the organization login
            if (typeof orgLogin !== "string" || orgLogin.trim() === "") {
                throw new Error("Invalid organization name");
            }
            let role;
            try {
                const response = await octokit.rest.orgs.getMembershipForUser({
                    org: orgLogin,
                    username: user,
                });
                role = response.data.role.toLowerCase();
                return role;
            }
            catch (err) {
                logger.error("Could not get user membership", { err });
            }
            // If we failed to get organization membership, narrow down to repo role
            const permissionLevel = await octokit.rest.repos.getCollaboratorPermissionLevel({
                username: user,
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
            });
            role = permissionLevel.data.role_name?.toLowerCase();
            context.logger.debug(`Retrieved collaborator permission level for ${user}.`, {
                user,
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                isAdmin: permissionLevel.data.user?.permissions?.admin,
                role,
                data: permissionLevel.data,
            });
            return role;
        }
        catch (err) {
            logger.error("Could not get user role", { err });
            return "unknown";
        }
    }
    async canUserRewrite(context) {
        const userRole = await this.getUserRole(context);
        return ADMIN_ROLES.includes(userRole.toLowerCase()) || COLLABORATOR_ROLES.includes(userRole.toLowerCase());
    }
}
async function timeLabelChange(context) {
    if (context.payload.label?.name.toLowerCase().startsWith("time")) {
        const specificationRewriter = new SpecificationRewriter(context);
        return specificationRewriter.performSpecRewrite();
    }
    else {
        return { status: 204, reason: "Skipping spec rewrite because time label wasn't changed" };
    }
}

;// CONCATENATED MODULE: ./src/helpers/callback-proxy.ts

/**
 * The `callbacks` object defines an array of callback functions for each supported event type.
 *
 * Since multiple callbacks might need to be executed for a single event, we store each
 * callback in an array. This design allows for extensibility and flexibility, enabling
 * us to add more callbacks for a particular event without modifying the core logic.
 */
const callbacks = {
    "issues.labeled": [(context) => timeLabelChange(context)],
    "issue_comment.created": [(context) => new SpecificationRewriter(context).performSpecRewrite()],
};
async function callCallbacks(context, eventName) {
    if (!callbacks[eventName]) {
        context.logger.info(`No callbacks found for event ${eventName}`);
        return { status: 204, reason: "skipped" };
    }
    return (await Promise.all(callbacks[eventName].map((callback) => callback(context))))[0];
}

;// CONCATENATED MODULE: ./node_modules/openai/internal/qs/formats.mjs
const default_format = 'RFC3986';
const formatters = {
    RFC1738: (v) => String(v).replace(/%20/g, '+'),
    RFC3986: (v) => String(v),
};
const RFC1738 = 'RFC1738';
const RFC3986 = 'RFC3986';
//# sourceMappingURL=formats.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/internal/qs/utils.mjs

const has = Object.prototype.hasOwnProperty;
const is_array = Array.isArray;
const hex_table = (() => {
    const array = [];
    for (let i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }
    return array;
})();
function compact_queue(queue) {
    while (queue.length > 1) {
        const item = queue.pop();
        if (!item)
            continue;
        const obj = item.obj[item.prop];
        if (is_array(obj)) {
            const compacted = [];
            for (let j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j]);
                }
            }
            // @ts-ignore
            item.obj[item.prop] = compacted;
        }
    }
}
function array_to_object(source, options) {
    const obj = options && options.plainObjects ? Object.create(null) : {};
    for (let i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }
    return obj;
}
function utils_merge(target, source, options = {}) {
    if (!source) {
        return target;
    }
    if (typeof source !== 'object') {
        if (is_array(target)) {
            target.push(source);
        }
        else if (target && typeof target === 'object') {
            if ((options && (options.plainObjects || options.allowPrototypes)) ||
                !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        }
        else {
            return [target, source];
        }
        return target;
    }
    if (!target || typeof target !== 'object') {
        return [target].concat(source);
    }
    let mergeTarget = target;
    if (is_array(target) && !is_array(source)) {
        // @ts-ignore
        mergeTarget = array_to_object(target, options);
    }
    if (is_array(target) && is_array(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                const targetItem = target[i];
                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                    target[i] = utils_merge(targetItem, item, options);
                }
                else {
                    target.push(item);
                }
            }
            else {
                target[i] = item;
            }
        });
        return target;
    }
    return Object.keys(source).reduce(function (acc, key) {
        const value = source[key];
        if (has.call(acc, key)) {
            acc[key] = utils_merge(acc[key], value, options);
        }
        else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
}
function assign_single_source(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
}
function decode(str, _, charset) {
    const strWithoutPlus = str.replace(/\+/g, ' ');
    if (charset === 'iso-8859-1') {
        // unescape never throws, no try...catch needed:
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    }
    catch (e) {
        return strWithoutPlus;
    }
}
const limit = 1024;
const encode = (str, _defaultEncoder, charset, _kind, format) => {
    // This code was originally written by Brian White for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }
    let string = str;
    if (typeof str === 'symbol') {
        string = Symbol.prototype.toString.call(str);
    }
    else if (typeof str !== 'string') {
        string = String(str);
    }
    if (charset === 'iso-8859-1') {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
        });
    }
    let out = '';
    for (let j = 0; j < string.length; j += limit) {
        const segment = string.length >= limit ? string.slice(j, j + limit) : string;
        const arr = [];
        for (let i = 0; i < segment.length; ++i) {
            let c = segment.charCodeAt(i);
            if (c === 0x2d || // -
                c === 0x2e || // .
                c === 0x5f || // _
                c === 0x7e || // ~
                (c >= 0x30 && c <= 0x39) || // 0-9
                (c >= 0x41 && c <= 0x5a) || // a-z
                (c >= 0x61 && c <= 0x7a) || // A-Z
                (format === RFC1738 && (c === 0x28 || c === 0x29)) // ( )
            ) {
                arr[arr.length] = segment.charAt(i);
                continue;
            }
            if (c < 0x80) {
                arr[arr.length] = hex_table[c];
                continue;
            }
            if (c < 0x800) {
                arr[arr.length] = hex_table[0xc0 | (c >> 6)] + hex_table[0x80 | (c & 0x3f)];
                continue;
            }
            if (c < 0xd800 || c >= 0xe000) {
                arr[arr.length] =
                    hex_table[0xe0 | (c >> 12)] + hex_table[0x80 | ((c >> 6) & 0x3f)] + hex_table[0x80 | (c & 0x3f)];
                continue;
            }
            i += 1;
            c = 0x10000 + (((c & 0x3ff) << 10) | (segment.charCodeAt(i) & 0x3ff));
            arr[arr.length] =
                hex_table[0xf0 | (c >> 18)] +
                    hex_table[0x80 | ((c >> 12) & 0x3f)] +
                    hex_table[0x80 | ((c >> 6) & 0x3f)] +
                    hex_table[0x80 | (c & 0x3f)];
        }
        out += arr.join('');
    }
    return out;
};
function compact(value) {
    const queue = [{ obj: { o: value }, prop: 'o' }];
    const refs = [];
    for (let i = 0; i < queue.length; ++i) {
        const item = queue[i];
        // @ts-ignore
        const obj = item.obj[item.prop];
        const keys = Object.keys(obj);
        for (let j = 0; j < keys.length; ++j) {
            const key = keys[j];
            const val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                queue.push({ obj: obj, prop: key });
                refs.push(val);
            }
        }
    }
    compact_queue(queue);
    return value;
}
function is_regexp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
}
function is_buffer(obj) {
    if (!obj || typeof obj !== 'object') {
        return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
}
function combine(a, b) {
    return [].concat(a, b);
}
function maybe_map(val, fn) {
    if (is_array(val)) {
        const mapped = [];
        for (let i = 0; i < val.length; i += 1) {
            mapped.push(fn(val[i]));
        }
        return mapped;
    }
    return fn(val);
}
//# sourceMappingURL=utils.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/internal/qs/stringify.mjs


const stringify_has = Object.prototype.hasOwnProperty;
const array_prefix_generators = {
    brackets(prefix) {
        return String(prefix) + '[]';
    },
    comma: 'comma',
    indices(prefix, key) {
        return String(prefix) + '[' + key + ']';
    },
    repeat(prefix) {
        return String(prefix);
    },
};
const stringify_is_array = Array.isArray;
const push = Array.prototype.push;
const push_to_array = function (arr, value_or_array) {
    push.apply(arr, stringify_is_array(value_or_array) ? value_or_array : [value_or_array]);
};
const to_ISO = Date.prototype.toISOString;
const defaults = {
    addQueryPrefix: false,
    allowDots: false,
    allowEmptyArrays: false,
    arrayFormat: 'indices',
    charset: 'utf-8',
    charsetSentinel: false,
    delimiter: '&',
    encode: true,
    encodeDotInKeys: false,
    encoder: encode,
    encodeValuesOnly: false,
    format: default_format,
    formatter: formatters[default_format],
    /** @deprecated */
    indices: false,
    serializeDate(date) {
        return to_ISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false,
};
function is_non_nullish_primitive(v) {
    return (typeof v === 'string' ||
        typeof v === 'number' ||
        typeof v === 'boolean' ||
        typeof v === 'symbol' ||
        typeof v === 'bigint');
}
const sentinel = {};
function inner_stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
    let obj = object;
    let tmp_sc = sideChannel;
    let step = 0;
    let find_flag = false;
    while ((tmp_sc = tmp_sc.get(sentinel)) !== void undefined && !find_flag) {
        // Where object last appeared in the ref tree
        const pos = tmp_sc.get(object);
        step += 1;
        if (typeof pos !== 'undefined') {
            if (pos === step) {
                throw new RangeError('Cyclic object value');
            }
            else {
                find_flag = true; // Break while
            }
        }
        if (typeof tmp_sc.get(sentinel) === 'undefined') {
            step = 0;
        }
    }
    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    }
    else if (obj instanceof Date) {
        obj = serializeDate?.(obj);
    }
    else if (generateArrayPrefix === 'comma' && stringify_is_array(obj)) {
        obj = maybe_map(obj, function (value) {
            if (value instanceof Date) {
                return serializeDate?.(value);
            }
            return value;
        });
    }
    if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ?
                // @ts-expect-error
                encoder(prefix, defaults.encoder, charset, 'key', format)
                : prefix;
        }
        obj = '';
    }
    if (is_non_nullish_primitive(obj) || is_buffer(obj)) {
        if (encoder) {
            const key_value = encodeValuesOnly ? prefix
                // @ts-expect-error
                : encoder(prefix, defaults.encoder, charset, 'key', format);
            return [
                formatter?.(key_value) +
                    '=' +
                    // @ts-expect-error
                    formatter?.(encoder(obj, defaults.encoder, charset, 'value', format)),
            ];
        }
        return [formatter?.(prefix) + '=' + formatter?.(String(obj))];
    }
    const values = [];
    if (typeof obj === 'undefined') {
        return values;
    }
    let obj_keys;
    if (generateArrayPrefix === 'comma' && stringify_is_array(obj)) {
        // we need to join elements in
        if (encodeValuesOnly && encoder) {
            // @ts-expect-error values only
            obj = maybe_map(obj, encoder);
        }
        obj_keys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];
    }
    else if (stringify_is_array(filter)) {
        obj_keys = filter;
    }
    else {
        const keys = Object.keys(obj);
        obj_keys = sort ? keys.sort(sort) : keys;
    }
    const encoded_prefix = encodeDotInKeys ? String(prefix).replace(/\./g, '%2E') : String(prefix);
    const adjusted_prefix = commaRoundTrip && stringify_is_array(obj) && obj.length === 1 ? encoded_prefix + '[]' : encoded_prefix;
    if (allowEmptyArrays && stringify_is_array(obj) && obj.length === 0) {
        return adjusted_prefix + '[]';
    }
    for (let j = 0; j < obj_keys.length; ++j) {
        const key = obj_keys[j];
        const value = 
        // @ts-ignore
        typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];
        if (skipNulls && value === null) {
            continue;
        }
        // @ts-ignore
        const encoded_key = allowDots && encodeDotInKeys ? key.replace(/\./g, '%2E') : key;
        const key_prefix = stringify_is_array(obj) ?
            typeof generateArrayPrefix === 'function' ?
                generateArrayPrefix(adjusted_prefix, encoded_key)
                : adjusted_prefix
            : adjusted_prefix + (allowDots ? '.' + encoded_key : '[' + encoded_key + ']');
        sideChannel.set(object, step);
        const valueSideChannel = new WeakMap();
        valueSideChannel.set(sentinel, sideChannel);
        push_to_array(values, inner_stringify(value, key_prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, 
        // @ts-ignore
        generateArrayPrefix === 'comma' && encodeValuesOnly && stringify_is_array(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
    }
    return values;
}
function normalize_stringify_options(opts = defaults) {
    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {
        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');
    }
    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {
        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');
    }
    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }
    const charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }
    let format = default_format;
    if (typeof opts.format !== 'undefined') {
        if (!stringify_has.call(formatters, opts.format)) {
            throw new TypeError('Unknown format option provided.');
        }
        format = opts.format;
    }
    const formatter = formatters[format];
    let filter = defaults.filter;
    if (typeof opts.filter === 'function' || stringify_is_array(opts.filter)) {
        filter = opts.filter;
    }
    let arrayFormat;
    if (opts.arrayFormat && opts.arrayFormat in array_prefix_generators) {
        arrayFormat = opts.arrayFormat;
    }
    else if ('indices' in opts) {
        arrayFormat = opts.indices ? 'indices' : 'repeat';
    }
    else {
        arrayFormat = defaults.arrayFormat;
    }
    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {
        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
    }
    const allowDots = typeof opts.allowDots === 'undefined' ?
        !!opts.encodeDotInKeys === true ?
            true
            : defaults.allowDots
        : !!opts.allowDots;
    return {
        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
        // @ts-ignore
        allowDots: allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        arrayFormat: arrayFormat,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        commaRoundTrip: !!opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter,
        format: format,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
        // @ts-ignore
        sort: typeof opts.sort === 'function' ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling,
    };
}
function stringify(object, opts = {}) {
    let obj = object;
    const options = normalize_stringify_options(opts);
    let obj_keys;
    let filter;
    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    }
    else if (stringify_is_array(options.filter)) {
        filter = options.filter;
        obj_keys = filter;
    }
    const keys = [];
    if (typeof obj !== 'object' || obj === null) {
        return '';
    }
    const generateArrayPrefix = array_prefix_generators[options.arrayFormat];
    const commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;
    if (!obj_keys) {
        obj_keys = Object.keys(obj);
    }
    if (options.sort) {
        obj_keys.sort(options.sort);
    }
    const sideChannel = new WeakMap();
    for (let i = 0; i < obj_keys.length; ++i) {
        const key = obj_keys[i];
        if (options.skipNulls && obj[key] === null) {
            continue;
        }
        push_to_array(keys, inner_stringify(obj[key], key, 
        // @ts-expect-error
        generateArrayPrefix, commaRoundTrip, options.allowEmptyArrays, options.strictNullHandling, options.skipNulls, options.encodeDotInKeys, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
    }
    const joined = keys.join(options.delimiter);
    let prefix = options.addQueryPrefix === true ? '?' : '';
    if (options.charsetSentinel) {
        if (options.charset === 'iso-8859-1') {
            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
            prefix += 'utf8=%26%2310003%3B&';
        }
        else {
            // encodeURIComponent('✓')
            prefix += 'utf8=%E2%9C%93&';
        }
    }
    return joined.length > 0 ? prefix + joined : '';
}
//# sourceMappingURL=stringify.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/version.mjs
const openai_version_VERSION = '4.89.1'; // x-release-please-version
//# sourceMappingURL=version.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/_shims/registry.mjs
let auto = false;
let kind = undefined;
let registry_fetch = undefined;
let registry_Request = (/* unused pure expression or super */ null && (undefined));
let registry_Response = (/* unused pure expression or super */ null && (undefined));
let registry_Headers = (/* unused pure expression or super */ null && (undefined));
let FormData = undefined;
let main_Blob = (/* unused pure expression or super */ null && (undefined));
let registry_File = undefined;
let ReadableStream = undefined;
let registry_getMultipartRequestOptions = undefined;
let getDefaultAgent = undefined;
let fileFromPath = undefined;
let isFsReadStream = undefined;
function setShims(shims, options = { auto: false }) {
    if (auto) {
        throw new Error(`you must \`import 'openai/shims/${shims.kind}'\` before importing anything else from openai`);
    }
    if (kind) {
        throw new Error(`can't \`import 'openai/shims/${shims.kind}'\` after \`import 'openai/shims/${kind}'\``);
    }
    auto = options.auto;
    kind = shims.kind;
    registry_fetch = shims.fetch;
    registry_Request = shims.Request;
    registry_Response = shims.Response;
    registry_Headers = shims.Headers;
    FormData = shims.FormData;
    main_Blob = shims.Blob;
    registry_File = shims.File;
    ReadableStream = shims.ReadableStream;
    registry_getMultipartRequestOptions = shims.getMultipartRequestOptions;
    getDefaultAgent = shims.getDefaultAgent;
    fileFromPath = shims.fileFromPath;
    isFsReadStream = shims.isFsReadStream;
}
//# sourceMappingURL=registry.mjs.map
// EXTERNAL MODULE: ./node_modules/node-fetch/lib/index.js
var lib = __nccwpck_require__(2276);
// EXTERNAL MODULE: external "util"
var external_util_ = __nccwpck_require__(9023);
// EXTERNAL MODULE: ./node_modules/formdata-node/lib/esm/File.js
var esm_File = __nccwpck_require__(1365);
// EXTERNAL MODULE: ./node_modules/formdata-node/lib/esm/isFile.js
var isFile = __nccwpck_require__(7501);
// EXTERNAL MODULE: ./node_modules/formdata-node/lib/esm/Blob.js + 2 modules
var esm_Blob = __nccwpck_require__(4777);
;// CONCATENATED MODULE: ./node_modules/formdata-node/lib/esm/isBlob.js

const isBlob = (value) => value instanceof esm_Blob/* Blob */.Y;

// EXTERNAL MODULE: ./node_modules/formdata-node/lib/esm/isFunction.js
var isFunction = __nccwpck_require__(6755);
;// CONCATENATED MODULE: ./node_modules/formdata-node/lib/esm/deprecateConstructorEntries.js

const deprecateConstructorEntries = (0,external_util_.deprecate)(() => { }, "Constructor \"entries\" argument is not spec-compliant "
    + "and will be removed in next major release.");

;// CONCATENATED MODULE: ./node_modules/formdata-node/lib/esm/FormData.js
var __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FormData_instances, _FormData_entries, _FormData_setEntry;






class FormData_FormData {
    constructor(entries) {
        _FormData_instances.add(this);
        _FormData_entries.set(this, new Map());
        if (entries) {
            deprecateConstructorEntries();
            entries.forEach(({ name, value, fileName }) => this.append(name, value, fileName));
        }
    }
    static [(_FormData_entries = new WeakMap(), _FormData_instances = new WeakSet(), Symbol.hasInstance)](value) {
        return Boolean(value
            && (0,isFunction/* isFunction */.T)(value.constructor)
            && value[Symbol.toStringTag] === "FormData"
            && (0,isFunction/* isFunction */.T)(value.append)
            && (0,isFunction/* isFunction */.T)(value.set)
            && (0,isFunction/* isFunction */.T)(value.get)
            && (0,isFunction/* isFunction */.T)(value.getAll)
            && (0,isFunction/* isFunction */.T)(value.has)
            && (0,isFunction/* isFunction */.T)(value.delete)
            && (0,isFunction/* isFunction */.T)(value.entries)
            && (0,isFunction/* isFunction */.T)(value.values)
            && (0,isFunction/* isFunction */.T)(value.keys)
            && (0,isFunction/* isFunction */.T)(value[Symbol.iterator])
            && (0,isFunction/* isFunction */.T)(value.forEach));
    }
    append(name, value, fileName) {
        __classPrivateFieldGet(this, _FormData_instances, "m", _FormData_setEntry).call(this, {
            name,
            fileName,
            append: true,
            rawValue: value,
            argsLength: arguments.length
        });
    }
    set(name, value, fileName) {
        __classPrivateFieldGet(this, _FormData_instances, "m", _FormData_setEntry).call(this, {
            name,
            fileName,
            append: false,
            rawValue: value,
            argsLength: arguments.length
        });
    }
    get(name) {
        const field = __classPrivateFieldGet(this, _FormData_entries, "f").get(String(name));
        if (!field) {
            return null;
        }
        return field[0];
    }
    getAll(name) {
        const field = __classPrivateFieldGet(this, _FormData_entries, "f").get(String(name));
        if (!field) {
            return [];
        }
        return field.slice();
    }
    has(name) {
        return __classPrivateFieldGet(this, _FormData_entries, "f").has(String(name));
    }
    delete(name) {
        __classPrivateFieldGet(this, _FormData_entries, "f").delete(String(name));
    }
    *keys() {
        for (const key of __classPrivateFieldGet(this, _FormData_entries, "f").keys()) {
            yield key;
        }
    }
    *entries() {
        for (const name of this.keys()) {
            const values = this.getAll(name);
            for (const value of values) {
                yield [name, value];
            }
        }
    }
    *values() {
        for (const [, value] of this) {
            yield value;
        }
    }
    [(_FormData_setEntry = function _FormData_setEntry({ name, rawValue, append, fileName, argsLength }) {
        const methodName = append ? "append" : "set";
        if (argsLength < 2) {
            throw new TypeError(`Failed to execute '${methodName}' on 'FormData': `
                + `2 arguments required, but only ${argsLength} present.`);
        }
        name = String(name);
        let value;
        if ((0,isFile/* isFile */.f)(rawValue)) {
            value = fileName === undefined
                ? rawValue
                : new esm_File/* File */.Z([rawValue], fileName, {
                    type: rawValue.type,
                    lastModified: rawValue.lastModified
                });
        }
        else if (isBlob(rawValue)) {
            value = new esm_File/* File */.Z([rawValue], fileName === undefined ? "blob" : fileName, {
                type: rawValue.type
            });
        }
        else if (fileName) {
            throw new TypeError(`Failed to execute '${methodName}' on 'FormData': `
                + "parameter 2 is not of type 'Blob'.");
        }
        else {
            value = String(rawValue);
        }
        const values = __classPrivateFieldGet(this, _FormData_entries, "f").get(name);
        if (!values) {
            return void __classPrivateFieldGet(this, _FormData_entries, "f").set(name, [value]);
        }
        if (!append) {
            return void __classPrivateFieldGet(this, _FormData_entries, "f").set(name, [value]);
        }
        values.push(value);
    }, Symbol.iterator)]() {
        return this.entries();
    }
    forEach(callback, thisArg) {
        for (const [name, value] of this) {
            callback.call(thisArg, value, name, this);
        }
    }
    get [Symbol.toStringTag]() {
        return "FormData";
    }
    [external_util_.inspect.custom]() {
        return this[Symbol.toStringTag];
    }
}

;// CONCATENATED MODULE: ./node_modules/formdata-node/lib/esm/index.js




// EXTERNAL MODULE: ./node_modules/agentkeepalive/index.js
var agentkeepalive = __nccwpck_require__(2236);
// EXTERNAL MODULE: ./node_modules/abort-controller/dist/abort-controller.js
var abort_controller = __nccwpck_require__(4952);
;// CONCATENATED MODULE: external "node:fs"
const external_node_fs_namespaceObject = require("node:fs");
;// CONCATENATED MODULE: ./node_modules/form-data-encoder/lib/esm/util/createBoundary.js
const alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";
function createBoundary() {
    let size = 16;
    let res = "";
    while (size--) {
        res += alphabet[(Math.random() * alphabet.length) << 0];
    }
    return res;
}
/* harmony default export */ const util_createBoundary = (createBoundary);

;// CONCATENATED MODULE: ./node_modules/form-data-encoder/lib/esm/util/isPlainObject.js
const getType = (value) => (Object.prototype.toString.call(value).slice(8, -1).toLowerCase());
function isPlainObject_isPlainObject(value) {
    if (getType(value) !== "object") {
        return false;
    }
    const pp = Object.getPrototypeOf(value);
    if (pp === null || pp === undefined) {
        return true;
    }
    const Ctor = pp.constructor && pp.constructor.toString();
    return Ctor === Object.toString();
}
/* harmony default export */ const util_isPlainObject = (isPlainObject_isPlainObject);

;// CONCATENATED MODULE: ./node_modules/form-data-encoder/lib/esm/util/normalizeValue.js
const normalizeValue = (value) => String(value)
    .replace(/\r|\n/g, (match, i, str) => {
    if ((match === "\r" && str[i + 1] !== "\n")
        || (match === "\n" && str[i - 1] !== "\r")) {
        return "\r\n";
    }
    return match;
});
/* harmony default export */ const util_normalizeValue = (normalizeValue);

;// CONCATENATED MODULE: ./node_modules/form-data-encoder/lib/esm/util/escapeName.js
const escapeName = (name) => String(name)
    .replace(/\r/g, "%0D")
    .replace(/\n/g, "%0A")
    .replace(/"/g, "%22");
/* harmony default export */ const util_escapeName = (escapeName);

;// CONCATENATED MODULE: ./node_modules/form-data-encoder/lib/esm/util/isFunction.js
const isFunction_isFunction = (value) => (typeof value === "function");
/* harmony default export */ const util_isFunction = (isFunction_isFunction);

;// CONCATENATED MODULE: ./node_modules/form-data-encoder/lib/esm/util/isFileLike.js

const isFileLike = (value) => Boolean(value
    && typeof value === "object"
    && util_isFunction(value.constructor)
    && value[Symbol.toStringTag] === "File"
    && util_isFunction(value.stream)
    && value.name != null
    && value.size != null
    && value.lastModified != null);

;// CONCATENATED MODULE: ./node_modules/form-data-encoder/lib/esm/util/isFormData.js

const isFormData = (value) => Boolean(value
    && util_isFunction(value.constructor)
    && value[Symbol.toStringTag] === "FormData"
    && util_isFunction(value.append)
    && util_isFunction(value.getAll)
    && util_isFunction(value.entries)
    && util_isFunction(value[Symbol.iterator]));
const isFormDataLike = (/* unused pure expression or super */ null && (isFormData));

;// CONCATENATED MODULE: ./node_modules/form-data-encoder/lib/esm/FormDataEncoder.js
var __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var FormDataEncoder_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FormDataEncoder_instances, _FormDataEncoder_CRLF, _FormDataEncoder_CRLF_BYTES, _FormDataEncoder_CRLF_BYTES_LENGTH, _FormDataEncoder_DASHES, _FormDataEncoder_encoder, _FormDataEncoder_footer, _FormDataEncoder_form, _FormDataEncoder_options, _FormDataEncoder_getFieldHeader;






const FormDataEncoder_defaultOptions = {
    enableAdditionalHeaders: false
};
class FormDataEncoder {
    constructor(form, boundaryOrOptions, options) {
        _FormDataEncoder_instances.add(this);
        _FormDataEncoder_CRLF.set(this, "\r\n");
        _FormDataEncoder_CRLF_BYTES.set(this, void 0);
        _FormDataEncoder_CRLF_BYTES_LENGTH.set(this, void 0);
        _FormDataEncoder_DASHES.set(this, "-".repeat(2));
        _FormDataEncoder_encoder.set(this, new TextEncoder());
        _FormDataEncoder_footer.set(this, void 0);
        _FormDataEncoder_form.set(this, void 0);
        _FormDataEncoder_options.set(this, void 0);
        if (!isFormData(form)) {
            throw new TypeError("Expected first argument to be a FormData instance.");
        }
        let boundary;
        if (util_isPlainObject(boundaryOrOptions)) {
            options = boundaryOrOptions;
        }
        else {
            boundary = boundaryOrOptions;
        }
        if (!boundary) {
            boundary = util_createBoundary();
        }
        if (typeof boundary !== "string") {
            throw new TypeError("Expected boundary argument to be a string.");
        }
        if (options && !util_isPlainObject(options)) {
            throw new TypeError("Expected options argument to be an object.");
        }
        __classPrivateFieldSet(this, _FormDataEncoder_form, form, "f");
        __classPrivateFieldSet(this, _FormDataEncoder_options, { ...FormDataEncoder_defaultOptions, ...options }, "f");
        __classPrivateFieldSet(this, _FormDataEncoder_CRLF_BYTES, FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_encoder, "f").encode(FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_CRLF, "f")), "f");
        __classPrivateFieldSet(this, _FormDataEncoder_CRLF_BYTES_LENGTH, FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_CRLF_BYTES, "f").byteLength, "f");
        this.boundary = `form-data-boundary-${boundary}`;
        this.contentType = `multipart/form-data; boundary=${this.boundary}`;
        __classPrivateFieldSet(this, _FormDataEncoder_footer, FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_encoder, "f").encode(`${FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_DASHES, "f")}${this.boundary}${FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_DASHES, "f")}${FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_CRLF, "f").repeat(2)}`), "f");
        this.contentLength = String(this.getContentLength());
        this.headers = Object.freeze({
            "Content-Type": this.contentType,
            "Content-Length": this.contentLength
        });
        Object.defineProperties(this, {
            boundary: { writable: false, configurable: false },
            contentType: { writable: false, configurable: false },
            contentLength: { writable: false, configurable: false },
            headers: { writable: false, configurable: false }
        });
    }
    getContentLength() {
        let length = 0;
        for (const [name, raw] of FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_form, "f")) {
            const value = isFileLike(raw) ? raw : FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_encoder, "f").encode(util_normalizeValue(raw));
            length += FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_instances, "m", _FormDataEncoder_getFieldHeader).call(this, name, value).byteLength;
            length += isFileLike(value) ? value.size : value.byteLength;
            length += FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_CRLF_BYTES_LENGTH, "f");
        }
        return length + FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_footer, "f").byteLength;
    }
    *values() {
        for (const [name, raw] of FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_form, "f").entries()) {
            const value = isFileLike(raw) ? raw : FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_encoder, "f").encode(util_normalizeValue(raw));
            yield FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_instances, "m", _FormDataEncoder_getFieldHeader).call(this, name, value);
            yield value;
            yield FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_CRLF_BYTES, "f");
        }
        yield FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_footer, "f");
    }
    async *encode() {
        for (const part of this.values()) {
            if (isFileLike(part)) {
                yield* part.stream();
            }
            else {
                yield part;
            }
        }
    }
    [(_FormDataEncoder_CRLF = new WeakMap(), _FormDataEncoder_CRLF_BYTES = new WeakMap(), _FormDataEncoder_CRLF_BYTES_LENGTH = new WeakMap(), _FormDataEncoder_DASHES = new WeakMap(), _FormDataEncoder_encoder = new WeakMap(), _FormDataEncoder_footer = new WeakMap(), _FormDataEncoder_form = new WeakMap(), _FormDataEncoder_options = new WeakMap(), _FormDataEncoder_instances = new WeakSet(), _FormDataEncoder_getFieldHeader = function _FormDataEncoder_getFieldHeader(name, value) {
        let header = "";
        header += `${FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_DASHES, "f")}${this.boundary}${FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_CRLF, "f")}`;
        header += `Content-Disposition: form-data; name="${util_escapeName(name)}"`;
        if (isFileLike(value)) {
            header += `; filename="${util_escapeName(value.name)}"${FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_CRLF, "f")}`;
            header += `Content-Type: ${value.type || "application/octet-stream"}`;
        }
        if (FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_options, "f").enableAdditionalHeaders === true) {
            header += `${FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_CRLF, "f")}Content-Length: ${isFileLike(value) ? value.size : value.byteLength}`;
        }
        return FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_encoder, "f").encode(`${header}${FormDataEncoder_classPrivateFieldGet(this, _FormDataEncoder_CRLF, "f").repeat(2)}`);
    }, Symbol.iterator)]() {
        return this.values();
    }
    [Symbol.asyncIterator]() {
        return this.encode();
    }
}
const Encoder = (/* unused pure expression or super */ null && (FormDataEncoder));

;// CONCATENATED MODULE: ./node_modules/form-data-encoder/lib/esm/index.js






// EXTERNAL MODULE: external "node:stream"
var external_node_stream_ = __nccwpck_require__(7075);
;// CONCATENATED MODULE: ./node_modules/openai/_shims/MultipartBody.mjs
/**
 * Disclaimer: modules in _shims aren't intended to be imported by SDK users.
 */
class MultipartBody {
    constructor(body) {
        this.body = body;
    }
    get [Symbol.toStringTag]() {
        return 'MultipartBody';
    }
}
//# sourceMappingURL=MultipartBody.mjs.map
;// CONCATENATED MODULE: external "node:stream/web"
const web_namespaceObject = require("node:stream/web");
;// CONCATENATED MODULE: ./node_modules/openai/_shims/node-runtime.mjs









let fileFromPathWarned = false;
async function node_runtime_fileFromPath(path, ...args) {
    // this import fails in environments that don't handle export maps correctly, like old versions of Jest
    const { fileFromPath: _fileFromPath } = await __nccwpck_require__.e(/* import() */ 199).then(__nccwpck_require__.bind(__nccwpck_require__, 8199));
    if (!fileFromPathWarned) {
        console.warn(`fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(path)}) instead`);
        fileFromPathWarned = true;
    }
    // @ts-ignore
    return await _fileFromPath(path, ...args);
}
const defaultHttpAgent = new agentkeepalive({ keepAlive: true, timeout: 5 * 60 * 1000 });
const defaultHttpsAgent = new agentkeepalive.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });
async function node_runtime_getMultipartRequestOptions(form, opts) {
    const encoder = new FormDataEncoder(form);
    const readable = external_node_stream_.Readable.from(encoder);
    const body = new MultipartBody(readable);
    const headers = {
        ...opts.headers,
        ...encoder.headers,
        'Content-Length': encoder.contentLength,
    };
    return { ...opts, body: body, headers };
}
function getRuntime() {
    // Polyfill global object if needed.
    if (typeof AbortController === 'undefined') {
        // @ts-expect-error (the types are subtly different, but compatible in practice)
        globalThis.AbortController = abort_controller.AbortController;
    }
    return {
        kind: 'node',
        fetch: lib,
        Request: lib.Request,
        Response: lib.Response,
        Headers: lib.Headers,
        FormData: FormData_FormData,
        Blob: esm_Blob/* Blob */.Y,
        File: esm_File/* File */.Z,
        ReadableStream: web_namespaceObject.ReadableStream,
        getMultipartRequestOptions: node_runtime_getMultipartRequestOptions,
        getDefaultAgent: (url) => (url.startsWith('https') ? defaultHttpsAgent : defaultHttpAgent),
        fileFromPath: node_runtime_fileFromPath,
        isFsReadStream: (value) => value instanceof external_node_fs_namespaceObject.ReadStream,
    };
}
//# sourceMappingURL=node-runtime.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/_shims/index.mjs
/**
 * Disclaimer: modules in _shims aren't intended to be imported by SDK users.
 */


if (!kind) setShims(getRuntime(), { auto: true });


;// CONCATENATED MODULE: ./node_modules/openai/error.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

class error_OpenAIError extends Error {
}
class APIError extends error_OpenAIError {
    constructor(status, error, message, headers) {
        super(`${APIError.makeMessage(status, error, message)}`);
        this.status = status;
        this.headers = headers;
        this.request_id = headers?.['x-request-id'];
        this.error = error;
        const data = error;
        this.code = data?.['code'];
        this.param = data?.['param'];
        this.type = data?.['type'];
    }
    static makeMessage(status, error, message) {
        const msg = error?.message ?
            typeof error.message === 'string' ?
                error.message
                : JSON.stringify(error.message)
            : error ? JSON.stringify(error)
                : message;
        if (status && msg) {
            return `${status} ${msg}`;
        }
        if (status) {
            return `${status} status code (no body)`;
        }
        if (msg) {
            return msg;
        }
        return '(no status code or body)';
    }
    static generate(status, errorResponse, message, headers) {
        if (!status || !headers) {
            return new APIConnectionError({ message, cause: castToError(errorResponse) });
        }
        const error = errorResponse?.['error'];
        if (status === 400) {
            return new BadRequestError(status, error, message, headers);
        }
        if (status === 401) {
            return new AuthenticationError(status, error, message, headers);
        }
        if (status === 403) {
            return new PermissionDeniedError(status, error, message, headers);
        }
        if (status === 404) {
            return new NotFoundError(status, error, message, headers);
        }
        if (status === 409) {
            return new ConflictError(status, error, message, headers);
        }
        if (status === 422) {
            return new UnprocessableEntityError(status, error, message, headers);
        }
        if (status === 429) {
            return new RateLimitError(status, error, message, headers);
        }
        if (status >= 500) {
            return new InternalServerError(status, error, message, headers);
        }
        return new APIError(status, error, message, headers);
    }
}
class APIUserAbortError extends APIError {
    constructor({ message } = {}) {
        super(undefined, undefined, message || 'Request was aborted.', undefined);
    }
}
class APIConnectionError extends APIError {
    constructor({ message, cause }) {
        super(undefined, undefined, message || 'Connection error.', undefined);
        // in some environments the 'cause' property is already declared
        // @ts-ignore
        if (cause)
            this.cause = cause;
    }
}
class APIConnectionTimeoutError extends APIConnectionError {
    constructor({ message } = {}) {
        super({ message: message ?? 'Request timed out.' });
    }
}
class BadRequestError extends APIError {
}
class AuthenticationError extends APIError {
}
class PermissionDeniedError extends APIError {
}
class NotFoundError extends APIError {
}
class ConflictError extends APIError {
}
class UnprocessableEntityError extends APIError {
}
class RateLimitError extends APIError {
}
class InternalServerError extends APIError {
}
class LengthFinishReasonError extends error_OpenAIError {
    constructor() {
        super(`Could not parse response content as the length limit was reached`);
    }
}
class ContentFilterFinishReasonError extends error_OpenAIError {
    constructor() {
        super(`Could not parse response content as the request was rejected by the content filter`);
    }
}
//# sourceMappingURL=error.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/internal/decoders/line.mjs
var line_classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var line_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LineDecoder_carriageReturnIndex;

/**
 * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally
 * reading lines from text.
 *
 * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258
 */
class LineDecoder {
    constructor() {
        _LineDecoder_carriageReturnIndex.set(this, void 0);
        this.buffer = new Uint8Array();
        line_classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, "f");
    }
    decode(chunk) {
        if (chunk == null) {
            return [];
        }
        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk)
            : typeof chunk === 'string' ? new TextEncoder().encode(chunk)
                : chunk;
        let newData = new Uint8Array(this.buffer.length + binaryChunk.length);
        newData.set(this.buffer);
        newData.set(binaryChunk, this.buffer.length);
        this.buffer = newData;
        const lines = [];
        let patternIndex;
        while ((patternIndex = findNewlineIndex(this.buffer, line_classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f"))) != null) {
            if (patternIndex.carriage && line_classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") == null) {
                // skip until we either get a corresponding `\n`, a new `\r` or nothing
                line_classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, patternIndex.index, "f");
                continue;
            }
            // we got double \r or \rtext\n
            if (line_classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") != null &&
                (patternIndex.index !== line_classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") + 1 || patternIndex.carriage)) {
                lines.push(this.decodeText(this.buffer.slice(0, line_classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") - 1)));
                this.buffer = this.buffer.slice(line_classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f"));
                line_classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, "f");
                continue;
            }
            const endIndex = line_classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") !== null ? patternIndex.preceding - 1 : patternIndex.preceding;
            const line = this.decodeText(this.buffer.slice(0, endIndex));
            lines.push(line);
            this.buffer = this.buffer.slice(patternIndex.index);
            line_classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, "f");
        }
        return lines;
    }
    decodeText(bytes) {
        if (bytes == null)
            return '';
        if (typeof bytes === 'string')
            return bytes;
        // Node:
        if (typeof Buffer !== 'undefined') {
            if (bytes instanceof Buffer) {
                return bytes.toString();
            }
            if (bytes instanceof Uint8Array) {
                return Buffer.from(bytes).toString();
            }
            throw new error_OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`);
        }
        // Browser
        if (typeof TextDecoder !== 'undefined') {
            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
                this.textDecoder ?? (this.textDecoder = new TextDecoder('utf8'));
                return this.textDecoder.decode(bytes);
            }
            throw new error_OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);
        }
        throw new error_OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);
    }
    flush() {
        if (!this.buffer.length) {
            return [];
        }
        return this.decode('\n');
    }
}
_LineDecoder_carriageReturnIndex = new WeakMap();
// prettier-ignore
LineDecoder.NEWLINE_CHARS = new Set(['\n', '\r']);
LineDecoder.NEWLINE_REGEXP = /\r\n|[\n\r]/g;
/**
 * This function searches the buffer for the end patterns, (\r or \n)
 * and returns an object with the index preceding the matched newline and the
 * index after the newline char. `null` is returned if no new line is found.
 *
 * ```ts
 * findNewLineIndex('abc\ndef') -> { preceding: 2, index: 3 }
 * ```
 */
function findNewlineIndex(buffer, startIndex) {
    const newline = 0x0a; // \n
    const carriage = 0x0d; // \r
    for (let i = startIndex ?? 0; i < buffer.length; i++) {
        if (buffer[i] === newline) {
            return { preceding: i, index: i + 1, carriage: false };
        }
        if (buffer[i] === carriage) {
            return { preceding: i, index: i + 1, carriage: true };
        }
    }
    return null;
}
function findDoubleNewlineIndex(buffer) {
    // This function searches the buffer for the end patterns (\r\r, \n\n, \r\n\r\n)
    // and returns the index right after the first occurrence of any pattern,
    // or -1 if none of the patterns are found.
    const newline = 0x0a; // \n
    const carriage = 0x0d; // \r
    for (let i = 0; i < buffer.length - 1; i++) {
        if (buffer[i] === newline && buffer[i + 1] === newline) {
            // \n\n
            return i + 2;
        }
        if (buffer[i] === carriage && buffer[i + 1] === carriage) {
            // \r\r
            return i + 2;
        }
        if (buffer[i] === carriage &&
            buffer[i + 1] === newline &&
            i + 3 < buffer.length &&
            buffer[i + 2] === carriage &&
            buffer[i + 3] === newline) {
            // \r\n\r\n
            return i + 4;
        }
    }
    return -1;
}
//# sourceMappingURL=line.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/internal/stream-utils.mjs
/**
 * Most browsers don't yet have async iterable support for ReadableStream,
 * and Node has a very different way of reading bytes from its "ReadableStream".
 *
 * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490
 */
function ReadableStreamToAsyncIterable(stream) {
    if (stream[Symbol.asyncIterator])
        return stream;
    const reader = stream.getReader();
    return {
        async next() {
            try {
                const result = await reader.read();
                if (result?.done)
                    reader.releaseLock(); // release lock when stream becomes closed
                return result;
            }
            catch (e) {
                reader.releaseLock(); // release lock when stream becomes errored
                throw e;
            }
        },
        async return() {
            const cancelPromise = reader.cancel();
            reader.releaseLock();
            await cancelPromise;
            return { done: true, value: undefined };
        },
        [Symbol.asyncIterator]() {
            return this;
        },
    };
}
//# sourceMappingURL=stream-utils.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/streaming.mjs





class Stream {
    constructor(iterator, controller) {
        this.iterator = iterator;
        this.controller = controller;
    }
    static fromSSEResponse(response, controller) {
        let consumed = false;
        async function* iterator() {
            if (consumed) {
                throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');
            }
            consumed = true;
            let done = false;
            try {
                for await (const sse of _iterSSEMessages(response, controller)) {
                    if (done)
                        continue;
                    if (sse.data.startsWith('[DONE]')) {
                        done = true;
                        continue;
                    }
                    if (sse.event === null || sse.event.startsWith('response.')) {
                        let data;
                        try {
                            data = JSON.parse(sse.data);
                        }
                        catch (e) {
                            console.error(`Could not parse message into JSON:`, sse.data);
                            console.error(`From chunk:`, sse.raw);
                            throw e;
                        }
                        if (data && data.error) {
                            throw new APIError(undefined, data.error, undefined, undefined);
                        }
                        yield data;
                    }
                    else {
                        let data;
                        try {
                            data = JSON.parse(sse.data);
                        }
                        catch (e) {
                            console.error(`Could not parse message into JSON:`, sse.data);
                            console.error(`From chunk:`, sse.raw);
                            throw e;
                        }
                        // TODO: Is this where the error should be thrown?
                        if (sse.event == 'error') {
                            throw new APIError(undefined, data.error, data.message, undefined);
                        }
                        yield { event: sse.event, data: data };
                    }
                }
                done = true;
            }
            catch (e) {
                // If the user calls `stream.controller.abort()`, we should exit without throwing.
                if (e instanceof Error && e.name === 'AbortError')
                    return;
                throw e;
            }
            finally {
                // If the user `break`s, abort the ongoing request.
                if (!done)
                    controller.abort();
            }
        }
        return new Stream(iterator, controller);
    }
    /**
     * Generates a Stream from a newline-separated ReadableStream
     * where each item is a JSON value.
     */
    static fromReadableStream(readableStream, controller) {
        let consumed = false;
        async function* iterLines() {
            const lineDecoder = new LineDecoder();
            const iter = ReadableStreamToAsyncIterable(readableStream);
            for await (const chunk of iter) {
                for (const line of lineDecoder.decode(chunk)) {
                    yield line;
                }
            }
            for (const line of lineDecoder.flush()) {
                yield line;
            }
        }
        async function* iterator() {
            if (consumed) {
                throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');
            }
            consumed = true;
            let done = false;
            try {
                for await (const line of iterLines()) {
                    if (done)
                        continue;
                    if (line)
                        yield JSON.parse(line);
                }
                done = true;
            }
            catch (e) {
                // If the user calls `stream.controller.abort()`, we should exit without throwing.
                if (e instanceof Error && e.name === 'AbortError')
                    return;
                throw e;
            }
            finally {
                // If the user `break`s, abort the ongoing request.
                if (!done)
                    controller.abort();
            }
        }
        return new Stream(iterator, controller);
    }
    [Symbol.asyncIterator]() {
        return this.iterator();
    }
    /**
     * Splits the stream into two streams which can be
     * independently read from at different speeds.
     */
    tee() {
        const left = [];
        const right = [];
        const iterator = this.iterator();
        const teeIterator = (queue) => {
            return {
                next: () => {
                    if (queue.length === 0) {
                        const result = iterator.next();
                        left.push(result);
                        right.push(result);
                    }
                    return queue.shift();
                },
            };
        };
        return [
            new Stream(() => teeIterator(left), this.controller),
            new Stream(() => teeIterator(right), this.controller),
        ];
    }
    /**
     * Converts this stream to a newline-separated ReadableStream of
     * JSON stringified values in the stream
     * which can be turned back into a Stream with `Stream.fromReadableStream()`.
     */
    toReadableStream() {
        const self = this;
        let iter;
        const encoder = new TextEncoder();
        return new ReadableStream({
            async start() {
                iter = self[Symbol.asyncIterator]();
            },
            async pull(ctrl) {
                try {
                    const { value, done } = await iter.next();
                    if (done)
                        return ctrl.close();
                    const bytes = encoder.encode(JSON.stringify(value) + '\n');
                    ctrl.enqueue(bytes);
                }
                catch (err) {
                    ctrl.error(err);
                }
            },
            async cancel() {
                await iter.return?.();
            },
        });
    }
}
async function* _iterSSEMessages(response, controller) {
    if (!response.body) {
        controller.abort();
        throw new error_OpenAIError(`Attempted to iterate over a response with no body`);
    }
    const sseDecoder = new SSEDecoder();
    const lineDecoder = new LineDecoder();
    const iter = ReadableStreamToAsyncIterable(response.body);
    for await (const sseChunk of iterSSEChunks(iter)) {
        for (const line of lineDecoder.decode(sseChunk)) {
            const sse = sseDecoder.decode(line);
            if (sse)
                yield sse;
        }
    }
    for (const line of lineDecoder.flush()) {
        const sse = sseDecoder.decode(line);
        if (sse)
            yield sse;
    }
}
/**
 * Given an async iterable iterator, iterates over it and yields full
 * SSE chunks, i.e. yields when a double new-line is encountered.
 */
async function* iterSSEChunks(iterator) {
    let data = new Uint8Array();
    for await (const chunk of iterator) {
        if (chunk == null) {
            continue;
        }
        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk)
            : typeof chunk === 'string' ? new TextEncoder().encode(chunk)
                : chunk;
        let newData = new Uint8Array(data.length + binaryChunk.length);
        newData.set(data);
        newData.set(binaryChunk, data.length);
        data = newData;
        let patternIndex;
        while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {
            yield data.slice(0, patternIndex);
            data = data.slice(patternIndex);
        }
    }
    if (data.length > 0) {
        yield data;
    }
}
class SSEDecoder {
    constructor() {
        this.event = null;
        this.data = [];
        this.chunks = [];
    }
    decode(line) {
        if (line.endsWith('\r')) {
            line = line.substring(0, line.length - 1);
        }
        if (!line) {
            // empty line and we didn't previously encounter any messages
            if (!this.event && !this.data.length)
                return null;
            const sse = {
                event: this.event,
                data: this.data.join('\n'),
                raw: this.chunks,
            };
            this.event = null;
            this.data = [];
            this.chunks = [];
            return sse;
        }
        this.chunks.push(line);
        if (line.startsWith(':')) {
            return null;
        }
        let [fieldname, _, value] = partition(line, ':');
        if (value.startsWith(' ')) {
            value = value.substring(1);
        }
        if (fieldname === 'event') {
            this.event = value;
        }
        else if (fieldname === 'data') {
            this.data.push(value);
        }
        return null;
    }
}
function partition(str, delimiter) {
    const index = str.indexOf(delimiter);
    if (index !== -1) {
        return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];
    }
    return [str, '', ''];
}
//# sourceMappingURL=streaming.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/uploads.mjs


const isResponseLike = (value) => value != null &&
    typeof value === 'object' &&
    typeof value.url === 'string' &&
    typeof value.blob === 'function';
const uploads_isFileLike = (value) => value != null &&
    typeof value === 'object' &&
    typeof value.name === 'string' &&
    typeof value.lastModified === 'number' &&
    isBlobLike(value);
/**
 * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check
 * adds the arrayBuffer() method type because it is available and used at runtime
 */
const isBlobLike = (value) => value != null &&
    typeof value === 'object' &&
    typeof value.size === 'number' &&
    typeof value.type === 'string' &&
    typeof value.text === 'function' &&
    typeof value.slice === 'function' &&
    typeof value.arrayBuffer === 'function';
const isUploadable = (value) => {
    return uploads_isFileLike(value) || isResponseLike(value) || isFsReadStream(value);
};
/**
 * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats
 * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s
 * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible
 * @param {Object=} options additional properties
 * @param {string=} options.type the MIME type of the content
 * @param {number=} options.lastModified the last modified timestamp
 * @returns a {@link File} with the given properties
 */
async function toFile(value, name, options) {
    // If it's a promise, resolve it.
    value = await value;
    // If we've been given a `File` we don't need to do anything
    if (uploads_isFileLike(value)) {
        return value;
    }
    if (isResponseLike(value)) {
        const blob = await value.blob();
        name || (name = new URL(value.url).pathname.split(/[\\/]/).pop() ?? 'unknown_file');
        // we need to convert the `Blob` into an array buffer because the `Blob` class
        // that `node-fetch` defines is incompatible with the web standard which results
        // in `new File` interpreting it as a string instead of binary data.
        const data = isBlobLike(blob) ? [(await blob.arrayBuffer())] : [blob];
        return new registry_File(data, name, options);
    }
    const bits = await getBytes(value);
    name || (name = getName(value) ?? 'unknown_file');
    if (!options?.type) {
        const type = bits[0]?.type;
        if (typeof type === 'string') {
            options = { ...options, type };
        }
    }
    return new registry_File(bits, name, options);
}
async function getBytes(value) {
    let parts = [];
    if (typeof value === 'string' ||
        ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.
        value instanceof ArrayBuffer) {
        parts.push(value);
    }
    else if (isBlobLike(value)) {
        parts.push(await value.arrayBuffer());
    }
    else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.
    ) {
        for await (const chunk of value) {
            parts.push(chunk); // TODO, consider validating?
        }
    }
    else {
        throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor
            ?.name}; props: ${propsForError(value)}`);
    }
    return parts;
}
function propsForError(value) {
    const props = Object.getOwnPropertyNames(value);
    return `[${props.map((p) => `"${p}"`).join(', ')}]`;
}
function getName(value) {
    return (getStringFromMaybeBuffer(value.name) ||
        getStringFromMaybeBuffer(value.filename) ||
        // For fs.ReadStream
        getStringFromMaybeBuffer(value.path)?.split(/[\\/]/).pop());
}
const getStringFromMaybeBuffer = (x) => {
    if (typeof x === 'string')
        return x;
    if (typeof Buffer !== 'undefined' && x instanceof Buffer)
        return String(x);
    return undefined;
};
const isAsyncIterableIterator = (value) => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';
const isMultipartBody = (body) => body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';
/**
 * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.
 * Otherwise returns the request as is.
 */
const maybeMultipartFormRequestOptions = async (opts) => {
    if (!hasUploadableValue(opts.body))
        return opts;
    const form = await createForm(opts.body);
    return getMultipartRequestOptions(form, opts);
};
const multipartFormRequestOptions = async (opts) => {
    const form = await createForm(opts.body);
    return registry_getMultipartRequestOptions(form, opts);
};
const createForm = async (body) => {
    const form = new FormData();
    await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));
    return form;
};
const hasUploadableValue = (value) => {
    if (isUploadable(value))
        return true;
    if (Array.isArray(value))
        return value.some(hasUploadableValue);
    if (value && typeof value === 'object') {
        for (const k in value) {
            if (hasUploadableValue(value[k]))
                return true;
        }
    }
    return false;
};
const addFormValue = async (form, key, value) => {
    if (value === undefined)
        return;
    if (value == null) {
        throw new TypeError(`Received null for "${key}"; to pass null in FormData, you must use the string 'null'`);
    }
    // TODO: make nested formats configurable
    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
        form.append(key, String(value));
    }
    else if (isUploadable(value)) {
        const file = await toFile(value);
        form.append(key, file);
    }
    else if (Array.isArray(value)) {
        await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));
    }
    else if (typeof value === 'object') {
        await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));
    }
    else {
        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);
    }
};
//# sourceMappingURL=uploads.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/core.mjs
var core_classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var core_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractPage_client;






async function defaultParseResponse(props) {
    const { response } = props;
    if (props.options.stream) {
        debug('response', response.status, response.url, response.headers, response.body);
        // Note: there is an invariant here that isn't represented in the type system
        // that if you set `stream: true` the response type must also be `Stream<T>`
        if (props.options.__streamClass) {
            return props.options.__streamClass.fromSSEResponse(response, props.controller);
        }
        return Stream.fromSSEResponse(response, props.controller);
    }
    // fetch refuses to read the body when the status code is 204.
    if (response.status === 204) {
        return null;
    }
    if (props.options.__binaryResponse) {
        return response;
    }
    const contentType = response.headers.get('content-type');
    const mediaType = contentType?.split(';')[0]?.trim();
    const isJSON = mediaType?.includes('application/json') || mediaType?.endsWith('+json');
    if (isJSON) {
        const json = await response.json();
        debug('response', response.status, response.url, response.headers, json);
        return _addRequestID(json, response);
    }
    const text = await response.text();
    debug('response', response.status, response.url, response.headers, text);
    // TODO handle blob, arraybuffer, other content types, etc.
    return text;
}
function _addRequestID(value, response) {
    if (!value || typeof value !== 'object' || Array.isArray(value)) {
        return value;
    }
    return Object.defineProperty(value, '_request_id', {
        value: response.headers.get('x-request-id'),
        enumerable: false,
    });
}
/**
 * A subclass of `Promise` providing additional helper methods
 * for interacting with the SDK.
 */
class APIPromise extends Promise {
    constructor(responsePromise, parseResponse = defaultParseResponse) {
        super((resolve) => {
            // this is maybe a bit weird but this has to be a no-op to not implicitly
            // parse the response body; instead .then, .catch, .finally are overridden
            // to parse the response
            resolve(null);
        });
        this.responsePromise = responsePromise;
        this.parseResponse = parseResponse;
    }
    _thenUnwrap(transform) {
        return new APIPromise(this.responsePromise, async (props) => _addRequestID(transform(await this.parseResponse(props), props), props.response));
    }
    /**
     * Gets the raw `Response` instance instead of parsing the response
     * data.
     *
     * If you want to parse the response body but still get the `Response`
     * instance, you can use {@link withResponse()}.
     *
     * 👋 Getting the wrong TypeScript type for `Response`?
     * Try setting `"moduleResolution": "NodeNext"` if you can,
     * or add one of these imports before your first `import … from 'openai'`:
     * - `import 'openai/shims/node'` (if you're running on Node)
     * - `import 'openai/shims/web'` (otherwise)
     */
    asResponse() {
        return this.responsePromise.then((p) => p.response);
    }
    /**
     * Gets the parsed response data, the raw `Response` instance and the ID of the request,
     * returned via the X-Request-ID header which is useful for debugging requests and reporting
     * issues to OpenAI.
     *
     * If you just want to get the raw `Response` instance without parsing it,
     * you can use {@link asResponse()}.
     *
     *
     * 👋 Getting the wrong TypeScript type for `Response`?
     * Try setting `"moduleResolution": "NodeNext"` if you can,
     * or add one of these imports before your first `import … from 'openai'`:
     * - `import 'openai/shims/node'` (if you're running on Node)
     * - `import 'openai/shims/web'` (otherwise)
     */
    async withResponse() {
        const [data, response] = await Promise.all([this.parse(), this.asResponse()]);
        return { data, response, request_id: response.headers.get('x-request-id') };
    }
    parse() {
        if (!this.parsedPromise) {
            this.parsedPromise = this.responsePromise.then(this.parseResponse);
        }
        return this.parsedPromise;
    }
    then(onfulfilled, onrejected) {
        return this.parse().then(onfulfilled, onrejected);
    }
    catch(onrejected) {
        return this.parse().catch(onrejected);
    }
    finally(onfinally) {
        return this.parse().finally(onfinally);
    }
}
class APIClient {
    constructor({ baseURL, maxRetries = 2, timeout = 600000, // 10 minutes
    httpAgent, fetch: overriddenFetch, }) {
        this.baseURL = baseURL;
        this.maxRetries = validatePositiveInteger('maxRetries', maxRetries);
        this.timeout = validatePositiveInteger('timeout', timeout);
        this.httpAgent = httpAgent;
        this.fetch = overriddenFetch ?? registry_fetch;
    }
    authHeaders(opts) {
        return {};
    }
    /**
     * Override this to add your own default headers, for example:
     *
     *  {
     *    ...super.defaultHeaders(),
     *    Authorization: 'Bearer 123',
     *  }
     */
    defaultHeaders(opts) {
        return {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            'User-Agent': this.getUserAgent(),
            ...getPlatformHeaders(),
            ...this.authHeaders(opts),
        };
    }
    /**
     * Override this to add your own headers validation:
     */
    validateHeaders(headers, customHeaders) { }
    defaultIdempotencyKey() {
        return `stainless-node-retry-${uuid4()}`;
    }
    get(path, opts) {
        return this.methodRequest('get', path, opts);
    }
    post(path, opts) {
        return this.methodRequest('post', path, opts);
    }
    patch(path, opts) {
        return this.methodRequest('patch', path, opts);
    }
    put(path, opts) {
        return this.methodRequest('put', path, opts);
    }
    delete(path, opts) {
        return this.methodRequest('delete', path, opts);
    }
    methodRequest(method, path, opts) {
        return this.request(Promise.resolve(opts).then(async (opts) => {
            const body = opts && isBlobLike(opts?.body) ? new DataView(await opts.body.arrayBuffer())
                : opts?.body instanceof DataView ? opts.body
                    : opts?.body instanceof ArrayBuffer ? new DataView(opts.body)
                        : opts && ArrayBuffer.isView(opts?.body) ? new DataView(opts.body.buffer)
                            : opts?.body;
            return { method, path, ...opts, body };
        }));
    }
    getAPIList(path, Page, opts) {
        return this.requestAPIList(Page, { method: 'get', path, ...opts });
    }
    calculateContentLength(body) {
        if (typeof body === 'string') {
            if (typeof Buffer !== 'undefined') {
                return Buffer.byteLength(body, 'utf8').toString();
            }
            if (typeof TextEncoder !== 'undefined') {
                const encoder = new TextEncoder();
                const encoded = encoder.encode(body);
                return encoded.length.toString();
            }
        }
        else if (ArrayBuffer.isView(body)) {
            return body.byteLength.toString();
        }
        return null;
    }
    buildRequest(options, { retryCount = 0 } = {}) {
        options = { ...options };
        const { method, path, query, headers: headers = {} } = options;
        const body = ArrayBuffer.isView(options.body) || (options.__binaryRequest && typeof options.body === 'string') ?
            options.body
            : isMultipartBody(options.body) ? options.body.body
                : options.body ? JSON.stringify(options.body, null, 2)
                    : null;
        const contentLength = this.calculateContentLength(body);
        const url = this.buildURL(path, query);
        if ('timeout' in options)
            validatePositiveInteger('timeout', options.timeout);
        options.timeout = options.timeout ?? this.timeout;
        const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);
        const minAgentTimeout = options.timeout + 1000;
        if (typeof httpAgent?.options?.timeout === 'number' &&
            minAgentTimeout > (httpAgent.options.timeout ?? 0)) {
            // Allow any given request to bump our agent active socket timeout.
            // This may seem strange, but leaking active sockets should be rare and not particularly problematic,
            // and without mutating agent we would need to create more of them.
            // This tradeoff optimizes for performance.
            httpAgent.options.timeout = minAgentTimeout;
        }
        if (this.idempotencyHeader && method !== 'get') {
            if (!options.idempotencyKey)
                options.idempotencyKey = this.defaultIdempotencyKey();
            headers[this.idempotencyHeader] = options.idempotencyKey;
        }
        const reqHeaders = this.buildHeaders({ options, headers, contentLength, retryCount });
        const req = {
            method,
            ...(body && { body: body }),
            headers: reqHeaders,
            ...(httpAgent && { agent: httpAgent }),
            // @ts-ignore node-fetch uses a custom AbortSignal type that is
            // not compatible with standard web types
            signal: options.signal ?? null,
        };
        return { req, url, timeout: options.timeout };
    }
    buildHeaders({ options, headers, contentLength, retryCount, }) {
        const reqHeaders = {};
        if (contentLength) {
            reqHeaders['content-length'] = contentLength;
        }
        const defaultHeaders = this.defaultHeaders(options);
        applyHeadersMut(reqHeaders, defaultHeaders);
        applyHeadersMut(reqHeaders, headers);
        // let builtin fetch set the Content-Type for multipart bodies
        if (isMultipartBody(options.body) && kind !== 'node') {
            delete reqHeaders['content-type'];
        }
        // Don't set theses headers if they were already set or removed through default headers or by the caller.
        // We check `defaultHeaders` and `headers`, which can contain nulls, instead of `reqHeaders` to account
        // for the removal case.
        if (getHeader(defaultHeaders, 'x-stainless-retry-count') === undefined &&
            getHeader(headers, 'x-stainless-retry-count') === undefined) {
            reqHeaders['x-stainless-retry-count'] = String(retryCount);
        }
        if (getHeader(defaultHeaders, 'x-stainless-timeout') === undefined &&
            getHeader(headers, 'x-stainless-timeout') === undefined &&
            options.timeout) {
            reqHeaders['x-stainless-timeout'] = String(options.timeout);
        }
        this.validateHeaders(reqHeaders, headers);
        return reqHeaders;
    }
    /**
     * Used as a callback for mutating the given `FinalRequestOptions` object.
     */
    async prepareOptions(options) { }
    /**
     * Used as a callback for mutating the given `RequestInit` object.
     *
     * This is useful for cases where you want to add certain headers based off of
     * the request properties, e.g. `method` or `url`.
     */
    async prepareRequest(request, { url, options }) { }
    parseHeaders(headers) {
        return (!headers ? {}
            : Symbol.iterator in headers ?
                Object.fromEntries(Array.from(headers).map((header) => [...header]))
                : { ...headers });
    }
    makeStatusError(status, error, message, headers) {
        return APIError.generate(status, error, message, headers);
    }
    request(options, remainingRetries = null) {
        return new APIPromise(this.makeRequest(options, remainingRetries));
    }
    async makeRequest(optionsInput, retriesRemaining) {
        const options = await optionsInput;
        const maxRetries = options.maxRetries ?? this.maxRetries;
        if (retriesRemaining == null) {
            retriesRemaining = maxRetries;
        }
        await this.prepareOptions(options);
        const { req, url, timeout } = this.buildRequest(options, { retryCount: maxRetries - retriesRemaining });
        await this.prepareRequest(req, { url, options });
        debug('request', url, options, req.headers);
        if (options.signal?.aborted) {
            throw new APIUserAbortError();
        }
        const controller = new AbortController();
        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);
        if (response instanceof Error) {
            if (options.signal?.aborted) {
                throw new APIUserAbortError();
            }
            if (retriesRemaining) {
                return this.retryRequest(options, retriesRemaining);
            }
            if (response.name === 'AbortError') {
                throw new APIConnectionTimeoutError();
            }
            throw new APIConnectionError({ cause: response });
        }
        const responseHeaders = createResponseHeaders(response.headers);
        if (!response.ok) {
            if (retriesRemaining && this.shouldRetry(response)) {
                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;
                debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);
                return this.retryRequest(options, retriesRemaining, responseHeaders);
            }
            const errText = await response.text().catch((e) => castToError(e).message);
            const errJSON = safeJSON(errText);
            const errMessage = errJSON ? undefined : errText;
            const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;
            debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);
            const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);
            throw err;
        }
        return { response, options, controller };
    }
    requestAPIList(Page, options) {
        const request = this.makeRequest(options, null);
        return new PagePromise(this, request, Page);
    }
    buildURL(path, query) {
        const url = isAbsoluteURL(path) ?
            new URL(path)
            : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));
        const defaultQuery = this.defaultQuery();
        if (!isEmptyObj(defaultQuery)) {
            query = { ...defaultQuery, ...query };
        }
        if (typeof query === 'object' && query && !Array.isArray(query)) {
            url.search = this.stringifyQuery(query);
        }
        return url.toString();
    }
    stringifyQuery(query) {
        return Object.entries(query)
            .filter(([_, value]) => typeof value !== 'undefined')
            .map(([key, value]) => {
            if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
            }
            if (value === null) {
                return `${encodeURIComponent(key)}=`;
            }
            throw new error_OpenAIError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);
        })
            .join('&');
    }
    async fetchWithTimeout(url, init, ms, controller) {
        const { signal, ...options } = init || {};
        if (signal)
            signal.addEventListener('abort', () => controller.abort());
        const timeout = setTimeout(() => controller.abort(), ms);
        const fetchOptions = {
            signal: controller.signal,
            ...options,
        };
        if (fetchOptions.method) {
            // Custom methods like 'patch' need to be uppercased
            // See https://github.com/nodejs/undici/issues/2294
            fetchOptions.method = fetchOptions.method.toUpperCase();
        }
        return (
        // use undefined this binding; fetch errors if bound to something else in browser/cloudflare
        this.fetch.call(undefined, url, fetchOptions).finally(() => {
            clearTimeout(timeout);
        }));
    }
    shouldRetry(response) {
        // Note this is not a standard header.
        const shouldRetryHeader = response.headers.get('x-should-retry');
        // If the server explicitly says whether or not to retry, obey.
        if (shouldRetryHeader === 'true')
            return true;
        if (shouldRetryHeader === 'false')
            return false;
        // Retry on request timeouts.
        if (response.status === 408)
            return true;
        // Retry on lock timeouts.
        if (response.status === 409)
            return true;
        // Retry on rate limits.
        if (response.status === 429)
            return true;
        // Retry internal errors.
        if (response.status >= 500)
            return true;
        return false;
    }
    async retryRequest(options, retriesRemaining, responseHeaders) {
        let timeoutMillis;
        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.
        const retryAfterMillisHeader = responseHeaders?.['retry-after-ms'];
        if (retryAfterMillisHeader) {
            const timeoutMs = parseFloat(retryAfterMillisHeader);
            if (!Number.isNaN(timeoutMs)) {
                timeoutMillis = timeoutMs;
            }
        }
        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After
        const retryAfterHeader = responseHeaders?.['retry-after'];
        if (retryAfterHeader && !timeoutMillis) {
            const timeoutSeconds = parseFloat(retryAfterHeader);
            if (!Number.isNaN(timeoutSeconds)) {
                timeoutMillis = timeoutSeconds * 1000;
            }
            else {
                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
            }
        }
        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),
        // just do what it says, but otherwise calculate a default
        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {
            const maxRetries = options.maxRetries ?? this.maxRetries;
            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);
        }
        await sleep(timeoutMillis);
        return this.makeRequest(options, retriesRemaining - 1);
    }
    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
        const initialRetryDelay = 0.5;
        const maxRetryDelay = 8.0;
        const numRetries = maxRetries - retriesRemaining;
        // Apply exponential backoff, but not more than the max.
        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);
        // Apply some jitter, take up to at most 25 percent of the retry time.
        const jitter = 1 - Math.random() * 0.25;
        return sleepSeconds * jitter * 1000;
    }
    getUserAgent() {
        return `${this.constructor.name}/JS ${openai_version_VERSION}`;
    }
}
class AbstractPage {
    constructor(client, response, body, options) {
        _AbstractPage_client.set(this, void 0);
        core_classPrivateFieldSet(this, _AbstractPage_client, client, "f");
        this.options = options;
        this.response = response;
        this.body = body;
    }
    hasNextPage() {
        const items = this.getPaginatedItems();
        if (!items.length)
            return false;
        return this.nextPageInfo() != null;
    }
    async getNextPage() {
        const nextInfo = this.nextPageInfo();
        if (!nextInfo) {
            throw new error_OpenAIError('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');
        }
        const nextOptions = { ...this.options };
        if ('params' in nextInfo && typeof nextOptions.query === 'object') {
            nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
        }
        else if ('url' in nextInfo) {
            const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];
            for (const [key, value] of params) {
                nextInfo.url.searchParams.set(key, value);
            }
            nextOptions.query = undefined;
            nextOptions.path = nextInfo.url.toString();
        }
        return await core_classPrivateFieldGet(this, _AbstractPage_client, "f").requestAPIList(this.constructor, nextOptions);
    }
    async *iterPages() {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        let page = this;
        yield page;
        while (page.hasNextPage()) {
            page = await page.getNextPage();
            yield page;
        }
    }
    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {
        for await (const page of this.iterPages()) {
            for (const item of page.getPaginatedItems()) {
                yield item;
            }
        }
    }
}
/**
 * This subclass of Promise will resolve to an instantiated Page once the request completes.
 *
 * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:
 *
 *    for await (const item of client.items.list()) {
 *      console.log(item)
 *    }
 */
class PagePromise extends APIPromise {
    constructor(client, request, Page) {
        super(request, async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options));
    }
    /**
     * Allow auto-paginating iteration on an unawaited list call, eg:
     *
     *    for await (const item of client.items.list()) {
     *      console.log(item)
     *    }
     */
    async *[Symbol.asyncIterator]() {
        const page = await this;
        for await (const item of page) {
            yield item;
        }
    }
}
const createResponseHeaders = (headers) => {
    return new Proxy(Object.fromEntries(
    // @ts-ignore
    headers.entries()), {
        get(target, name) {
            const key = name.toString();
            return target[key.toLowerCase()] || target[key];
        },
    });
};
// This is required so that we can determine if a given object matches the RequestOptions
// type at runtime. While this requires duplication, it is enforced by the TypeScript
// compiler such that any missing / extraneous keys will cause an error.
const requestOptionsKeys = {
    method: true,
    path: true,
    query: true,
    body: true,
    headers: true,
    maxRetries: true,
    stream: true,
    timeout: true,
    httpAgent: true,
    signal: true,
    idempotencyKey: true,
    __metadata: true,
    __binaryRequest: true,
    __binaryResponse: true,
    __streamClass: true,
};
const isRequestOptions = (obj) => {
    return (typeof obj === 'object' &&
        obj !== null &&
        !isEmptyObj(obj) &&
        Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k)));
};
const getPlatformProperties = () => {
    if (typeof Deno !== 'undefined' && Deno.build != null) {
        return {
            'X-Stainless-Lang': 'js',
            'X-Stainless-Package-Version': openai_version_VERSION,
            'X-Stainless-OS': normalizePlatform(Deno.build.os),
            'X-Stainless-Arch': normalizeArch(Deno.build.arch),
            'X-Stainless-Runtime': 'deno',
            'X-Stainless-Runtime-Version': typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown',
        };
    }
    if (typeof EdgeRuntime !== 'undefined') {
        return {
            'X-Stainless-Lang': 'js',
            'X-Stainless-Package-Version': openai_version_VERSION,
            'X-Stainless-OS': 'Unknown',
            'X-Stainless-Arch': `other:${EdgeRuntime}`,
            'X-Stainless-Runtime': 'edge',
            'X-Stainless-Runtime-Version': process.version,
        };
    }
    // Check if Node.js
    if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {
        return {
            'X-Stainless-Lang': 'js',
            'X-Stainless-Package-Version': openai_version_VERSION,
            'X-Stainless-OS': normalizePlatform(process.platform),
            'X-Stainless-Arch': normalizeArch(process.arch),
            'X-Stainless-Runtime': 'node',
            'X-Stainless-Runtime-Version': process.version,
        };
    }
    const browserInfo = getBrowserInfo();
    if (browserInfo) {
        return {
            'X-Stainless-Lang': 'js',
            'X-Stainless-Package-Version': openai_version_VERSION,
            'X-Stainless-OS': 'Unknown',
            'X-Stainless-Arch': 'unknown',
            'X-Stainless-Runtime': `browser:${browserInfo.browser}`,
            'X-Stainless-Runtime-Version': browserInfo.version,
        };
    }
    // TODO add support for Cloudflare workers, etc.
    return {
        'X-Stainless-Lang': 'js',
        'X-Stainless-Package-Version': openai_version_VERSION,
        'X-Stainless-OS': 'Unknown',
        'X-Stainless-Arch': 'unknown',
        'X-Stainless-Runtime': 'unknown',
        'X-Stainless-Runtime-Version': 'unknown',
    };
};
// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts
function getBrowserInfo() {
    if (typeof navigator === 'undefined' || !navigator) {
        return null;
    }
    // NOTE: The order matters here!
    const browserPatterns = [
        { key: 'edge', pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: 'ie', pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: 'ie', pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: 'chrome', pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: 'firefox', pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: 'safari', pattern: /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/ },
    ];
    // Find the FIRST matching browser
    for (const { key, pattern } of browserPatterns) {
        const match = pattern.exec(navigator.userAgent);
        if (match) {
            const major = match[1] || 0;
            const minor = match[2] || 0;
            const patch = match[3] || 0;
            return { browser: key, version: `${major}.${minor}.${patch}` };
        }
    }
    return null;
}
const normalizeArch = (arch) => {
    // Node docs:
    // - https://nodejs.org/api/process.html#processarch
    // Deno docs:
    // - https://doc.deno.land/deno/stable/~/Deno.build
    if (arch === 'x32')
        return 'x32';
    if (arch === 'x86_64' || arch === 'x64')
        return 'x64';
    if (arch === 'arm')
        return 'arm';
    if (arch === 'aarch64' || arch === 'arm64')
        return 'arm64';
    if (arch)
        return `other:${arch}`;
    return 'unknown';
};
const normalizePlatform = (platform) => {
    // Node platforms:
    // - https://nodejs.org/api/process.html#processplatform
    // Deno platforms:
    // - https://doc.deno.land/deno/stable/~/Deno.build
    // - https://github.com/denoland/deno/issues/14799
    platform = platform.toLowerCase();
    // NOTE: this iOS check is untested and may not work
    // Node does not work natively on IOS, there is a fork at
    // https://github.com/nodejs-mobile/nodejs-mobile
    // however it is unknown at the time of writing how to detect if it is running
    if (platform.includes('ios'))
        return 'iOS';
    if (platform === 'android')
        return 'Android';
    if (platform === 'darwin')
        return 'MacOS';
    if (platform === 'win32')
        return 'Windows';
    if (platform === 'freebsd')
        return 'FreeBSD';
    if (platform === 'openbsd')
        return 'OpenBSD';
    if (platform === 'linux')
        return 'Linux';
    if (platform)
        return `Other:${platform}`;
    return 'Unknown';
};
let _platformHeaders;
const getPlatformHeaders = () => {
    return (_platformHeaders ?? (_platformHeaders = getPlatformProperties()));
};
const safeJSON = (text) => {
    try {
        return JSON.parse(text);
    }
    catch (err) {
        return undefined;
    }
};
// https://url.spec.whatwg.org/#url-scheme-string
const startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;
const isAbsoluteURL = (url) => {
    return startsWithSchemeRegexp.test(url);
};
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
const validatePositiveInteger = (name, n) => {
    if (typeof n !== 'number' || !Number.isInteger(n)) {
        throw new error_OpenAIError(`${name} must be an integer`);
    }
    if (n < 0) {
        throw new error_OpenAIError(`${name} must be a positive integer`);
    }
    return n;
};
const castToError = (err) => {
    if (err instanceof Error)
        return err;
    if (typeof err === 'object' && err !== null) {
        try {
            return new Error(JSON.stringify(err));
        }
        catch { }
    }
    return new Error(err);
};
const ensurePresent = (value) => {
    if (value == null)
        throw new OpenAIError(`Expected a value to be given but received ${value} instead.`);
    return value;
};
/**
 * Read an environment variable.
 *
 * Trims beginning and trailing whitespace.
 *
 * Will return undefined if the environment variable doesn't exist or cannot be accessed.
 */
const readEnv = (env) => {
    if (typeof process !== 'undefined') {
        return process.env?.[env]?.trim() ?? undefined;
    }
    if (typeof Deno !== 'undefined') {
        return Deno.env?.get?.(env)?.trim();
    }
    return undefined;
};
const coerceInteger = (value) => {
    if (typeof value === 'number')
        return Math.round(value);
    if (typeof value === 'string')
        return parseInt(value, 10);
    throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);
};
const coerceFloat = (value) => {
    if (typeof value === 'number')
        return value;
    if (typeof value === 'string')
        return parseFloat(value);
    throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);
};
const coerceBoolean = (value) => {
    if (typeof value === 'boolean')
        return value;
    if (typeof value === 'string')
        return value === 'true';
    return Boolean(value);
};
const maybeCoerceInteger = (value) => {
    if (value === undefined) {
        return undefined;
    }
    return coerceInteger(value);
};
const maybeCoerceFloat = (value) => {
    if (value === undefined) {
        return undefined;
    }
    return coerceFloat(value);
};
const maybeCoerceBoolean = (value) => {
    if (value === undefined) {
        return undefined;
    }
    return coerceBoolean(value);
};
// https://stackoverflow.com/a/34491287
function isEmptyObj(obj) {
    if (!obj)
        return true;
    for (const _k in obj)
        return false;
    return true;
}
// https://eslint.org/docs/latest/rules/no-prototype-builtins
function hasOwn(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
/**
 * Copies headers from "newHeaders" onto "targetHeaders",
 * using lower-case for all properties,
 * ignoring any keys with undefined values,
 * and deleting any keys with null values.
 */
function applyHeadersMut(targetHeaders, newHeaders) {
    for (const k in newHeaders) {
        if (!hasOwn(newHeaders, k))
            continue;
        const lowerKey = k.toLowerCase();
        if (!lowerKey)
            continue;
        const val = newHeaders[k];
        if (val === null) {
            delete targetHeaders[lowerKey];
        }
        else if (val !== undefined) {
            targetHeaders[lowerKey] = val;
        }
    }
}
const SENSITIVE_HEADERS = new Set(['authorization', 'api-key']);
function debug(action, ...args) {
    if (typeof process !== 'undefined' && process?.env?.['DEBUG'] === 'true') {
        const modifiedArgs = args.map((arg) => {
            if (!arg) {
                return arg;
            }
            // Check for sensitive headers in request body 'headers' object
            if (arg['headers']) {
                // clone so we don't mutate
                const modifiedArg = { ...arg, headers: { ...arg['headers'] } };
                for (const header in arg['headers']) {
                    if (SENSITIVE_HEADERS.has(header.toLowerCase())) {
                        modifiedArg['headers'][header] = 'REDACTED';
                    }
                }
                return modifiedArg;
            }
            let modifiedArg = null;
            // Check for sensitive headers in headers object
            for (const header in arg) {
                if (SENSITIVE_HEADERS.has(header.toLowerCase())) {
                    // avoid making a copy until we need to
                    modifiedArg ?? (modifiedArg = { ...arg });
                    modifiedArg[header] = 'REDACTED';
                }
            }
            return modifiedArg ?? arg;
        });
        console.log(`OpenAI:DEBUG:${action}`, ...modifiedArgs);
    }
}
/**
 * https://stackoverflow.com/a/2117523
 */
const uuid4 = () => {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
        const r = (Math.random() * 16) | 0;
        const v = c === 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
};
const isRunningInBrowser = () => {
    return (
    // @ts-ignore
    typeof window !== 'undefined' &&
        // @ts-ignore
        typeof window.document !== 'undefined' &&
        // @ts-ignore
        typeof navigator !== 'undefined');
};
const isHeadersProtocol = (headers) => {
    return typeof headers?.get === 'function';
};
const getRequiredHeader = (headers, header) => {
    const foundHeader = getHeader(headers, header);
    if (foundHeader === undefined) {
        throw new Error(`Could not find ${header} header`);
    }
    return foundHeader;
};
const getHeader = (headers, header) => {
    const lowerCasedHeader = header.toLowerCase();
    if (isHeadersProtocol(headers)) {
        // to deal with the case where the header looks like Stainless-Event-Id
        const intercapsHeader = header[0]?.toUpperCase() +
            header.substring(1).replace(/([^\w])(\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());
        for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {
            const value = headers.get(key);
            if (value) {
                return value;
            }
        }
    }
    for (const [key, value] of Object.entries(headers)) {
        if (key.toLowerCase() === lowerCasedHeader) {
            if (Array.isArray(value)) {
                if (value.length <= 1)
                    return value[0];
                console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);
                return value[0];
            }
            return value;
        }
    }
    return undefined;
};
/**
 * Encodes a string to Base64 format.
 */
const toBase64 = (str) => {
    if (!str)
        return '';
    if (typeof Buffer !== 'undefined') {
        return Buffer.from(str).toString('base64');
    }
    if (typeof btoa !== 'undefined') {
        return btoa(str);
    }
    throw new OpenAIError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');
};
function isObj(obj) {
    return obj != null && typeof obj === 'object' && !Array.isArray(obj);
}
//# sourceMappingURL=core.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resource.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
class APIResource {
    constructor(client) {
        this._client = client;
    }
}
//# sourceMappingURL=resource.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/completions.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

class Completions extends APIResource {
    create(body, options) {
        return this._client.post('/completions', { body, ...options, stream: body.stream ?? false });
    }
}
//# sourceMappingURL=completions.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/chat/completions/messages.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.



class Messages extends APIResource {
    list(completionId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list(completionId, {}, query);
        }
        return this._client.getAPIList(`/chat/completions/${completionId}/messages`, ChatCompletionStoreMessagesPage, { query, ...options });
    }
}

//# sourceMappingURL=messages.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/pagination.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

/**
 * Note: no pagination actually occurs yet, this is for forwards-compatibility.
 */
class Page extends AbstractPage {
    constructor(client, response, body, options) {
        super(client, response, body, options);
        this.data = body.data || [];
        this.object = body.object;
    }
    getPaginatedItems() {
        return this.data ?? [];
    }
    // @deprecated Please use `nextPageInfo()` instead
    /**
     * This page represents a response that isn't actually paginated at the API level
     * so there will never be any next page params.
     */
    nextPageParams() {
        return null;
    }
    nextPageInfo() {
        return null;
    }
}
class CursorPage extends AbstractPage {
    constructor(client, response, body, options) {
        super(client, response, body, options);
        this.data = body.data || [];
        this.has_more = body.has_more || false;
    }
    getPaginatedItems() {
        return this.data ?? [];
    }
    hasNextPage() {
        if (this.has_more === false) {
            return false;
        }
        return super.hasNextPage();
    }
    // @deprecated Please use `nextPageInfo()` instead
    nextPageParams() {
        const info = this.nextPageInfo();
        if (!info)
            return null;
        if ('params' in info)
            return info.params;
        const params = Object.fromEntries(info.url.searchParams);
        if (!Object.keys(params).length)
            return null;
        return params;
    }
    nextPageInfo() {
        const data = this.getPaginatedItems();
        if (!data.length) {
            return null;
        }
        const id = data[data.length - 1]?.id;
        if (!id) {
            return null;
        }
        return { params: { after: id } };
    }
}
//# sourceMappingURL=pagination.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/chat/completions/completions.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.





class completions_Completions extends APIResource {
    constructor() {
        super(...arguments);
        this.messages = new Messages(this._client);
    }
    create(body, options) {
        return this._client.post('/chat/completions', { body, ...options, stream: body.stream ?? false });
    }
    /**
     * Get a stored chat completion. Only Chat Completions that have been created with
     * the `store` parameter set to `true` will be returned.
     */
    retrieve(completionId, options) {
        return this._client.get(`/chat/completions/${completionId}`, options);
    }
    /**
     * Modify a stored chat completion. Only Chat Completions that have been created
     * with the `store` parameter set to `true` can be modified. Currently, the only
     * supported modification is to update the `metadata` field.
     */
    update(completionId, body, options) {
        return this._client.post(`/chat/completions/${completionId}`, { body, ...options });
    }
    list(query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/chat/completions', ChatCompletionsPage, { query, ...options });
    }
    /**
     * Delete a stored chat completion. Only Chat Completions that have been created
     * with the `store` parameter set to `true` can be deleted.
     */
    del(completionId, options) {
        return this._client.delete(`/chat/completions/${completionId}`, options);
    }
}
class ChatCompletionsPage extends CursorPage {
}
class ChatCompletionStoreMessagesPage extends CursorPage {
}
completions_Completions.ChatCompletionsPage = ChatCompletionsPage;
completions_Completions.Messages = Messages;
//# sourceMappingURL=completions.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/chat/chat.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.



class Chat extends APIResource {
    constructor() {
        super(...arguments);
        this.completions = new completions_Completions(this._client);
    }
}
Chat.Completions = completions_Completions;
Chat.ChatCompletionsPage = ChatCompletionsPage;
//# sourceMappingURL=chat.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/embeddings.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

class Embeddings extends APIResource {
    /**
     * Creates an embedding vector representing the input text.
     */
    create(body, options) {
        return this._client.post('/embeddings', { body, ...options });
    }
}
//# sourceMappingURL=embeddings.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/files.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.






class Files extends APIResource {
    /**
     * Upload a file that can be used across various endpoints. Individual files can be
     * up to 512 MB, and the size of all files uploaded by one organization can be up
     * to 100 GB.
     *
     * The Assistants API supports files up to 2 million tokens and of specific file
     * types. See the
     * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for
     * details.
     *
     * The Fine-tuning API only supports `.jsonl` files. The input also has certain
     * required formats for fine-tuning
     * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or
     * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)
     * models.
     *
     * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also
     * has a specific required
     * [format](https://platform.openai.com/docs/api-reference/batch/request-input).
     *
     * Please [contact us](https://help.openai.com/) if you need to increase these
     * storage limits.
     */
    create(body, options) {
        return this._client.post('/files', multipartFormRequestOptions({ body, ...options }));
    }
    /**
     * Returns information about a specific file.
     */
    retrieve(fileId, options) {
        return this._client.get(`/files/${fileId}`, options);
    }
    list(query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/files', FileObjectsPage, { query, ...options });
    }
    /**
     * Delete a file.
     */
    del(fileId, options) {
        return this._client.delete(`/files/${fileId}`, options);
    }
    /**
     * Returns the contents of the specified file.
     */
    content(fileId, options) {
        return this._client.get(`/files/${fileId}/content`, {
            ...options,
            headers: { Accept: 'application/binary', ...options?.headers },
            __binaryResponse: true,
        });
    }
    /**
     * Returns the contents of the specified file.
     *
     * @deprecated The `.content()` method should be used instead
     */
    retrieveContent(fileId, options) {
        return this._client.get(`/files/${fileId}/content`, options);
    }
    /**
     * Waits for the given file to be processed, default timeout is 30 mins.
     */
    async waitForProcessing(id, { pollInterval = 5000, maxWait = 30 * 60 * 1000 } = {}) {
        const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);
        const start = Date.now();
        let file = await this.retrieve(id);
        while (!file.status || !TERMINAL_STATES.has(file.status)) {
            await sleep(pollInterval);
            file = await this.retrieve(id);
            if (Date.now() - start > maxWait) {
                throw new APIConnectionTimeoutError({
                    message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,
                });
            }
        }
        return file;
    }
}
class FileObjectsPage extends CursorPage {
}
Files.FileObjectsPage = FileObjectsPage;
//# sourceMappingURL=files.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/images.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.


class Images extends APIResource {
    /**
     * Creates a variation of a given image.
     */
    createVariation(body, options) {
        return this._client.post('/images/variations', multipartFormRequestOptions({ body, ...options }));
    }
    /**
     * Creates an edited or extended image given an original image and a prompt.
     */
    edit(body, options) {
        return this._client.post('/images/edits', multipartFormRequestOptions({ body, ...options }));
    }
    /**
     * Creates an image given a prompt.
     */
    generate(body, options) {
        return this._client.post('/images/generations', { body, ...options });
    }
}
//# sourceMappingURL=images.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/audio/speech.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

class Speech extends APIResource {
    /**
     * Generates audio from the input text.
     */
    create(body, options) {
        return this._client.post('/audio/speech', {
            body,
            ...options,
            headers: { Accept: 'application/octet-stream', ...options?.headers },
            __binaryResponse: true,
        });
    }
}
//# sourceMappingURL=speech.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/audio/transcriptions.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.


class Transcriptions extends APIResource {
    create(body, options) {
        return this._client.post('/audio/transcriptions', multipartFormRequestOptions({ body, ...options, __metadata: { model: body.model } }));
    }
}
//# sourceMappingURL=transcriptions.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/audio/translations.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.


class Translations extends APIResource {
    create(body, options) {
        return this._client.post('/audio/translations', multipartFormRequestOptions({ body, ...options, __metadata: { model: body.model } }));
    }
}
//# sourceMappingURL=translations.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/audio/audio.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.







class Audio extends APIResource {
    constructor() {
        super(...arguments);
        this.transcriptions = new Transcriptions(this._client);
        this.translations = new Translations(this._client);
        this.speech = new Speech(this._client);
    }
}
Audio.Transcriptions = Transcriptions;
Audio.Translations = Translations;
Audio.Speech = Speech;
//# sourceMappingURL=audio.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/moderations.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

class Moderations extends APIResource {
    /**
     * Classifies if text and/or image inputs are potentially harmful. Learn more in
     * the [moderation guide](https://platform.openai.com/docs/guides/moderation).
     */
    create(body, options) {
        return this._client.post('/moderations', { body, ...options });
    }
}
//# sourceMappingURL=moderations.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/models.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.


class Models extends APIResource {
    /**
     * Retrieves a model instance, providing basic information about the model such as
     * the owner and permissioning.
     */
    retrieve(model, options) {
        return this._client.get(`/models/${model}`, options);
    }
    /**
     * Lists the currently available models, and provides basic information about each
     * one such as the owner and availability.
     */
    list(options) {
        return this._client.getAPIList('/models', ModelsPage, options);
    }
    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization to
     * delete a model.
     */
    del(model, options) {
        return this._client.delete(`/models/${model}`, options);
    }
}
/**
 * Note: no pagination actually occurs yet, this is for forwards-compatibility.
 */
class ModelsPage extends Page {
}
Models.ModelsPage = ModelsPage;
//# sourceMappingURL=models.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.



class Checkpoints extends APIResource {
    list(fineTuningJobId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list(fineTuningJobId, {}, query);
        }
        return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/checkpoints`, FineTuningJobCheckpointsPage, { query, ...options });
    }
}
class FineTuningJobCheckpointsPage extends CursorPage {
}
Checkpoints.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;
//# sourceMappingURL=checkpoints.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.





class Jobs extends APIResource {
    constructor() {
        super(...arguments);
        this.checkpoints = new Checkpoints(this._client);
    }
    /**
     * Creates a fine-tuning job which begins the process of creating a new model from
     * a given dataset.
     *
     * Response includes details of the enqueued job including job status and the name
     * of the fine-tuned models once complete.
     *
     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
     */
    create(body, options) {
        return this._client.post('/fine_tuning/jobs', { body, ...options });
    }
    /**
     * Get info about a fine-tuning job.
     *
     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
     */
    retrieve(fineTuningJobId, options) {
        return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);
    }
    list(query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/fine_tuning/jobs', FineTuningJobsPage, { query, ...options });
    }
    /**
     * Immediately cancel a fine-tune job.
     */
    cancel(fineTuningJobId, options) {
        return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);
    }
    listEvents(fineTuningJobId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.listEvents(fineTuningJobId, {}, query);
        }
        return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {
            query,
            ...options,
        });
    }
}
class FineTuningJobsPage extends CursorPage {
}
class FineTuningJobEventsPage extends CursorPage {
}
Jobs.FineTuningJobsPage = FineTuningJobsPage;
Jobs.FineTuningJobEventsPage = FineTuningJobEventsPage;
Jobs.Checkpoints = Checkpoints;
Jobs.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;
//# sourceMappingURL=jobs.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/fine-tuning/fine-tuning.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.



class FineTuning extends APIResource {
    constructor() {
        super(...arguments);
        this.jobs = new Jobs(this._client);
    }
}
FineTuning.Jobs = Jobs;
FineTuning.FineTuningJobsPage = FineTuningJobsPage;
FineTuning.FineTuningJobEventsPage = FineTuningJobEventsPage;
//# sourceMappingURL=fine-tuning.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/Util.mjs
/**
 * Like `Promise.allSettled()` but throws an error if any promises are rejected.
 */
const allSettledWithThrow = async (promises) => {
    const results = await Promise.allSettled(promises);
    const rejected = results.filter((result) => result.status === 'rejected');
    if (rejected.length) {
        for (const result of rejected) {
            console.error(result.reason);
        }
        throw new Error(`${rejected.length} promise(s) failed - see the above errors`);
    }
    // Note: TS was complaining about using `.filter().map()` here for some reason
    const values = [];
    for (const result of results) {
        if (result.status === 'fulfilled') {
            values.push(result.value);
        }
    }
    return values;
};
//# sourceMappingURL=Util.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/vector-stores/files.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.



class files_Files extends APIResource {
    /**
     * Create a vector store file by attaching a
     * [File](https://platform.openai.com/docs/api-reference/files) to a
     * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).
     */
    create(vectorStoreId, body, options) {
        return this._client.post(`/vector_stores/${vectorStoreId}/files`, {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Retrieves a vector store file.
     */
    retrieve(vectorStoreId, fileId, options) {
        return this._client.get(`/vector_stores/${vectorStoreId}/files/${fileId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Update attributes on a vector store file.
     */
    update(vectorStoreId, fileId, body, options) {
        return this._client.post(`/vector_stores/${vectorStoreId}/files/${fileId}`, {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    list(vectorStoreId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list(vectorStoreId, {}, query);
        }
        return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files`, VectorStoreFilesPage, {
            query,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Delete a vector store file. This will remove the file from the vector store but
     * the file itself will not be deleted. To delete the file, use the
     * [delete file](https://platform.openai.com/docs/api-reference/files/delete)
     * endpoint.
     */
    del(vectorStoreId, fileId, options) {
        return this._client.delete(`/vector_stores/${vectorStoreId}/files/${fileId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Attach a file to the given vector store and wait for it to be processed.
     */
    async createAndPoll(vectorStoreId, body, options) {
        const file = await this.create(vectorStoreId, body, options);
        return await this.poll(vectorStoreId, file.id, options);
    }
    /**
     * Wait for the vector store file to finish processing.
     *
     * Note: this will return even if the file failed to process, you need to check
     * file.last_error and file.status to handle these cases
     */
    async poll(vectorStoreId, fileId, options) {
        const headers = { ...options?.headers, 'X-Stainless-Poll-Helper': 'true' };
        if (options?.pollIntervalMs) {
            headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();
        }
        while (true) {
            const fileResponse = await this.retrieve(vectorStoreId, fileId, {
                ...options,
                headers,
            }).withResponse();
            const file = fileResponse.data;
            switch (file.status) {
                case 'in_progress':
                    let sleepInterval = 5000;
                    if (options?.pollIntervalMs) {
                        sleepInterval = options.pollIntervalMs;
                    }
                    else {
                        const headerInterval = fileResponse.response.headers.get('openai-poll-after-ms');
                        if (headerInterval) {
                            const headerIntervalMs = parseInt(headerInterval);
                            if (!isNaN(headerIntervalMs)) {
                                sleepInterval = headerIntervalMs;
                            }
                        }
                    }
                    await sleep(sleepInterval);
                    break;
                case 'failed':
                case 'completed':
                    return file;
            }
        }
    }
    /**
     * Upload a file to the `files` API and then attach it to the given vector store.
     *
     * Note the file will be asynchronously processed (you can use the alternative
     * polling helper method to wait for processing to complete).
     */
    async upload(vectorStoreId, file, options) {
        const fileInfo = await this._client.files.create({ file: file, purpose: 'assistants' }, options);
        return this.create(vectorStoreId, { file_id: fileInfo.id }, options);
    }
    /**
     * Add a file to a vector store and poll until processing is complete.
     */
    async uploadAndPoll(vectorStoreId, file, options) {
        const fileInfo = await this.upload(vectorStoreId, file, options);
        return await this.poll(vectorStoreId, fileInfo.id, options);
    }
    /**
     * Retrieve the parsed contents of a vector store file.
     */
    content(vectorStoreId, fileId, options) {
        return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files/${fileId}/content`, FileContentResponsesPage, { ...options, headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers } });
    }
}
class VectorStoreFilesPage extends CursorPage {
}
/**
 * Note: no pagination actually occurs yet, this is for forwards-compatibility.
 */
class FileContentResponsesPage extends Page {
}
files_Files.VectorStoreFilesPage = VectorStoreFilesPage;
files_Files.FileContentResponsesPage = FileContentResponsesPage;
//# sourceMappingURL=files.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/vector-stores/file-batches.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.





class FileBatches extends APIResource {
    /**
     * Create a vector store file batch.
     */
    create(vectorStoreId, body, options) {
        return this._client.post(`/vector_stores/${vectorStoreId}/file_batches`, {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Retrieves a vector store file batch.
     */
    retrieve(vectorStoreId, batchId, options) {
        return this._client.get(`/vector_stores/${vectorStoreId}/file_batches/${batchId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Cancel a vector store file batch. This attempts to cancel the processing of
     * files in this batch as soon as possible.
     */
    cancel(vectorStoreId, batchId, options) {
        return this._client.post(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/cancel`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Create a vector store batch and poll until all files have been processed.
     */
    async createAndPoll(vectorStoreId, body, options) {
        const batch = await this.create(vectorStoreId, body);
        return await this.poll(vectorStoreId, batch.id, options);
    }
    listFiles(vectorStoreId, batchId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.listFiles(vectorStoreId, batchId, {}, query);
        }
        return this._client.getAPIList(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/files`, VectorStoreFilesPage, { query, ...options, headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers } });
    }
    /**
     * Wait for the given file batch to be processed.
     *
     * Note: this will return even if one of the files failed to process, you need to
     * check batch.file_counts.failed_count to handle this case.
     */
    async poll(vectorStoreId, batchId, options) {
        const headers = { ...options?.headers, 'X-Stainless-Poll-Helper': 'true' };
        if (options?.pollIntervalMs) {
            headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();
        }
        while (true) {
            const { data: batch, response } = await this.retrieve(vectorStoreId, batchId, {
                ...options,
                headers,
            }).withResponse();
            switch (batch.status) {
                case 'in_progress':
                    let sleepInterval = 5000;
                    if (options?.pollIntervalMs) {
                        sleepInterval = options.pollIntervalMs;
                    }
                    else {
                        const headerInterval = response.headers.get('openai-poll-after-ms');
                        if (headerInterval) {
                            const headerIntervalMs = parseInt(headerInterval);
                            if (!isNaN(headerIntervalMs)) {
                                sleepInterval = headerIntervalMs;
                            }
                        }
                    }
                    await sleep(sleepInterval);
                    break;
                case 'failed':
                case 'cancelled':
                case 'completed':
                    return batch;
            }
        }
    }
    /**
     * Uploads the given files concurrently and then creates a vector store file batch.
     *
     * The concurrency limit is configurable using the `maxConcurrency` parameter.
     */
    async uploadAndPoll(vectorStoreId, { files, fileIds = [] }, options) {
        if (files == null || files.length == 0) {
            throw new Error(`No \`files\` provided to process. If you've already uploaded files you should use \`.createAndPoll()\` instead`);
        }
        const configuredConcurrency = options?.maxConcurrency ?? 5;
        // We cap the number of workers at the number of files (so we don't start any unnecessary workers)
        const concurrencyLimit = Math.min(configuredConcurrency, files.length);
        const client = this._client;
        const fileIterator = files.values();
        const allFileIds = [...fileIds];
        // This code is based on this design. The libraries don't accommodate our environment limits.
        // https://stackoverflow.com/questions/40639432/what-is-the-best-way-to-limit-concurrency-when-using-es6s-promise-all
        async function processFiles(iterator) {
            for (let item of iterator) {
                const fileObj = await client.files.create({ file: item, purpose: 'assistants' }, options);
                allFileIds.push(fileObj.id);
            }
        }
        // Start workers to process results
        const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);
        // Wait for all processing to complete.
        await allSettledWithThrow(workers);
        return await this.createAndPoll(vectorStoreId, {
            file_ids: allFileIds,
        });
    }
}

//# sourceMappingURL=file-batches.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/vector-stores/vector-stores.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.







class VectorStores extends APIResource {
    constructor() {
        super(...arguments);
        this.files = new files_Files(this._client);
        this.fileBatches = new FileBatches(this._client);
    }
    /**
     * Create a vector store.
     */
    create(body, options) {
        return this._client.post('/vector_stores', {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Retrieves a vector store.
     */
    retrieve(vectorStoreId, options) {
        return this._client.get(`/vector_stores/${vectorStoreId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Modifies a vector store.
     */
    update(vectorStoreId, body, options) {
        return this._client.post(`/vector_stores/${vectorStoreId}`, {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    list(query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/vector_stores', VectorStoresPage, {
            query,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Delete a vector store.
     */
    del(vectorStoreId, options) {
        return this._client.delete(`/vector_stores/${vectorStoreId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Search a vector store for relevant chunks based on a query and file attributes
     * filter.
     */
    search(vectorStoreId, body, options) {
        return this._client.getAPIList(`/vector_stores/${vectorStoreId}/search`, VectorStoreSearchResponsesPage, {
            body,
            method: 'post',
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
}
class VectorStoresPage extends CursorPage {
}
/**
 * Note: no pagination actually occurs yet, this is for forwards-compatibility.
 */
class VectorStoreSearchResponsesPage extends Page {
}
VectorStores.VectorStoresPage = VectorStoresPage;
VectorStores.VectorStoreSearchResponsesPage = VectorStoreSearchResponsesPage;
VectorStores.Files = files_Files;
VectorStores.VectorStoreFilesPage = VectorStoreFilesPage;
VectorStores.FileContentResponsesPage = FileContentResponsesPage;
VectorStores.FileBatches = FileBatches;
//# sourceMappingURL=vector-stores.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/beta/assistants.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.



class Assistants extends APIResource {
    /**
     * Create an assistant with a model and instructions.
     */
    create(body, options) {
        return this._client.post('/assistants', {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Retrieves an assistant.
     */
    retrieve(assistantId, options) {
        return this._client.get(`/assistants/${assistantId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Modifies an assistant.
     */
    update(assistantId, body, options) {
        return this._client.post(`/assistants/${assistantId}`, {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    list(query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/assistants', AssistantsPage, {
            query,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Delete an assistant.
     */
    del(assistantId, options) {
        return this._client.delete(`/assistants/${assistantId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
}
class AssistantsPage extends CursorPage {
}
Assistants.AssistantsPage = AssistantsPage;
//# sourceMappingURL=assistants.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/RunnableFunction.mjs
function isRunnableFunctionWithParse(fn) {
    return typeof fn.parse === 'function';
}
/**
 * This is helper class for passing a `function` and `parse` where the `function`
 * argument type matches the `parse` return type.
 *
 * @deprecated - please use ParsingToolFunction instead.
 */
class ParsingFunction {
    constructor(input) {
        this.function = input.function;
        this.parse = input.parse;
        this.parameters = input.parameters;
        this.description = input.description;
        this.name = input.name;
    }
}
/**
 * This is helper class for passing a `function` and `parse` where the `function`
 * argument type matches the `parse` return type.
 */
class ParsingToolFunction {
    constructor(input) {
        this.type = 'function';
        this.function = input;
    }
}
//# sourceMappingURL=RunnableFunction.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/chatCompletionUtils.mjs
const isAssistantMessage = (message) => {
    return message?.role === 'assistant';
};
const isFunctionMessage = (message) => {
    return message?.role === 'function';
};
const isToolMessage = (message) => {
    return message?.role === 'tool';
};
function isPresent(obj) {
    return obj != null;
}
//# sourceMappingURL=chatCompletionUtils.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/EventStream.mjs
var EventStream_classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var EventStream_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _EventStream_instances, _EventStream_connectedPromise, _EventStream_resolveConnectedPromise, _EventStream_rejectConnectedPromise, _EventStream_endPromise, _EventStream_resolveEndPromise, _EventStream_rejectEndPromise, _EventStream_listeners, _EventStream_ended, _EventStream_errored, _EventStream_aborted, _EventStream_catchingPromiseCreated, _EventStream_handleError;

class EventStream {
    constructor() {
        _EventStream_instances.add(this);
        this.controller = new AbortController();
        _EventStream_connectedPromise.set(this, void 0);
        _EventStream_resolveConnectedPromise.set(this, () => { });
        _EventStream_rejectConnectedPromise.set(this, () => { });
        _EventStream_endPromise.set(this, void 0);
        _EventStream_resolveEndPromise.set(this, () => { });
        _EventStream_rejectEndPromise.set(this, () => { });
        _EventStream_listeners.set(this, {});
        _EventStream_ended.set(this, false);
        _EventStream_errored.set(this, false);
        _EventStream_aborted.set(this, false);
        _EventStream_catchingPromiseCreated.set(this, false);
        EventStream_classPrivateFieldSet(this, _EventStream_connectedPromise, new Promise((resolve, reject) => {
            EventStream_classPrivateFieldSet(this, _EventStream_resolveConnectedPromise, resolve, "f");
            EventStream_classPrivateFieldSet(this, _EventStream_rejectConnectedPromise, reject, "f");
        }), "f");
        EventStream_classPrivateFieldSet(this, _EventStream_endPromise, new Promise((resolve, reject) => {
            EventStream_classPrivateFieldSet(this, _EventStream_resolveEndPromise, resolve, "f");
            EventStream_classPrivateFieldSet(this, _EventStream_rejectEndPromise, reject, "f");
        }), "f");
        // Don't let these promises cause unhandled rejection errors.
        // we will manually cause an unhandled rejection error later
        // if the user hasn't registered any error listener or called
        // any promise-returning method.
        EventStream_classPrivateFieldGet(this, _EventStream_connectedPromise, "f").catch(() => { });
        EventStream_classPrivateFieldGet(this, _EventStream_endPromise, "f").catch(() => { });
    }
    _run(executor) {
        // Unfortunately if we call `executor()` immediately we get runtime errors about
        // references to `this` before the `super()` constructor call returns.
        setTimeout(() => {
            executor().then(() => {
                this._emitFinal();
                this._emit('end');
            }, EventStream_classPrivateFieldGet(this, _EventStream_instances, "m", _EventStream_handleError).bind(this));
        }, 0);
    }
    _connected() {
        if (this.ended)
            return;
        EventStream_classPrivateFieldGet(this, _EventStream_resolveConnectedPromise, "f").call(this);
        this._emit('connect');
    }
    get ended() {
        return EventStream_classPrivateFieldGet(this, _EventStream_ended, "f");
    }
    get errored() {
        return EventStream_classPrivateFieldGet(this, _EventStream_errored, "f");
    }
    get aborted() {
        return EventStream_classPrivateFieldGet(this, _EventStream_aborted, "f");
    }
    abort() {
        this.controller.abort();
    }
    /**
     * Adds the listener function to the end of the listeners array for the event.
     * No checks are made to see if the listener has already been added. Multiple calls passing
     * the same combination of event and listener will result in the listener being added, and
     * called, multiple times.
     * @returns this ChatCompletionStream, so that calls can be chained
     */
    on(event, listener) {
        const listeners = EventStream_classPrivateFieldGet(this, _EventStream_listeners, "f")[event] || (EventStream_classPrivateFieldGet(this, _EventStream_listeners, "f")[event] = []);
        listeners.push({ listener });
        return this;
    }
    /**
     * Removes the specified listener from the listener array for the event.
     * off() will remove, at most, one instance of a listener from the listener array. If any single
     * listener has been added multiple times to the listener array for the specified event, then
     * off() must be called multiple times to remove each instance.
     * @returns this ChatCompletionStream, so that calls can be chained
     */
    off(event, listener) {
        const listeners = EventStream_classPrivateFieldGet(this, _EventStream_listeners, "f")[event];
        if (!listeners)
            return this;
        const index = listeners.findIndex((l) => l.listener === listener);
        if (index >= 0)
            listeners.splice(index, 1);
        return this;
    }
    /**
     * Adds a one-time listener function for the event. The next time the event is triggered,
     * this listener is removed and then invoked.
     * @returns this ChatCompletionStream, so that calls can be chained
     */
    once(event, listener) {
        const listeners = EventStream_classPrivateFieldGet(this, _EventStream_listeners, "f")[event] || (EventStream_classPrivateFieldGet(this, _EventStream_listeners, "f")[event] = []);
        listeners.push({ listener, once: true });
        return this;
    }
    /**
     * This is similar to `.once()`, but returns a Promise that resolves the next time
     * the event is triggered, instead of calling a listener callback.
     * @returns a Promise that resolves the next time given event is triggered,
     * or rejects if an error is emitted.  (If you request the 'error' event,
     * returns a promise that resolves with the error).
     *
     * Example:
     *
     *   const message = await stream.emitted('message') // rejects if the stream errors
     */
    emitted(event) {
        return new Promise((resolve, reject) => {
            EventStream_classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, "f");
            if (event !== 'error')
                this.once('error', reject);
            this.once(event, resolve);
        });
    }
    async done() {
        EventStream_classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, "f");
        await EventStream_classPrivateFieldGet(this, _EventStream_endPromise, "f");
    }
    _emit(event, ...args) {
        // make sure we don't emit any events after end
        if (EventStream_classPrivateFieldGet(this, _EventStream_ended, "f")) {
            return;
        }
        if (event === 'end') {
            EventStream_classPrivateFieldSet(this, _EventStream_ended, true, "f");
            EventStream_classPrivateFieldGet(this, _EventStream_resolveEndPromise, "f").call(this);
        }
        const listeners = EventStream_classPrivateFieldGet(this, _EventStream_listeners, "f")[event];
        if (listeners) {
            EventStream_classPrivateFieldGet(this, _EventStream_listeners, "f")[event] = listeners.filter((l) => !l.once);
            listeners.forEach(({ listener }) => listener(...args));
        }
        if (event === 'abort') {
            const error = args[0];
            if (!EventStream_classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, "f") && !listeners?.length) {
                Promise.reject(error);
            }
            EventStream_classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, "f").call(this, error);
            EventStream_classPrivateFieldGet(this, _EventStream_rejectEndPromise, "f").call(this, error);
            this._emit('end');
            return;
        }
        if (event === 'error') {
            // NOTE: _emit('error', error) should only be called from #handleError().
            const error = args[0];
            if (!EventStream_classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, "f") && !listeners?.length) {
                // Trigger an unhandled rejection if the user hasn't registered any error handlers.
                // If you are seeing stack traces here, make sure to handle errors via either:
                // - runner.on('error', () => ...)
                // - await runner.done()
                // - await runner.finalChatCompletion()
                // - etc.
                Promise.reject(error);
            }
            EventStream_classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, "f").call(this, error);
            EventStream_classPrivateFieldGet(this, _EventStream_rejectEndPromise, "f").call(this, error);
            this._emit('end');
        }
    }
    _emitFinal() { }
}
_EventStream_connectedPromise = new WeakMap(), _EventStream_resolveConnectedPromise = new WeakMap(), _EventStream_rejectConnectedPromise = new WeakMap(), _EventStream_endPromise = new WeakMap(), _EventStream_resolveEndPromise = new WeakMap(), _EventStream_rejectEndPromise = new WeakMap(), _EventStream_listeners = new WeakMap(), _EventStream_ended = new WeakMap(), _EventStream_errored = new WeakMap(), _EventStream_aborted = new WeakMap(), _EventStream_catchingPromiseCreated = new WeakMap(), _EventStream_instances = new WeakSet(), _EventStream_handleError = function _EventStream_handleError(error) {
    EventStream_classPrivateFieldSet(this, _EventStream_errored, true, "f");
    if (error instanceof Error && error.name === 'AbortError') {
        error = new APIUserAbortError();
    }
    if (error instanceof APIUserAbortError) {
        EventStream_classPrivateFieldSet(this, _EventStream_aborted, true, "f");
        return this._emit('abort', error);
    }
    if (error instanceof error_OpenAIError) {
        return this._emit('error', error);
    }
    if (error instanceof Error) {
        const openAIError = new error_OpenAIError(error.message);
        // @ts-ignore
        openAIError.cause = error;
        return this._emit('error', openAIError);
    }
    return this._emit('error', new error_OpenAIError(String(error)));
};
//# sourceMappingURL=EventStream.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/parser.mjs

function makeParseableResponseFormat(response_format, parser) {
    const obj = { ...response_format };
    Object.defineProperties(obj, {
        $brand: {
            value: 'auto-parseable-response-format',
            enumerable: false,
        },
        $parseRaw: {
            value: parser,
            enumerable: false,
        },
    });
    return obj;
}
function makeParseableTextFormat(response_format, parser) {
    const obj = { ...response_format };
    Object.defineProperties(obj, {
        $brand: {
            value: 'auto-parseable-response-format',
            enumerable: false,
        },
        $parseRaw: {
            value: parser,
            enumerable: false,
        },
    });
    return obj;
}
function isAutoParsableResponseFormat(response_format) {
    return response_format?.['$brand'] === 'auto-parseable-response-format';
}
function makeParseableTool(tool, { parser, callback, }) {
    const obj = { ...tool };
    Object.defineProperties(obj, {
        $brand: {
            value: 'auto-parseable-tool',
            enumerable: false,
        },
        $parseRaw: {
            value: parser,
            enumerable: false,
        },
        $callback: {
            value: callback,
            enumerable: false,
        },
    });
    return obj;
}
function isAutoParsableTool(tool) {
    return tool?.['$brand'] === 'auto-parseable-tool';
}
function maybeParseChatCompletion(completion, params) {
    if (!params || !hasAutoParseableInput(params)) {
        return {
            ...completion,
            choices: completion.choices.map((choice) => ({
                ...choice,
                message: {
                    ...choice.message,
                    parsed: null,
                    ...(choice.message.tool_calls ?
                        {
                            tool_calls: choice.message.tool_calls,
                        }
                        : undefined),
                },
            })),
        };
    }
    return parseChatCompletion(completion, params);
}
function parseChatCompletion(completion, params) {
    const choices = completion.choices.map((choice) => {
        if (choice.finish_reason === 'length') {
            throw new LengthFinishReasonError();
        }
        if (choice.finish_reason === 'content_filter') {
            throw new ContentFilterFinishReasonError();
        }
        return {
            ...choice,
            message: {
                ...choice.message,
                ...(choice.message.tool_calls ?
                    {
                        tool_calls: choice.message.tool_calls?.map((toolCall) => parseToolCall(params, toolCall)) ?? undefined,
                    }
                    : undefined),
                parsed: choice.message.content && !choice.message.refusal ?
                    parseResponseFormat(params, choice.message.content)
                    : null,
            },
        };
    });
    return { ...completion, choices };
}
function parseResponseFormat(params, content) {
    if (params.response_format?.type !== 'json_schema') {
        return null;
    }
    if (params.response_format?.type === 'json_schema') {
        if ('$parseRaw' in params.response_format) {
            const response_format = params.response_format;
            return response_format.$parseRaw(content);
        }
        return JSON.parse(content);
    }
    return null;
}
function parseToolCall(params, toolCall) {
    const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);
    return {
        ...toolCall,
        function: {
            ...toolCall.function,
            parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments)
                : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments)
                    : null,
        },
    };
}
function shouldParseToolCall(params, toolCall) {
    if (!params) {
        return false;
    }
    const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);
    return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;
}
function hasAutoParseableInput(params) {
    if (isAutoParsableResponseFormat(params.response_format)) {
        return true;
    }
    return (params.tools?.some((t) => isAutoParsableTool(t) || (t.type === 'function' && t.function.strict === true)) ?? false);
}
function validateInputTools(tools) {
    for (const tool of tools ?? []) {
        if (tool.type !== 'function') {
            throw new error_OpenAIError(`Currently only \`function\` tool types support auto-parsing; Received \`${tool.type}\``);
        }
        if (tool.function.strict !== true) {
            throw new error_OpenAIError(`The \`${tool.function.name}\` tool is not marked with \`strict: true\`. Only strict function tools can be auto-parsed`);
        }
    }
}
//# sourceMappingURL=parser.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/AbstractChatCompletionRunner.mjs
var AbstractChatCompletionRunner_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;





const DEFAULT_MAX_CHAT_COMPLETIONS = 10;
class AbstractChatCompletionRunner extends EventStream {
    constructor() {
        super(...arguments);
        _AbstractChatCompletionRunner_instances.add(this);
        this._chatCompletions = [];
        this.messages = [];
    }
    _addChatCompletion(chatCompletion) {
        this._chatCompletions.push(chatCompletion);
        this._emit('chatCompletion', chatCompletion);
        const message = chatCompletion.choices[0]?.message;
        if (message)
            this._addMessage(message);
        return chatCompletion;
    }
    _addMessage(message, emit = true) {
        if (!('content' in message))
            message.content = null;
        this.messages.push(message);
        if (emit) {
            this._emit('message', message);
            if ((isFunctionMessage(message) || isToolMessage(message)) && message.content) {
                // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.
                this._emit('functionCallResult', message.content);
            }
            else if (isAssistantMessage(message) && message.function_call) {
                this._emit('functionCall', message.function_call);
            }
            else if (isAssistantMessage(message) && message.tool_calls) {
                for (const tool_call of message.tool_calls) {
                    if (tool_call.type === 'function') {
                        this._emit('functionCall', tool_call.function);
                    }
                }
            }
        }
    }
    /**
     * @returns a promise that resolves with the final ChatCompletion, or rejects
     * if an error occurred or the stream ended prematurely without producing a ChatCompletion.
     */
    async finalChatCompletion() {
        await this.done();
        const completion = this._chatCompletions[this._chatCompletions.length - 1];
        if (!completion)
            throw new error_OpenAIError('stream ended without producing a ChatCompletion');
        return completion;
    }
    /**
     * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects
     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
     */
    async finalContent() {
        await this.done();
        return AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalContent).call(this);
    }
    /**
     * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,
     * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
     */
    async finalMessage() {
        await this.done();
        return AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this);
    }
    /**
     * @returns a promise that resolves with the content of the final FunctionCall, or rejects
     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
     */
    async finalFunctionCall() {
        await this.done();
        return AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);
    }
    async finalFunctionCallResult() {
        await this.done();
        return AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);
    }
    async totalUsage() {
        await this.done();
        return AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);
    }
    allChatCompletions() {
        return [...this._chatCompletions];
    }
    _emitFinal() {
        const completion = this._chatCompletions[this._chatCompletions.length - 1];
        if (completion)
            this._emit('finalChatCompletion', completion);
        const finalMessage = AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this);
        if (finalMessage)
            this._emit('finalMessage', finalMessage);
        const finalContent = AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalContent).call(this);
        if (finalContent)
            this._emit('finalContent', finalContent);
        const finalFunctionCall = AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);
        if (finalFunctionCall)
            this._emit('finalFunctionCall', finalFunctionCall);
        const finalFunctionCallResult = AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);
        if (finalFunctionCallResult != null)
            this._emit('finalFunctionCallResult', finalFunctionCallResult);
        if (this._chatCompletions.some((c) => c.usage)) {
            this._emit('totalUsage', AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));
        }
    }
    async _createChatCompletion(client, params, options) {
        const signal = options?.signal;
        if (signal) {
            if (signal.aborted)
                this.controller.abort();
            signal.addEventListener('abort', () => this.controller.abort());
        }
        AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_validateParams).call(this, params);
        const chatCompletion = await client.chat.completions.create({ ...params, stream: false }, { ...options, signal: this.controller.signal });
        this._connected();
        return this._addChatCompletion(parseChatCompletion(chatCompletion, params));
    }
    async _runChatCompletion(client, params, options) {
        for (const message of params.messages) {
            this._addMessage(message, false);
        }
        return await this._createChatCompletion(client, params, options);
    }
    async _runFunctions(client, params, options) {
        const role = 'function';
        const { function_call = 'auto', stream, ...restParams } = params;
        const singleFunctionToCall = typeof function_call !== 'string' && function_call?.name;
        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
        const functionsByName = {};
        for (const f of params.functions) {
            functionsByName[f.name || f.function.name] = f;
        }
        const functions = params.functions.map((f) => ({
            name: f.name || f.function.name,
            parameters: f.parameters,
            description: f.description,
        }));
        for (const message of params.messages) {
            this._addMessage(message, false);
        }
        for (let i = 0; i < maxChatCompletions; ++i) {
            const chatCompletion = await this._createChatCompletion(client, {
                ...restParams,
                function_call,
                functions,
                messages: [...this.messages],
            }, options);
            const message = chatCompletion.choices[0]?.message;
            if (!message) {
                throw new error_OpenAIError(`missing message in ChatCompletion response`);
            }
            if (!message.function_call)
                return;
            const { name, arguments: args } = message.function_call;
            const fn = functionsByName[name];
            if (!fn) {
                const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions
                    .map((f) => JSON.stringify(f.name))
                    .join(', ')}. Please try again`;
                this._addMessage({ role, name, content });
                continue;
            }
            else if (singleFunctionToCall && singleFunctionToCall !== name) {
                const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;
                this._addMessage({ role, name, content });
                continue;
            }
            let parsed;
            try {
                parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;
            }
            catch (error) {
                this._addMessage({
                    role,
                    name,
                    content: error instanceof Error ? error.message : String(error),
                });
                continue;
            }
            // @ts-expect-error it can't rule out `never` type.
            const rawContent = await fn.function(parsed, this);
            const content = AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);
            this._addMessage({ role, name, content });
            if (singleFunctionToCall)
                return;
        }
    }
    async _runTools(client, params, options) {
        const role = 'tool';
        const { tool_choice = 'auto', stream, ...restParams } = params;
        const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;
        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
        // TODO(someday): clean this logic up
        const inputTools = params.tools.map((tool) => {
            if (isAutoParsableTool(tool)) {
                if (!tool.$callback) {
                    throw new error_OpenAIError('Tool given to `.runTools()` that does not have an associated function');
                }
                return {
                    type: 'function',
                    function: {
                        function: tool.$callback,
                        name: tool.function.name,
                        description: tool.function.description || '',
                        parameters: tool.function.parameters,
                        parse: tool.$parseRaw,
                        strict: true,
                    },
                };
            }
            return tool;
        });
        const functionsByName = {};
        for (const f of inputTools) {
            if (f.type === 'function') {
                functionsByName[f.function.name || f.function.function.name] = f.function;
            }
        }
        const tools = 'tools' in params ?
            inputTools.map((t) => t.type === 'function' ?
                {
                    type: 'function',
                    function: {
                        name: t.function.name || t.function.function.name,
                        parameters: t.function.parameters,
                        description: t.function.description,
                        strict: t.function.strict,
                    },
                }
                : t)
            : undefined;
        for (const message of params.messages) {
            this._addMessage(message, false);
        }
        for (let i = 0; i < maxChatCompletions; ++i) {
            const chatCompletion = await this._createChatCompletion(client, {
                ...restParams,
                tool_choice,
                tools,
                messages: [...this.messages],
            }, options);
            const message = chatCompletion.choices[0]?.message;
            if (!message) {
                throw new error_OpenAIError(`missing message in ChatCompletion response`);
            }
            if (!message.tool_calls?.length) {
                return;
            }
            for (const tool_call of message.tool_calls) {
                if (tool_call.type !== 'function')
                    continue;
                const tool_call_id = tool_call.id;
                const { name, arguments: args } = tool_call.function;
                const fn = functionsByName[name];
                if (!fn) {
                    const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${Object.keys(functionsByName)
                        .map((name) => JSON.stringify(name))
                        .join(', ')}. Please try again`;
                    this._addMessage({ role, tool_call_id, content });
                    continue;
                }
                else if (singleFunctionToCall && singleFunctionToCall !== name) {
                    const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;
                    this._addMessage({ role, tool_call_id, content });
                    continue;
                }
                let parsed;
                try {
                    parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;
                }
                catch (error) {
                    const content = error instanceof Error ? error.message : String(error);
                    this._addMessage({ role, tool_call_id, content });
                    continue;
                }
                // @ts-expect-error it can't rule out `never` type.
                const rawContent = await fn.function(parsed, this);
                const content = AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);
                this._addMessage({ role, tool_call_id, content });
                if (singleFunctionToCall) {
                    return;
                }
            }
        }
        return;
    }
}
_AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {
    return AbstractChatCompletionRunner_classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;
}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {
    let i = this.messages.length;
    while (i-- > 0) {
        const message = this.messages[i];
        if (isAssistantMessage(message)) {
            const { function_call, ...rest } = message;
            // TODO: support audio here
            const ret = {
                ...rest,
                content: message.content ?? null,
                refusal: message.refusal ?? null,
            };
            if (function_call) {
                ret.function_call = function_call;
            }
            return ret;
        }
    }
    throw new error_OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');
}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall() {
    for (let i = this.messages.length - 1; i >= 0; i--) {
        const message = this.messages[i];
        if (isAssistantMessage(message) && message?.function_call) {
            return message.function_call;
        }
        if (isAssistantMessage(message) && message?.tool_calls?.length) {
            return message.tool_calls.at(-1)?.function;
        }
    }
    return;
}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {
    for (let i = this.messages.length - 1; i >= 0; i--) {
        const message = this.messages[i];
        if (isFunctionMessage(message) && message.content != null) {
            return message.content;
        }
        if (isToolMessage(message) &&
            message.content != null &&
            typeof message.content === 'string' &&
            this.messages.some((x) => x.role === 'assistant' &&
                x.tool_calls?.some((y) => y.type === 'function' && y.id === message.tool_call_id))) {
            return message.content;
        }
    }
    return;
}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {
    const total = {
        completion_tokens: 0,
        prompt_tokens: 0,
        total_tokens: 0,
    };
    for (const { usage } of this._chatCompletions) {
        if (usage) {
            total.completion_tokens += usage.completion_tokens;
            total.prompt_tokens += usage.prompt_tokens;
            total.total_tokens += usage.total_tokens;
        }
    }
    return total;
}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {
    if (params.n != null && params.n > 1) {
        throw new error_OpenAIError('ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.');
    }
}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {
    return (typeof rawContent === 'string' ? rawContent
        : rawContent === undefined ? 'undefined'
            : JSON.stringify(rawContent));
};
//# sourceMappingURL=AbstractChatCompletionRunner.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/ChatCompletionRunner.mjs


class ChatCompletionRunner extends AbstractChatCompletionRunner {
    /** @deprecated - please use `runTools` instead. */
    static runFunctions(client, params, options) {
        const runner = new ChatCompletionRunner();
        const opts = {
            ...options,
            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },
        };
        runner._run(() => runner._runFunctions(client, params, opts));
        return runner;
    }
    static runTools(client, params, options) {
        const runner = new ChatCompletionRunner();
        const opts = {
            ...options,
            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },
        };
        runner._run(() => runner._runTools(client, params, opts));
        return runner;
    }
    _addMessage(message, emit = true) {
        super._addMessage(message, emit);
        if (isAssistantMessage(message) && message.content) {
            this._emit('content', message.content);
        }
    }
}
//# sourceMappingURL=ChatCompletionRunner.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/_vendor/partial-json-parser/parser.mjs
const STR = 0b000000001;
const NUM = 0b000000010;
const ARR = 0b000000100;
const OBJ = 0b000001000;
const NULL = 0b000010000;
const BOOL = 0b000100000;
const NAN = 0b001000000;
const INFINITY = 0b010000000;
const MINUS_INFINITY = 0b100000000;
const INF = INFINITY | MINUS_INFINITY;
const SPECIAL = NULL | BOOL | INF | NAN;
const ATOM = STR | NUM | SPECIAL;
const COLLECTION = ARR | OBJ;
const ALL = ATOM | COLLECTION;
const Allow = {
    STR,
    NUM,
    ARR,
    OBJ,
    NULL,
    BOOL,
    NAN,
    INFINITY,
    MINUS_INFINITY,
    INF,
    SPECIAL,
    ATOM,
    COLLECTION,
    ALL,
};
// The JSON string segment was unable to be parsed completely
class PartialJSON extends Error {
}
class MalformedJSON extends Error {
}
/**
 * Parse incomplete JSON
 * @param {string} jsonString Partial JSON to be parsed
 * @param {number} allowPartial Specify what types are allowed to be partial, see {@link Allow} for details
 * @returns The parsed JSON
 * @throws {PartialJSON} If the JSON is incomplete (related to the `allow` parameter)
 * @throws {MalformedJSON} If the JSON is malformed
 */
function parseJSON(jsonString, allowPartial = Allow.ALL) {
    if (typeof jsonString !== 'string') {
        throw new TypeError(`expecting str, got ${typeof jsonString}`);
    }
    if (!jsonString.trim()) {
        throw new Error(`${jsonString} is empty`);
    }
    return _parseJSON(jsonString.trim(), allowPartial);
}
const _parseJSON = (jsonString, allow) => {
    const length = jsonString.length;
    let index = 0;
    const markPartialJSON = (msg) => {
        throw new PartialJSON(`${msg} at position ${index}`);
    };
    const throwMalformedError = (msg) => {
        throw new MalformedJSON(`${msg} at position ${index}`);
    };
    const parseAny = () => {
        skipBlank();
        if (index >= length)
            markPartialJSON('Unexpected end of input');
        if (jsonString[index] === '"')
            return parseStr();
        if (jsonString[index] === '{')
            return parseObj();
        if (jsonString[index] === '[')
            return parseArr();
        if (jsonString.substring(index, index + 4) === 'null' ||
            (Allow.NULL & allow && length - index < 4 && 'null'.startsWith(jsonString.substring(index)))) {
            index += 4;
            return null;
        }
        if (jsonString.substring(index, index + 4) === 'true' ||
            (Allow.BOOL & allow && length - index < 4 && 'true'.startsWith(jsonString.substring(index)))) {
            index += 4;
            return true;
        }
        if (jsonString.substring(index, index + 5) === 'false' ||
            (Allow.BOOL & allow && length - index < 5 && 'false'.startsWith(jsonString.substring(index)))) {
            index += 5;
            return false;
        }
        if (jsonString.substring(index, index + 8) === 'Infinity' ||
            (Allow.INFINITY & allow && length - index < 8 && 'Infinity'.startsWith(jsonString.substring(index)))) {
            index += 8;
            return Infinity;
        }
        if (jsonString.substring(index, index + 9) === '-Infinity' ||
            (Allow.MINUS_INFINITY & allow &&
                1 < length - index &&
                length - index < 9 &&
                '-Infinity'.startsWith(jsonString.substring(index)))) {
            index += 9;
            return -Infinity;
        }
        if (jsonString.substring(index, index + 3) === 'NaN' ||
            (Allow.NAN & allow && length - index < 3 && 'NaN'.startsWith(jsonString.substring(index)))) {
            index += 3;
            return NaN;
        }
        return parseNum();
    };
    const parseStr = () => {
        const start = index;
        let escape = false;
        index++; // skip initial quote
        while (index < length && (jsonString[index] !== '"' || (escape && jsonString[index - 1] === '\\'))) {
            escape = jsonString[index] === '\\' ? !escape : false;
            index++;
        }
        if (jsonString.charAt(index) == '"') {
            try {
                return JSON.parse(jsonString.substring(start, ++index - Number(escape)));
            }
            catch (e) {
                throwMalformedError(String(e));
            }
        }
        else if (Allow.STR & allow) {
            try {
                return JSON.parse(jsonString.substring(start, index - Number(escape)) + '"');
            }
            catch (e) {
                // SyntaxError: Invalid escape sequence
                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('\\')) + '"');
            }
        }
        markPartialJSON('Unterminated string literal');
    };
    const parseObj = () => {
        index++; // skip initial brace
        skipBlank();
        const obj = {};
        try {
            while (jsonString[index] !== '}') {
                skipBlank();
                if (index >= length && Allow.OBJ & allow)
                    return obj;
                const key = parseStr();
                skipBlank();
                index++; // skip colon
                try {
                    const value = parseAny();
                    Object.defineProperty(obj, key, { value, writable: true, enumerable: true, configurable: true });
                }
                catch (e) {
                    if (Allow.OBJ & allow)
                        return obj;
                    else
                        throw e;
                }
                skipBlank();
                if (jsonString[index] === ',')
                    index++; // skip comma
            }
        }
        catch (e) {
            if (Allow.OBJ & allow)
                return obj;
            else
                markPartialJSON("Expected '}' at end of object");
        }
        index++; // skip final brace
        return obj;
    };
    const parseArr = () => {
        index++; // skip initial bracket
        const arr = [];
        try {
            while (jsonString[index] !== ']') {
                arr.push(parseAny());
                skipBlank();
                if (jsonString[index] === ',') {
                    index++; // skip comma
                }
            }
        }
        catch (e) {
            if (Allow.ARR & allow) {
                return arr;
            }
            markPartialJSON("Expected ']' at end of array");
        }
        index++; // skip final bracket
        return arr;
    };
    const parseNum = () => {
        if (index === 0) {
            if (jsonString === '-' && Allow.NUM & allow)
                markPartialJSON("Not sure what '-' is");
            try {
                return JSON.parse(jsonString);
            }
            catch (e) {
                if (Allow.NUM & allow) {
                    try {
                        if ('.' === jsonString[jsonString.length - 1])
                            return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf('.')));
                        return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf('e')));
                    }
                    catch (e) { }
                }
                throwMalformedError(String(e));
            }
        }
        const start = index;
        if (jsonString[index] === '-')
            index++;
        while (jsonString[index] && !',]}'.includes(jsonString[index]))
            index++;
        if (index == length && !(Allow.NUM & allow))
            markPartialJSON('Unterminated number literal');
        try {
            return JSON.parse(jsonString.substring(start, index));
        }
        catch (e) {
            if (jsonString.substring(start, index) === '-' && Allow.NUM & allow)
                markPartialJSON("Not sure what '-' is");
            try {
                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('e')));
            }
            catch (e) {
                throwMalformedError(String(e));
            }
        }
    };
    const skipBlank = () => {
        while (index < length && ' \n\r\t'.includes(jsonString[index])) {
            index++;
        }
    };
    return parseAny();
};
// using this function with malformed JSON is undefined behavior
const partialParse = (input) => parseJSON(input, Allow.ALL ^ Allow.NUM);

//# sourceMappingURL=parser.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/ChatCompletionStream.mjs
var ChatCompletionStream_classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var ChatCompletionStream_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ChatCompletionStream_instances, _ChatCompletionStream_params, _ChatCompletionStream_choiceEventStates, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_getChoiceEventState, _ChatCompletionStream_addChunk, _ChatCompletionStream_emitToolCallDoneEvent, _ChatCompletionStream_emitContentDoneEvents, _ChatCompletionStream_endRequest, _ChatCompletionStream_getAutoParseableResponseFormat, _ChatCompletionStream_accumulateChatCompletion;





class ChatCompletionStream extends AbstractChatCompletionRunner {
    constructor(params) {
        super();
        _ChatCompletionStream_instances.add(this);
        _ChatCompletionStream_params.set(this, void 0);
        _ChatCompletionStream_choiceEventStates.set(this, void 0);
        _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);
        ChatCompletionStream_classPrivateFieldSet(this, _ChatCompletionStream_params, params, "f");
        ChatCompletionStream_classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], "f");
    }
    get currentChatCompletionSnapshot() {
        return ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
    }
    /**
     * Intended for use on the frontend, consuming a stream produced with
     * `.toReadableStream()` on the backend.
     *
     * Note that messages sent to the model do not appear in `.on('message')`
     * in this context.
     */
    static fromReadableStream(stream) {
        const runner = new ChatCompletionStream(null);
        runner._run(() => runner._fromReadableStream(stream));
        return runner;
    }
    static createChatCompletion(client, params, options) {
        const runner = new ChatCompletionStream(params);
        runner._run(() => runner._runChatCompletion(client, { ...params, stream: true }, { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } }));
        return runner;
    }
    async _createChatCompletion(client, params, options) {
        super._createChatCompletion;
        const signal = options?.signal;
        if (signal) {
            if (signal.aborted)
                this.controller.abort();
            signal.addEventListener('abort', () => this.controller.abort());
        }
        ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_beginRequest).call(this);
        const stream = await client.chat.completions.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });
        this._connected();
        for await (const chunk of stream) {
            ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_addChunk).call(this, chunk);
        }
        if (stream.controller.signal?.aborted) {
            throw new APIUserAbortError();
        }
        return this._addChatCompletion(ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
    }
    async _fromReadableStream(readableStream, options) {
        const signal = options?.signal;
        if (signal) {
            if (signal.aborted)
                this.controller.abort();
            signal.addEventListener('abort', () => this.controller.abort());
        }
        ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_beginRequest).call(this);
        this._connected();
        const stream = Stream.fromReadableStream(readableStream, this.controller);
        let chatId;
        for await (const chunk of stream) {
            if (chatId && chatId !== chunk.id) {
                // A new request has been made.
                this._addChatCompletion(ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
            }
            ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_addChunk).call(this, chunk);
            chatId = chunk.id;
        }
        if (stream.controller.signal?.aborted) {
            throw new APIUserAbortError();
        }
        return this._addChatCompletion(ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
    }
    [(_ChatCompletionStream_params = new WeakMap(), _ChatCompletionStream_choiceEventStates = new WeakMap(), _ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {
        if (this.ended)
            return;
        ChatCompletionStream_classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, "f");
    }, _ChatCompletionStream_getChoiceEventState = function _ChatCompletionStream_getChoiceEventState(choice) {
        let state = ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, "f")[choice.index];
        if (state) {
            return state;
        }
        state = {
            content_done: false,
            refusal_done: false,
            logprobs_content_done: false,
            logprobs_refusal_done: false,
            done_tool_calls: new Set(),
            current_tool_call_index: null,
        };
        ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, "f")[choice.index] = state;
        return state;
    }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {
        if (this.ended)
            return;
        const completion = ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);
        this._emit('chunk', chunk, completion);
        for (const choice of chunk.choices) {
            const choiceSnapshot = completion.choices[choice.index];
            if (choice.delta.content != null &&
                choiceSnapshot.message?.role === 'assistant' &&
                choiceSnapshot.message?.content) {
                this._emit('content', choice.delta.content, choiceSnapshot.message.content);
                this._emit('content.delta', {
                    delta: choice.delta.content,
                    snapshot: choiceSnapshot.message.content,
                    parsed: choiceSnapshot.message.parsed,
                });
            }
            if (choice.delta.refusal != null &&
                choiceSnapshot.message?.role === 'assistant' &&
                choiceSnapshot.message?.refusal) {
                this._emit('refusal.delta', {
                    delta: choice.delta.refusal,
                    snapshot: choiceSnapshot.message.refusal,
                });
            }
            if (choice.logprobs?.content != null && choiceSnapshot.message?.role === 'assistant') {
                this._emit('logprobs.content.delta', {
                    content: choice.logprobs?.content,
                    snapshot: choiceSnapshot.logprobs?.content ?? [],
                });
            }
            if (choice.logprobs?.refusal != null && choiceSnapshot.message?.role === 'assistant') {
                this._emit('logprobs.refusal.delta', {
                    refusal: choice.logprobs?.refusal,
                    snapshot: choiceSnapshot.logprobs?.refusal ?? [],
                });
            }
            const state = ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);
            if (choiceSnapshot.finish_reason) {
                ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);
                if (state.current_tool_call_index != null) {
                    ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);
                }
            }
            for (const toolCall of choice.delta.tool_calls ?? []) {
                if (state.current_tool_call_index !== toolCall.index) {
                    ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);
                    // new tool call started, the previous one is done
                    if (state.current_tool_call_index != null) {
                        ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);
                    }
                }
                state.current_tool_call_index = toolCall.index;
            }
            for (const toolCallDelta of choice.delta.tool_calls ?? []) {
                const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallDelta.index];
                if (!toolCallSnapshot?.type) {
                    continue;
                }
                if (toolCallSnapshot?.type === 'function') {
                    this._emit('tool_calls.function.arguments.delta', {
                        name: toolCallSnapshot.function?.name,
                        index: toolCallDelta.index,
                        arguments: toolCallSnapshot.function.arguments,
                        parsed_arguments: toolCallSnapshot.function.parsed_arguments,
                        arguments_delta: toolCallDelta.function?.arguments ?? '',
                    });
                }
                else {
                    assertNever(toolCallSnapshot?.type);
                }
            }
        }
    }, _ChatCompletionStream_emitToolCallDoneEvent = function _ChatCompletionStream_emitToolCallDoneEvent(choiceSnapshot, toolCallIndex) {
        const state = ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);
        if (state.done_tool_calls.has(toolCallIndex)) {
            // we've already fired the done event
            return;
        }
        const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallIndex];
        if (!toolCallSnapshot) {
            throw new Error('no tool call snapshot');
        }
        if (!toolCallSnapshot.type) {
            throw new Error('tool call snapshot missing `type`');
        }
        if (toolCallSnapshot.type === 'function') {
            const inputTool = ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_params, "f")?.tools?.find((tool) => tool.type === 'function' && tool.function.name === toolCallSnapshot.function.name);
            this._emit('tool_calls.function.arguments.done', {
                name: toolCallSnapshot.function.name,
                index: toolCallIndex,
                arguments: toolCallSnapshot.function.arguments,
                parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments)
                    : inputTool?.function.strict ? JSON.parse(toolCallSnapshot.function.arguments)
                        : null,
            });
        }
        else {
            assertNever(toolCallSnapshot.type);
        }
    }, _ChatCompletionStream_emitContentDoneEvents = function _ChatCompletionStream_emitContentDoneEvents(choiceSnapshot) {
        const state = ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);
        if (choiceSnapshot.message.content && !state.content_done) {
            state.content_done = true;
            const responseFormat = ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getAutoParseableResponseFormat).call(this);
            this._emit('content.done', {
                content: choiceSnapshot.message.content,
                parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : null,
            });
        }
        if (choiceSnapshot.message.refusal && !state.refusal_done) {
            state.refusal_done = true;
            this._emit('refusal.done', { refusal: choiceSnapshot.message.refusal });
        }
        if (choiceSnapshot.logprobs?.content && !state.logprobs_content_done) {
            state.logprobs_content_done = true;
            this._emit('logprobs.content.done', { content: choiceSnapshot.logprobs.content });
        }
        if (choiceSnapshot.logprobs?.refusal && !state.logprobs_refusal_done) {
            state.logprobs_refusal_done = true;
            this._emit('logprobs.refusal.done', { refusal: choiceSnapshot.logprobs.refusal });
        }
    }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {
        if (this.ended) {
            throw new error_OpenAIError(`stream has ended, this shouldn't happen`);
        }
        const snapshot = ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
        if (!snapshot) {
            throw new error_OpenAIError(`request ended without sending any chunks`);
        }
        ChatCompletionStream_classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, "f");
        ChatCompletionStream_classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], "f");
        return finalizeChatCompletion(snapshot, ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_params, "f"));
    }, _ChatCompletionStream_getAutoParseableResponseFormat = function _ChatCompletionStream_getAutoParseableResponseFormat() {
        const responseFormat = ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_params, "f")?.response_format;
        if (isAutoParsableResponseFormat(responseFormat)) {
            return responseFormat;
        }
        return null;
    }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {
        var _a, _b, _c, _d;
        let snapshot = ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
        const { choices, ...rest } = chunk;
        if (!snapshot) {
            snapshot = ChatCompletionStream_classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {
                ...rest,
                choices: [],
            }, "f");
        }
        else {
            Object.assign(snapshot, rest);
        }
        for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices) {
            let choice = snapshot.choices[index];
            if (!choice) {
                choice = snapshot.choices[index] = { finish_reason, index, message: {}, logprobs, ...other };
            }
            if (logprobs) {
                if (!choice.logprobs) {
                    choice.logprobs = Object.assign({}, logprobs);
                }
                else {
                    const { content, refusal, ...rest } = logprobs;
                    assertIsEmpty(rest);
                    Object.assign(choice.logprobs, rest);
                    if (content) {
                        (_a = choice.logprobs).content ?? (_a.content = []);
                        choice.logprobs.content.push(...content);
                    }
                    if (refusal) {
                        (_b = choice.logprobs).refusal ?? (_b.refusal = []);
                        choice.logprobs.refusal.push(...refusal);
                    }
                }
            }
            if (finish_reason) {
                choice.finish_reason = finish_reason;
                if (ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_params, "f") && hasAutoParseableInput(ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_params, "f"))) {
                    if (finish_reason === 'length') {
                        throw new LengthFinishReasonError();
                    }
                    if (finish_reason === 'content_filter') {
                        throw new ContentFilterFinishReasonError();
                    }
                }
            }
            Object.assign(choice, other);
            if (!delta)
                continue; // Shouldn't happen; just in case.
            const { content, refusal, function_call, role, tool_calls, ...rest } = delta;
            assertIsEmpty(rest);
            Object.assign(choice.message, rest);
            if (refusal) {
                choice.message.refusal = (choice.message.refusal || '') + refusal;
            }
            if (role)
                choice.message.role = role;
            if (function_call) {
                if (!choice.message.function_call) {
                    choice.message.function_call = function_call;
                }
                else {
                    if (function_call.name)
                        choice.message.function_call.name = function_call.name;
                    if (function_call.arguments) {
                        (_c = choice.message.function_call).arguments ?? (_c.arguments = '');
                        choice.message.function_call.arguments += function_call.arguments;
                    }
                }
            }
            if (content) {
                choice.message.content = (choice.message.content || '') + content;
                if (!choice.message.refusal && ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getAutoParseableResponseFormat).call(this)) {
                    choice.message.parsed = partialParse(choice.message.content);
                }
            }
            if (tool_calls) {
                if (!choice.message.tool_calls)
                    choice.message.tool_calls = [];
                for (const { index, id, type, function: fn, ...rest } of tool_calls) {
                    const tool_call = ((_d = choice.message.tool_calls)[index] ?? (_d[index] = {}));
                    Object.assign(tool_call, rest);
                    if (id)
                        tool_call.id = id;
                    if (type)
                        tool_call.type = type;
                    if (fn)
                        tool_call.function ?? (tool_call.function = { name: fn.name ?? '', arguments: '' });
                    if (fn?.name)
                        tool_call.function.name = fn.name;
                    if (fn?.arguments) {
                        tool_call.function.arguments += fn.arguments;
                        if (shouldParseToolCall(ChatCompletionStream_classPrivateFieldGet(this, _ChatCompletionStream_params, "f"), tool_call)) {
                            tool_call.function.parsed_arguments = partialParse(tool_call.function.arguments);
                        }
                    }
                }
            }
        }
        return snapshot;
    }, Symbol.asyncIterator)]() {
        const pushQueue = [];
        const readQueue = [];
        let done = false;
        this.on('chunk', (chunk) => {
            const reader = readQueue.shift();
            if (reader) {
                reader.resolve(chunk);
            }
            else {
                pushQueue.push(chunk);
            }
        });
        this.on('end', () => {
            done = true;
            for (const reader of readQueue) {
                reader.resolve(undefined);
            }
            readQueue.length = 0;
        });
        this.on('abort', (err) => {
            done = true;
            for (const reader of readQueue) {
                reader.reject(err);
            }
            readQueue.length = 0;
        });
        this.on('error', (err) => {
            done = true;
            for (const reader of readQueue) {
                reader.reject(err);
            }
            readQueue.length = 0;
        });
        return {
            next: async () => {
                if (!pushQueue.length) {
                    if (done) {
                        return { value: undefined, done: true };
                    }
                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));
                }
                const chunk = pushQueue.shift();
                return { value: chunk, done: false };
            },
            return: async () => {
                this.abort();
                return { value: undefined, done: true };
            },
        };
    }
    toReadableStream() {
        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);
        return stream.toReadableStream();
    }
}
function finalizeChatCompletion(snapshot, params) {
    const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;
    const completion = {
        ...rest,
        id,
        choices: choices.map(({ message, finish_reason, index, logprobs, ...choiceRest }) => {
            if (!finish_reason) {
                throw new error_OpenAIError(`missing finish_reason for choice ${index}`);
            }
            const { content = null, function_call, tool_calls, ...messageRest } = message;
            const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.
            if (!role) {
                throw new error_OpenAIError(`missing role for choice ${index}`);
            }
            if (function_call) {
                const { arguments: args, name } = function_call;
                if (args == null) {
                    throw new error_OpenAIError(`missing function_call.arguments for choice ${index}`);
                }
                if (!name) {
                    throw new error_OpenAIError(`missing function_call.name for choice ${index}`);
                }
                return {
                    ...choiceRest,
                    message: {
                        content,
                        function_call: { arguments: args, name },
                        role,
                        refusal: message.refusal ?? null,
                    },
                    finish_reason,
                    index,
                    logprobs,
                };
            }
            if (tool_calls) {
                return {
                    ...choiceRest,
                    index,
                    finish_reason,
                    logprobs,
                    message: {
                        ...messageRest,
                        role,
                        content,
                        refusal: message.refusal ?? null,
                        tool_calls: tool_calls.map((tool_call, i) => {
                            const { function: fn, type, id, ...toolRest } = tool_call;
                            const { arguments: args, name, ...fnRest } = fn || {};
                            if (id == null) {
                                throw new error_OpenAIError(`missing choices[${index}].tool_calls[${i}].id\n${str(snapshot)}`);
                            }
                            if (type == null) {
                                throw new error_OpenAIError(`missing choices[${index}].tool_calls[${i}].type\n${str(snapshot)}`);
                            }
                            if (name == null) {
                                throw new error_OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name\n${str(snapshot)}`);
                            }
                            if (args == null) {
                                throw new error_OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments\n${str(snapshot)}`);
                            }
                            return { ...toolRest, id, type, function: { ...fnRest, name, arguments: args } };
                        }),
                    },
                };
            }
            return {
                ...choiceRest,
                message: { ...messageRest, content, role, refusal: message.refusal ?? null },
                finish_reason,
                index,
                logprobs,
            };
        }),
        created,
        model,
        object: 'chat.completion',
        ...(system_fingerprint ? { system_fingerprint } : {}),
    };
    return maybeParseChatCompletion(completion, params);
}
function str(x) {
    return JSON.stringify(x);
}
/**
 * Ensures the given argument is an empty object, useful for
 * asserting that all known properties on an object have been
 * destructured.
 */
function assertIsEmpty(obj) {
    return;
}
function assertNever(_x) { }
//# sourceMappingURL=ChatCompletionStream.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs

class ChatCompletionStreamingRunner extends ChatCompletionStream {
    static fromReadableStream(stream) {
        const runner = new ChatCompletionStreamingRunner(null);
        runner._run(() => runner._fromReadableStream(stream));
        return runner;
    }
    /** @deprecated - please use `runTools` instead. */
    static runFunctions(client, params, options) {
        const runner = new ChatCompletionStreamingRunner(null);
        const opts = {
            ...options,
            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },
        };
        runner._run(() => runner._runFunctions(client, params, opts));
        return runner;
    }
    static runTools(client, params, options) {
        const runner = new ChatCompletionStreamingRunner(
        // @ts-expect-error TODO these types are incompatible
        params);
        const opts = {
            ...options,
            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },
        };
        runner._run(() => runner._runTools(client, params, opts));
        return runner;
    }
}
//# sourceMappingURL=ChatCompletionStreamingRunner.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/beta/chat/completions.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.









class chat_completions_Completions extends APIResource {
    parse(body, options) {
        validateInputTools(body.tools);
        return this._client.chat.completions
            .create(body, {
            ...options,
            headers: {
                ...options?.headers,
                'X-Stainless-Helper-Method': 'beta.chat.completions.parse',
            },
        })
            ._thenUnwrap((completion) => parseChatCompletion(completion, body));
    }
    runFunctions(body, options) {
        if (body.stream) {
            return ChatCompletionStreamingRunner.runFunctions(this._client, body, options);
        }
        return ChatCompletionRunner.runFunctions(this._client, body, options);
    }
    runTools(body, options) {
        if (body.stream) {
            return ChatCompletionStreamingRunner.runTools(this._client, body, options);
        }
        return ChatCompletionRunner.runTools(this._client, body, options);
    }
    /**
     * Creates a chat completion stream
     */
    stream(body, options) {
        return ChatCompletionStream.createChatCompletion(this._client, body, options);
    }
}
//# sourceMappingURL=completions.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/beta/chat/chat.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.


class chat_Chat extends APIResource {
    constructor() {
        super(...arguments);
        this.completions = new chat_completions_Completions(this._client);
    }
}
(function (Chat) {
    Chat.Completions = chat_completions_Completions;
})(chat_Chat || (chat_Chat = {}));
//# sourceMappingURL=chat.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/beta/realtime/sessions.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

class Sessions extends APIResource {
    /**
     * Create an ephemeral API token for use in client-side applications with the
     * Realtime API. Can be configured with the same session parameters as the
     * `session.update` client event.
     *
     * It responds with a session object, plus a `client_secret` key which contains a
     * usable ephemeral API token that can be used to authenticate browser clients for
     * the Realtime API.
     */
    create(body, options) {
        return this._client.post('/realtime/sessions', {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
}
//# sourceMappingURL=sessions.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/beta/realtime/transcription-sessions.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

class TranscriptionSessions extends APIResource {
    /**
     * Create an ephemeral API token for use in client-side applications with the
     * Realtime API specifically for realtime transcriptions. Can be configured with
     * the same session parameters as the `transcription_session.update` client event.
     *
     * It responds with a session object, plus a `client_secret` key which contains a
     * usable ephemeral API token that can be used to authenticate browser clients for
     * the Realtime API.
     */
    create(body, options) {
        return this._client.post('/realtime/transcription_sessions', {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
}
//# sourceMappingURL=transcription-sessions.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/beta/realtime/realtime.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.





class Realtime extends APIResource {
    constructor() {
        super(...arguments);
        this.sessions = new Sessions(this._client);
        this.transcriptionSessions = new TranscriptionSessions(this._client);
    }
}
Realtime.Sessions = Sessions;
Realtime.TranscriptionSessions = TranscriptionSessions;
//# sourceMappingURL=realtime.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/AssistantStream.mjs
var AssistantStream_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var AssistantStream_classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _AssistantStream_instances, _AssistantStream_events, _AssistantStream_runStepSnapshots, _AssistantStream_messageSnapshots, _AssistantStream_messageSnapshot, _AssistantStream_finalRun, _AssistantStream_currentContentIndex, _AssistantStream_currentContent, _AssistantStream_currentToolCallIndex, _AssistantStream_currentToolCall, _AssistantStream_currentEvent, _AssistantStream_currentRunSnapshot, _AssistantStream_currentRunStepSnapshot, _AssistantStream_addEvent, _AssistantStream_endRequest, _AssistantStream_handleMessage, _AssistantStream_handleRunStep, _AssistantStream_handleEvent, _AssistantStream_accumulateRunStep, _AssistantStream_accumulateMessage, _AssistantStream_accumulateContent, _AssistantStream_handleRun;




class AssistantStream extends EventStream {
    constructor() {
        super(...arguments);
        _AssistantStream_instances.add(this);
        //Track all events in a single list for reference
        _AssistantStream_events.set(this, []);
        //Used to accumulate deltas
        //We are accumulating many types so the value here is not strict
        _AssistantStream_runStepSnapshots.set(this, {});
        _AssistantStream_messageSnapshots.set(this, {});
        _AssistantStream_messageSnapshot.set(this, void 0);
        _AssistantStream_finalRun.set(this, void 0);
        _AssistantStream_currentContentIndex.set(this, void 0);
        _AssistantStream_currentContent.set(this, void 0);
        _AssistantStream_currentToolCallIndex.set(this, void 0);
        _AssistantStream_currentToolCall.set(this, void 0);
        //For current snapshot methods
        _AssistantStream_currentEvent.set(this, void 0);
        _AssistantStream_currentRunSnapshot.set(this, void 0);
        _AssistantStream_currentRunStepSnapshot.set(this, void 0);
    }
    [(_AssistantStream_events = new WeakMap(), _AssistantStream_runStepSnapshots = new WeakMap(), _AssistantStream_messageSnapshots = new WeakMap(), _AssistantStream_messageSnapshot = new WeakMap(), _AssistantStream_finalRun = new WeakMap(), _AssistantStream_currentContentIndex = new WeakMap(), _AssistantStream_currentContent = new WeakMap(), _AssistantStream_currentToolCallIndex = new WeakMap(), _AssistantStream_currentToolCall = new WeakMap(), _AssistantStream_currentEvent = new WeakMap(), _AssistantStream_currentRunSnapshot = new WeakMap(), _AssistantStream_currentRunStepSnapshot = new WeakMap(), _AssistantStream_instances = new WeakSet(), Symbol.asyncIterator)]() {
        const pushQueue = [];
        const readQueue = [];
        let done = false;
        //Catch all for passing along all events
        this.on('event', (event) => {
            const reader = readQueue.shift();
            if (reader) {
                reader.resolve(event);
            }
            else {
                pushQueue.push(event);
            }
        });
        this.on('end', () => {
            done = true;
            for (const reader of readQueue) {
                reader.resolve(undefined);
            }
            readQueue.length = 0;
        });
        this.on('abort', (err) => {
            done = true;
            for (const reader of readQueue) {
                reader.reject(err);
            }
            readQueue.length = 0;
        });
        this.on('error', (err) => {
            done = true;
            for (const reader of readQueue) {
                reader.reject(err);
            }
            readQueue.length = 0;
        });
        return {
            next: async () => {
                if (!pushQueue.length) {
                    if (done) {
                        return { value: undefined, done: true };
                    }
                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));
                }
                const chunk = pushQueue.shift();
                return { value: chunk, done: false };
            },
            return: async () => {
                this.abort();
                return { value: undefined, done: true };
            },
        };
    }
    static fromReadableStream(stream) {
        const runner = new AssistantStream();
        runner._run(() => runner._fromReadableStream(stream));
        return runner;
    }
    async _fromReadableStream(readableStream, options) {
        const signal = options?.signal;
        if (signal) {
            if (signal.aborted)
                this.controller.abort();
            signal.addEventListener('abort', () => this.controller.abort());
        }
        this._connected();
        const stream = Stream.fromReadableStream(readableStream, this.controller);
        for await (const event of stream) {
            AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
        }
        if (stream.controller.signal?.aborted) {
            throw new APIUserAbortError();
        }
        return this._addRun(AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
    }
    toReadableStream() {
        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);
        return stream.toReadableStream();
    }
    static createToolAssistantStream(threadId, runId, runs, params, options) {
        const runner = new AssistantStream();
        runner._run(() => runner._runToolAssistantStream(threadId, runId, runs, params, {
            ...options,
            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },
        }));
        return runner;
    }
    async _createToolAssistantStream(run, threadId, runId, params, options) {
        const signal = options?.signal;
        if (signal) {
            if (signal.aborted)
                this.controller.abort();
            signal.addEventListener('abort', () => this.controller.abort());
        }
        const body = { ...params, stream: true };
        const stream = await run.submitToolOutputs(threadId, runId, body, {
            ...options,
            signal: this.controller.signal,
        });
        this._connected();
        for await (const event of stream) {
            AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
        }
        if (stream.controller.signal?.aborted) {
            throw new APIUserAbortError();
        }
        return this._addRun(AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
    }
    static createThreadAssistantStream(params, thread, options) {
        const runner = new AssistantStream();
        runner._run(() => runner._threadAssistantStream(params, thread, {
            ...options,
            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },
        }));
        return runner;
    }
    static createAssistantStream(threadId, runs, params, options) {
        const runner = new AssistantStream();
        runner._run(() => runner._runAssistantStream(threadId, runs, params, {
            ...options,
            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },
        }));
        return runner;
    }
    currentEvent() {
        return AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentEvent, "f");
    }
    currentRun() {
        return AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentRunSnapshot, "f");
    }
    currentMessageSnapshot() {
        return AssistantStream_classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f");
    }
    currentRunStepSnapshot() {
        return AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentRunStepSnapshot, "f");
    }
    async finalRunSteps() {
        await this.done();
        return Object.values(AssistantStream_classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f"));
    }
    async finalMessages() {
        await this.done();
        return Object.values(AssistantStream_classPrivateFieldGet(this, _AssistantStream_messageSnapshots, "f"));
    }
    async finalRun() {
        await this.done();
        if (!AssistantStream_classPrivateFieldGet(this, _AssistantStream_finalRun, "f"))
            throw Error('Final run was not received.');
        return AssistantStream_classPrivateFieldGet(this, _AssistantStream_finalRun, "f");
    }
    async _createThreadAssistantStream(thread, params, options) {
        const signal = options?.signal;
        if (signal) {
            if (signal.aborted)
                this.controller.abort();
            signal.addEventListener('abort', () => this.controller.abort());
        }
        const body = { ...params, stream: true };
        const stream = await thread.createAndRun(body, { ...options, signal: this.controller.signal });
        this._connected();
        for await (const event of stream) {
            AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
        }
        if (stream.controller.signal?.aborted) {
            throw new APIUserAbortError();
        }
        return this._addRun(AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
    }
    async _createAssistantStream(run, threadId, params, options) {
        const signal = options?.signal;
        if (signal) {
            if (signal.aborted)
                this.controller.abort();
            signal.addEventListener('abort', () => this.controller.abort());
        }
        const body = { ...params, stream: true };
        const stream = await run.create(threadId, body, { ...options, signal: this.controller.signal });
        this._connected();
        for await (const event of stream) {
            AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
        }
        if (stream.controller.signal?.aborted) {
            throw new APIUserAbortError();
        }
        return this._addRun(AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
    }
    static accumulateDelta(acc, delta) {
        for (const [key, deltaValue] of Object.entries(delta)) {
            if (!acc.hasOwnProperty(key)) {
                acc[key] = deltaValue;
                continue;
            }
            let accValue = acc[key];
            if (accValue === null || accValue === undefined) {
                acc[key] = deltaValue;
                continue;
            }
            // We don't accumulate these special properties
            if (key === 'index' || key === 'type') {
                acc[key] = deltaValue;
                continue;
            }
            // Type-specific accumulation logic
            if (typeof accValue === 'string' && typeof deltaValue === 'string') {
                accValue += deltaValue;
            }
            else if (typeof accValue === 'number' && typeof deltaValue === 'number') {
                accValue += deltaValue;
            }
            else if (isObj(accValue) && isObj(deltaValue)) {
                accValue = this.accumulateDelta(accValue, deltaValue);
            }
            else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {
                if (accValue.every((x) => typeof x === 'string' || typeof x === 'number')) {
                    accValue.push(...deltaValue); // Use spread syntax for efficient addition
                    continue;
                }
                for (const deltaEntry of deltaValue) {
                    if (!isObj(deltaEntry)) {
                        throw new Error(`Expected array delta entry to be an object but got: ${deltaEntry}`);
                    }
                    const index = deltaEntry['index'];
                    if (index == null) {
                        console.error(deltaEntry);
                        throw new Error('Expected array delta entry to have an `index` property');
                    }
                    if (typeof index !== 'number') {
                        throw new Error(`Expected array delta entry \`index\` property to be a number but got ${index}`);
                    }
                    const accEntry = accValue[index];
                    if (accEntry == null) {
                        accValue.push(deltaEntry);
                    }
                    else {
                        accValue[index] = this.accumulateDelta(accEntry, deltaEntry);
                    }
                }
                continue;
            }
            else {
                throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);
            }
            acc[key] = accValue;
        }
        return acc;
    }
    _addRun(run) {
        return run;
    }
    async _threadAssistantStream(params, thread, options) {
        return await this._createThreadAssistantStream(thread, params, options);
    }
    async _runAssistantStream(threadId, runs, params, options) {
        return await this._createAssistantStream(runs, threadId, params, options);
    }
    async _runToolAssistantStream(threadId, runId, runs, params, options) {
        return await this._createToolAssistantStream(runs, threadId, runId, params, options);
    }
}
_AssistantStream_addEvent = function _AssistantStream_addEvent(event) {
    if (this.ended)
        return;
    AssistantStream_classPrivateFieldSet(this, _AssistantStream_currentEvent, event, "f");
    AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_handleEvent).call(this, event);
    switch (event.event) {
        case 'thread.created':
            //No action on this event.
            break;
        case 'thread.run.created':
        case 'thread.run.queued':
        case 'thread.run.in_progress':
        case 'thread.run.requires_action':
        case 'thread.run.completed':
        case 'thread.run.incomplete':
        case 'thread.run.failed':
        case 'thread.run.cancelling':
        case 'thread.run.cancelled':
        case 'thread.run.expired':
            AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_handleRun).call(this, event);
            break;
        case 'thread.run.step.created':
        case 'thread.run.step.in_progress':
        case 'thread.run.step.delta':
        case 'thread.run.step.completed':
        case 'thread.run.step.failed':
        case 'thread.run.step.cancelled':
        case 'thread.run.step.expired':
            AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_handleRunStep).call(this, event);
            break;
        case 'thread.message.created':
        case 'thread.message.in_progress':
        case 'thread.message.delta':
        case 'thread.message.completed':
        case 'thread.message.incomplete':
            AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_handleMessage).call(this, event);
            break;
        case 'error':
            //This is included for completeness, but errors are processed in the SSE event processing so this should not occur
            throw new Error('Encountered an error event in event processing - errors should be processed earlier');
        default:
            AssistantStream_assertNever(event);
    }
}, _AssistantStream_endRequest = function _AssistantStream_endRequest() {
    if (this.ended) {
        throw new error_OpenAIError(`stream has ended, this shouldn't happen`);
    }
    if (!AssistantStream_classPrivateFieldGet(this, _AssistantStream_finalRun, "f"))
        throw Error('Final run has not been received');
    return AssistantStream_classPrivateFieldGet(this, _AssistantStream_finalRun, "f");
}, _AssistantStream_handleMessage = function _AssistantStream_handleMessage(event) {
    const [accumulatedMessage, newContent] = AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_accumulateMessage).call(this, event, AssistantStream_classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f"));
    AssistantStream_classPrivateFieldSet(this, _AssistantStream_messageSnapshot, accumulatedMessage, "f");
    AssistantStream_classPrivateFieldGet(this, _AssistantStream_messageSnapshots, "f")[accumulatedMessage.id] = accumulatedMessage;
    for (const content of newContent) {
        const snapshotContent = accumulatedMessage.content[content.index];
        if (snapshotContent?.type == 'text') {
            this._emit('textCreated', snapshotContent.text);
        }
    }
    switch (event.event) {
        case 'thread.message.created':
            this._emit('messageCreated', event.data);
            break;
        case 'thread.message.in_progress':
            break;
        case 'thread.message.delta':
            this._emit('messageDelta', event.data.delta, accumulatedMessage);
            if (event.data.delta.content) {
                for (const content of event.data.delta.content) {
                    //If it is text delta, emit a text delta event
                    if (content.type == 'text' && content.text) {
                        let textDelta = content.text;
                        let snapshot = accumulatedMessage.content[content.index];
                        if (snapshot && snapshot.type == 'text') {
                            this._emit('textDelta', textDelta, snapshot.text);
                        }
                        else {
                            throw Error('The snapshot associated with this text delta is not text or missing');
                        }
                    }
                    if (content.index != AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentContentIndex, "f")) {
                        //See if we have in progress content
                        if (AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentContent, "f")) {
                            switch (AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentContent, "f").type) {
                                case 'text':
                                    this._emit('textDone', AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentContent, "f").text, AssistantStream_classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f"));
                                    break;
                                case 'image_file':
                                    this._emit('imageFileDone', AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentContent, "f").image_file, AssistantStream_classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f"));
                                    break;
                            }
                        }
                        AssistantStream_classPrivateFieldSet(this, _AssistantStream_currentContentIndex, content.index, "f");
                    }
                    AssistantStream_classPrivateFieldSet(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], "f");
                }
            }
            break;
        case 'thread.message.completed':
        case 'thread.message.incomplete':
            //We emit the latest content we were working on on completion (including incomplete)
            if (AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentContentIndex, "f") !== undefined) {
                const currentContent = event.data.content[AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentContentIndex, "f")];
                if (currentContent) {
                    switch (currentContent.type) {
                        case 'image_file':
                            this._emit('imageFileDone', currentContent.image_file, AssistantStream_classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f"));
                            break;
                        case 'text':
                            this._emit('textDone', currentContent.text, AssistantStream_classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f"));
                            break;
                    }
                }
            }
            if (AssistantStream_classPrivateFieldGet(this, _AssistantStream_messageSnapshot, "f")) {
                this._emit('messageDone', event.data);
            }
            AssistantStream_classPrivateFieldSet(this, _AssistantStream_messageSnapshot, undefined, "f");
    }
}, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep(event) {
    const accumulatedRunStep = AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_accumulateRunStep).call(this, event);
    AssistantStream_classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, "f");
    switch (event.event) {
        case 'thread.run.step.created':
            this._emit('runStepCreated', event.data);
            break;
        case 'thread.run.step.delta':
            const delta = event.data.delta;
            if (delta.step_details &&
                delta.step_details.type == 'tool_calls' &&
                delta.step_details.tool_calls &&
                accumulatedRunStep.step_details.type == 'tool_calls') {
                for (const toolCall of delta.step_details.tool_calls) {
                    if (toolCall.index == AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentToolCallIndex, "f")) {
                        this._emit('toolCallDelta', toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);
                    }
                    else {
                        if (AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f")) {
                            this._emit('toolCallDone', AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f"));
                        }
                        AssistantStream_classPrivateFieldSet(this, _AssistantStream_currentToolCallIndex, toolCall.index, "f");
                        AssistantStream_classPrivateFieldSet(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], "f");
                        if (AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f"))
                            this._emit('toolCallCreated', AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f"));
                    }
                }
            }
            this._emit('runStepDelta', event.data.delta, accumulatedRunStep);
            break;
        case 'thread.run.step.completed':
        case 'thread.run.step.failed':
        case 'thread.run.step.cancelled':
        case 'thread.run.step.expired':
            AssistantStream_classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, undefined, "f");
            const details = event.data.step_details;
            if (details.type == 'tool_calls') {
                if (AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f")) {
                    this._emit('toolCallDone', AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f"));
                    AssistantStream_classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, "f");
                }
            }
            this._emit('runStepDone', event.data, accumulatedRunStep);
            break;
        case 'thread.run.step.in_progress':
            break;
    }
}, _AssistantStream_handleEvent = function _AssistantStream_handleEvent(event) {
    AssistantStream_classPrivateFieldGet(this, _AssistantStream_events, "f").push(event);
    this._emit('event', event);
}, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep(event) {
    switch (event.event) {
        case 'thread.run.step.created':
            AssistantStream_classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = event.data;
            return event.data;
        case 'thread.run.step.delta':
            let snapshot = AssistantStream_classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
            if (!snapshot) {
                throw Error('Received a RunStepDelta before creation of a snapshot');
            }
            let data = event.data;
            if (data.delta) {
                const accumulated = AssistantStream.accumulateDelta(snapshot, data.delta);
                AssistantStream_classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = accumulated;
            }
            return AssistantStream_classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
        case 'thread.run.step.completed':
        case 'thread.run.step.failed':
        case 'thread.run.step.cancelled':
        case 'thread.run.step.expired':
        case 'thread.run.step.in_progress':
            AssistantStream_classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = event.data;
            break;
    }
    if (AssistantStream_classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id])
        return AssistantStream_classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
    throw new Error('No snapshot available');
}, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage(event, snapshot) {
    let newContent = [];
    switch (event.event) {
        case 'thread.message.created':
            //On creation the snapshot is just the initial message
            return [event.data, newContent];
        case 'thread.message.delta':
            if (!snapshot) {
                throw Error('Received a delta with no existing snapshot (there should be one from message creation)');
            }
            let data = event.data;
            //If this delta does not have content, nothing to process
            if (data.delta.content) {
                for (const contentElement of data.delta.content) {
                    if (contentElement.index in snapshot.content) {
                        let currentContent = snapshot.content[contentElement.index];
                        snapshot.content[contentElement.index] = AssistantStream_classPrivateFieldGet(this, _AssistantStream_instances, "m", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);
                    }
                    else {
                        snapshot.content[contentElement.index] = contentElement;
                        // This is a new element
                        newContent.push(contentElement);
                    }
                }
            }
            return [snapshot, newContent];
        case 'thread.message.in_progress':
        case 'thread.message.completed':
        case 'thread.message.incomplete':
            //No changes on other thread events
            if (snapshot) {
                return [snapshot, newContent];
            }
            else {
                throw Error('Received thread message event with no existing snapshot');
            }
    }
    throw Error('Tried to accumulate a non-message event');
}, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent(contentElement, currentContent) {
    return AssistantStream.accumulateDelta(currentContent, contentElement);
}, _AssistantStream_handleRun = function _AssistantStream_handleRun(event) {
    AssistantStream_classPrivateFieldSet(this, _AssistantStream_currentRunSnapshot, event.data, "f");
    switch (event.event) {
        case 'thread.run.created':
            break;
        case 'thread.run.queued':
            break;
        case 'thread.run.in_progress':
            break;
        case 'thread.run.requires_action':
        case 'thread.run.cancelled':
        case 'thread.run.failed':
        case 'thread.run.completed':
        case 'thread.run.expired':
            AssistantStream_classPrivateFieldSet(this, _AssistantStream_finalRun, event.data, "f");
            if (AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f")) {
                this._emit('toolCallDone', AssistantStream_classPrivateFieldGet(this, _AssistantStream_currentToolCall, "f"));
                AssistantStream_classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, "f");
            }
            break;
        case 'thread.run.cancelling':
            break;
    }
};
function AssistantStream_assertNever(_x) { }
//# sourceMappingURL=AssistantStream.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/beta/threads/messages.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.



class messages_Messages extends APIResource {
    /**
     * Create a message.
     */
    create(threadId, body, options) {
        return this._client.post(`/threads/${threadId}/messages`, {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Retrieve a message.
     */
    retrieve(threadId, messageId, options) {
        return this._client.get(`/threads/${threadId}/messages/${messageId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Modifies a message.
     */
    update(threadId, messageId, body, options) {
        return this._client.post(`/threads/${threadId}/messages/${messageId}`, {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    list(threadId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list(threadId, {}, query);
        }
        return this._client.getAPIList(`/threads/${threadId}/messages`, MessagesPage, {
            query,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Deletes a message.
     */
    del(threadId, messageId, options) {
        return this._client.delete(`/threads/${threadId}/messages/${messageId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
}
class MessagesPage extends CursorPage {
}
messages_Messages.MessagesPage = MessagesPage;
//# sourceMappingURL=messages.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/beta/threads/runs/steps.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.



class Steps extends APIResource {
    retrieve(threadId, runId, stepId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.retrieve(threadId, runId, stepId, {}, query);
        }
        return this._client.get(`/threads/${threadId}/runs/${runId}/steps/${stepId}`, {
            query,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    list(threadId, runId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list(threadId, runId, {}, query);
        }
        return this._client.getAPIList(`/threads/${threadId}/runs/${runId}/steps`, RunStepsPage, {
            query,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
}
class RunStepsPage extends CursorPage {
}
Steps.RunStepsPage = RunStepsPage;
//# sourceMappingURL=steps.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/beta/threads/runs/runs.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.







class Runs extends APIResource {
    constructor() {
        super(...arguments);
        this.steps = new Steps(this._client);
    }
    create(threadId, params, options) {
        const { include, ...body } = params;
        return this._client.post(`/threads/${threadId}/runs`, {
            query: { include },
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
            stream: params.stream ?? false,
        });
    }
    /**
     * Retrieves a run.
     */
    retrieve(threadId, runId, options) {
        return this._client.get(`/threads/${threadId}/runs/${runId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Modifies a run.
     */
    update(threadId, runId, body, options) {
        return this._client.post(`/threads/${threadId}/runs/${runId}`, {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    list(threadId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list(threadId, {}, query);
        }
        return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {
            query,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Cancels a run that is `in_progress`.
     */
    cancel(threadId, runId, options) {
        return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * A helper to create a run an poll for a terminal state. More information on Run
     * lifecycles can be found here:
     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
     */
    async createAndPoll(threadId, body, options) {
        const run = await this.create(threadId, body, options);
        return await this.poll(threadId, run.id, options);
    }
    /**
     * Create a Run stream
     *
     * @deprecated use `stream` instead
     */
    createAndStream(threadId, body, options) {
        return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);
    }
    /**
     * A helper to poll a run status until it reaches a terminal state. More
     * information on Run lifecycles can be found here:
     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
     */
    async poll(threadId, runId, options) {
        const headers = { ...options?.headers, 'X-Stainless-Poll-Helper': 'true' };
        if (options?.pollIntervalMs) {
            headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();
        }
        while (true) {
            const { data: run, response } = await this.retrieve(threadId, runId, {
                ...options,
                headers: { ...options?.headers, ...headers },
            }).withResponse();
            switch (run.status) {
                //If we are in any sort of intermediate state we poll
                case 'queued':
                case 'in_progress':
                case 'cancelling':
                    let sleepInterval = 5000;
                    if (options?.pollIntervalMs) {
                        sleepInterval = options.pollIntervalMs;
                    }
                    else {
                        const headerInterval = response.headers.get('openai-poll-after-ms');
                        if (headerInterval) {
                            const headerIntervalMs = parseInt(headerInterval);
                            if (!isNaN(headerIntervalMs)) {
                                sleepInterval = headerIntervalMs;
                            }
                        }
                    }
                    await sleep(sleepInterval);
                    break;
                //We return the run in any terminal state.
                case 'requires_action':
                case 'incomplete':
                case 'cancelled':
                case 'completed':
                case 'failed':
                case 'expired':
                    return run;
            }
        }
    }
    /**
     * Create a Run stream
     */
    stream(threadId, body, options) {
        return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);
    }
    submitToolOutputs(threadId, runId, body, options) {
        return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
            stream: body.stream ?? false,
        });
    }
    /**
     * A helper to submit a tool output to a run and poll for a terminal run state.
     * More information on Run lifecycles can be found here:
     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
     */
    async submitToolOutputsAndPoll(threadId, runId, body, options) {
        const run = await this.submitToolOutputs(threadId, runId, body, options);
        return await this.poll(threadId, run.id, options);
    }
    /**
     * Submit the tool outputs from a previous run and stream the run to a terminal
     * state. More information on Run lifecycles can be found here:
     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
     */
    submitToolOutputsStream(threadId, runId, body, options) {
        return AssistantStream.createToolAssistantStream(threadId, runId, this._client.beta.threads.runs, body, options);
    }
}
class RunsPage extends CursorPage {
}
Runs.RunsPage = RunsPage;
Runs.Steps = Steps;
Runs.RunStepsPage = RunStepsPage;
//# sourceMappingURL=runs.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/beta/threads/threads.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.







class Threads extends APIResource {
    constructor() {
        super(...arguments);
        this.runs = new Runs(this._client);
        this.messages = new messages_Messages(this._client);
    }
    create(body = {}, options) {
        if (isRequestOptions(body)) {
            return this.create({}, body);
        }
        return this._client.post('/threads', {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Retrieves a thread.
     */
    retrieve(threadId, options) {
        return this._client.get(`/threads/${threadId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Modifies a thread.
     */
    update(threadId, body, options) {
        return this._client.post(`/threads/${threadId}`, {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    /**
     * Delete a thread.
     */
    del(threadId, options) {
        return this._client.delete(`/threads/${threadId}`, {
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
        });
    }
    createAndRun(body, options) {
        return this._client.post('/threads/runs', {
            body,
            ...options,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },
            stream: body.stream ?? false,
        });
    }
    /**
     * A helper to create a thread, start a run and then poll for a terminal state.
     * More information on Run lifecycles can be found here:
     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
     */
    async createAndRunPoll(body, options) {
        const run = await this.createAndRun(body, options);
        return await this.runs.poll(run.thread_id, run.id, options);
    }
    /**
     * Create a thread and stream the run back
     */
    createAndRunStream(body, options) {
        return AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);
    }
}
Threads.Runs = Runs;
Threads.RunsPage = RunsPage;
Threads.Messages = messages_Messages;
Threads.MessagesPage = MessagesPage;
//# sourceMappingURL=threads.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/beta/beta.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.









class Beta extends APIResource {
    constructor() {
        super(...arguments);
        this.realtime = new Realtime(this._client);
        this.chat = new chat_Chat(this._client);
        this.assistants = new Assistants(this._client);
        this.threads = new Threads(this._client);
    }
}
Beta.Realtime = Realtime;
Beta.Assistants = Assistants;
Beta.AssistantsPage = AssistantsPage;
Beta.Threads = Threads;
//# sourceMappingURL=beta.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/batches.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.



class Batches extends APIResource {
    /**
     * Creates and executes a batch from an uploaded file of requests
     */
    create(body, options) {
        return this._client.post('/batches', { body, ...options });
    }
    /**
     * Retrieves a batch.
     */
    retrieve(batchId, options) {
        return this._client.get(`/batches/${batchId}`, options);
    }
    list(query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/batches', BatchesPage, { query, ...options });
    }
    /**
     * Cancels an in-progress batch. The batch will be in status `cancelling` for up to
     * 10 minutes, before changing to `cancelled`, where it will have partial results
     * (if any) available in the output file.
     */
    cancel(batchId, options) {
        return this._client.post(`/batches/${batchId}/cancel`, options);
    }
}
class BatchesPage extends CursorPage {
}
Batches.BatchesPage = BatchesPage;
//# sourceMappingURL=batches.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/uploads/parts.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.


class Parts extends APIResource {
    /**
     * Adds a
     * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an
     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.
     * A Part represents a chunk of bytes from the file you are trying to upload.
     *
     * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload
     * maximum of 8 GB.
     *
     * It is possible to add multiple Parts in parallel. You can decide the intended
     * order of the Parts when you
     * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).
     */
    create(uploadId, body, options) {
        return this._client.post(`/uploads/${uploadId}/parts`, multipartFormRequestOptions({ body, ...options }));
    }
}
//# sourceMappingURL=parts.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/uploads/uploads.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.



class Uploads extends APIResource {
    constructor() {
        super(...arguments);
        this.parts = new Parts(this._client);
    }
    /**
     * Creates an intermediate
     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object
     * that you can add
     * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.
     * Currently, an Upload can accept at most 8 GB in total and expires after an hour
     * after you create it.
     *
     * Once you complete the Upload, we will create a
     * [File](https://platform.openai.com/docs/api-reference/files/object) object that
     * contains all the parts you uploaded. This File is usable in the rest of our
     * platform as a regular File object.
     *
     * For certain `purpose` values, the correct `mime_type` must be specified. Please
     * refer to documentation for the
     * [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).
     *
     * For guidance on the proper filename extensions for each purpose, please follow
     * the documentation on
     * [creating a File](https://platform.openai.com/docs/api-reference/files/create).
     */
    create(body, options) {
        return this._client.post('/uploads', { body, ...options });
    }
    /**
     * Cancels the Upload. No Parts may be added after an Upload is cancelled.
     */
    cancel(uploadId, options) {
        return this._client.post(`/uploads/${uploadId}/cancel`, options);
    }
    /**
     * Completes the
     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).
     *
     * Within the returned Upload object, there is a nested
     * [File](https://platform.openai.com/docs/api-reference/files/object) object that
     * is ready to use in the rest of the platform.
     *
     * You can specify the order of the Parts by passing in an ordered list of the Part
     * IDs.
     *
     * The number of bytes uploaded upon completion must match the number of bytes
     * initially specified when creating the Upload object. No Parts may be added after
     * an Upload is completed.
     */
    complete(uploadId, body, options) {
        return this._client.post(`/uploads/${uploadId}/complete`, { body, ...options });
    }
}
Uploads.Parts = Parts;
//# sourceMappingURL=uploads.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/ResponsesParser.mjs


function maybeParseResponse(response, params) {
    if (!params || !ResponsesParser_hasAutoParseableInput(params)) {
        return {
            ...response,
            output_parsed: null,
            output: response.output.map((item) => {
                if (item.type === 'function_call') {
                    return {
                        ...item,
                        parsed_arguments: null,
                    };
                }
                if (item.type === 'message') {
                    return {
                        ...item,
                        content: item.content.map((content) => ({
                            ...content,
                            parsed: null,
                        })),
                    };
                }
                else {
                    return item;
                }
            }),
        };
    }
    return parseResponse(response, params);
}
function parseResponse(response, params) {
    const output = response.output.map((item) => {
        if (item.type === 'function_call') {
            return {
                ...item,
                parsed_arguments: ResponsesParser_parseToolCall(params, item),
            };
        }
        if (item.type === 'message') {
            const content = item.content.map((content) => {
                if (content.type === 'output_text') {
                    return {
                        ...content,
                        parsed: parseTextFormat(params, content.text),
                    };
                }
                return content;
            });
            return {
                ...item,
                content,
            };
        }
        return item;
    });
    const parsed = Object.assign({}, response, { output });
    if (!Object.getOwnPropertyDescriptor(response, 'output_text')) {
        addOutputText(parsed);
    }
    Object.defineProperty(parsed, 'output_parsed', {
        enumerable: true,
        get() {
            for (const output of parsed.output) {
                if (output.type !== 'message') {
                    continue;
                }
                for (const content of output.content) {
                    if (content.type === 'output_text' && content.parsed !== null) {
                        return content.parsed;
                    }
                }
            }
            return null;
        },
    });
    return parsed;
}
function parseTextFormat(params, content) {
    if (params.text?.format?.type !== 'json_schema') {
        return null;
    }
    if ('$parseRaw' in params.text?.format) {
        const text_format = params.text?.format;
        return text_format.$parseRaw(content);
    }
    return JSON.parse(content);
}
function ResponsesParser_hasAutoParseableInput(params) {
    if (isAutoParsableResponseFormat(params.text?.format)) {
        return true;
    }
    return false;
}
function makeParseableResponseTool(tool, { parser, callback, }) {
    const obj = { ...tool };
    Object.defineProperties(obj, {
        $brand: {
            value: 'auto-parseable-tool',
            enumerable: false,
        },
        $parseRaw: {
            value: parser,
            enumerable: false,
        },
        $callback: {
            value: callback,
            enumerable: false,
        },
    });
    return obj;
}
function ResponsesParser_isAutoParsableTool(tool) {
    return tool?.['$brand'] === 'auto-parseable-tool';
}
function getInputToolByName(input_tools, name) {
    return input_tools.find((tool) => tool.type === 'function' && tool.name === name);
}
function ResponsesParser_parseToolCall(params, toolCall) {
    const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);
    return {
        ...toolCall,
        ...toolCall,
        parsed_arguments: ResponsesParser_isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.arguments)
            : inputTool?.strict ? JSON.parse(toolCall.arguments)
                : null,
    };
}
function ResponsesParser_shouldParseToolCall(params, toolCall) {
    if (!params) {
        return false;
    }
    const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);
    return ResponsesParser_isAutoParsableTool(inputTool) || inputTool?.strict || false;
}
function ResponsesParser_validateInputTools(tools) {
    for (const tool of tools ?? []) {
        if (tool.type !== 'function') {
            throw new OpenAIError(`Currently only \`function\` tool types support auto-parsing; Received \`${tool.type}\``);
        }
        if (tool.function.strict !== true) {
            throw new OpenAIError(`The \`${tool.function.name}\` tool is not marked with \`strict: true\`. Only strict function tools can be auto-parsed`);
        }
    }
}
function addOutputText(rsp) {
    const texts = [];
    for (const output of rsp.output) {
        if (output.type !== 'message') {
            continue;
        }
        for (const content of output.content) {
            if (content.type === 'output_text') {
                texts.push(content.text);
            }
        }
    }
    rsp.output_text = texts.join('');
}
//# sourceMappingURL=ResponsesParser.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/responses/input-items.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.



class InputItems extends APIResource {
    list(responseId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list(responseId, {}, query);
        }
        return this._client.getAPIList(`/responses/${responseId}/input_items`, ResponseItemsPage, {
            query,
            ...options,
        });
    }
}

//# sourceMappingURL=input-items.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/lib/responses/ResponseStream.mjs
var ResponseStream_classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var ResponseStream_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ResponseStream_instances, _ResponseStream_params, _ResponseStream_currentResponseSnapshot, _ResponseStream_finalResponse, _ResponseStream_beginRequest, _ResponseStream_addEvent, _ResponseStream_endRequest, _ResponseStream_accumulateResponse;



class ResponseStream extends EventStream {
    constructor(params) {
        super();
        _ResponseStream_instances.add(this);
        _ResponseStream_params.set(this, void 0);
        _ResponseStream_currentResponseSnapshot.set(this, void 0);
        _ResponseStream_finalResponse.set(this, void 0);
        ResponseStream_classPrivateFieldSet(this, _ResponseStream_params, params, "f");
    }
    static createResponse(client, params, options) {
        const runner = new ResponseStream(params);
        runner._run(() => runner._createResponse(client, params, {
            ...options,
            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },
        }));
        return runner;
    }
    async _createResponse(client, params, options) {
        const signal = options?.signal;
        if (signal) {
            if (signal.aborted)
                this.controller.abort();
            signal.addEventListener('abort', () => this.controller.abort());
        }
        ResponseStream_classPrivateFieldGet(this, _ResponseStream_instances, "m", _ResponseStream_beginRequest).call(this);
        const stream = await client.responses.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });
        this._connected();
        for await (const event of stream) {
            ResponseStream_classPrivateFieldGet(this, _ResponseStream_instances, "m", _ResponseStream_addEvent).call(this, event);
        }
        if (stream.controller.signal?.aborted) {
            throw new APIUserAbortError();
        }
        return ResponseStream_classPrivateFieldGet(this, _ResponseStream_instances, "m", _ResponseStream_endRequest).call(this);
    }
    [(_ResponseStream_params = new WeakMap(), _ResponseStream_currentResponseSnapshot = new WeakMap(), _ResponseStream_finalResponse = new WeakMap(), _ResponseStream_instances = new WeakSet(), _ResponseStream_beginRequest = function _ResponseStream_beginRequest() {
        if (this.ended)
            return;
        ResponseStream_classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, "f");
    }, _ResponseStream_addEvent = function _ResponseStream_addEvent(event) {
        if (this.ended)
            return;
        const response = ResponseStream_classPrivateFieldGet(this, _ResponseStream_instances, "m", _ResponseStream_accumulateResponse).call(this, event);
        this._emit('event', event);
        switch (event.type) {
            case 'response.output_text.delta': {
                const output = response.output[event.output_index];
                if (!output) {
                    throw new error_OpenAIError(`missing output at index ${event.output_index}`);
                }
                if (output.type === 'message') {
                    const content = output.content[event.content_index];
                    if (!content) {
                        throw new error_OpenAIError(`missing content at index ${event.content_index}`);
                    }
                    if (content.type !== 'output_text') {
                        throw new error_OpenAIError(`expected content to be 'output_text', got ${content.type}`);
                    }
                    this._emit('response.output_text.delta', {
                        ...event,
                        snapshot: content.text,
                    });
                }
                break;
            }
            case 'response.function_call_arguments.delta': {
                const output = response.output[event.output_index];
                if (!output) {
                    throw new error_OpenAIError(`missing output at index ${event.output_index}`);
                }
                if (output.type === 'function_call') {
                    this._emit('response.function_call_arguments.delta', {
                        ...event,
                        snapshot: output.arguments,
                    });
                }
                break;
            }
            default:
                // @ts-ignore
                this._emit(event.type, event);
                break;
        }
    }, _ResponseStream_endRequest = function _ResponseStream_endRequest() {
        if (this.ended) {
            throw new error_OpenAIError(`stream has ended, this shouldn't happen`);
        }
        const snapshot = ResponseStream_classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, "f");
        if (!snapshot) {
            throw new error_OpenAIError(`request ended without sending any events`);
        }
        ResponseStream_classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, "f");
        const parsedResponse = finalizeResponse(snapshot, ResponseStream_classPrivateFieldGet(this, _ResponseStream_params, "f"));
        ResponseStream_classPrivateFieldSet(this, _ResponseStream_finalResponse, parsedResponse, "f");
        return parsedResponse;
    }, _ResponseStream_accumulateResponse = function _ResponseStream_accumulateResponse(event) {
        let snapshot = ResponseStream_classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, "f");
        if (!snapshot) {
            if (event.type !== 'response.created') {
                throw new error_OpenAIError(`When snapshot hasn't been set yet, expected 'response.created' event, got ${event.type}`);
            }
            snapshot = ResponseStream_classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, "f");
            return snapshot;
        }
        switch (event.type) {
            case 'response.output_item.added': {
                snapshot.output.push(event.item);
                break;
            }
            case 'response.content_part.added': {
                const output = snapshot.output[event.output_index];
                if (!output) {
                    throw new error_OpenAIError(`missing output at index ${event.output_index}`);
                }
                if (output.type === 'message') {
                    output.content.push(event.part);
                }
                break;
            }
            case 'response.output_text.delta': {
                const output = snapshot.output[event.output_index];
                if (!output) {
                    throw new error_OpenAIError(`missing output at index ${event.output_index}`);
                }
                if (output.type === 'message') {
                    const content = output.content[event.content_index];
                    if (!content) {
                        throw new error_OpenAIError(`missing content at index ${event.content_index}`);
                    }
                    if (content.type !== 'output_text') {
                        throw new error_OpenAIError(`expected content to be 'output_text', got ${content.type}`);
                    }
                    content.text += event.delta;
                }
                break;
            }
            case 'response.function_call_arguments.delta': {
                const output = snapshot.output[event.output_index];
                if (!output) {
                    throw new error_OpenAIError(`missing output at index ${event.output_index}`);
                }
                if (output.type === 'function_call') {
                    output.arguments += event.delta;
                }
                break;
            }
            case 'response.completed': {
                ResponseStream_classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, "f");
                break;
            }
        }
        return snapshot;
    }, Symbol.asyncIterator)]() {
        const pushQueue = [];
        const readQueue = [];
        let done = false;
        this.on('event', (event) => {
            const reader = readQueue.shift();
            if (reader) {
                reader.resolve(event);
            }
            else {
                pushQueue.push(event);
            }
        });
        this.on('end', () => {
            done = true;
            for (const reader of readQueue) {
                reader.resolve(undefined);
            }
            readQueue.length = 0;
        });
        this.on('abort', (err) => {
            done = true;
            for (const reader of readQueue) {
                reader.reject(err);
            }
            readQueue.length = 0;
        });
        this.on('error', (err) => {
            done = true;
            for (const reader of readQueue) {
                reader.reject(err);
            }
            readQueue.length = 0;
        });
        return {
            next: async () => {
                if (!pushQueue.length) {
                    if (done) {
                        return { value: undefined, done: true };
                    }
                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((event) => (event ? { value: event, done: false } : { value: undefined, done: true }));
                }
                const event = pushQueue.shift();
                return { value: event, done: false };
            },
            return: async () => {
                this.abort();
                return { value: undefined, done: true };
            },
        };
    }
    /**
     * @returns a promise that resolves with the final Response, or rejects
     * if an error occurred or the stream ended prematurely without producing a REsponse.
     */
    async finalResponse() {
        await this.done();
        const response = ResponseStream_classPrivateFieldGet(this, _ResponseStream_finalResponse, "f");
        if (!response)
            throw new error_OpenAIError('stream ended without producing a ChatCompletion');
        return response;
    }
}
function finalizeResponse(snapshot, params) {
    return maybeParseResponse(snapshot, params);
}
//# sourceMappingURL=ResponseStream.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/resources/responses/responses.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.







class Responses extends APIResource {
    constructor() {
        super(...arguments);
        this.inputItems = new InputItems(this._client);
    }
    create(body, options) {
        return this._client.post('/responses', { body, ...options, stream: body.stream ?? false })._thenUnwrap((rsp) => {
            if ('object' in rsp && rsp.object === 'response') {
                addOutputText(rsp);
            }
            return rsp;
        });
    }
    retrieve(responseId, query = {}, options) {
        if (isRequestOptions(query)) {
            return this.retrieve(responseId, {}, query);
        }
        return this._client.get(`/responses/${responseId}`, { query, ...options });
    }
    /**
     * Deletes a model response with the given ID.
     */
    del(responseId, options) {
        return this._client.delete(`/responses/${responseId}`, {
            ...options,
            headers: { Accept: '*/*', ...options?.headers },
        });
    }
    parse(body, options) {
        return this._client.responses
            .create(body, options)
            ._thenUnwrap((response) => parseResponse(response, body));
    }
    /**
     * Creates a chat completion stream
     */
    stream(body, options) {
        return ResponseStream.createResponse(this._client, body, options);
    }
}
class ResponseItemsPage extends CursorPage {
}
Responses.InputItems = InputItems;
//# sourceMappingURL=responses.mjs.map
;// CONCATENATED MODULE: ./node_modules/openai/index.mjs
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var _a;





















/**
 * API Client for interfacing with the OpenAI API.
 */
class OpenAI extends APIClient {
    /**
     * API Client for interfacing with the OpenAI API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]
     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]
     * @param {string | null | undefined} [opts.project=process.env['OPENAI_PROJECT_ID'] ?? null]
     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.
     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
     */
    constructor({ baseURL = readEnv('OPENAI_BASE_URL'), apiKey = readEnv('OPENAI_API_KEY'), organization = readEnv('OPENAI_ORG_ID') ?? null, project = readEnv('OPENAI_PROJECT_ID') ?? null, ...opts } = {}) {
        if (apiKey === undefined) {
            throw new error_OpenAIError("The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).");
        }
        const options = {
            apiKey,
            organization,
            project,
            ...opts,
            baseURL: baseURL || `https://api.openai.com/v1`,
        };
        if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {
            throw new error_OpenAIError("It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n");
        }
        super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 600000 /* 10 minutes */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.completions = new Completions(this);
        this.chat = new Chat(this);
        this.embeddings = new Embeddings(this);
        this.files = new Files(this);
        this.images = new Images(this);
        this.audio = new Audio(this);
        this.moderations = new Moderations(this);
        this.models = new Models(this);
        this.fineTuning = new FineTuning(this);
        this.vectorStores = new VectorStores(this);
        this.beta = new Beta(this);
        this.batches = new Batches(this);
        this.uploads = new Uploads(this);
        this.responses = new Responses(this);
        this._options = options;
        this.apiKey = apiKey;
        this.organization = organization;
        this.project = project;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            'OpenAI-Organization': this.organization,
            'OpenAI-Project': this.project,
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.apiKey}` };
    }
    stringifyQuery(query) {
        return stringify(query, { arrayFormat: 'brackets' });
    }
}
_a = OpenAI;
OpenAI.OpenAI = _a;
OpenAI.DEFAULT_TIMEOUT = 600000; // 10 minutes
OpenAI.OpenAIError = error_OpenAIError;
OpenAI.APIError = APIError;
OpenAI.APIConnectionError = APIConnectionError;
OpenAI.APIConnectionTimeoutError = APIConnectionTimeoutError;
OpenAI.APIUserAbortError = APIUserAbortError;
OpenAI.NotFoundError = NotFoundError;
OpenAI.ConflictError = ConflictError;
OpenAI.RateLimitError = RateLimitError;
OpenAI.BadRequestError = BadRequestError;
OpenAI.AuthenticationError = AuthenticationError;
OpenAI.InternalServerError = InternalServerError;
OpenAI.PermissionDeniedError = PermissionDeniedError;
OpenAI.UnprocessableEntityError = UnprocessableEntityError;
OpenAI.toFile = toFile;
OpenAI.fileFromPath = fileFromPath;
OpenAI.Completions = Completions;
OpenAI.Chat = Chat;
OpenAI.ChatCompletionsPage = ChatCompletionsPage;
OpenAI.Embeddings = Embeddings;
OpenAI.Files = Files;
OpenAI.FileObjectsPage = FileObjectsPage;
OpenAI.Images = Images;
OpenAI.Audio = Audio;
OpenAI.Moderations = Moderations;
OpenAI.Models = Models;
OpenAI.ModelsPage = ModelsPage;
OpenAI.FineTuning = FineTuning;
OpenAI.VectorStores = VectorStores;
OpenAI.VectorStoresPage = VectorStoresPage;
OpenAI.VectorStoreSearchResponsesPage = VectorStoreSearchResponsesPage;
OpenAI.Beta = Beta;
OpenAI.Batches = Batches;
OpenAI.BatchesPage = BatchesPage;
OpenAI.Uploads = Uploads;
OpenAI.Responses = Responses;
/** API Client for interfacing with the Azure OpenAI API. */
class AzureOpenAI extends OpenAI {
    /**
     * API Client for interfacing with the Azure OpenAI API.
     *
     * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]
     * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`
     * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]
     * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.
     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]
     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.
     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
     */
    constructor({ baseURL = readEnv('OPENAI_BASE_URL'), apiKey = readEnv('AZURE_OPENAI_API_KEY'), apiVersion = readEnv('OPENAI_API_VERSION'), endpoint, deployment, azureADTokenProvider, dangerouslyAllowBrowser, ...opts } = {}) {
        if (!apiVersion) {
            throw new error_OpenAIError("The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).");
        }
        if (typeof azureADTokenProvider === 'function') {
            dangerouslyAllowBrowser = true;
        }
        if (!azureADTokenProvider && !apiKey) {
            throw new error_OpenAIError('Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.');
        }
        if (azureADTokenProvider && apiKey) {
            throw new error_OpenAIError('The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.');
        }
        // define a sentinel value to avoid any typing issues
        apiKey ?? (apiKey = API_KEY_SENTINEL);
        opts.defaultQuery = { ...opts.defaultQuery, 'api-version': apiVersion };
        if (!baseURL) {
            if (!endpoint) {
                endpoint = process.env['AZURE_OPENAI_ENDPOINT'];
            }
            if (!endpoint) {
                throw new error_OpenAIError('Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable');
            }
            baseURL = `${endpoint}/openai`;
        }
        else {
            if (endpoint) {
                throw new error_OpenAIError('baseURL and endpoint are mutually exclusive');
            }
        }
        super({
            apiKey,
            baseURL,
            ...opts,
            ...(dangerouslyAllowBrowser !== undefined ? { dangerouslyAllowBrowser } : {}),
        });
        this.apiVersion = '';
        this._azureADTokenProvider = azureADTokenProvider;
        this.apiVersion = apiVersion;
        this.deploymentName = deployment;
    }
    buildRequest(options, props = {}) {
        if (_deployments_endpoints.has(options.path) && options.method === 'post' && options.body !== undefined) {
            if (!isObj(options.body)) {
                throw new Error('Expected request body to be an object');
            }
            const model = this.deploymentName || options.body['model'] || options.__metadata?.['model'];
            if (model !== undefined && !this.baseURL.includes('/deployments')) {
                options.path = `/deployments/${model}${options.path}`;
            }
        }
        return super.buildRequest(options, props);
    }
    async _getAzureADToken() {
        if (typeof this._azureADTokenProvider === 'function') {
            const token = await this._azureADTokenProvider();
            if (!token || typeof token !== 'string') {
                throw new error_OpenAIError(`Expected 'azureADTokenProvider' argument to return a string but it returned ${token}`);
            }
            return token;
        }
        return undefined;
    }
    authHeaders(opts) {
        return {};
    }
    async prepareOptions(opts) {
        /**
         * The user should provide a bearer token provider if they want
         * to use Azure AD authentication. The user shouldn't set the
         * Authorization header manually because the header is overwritten
         * with the Azure AD token if a bearer token provider is provided.
         */
        if (opts.headers?.['api-key']) {
            return super.prepareOptions(opts);
        }
        const token = await this._getAzureADToken();
        opts.headers ?? (opts.headers = {});
        if (token) {
            opts.headers['Authorization'] = `Bearer ${token}`;
        }
        else if (this.apiKey !== API_KEY_SENTINEL) {
            opts.headers['api-key'] = this.apiKey;
        }
        else {
            throw new error_OpenAIError('Unable to handle auth');
        }
        return super.prepareOptions(opts);
    }
}
const _deployments_endpoints = new Set([
    '/completions',
    '/chat/completions',
    '/embeddings',
    '/audio/transcriptions',
    '/audio/translations',
    '/audio/speech',
    '/images/generations',
]);
const API_KEY_SENTINEL = '<Missing Key>';


/* harmony default export */ const openai = (OpenAI);
//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./src/plugin.ts



async function plugin_plugin(context) {
    const { env, config } = context;
    const openRouterClient = new openai({
        apiKey: env.OPENROUTER_API_KEY,
        baseURL: config.openRouterBaseUrl,
    });
    context.adapters = createAdapters(openRouterClient, context);
    return await callCallbacks(context, context.eventName);
}

;// CONCATENATED MODULE: ./src/main.ts




createActionsPlugin((context) => {
    return plugin_plugin({
        ...context,
        adapters: {},
    });
}, {
    envSchema: envSchema,
    postCommentOnError: true,
    settingsSchema: pluginSettingsSchema,
    logLevel: process.env.LOG_LEVEL ?? "info",
    kernelPublicKey: process.env.KERNEL_PUBLIC_KEY,
}).catch(console.error);

})();

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=index.js.map